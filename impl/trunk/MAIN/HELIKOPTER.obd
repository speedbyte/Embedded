
HELIKOPTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .interp       00000019  00008134  00008134  00000134  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.ABI-tag 00000020  00008150  00008150  00000150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  00008170  00008170  00000170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .hash         0000014c  00008194  00008194  00000194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dynsym       000002c0  000082e0  000082e0  000002e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynstr       000001c5  000085a0  000085a0  000005a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .gnu.version  00000058  00008766  00008766  00000766  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version_r 00000070  000087c0  000087c0  000007c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rel.dyn      00000008  00008830  00008830  00000830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rel.plt      00000140  00008838  00008838  00000838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .init         0000000c  00008978  00008978  00000978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .plt          000001f4  00008984  00008984  00000984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text         00007d8c  00008b78  00008b78  00000b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .fini         00000008  00010904  00010904  00008904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .rodata       000007ec  0001090c  0001090c  0000890c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .ARM.exidx    00000008  000110f8  000110f8  000090f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame     00000004  00011100  00011100  00009100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .init_array   00000004  00019104  00019104  00009104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 18 .fini_array   00000004  00019108  00019108  00009108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 19 .jcr          00000004  0001910c  0001910c  0000910c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 20 .dynamic      00000108  00019110  00019110  00009110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .got          000000b0  00019218  00019218  00009218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 22 .data         000000a4  000192c8  000192c8  000092c8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .bss          00000b0c  00019370  00019370  0000936c  2**3
                  ALLOC
 24 .comment      0000005b  00000000  00000000  0000936c  2**0
                  CONTENTS, READONLY
 25 .ARM.attributes 00000031  00000000  00000000  000093c7  2**0
                  CONTENTS, READONLY
 26 .debug_aranges 00000260  00000000  00000000  000093f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_info   00004324  00000000  00000000  00009658  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_abbrev 00001102  00000000  00000000  0000d97c  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_line   00005329  00000000  00000000  0000ea7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .debug_frame  00001098  00000000  00000000  00013da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 31 .debug_str    00018696  00000000  00000000  00014e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 32 .debug_macro  00007832  00000000  00000000  0002d4d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .init:

00008978 <_init>:
    8978:	e92d4008 	push	{r3, lr}
    897c:	eb00008c 	bl	8bb4 <call_gmon_start>
    8980:	e8bd8008 	pop	{r3, pc}

Disassembly of section .plt:

00008984 <.plt>:
    8984:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8988:	e59fe004 	ldr	lr, [pc, #4]	; 8994 <_init+0x1c>
    898c:	e08fe00e 	add	lr, pc, lr
    8990:	e5bef008 	ldr	pc, [lr, #8]!
    8994:	00010884 	.word	0x00010884
    8998:	e28fc600 	add	ip, pc, #0, 12
    899c:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    89a0:	e5bcf884 	ldr	pc, [ip, #2180]!	; 0x884
    89a4:	e28fc600 	add	ip, pc, #0, 12
    89a8:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    89ac:	e5bcf87c 	ldr	pc, [ip, #2172]!	; 0x87c
    89b0:	e28fc600 	add	ip, pc, #0, 12
    89b4:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    89b8:	e5bcf874 	ldr	pc, [ip, #2164]!	; 0x874
    89bc:	e28fc600 	add	ip, pc, #0, 12
    89c0:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    89c4:	e5bcf86c 	ldr	pc, [ip, #2156]!	; 0x86c
    89c8:	e28fc600 	add	ip, pc, #0, 12
    89cc:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    89d0:	e5bcf864 	ldr	pc, [ip, #2148]!	; 0x864
    89d4:	e28fc600 	add	ip, pc, #0, 12
    89d8:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    89dc:	e5bcf85c 	ldr	pc, [ip, #2140]!	; 0x85c
    89e0:	e28fc600 	add	ip, pc, #0, 12
    89e4:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    89e8:	e5bcf854 	ldr	pc, [ip, #2132]!	; 0x854
    89ec:	e28fc600 	add	ip, pc, #0, 12
    89f0:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    89f4:	e5bcf84c 	ldr	pc, [ip, #2124]!	; 0x84c
    89f8:	e28fc600 	add	ip, pc, #0, 12
    89fc:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a00:	e5bcf844 	ldr	pc, [ip, #2116]!	; 0x844
    8a04:	e28fc600 	add	ip, pc, #0, 12
    8a08:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a0c:	e5bcf83c 	ldr	pc, [ip, #2108]!	; 0x83c
    8a10:	e28fc600 	add	ip, pc, #0, 12
    8a14:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a18:	e5bcf834 	ldr	pc, [ip, #2100]!	; 0x834
    8a1c:	e28fc600 	add	ip, pc, #0, 12
    8a20:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a24:	e5bcf82c 	ldr	pc, [ip, #2092]!	; 0x82c
    8a28:	e28fc600 	add	ip, pc, #0, 12
    8a2c:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a30:	e5bcf824 	ldr	pc, [ip, #2084]!	; 0x824
    8a34:	e28fc600 	add	ip, pc, #0, 12
    8a38:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a3c:	e5bcf81c 	ldr	pc, [ip, #2076]!	; 0x81c
    8a40:	e28fc600 	add	ip, pc, #0, 12
    8a44:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a48:	e5bcf814 	ldr	pc, [ip, #2068]!	; 0x814
    8a4c:	e28fc600 	add	ip, pc, #0, 12
    8a50:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a54:	e5bcf80c 	ldr	pc, [ip, #2060]!	; 0x80c
    8a58:	e28fc600 	add	ip, pc, #0, 12
    8a5c:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a60:	e5bcf804 	ldr	pc, [ip, #2052]!	; 0x804
    8a64:	e28fc600 	add	ip, pc, #0, 12
    8a68:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a6c:	e5bcf7fc 	ldr	pc, [ip, #2044]!	; 0x7fc
    8a70:	e28fc600 	add	ip, pc, #0, 12
    8a74:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a78:	e5bcf7f4 	ldr	pc, [ip, #2036]!	; 0x7f4
    8a7c:	e28fc600 	add	ip, pc, #0, 12
    8a80:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a84:	e5bcf7ec 	ldr	pc, [ip, #2028]!	; 0x7ec
    8a88:	e28fc600 	add	ip, pc, #0, 12
    8a8c:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a90:	e5bcf7e4 	ldr	pc, [ip, #2020]!	; 0x7e4
    8a94:	e28fc600 	add	ip, pc, #0, 12
    8a98:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a9c:	e5bcf7dc 	ldr	pc, [ip, #2012]!	; 0x7dc
    8aa0:	e28fc600 	add	ip, pc, #0, 12
    8aa4:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8aa8:	e5bcf7d4 	ldr	pc, [ip, #2004]!	; 0x7d4
    8aac:	e28fc600 	add	ip, pc, #0, 12
    8ab0:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8ab4:	e5bcf7cc 	ldr	pc, [ip, #1996]!	; 0x7cc
    8ab8:	e28fc600 	add	ip, pc, #0, 12
    8abc:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8ac0:	e5bcf7c4 	ldr	pc, [ip, #1988]!	; 0x7c4
    8ac4:	e28fc600 	add	ip, pc, #0, 12
    8ac8:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8acc:	e5bcf7bc 	ldr	pc, [ip, #1980]!	; 0x7bc
    8ad0:	e28fc600 	add	ip, pc, #0, 12
    8ad4:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8ad8:	e5bcf7b4 	ldr	pc, [ip, #1972]!	; 0x7b4
    8adc:	e28fc600 	add	ip, pc, #0, 12
    8ae0:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8ae4:	e5bcf7ac 	ldr	pc, [ip, #1964]!	; 0x7ac
    8ae8:	e28fc600 	add	ip, pc, #0, 12
    8aec:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8af0:	e5bcf7a4 	ldr	pc, [ip, #1956]!	; 0x7a4
    8af4:	e28fc600 	add	ip, pc, #0, 12
    8af8:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8afc:	e5bcf79c 	ldr	pc, [ip, #1948]!	; 0x79c
    8b00:	e28fc600 	add	ip, pc, #0, 12
    8b04:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8b08:	e5bcf794 	ldr	pc, [ip, #1940]!	; 0x794
    8b0c:	e28fc600 	add	ip, pc, #0, 12
    8b10:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8b14:	e5bcf78c 	ldr	pc, [ip, #1932]!	; 0x78c
    8b18:	e28fc600 	add	ip, pc, #0, 12
    8b1c:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8b20:	e5bcf784 	ldr	pc, [ip, #1924]!	; 0x784
    8b24:	e28fc600 	add	ip, pc, #0, 12
    8b28:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8b2c:	e5bcf77c 	ldr	pc, [ip, #1916]!	; 0x77c
    8b30:	e28fc600 	add	ip, pc, #0, 12
    8b34:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8b38:	e5bcf774 	ldr	pc, [ip, #1908]!	; 0x774
    8b3c:	e28fc600 	add	ip, pc, #0, 12
    8b40:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8b44:	e5bcf76c 	ldr	pc, [ip, #1900]!	; 0x76c
    8b48:	e28fc600 	add	ip, pc, #0, 12
    8b4c:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8b50:	e5bcf764 	ldr	pc, [ip, #1892]!	; 0x764
    8b54:	e28fc600 	add	ip, pc, #0, 12
    8b58:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8b5c:	e5bcf75c 	ldr	pc, [ip, #1884]!	; 0x75c
    8b60:	e28fc600 	add	ip, pc, #0, 12
    8b64:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8b68:	e5bcf754 	ldr	pc, [ip, #1876]!	; 0x754
    8b6c:	e28fc600 	add	ip, pc, #0, 12
    8b70:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8b74:	e5bcf74c 	ldr	pc, [ip, #1868]!	; 0x74c

Disassembly of section .text:

00008b78 <_start>:
    8b78:	e3a0b000 	mov	fp, #0
    8b7c:	e3a0e000 	mov	lr, #0
    8b80:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    8b84:	e1a0200d 	mov	r2, sp
    8b88:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
    8b8c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    8b90:	e59fc010 	ldr	ip, [pc, #16]	; 8ba8 <_start+0x30>
    8b94:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
    8b98:	e59f000c 	ldr	r0, [pc, #12]	; 8bac <_start+0x34>
    8b9c:	e59f300c 	ldr	r3, [pc, #12]	; 8bb0 <_start+0x38>
    8ba0:	ebffff88 	bl	89c8 <_init+0x50>
    8ba4:	ebffff7e 	bl	89a4 <_init+0x2c>
    8ba8:	00010900 	.word	0x00010900
    8bac:	00008ca0 	.word	0x00008ca0
    8bb0:	000108a0 	.word	0x000108a0

00008bb4 <call_gmon_start>:
    8bb4:	e59f3014 	ldr	r3, [pc, #20]	; 8bd0 <call_gmon_start+0x1c>
    8bb8:	e59f2014 	ldr	r2, [pc, #20]	; 8bd4 <call_gmon_start+0x20>
    8bbc:	e08f3003 	add	r3, pc, r3
    8bc0:	e7933002 	ldr	r3, [r3, r2]
    8bc4:	e3530000 	cmp	r3, #0
    8bc8:	012fff1e 	bxeq	lr
    8bcc:	eaffff80 	b	89d4 <_init+0x5c>
    8bd0:	00010654 	.word	0x00010654
    8bd4:	000000ac 	.word	0x000000ac

00008bd8 <deregister_tm_clones>:
    8bd8:	e59f301c 	ldr	r3, [pc, #28]	; 8bfc <deregister_tm_clones+0x24>
    8bdc:	e59f001c 	ldr	r0, [pc, #28]	; 8c00 <deregister_tm_clones+0x28>
    8be0:	e0603003 	rsb	r3, r0, r3
    8be4:	e3530006 	cmp	r3, #6
    8be8:	912fff1e 	bxls	lr
    8bec:	e59f3010 	ldr	r3, [pc, #16]	; 8c04 <deregister_tm_clones+0x2c>
    8bf0:	e3530000 	cmp	r3, #0
    8bf4:	012fff1e 	bxeq	lr
    8bf8:	e12fff13 	bx	r3
    8bfc:	0001936f 	.word	0x0001936f
    8c00:	0001936c 	.word	0x0001936c
    8c04:	00000000 	.word	0x00000000

00008c08 <register_tm_clones>:
    8c08:	e59f3024 	ldr	r3, [pc, #36]	; 8c34 <register_tm_clones+0x2c>
    8c0c:	e59f0024 	ldr	r0, [pc, #36]	; 8c38 <register_tm_clones+0x30>
    8c10:	e0603003 	rsb	r3, r0, r3
    8c14:	e1a03143 	asr	r3, r3, #2
    8c18:	e0833fa3 	add	r3, r3, r3, lsr #31
    8c1c:	e1b010c3 	asrs	r1, r3, #1
    8c20:	012fff1e 	bxeq	lr
    8c24:	e59f2010 	ldr	r2, [pc, #16]	; 8c3c <register_tm_clones+0x34>
    8c28:	e3520000 	cmp	r2, #0
    8c2c:	012fff1e 	bxeq	lr
    8c30:	e12fff12 	bx	r2
    8c34:	0001936c 	.word	0x0001936c
    8c38:	0001936c 	.word	0x0001936c
    8c3c:	00000000 	.word	0x00000000

00008c40 <__do_global_dtors_aux>:
    8c40:	e92d4010 	push	{r4, lr}
    8c44:	e59f4018 	ldr	r4, [pc, #24]	; 8c64 <__do_global_dtors_aux+0x24>
    8c48:	e5d43000 	ldrb	r3, [r4]
    8c4c:	e3530000 	cmp	r3, #0
    8c50:	18bd8010 	popne	{r4, pc}
    8c54:	ebffffdf 	bl	8bd8 <deregister_tm_clones>
    8c58:	e3a03001 	mov	r3, #1
    8c5c:	e5c43000 	strb	r3, [r4]
    8c60:	e8bd8010 	pop	{r4, pc}
    8c64:	00019370 	.word	0x00019370

00008c68 <frame_dummy>:
    8c68:	e59f0024 	ldr	r0, [pc, #36]	; 8c94 <frame_dummy+0x2c>
    8c6c:	e92d4008 	push	{r3, lr}
    8c70:	e5903000 	ldr	r3, [r0]
    8c74:	e3530000 	cmp	r3, #0
    8c78:	0a000003 	beq	8c8c <frame_dummy+0x24>
    8c7c:	e59f3014 	ldr	r3, [pc, #20]	; 8c98 <frame_dummy+0x30>
    8c80:	e3530000 	cmp	r3, #0
    8c84:	0a000000 	beq	8c8c <frame_dummy+0x24>
    8c88:	e12fff33 	blx	r3
    8c8c:	e8bd4008 	pop	{r3, lr}
    8c90:	eaffffdc 	b	8c08 <register_tm_clones>
    8c94:	0001910c 	.word	0x0001910c
	...

00008ca0 <main>:


static char str[500];
static char str2[500];

int main() {
    8ca0:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    8ca4:	ed2d8b0c 	vpush	{d8-d13}
    8ca8:	e28db04c 	add	fp, sp, #76	; 0x4c
    8cac:	e24ddd0f 	sub	sp, sp, #960	; 0x3c0

	enumTestcases runCommand = 0;
    8cb0:	e3a03000 	mov	r3, #0
    8cb4:	e50b3050 	str	r3, [fp, #-80]	; 0x50
	char testValue[20];
	scanf("%s", testValue);
    8cb8:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8cbc:	e59f0d7c 	ldr	r0, [pc, #3452]	; 9a40 <main+0xda0>
    8cc0:	e1a01003 	mov	r1, r3
    8cc4:	ebffff90 	bl	8b0c <_init+0x194>
	printf("Received string is %s\n", testValue);
    8cc8:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8ccc:	e59f0d70 	ldr	r0, [pc, #3440]	; 9a44 <main+0xda4>
    8cd0:	e1a01003 	mov	r1, r3
    8cd4:	ebffff7a 	bl	8ac4 <_init+0x14c>
	if ( strcmp(testValue,"testadc")  == 0 )
    8cd8:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8cdc:	e1a00003 	mov	r0, r3
    8ce0:	e59f1d60 	ldr	r1, [pc, #3424]	; 9a48 <main+0xda8>
    8ce4:	ebffff9d 	bl	8b60 <_init+0x1e8>
    8ce8:	e1a03000 	mov	r3, r0
    8cec:	e3530000 	cmp	r3, #0
    8cf0:	1a000002 	bne	8d00 <main+0x60>
		runCommand = TESTADC;
    8cf4:	e3a03001 	mov	r3, #1
    8cf8:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8cfc:	ea0000b2 	b	8fcc <main+0x32c>
	else if ( strcmp(testValue,"testbattery")  == 0 )
    8d00:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8d04:	e1a00003 	mov	r0, r3
    8d08:	e59f1d3c 	ldr	r1, [pc, #3388]	; 9a4c <main+0xdac>
    8d0c:	ebffff93 	bl	8b60 <_init+0x1e8>
    8d10:	e1a03000 	mov	r3, r0
    8d14:	e3530000 	cmp	r3, #0
    8d18:	1a000002 	bne	8d28 <main+0x88>
		runCommand = TESTBATTERY;
    8d1c:	e3a03002 	mov	r3, #2
    8d20:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8d24:	ea0000a8 	b	8fcc <main+0x32c>
	else if ( strcmp(testValue,"testgps")  == 0 )
    8d28:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8d2c:	e1a00003 	mov	r0, r3
    8d30:	e59f1d18 	ldr	r1, [pc, #3352]	; 9a50 <main+0xdb0>
    8d34:	ebffff89 	bl	8b60 <_init+0x1e8>
    8d38:	e1a03000 	mov	r3, r0
    8d3c:	e3530000 	cmp	r3, #0
    8d40:	1a000002 	bne	8d50 <main+0xb0>
		runCommand = TESTGPS;
    8d44:	e3a03003 	mov	r3, #3
    8d48:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8d4c:	ea00009e 	b	8fcc <main+0x32c>
	else if ( strcmp(testValue,"testimu")  == 0 )
    8d50:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8d54:	e1a00003 	mov	r0, r3
    8d58:	e59f1cf4 	ldr	r1, [pc, #3316]	; 9a54 <main+0xdb4>
    8d5c:	ebffff7f 	bl	8b60 <_init+0x1e8>
    8d60:	e1a03000 	mov	r3, r0
    8d64:	e3530000 	cmp	r3, #0
    8d68:	1a000002 	bne	8d78 <main+0xd8>
		runCommand = TESTIMU;
    8d6c:	e3a03004 	mov	r3, #4
    8d70:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8d74:	ea000094 	b	8fcc <main+0x32c>
	else if ( strcmp(testValue,"testlaser")  == 0 )
    8d78:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8d7c:	e1a00003 	mov	r0, r3
    8d80:	e59f1cd0 	ldr	r1, [pc, #3280]	; 9a58 <main+0xdb8>
    8d84:	ebffff75 	bl	8b60 <_init+0x1e8>
    8d88:	e1a03000 	mov	r3, r0
    8d8c:	e3530000 	cmp	r3, #0
    8d90:	1a000002 	bne	8da0 <main+0x100>
		runCommand = TESTLASER;
    8d94:	e3a03005 	mov	r3, #5
    8d98:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8d9c:	ea00008a 	b	8fcc <main+0x32c>
	else if ( strcmp(testValue,"testuart")  == 0 )
    8da0:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8da4:	e1a00003 	mov	r0, r3
    8da8:	e59f1cac 	ldr	r1, [pc, #3244]	; 9a5c <main+0xdbc>
    8dac:	ebffff6b 	bl	8b60 <_init+0x1e8>
    8db0:	e1a03000 	mov	r3, r0
    8db4:	e3530000 	cmp	r3, #0
    8db8:	1a000002 	bne	8dc8 <main+0x128>
		runCommand = TESTUART;
    8dbc:	e3a03006 	mov	r3, #6
    8dc0:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8dc4:	ea000080 	b	8fcc <main+0x32c>
	else if ( strcmp(testValue,"testmatlabimu")  == 0 )
    8dc8:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8dcc:	e1a00003 	mov	r0, r3
    8dd0:	e59f1c88 	ldr	r1, [pc, #3208]	; 9a60 <main+0xdc0>
    8dd4:	ebffff61 	bl	8b60 <_init+0x1e8>
    8dd8:	e1a03000 	mov	r3, r0
    8ddc:	e3530000 	cmp	r3, #0
    8de0:	1a000002 	bne	8df0 <main+0x150>
		runCommand = TESTMATLABIMU;
    8de4:	e3a03007 	mov	r3, #7
    8de8:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8dec:	ea000076 	b	8fcc <main+0x32c>
	else if ( strcmp(testValue,"testmatlabkalman")  == 0 )
    8df0:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8df4:	e1a00003 	mov	r0, r3
    8df8:	e59f1c64 	ldr	r1, [pc, #3172]	; 9a64 <main+0xdc4>
    8dfc:	ebffff57 	bl	8b60 <_init+0x1e8>
    8e00:	e1a03000 	mov	r3, r0
    8e04:	e3530000 	cmp	r3, #0
    8e08:	1a000002 	bne	8e18 <main+0x178>
		runCommand = TESTMATLABKALMAN;
    8e0c:	e3a03008 	mov	r3, #8
    8e10:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8e14:	ea00006c 	b	8fcc <main+0x32c>
	else if ( strcmp(testValue,"testaccmag")  == 0 )
    8e18:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8e1c:	e1a00003 	mov	r0, r3
    8e20:	e59f1c40 	ldr	r1, [pc, #3136]	; 9a68 <main+0xdc8>
    8e24:	ebffff4d 	bl	8b60 <_init+0x1e8>
    8e28:	e1a03000 	mov	r3, r0
    8e2c:	e3530000 	cmp	r3, #0
    8e30:	1a000002 	bne	8e40 <main+0x1a0>
		runCommand = TESTACCMAG;
    8e34:	e3a03009 	mov	r3, #9
    8e38:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8e3c:	ea000062 	b	8fcc <main+0x32c>
	else if ( strcmp(testValue,"testgyro")  == 0 )
    8e40:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8e44:	e1a00003 	mov	r0, r3
    8e48:	e59f1c1c 	ldr	r1, [pc, #3100]	; 9a6c <main+0xdcc>
    8e4c:	ebffff43 	bl	8b60 <_init+0x1e8>
    8e50:	e1a03000 	mov	r3, r0
    8e54:	e3530000 	cmp	r3, #0
    8e58:	1a000002 	bne	8e68 <main+0x1c8>
		runCommand = TESTGYRO;
    8e5c:	e3a0300a 	mov	r3, #10
    8e60:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8e64:	ea000058 	b	8fcc <main+0x32c>
	else if ( strcmp(testValue,"testbaro")  == 0 )
    8e68:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8e6c:	e1a00003 	mov	r0, r3
    8e70:	e59f1bf8 	ldr	r1, [pc, #3064]	; 9a70 <main+0xdd0>
    8e74:	ebffff39 	bl	8b60 <_init+0x1e8>
    8e78:	e1a03000 	mov	r3, r0
    8e7c:	e3530000 	cmp	r3, #0
    8e80:	1a000002 	bne	8e90 <main+0x1f0>
		runCommand = TESTBARO;
    8e84:	e3a0300b 	mov	r3, #11
    8e88:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8e8c:	ea00004e 	b	8fcc <main+0x32c>
	else if ( strcmp(testValue,"testmatrixlib")  == 0 )
    8e90:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8e94:	e1a00003 	mov	r0, r3
    8e98:	e59f1bd4 	ldr	r1, [pc, #3028]	; 9a74 <main+0xdd4>
    8e9c:	ebffff2f 	bl	8b60 <_init+0x1e8>
    8ea0:	e1a03000 	mov	r3, r0
    8ea4:	e3530000 	cmp	r3, #0
    8ea8:	1a000002 	bne	8eb8 <main+0x218>
		runCommand = TESTMATRIXLIB;
    8eac:	e3a0300c 	mov	r3, #12
    8eb0:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8eb4:	ea000044 	b	8fcc <main+0x32c>
	else if ( strcmp(testValue,"testudp")  == 0 )
    8eb8:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8ebc:	e1a00003 	mov	r0, r3
    8ec0:	e59f1bb0 	ldr	r1, [pc, #2992]	; 9a78 <main+0xdd8>
    8ec4:	ebffff25 	bl	8b60 <_init+0x1e8>
    8ec8:	e1a03000 	mov	r3, r0
    8ecc:	e3530000 	cmp	r3, #0
    8ed0:	1a000002 	bne	8ee0 <main+0x240>
		runCommand = TESTUDP;
    8ed4:	e3a0300d 	mov	r3, #13
    8ed8:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8edc:	ea00003a 	b	8fcc <main+0x32c>
	else if ( strcmp(testValue,"testudptransfer")  == 0 )
    8ee0:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8ee4:	e1a00003 	mov	r0, r3
    8ee8:	e59f1b8c 	ldr	r1, [pc, #2956]	; 9a7c <main+0xddc>
    8eec:	ebffff1b 	bl	8b60 <_init+0x1e8>
    8ef0:	e1a03000 	mov	r3, r0
    8ef4:	e3530000 	cmp	r3, #0
    8ef8:	1a000002 	bne	8f08 <main+0x268>
		runCommand = TESTUDPTRANSFER;
    8efc:	e3a0300e 	mov	r3, #14
    8f00:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8f04:	ea000030 	b	8fcc <main+0x32c>
	else if ( strcmp(testValue,"testallangles")  == 0 )
    8f08:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8f0c:	e1a00003 	mov	r0, r3
    8f10:	e59f1b68 	ldr	r1, [pc, #2920]	; 9a80 <main+0xde0>
    8f14:	ebffff11 	bl	8b60 <_init+0x1e8>
    8f18:	e1a03000 	mov	r3, r0
    8f1c:	e3530000 	cmp	r3, #0
    8f20:	1a000002 	bne	8f30 <main+0x290>
		runCommand = ALLANGLES;
    8f24:	e3a0300f 	mov	r3, #15
    8f28:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8f2c:	ea000026 	b	8fcc <main+0x32c>
	else if ( strcmp(testValue,"testallsensordata")  == 0 )
    8f30:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8f34:	e1a00003 	mov	r0, r3
    8f38:	e59f1b44 	ldr	r1, [pc, #2884]	; 9a84 <main+0xde4>
    8f3c:	ebffff07 	bl	8b60 <_init+0x1e8>
    8f40:	e1a03000 	mov	r3, r0
    8f44:	e3530000 	cmp	r3, #0
    8f48:	1a000002 	bne	8f58 <main+0x2b8>
			runCommand = TESTALLSENSORDATA;
    8f4c:	e3a03010 	mov	r3, #16
    8f50:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8f54:	ea00001c 	b	8fcc <main+0x32c>
	else if ( strcmp(testValue,"testmotorpwm")  == 0 )
    8f58:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8f5c:	e1a00003 	mov	r0, r3
    8f60:	e59f1b20 	ldr	r1, [pc, #2848]	; 9a88 <main+0xde8>
    8f64:	ebfffefd 	bl	8b60 <_init+0x1e8>
    8f68:	e1a03000 	mov	r3, r0
    8f6c:	e3530000 	cmp	r3, #0
    8f70:	1a000002 	bne	8f80 <main+0x2e0>
			runCommand = TESTMOTORPWM;
    8f74:	e3a03011 	mov	r3, #17
    8f78:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8f7c:	ea000012 	b	8fcc <main+0x32c>
	else if ( strcmp(testValue,"testmotorisr")  == 0 )
    8f80:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8f84:	e1a00003 	mov	r0, r3
    8f88:	e59f1afc 	ldr	r1, [pc, #2812]	; 9a8c <main+0xdec>
    8f8c:	ebfffef3 	bl	8b60 <_init+0x1e8>
    8f90:	e1a03000 	mov	r3, r0
    8f94:	e3530000 	cmp	r3, #0
    8f98:	1a000002 	bne	8fa8 <main+0x308>
			runCommand = TESTMOTORISR;
    8f9c:	e3a03012 	mov	r3, #18
    8fa0:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8fa4:	ea000008 	b	8fcc <main+0x32c>
	else if ( strcmp(testValue,"testmotorupdown")  == 0 )
    8fa8:	e24b3e11 	sub	r3, fp, #272	; 0x110
    8fac:	e1a00003 	mov	r0, r3
    8fb0:	e59f1ad8 	ldr	r1, [pc, #2776]	; 9a90 <main+0xdf0>
    8fb4:	ebfffee9 	bl	8b60 <_init+0x1e8>
    8fb8:	e1a03000 	mov	r3, r0
    8fbc:	e3530000 	cmp	r3, #0
    8fc0:	1a000001 	bne	8fcc <main+0x32c>
				runCommand = TESTMOTORUPDOWN;
    8fc4:	e3a03013 	mov	r3, #19
    8fc8:	e50b3050 	str	r3, [fp, #-80]	; 0x50

	switch (runCommand)
    8fcc:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
    8fd0:	e2433001 	sub	r3, r3, #1
    8fd4:	e3530012 	cmp	r3, #18
    8fd8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    8fdc:	ea000500 	b	a3e4 <main+0x1744>
    8fe0:	0000902c 	.word	0x0000902c
    8fe4:	00009078 	.word	0x00009078
    8fe8:	000090b0 	.word	0x000090b0
    8fec:	000090c8 	.word	0x000090c8
    8ff0:	00009188 	.word	0x00009188
    8ff4:	000091c0 	.word	0x000091c0
    8ff8:	00009238 	.word	0x00009238
    8ffc:	000092f4 	.word	0x000092f4
    9000:	00009428 	.word	0x00009428
    9004:	000095d8 	.word	0x000095d8
    9008:	000094f0 	.word	0x000094f0
    900c:	00009690 	.word	0x00009690
    9010:	000097d0 	.word	0x000097d0
    9014:	00009954 	.word	0x00009954
    9018:	00009dec 	.word	0x00009dec
    901c:	0000a0fc 	.word	0x0000a0fc
    9020:	0000a260 	.word	0x0000a260
    9024:	0000a320 	.word	0x0000a320
    9028:	0000a3bc 	.word	0x0000a3bc
	{
		case TESTADC:
		{
			float erg;
			printf("Starting ADC Test\n");
    902c:	e59f0a60 	ldr	r0, [pc, #2656]	; 9a94 <main+0xdf4>
    9030:	ebfffeb8 	bl	8b18 <_init+0x1a0>
			erg = g_halADC_get_ui16(1);
    9034:	e3a00001 	mov	r0, #1
    9038:	eb00051c 	bl	a4b0 <g_halADC_get_ui16>
    903c:	ed0b0a17 	vstr	s0, [fp, #-92]	; 0xffffffa4
			if(erg<0)
    9040:	ed5b7a17 	vldr	s15, [fp, #-92]	; 0xffffffa4
    9044:	eef57ac0 	vcmpe.f32	s15, #0.0
    9048:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    904c:	5a000003 	bpl	9060 <main+0x3c0>
			{
				printf("Fehler");
    9050:	e59f0a40 	ldr	r0, [pc, #2624]	; 9a98 <main+0xdf8>
    9054:	ebfffe9a 	bl	8ac4 <_init+0x14c>
				return 1;
    9058:	e3a03001 	mov	r3, #1
    905c:	ea0004e4 	b	a3f4 <main+0x1754>
			}
			else
			{
				printf("Ergebniss: %f\n",erg);
    9060:	ed5b7a17 	vldr	s15, [fp, #-92]	; 0xffffffa4
    9064:	eeb77ae7 	vcvt.f64.f32	d7, s15
    9068:	e59f0a2c 	ldr	r0, [pc, #2604]	; 9a9c <main+0xdfc>
    906c:	ec532b17 	vmov	r2, r3, d7
    9070:	ebfffe93 	bl	8ac4 <_init+0x14c>
			}
			break;
    9074:	ea0004dd 	b	a3f0 <main+0x1750>
		}
		case TESTBATTERY:
		{
			double l_batterLevel_f64=0;
    9078:	e3a02000 	mov	r2, #0
    907c:	e3a03000 	mov	r3, #0
    9080:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
			printf("Starting Battery Test\n");
    9084:	e59f0a14 	ldr	r0, [pc, #2580]	; 9aa0 <main+0xe00>
    9088:	ebfffea2 	bl	8b18 <_init+0x1a0>
			while(1)
			{
				g_halBatCheck_readBatStatusFromI2C_bl();
    908c:	eb00058b 	bl	a6c0 <g_halBatCheck_readBatStatusFromI2C_bl>
				l_batterLevel_f64=g_halBatCheck_getBatteryStatus_f64();
    9090:	eb000580 	bl	a698 <g_halBatCheck_getBatteryStatus_f64>
    9094:	ed0b0b19 	vstr	d0, [fp, #-100]	; 0xffffff9c
				printf("Measured Voltage: %5.3f\n",l_batterLevel_f64);
    9098:	e59f0a04 	ldr	r0, [pc, #2564]	; 9aa4 <main+0xe04>
    909c:	e14b26d4 	ldrd	r2, [fp, #-100]	; 0xffffff9c
    90a0:	ebfffe87 	bl	8ac4 <_init+0x14c>
				sleep(1);
    90a4:	e3a00001 	mov	r0, #1
    90a8:	ebfffe94 	bl	8b00 <_init+0x188>
			}
    90ac:	eafffff6 	b	908c <main+0x3ec>
			break;
		}
		case TESTGPS:
		{
			int i=0;
    90b0:	e3a03000 	mov	r3, #0
    90b4:	e50b3068 	str	r3, [fp, #-104]	; 0x68
			struct strPosition main_longitude;
			struct strPosition main_latitude;
			printf("Starting GPS Test\n");
    90b8:	e59f09e8 	ldr	r0, [pc, #2536]	; 9aa8 <main+0xe08>
    90bc:	ebfffe95 	bl	8b18 <_init+0x1a0>
			while(1)
			{
				g_halGps_getData_i32();
    90c0:	eb00065d 	bl	aa3c <g_halGps_getData_i32>
			}
    90c4:	eafffffd 	b	90c0 <main+0x420>
			break;
		}
		case TESTIMU:
		{
			halImu_orientationValues l_imuMeasurements_st;
			printf("Starting IMU Test\n");
    90c8:	e59f09dc 	ldr	r0, [pc, #2524]	; 9aac <main+0xe0c>
    90cc:	ebfffe91 	bl	8b18 <_init+0x1a0>
			g_halImu_initImuSensors_bl();
    90d0:	eb000f2a 	bl	cd80 <g_halImu_initImuSensors_bl>
			while(1)
			{
				g_halImu_triggerImuReading_bl();
    90d4:	eb000f96 	bl	cf34 <g_halImu_triggerImuReading_bl>
				g_halImu_triggerBaroReading_bl();
    90d8:	eb000f3f 	bl	cddc <g_halImu_triggerBaroReading_bl>
				g_halImu_triggerGyroReading_bl();
    90dc:	eb000f58 	bl	ce44 <g_halImu_triggerGyroReading_bl>
				g_halImu_triggerAccReading_bl();
    90e0:	eb000f6b 	bl	ce94 <g_halImu_triggerAccReading_bl>

				l_imuMeasurements_st=g_halImu_getImuValues_str();
    90e4:	e24b3fd5 	sub	r3, fp, #852	; 0x354
    90e8:	e1a00003 	mov	r0, r3
    90ec:	eb000f12 	bl	cd3c <g_halImu_getImuValues_str>

				printf("Pressure: %5.3f    ;    Temperature:  %5.3f\n",l_imuMeasurements_st.pressure_f64,l_imuMeasurements_st.temperature_f64);
    90f0:	e24b3fbf 	sub	r3, fp, #764	; 0x2fc
    90f4:	e1c320d0 	ldrd	r2, [r3]
    90f8:	e24b1fc1 	sub	r1, fp, #772	; 0x304
    90fc:	e1c100d0 	ldrd	r0, [r1]
    9100:	e1cd00f0 	strd	r0, [sp]
    9104:	e59f09a4 	ldr	r0, [pc, #2468]	; 9ab0 <main+0xe10>
    9108:	ebfffe6d 	bl	8ac4 <_init+0x14c>
				printf("roll: %5.3f    ;    pitch:  %5.3f    ;    yaw:  %5.3f\n",l_imuMeasurements_st.gyro.roll_f64, l_imuMeasurements_st.gyro.pitch_f64, l_imuMeasurements_st.gyro.yaw_f64);
    910c:	e24b3fc7 	sub	r3, fp, #796	; 0x31c
    9110:	e1c320d0 	ldrd	r2, [r3]
    9114:	e24b5fc5 	sub	r5, fp, #788	; 0x314
    9118:	e1c540d0 	ldrd	r4, [r5]
    911c:	e24b1fc3 	sub	r1, fp, #780	; 0x30c
    9120:	e1c100d0 	ldrd	r0, [r1]
    9124:	e1cd40f0 	strd	r4, [sp]
    9128:	e1cd00f8 	strd	r0, [sp, #8]
    912c:	e59f0980 	ldr	r0, [pc, #2432]	; 9ab4 <main+0xe14>
    9130:	ebfffe63 	bl	8ac4 <_init+0x14c>
				printf("X: %5.3f ; Y:  %5.3f ; Z:  %5.3f\n",l_imuMeasurements_st.acc.x_f64,l_imuMeasurements_st.acc.y_f64,l_imuMeasurements_st.acc.z_f64);
    9134:	e24b3fd3 	sub	r3, fp, #844	; 0x34c
    9138:	e1c320d0 	ldrd	r2, [r3]
    913c:	e24b5fd1 	sub	r5, fp, #836	; 0x344
    9140:	e1c540d0 	ldrd	r4, [r5]
    9144:	e24b1fcf 	sub	r1, fp, #828	; 0x33c
    9148:	e1c100d0 	ldrd	r0, [r1]
    914c:	e1cd40f0 	strd	r4, [sp]
    9150:	e1cd00f8 	strd	r0, [sp, #8]
    9154:	e59f095c 	ldr	r0, [pc, #2396]	; 9ab8 <main+0xe18>
    9158:	ebfffe59 	bl	8ac4 <_init+0x14c>
				printf("X: %5.10f ; Y:  %5.10f ; Z:  %5.10f\n\n\n\n",l_imuMeasurements_st.mag.x_f64,l_imuMeasurements_st.mag.y_f64,l_imuMeasurements_st.mag.z_f64);
    915c:	e24b3fcd 	sub	r3, fp, #820	; 0x334
    9160:	e1c320d0 	ldrd	r2, [r3]
    9164:	e24b5fcb 	sub	r5, fp, #812	; 0x32c
    9168:	e1c540d0 	ldrd	r4, [r5]
    916c:	e24b1fc9 	sub	r1, fp, #804	; 0x324
    9170:	e1c100d0 	ldrd	r0, [r1]
    9174:	e1cd40f0 	strd	r4, [sp]
    9178:	e1cd00f8 	strd	r0, [sp, #8]
    917c:	e59f0938 	ldr	r0, [pc, #2360]	; 9abc <main+0xe1c>
    9180:	ebfffe4f 	bl	8ac4 <_init+0x14c>
			}
    9184:	eaffffd2 	b	90d4 <main+0x434>
			break;
		}
		case TESTLASER:
		{
			double dist=0;
    9188:	e3a02000 	mov	r2, #0
    918c:	e3a03000 	mov	r3, #0
    9190:	e14b27f4 	strd	r2, [fp, #-116]	; 0xffffff8c
			printf("Starting LASER Test\n");
    9194:	e59f0924 	ldr	r0, [pc, #2340]	; 9ac0 <main+0xe20>
    9198:	ebfffe5e 	bl	8b18 <_init+0x1a0>
			while(1)
			{
				g_LIDAR_readDistanceFromI2C_i32();
    919c:	eb000fb3 	bl	d070 <g_LIDAR_readDistanceFromI2C_i32>
				//usleep(100000);

				dist=g_LIDAR_getDistance_f64();
    91a0:	eb000fa8 	bl	d048 <g_LIDAR_getDistance_f64>
    91a4:	ed0b0b1d 	vstr	d0, [fp, #-116]	; 0xffffff8c

				printf("Distance: %4.2f m\n",dist);
    91a8:	e59f0914 	ldr	r0, [pc, #2324]	; 9ac4 <main+0xe24>
    91ac:	e14b27d4 	ldrd	r2, [fp, #-116]	; 0xffffff8c
    91b0:	ebfffe43 	bl	8ac4 <_init+0x14c>
				usleep(500*1000);
    91b4:	e59f090c 	ldr	r0, [pc, #2316]	; 9ac8 <main+0xe28>
    91b8:	ebfffe1a 	bl	8a28 <_init+0xb0>
			}
    91bc:	eafffff6 	b	919c <main+0x4fc>
			break;
		}
		case TESTUART:
		{
			char rec_char='z';
    91c0:	e3a0307a 	mov	r3, #122	; 0x7a
    91c4:	e54b3145 	strb	r3, [fp, #-325]	; 0x145
			char *ptr_rec_char=&rec_char;
    91c8:	e24b3f51 	sub	r3, fp, #324	; 0x144
    91cc:	e2433001 	sub	r3, r3, #1
    91d0:	e50b3078 	str	r3, [fp, #-120]	; 0x78
			printf("Starting UART Test\n");
    91d4:	e59f08f0 	ldr	r0, [pc, #2288]	; 9acc <main+0xe2c>
    91d8:	ebfffe4e 	bl	8b18 <_init+0x1a0>
			FILE *fp=(FILE *)-1;
    91dc:	e3e03000 	mvn	r3, #0
    91e0:	e50b307c 	str	r3, [fp, #-124]	; 0x7c
			//open file to write received data from GPS
			fp = (FILE *)open("GPS_logging.txt",100 | 01,400);
    91e4:	e59f08e4 	ldr	r0, [pc, #2276]	; 9ad0 <main+0xe30>
    91e8:	e3a01065 	mov	r1, #101	; 0x65
    91ec:	e3a02e19 	mov	r2, #400	; 0x190
    91f0:	ebfffde8 	bl	8998 <_init+0x20>
    91f4:	e1a03000 	mov	r3, r0
    91f8:	e50b307c 	str	r3, [fp, #-124]	; 0x7c
			sleep(1);
    91fc:	e3a00001 	mov	r0, #1
    9200:	ebfffe3e 	bl	8b00 <_init+0x188>
			while(1)
			{
				rec_char=g_lldUart_readByte_ch();
    9204:	eb00110b 	bl	d638 <g_lldUart_readByte_ch>
    9208:	e1a03000 	mov	r3, r0
    920c:	e54b3145 	strb	r3, [fp, #-325]	; 0x145
				//save read values if filestream is opened
				if (fp != (FILE *)-1)
    9210:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    9214:	e3730001 	cmn	r3, #1
    9218:	0a000005 	beq	9234 <main+0x594>
				{
					write((int)fp,ptr_rec_char,1);
    921c:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    9220:	e1a00003 	mov	r0, r3
    9224:	e51b1078 	ldr	r1, [fp, #-120]	; 0x78
    9228:	e3a02001 	mov	r2, #1
    922c:	ebfffe06 	bl	8a4c <_init+0xd4>
				}
			}
    9230:	eafffff3 	b	9204 <main+0x564>
    9234:	eafffff2 	b	9204 <main+0x564>
			fclose(fp);
			break;
		}
		case TESTMATLABIMU:
		{
			printf("Starting IMU Matlab Test\n");
    9238:	e59f0894 	ldr	r0, [pc, #2196]	; 9ad4 <main+0xe34>
    923c:	ebfffe35 	bl	8b18 <_init+0x1a0>
			unsigned char	l_remoteHostAddr_rg4ui8[4] 	= {192,168,22,160};
    9240:	e59f294c 	ldr	r2, [pc, #2380]	; 9b94 <main+0xef4>
    9244:	e24b3f53 	sub	r3, fp, #332	; 0x14c
    9248:	e5920000 	ldr	r0, [r2]
    924c:	e5830000 	str	r0, [r3]
			unsigned short	l_remoteHostPort_ui16		= 5000;
    9250:	e59f3940 	ldr	r3, [pc, #2368]	; 9b98 <main+0xef8>
    9254:	e14b37be 	strh	r3, [fp, #-126]	; 0xffffff82
			int				l_udpSocket_i32;
			unsigned int	l_sendState_bl;

			// open udp connection
			l_udpSocket_i32 = g_halMatlab_initConnection_i32( l_remoteHostAddr_rg4ui8, l_remoteHostPort_ui16 );
    9258:	e24b2f53 	sub	r2, fp, #332	; 0x14c
    925c:	e15b37be 	ldrh	r3, [fp, #-126]	; 0xffffff82
    9260:	e1a00002 	mov	r0, r2
    9264:	e1a01003 	mov	r1, r3
    9268:	eb001340 	bl	df70 <g_halMatlab_initConnection_i32>
    926c:	e50b0084 	str	r0, [fp, #-132]	; 0x84

			halImu_orientationValues l_imuMeasurements_st;
			g_halImu_initImuSensors_bl();
    9270:	eb000ec2 	bl	cd80 <g_halImu_initImuSensors_bl>

			while(1)
			{
				g_halImu_triggerImuReading_bl();
    9274:	eb000f2e 	bl	cf34 <g_halImu_triggerImuReading_bl>
				g_halImu_triggerBaroReading_bl();
    9278:	eb000ed7 	bl	cddc <g_halImu_triggerBaroReading_bl>
				g_halImu_triggerGyroReading_bl();
    927c:	eb000ef0 	bl	ce44 <g_halImu_triggerGyroReading_bl>
				g_halImu_triggerAccReading_bl();
    9280:	eb000f03 	bl	ce94 <g_halImu_triggerAccReading_bl>

				l_imuMeasurements_st=g_halImu_getImuValues_str();
    9284:	e24b3fd5 	sub	r3, fp, #852	; 0x354
    9288:	e1a00003 	mov	r0, r3
    928c:	eb000eaa 	bl	cd3c <g_halImu_getImuValues_str>

				l_sendState_bl = g_halMatlab_sendImuState_bl(l_udpSocket_i32, l_imuMeasurements_st);
    9290:	e1a0100d 	mov	r1, sp
    9294:	e24b2fd3 	sub	r2, fp, #844	; 0x34c
    9298:	e3a03058 	mov	r3, #88	; 0x58
    929c:	e1a00001 	mov	r0, r1
    92a0:	e1a01002 	mov	r1, r2
    92a4:	e1a02003 	mov	r2, r3
    92a8:	ebfffe02 	bl	8ab8 <_init+0x140>
    92ac:	e24b3fd5 	sub	r3, fp, #852	; 0x354
    92b0:	e893000c 	ldm	r3, {r2, r3}
    92b4:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    92b8:	eb0011de 	bl	da38 <g_halMatlab_sendImuState_bl>
    92bc:	e1a03000 	mov	r3, r0
    92c0:	e50b3088 	str	r3, [fp, #-136]	; 0x88
				printf("Temp %f\n", l_imuMeasurements_st.temperature_f64);
    92c4:	e24b3fc1 	sub	r3, fp, #772	; 0x304
    92c8:	e1c320d0 	ldrd	r2, [r3]
    92cc:	e59f0804 	ldr	r0, [pc, #2052]	; 9ad8 <main+0xe38>
    92d0:	ebfffdfb 	bl	8ac4 <_init+0x14c>
				if ( l_sendState_bl != M_HAL_MATLAB_SUCCESS_UI8 )
    92d4:	e51b3088 	ldr	r3, [fp, #-136]	; 0x88
    92d8:	e3530000 	cmp	r3, #0
    92dc:	0a000001 	beq	92e8 <main+0x648>
				{
					printf("UDP-Packet error\n");
    92e0:	e59f08e4 	ldr	r0, [pc, #2276]	; 9bcc <main+0xf2c>
    92e4:	ebfffe0b 	bl	8b18 <_init+0x1a0>
				}
				usleep( 20000 ); //20ms = 50Hz
    92e8:	e59f08e0 	ldr	r0, [pc, #2272]	; 9bd0 <main+0xf30>
    92ec:	ebfffdcd 	bl	8a28 <_init+0xb0>
			}
    92f0:	eaffffdf 	b	9274 <main+0x5d4>
			g_halMatlab_closeSocket_bl(l_udpSocket_i32);
			break;
		}
		case TESTMATLABKALMAN:
		{
			printf("Starting Kalman Orientation Matlab Test\n");
    92f4:	e59f07e0 	ldr	r0, [pc, #2016]	; 9adc <main+0xe3c>
    92f8:	ebfffe06 	bl	8b18 <_init+0x1a0>
			unsigned char	l_remoteHostAddr_rg4ui8[4] 	= {192,168,22,160};
    92fc:	e59f2890 	ldr	r2, [pc, #2192]	; 9b94 <main+0xef4>
    9300:	e24b3e15 	sub	r3, fp, #336	; 0x150
    9304:	e5920000 	ldr	r0, [r2]
    9308:	e5830000 	str	r0, [r3]
			unsigned short	l_remoteHostPort_ui16		= 5000;
    930c:	e59f3884 	ldr	r3, [pc, #2180]	; 9b98 <main+0xef8>
    9310:	e14b38ba 	strh	r3, [fp, #-138]	; 0xffffff76
			sigOri_orientationAngles	l_kalmanAngles_st;
			sigOri_orientationAngles	l_compAngles_st;
			halImu_orientationValues	l_imuStates_st;

			// open udp connection
			l_udpSocket_i32 = g_halMatlab_initConnection_i32( l_remoteHostAddr_rg4ui8, l_remoteHostPort_ui16 );
    9314:	e24b2e15 	sub	r2, fp, #336	; 0x150
    9318:	e15b38ba 	ldrh	r3, [fp, #-138]	; 0xffffff76
    931c:	e1a00002 	mov	r0, r2
    9320:	e1a01003 	mov	r1, r3
    9324:	eb001311 	bl	df70 <g_halMatlab_initConnection_i32>
    9328:	e50b0090 	str	r0, [fp, #-144]	; 0x90

			g_sigOri_initMatrices_bl();
    932c:	eb00197a 	bl	f91c <g_sigOri_initMatrices_bl>
			g_sigOri_initImuSensors_bl();
    9330:	eb00196e 	bl	f8f0 <g_sigOri_initImuSensors_bl>

			while(1)
			{
				g_sigOri_calcKalmanOrientation_bl();
    9334:	eb001b60 	bl	100bc <g_sigOri_calcKalmanOrientation_bl>
				g_sigOri_calcComplementaryOrientation_bl();
    9338:	eb001c3a 	bl	10428 <g_sigOri_calcComplementaryOrientation_bl>

				l_kalmanAngles_st 	= g_sigOri_getAnglesKalman_bl();
    933c:	eb001937 	bl	f820 <g_sigOri_getAnglesKalman_bl>
    9340:	eeb05b40 	vmov.f64	d5, d0
    9344:	eeb06b41 	vmov.f64	d6, d1
    9348:	eeb07b42 	vmov.f64	d7, d2
    934c:	ed0b5b5b 	vstr	d5, [fp, #-364]	; 0xfffffe94
    9350:	ed0b6b59 	vstr	d6, [fp, #-356]	; 0xfffffe9c
    9354:	ed0b7b57 	vstr	d7, [fp, #-348]	; 0xfffffea4
				l_compAngles_st		= g_sigOri_getAnglesComplementary_bl();
    9358:	eb0018fc 	bl	f750 <g_sigOri_getAnglesComplementary_bl>
    935c:	eeb05b40 	vmov.f64	d5, d0
    9360:	eeb06b41 	vmov.f64	d6, d1
    9364:	eeb07b42 	vmov.f64	d7, d2
    9368:	ed0b5b61 	vstr	d5, [fp, #-388]	; 0xfffffe7c
    936c:	ed0b6b5f 	vstr	d6, [fp, #-380]	; 0xfffffe84
    9370:	ed0b7b5d 	vstr	d7, [fp, #-372]	; 0xfffffe8c
				l_imuStates_st 		= g_halImu_getImuValues_str();
    9374:	e24b3fd5 	sub	r3, fp, #852	; 0x354
    9378:	e1a00003 	mov	r0, r3
    937c:	eb000e6e 	bl	cd3c <g_halImu_getImuValues_str>

				printf("Temp%f\nMag%f",l_imuStates_st.temperature_f64, l_imuStates_st.mag.x_f64);
    9380:	e24b3fc1 	sub	r3, fp, #772	; 0x304
    9384:	e1c320d0 	ldrd	r2, [r3]
    9388:	e24b1fcd 	sub	r1, fp, #820	; 0x334
    938c:	e1c100d0 	ldrd	r0, [r1]
    9390:	e1cd00f0 	strd	r0, [sp]
    9394:	e59f0744 	ldr	r0, [pc, #1860]	; 9ae0 <main+0xe40>
    9398:	ebfffdc9 	bl	8ac4 <_init+0x14c>
				l_sendState_bl = g_halMatlab_sendSigAllStates_bl(	l_udpSocket_i32,
    939c:	ed1bdb5b 	vldr	d13, [fp, #-364]	; 0xfffffe94
    93a0:	ed1bcb59 	vldr	d12, [fp, #-356]	; 0xfffffe9c
    93a4:	ed1bbb57 	vldr	d11, [fp, #-348]	; 0xfffffea4
    93a8:	ed1bab61 	vldr	d10, [fp, #-388]	; 0xfffffe7c
    93ac:	ed1b9b5f 	vldr	d9, [fp, #-380]	; 0xfffffe84
    93b0:	ed1b8b5d 	vldr	d8, [fp, #-372]	; 0xfffffe8c
    93b4:	e1a0100d 	mov	r1, sp
    93b8:	e24b2fd3 	sub	r2, fp, #844	; 0x34c
    93bc:	e3a03058 	mov	r3, #88	; 0x58
    93c0:	e1a00001 	mov	r0, r1
    93c4:	e1a01002 	mov	r1, r2
    93c8:	e1a02003 	mov	r2, r3
    93cc:	ebfffdb9 	bl	8ab8 <_init+0x140>
    93d0:	e24b3fd5 	sub	r3, fp, #852	; 0x354
    93d4:	e893000c 	ldm	r3, {r2, r3}
    93d8:	e51b0090 	ldr	r0, [fp, #-144]	; 0x90
    93dc:	eeb00b4d 	vmov.f64	d0, d13
    93e0:	eeb01b4c 	vmov.f64	d1, d12
    93e4:	eeb02b4b 	vmov.f64	d2, d11
    93e8:	eeb03b4a 	vmov.f64	d3, d10
    93ec:	eeb04b49 	vmov.f64	d4, d9
    93f0:	eeb05b48 	vmov.f64	d5, d8
    93f4:	eb001424 	bl	e48c <g_halMatlab_sendSigAllStates_bl>
    93f8:	e50b0094 	str	r0, [fp, #-148]	; 0x94
																	l_imuStates_st,
																	l_kalmanAngles_st,
																	l_compAngles_st);
				if ( l_sendState_bl != M_HAL_MATLAB_SUCCESS_UI8 )
    93fc:	e51b3094 	ldr	r3, [fp, #-148]	; 0x94
    9400:	e3530000 	cmp	r3, #0
    9404:	0a000002 	beq	9414 <main+0x774>
				{
					printf("UDP-Packet error\n");
    9408:	e59f07bc 	ldr	r0, [pc, #1980]	; 9bcc <main+0xf2c>
    940c:	ebfffdc1 	bl	8b18 <_init+0x1a0>
    9410:	ea000001 	b	941c <main+0x77c>
				}
				else
				{
					printf("Sent packet\n");
    9414:	e59f06c8 	ldr	r0, [pc, #1736]	; 9ae4 <main+0xe44>
    9418:	ebfffdbe 	bl	8b18 <_init+0x1a0>
				}
				usleep( 20000 ); //20ms = 50Hz
    941c:	e59f07ac 	ldr	r0, [pc, #1964]	; 9bd0 <main+0xf30>
    9420:	ebfffd80 	bl	8a28 <_init+0xb0>
			}
    9424:	eaffffc2 	b	9334 <main+0x694>
			break;
		}
		case TESTACCMAG:
		{
			halAccmag_dataContainer l_sensorData_st;
			printf("IMU Acceleration and Compass Test\n");
    9428:	e59f06b8 	ldr	r0, [pc, #1720]	; 9ae8 <main+0xe48>
    942c:	ebfffdb9 	bl	8b18 <_init+0x1a0>
			if ( g_halAccmag_initSensor_bl() != M_HAL_ACCMAG_SUCCESS_BL )
    9430:	eb000b3f 	bl	c134 <g_halAccmag_initSensor_bl>
    9434:	e1a03000 	mov	r3, r0
    9438:	e3530000 	cmp	r3, #0
    943c:	0a000003 	beq	9450 <main+0x7b0>
			{
				printf( "Init failed!\n" );
    9440:	e59f06a4 	ldr	r0, [pc, #1700]	; 9aec <main+0xe4c>
    9444:	ebfffdb3 	bl	8b18 <_init+0x1a0>
				return 1;
    9448:	e3a03001 	mov	r3, #1
    944c:	ea0003e8 	b	a3f4 <main+0x1754>
			}

			while (1)
			{
				if ( g_halAccmag_triggerAccUpdate_bl() != M_HAL_ACCMAG_SUCCESS_BL )
    9450:	eb000b5f 	bl	c1d4 <g_halAccmag_triggerAccUpdate_bl>
    9454:	e1a03000 	mov	r3, r0
    9458:	e3530000 	cmp	r3, #0
    945c:	0a000003 	beq	9470 <main+0x7d0>
				{
					printf( "ACC update failed!\n" );
    9460:	e59f0688 	ldr	r0, [pc, #1672]	; 9af0 <main+0xe50>
    9464:	ebfffdab 	bl	8b18 <_init+0x1a0>
					return 1;
    9468:	e3a03001 	mov	r3, #1
    946c:	ea0003e0 	b	a3f4 <main+0x1754>
				}
				if ( g_halAccmag_triggerMagUpdate_bl() != M_HAL_ACCMAG_SUCCESS_BL )
    9470:	eb000b5e 	bl	c1f0 <g_halAccmag_triggerMagUpdate_bl>
    9474:	e1a03000 	mov	r3, r0
    9478:	e3530000 	cmp	r3, #0
    947c:	0a000003 	beq	9490 <main+0x7f0>
				{
					printf( "MAG update failed!\n" );
    9480:	e59f066c 	ldr	r0, [pc, #1644]	; 9af4 <main+0xe54>
    9484:	ebfffda3 	bl	8b18 <_init+0x1a0>
					return 1;
    9488:	e3a03001 	mov	r3, #1
    948c:	ea0003d8 	b	a3f4 <main+0x1754>
				}

				l_sensorData_st = g_halAccmag_getAccMagContainer_st();
    9490:	e24b3fd5 	sub	r3, fp, #852	; 0x354
    9494:	e1a00003 	mov	r0, r3
    9498:	eb000b8e 	bl	c2d8 <g_halAccmag_getAccMagContainer_st>

				printf("Acc - x:%f y:%lf z:%f | Mag - x:%.10f y:%.10f z:%.10f\n",
    949c:	e24b3fd5 	sub	r3, fp, #852	; 0x354
    94a0:	e1c320d0 	ldrd	r2, [r3]
    94a4:	ed1b7bd3 	vldr	d7, [fp, #-844]	; 0xfffffcb4
    94a8:	e24b9fd1 	sub	r9, fp, #836	; 0x344
    94ac:	e1c980d0 	ldrd	r8, [r9]
    94b0:	e24b7fcf 	sub	r7, fp, #828	; 0x33c
    94b4:	e1c760d0 	ldrd	r6, [r7]
    94b8:	e24b5fcd 	sub	r5, fp, #820	; 0x334
    94bc:	e1c540d0 	ldrd	r4, [r5]
    94c0:	e24b1fcb 	sub	r1, fp, #812	; 0x32c
    94c4:	e1c100d0 	ldrd	r0, [r1]
    94c8:	ed8d7b00 	vstr	d7, [sp]
    94cc:	e1cd80f8 	strd	r8, [sp, #8]
    94d0:	e1cd61f0 	strd	r6, [sp, #16]
    94d4:	e1cd41f8 	strd	r4, [sp, #24]
    94d8:	e1cd02f0 	strd	r0, [sp, #32]
    94dc:	e59f0614 	ldr	r0, [pc, #1556]	; 9af8 <main+0xe58>
    94e0:	ebfffd77 	bl	8ac4 <_init+0x14c>
						l_sensorData_st.mag.x_f64,
						l_sensorData_st.mag.y_f64,
						l_sensorData_st.mag.z_f64
						);

				usleep( 250000 );
    94e4:	e59f0610 	ldr	r0, [pc, #1552]	; 9afc <main+0xe5c>
    94e8:	ebfffd4e 	bl	8a28 <_init+0xb0>
			}
    94ec:	eaffffd7 	b	9450 <main+0x7b0>
			break;
		}
		case TESTBARO:
		{
			double pressure=0;
    94f0:	e3a02000 	mov	r2, #0
    94f4:	e3a03000 	mov	r3, #0
    94f8:	e14b29fc 	strd	r2, [fp, #-156]	; 0xffffff64
			double temp=0;
    94fc:	e3a02000 	mov	r2, #0
    9500:	e3a03000 	mov	r3, #0
    9504:	e14b2af4 	strd	r2, [fp, #-164]	; 0xffffff5c
			sigOri_orientationAngles GyroValues;
			double Gyrotemp=0;
    9508:	e3a02000 	mov	r2, #0
    950c:	e3a03000 	mov	r3, #0
    9510:	e14b2afc 	strd	r2, [fp, #-172]	; 0xffffff54
			g_halBaro_initBaro_i32();
    9514:	eb000b81 	bl	c320 <g_halBaro_initBaro_i32>
			g_halGyro_initGyro_i32();
    9518:	eb000c66 	bl	c6b8 <g_halGyro_initGyro_i32>
			printf("IMU Barometer pressure test");
    951c:	e59f05dc 	ldr	r0, [pc, #1500]	; 9b00 <main+0xe60>
    9520:	ebfffd67 	bl	8ac4 <_init+0x14c>
			while(1)
			{
				g_halBaro_readPressureFromI2C_i32();
    9524:	eb000bbb 	bl	c418 <g_halBaro_readPressureFromI2C_i32>
				usleep(100000);
    9528:	e59f05d4 	ldr	r0, [pc, #1492]	; 9b04 <main+0xe64>
    952c:	ebfffd3d 	bl	8a28 <_init+0xb0>
				g_halBaro_readTemperatureFromI2C_i32();
    9530:	eb000c0b 	bl	c564 <g_halBaro_readTemperatureFromI2C_i32>
				usleep(100000);
    9534:	e59f05c8 	ldr	r0, [pc, #1480]	; 9b04 <main+0xe64>
    9538:	ebfffd3a 	bl	8a28 <_init+0xb0>
				pressure=g_halBaro_getPressure_f64();
    953c:	eb000ba1 	bl	c3c8 <g_halBaro_getPressure_f64>
    9540:	ed0b0b27 	vstr	d0, [fp, #-156]	; 0xffffff64
				temp=g_halBaro_getTemperature_f64();
    9544:	eb000ba9 	bl	c3f0 <g_halBaro_getTemperature_f64>
    9548:	ed0b0b29 	vstr	d0, [fp, #-164]	; 0xffffff5c
				printf("Pressure: %5.3f    ;    Temperature:  %5.3f\n",pressure,temp);
    954c:	e14b2ad4 	ldrd	r2, [fp, #-164]	; 0xffffff5c
    9550:	e1cd20f0 	strd	r2, [sp]
    9554:	e59f0554 	ldr	r0, [pc, #1364]	; 9ab0 <main+0xe10>
    9558:	e14b29dc 	ldrd	r2, [fp, #-156]	; 0xffffff64
    955c:	ebfffd58 	bl	8ac4 <_init+0x14c>
				usleep(100000);
    9560:	e59f059c 	ldr	r0, [pc, #1436]	; 9b04 <main+0xe64>
    9564:	ebfffd2f 	bl	8a28 <_init+0xb0>


				g_halGyro_readGyroscopeFromI2C_i32();
    9568:	eb000c9c 	bl	c7e0 <g_halGyro_readGyroscopeFromI2C_i32>
				usleep(100000);
    956c:	e59f0590 	ldr	r0, [pc, #1424]	; 9b04 <main+0xe64>
    9570:	ebfffd2c 	bl	8a28 <_init+0xb0>
				g_halGyro_readTemperatureFromI2C_i32();
    9574:	eb000d3c 	bl	ca6c <g_halGyro_readTemperatureFromI2C_i32>
				usleep(100000);
    9578:	e59f0584 	ldr	r0, [pc, #1412]	; 9b04 <main+0xe64>
    957c:	ebfffd29 	bl	8a28 <_init+0xb0>
				GyroValues=g_halGyro_getGyroscope_st();
    9580:	eb000c76 	bl	c760 <g_halGyro_getGyroscope_st>
    9584:	eeb05b40 	vmov.f64	d5, d0
    9588:	eeb06b41 	vmov.f64	d6, d1
    958c:	eeb07b42 	vmov.f64	d7, d2
    9590:	ed0b5b67 	vstr	d5, [fp, #-412]	; 0xfffffe64
    9594:	ed0b6b65 	vstr	d6, [fp, #-404]	; 0xfffffe6c
    9598:	ed0b7b63 	vstr	d7, [fp, #-396]	; 0xfffffe74
				Gyrotemp=g_halGyro_getTemperature_f64();
    959c:	eb000c85 	bl	c7b8 <g_halGyro_getTemperature_f64>
    95a0:	ed0b0b2b 	vstr	d0, [fp, #-172]	; 0xffffff54
				printf("roll: %5.3f    ;    pitch:  %5.3f    ;    yaw:  %5.3f\n",GyroValues.roll_f64, GyroValues.pitch_f64, GyroValues.yaw_f64);
    95a4:	e24b3f67 	sub	r3, fp, #412	; 0x19c
    95a8:	e1c320d0 	ldrd	r2, [r3]
    95ac:	e24b5f65 	sub	r5, fp, #404	; 0x194
    95b0:	e1c540d0 	ldrd	r4, [r5]
    95b4:	e24b1f63 	sub	r1, fp, #396	; 0x18c
    95b8:	e1c100d0 	ldrd	r0, [r1]
    95bc:	e1cd40f0 	strd	r4, [sp]
    95c0:	e1cd00f8 	strd	r0, [sp, #8]
    95c4:	e59f04e8 	ldr	r0, [pc, #1256]	; 9ab4 <main+0xe14>
    95c8:	ebfffd3d 	bl	8ac4 <_init+0x14c>
				usleep(100000);
    95cc:	e59f0530 	ldr	r0, [pc, #1328]	; 9b04 <main+0xe64>
    95d0:	ebfffd14 	bl	8a28 <_init+0xb0>
			}
    95d4:	eaffffd2 	b	9524 <main+0x884>
			break;
		}
		case TESTGYRO:
		{
			double pressure=0;
    95d8:	e3a02000 	mov	r2, #0
    95dc:	e3a03000 	mov	r3, #0
    95e0:	e14b2bf4 	strd	r2, [fp, #-180]	; 0xffffff4c
			double temp=0;
    95e4:	e3a02000 	mov	r2, #0
    95e8:	e3a03000 	mov	r3, #0
    95ec:	e14b2bfc 	strd	r2, [fp, #-188]	; 0xffffff44
			sigOri_orientationAngles GyroValues;
			double Gyrotemp=0;
    95f0:	e3a02000 	mov	r2, #0
    95f4:	e3a03000 	mov	r3, #0
    95f8:	e14b2cf4 	strd	r2, [fp, #-196]	; 0xffffff3c
			printf("IMU Gyroscope test\n");
    95fc:	e59f0504 	ldr	r0, [pc, #1284]	; 9b08 <main+0xe68>
    9600:	ebfffd44 	bl	8b18 <_init+0x1a0>
			g_halBaro_initBaro_i32();
    9604:	eb000b45 	bl	c320 <g_halBaro_initBaro_i32>
			g_halGyro_initGyro_i32();
    9608:	eb000c2a 	bl	c6b8 <g_halGyro_initGyro_i32>
			while(1)
			{
				g_halBaro_readPressureFromI2C_i32();
    960c:	eb000b81 	bl	c418 <g_halBaro_readPressureFromI2C_i32>
				//usleep(100000);
				g_halBaro_readTemperatureFromI2C_i32();
    9610:	eb000bd3 	bl	c564 <g_halBaro_readTemperatureFromI2C_i32>
				//usleep(100000);
				pressure=g_halBaro_getPressure_f64();
    9614:	eb000b6b 	bl	c3c8 <g_halBaro_getPressure_f64>
    9618:	ed0b0b2d 	vstr	d0, [fp, #-180]	; 0xffffff4c
				temp=g_halBaro_getTemperature_f64();
    961c:	eb000b73 	bl	c3f0 <g_halBaro_getTemperature_f64>
    9620:	ed0b0b2f 	vstr	d0, [fp, #-188]	; 0xffffff44
				printf("Pressure: %5.3f    ;    Temperature:  %5.3f\n",pressure,temp);
    9624:	e14b2bdc 	ldrd	r2, [fp, #-188]	; 0xffffff44
    9628:	e1cd20f0 	strd	r2, [sp]
    962c:	e59f047c 	ldr	r0, [pc, #1148]	; 9ab0 <main+0xe10>
    9630:	e14b2bd4 	ldrd	r2, [fp, #-180]	; 0xffffff4c
    9634:	ebfffd22 	bl	8ac4 <_init+0x14c>
				//usleep(100000);
				g_halGyro_readGyroscopeFromI2C_i32();
    9638:	eb000c68 	bl	c7e0 <g_halGyro_readGyroscopeFromI2C_i32>
				//usleep(100000);
				g_halGyro_readTemperatureFromI2C_i32();
    963c:	eb000d0a 	bl	ca6c <g_halGyro_readTemperatureFromI2C_i32>
				//usleep(100000);
				GyroValues=g_halGyro_getGyroscope_st();
    9640:	eb000c46 	bl	c760 <g_halGyro_getGyroscope_st>
    9644:	eeb05b40 	vmov.f64	d5, d0
    9648:	eeb06b41 	vmov.f64	d6, d1
    964c:	eeb07b42 	vmov.f64	d7, d2
    9650:	ed0b5b6d 	vstr	d5, [fp, #-436]	; 0xfffffe4c
    9654:	ed0b6b6b 	vstr	d6, [fp, #-428]	; 0xfffffe54
    9658:	ed0b7b69 	vstr	d7, [fp, #-420]	; 0xfffffe5c
				Gyrotemp=g_halGyro_getTemperature_f64();
    965c:	eb000c55 	bl	c7b8 <g_halGyro_getTemperature_f64>
    9660:	ed0b0b31 	vstr	d0, [fp, #-196]	; 0xffffff3c
				printf("roll: %5.3f    ;    pitch:  %5.3f    ;    yaw:  %5.3f\n",GyroValues.roll_f64, GyroValues.pitch_f64, GyroValues.yaw_f64);
    9664:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
    9668:	e1c320d0 	ldrd	r2, [r3]
    966c:	e24b5f6b 	sub	r5, fp, #428	; 0x1ac
    9670:	e1c540d0 	ldrd	r4, [r5]
    9674:	e24b1f69 	sub	r1, fp, #420	; 0x1a4
    9678:	e1c100d0 	ldrd	r0, [r1]
    967c:	e1cd40f0 	strd	r4, [sp]
    9680:	e1cd00f8 	strd	r0, [sp, #8]
    9684:	e59f0428 	ldr	r0, [pc, #1064]	; 9ab4 <main+0xe14>
    9688:	ebfffd0d 	bl	8ac4 <_init+0x14c>
				//usleep(100000);
			}
    968c:	eaffffde 	b	960c <main+0x96c>
			//static	double l_MatrixA_f64[1][3]={{1,2,9}};
			static	double l_MatrixB_f64[3][3]={{3,6,7},{2,5,9},{4,6,8}};
			//static	double l_MatrixB_f64[3][2]={{3,6},{2,5},{4,6}};
			static	double l_outputMatrix_f64[3][3]={{0,0,0},{0,0,0},{0,0,0}};
			//static	double l_outputMatrix_f64[3][2]={{0,0},{0,0},{0,0}};
			printf("matrix lib function test\n");
    9690:	e59f0474 	ldr	r0, [pc, #1140]	; 9b0c <main+0xe6c>
    9694:	ebfffd1f 	bl	8b18 <_init+0x1a0>
			while(1)
			{
				g_sigMath_matrixEye_bl((double*)l_outputMatrix_f64,3,3);
    9698:	e59f0470 	ldr	r0, [pc, #1136]	; 9b10 <main+0xe70>
    969c:	e3a01003 	mov	r1, #3
    96a0:	e3a02003 	mov	r2, #3
    96a4:	eb0017e4 	bl	f63c <g_sigMath_matrixEye_bl>
				sleep(1);
    96a8:	e3a00001 	mov	r0, #1
    96ac:	ebfffd13 	bl	8b00 <_init+0x188>
				g_sigMath_matrixInitialize_bl((double*)l_outputMatrix_f64,3,3,1);
    96b0:	e59f0458 	ldr	r0, [pc, #1112]	; 9b10 <main+0xe70>
    96b4:	e3a01003 	mov	r1, #3
    96b8:	e3a02003 	mov	r2, #3
    96bc:	ed9f0bdd 	vldr	d0, [pc, #884]	; 9a38 <main+0xd98>
    96c0:	eb0017b0 	bl	f588 <g_sigMath_matrixInitialize_bl>
				sleep(1);
    96c4:	e3a00001 	mov	r0, #1
    96c8:	ebfffd0c 	bl	8b00 <_init+0x188>
				g_sigMath_matrixMultiplikation_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3,(double*)l_MatrixB_f64,3,3);
    96cc:	e59f3440 	ldr	r3, [pc, #1088]	; 9b14 <main+0xe74>
    96d0:	e58d3000 	str	r3, [sp]
    96d4:	e3a03003 	mov	r3, #3
    96d8:	e58d3004 	str	r3, [sp, #4]
    96dc:	e3a03003 	mov	r3, #3
    96e0:	e58d3008 	str	r3, [sp, #8]
    96e4:	e59f0424 	ldr	r0, [pc, #1060]	; 9b10 <main+0xe70>
    96e8:	e59f1428 	ldr	r1, [pc, #1064]	; 9b18 <main+0xe78>
    96ec:	e3a02003 	mov	r2, #3
    96f0:	e3a03003 	mov	r3, #3
    96f4:	eb00142e 	bl	e7b4 <g_sigMath_matrixMultiplikation_bl>
				sleep(1);
    96f8:	e3a00001 	mov	r0, #1
    96fc:	ebfffcff 	bl	8b00 <_init+0x188>
				g_sigMath_matrixAddition_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3,(double*)l_MatrixB_f64,3,3);
    9700:	e59f340c 	ldr	r3, [pc, #1036]	; 9b14 <main+0xe74>
    9704:	e58d3000 	str	r3, [sp]
    9708:	e3a03003 	mov	r3, #3
    970c:	e58d3004 	str	r3, [sp, #4]
    9710:	e3a03003 	mov	r3, #3
    9714:	e58d3008 	str	r3, [sp, #8]
    9718:	e59f03f0 	ldr	r0, [pc, #1008]	; 9b10 <main+0xe70>
    971c:	e59f13f4 	ldr	r1, [pc, #1012]	; 9b18 <main+0xe78>
    9720:	e3a02003 	mov	r2, #3
    9724:	e3a03003 	mov	r3, #3
    9728:	eb00147e 	bl	e928 <g_sigMath_matrixAddition_bl>
				sleep(1);
    972c:	e3a00001 	mov	r0, #1
    9730:	ebfffcf2 	bl	8b00 <_init+0x188>
				g_sigMath_matrixSubtraktion_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3,(double*)l_MatrixB_f64,3,3);
    9734:	e59f33d8 	ldr	r3, [pc, #984]	; 9b14 <main+0xe74>
    9738:	e58d3000 	str	r3, [sp]
    973c:	e3a03003 	mov	r3, #3
    9740:	e58d3004 	str	r3, [sp, #4]
    9744:	e3a03003 	mov	r3, #3
    9748:	e58d3008 	str	r3, [sp, #8]
    974c:	e59f03bc 	ldr	r0, [pc, #956]	; 9b10 <main+0xe70>
    9750:	e59f13c0 	ldr	r1, [pc, #960]	; 9b18 <main+0xe78>
    9754:	e3a02003 	mov	r2, #3
    9758:	e3a03003 	mov	r3, #3
    975c:	eb0014bc 	bl	ea54 <g_sigMath_matrixSubtraktion_bl>
				sleep(1);
    9760:	e3a00001 	mov	r0, #1
    9764:	ebfffce5 	bl	8b00 <_init+0x188>
				g_sigMath_matrixAssignment_bl((double*)l_outputMatrix_f64,3,3,(double*)l_MatrixA_f64,3,3);
    9768:	e3a03003 	mov	r3, #3
    976c:	e58d3000 	str	r3, [sp]
    9770:	e3a03003 	mov	r3, #3
    9774:	e58d3004 	str	r3, [sp, #4]
    9778:	e59f0390 	ldr	r0, [pc, #912]	; 9b10 <main+0xe70>
    977c:	e3a01003 	mov	r1, #3
    9780:	e3a02003 	mov	r2, #3
    9784:	e59f338c 	ldr	r3, [pc, #908]	; 9b18 <main+0xe78>
    9788:	eb00173f 	bl	f48c <g_sigMath_matrixAssignment_bl>
				sleep(1);
    978c:	e3a00001 	mov	r0, #1
    9790:	ebfffcda 	bl	8b00 <_init+0x188>
				g_sigMath_matrixTransponiert_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3);
    9794:	e59f0374 	ldr	r0, [pc, #884]	; 9b10 <main+0xe70>
    9798:	e59f1378 	ldr	r1, [pc, #888]	; 9b18 <main+0xe78>
    979c:	e3a02003 	mov	r2, #3
    97a0:	e3a03003 	mov	r3, #3
    97a4:	eb0014f5 	bl	eb80 <g_sigMath_matrixTransponiert_bl>
				sleep(1);
    97a8:	e3a00001 	mov	r0, #1
    97ac:	ebfffcd3 	bl	8b00 <_init+0x188>
				g_sigMath_matrixInverse_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3);
    97b0:	e59f0358 	ldr	r0, [pc, #856]	; 9b10 <main+0xe70>
    97b4:	e59f135c 	ldr	r1, [pc, #860]	; 9b18 <main+0xe78>
    97b8:	e3a02003 	mov	r2, #3
    97bc:	e3a03003 	mov	r3, #3
    97c0:	eb001523 	bl	ec54 <g_sigMath_matrixInverse_bl>
				sleep(1);
    97c4:	e3a00001 	mov	r0, #1
    97c8:	ebfffccc 	bl	8b00 <_init+0x188>
			}
    97cc:	eaffffb1 	b	9698 <main+0x9f8>
			break;
		}
		case TESTUDP:
		{
			printf("simple send udp test...");
    97d0:	e59f0344 	ldr	r0, [pc, #836]	; 9b1c <main+0xe7c>
    97d4:	ebfffcba 	bl	8ac4 <_init+0x14c>
			int clientSocket;
			char message[20] = "Hello\n";
    97d8:	e59f2340 	ldr	r2, [pc, #832]	; 9b20 <main+0xe80>
    97dc:	e24b3f72 	sub	r3, fp, #456	; 0x1c8
    97e0:	e8920003 	ldm	r2, {r0, r1}
    97e4:	e5830000 	str	r0, [r3]
    97e8:	e2833004 	add	r3, r3, #4
    97ec:	e1c310b0 	strh	r1, [r3]
    97f0:	e2833002 	add	r3, r3, #2
    97f4:	e1a02821 	lsr	r2, r1, #16
    97f8:	e5c32000 	strb	r2, [r3]
    97fc:	e24b3d07 	sub	r3, fp, #448	; 0x1c0
    9800:	e2433001 	sub	r3, r3, #1
    9804:	e3a02000 	mov	r2, #0
    9808:	e5c32000 	strb	r2, [r3]
    980c:	e2833001 	add	r3, r3, #1
    9810:	e3a02000 	mov	r2, #0
    9814:	e5c32000 	strb	r2, [r3]
    9818:	e2833001 	add	r3, r3, #1
    981c:	e3a02000 	mov	r2, #0
    9820:	e5c32000 	strb	r2, [r3]
    9824:	e2833001 	add	r3, r3, #1
    9828:	e3a02000 	mov	r2, #0
    982c:	e5c32000 	strb	r2, [r3]
    9830:	e2833001 	add	r3, r3, #1
    9834:	e3a02000 	mov	r2, #0
    9838:	e5c32000 	strb	r2, [r3]
    983c:	e2833001 	add	r3, r3, #1
    9840:	e3a02000 	mov	r2, #0
    9844:	e5c32000 	strb	r2, [r3]
    9848:	e2833001 	add	r3, r3, #1
    984c:	e3a02000 	mov	r2, #0
    9850:	e5c32000 	strb	r2, [r3]
    9854:	e2833001 	add	r3, r3, #1
    9858:	e3a02000 	mov	r2, #0
    985c:	e5c32000 	strb	r2, [r3]
    9860:	e2833001 	add	r3, r3, #1
    9864:	e3a02000 	mov	r2, #0
    9868:	e5c32000 	strb	r2, [r3]
    986c:	e2833001 	add	r3, r3, #1
    9870:	e3a02000 	mov	r2, #0
    9874:	e5c32000 	strb	r2, [r3]
    9878:	e2833001 	add	r3, r3, #1
    987c:	e3a02000 	mov	r2, #0
    9880:	e5c32000 	strb	r2, [r3]
    9884:	e2833001 	add	r3, r3, #1
    9888:	e3a02000 	mov	r2, #0
    988c:	e5c32000 	strb	r2, [r3]
    9890:	e2833001 	add	r3, r3, #1
    9894:	e3a02000 	mov	r2, #0
    9898:	e5c32000 	strb	r2, [r3]
    989c:	e2833001 	add	r3, r3, #1
			struct sockaddr_in serverAddress;
			socklen_t addressSize;

			/*Create UDP socket*/
			clientSocket = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);
    98a0:	e3a00002 	mov	r0, #2
    98a4:	e3a01002 	mov	r1, #2
    98a8:	e3a02011 	mov	r2, #17
    98ac:	ebfffc75 	bl	8a88 <_init+0x110>
    98b0:	e50b00c8 	str	r0, [fp, #-200]	; 0xc8

			serverAddress.sin_family = PF_INET;
    98b4:	e59f3268 	ldr	r3, [pc, #616]	; 9b24 <main+0xe84>
    98b8:	e3a02002 	mov	r2, #2
    98bc:	e24b104c 	sub	r1, fp, #76	; 0x4c
    98c0:	e18120b3 	strh	r2, [r1, r3]
			serverAddress.sin_port = htons(REMOTE_PORT);
    98c4:	e59f02cc 	ldr	r0, [pc, #716]	; 9b98 <main+0xef8>
    98c8:	ebfffc4d 	bl	8a04 <_init+0x8c>
    98cc:	e1a03000 	mov	r3, r0
    98d0:	e1a02003 	mov	r2, r3
    98d4:	e59f324c 	ldr	r3, [pc, #588]	; 9b28 <main+0xe88>
    98d8:	e24b104c 	sub	r1, fp, #76	; 0x4c
    98dc:	e18120b3 	strh	r2, [r1, r3]
			serverAddress.sin_addr.s_addr = inet_addr(REMOTE_ADDR);
    98e0:	e59f0280 	ldr	r0, [pc, #640]	; 9b68 <main+0xec8>
    98e4:	ebfffc3d 	bl	89e0 <_init+0x68>
    98e8:	e1a03000 	mov	r3, r0
    98ec:	e50b31d4 	str	r3, [fp, #-468]	; 0x1d4

			memset(serverAddress.sin_zero, '\0', sizeof(serverAddress.sin_zero));
    98f0:	e24b3f76 	sub	r3, fp, #472	; 0x1d8
    98f4:	e2833008 	add	r3, r3, #8
    98f8:	e1a00003 	mov	r0, r3
    98fc:	e3a01000 	mov	r1, #0
    9900:	e3a02008 	mov	r2, #8
    9904:	ebfffc41 	bl	8a10 <_init+0x98>

			/*Initialize size variable to be used later on*/
			addressSize = sizeof(serverAddress);
    9908:	e3a03010 	mov	r3, #16
    990c:	e50b30cc 	str	r3, [fp, #-204]	; 0xcc

			printf("Start Sending Messages\n");
    9910:	e59f0214 	ldr	r0, [pc, #532]	; 9b2c <main+0xe8c>
    9914:	ebfffc7f 	bl	8b18 <_init+0x1a0>

			while(1)
			{
				sleep(1);
    9918:	e3a00001 	mov	r0, #1
    991c:	ebfffc77 	bl	8b00 <_init+0x188>
				/* Send N bytes of BUF on socket FD to peer at address ADDR (which is
				   ADDR_LEN bytes long).  Returns the number sent, or -1 for errors.

				   This function is a cancellation point and therefore not marked with
				   __THROW.  */
				sendto(clientSocket, message, sizeof(message), 0,
    9920:	e24b3f72 	sub	r3, fp, #456	; 0x1c8
    9924:	e24b2f76 	sub	r2, fp, #472	; 0x1d8
    9928:	e58d2000 	str	r2, [sp]
    992c:	e51b20cc 	ldr	r2, [fp, #-204]	; 0xcc
    9930:	e58d2004 	str	r2, [sp, #4]
    9934:	e51b00c8 	ldr	r0, [fp, #-200]	; 0xc8
    9938:	e1a01003 	mov	r1, r3
    993c:	e3a02014 	mov	r2, #20
    9940:	e3a03000 	mov	r3, #0
    9944:	ebfffc2b 	bl	89f8 <_init+0x80>
						(struct sockaddr *)&serverAddress,addressSize);
				printf("And send again....\n");
    9948:	e59f01e0 	ldr	r0, [pc, #480]	; 9b30 <main+0xe90>
    994c:	ebfffc71 	bl	8b18 <_init+0x1a0>
			}
    9950:	eafffff0 	b	9918 <main+0xc78>


			struct timespec					l_timestamp_st;


			printf("Starting Transfer matlab data on udp test\n");
    9954:	e59f01d8 	ldr	r0, [pc, #472]	; 9b34 <main+0xe94>
    9958:	ebfffc6e 	bl	8b18 <_init+0x1a0>

			int val=0;
    995c:	e3a03000 	mov	r3, #0
    9960:	e50b30d0 	str	r3, [fp, #-208]	; 0xd0
			int socketclient = 0;
    9964:	e3a03000 	mov	r3, #0
    9968:	e50b30d4 	str	r3, [fp, #-212]	; 0xd4
			struct sockaddr_in remoteaddress;

			remoteaddress.sin_family = PF_INET;
    996c:	e59f31c4 	ldr	r3, [pc, #452]	; 9b38 <main+0xe98>
    9970:	e3a02002 	mov	r2, #2
    9974:	e24b104c 	sub	r1, fp, #76	; 0x4c
    9978:	e18120b3 	strh	r2, [r1, r3]
			remoteaddress.sin_port = htons(REMOTE_PORT);
    997c:	e59f0214 	ldr	r0, [pc, #532]	; 9b98 <main+0xef8>
    9980:	ebfffc1f 	bl	8a04 <_init+0x8c>
    9984:	e1a03000 	mov	r3, r0
    9988:	e1a02003 	mov	r2, r3
    998c:	e59f31a8 	ldr	r3, [pc, #424]	; 9b3c <main+0xe9c>
    9990:	e24b104c 	sub	r1, fp, #76	; 0x4c
    9994:	e18120b3 	strh	r2, [r1, r3]

			(void)inet_aton(REMOTE_ADDR, &remoteaddress.sin_addr); //dot to integer and then host to network byte order
    9998:	e24b3f89 	sub	r3, fp, #548	; 0x224
    999c:	e2833004 	add	r3, r3, #4
    99a0:	e59f01c0 	ldr	r0, [pc, #448]	; 9b68 <main+0xec8>
    99a4:	e1a01003 	mov	r1, r3
    99a8:	ebfffc39 	bl	8a94 <_init+0x11c>

			socketclient = socket(PF_INET, SOCK_DGRAM, 0);
    99ac:	e3a00002 	mov	r0, #2
    99b0:	e3a01002 	mov	r1, #2
    99b4:	e3a02000 	mov	r2, #0
    99b8:	ebfffc32 	bl	8a88 <_init+0x110>
    99bc:	e50b00d4 	str	r0, [fp, #-212]	; 0xd4


			g_sigOri_initMatrices_bl();
    99c0:	eb0017d5 	bl	f91c <g_sigOri_initMatrices_bl>
			g_sigOri_initImuSensors_bl();
    99c4:	eb0017c9 	bl	f8f0 <g_sigOri_initImuSensors_bl>

			while(1)
			{
				g_sigOri_calcKalmanOrientation_bl();
    99c8:	eb0019bb 	bl	100bc <g_sigOri_calcKalmanOrientation_bl>
				g_sigOri_calcComplementaryOrientation_bl();
    99cc:	eb001a95 	bl	10428 <g_sigOri_calcComplementaryOrientation_bl>

				l_kalmanAngles_st 	= g_sigOri_getAnglesKalman_bl();
    99d0:	eb001792 	bl	f820 <g_sigOri_getAnglesKalman_bl>
    99d4:	eeb05b40 	vmov.f64	d5, d0
    99d8:	eeb06b41 	vmov.f64	d6, d1
    99dc:	eeb07b42 	vmov.f64	d7, d2
    99e0:	ed0b5b7d 	vstr	d5, [fp, #-500]	; 0xfffffe0c
    99e4:	ed0b6b7b 	vstr	d6, [fp, #-492]	; 0xfffffe14
    99e8:	ed0b7b79 	vstr	d7, [fp, #-484]	; 0xfffffe1c
				l_compAngles_st		= g_sigOri_getAnglesComplementary_bl();
    99ec:	eb001757 	bl	f750 <g_sigOri_getAnglesComplementary_bl>
    99f0:	eeb05b40 	vmov.f64	d5, d0
    99f4:	eeb06b41 	vmov.f64	d6, d1
    99f8:	eeb07b42 	vmov.f64	d7, d2
    99fc:	ed0b5b83 	vstr	d5, [fp, #-524]	; 0xfffffdf4
    9a00:	ed0b6b81 	vstr	d6, [fp, #-516]	; 0xfffffdfc
    9a04:	ed0b7b7f 	vstr	d7, [fp, #-508]	; 0xfffffe04
				l_imuStates_st 		= g_halImu_getImuValues_str();
    9a08:	e24b3fed 	sub	r3, fp, #948	; 0x3b4
    9a0c:	e1a00003 	mov	r0, r3
    9a10:	eb000cc9 	bl	cd3c <g_halImu_getImuValues_str>
				 *                Select 'Cross G++ Linker'->Libraries
				 *                and add the entry 'rt' to 'Libraries (-l)'
				 *
				 *       GCC on the commandline: simply add '-lrt' to your gcc options
				 */
				if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    9a14:	e24b3f85 	sub	r3, fp, #532	; 0x214
    9a18:	e3a00000 	mov	r0, #0
    9a1c:	e1a01003 	mov	r1, r3
    9a20:	ebfffbe5 	bl	89bc <_init+0x44>
    9a24:	e1a03000 	mov	r3, r0
    9a28:	e3530000 	cmp	r3, #0
    9a2c:	0a00006e 	beq	9bec <main+0xf4c>
				{
					return M_HAL_MATLAB_FAILED_UI8;
    9a30:	e3a03001 	mov	r3, #1
    9a34:	ea00026e 	b	a3f4 <main+0x1754>
    9a38:	00000000 	.word	0x00000000
    9a3c:	3ff00000 	.word	0x3ff00000
    9a40:	00010910 	.word	0x00010910
    9a44:	00010914 	.word	0x00010914
    9a48:	0001092c 	.word	0x0001092c
    9a4c:	00010934 	.word	0x00010934
    9a50:	00010940 	.word	0x00010940
    9a54:	00010948 	.word	0x00010948
    9a58:	00010950 	.word	0x00010950
    9a5c:	0001095c 	.word	0x0001095c
    9a60:	00010968 	.word	0x00010968
    9a64:	00010978 	.word	0x00010978
    9a68:	0001098c 	.word	0x0001098c
    9a6c:	00010998 	.word	0x00010998
    9a70:	000109a4 	.word	0x000109a4
    9a74:	000109b0 	.word	0x000109b0
    9a78:	000109c0 	.word	0x000109c0
    9a7c:	000109c8 	.word	0x000109c8
    9a80:	000109d8 	.word	0x000109d8
    9a84:	000109e8 	.word	0x000109e8
    9a88:	000109fc 	.word	0x000109fc
    9a8c:	00010a0c 	.word	0x00010a0c
    9a90:	00010a1c 	.word	0x00010a1c
    9a94:	00010a2c 	.word	0x00010a2c
    9a98:	00010a40 	.word	0x00010a40
    9a9c:	00010a48 	.word	0x00010a48
    9aa0:	00010a58 	.word	0x00010a58
    9aa4:	00010a70 	.word	0x00010a70
    9aa8:	00010a8c 	.word	0x00010a8c
    9aac:	00010aa0 	.word	0x00010aa0
    9ab0:	00010ab4 	.word	0x00010ab4
    9ab4:	00010ae4 	.word	0x00010ae4
    9ab8:	00010b1c 	.word	0x00010b1c
    9abc:	00010b40 	.word	0x00010b40
    9ac0:	00010b68 	.word	0x00010b68
    9ac4:	00010b7c 	.word	0x00010b7c
    9ac8:	0007a120 	.word	0x0007a120
    9acc:	00010b90 	.word	0x00010b90
    9ad0:	00010ba4 	.word	0x00010ba4
    9ad4:	00010bb4 	.word	0x00010bb4
    9ad8:	00010bd0 	.word	0x00010bd0
    9adc:	00010bf0 	.word	0x00010bf0
    9ae0:	00010c18 	.word	0x00010c18
    9ae4:	00010c28 	.word	0x00010c28
    9ae8:	00010c34 	.word	0x00010c34
    9aec:	00010c58 	.word	0x00010c58
    9af0:	00010c68 	.word	0x00010c68
    9af4:	00010c7c 	.word	0x00010c7c
    9af8:	00010c90 	.word	0x00010c90
    9afc:	0003d090 	.word	0x0003d090
    9b00:	00010cc8 	.word	0x00010cc8
    9b04:	000186a0 	.word	0x000186a0
    9b08:	00010ce4 	.word	0x00010ce4
    9b0c:	00010cf8 	.word	0x00010cf8
    9b10:	00019760 	.word	0x00019760
    9b14:	00019318 	.word	0x00019318
    9b18:	000192d0 	.word	0x000192d0
    9b1c:	00010d14 	.word	0x00010d14
    9b20:	000110a8 	.word	0x000110a8
    9b24:	fffffe74 	.word	0xfffffe74
    9b28:	fffffe76 	.word	0xfffffe76
    9b2c:	00010d3c 	.word	0x00010d3c
    9b30:	00010d54 	.word	0x00010d54
    9b34:	00010d68 	.word	0x00010d68
    9b38:	fffffe28 	.word	0xfffffe28
    9b3c:	fffffe2a 	.word	0xfffffe2a
    9b40:	00010dc0 	.word	0x00010dc0
    9b44:	00010dd0 	.word	0x00010dd0
    9b48:	00010de0 	.word	0x00010de0
    9b4c:	00010dfc 	.word	0x00010dfc
    9b50:	00010e10 	.word	0x00010e10
    9b54:	00010e20 	.word	0x00010e20
    9b58:	00010e40 	.word	0x00010e40
    9b5c:	00010e68 	.word	0x00010e68
    9b60:	fffffdb0 	.word	0xfffffdb0
    9b64:	fffffdb2 	.word	0xfffffdb2
    9b68:	00010d2c 	.word	0x00010d2c
    9b6c:	00010d94 	.word	0x00010d94
    9b70:	00010da8 	.word	0x00010da8
    9b74:	00010e94 	.word	0x00010e94
    9b78:	00010ec8 	.word	0x00010ec8
    9b7c:	00010ef0 	.word	0x00010ef0
    9b80:	00010f20 	.word	0x00010f20
    9b84:	00010f50 	.word	0x00010f50
    9b88:	00019378 	.word	0x00019378
    9b8c:	0000c350 	.word	0x0000c350
    9b90:	00010f78 	.word	0x00010f78
    9b94:	000110bc 	.word	0x000110bc
    9b98:	00001388 	.word	0x00001388
    9b9c:	00010f9c 	.word	0x00010f9c
    9ba0:	00010fa8 	.word	0x00010fa8
    9ba4:	00010fb4 	.word	0x00010fb4
    9ba8:	00010fc0 	.word	0x00010fc0
    9bac:	00010fcc 	.word	0x00010fcc
    9bb0:	00010fd8 	.word	0x00010fd8
    9bb4:	00010fe4 	.word	0x00010fe4
    9bb8:	00010ff4 	.word	0x00010ff4
    9bbc:	00011004 	.word	0x00011004
    9bc0:	00011014 	.word	0x00011014
    9bc4:	00011020 	.word	0x00011020
    9bc8:	0001102c 	.word	0x0001102c
    9bcc:	00010bdc 	.word	0x00010bdc
    9bd0:	00004e20 	.word	0x00004e20
    9bd4:	00011058 	.word	0x00011058
    9bd8:	fffffda8 	.word	0xfffffda8
    9bdc:	00002710 	.word	0x00002710
    9be0:	00011078 	.word	0x00011078
    9be4:	40240000 	.word	0x40240000
    9be8:	00011098 	.word	0x00011098
				}

				clock_gettime(CLOCK_REALTIME, &l_timestamp_st);
    9bec:	e24b3f85 	sub	r3, fp, #532	; 0x214
    9bf0:	e3a00000 	mov	r0, #0
    9bf4:	e1a01003 	mov	r1, r3
    9bf8:	ebfffb6f 	bl	89bc <_init+0x44>

				//assmeble timestamp and
				l_rtCompleteSigPayload_st.timestamp_st 				= l_timestamp_st;
    9bfc:	e24b3fd5 	sub	r3, fp, #852	; 0x354
    9c00:	e24b2f85 	sub	r2, fp, #532	; 0x214
    9c04:	e8920003 	ldm	r2, {r0, r1}
    9c08:	e8830003 	stm	r3, {r0, r1}
				l_rtCompleteSigPayload_st.imuState_st				= l_imuStates_st;
    9c0c:	e24b1fd3 	sub	r1, fp, #844	; 0x34c
    9c10:	e24b2fed 	sub	r2, fp, #948	; 0x3b4
    9c14:	e3a03060 	mov	r3, #96	; 0x60
    9c18:	e1a00001 	mov	r0, r1
    9c1c:	e1a01002 	mov	r1, r2
    9c20:	e1a02003 	mov	r2, r3
    9c24:	ebfffba3 	bl	8ab8 <_init+0x140>
				l_rtCompleteSigPayload_st.kalmanSigState_st 		= l_kalmanAngles_st;
    9c28:	e24bcfbb 	sub	ip, fp, #748	; 0x2ec
    9c2c:	e24bef7d 	sub	lr, fp, #500	; 0x1f4
    9c30:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9c34:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    9c38:	e89e0003 	ldm	lr, {r0, r1}
    9c3c:	e88c0003 	stm	ip, {r0, r1}
				l_rtCompleteSigPayload_st.complementarySigState_st	= l_compAngles_st;
    9c40:	e24bcfb5 	sub	ip, fp, #724	; 0x2d4
    9c44:	e24bef83 	sub	lr, fp, #524	; 0x20c
    9c48:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9c4c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    9c50:	e89e0003 	ldm	lr, {r0, r1}
    9c54:	e88c0003 	stm	ip, {r0, r1}

				printf("START MEASUREMENT\n");
    9c58:	e51f00f4 	ldr	r0, [pc, #-244]	; 9b6c <main+0xecc>
    9c5c:	ebfffbad 	bl	8b18 <_init+0x1a0>
				sprintf(str, "sec =  %d, nano = %d",
    9c60:	e51b2354 	ldr	r2, [fp, #-852]	; 0x354
    9c64:	e51b3350 	ldr	r3, [fp, #-848]	; 0x350
    9c68:	e51f00e8 	ldr	r0, [pc, #-232]	; 9b88 <main+0xee8>
    9c6c:	e51f1104 	ldr	r1, [pc, #-260]	; 9b70 <main+0xed0>
    9c70:	ebfffbbd 	bl	8b6c <_init+0x1f4>
						l_rtCompleteSigPayload_st.timestamp_st.tv_sec, l_rtCompleteSigPayload_st.timestamp_st.tv_nsec);
				puts(str);
    9c74:	e51f00f4 	ldr	r0, [pc, #-244]	; 9b88 <main+0xee8>
    9c78:	ebfffba6 	bl	8b18 <_init+0x1a0>
				sprintf(str, "acc = %f %f %f",
    9c7c:	e24b3fd1 	sub	r3, fp, #836	; 0x344
    9c80:	e1c320d0 	ldrd	r2, [r3]
    9c84:	e24b5fcf 	sub	r5, fp, #828	; 0x33c
    9c88:	e1c540d0 	ldrd	r4, [r5]
    9c8c:	e24b1fcd 	sub	r1, fp, #820	; 0x334
    9c90:	e1c100d0 	ldrd	r0, [r1]
    9c94:	e1cd40f0 	strd	r4, [sp]
    9c98:	e1cd00f8 	strd	r0, [sp, #8]
    9c9c:	e51f011c 	ldr	r0, [pc, #-284]	; 9b88 <main+0xee8>
    9ca0:	e51f1168 	ldr	r1, [pc, #-360]	; 9b40 <main+0xea0>
    9ca4:	ebfffbb0 	bl	8b6c <_init+0x1f4>
						l_rtCompleteSigPayload_st.imuState_st.acc.x_f64, l_rtCompleteSigPayload_st.imuState_st.acc.y_f64, l_rtCompleteSigPayload_st.imuState_st.acc.z_f64);
				puts(str);
    9ca8:	e51f0128 	ldr	r0, [pc, #-296]	; 9b88 <main+0xee8>
    9cac:	ebfffb99 	bl	8b18 <_init+0x1a0>
				sprintf(str, "mag = %f %f %f",
    9cb0:	e24b3fcb 	sub	r3, fp, #812	; 0x32c
    9cb4:	e1c320d0 	ldrd	r2, [r3]
    9cb8:	e24b5fc9 	sub	r5, fp, #804	; 0x324
    9cbc:	e1c540d0 	ldrd	r4, [r5]
    9cc0:	e24b1fc7 	sub	r1, fp, #796	; 0x31c
    9cc4:	e1c100d0 	ldrd	r0, [r1]
    9cc8:	e1cd40f0 	strd	r4, [sp]
    9ccc:	e1cd00f8 	strd	r0, [sp, #8]
    9cd0:	e51f0150 	ldr	r0, [pc, #-336]	; 9b88 <main+0xee8>
    9cd4:	e51f1198 	ldr	r1, [pc, #-408]	; 9b44 <main+0xea4>
    9cd8:	ebfffba3 	bl	8b6c <_init+0x1f4>
						l_rtCompleteSigPayload_st.imuState_st.mag.x_f64, l_rtCompleteSigPayload_st.imuState_st.mag.y_f64, l_rtCompleteSigPayload_st.imuState_st.mag.z_f64);
				puts(str);
    9cdc:	e51f015c 	ldr	r0, [pc, #-348]	; 9b88 <main+0xee8>
    9ce0:	ebfffb8c 	bl	8b18 <_init+0x1a0>
				sprintf(str, "roll %f, pitch %f yaw  %f",
    9ce4:	e24b3fc5 	sub	r3, fp, #788	; 0x314
    9ce8:	e1c320d0 	ldrd	r2, [r3]
    9cec:	e24b5fc3 	sub	r5, fp, #780	; 0x30c
    9cf0:	e1c540d0 	ldrd	r4, [r5]
    9cf4:	e24b1fc1 	sub	r1, fp, #772	; 0x304
    9cf8:	e1c100d0 	ldrd	r0, [r1]
    9cfc:	e1cd40f0 	strd	r4, [sp]
    9d00:	e1cd00f8 	strd	r0, [sp, #8]
    9d04:	e51f0184 	ldr	r0, [pc, #-388]	; 9b88 <main+0xee8>
    9d08:	e51f11c8 	ldr	r1, [pc, #-456]	; 9b48 <main+0xea8>
    9d0c:	ebfffb96 	bl	8b6c <_init+0x1f4>
						l_rtCompleteSigPayload_st.imuState_st.gyro.roll_f64, l_rtCompleteSigPayload_st.imuState_st.gyro.pitch_f64, l_rtCompleteSigPayload_st.imuState_st.gyro.yaw_f64 );
				puts(str);
    9d10:	e51f0190 	ldr	r0, [pc, #-400]	; 9b88 <main+0xee8>
    9d14:	ebfffb7f 	bl	8b18 <_init+0x1a0>
				sprintf(str, "temperature = %f",
    9d18:	e24b3fbf 	sub	r3, fp, #764	; 0x2fc
    9d1c:	e1c320d0 	ldrd	r2, [r3]
    9d20:	e51f01a0 	ldr	r0, [pc, #-416]	; 9b88 <main+0xee8>
    9d24:	e51f11e0 	ldr	r1, [pc, #-480]	; 9b4c <main+0xeac>
    9d28:	ebfffb8f 	bl	8b6c <_init+0x1f4>
						l_rtCompleteSigPayload_st.imuState_st.temperature_f64);
				puts(str);
    9d2c:	e51f01ac 	ldr	r0, [pc, #-428]	; 9b88 <main+0xee8>
    9d30:	ebfffb78 	bl	8b18 <_init+0x1a0>
				sprintf(str, "pressure = %f",
    9d34:	e24b3fbd 	sub	r3, fp, #756	; 0x2f4
    9d38:	e1c320d0 	ldrd	r2, [r3]
    9d3c:	e51f01bc 	ldr	r0, [pc, #-444]	; 9b88 <main+0xee8>
    9d40:	e51f11f8 	ldr	r1, [pc, #-504]	; 9b50 <main+0xeb0>
    9d44:	ebfffb88 	bl	8b6c <_init+0x1f4>
						l_rtCompleteSigPayload_st.imuState_st.pressure_f64);
				puts(str);
    9d48:	e51f01c8 	ldr	r0, [pc, #-456]	; 9b88 <main+0xee8>
    9d4c:	ebfffb71 	bl	8b18 <_init+0x1a0>
				sprintf(str, "KALMAN yaw %f, pitch %f roll %f",
    9d50:	e24b3fb7 	sub	r3, fp, #732	; 0x2dc
    9d54:	e1c320d0 	ldrd	r2, [r3]
    9d58:	e24b5fb9 	sub	r5, fp, #740	; 0x2e4
    9d5c:	e1c540d0 	ldrd	r4, [r5]
    9d60:	e24b1fbb 	sub	r1, fp, #748	; 0x2ec
    9d64:	e1c100d0 	ldrd	r0, [r1]
    9d68:	e1cd40f0 	strd	r4, [sp]
    9d6c:	e1cd00f8 	strd	r0, [sp, #8]
    9d70:	e51f01f0 	ldr	r0, [pc, #-496]	; 9b88 <main+0xee8>
    9d74:	e51f1228 	ldr	r1, [pc, #-552]	; 9b54 <main+0xeb4>
    9d78:	ebfffb7b 	bl	8b6c <_init+0x1f4>
						l_rtCompleteSigPayload_st.kalmanSigState_st.yaw_f64, l_rtCompleteSigPayload_st.kalmanSigState_st.pitch_f64, l_rtCompleteSigPayload_st.kalmanSigState_st.roll_f64);
				puts(str);
    9d7c:	e51f01fc 	ldr	r0, [pc, #-508]	; 9b88 <main+0xee8>
    9d80:	ebfffb64 	bl	8b18 <_init+0x1a0>
				sprintf(str, "COMPLEMENTARY yaw %f, pitch %f roll %f",
    9d84:	e24b3fb1 	sub	r3, fp, #708	; 0x2c4
    9d88:	e1c320d0 	ldrd	r2, [r3]
    9d8c:	e24b5fb3 	sub	r5, fp, #716	; 0x2cc
    9d90:	e1c540d0 	ldrd	r4, [r5]
    9d94:	e24b1fb5 	sub	r1, fp, #724	; 0x2d4
    9d98:	e1c100d0 	ldrd	r0, [r1]
    9d9c:	e1cd40f0 	strd	r4, [sp]
    9da0:	e1cd00f8 	strd	r0, [sp, #8]
    9da4:	e51f0224 	ldr	r0, [pc, #-548]	; 9b88 <main+0xee8>
    9da8:	e51f1258 	ldr	r1, [pc, #-600]	; 9b58 <main+0xeb8>
    9dac:	ebfffb6e 	bl	8b6c <_init+0x1f4>
						l_rtCompleteSigPayload_st.complementarySigState_st.yaw_f64, l_rtCompleteSigPayload_st.complementarySigState_st.pitch_f64, l_rtCompleteSigPayload_st.complementarySigState_st.roll_f64);
				puts(str);
    9db0:	e51f0230 	ldr	r0, [pc, #-560]	; 9b88 <main+0xee8>
    9db4:	ebfffb57 	bl	8b18 <_init+0x1a0>

				//printf("Sending time %d and Temperature %f\n", l_rtCompleteSigPayload_st.timestamp_st.tv_sec, l_rtCompleteSigPayload_st.imuState_st.temperature_f64);
				sendto(socketclient, (unsigned char *)&l_rtCompleteSigPayload_st , (size_t)sizeof( l_rtCompleteSigPayload_st ),  0, (struct sockaddr *)&remoteaddress, sizeof(remoteaddress));
    9db8:	e24b3fd5 	sub	r3, fp, #852	; 0x354
    9dbc:	e24b2f89 	sub	r2, fp, #548	; 0x224
    9dc0:	e58d2000 	str	r2, [sp]
    9dc4:	e3a02010 	mov	r2, #16
    9dc8:	e58d2004 	str	r2, [sp, #4]
    9dcc:	e51b00d4 	ldr	r0, [fp, #-212]	; 0xd4
    9dd0:	e1a01003 	mov	r1, r3
    9dd4:	e3a02098 	mov	r2, #152	; 0x98
    9dd8:	e3a03000 	mov	r3, #0
    9ddc:	ebfffb05 	bl	89f8 <_init+0x80>

				usleep( 50000 ); //20ms = 50Hz
    9de0:	e51f025c 	ldr	r0, [pc, #-604]	; 9b8c <main+0xeec>
    9de4:	ebfffb0f 	bl	8a28 <_init+0xb0>
			}
    9de8:	eafffef6 	b	99c8 <main+0xd28>

			halMatlab_rtSigRollPitchYawStatePayload	l_rtRollPitchYawSigPayload_st;

			struct timespec					l_timestamp_st;

			printf("Starting Transfer matlab data on all angles\n");
    9dec:	e51f0298 	ldr	r0, [pc, #-664]	; 9b5c <main+0xebc>
    9df0:	ebfffb48 	bl	8b18 <_init+0x1a0>

			int val=0;
    9df4:	e3a03000 	mov	r3, #0
    9df8:	e50b30d8 	str	r3, [fp, #-216]	; 0xd8
			int socketclient = 0;
    9dfc:	e3a03000 	mov	r3, #0
    9e00:	e50b30dc 	str	r3, [fp, #-220]	; 0xdc
			struct sockaddr_in remoteaddress;

			remoteaddress.sin_family = PF_INET;
    9e04:	e51f32ac 	ldr	r3, [pc, #-684]	; 9b60 <main+0xec0>
    9e08:	e3a02002 	mov	r2, #2
    9e0c:	e24b104c 	sub	r1, fp, #76	; 0x4c
    9e10:	e18120b3 	strh	r2, [r1, r3]
			remoteaddress.sin_port = htons(REMOTE_PORT);
    9e14:	e51f0284 	ldr	r0, [pc, #-644]	; 9b98 <main+0xef8>
    9e18:	ebfffaf9 	bl	8a04 <_init+0x8c>
    9e1c:	e1a03000 	mov	r3, r0
    9e20:	e1a02003 	mov	r2, r3
    9e24:	e51f32c8 	ldr	r3, [pc, #-712]	; 9b64 <main+0xec4>
    9e28:	e24b104c 	sub	r1, fp, #76	; 0x4c
    9e2c:	e18120b3 	strh	r2, [r1, r3]

			(void)inet_aton(REMOTE_ADDR, &remoteaddress.sin_addr); //dot to integer and then host to network byte order
    9e30:	e24b3fa7 	sub	r3, fp, #668	; 0x29c
    9e34:	e2833004 	add	r3, r3, #4
    9e38:	e51f02d8 	ldr	r0, [pc, #-728]	; 9b68 <main+0xec8>
    9e3c:	e1a01003 	mov	r1, r3
    9e40:	ebfffb13 	bl	8a94 <_init+0x11c>

			socketclient = socket(PF_INET, SOCK_DGRAM, 0);
    9e44:	e3a00002 	mov	r0, #2
    9e48:	e3a01002 	mov	r1, #2
    9e4c:	e3a02000 	mov	r2, #0
    9e50:	ebfffb0c 	bl	8a88 <_init+0x110>
    9e54:	e50b00dc 	str	r0, [fp, #-220]	; 0xdc

			g_sigOri_initMatrices_bl();
    9e58:	eb0016af 	bl	f91c <g_sigOri_initMatrices_bl>
			g_sigOri_initImuSensors_bl();
    9e5c:	eb0016a3 	bl	f8f0 <g_sigOri_initImuSensors_bl>

			while(1)
			{
				g_sigOri_calcKalmanOrientation_bl();
    9e60:	eb001895 	bl	100bc <g_sigOri_calcKalmanOrientation_bl>
				g_sigOri_calcComplementaryOrientation_bl();
    9e64:	eb00196f 	bl	10428 <g_sigOri_calcComplementaryOrientation_bl>

				l_imuStates_st 		= g_halImu_getImuValues_str();
    9e68:	e24b3fed 	sub	r3, fp, #948	; 0x3b4
    9e6c:	e1a00003 	mov	r0, r3
    9e70:	eb000bb1 	bl	cd3c <g_halImu_getImuValues_str>
				l_GyroPerStepAngles_st = g_sigOri_getAnglesGyroPerStep_bl();
    9e74:	eb0019c6 	bl	10594 <g_sigOri_getAnglesGyroPerStep_bl>
    9e78:	eeb05b40 	vmov.f64	d5, d0
    9e7c:	eeb06b41 	vmov.f64	d6, d1
    9e80:	eeb07b42 	vmov.f64	d7, d2
    9e84:	ed0b5b8f 	vstr	d5, [fp, #-572]	; 0xfffffdc4
    9e88:	ed0b6b8d 	vstr	d6, [fp, #-564]	; 0xfffffdcc
    9e8c:	ed0b7b8b 	vstr	d7, [fp, #-556]	; 0xfffffdd4
				l_AccMagAngles_st = g_sigOri_getAnglesAccMagCalc_bl();
    9e90:	eb0019a9 	bl	1053c <g_sigOri_getAnglesAccMagCalc_bl>
    9e94:	eeb05b40 	vmov.f64	d5, d0
    9e98:	eeb06b41 	vmov.f64	d6, d1
    9e9c:	eeb07b42 	vmov.f64	d7, d2
    9ea0:	ed0b5b95 	vstr	d5, [fp, #-596]	; 0xfffffdac
    9ea4:	ed0b6b93 	vstr	d6, [fp, #-588]	; 0xfffffdb4
    9ea8:	ed0b7b91 	vstr	d7, [fp, #-580]	; 0xfffffdbc
				l_kalmanAngles_st 	= g_sigOri_getAnglesKalman_bl();
    9eac:	eb00165b 	bl	f820 <g_sigOri_getAnglesKalman_bl>
    9eb0:	eeb05b40 	vmov.f64	d5, d0
    9eb4:	eeb06b41 	vmov.f64	d6, d1
    9eb8:	eeb07b42 	vmov.f64	d7, d2
    9ebc:	ed0b5b9b 	vstr	d5, [fp, #-620]	; 0xfffffd94
    9ec0:	ed0b6b99 	vstr	d6, [fp, #-612]	; 0xfffffd9c
    9ec4:	ed0b7b97 	vstr	d7, [fp, #-604]	; 0xfffffda4
				l_compAngles_st		= g_sigOri_getAnglesComplementary_bl();
    9ec8:	eb001620 	bl	f750 <g_sigOri_getAnglesComplementary_bl>
    9ecc:	eeb05b40 	vmov.f64	d5, d0
    9ed0:	eeb06b41 	vmov.f64	d6, d1
    9ed4:	eeb07b42 	vmov.f64	d7, d2
    9ed8:	ed0b5ba1 	vstr	d5, [fp, #-644]	; 0xfffffd7c
    9edc:	ed0b6b9f 	vstr	d6, [fp, #-636]	; 0xfffffd84
    9ee0:	ed0b7b9d 	vstr	d7, [fp, #-628]	; 0xfffffd8c


				if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    9ee4:	e24b3fa3 	sub	r3, fp, #652	; 0x28c
    9ee8:	e3a00000 	mov	r0, #0
    9eec:	e1a01003 	mov	r1, r3
    9ef0:	ebfffab1 	bl	89bc <_init+0x44>
    9ef4:	e1a03000 	mov	r3, r0
    9ef8:	e3530000 	cmp	r3, #0
    9efc:	0a000001 	beq	9f08 <main+0x1268>
				{
					return M_HAL_MATLAB_FAILED_UI8;
    9f00:	e3a03001 	mov	r3, #1
    9f04:	ea00013a 	b	a3f4 <main+0x1754>
				}

				clock_gettime(CLOCK_REALTIME, &l_timestamp_st);
    9f08:	e24b3fa3 	sub	r3, fp, #652	; 0x28c
    9f0c:	e3a00000 	mov	r0, #0
    9f10:	e1a01003 	mov	r1, r3
    9f14:	ebfffaa8 	bl	89bc <_init+0x44>

				//assmeble timestamp and
				l_rtRollPitchYawSigPayload_st.timestamp_st 				= l_timestamp_st;
    9f18:	e24b3fd5 	sub	r3, fp, #852	; 0x354
    9f1c:	e24b2fa3 	sub	r2, fp, #652	; 0x28c
    9f20:	e8920003 	ldm	r2, {r0, r1}
    9f24:	e8830003 	stm	r3, {r0, r1}
				l_rtRollPitchYawSigPayload_st.angularVelocityGyroFromImu_st 		= l_imuStates_st.gyro;
    9f28:	e24bcfd3 	sub	ip, fp, #844	; 0x34c
    9f2c:	e24befdf 	sub	lr, fp, #892	; 0x37c
    9f30:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9f34:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    9f38:	e89e0003 	ldm	lr, {r0, r1}
    9f3c:	e88c0003 	stm	ip, {r0, r1}
				l_rtRollPitchYawSigPayload_st.angleFromGyroStepCalculation_st	= l_GyroPerStepAngles_st;
    9f40:	e24bcfcd 	sub	ip, fp, #820	; 0x334
    9f44:	e24bef8f 	sub	lr, fp, #572	; 0x23c
    9f48:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9f4c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    9f50:	e89e0003 	ldm	lr, {r0, r1}
    9f54:	e88c0003 	stm	ip, {r0, r1}
				l_rtRollPitchYawSigPayload_st.angleFromAccMagCalculation_st 		= l_AccMagAngles_st;
    9f58:	e24bcfc7 	sub	ip, fp, #796	; 0x31c
    9f5c:	e24bef95 	sub	lr, fp, #596	; 0x254
    9f60:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9f64:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    9f68:	e89e0003 	ldm	lr, {r0, r1}
    9f6c:	e88c0003 	stm	ip, {r0, r1}
				l_rtRollPitchYawSigPayload_st.angleFromkalmanSigState_st 		= l_kalmanAngles_st;
    9f70:	e24bcfbb 	sub	ip, fp, #748	; 0x2ec
    9f74:	e24bef9b 	sub	lr, fp, #620	; 0x26c
    9f78:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9f7c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    9f80:	e89e0003 	ldm	lr, {r0, r1}
    9f84:	e88c0003 	stm	ip, {r0, r1}
				l_rtRollPitchYawSigPayload_st.angleFromcomplementarySigState_st	= l_compAngles_st;
    9f88:	e24bcfc1 	sub	ip, fp, #772	; 0x304
    9f8c:	e24befa1 	sub	lr, fp, #644	; 0x284
    9f90:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9f94:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    9f98:	e89e0003 	ldm	lr, {r0, r1}
    9f9c:	e88c0003 	stm	ip, {r0, r1}


				printf("START MEASUREMENT\n");
    9fa0:	e51f043c 	ldr	r0, [pc, #-1084]	; 9b6c <main+0xecc>
    9fa4:	ebfffadb 	bl	8b18 <_init+0x1a0>
				sprintf(str, "sec =  %d, nano = %d",
    9fa8:	e51b2354 	ldr	r2, [fp, #-852]	; 0x354
    9fac:	e51b3350 	ldr	r3, [fp, #-848]	; 0x350
    9fb0:	e51f0430 	ldr	r0, [pc, #-1072]	; 9b88 <main+0xee8>
    9fb4:	e51f144c 	ldr	r1, [pc, #-1100]	; 9b70 <main+0xed0>
    9fb8:	ebfffaeb 	bl	8b6c <_init+0x1f4>
						l_rtRollPitchYawSigPayload_st.timestamp_st.tv_sec, l_rtRollPitchYawSigPayload_st.timestamp_st.tv_nsec);
				puts(str);
    9fbc:	e51f043c 	ldr	r0, [pc, #-1084]	; 9b88 <main+0xee8>
    9fc0:	ebfffad4 	bl	8b18 <_init+0x1a0>
				sprintf(str, "Raw GYro Angular velocity roll %f, pitch %f yaw  %f",
    9fc4:	e24b3fd3 	sub	r3, fp, #844	; 0x34c
    9fc8:	e1c320d0 	ldrd	r2, [r3]
    9fcc:	e24b5fd1 	sub	r5, fp, #836	; 0x344
    9fd0:	e1c540d0 	ldrd	r4, [r5]
    9fd4:	e24b1fcf 	sub	r1, fp, #828	; 0x33c
    9fd8:	e1c100d0 	ldrd	r0, [r1]
    9fdc:	e1cd40f0 	strd	r4, [sp]
    9fe0:	e1cd00f8 	strd	r0, [sp, #8]
    9fe4:	e51f0464 	ldr	r0, [pc, #-1124]	; 9b88 <main+0xee8>
    9fe8:	e51f147c 	ldr	r1, [pc, #-1148]	; 9b74 <main+0xed4>
    9fec:	ebfffade 	bl	8b6c <_init+0x1f4>
						l_rtRollPitchYawSigPayload_st.angularVelocityGyroFromImu_st.roll_f64, l_rtRollPitchYawSigPayload_st.angularVelocityGyroFromImu_st.pitch_f64, l_rtRollPitchYawSigPayload_st.angularVelocityGyroFromImu_st.yaw_f64 );
				puts(str);
    9ff0:	e51f0470 	ldr	r0, [pc, #-1136]	; 9b88 <main+0xee8>
    9ff4:	ebfffac7 	bl	8b18 <_init+0x1a0>
				sprintf(str, "Gyro Angles roll %f, pitch %f yaw  %f",
    9ff8:	e24b3fcd 	sub	r3, fp, #820	; 0x334
    9ffc:	e1c320d0 	ldrd	r2, [r3]
    a000:	e24b5fcb 	sub	r5, fp, #812	; 0x32c
    a004:	e1c540d0 	ldrd	r4, [r5]
    a008:	e24b1fc9 	sub	r1, fp, #804	; 0x324
    a00c:	e1c100d0 	ldrd	r0, [r1]
    a010:	e1cd40f0 	strd	r4, [sp]
    a014:	e1cd00f8 	strd	r0, [sp, #8]
    a018:	e51f0498 	ldr	r0, [pc, #-1176]	; 9b88 <main+0xee8>
    a01c:	e51f14ac 	ldr	r1, [pc, #-1196]	; 9b78 <main+0xed8>
    a020:	ebfffad1 	bl	8b6c <_init+0x1f4>
						l_rtRollPitchYawSigPayload_st.angleFromGyroStepCalculation_st.roll_f64, l_rtRollPitchYawSigPayload_st.angleFromGyroStepCalculation_st.pitch_f64, l_rtRollPitchYawSigPayload_st.angleFromGyroStepCalculation_st.yaw_f64 );
				puts(str);
    a024:	e51f04a4 	ldr	r0, [pc, #-1188]	; 9b88 <main+0xee8>
    a028:	ebfffaba 	bl	8b18 <_init+0x1a0>
				sprintf(str, "ACC MAG CALC Angles roll %f, pitch %f yaw  %f",
    a02c:	e24b3fc7 	sub	r3, fp, #796	; 0x31c
    a030:	e1c320d0 	ldrd	r2, [r3]
    a034:	e24b5fc5 	sub	r5, fp, #788	; 0x314
    a038:	e1c540d0 	ldrd	r4, [r5]
    a03c:	e24b1fc3 	sub	r1, fp, #780	; 0x30c
    a040:	e1c100d0 	ldrd	r0, [r1]
    a044:	e1cd40f0 	strd	r4, [sp]
    a048:	e1cd00f8 	strd	r0, [sp, #8]
    a04c:	e51f04cc 	ldr	r0, [pc, #-1228]	; 9b88 <main+0xee8>
    a050:	e51f14dc 	ldr	r1, [pc, #-1244]	; 9b7c <main+0xedc>
    a054:	ebfffac4 	bl	8b6c <_init+0x1f4>
						l_rtRollPitchYawSigPayload_st.angleFromAccMagCalculation_st.roll_f64, l_rtRollPitchYawSigPayload_st.angleFromAccMagCalculation_st.pitch_f64, l_rtRollPitchYawSigPayload_st.angleFromAccMagCalculation_st.yaw_f64 );
				puts(str);
    a058:	e51f04d8 	ldr	r0, [pc, #-1240]	; 9b88 <main+0xee8>
    a05c:	ebfffaad 	bl	8b18 <_init+0x1a0>
				sprintf(str, "COMPLEMENTARY Angles roll %f, pitch %f yaw %f",
    a060:	e24b3fc1 	sub	r3, fp, #772	; 0x304
    a064:	e1c320d0 	ldrd	r2, [r3]
    a068:	e24b5fbf 	sub	r5, fp, #764	; 0x2fc
    a06c:	e1c540d0 	ldrd	r4, [r5]
    a070:	e24b1fbd 	sub	r1, fp, #756	; 0x2f4
    a074:	e1c100d0 	ldrd	r0, [r1]
    a078:	e1cd40f0 	strd	r4, [sp]
    a07c:	e1cd00f8 	strd	r0, [sp, #8]
    a080:	e51f0500 	ldr	r0, [pc, #-1280]	; 9b88 <main+0xee8>
    a084:	e51f150c 	ldr	r1, [pc, #-1292]	; 9b80 <main+0xee0>
    a088:	ebfffab7 	bl	8b6c <_init+0x1f4>
						l_rtRollPitchYawSigPayload_st.angleFromcomplementarySigState_st.roll_f64, l_rtRollPitchYawSigPayload_st.angleFromcomplementarySigState_st.pitch_f64, l_rtRollPitchYawSigPayload_st.angleFromcomplementarySigState_st.yaw_f64);
				puts(str);
    a08c:	e51f050c 	ldr	r0, [pc, #-1292]	; 9b88 <main+0xee8>
    a090:	ebfffaa0 	bl	8b18 <_init+0x1a0>
				sprintf(str, "KALMAN Angles roll %f, pitch %f yaw %f",
    a094:	e24b3fbb 	sub	r3, fp, #748	; 0x2ec
    a098:	e1c320d0 	ldrd	r2, [r3]
    a09c:	e24b5fb9 	sub	r5, fp, #740	; 0x2e4
    a0a0:	e1c540d0 	ldrd	r4, [r5]
    a0a4:	e24b1fb7 	sub	r1, fp, #732	; 0x2dc
    a0a8:	e1c100d0 	ldrd	r0, [r1]
    a0ac:	e1cd40f0 	strd	r4, [sp]
    a0b0:	e1cd00f8 	strd	r0, [sp, #8]
    a0b4:	e51f0534 	ldr	r0, [pc, #-1332]	; 9b88 <main+0xee8>
    a0b8:	e51f153c 	ldr	r1, [pc, #-1340]	; 9b84 <main+0xee4>
    a0bc:	ebfffaaa 	bl	8b6c <_init+0x1f4>
						l_rtRollPitchYawSigPayload_st.angleFromkalmanSigState_st.roll_f64, l_rtRollPitchYawSigPayload_st.angleFromkalmanSigState_st.pitch_f64, l_rtRollPitchYawSigPayload_st.angleFromkalmanSigState_st.yaw_f64);
				puts(str);
    a0c0:	e51f0540 	ldr	r0, [pc, #-1344]	; 9b88 <main+0xee8>
    a0c4:	ebfffa93 	bl	8b18 <_init+0x1a0>

				sendto(socketclient, (unsigned char *)&l_rtRollPitchYawSigPayload_st , (size_t)sizeof( l_rtRollPitchYawSigPayload_st ),  0, (struct sockaddr *)&remoteaddress, sizeof(remoteaddress));
    a0c8:	e24b3fd5 	sub	r3, fp, #852	; 0x354
    a0cc:	e24b2fa7 	sub	r2, fp, #668	; 0x29c
    a0d0:	e58d2000 	str	r2, [sp]
    a0d4:	e3a02010 	mov	r2, #16
    a0d8:	e58d2004 	str	r2, [sp, #4]
    a0dc:	e51b00dc 	ldr	r0, [fp, #-220]	; 0xdc
    a0e0:	e1a01003 	mov	r1, r3
    a0e4:	e3a02080 	mov	r2, #128	; 0x80
    a0e8:	e3a03000 	mov	r3, #0
    a0ec:	ebfffa41 	bl	89f8 <_init+0x80>

				usleep( 50000 ); //20ms = 50Hz
    a0f0:	e51f056c 	ldr	r0, [pc, #-1388]	; 9b8c <main+0xeec>
    a0f4:	ebfffa4b 	bl	8a28 <_init+0xb0>
			}
    a0f8:	eaffff58 	b	9e60 <main+0x11c0>
			close(socketclient);
			break;
		}
		case TESTALLSENSORDATA:
		{
			printf("Starting IMU send all Sensor Values\n");
    a0fc:	e51f0574 	ldr	r0, [pc, #-1396]	; 9b90 <main+0xef0>
    a100:	ebfffa84 	bl	8b18 <_init+0x1a0>
			unsigned char	l_remoteHostAddr_rg4ui8[4] 	= {192,168,22,160};
    a104:	e51f2578 	ldr	r2, [pc, #-1400]	; 9b94 <main+0xef4>
    a108:	e24b3e2a 	sub	r3, fp, #672	; 0x2a0
    a10c:	e5920000 	ldr	r0, [r2]
    a110:	e5830000 	str	r0, [r3]
			unsigned short	l_remoteHostPort_ui16		= 5000;
    a114:	e51f3584 	ldr	r3, [pc, #-1412]	; 9b98 <main+0xef8>
    a118:	e14b3dbe 	strh	r3, [fp, #-222]	; 0xffffff22
			int				l_udpSocket_i32;
			unsigned int	l_sendState_bl;

			// open udp connection
			l_udpSocket_i32 = g_halMatlab_initConnection_i32( l_remoteHostAddr_rg4ui8, l_remoteHostPort_ui16 );
    a11c:	e24b2e2a 	sub	r2, fp, #672	; 0x2a0
    a120:	e15b3dbe 	ldrh	r3, [fp, #-222]	; 0xffffff22
    a124:	e1a00002 	mov	r0, r2
    a128:	e1a01003 	mov	r1, r3
    a12c:	eb000f8f 	bl	df70 <g_halMatlab_initConnection_i32>
    a130:	e50b00e4 	str	r0, [fp, #-228]	; 0xe4

			halImu_orientationValues l_imuMeasurements_st;
			g_halImu_initImuSensors_bl();
    a134:	eb000b11 	bl	cd80 <g_halImu_initImuSensors_bl>

			while(1)
			{
				g_halImu_triggerImuReading_bl();
    a138:	eb000b7d 	bl	cf34 <g_halImu_triggerImuReading_bl>
				g_halImu_triggerBaroReading_bl();
    a13c:	eb000b26 	bl	cddc <g_halImu_triggerBaroReading_bl>
				g_halImu_triggerGyroReading_bl();
    a140:	eb000b3f 	bl	ce44 <g_halImu_triggerGyroReading_bl>
				g_halImu_triggerAccReading_bl();
    a144:	eb000b52 	bl	ce94 <g_halImu_triggerAccReading_bl>

				l_imuMeasurements_st=g_halImu_getImuValues_str();
    a148:	e24b3fd5 	sub	r3, fp, #852	; 0x354
    a14c:	e1a00003 	mov	r0, r3
    a150:	eb000af9 	bl	cd3c <g_halImu_getImuValues_str>

				l_sendState_bl = g_halMatlab_sendImuState_bl(l_udpSocket_i32, l_imuMeasurements_st);
    a154:	e1a0100d 	mov	r1, sp
    a158:	e24b2fd3 	sub	r2, fp, #844	; 0x34c
    a15c:	e3a03058 	mov	r3, #88	; 0x58
    a160:	e1a00001 	mov	r0, r1
    a164:	e1a01002 	mov	r1, r2
    a168:	e1a02003 	mov	r2, r3
    a16c:	ebfffa51 	bl	8ab8 <_init+0x140>
    a170:	e24b3fd5 	sub	r3, fp, #852	; 0x354
    a174:	e893000c 	ldm	r3, {r2, r3}
    a178:	e51b00e4 	ldr	r0, [fp, #-228]	; 0xe4
    a17c:	eb000e2d 	bl	da38 <g_halMatlab_sendImuState_bl>
    a180:	e1a03000 	mov	r3, r0
    a184:	e50b30e8 	str	r3, [fp, #-232]	; 0xe8

				printf("Acc X %f \n", l_imuMeasurements_st.acc.x_f64);
    a188:	e24b3fd3 	sub	r3, fp, #844	; 0x34c
    a18c:	e1c320d0 	ldrd	r2, [r3]
    a190:	e51f05fc 	ldr	r0, [pc, #-1532]	; 9b9c <main+0xefc>
    a194:	ebfffa4a 	bl	8ac4 <_init+0x14c>
				printf("Acc Y %f \n", l_imuMeasurements_st.acc.y_f64);
    a198:	e24b3fd1 	sub	r3, fp, #836	; 0x344
    a19c:	e1c320d0 	ldrd	r2, [r3]
    a1a0:	e51f0608 	ldr	r0, [pc, #-1544]	; 9ba0 <main+0xf00>
    a1a4:	ebfffa46 	bl	8ac4 <_init+0x14c>
				printf("Acc Z %f \n", l_imuMeasurements_st.acc.z_f64);
    a1a8:	e24b3fcf 	sub	r3, fp, #828	; 0x33c
    a1ac:	e1c320d0 	ldrd	r2, [r3]
    a1b0:	e51f0614 	ldr	r0, [pc, #-1556]	; 9ba4 <main+0xf04>
    a1b4:	ebfffa42 	bl	8ac4 <_init+0x14c>
				printf("Mag X %f \n", l_imuMeasurements_st.mag.x_f64);
    a1b8:	e24b3fcd 	sub	r3, fp, #820	; 0x334
    a1bc:	e1c320d0 	ldrd	r2, [r3]
    a1c0:	e51f0620 	ldr	r0, [pc, #-1568]	; 9ba8 <main+0xf08>
    a1c4:	ebfffa3e 	bl	8ac4 <_init+0x14c>
				printf("Mag Y %f \n", l_imuMeasurements_st.mag.y_f64);
    a1c8:	e24b3fcb 	sub	r3, fp, #812	; 0x32c
    a1cc:	e1c320d0 	ldrd	r2, [r3]
    a1d0:	e51f062c 	ldr	r0, [pc, #-1580]	; 9bac <main+0xf0c>
    a1d4:	ebfffa3a 	bl	8ac4 <_init+0x14c>
				printf("Mag Z %f \n", l_imuMeasurements_st.mag.z_f64);
    a1d8:	e24b3fc9 	sub	r3, fp, #804	; 0x324
    a1dc:	e1c320d0 	ldrd	r2, [r3]
    a1e0:	e51f0638 	ldr	r0, [pc, #-1592]	; 9bb0 <main+0xf10>
    a1e4:	ebfffa36 	bl	8ac4 <_init+0x14c>
				printf("Gyro yaw %f \n", l_imuMeasurements_st.gyro.yaw_f64);
    a1e8:	e24b3fc3 	sub	r3, fp, #780	; 0x30c
    a1ec:	e1c320d0 	ldrd	r2, [r3]
    a1f0:	e51f0644 	ldr	r0, [pc, #-1604]	; 9bb4 <main+0xf14>
    a1f4:	ebfffa32 	bl	8ac4 <_init+0x14c>
				printf("Gyro pitch %f \n", l_imuMeasurements_st.gyro.pitch_f64);
    a1f8:	e24b3fc5 	sub	r3, fp, #788	; 0x314
    a1fc:	e1c320d0 	ldrd	r2, [r3]
    a200:	e51f0650 	ldr	r0, [pc, #-1616]	; 9bb8 <main+0xf18>
    a204:	ebfffa2e 	bl	8ac4 <_init+0x14c>
				printf("Gyro roll %f \n", l_imuMeasurements_st.gyro.roll_f64);
    a208:	e24b3fc7 	sub	r3, fp, #796	; 0x31c
    a20c:	e1c320d0 	ldrd	r2, [r3]
    a210:	e51f065c 	ldr	r0, [pc, #-1628]	; 9bbc <main+0xf1c>
    a214:	ebfffa2a 	bl	8ac4 <_init+0x14c>
				printf("Temp %f \n", l_imuMeasurements_st.temperature_f64);
    a218:	e24b3fc1 	sub	r3, fp, #772	; 0x304
    a21c:	e1c320d0 	ldrd	r2, [r3]
    a220:	e51f0668 	ldr	r0, [pc, #-1640]	; 9bc0 <main+0xf20>
    a224:	ebfffa26 	bl	8ac4 <_init+0x14c>
				printf("Press %f \n", l_imuMeasurements_st.pressure_f64);
    a228:	e24b3fbf 	sub	r3, fp, #764	; 0x2fc
    a22c:	e1c320d0 	ldrd	r2, [r3]
    a230:	e51f0674 	ldr	r0, [pc, #-1652]	; 9bc4 <main+0xf24>
    a234:	ebfffa22 	bl	8ac4 <_init+0x14c>
				printf("##########################################\n");
    a238:	e51f0678 	ldr	r0, [pc, #-1656]	; 9bc8 <main+0xf28>
    a23c:	ebfffa35 	bl	8b18 <_init+0x1a0>

				if ( l_sendState_bl != M_HAL_MATLAB_SUCCESS_UI8 )
    a240:	e51b30e8 	ldr	r3, [fp, #-232]	; 0xe8
    a244:	e3530000 	cmp	r3, #0
    a248:	0a000001 	beq	a254 <main+0x15b4>
				{
					printf("UDP-Packet error\n");
    a24c:	e51f0688 	ldr	r0, [pc, #-1672]	; 9bcc <main+0xf2c>
    a250:	ebfffa30 	bl	8b18 <_init+0x1a0>
				}
				usleep( 20000 ); //20ms = 50Hz
    a254:	e51f068c 	ldr	r0, [pc, #-1676]	; 9bd0 <main+0xf30>
    a258:	ebfff9f2 	bl	8a28 <_init+0xb0>
			}
    a25c:	eaffffb5 	b	a138 <main+0x1498>

		case TESTMOTORPWM:
		{
			char BLCtrlADRExecuteOrder[DEFMotorsCount];
			char sendBuffer[1];
			int i = 0;
    a260:	e3a03000 	mov	r3, #0
    a264:	e50b3054 	str	r3, [fp, #-84]	; 0x54
			const int STEPSIZE = 10;
    a268:	e3a0300a 	mov	r3, #10
    a26c:	e50b30ec 	str	r3, [fp, #-236]	; 0xec
			unsigned int pwmValue;

			GetBLCtrlADRExecuteOrder(&BLCtrlADRExecuteOrder[0]);
    a270:	e24b3fa9 	sub	r3, fp, #676	; 0x2a4
    a274:	e1a00003 	mov	r0, r3
    a278:	eb000dc5 	bl	d994 <GetBLCtrlADRExecuteOrder>

			printf("Start Testing Motors with PWM");
    a27c:	e51f06b0 	ldr	r0, [pc, #-1712]	; 9bd4 <main+0xf34>
    a280:	ebfffa0f 	bl	8ac4 <_init+0x14c>

			while(1)
			{
				sendBuffer[0]=pwmValue;
    a284:	e51b3058 	ldr	r3, [fp, #-88]	; 0x58
    a288:	e6ef3073 	uxtb	r3, r3
    a28c:	e54b32a8 	strb	r3, [fp, #-680]	; 0x2a8
				for(i = 0; i < DEFMotorsCount ;i++)
    a290:	e3a03000 	mov	r3, #0
    a294:	e50b3054 	str	r3, [fp, #-84]	; 0x54
    a298:	ea000010 	b	a2e0 <main+0x1640>
				{
					g_lldI2c_WriteI2c_bl(BLCtrlADRExecuteOrder[i],&sendBuffer[0],1);
    a29c:	e51f36cc 	ldr	r3, [pc, #-1740]	; 9bd8 <main+0xf38>
    a2a0:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    a2a4:	e24b104c 	sub	r1, fp, #76	; 0x4c
    a2a8:	e0812002 	add	r2, r1, r2
    a2ac:	e0823003 	add	r3, r2, r3
    a2b0:	e5d33000 	ldrb	r3, [r3]
    a2b4:	e1a02003 	mov	r2, r3
    a2b8:	e24b3faa 	sub	r3, fp, #680	; 0x2a8
    a2bc:	e1a00002 	mov	r0, r2
    a2c0:	e1a01003 	mov	r1, r3
    a2c4:	e3a02001 	mov	r2, #1
    a2c8:	eb000bc4 	bl	d1e0 <g_lldI2c_WriteI2c_bl>
					usleep(10);//10us delay for HW Driver
    a2cc:	e3a0000a 	mov	r0, #10
    a2d0:	ebfff9d4 	bl	8a28 <_init+0xb0>
			printf("Start Testing Motors with PWM");

			while(1)
			{
				sendBuffer[0]=pwmValue;
				for(i = 0; i < DEFMotorsCount ;i++)
    a2d4:	e51b3054 	ldr	r3, [fp, #-84]	; 0x54
    a2d8:	e2833001 	add	r3, r3, #1
    a2dc:	e50b3054 	str	r3, [fp, #-84]	; 0x54
    a2e0:	e51b3054 	ldr	r3, [fp, #-84]	; 0x54
    a2e4:	e3530003 	cmp	r3, #3
    a2e8:	daffffeb 	ble	a29c <main+0x15fc>
				{
					g_lldI2c_WriteI2c_bl(BLCtrlADRExecuteOrder[i],&sendBuffer[0],1);
					usleep(10);//10us delay for HW Driver
				}

				usleep(10000);//10ms
    a2ec:	e51f0718 	ldr	r0, [pc, #-1816]	; 9bdc <main+0xf3c>
    a2f0:	ebfff9cc 	bl	8a28 <_init+0xb0>

				pwmValue = pwmValue + STEPSIZE;
    a2f4:	e51b30ec 	ldr	r3, [fp, #-236]	; 0xec
    a2f8:	e51b2058 	ldr	r2, [fp, #-88]	; 0x58
    a2fc:	e0823003 	add	r3, r2, r3
    a300:	e50b3058 	str	r3, [fp, #-88]	; 0x58
				if(pwmValue > 0x50 )
    a304:	e51b3058 	ldr	r3, [fp, #-88]	; 0x58
    a308:	e3530050 	cmp	r3, #80	; 0x50
    a30c:	9a000002 	bls	a31c <main+0x167c>
				{
					pwmValue= DEFMotorSetpointMIN;
    a310:	e3a0300a 	mov	r3, #10
    a314:	e50b3058 	str	r3, [fp, #-88]	; 0x58
				}

			}
    a318:	eaffffd9 	b	a284 <main+0x15e4>
    a31c:	eaffffd8 	b	a284 <main+0x15e4>

		break;
		}
		case TESTMOTORISR:
				{	//starts withh first press of + or - than enter
					printf("Start Testing Motors with ISR");
    a320:	e51f0748 	ldr	r0, [pc, #-1864]	; 9be0 <main+0xf40>
    a324:	ebfff9e6 	bl	8ac4 <_init+0x14c>
					InitMotor();
    a328:	eb000cef 	bl	d6ec <InitMotor>

					int sendValue=DEFMotorSetpointMIN;
    a32c:	e3a0300a 	mov	r3, #10
    a330:	e50b30f0 	str	r3, [fp, #-240]	; 0xf0
					while(1){
						if(GetFlagRunSendPwmToMotor() == 1){
    a334:	eb000d71 	bl	d900 <GetFlagRunSendPwmToMotor>
    a338:	e1a03000 	mov	r3, r0
    a33c:	e3530001 	cmp	r3, #1
    a340:	1a000000 	bne	a348 <main+0x16a8>
							sendPwmToMotor();
    a344:	eb000d76 	bl	d924 <sendPwmToMotor>
						}

						int i = kbhit();
    a348:	eb00002d 	bl	a404 <kbhit>
    a34c:	e50b00f4 	str	r0, [fp, #-244]	; 0xf4

						if(i == 'c'){
    a350:	e51b30f4 	ldr	r3, [fp, #-244]	; 0xf4
    a354:	e3530063 	cmp	r3, #99	; 0x63
    a358:	1a000010 	bne	a3a0 <main+0x1700>
							int k = kbhit();
    a35c:	eb000028 	bl	a404 <kbhit>
    a360:	e50b00f8 	str	r0, [fp, #-248]	; 0xf8

							switch (k){
    a364:	e51b30f8 	ldr	r3, [fp, #-248]	; 0xf8
    a368:	e2433030 	sub	r3, r3, #48	; 0x30
    a36c:	e3530007 	cmp	r3, #7
    a370:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    a374:	ea000007 	b	a398 <main+0x16f8>
    a378:	0000a398 	.word	0x0000a398
    a37c:	0000a398 	.word	0x0000a398
    a380:	0000a398 	.word	0x0000a398
    a384:	0000a398 	.word	0x0000a398
    a388:	0000a398 	.word	0x0000a398
    a38c:	0000a398 	.word	0x0000a398
    a390:	0000a398 	.word	0x0000a398
    a394:	0000a398 	.word	0x0000a398
							case 54:
								break;
							case 55:
								break;
							default:
								break;
    a398:	e1a00000 	nop			; (mov r0, r0)
    a39c:	eaffffe4 	b	a334 <main+0x1694>
							}
//							(sendValue+1)>100? sendValue=100 :  sendValue++;
//							SetPwmMotor(DEFMotorALL_PWM,sendValue,1);
						}else if(i == 45){
    a3a0:	e51b30f4 	ldr	r3, [fp, #-244]	; 0xf4
    a3a4:	e353002d 	cmp	r3, #45	; 0x2d
    a3a8:	1a000002 	bne	a3b8 <main+0x1718>
							int k = kbhit();
    a3ac:	eb000014 	bl	a404 <kbhit>
    a3b0:	e50b00fc 	str	r0, [fp, #-252]	; 0xfc
//							SetPwmMotor(DEFMotorALL_PWM,sendValue,1);
						}


						/* Do Other Things*/
					}
    a3b4:	eaffffde 	b	a334 <main+0x1694>
    a3b8:	eaffffdd 	b	a334 <main+0x1694>


		case TESTMOTORUPDOWN:
				{
					maneuver testManeuver;
					testManeuver.heightCM = 10;
    a3bc:	e3a02000 	mov	r2, #0
    a3c0:	e51f37e4 	ldr	r3, [pc, #-2020]	; 9be4 <main+0xf44>
    a3c4:	e50b22bc 	str	r2, [fp, #-700]	; 0x2bc
    a3c8:	e50b32b8 	str	r3, [fp, #-696]	; 0x2b8

					while(1)
					{
							SendManeuver(testManeuver);
    a3cc:	ed1b6baf 	vldr	d6, [fp, #-700]	; 0xfffffd44
    a3d0:	ed1b7bad 	vldr	d7, [fp, #-692]	; 0xfffffd4c
    a3d4:	eeb00b46 	vmov.f64	d0, d6
    a3d8:	eeb01b47 	vmov.f64	d1, d7
    a3dc:	eb000d8b 	bl	da10 <SendManeuver>
					}
    a3e0:	eafffff9 	b	a3cc <main+0x172c>
				}

		default:
		case TESTEND:
		{
			printf("Nothing found");
    a3e4:	e51f0804 	ldr	r0, [pc, #-2052]	; 9be8 <main+0xf48>
    a3e8:	ebfff9b5 	bl	8ac4 <_init+0x14c>
			break;
    a3ec:	e1a00000 	nop			; (mov r0, r0)
		}
	}
	return 0;
    a3f0:	e3a03000 	mov	r3, #0
}
    a3f4:	e1a00003 	mov	r0, r3
    a3f8:	e24bd04c 	sub	sp, fp, #76	; 0x4c
    a3fc:	ecbd8b0c 	vpop	{d8-d13}
    a400:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000a404 <kbhit>:


#include <termios.h>

int kbhit(void)
{
    a404:	e92d4800 	push	{fp, lr}
    a408:	e28db004 	add	fp, sp, #4
    a40c:	e24dd080 	sub	sp, sp, #128	; 0x80
	struct termios term, oterm;
	  int fd = 0;
    a410:	e3a03000 	mov	r3, #0
    a414:	e50b3008 	str	r3, [fp, #-8]
	  int c = 0;
    a418:	e3a03000 	mov	r3, #0
    a41c:	e50b300c 	str	r3, [fp, #-12]
	  tcgetattr(fd, &oterm);
    a420:	e24b3084 	sub	r3, fp, #132	; 0x84
    a424:	e51b0008 	ldr	r0, [fp, #-8]
    a428:	e1a01003 	mov	r1, r3
    a42c:	ebfff98f 	bl	8a70 <_init+0xf8>
	  memcpy(&term, &oterm, sizeof(term));
    a430:	e24bc048 	sub	ip, fp, #72	; 0x48
    a434:	e24be084 	sub	lr, fp, #132	; 0x84
    a438:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    a43c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    a440:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    a444:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    a448:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    a44c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    a450:	e89e0007 	ldm	lr, {r0, r1, r2}
    a454:	e88c0007 	stm	ip, {r0, r1, r2}
	  term.c_lflag = term.c_lflag & (!ICANON);
    a458:	e3a03000 	mov	r3, #0
    a45c:	e50b303c 	str	r3, [fp, #-60]	; 0x3c
	  term.c_cc[VMIN] = 0;
    a460:	e3a03000 	mov	r3, #0
    a464:	e54b3031 	strb	r3, [fp, #-49]	; 0x31
	  term.c_cc[VTIME] = 1;
    a468:	e3a03001 	mov	r3, #1
    a46c:	e54b3032 	strb	r3, [fp, #-50]	; 0x32
	  tcsetattr(fd, TCSANOW, &term);
    a470:	e24b3048 	sub	r3, fp, #72	; 0x48
    a474:	e51b0008 	ldr	r0, [fp, #-8]
    a478:	e3a01000 	mov	r1, #0
    a47c:	e1a02003 	mov	r2, r3
    a480:	ebfff9aa 	bl	8b30 <_init+0x1b8>
	  c = getchar();
    a484:	ebfff949 	bl	89b0 <_init+0x38>
    a488:	e50b000c 	str	r0, [fp, #-12]
	  tcsetattr(fd, TCSANOW, &oterm);
    a48c:	e24b3084 	sub	r3, fp, #132	; 0x84
    a490:	e51b0008 	ldr	r0, [fp, #-8]
    a494:	e3a01000 	mov	r1, #0
    a498:	e1a02003 	mov	r2, r3
    a49c:	ebfff9a3 	bl	8b30 <_init+0x1b8>
	  return c; // gibt -1 zurück, wenn kein Zeichen gelesen wurde
    a4a0:	e51b300c 	ldr	r3, [fp, #-12]
}
    a4a4:	e1a00003 	mov	r0, r3
    a4a8:	e24bd004 	sub	sp, fp, #4
    a4ac:	e8bd8800 	pop	{fp, pc}

0000a4b0 <g_halADC_get_ui16>:
 * 2015/05/08 mabrgs00:
 *  Error handling from I2C included
 *
 * \endinternal
 ***********************************************************************/
float g_halADC_get_ui16(unsigned char l_input_ui8){
    a4b0:	e92d4800 	push	{fp, lr}
    a4b4:	e28db004 	add	fp, sp, #4
    a4b8:	e24dd018 	sub	sp, sp, #24
    a4bc:	e1a03000 	mov	r3, r0
    a4c0:	e54b3015 	strb	r3, [fp, #-21]

  unsigned char l_address_ui8 = 0x49;		// Address of our device on the I2C bus
    a4c4:	e3a03049 	mov	r3, #73	; 0x49
    a4c8:	e54b3006 	strb	r3, [fp, #-6]
  unsigned char l_mux_ui8;			// Config value depening on input
  unsigned short l_val_ui16;			// (Converted) result of ADC
  unsigned char l_checkerror_bl;			// Variable to store return value

  // Setting Config according to select Input
  switch(l_input_ui8){			   	// Standard: 1100 0011  (Bit 15-8) Input A0
    a4cc:	e55b3015 	ldrb	r3, [fp, #-21]
    a4d0:	e2433001 	sub	r3, r3, #1
    a4d4:	e3530003 	cmp	r3, #3
    a4d8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    a4dc:	ea00000f 	b	a520 <g_halADC_get_ui16+0x70>
    a4e0:	0000a4f0 	.word	0x0000a4f0
    a4e4:	0000a4fc 	.word	0x0000a4fc
    a4e8:	0000a508 	.word	0x0000a508
    a4ec:	0000a514 	.word	0x0000a514
	case 1: l_mux_ui8 = 0xC2; break;	// Input: A0	
    a4f0:	e3e0303d 	mvn	r3, #61	; 0x3d
    a4f4:	e54b3005 	strb	r3, [fp, #-5]
    a4f8:	ea00000a 	b	a528 <g_halADC_get_ui16+0x78>
	case 2: l_mux_ui8 = 0xD2; break;	
    a4fc:	e3e0302d 	mvn	r3, #45	; 0x2d
    a500:	e54b3005 	strb	r3, [fp, #-5]
    a504:	ea000007 	b	a528 <g_halADC_get_ui16+0x78>
	case 3: l_mux_ui8 = 0xE2; break;	
    a508:	e3e0301d 	mvn	r3, #29
    a50c:	e54b3005 	strb	r3, [fp, #-5]
    a510:	ea000004 	b	a528 <g_halADC_get_ui16+0x78>
	case 4: l_mux_ui8 = 0xF2; break;	// Input: A3
    a514:	e3e0300d 	mvn	r3, #13
    a518:	e54b3005 	strb	r3, [fp, #-5]
    a51c:	ea000001 	b	a528 <g_halADC_get_ui16+0x78>
	default: l_mux_ui8 = 0xC2; 			
    a520:	e3e0303d 	mvn	r3, #61	; 0x3d
    a524:	e54b3005 	strb	r3, [fp, #-5]
  // First Hex depends on Starting Conversion + the Input, which Pin to read A0-3
  // Second Value is PGA (001)=+-4,099V and continuous Mode (0)


  // These three bytes are written to the ADS1015 to set the config register and start the conversion 
  l_writeBuf_rg24[0] = 1;		// This sets the pointer register to write two bytes to the config register
    a528:	e3a03001 	mov	r3, #1
    a52c:	e54b3010 	strb	r3, [fp, #-16]
  l_writeBuf_rg24[1] = l_mux_ui8;   	// This sets the 8 MSBs of the config register (bits 15-8) to 11000011
    a530:	e55b3005 	ldrb	r3, [fp, #-5]
    a534:	e54b300f 	strb	r3, [fp, #-15]
  l_writeBuf_rg24[2] = 0x23;  		// This sets the 8 LSBs of the config register (bits  7-0) to 00100011   
    a538:	e3a03023 	mov	r3, #35	; 0x23
    a53c:	e54b300e 	strb	r3, [fp, #-14]
  // First Hex is sample Rate. (001) sets to 250SPS + Comp Mode (0)
  // Second Hex is Comp. config. (0011) disable the comparator


  // Initialize the buffer used to read data from the ADS1015 to 0
  l_readBuf_rg16[0]= 0;		
    a540:	e3a03000 	mov	r3, #0
    a544:	e54b3014 	strb	r3, [fp, #-20]
  l_readBuf_rg16[1]= 0;
    a548:	e3a03000 	mov	r3, #0
    a54c:	e54b3013 	strb	r3, [fp, #-19]
  
  // Write l_writeBuf_rg24 to the ADS1015, the 3 specifies the number of bytes we are writing,
  // this begins a continuous conversion
  l_checkerror_bl = g_lldI2c_WriteI2c_bl(l_address_ui8,l_writeBuf_rg24,3);
    a550:	e55b2006 	ldrb	r2, [fp, #-6]
    a554:	e24b3010 	sub	r3, fp, #16
    a558:	e1a00002 	mov	r0, r2
    a55c:	e1a01003 	mov	r1, r3
    a560:	e3a02003 	mov	r2, #3
    a564:	eb000b1d 	bl	d1e0 <g_lldI2c_WriteI2c_bl>
    a568:	e1a03000 	mov	r3, r0
    a56c:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    a570:	e55b3007 	ldrb	r3, [fp, #-7]
    a574:	e3530001 	cmp	r3, #1
    a578:	1a000001 	bne	a584 <g_halADC_get_ui16+0xd4>
	{
	return -1;
    a57c:	eddf7a43 	vldr	s15, [pc, #268]	; a690 <g_halADC_get_ui16+0x1e0>
    a580:	ea00003b 	b	a674 <g_halADC_get_ui16+0x1c4>
	}

  // Read the config register into readBuf
  l_checkerror_bl = g_lldI2c_ReadI2c_bl(l_address_ui8,l_readBuf_rg16,2);
    a584:	e55b2006 	ldrb	r2, [fp, #-6]
    a588:	e24b3014 	sub	r3, fp, #20
    a58c:	e1a00002 	mov	r0, r2
    a590:	e1a01003 	mov	r1, r3
    a594:	e3a02002 	mov	r2, #2
    a598:	eb000b4b 	bl	d2cc <g_lldI2c_ReadI2c_bl>
    a59c:	e1a03000 	mov	r3, r0
    a5a0:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    a5a4:	e55b3007 	ldrb	r3, [fp, #-7]
    a5a8:	e3530001 	cmp	r3, #1
    a5ac:	1a000001 	bne	a5b8 <g_halADC_get_ui16+0x108>
	{
	return -1;
    a5b0:	eddf7a36 	vldr	s15, [pc, #216]	; a690 <g_halADC_get_ui16+0x1e0>
    a5b4:	ea00002e 	b	a674 <g_halADC_get_ui16+0x1c4>
	}	
	
  // Set pointer register to 0 to read from the conversion register
  l_writeBuf_rg24[0] = 0;			
    a5b8:	e3a03000 	mov	r3, #0
    a5bc:	e54b3010 	strb	r3, [fp, #-16]
  l_checkerror_bl = g_lldI2c_WriteI2c_bl(l_address_ui8, l_writeBuf_rg24,1);
    a5c0:	e55b2006 	ldrb	r2, [fp, #-6]
    a5c4:	e24b3010 	sub	r3, fp, #16
    a5c8:	e1a00002 	mov	r0, r2
    a5cc:	e1a01003 	mov	r1, r3
    a5d0:	e3a02001 	mov	r2, #1
    a5d4:	eb000b01 	bl	d1e0 <g_lldI2c_WriteI2c_bl>
    a5d8:	e1a03000 	mov	r3, r0
    a5dc:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    a5e0:	e55b3007 	ldrb	r3, [fp, #-7]
    a5e4:	e3530001 	cmp	r3, #1
    a5e8:	1a000001 	bne	a5f4 <g_halADC_get_ui16+0x144>
	{
	return -1;
    a5ec:	eddf7a27 	vldr	s15, [pc, #156]	; a690 <g_halADC_get_ui16+0x1e0>
    a5f0:	ea00001f 	b	a674 <g_halADC_get_ui16+0x1c4>
	}

  // Read the contents of the conversion register into readBuf		
  l_checkerror_bl = g_lldI2c_ReadI2c_bl(l_address_ui8,l_readBuf_rg16,2);	
    a5f4:	e55b2006 	ldrb	r2, [fp, #-6]
    a5f8:	e24b3014 	sub	r3, fp, #20
    a5fc:	e1a00002 	mov	r0, r2
    a600:	e1a01003 	mov	r1, r3
    a604:	e3a02002 	mov	r2, #2
    a608:	eb000b2f 	bl	d2cc <g_lldI2c_ReadI2c_bl>
    a60c:	e1a03000 	mov	r3, r0
    a610:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    a614:	e55b3007 	ldrb	r3, [fp, #-7]
    a618:	e3530001 	cmp	r3, #1
    a61c:	1a000001 	bne	a628 <g_halADC_get_ui16+0x178>
	{
	return -1;
    a620:	eddf7a1a 	vldr	s15, [pc, #104]	; a690 <g_halADC_get_ui16+0x1e0>
    a624:	ea000012 	b	a674 <g_halADC_get_ui16+0x1c4>
	}

  // Combine the two bytes of readBuf into a single 16 bit result 
  l_val_ui16 = l_readBuf_rg16[0] << 8 | l_readBuf_rg16[1];	
    a628:	e55b3014 	ldrb	r3, [fp, #-20]
    a62c:	e1a03403 	lsl	r3, r3, #8
    a630:	e6ff2073 	uxth	r2, r3
    a634:	e55b3013 	ldrb	r3, [fp, #-19]
    a638:	e1823003 	orr	r3, r2, r3
    a63c:	e6ff3073 	uxth	r3, r3
    a640:	e14b30ba 	strh	r3, [fp, #-10]
  l_val_ui16 = l_val_ui16 >> 4; 
    a644:	e15b30ba 	ldrh	r3, [fp, #-10]
    a648:	e1a03223 	lsr	r3, r3, #4
    a64c:	e14b30ba 	strh	r3, [fp, #-10]

  return((float)l_val_ui16*4.096/2047.0);
    a650:	e15b30ba 	ldrh	r3, [fp, #-10]
    a654:	ee073a10 	vmov	s14, r3
    a658:	eef87a47 	vcvt.f32.u32	s15, s14
    a65c:	eeb76ae7 	vcvt.f64.f32	d6, s15
    a660:	ed9f7b06 	vldr	d7, [pc, #24]	; a680 <g_halADC_get_ui16+0x1d0>
    a664:	ee266b07 	vmul.f64	d6, d6, d7
    a668:	ed9f7b06 	vldr	d7, [pc, #24]	; a688 <g_halADC_get_ui16+0x1d8>
    a66c:	ee867b07 	vdiv.f64	d7, d6, d7
    a670:	eef77bc7 	vcvt.f32.f64	s15, d7

}
    a674:	eeb00a67 	vmov.f32	s0, s15
    a678:	e24bd004 	sub	sp, fp, #4
    a67c:	e8bd8800 	pop	{fp, pc}
    a680:	d2f1a9fc 	.word	0xd2f1a9fc
    a684:	4010624d 	.word	0x4010624d
    a688:	00000000 	.word	0x00000000
    a68c:	409ffc00 	.word	0x409ffc00
    a690:	bf800000 	.word	0xbf800000
    a694:	e1a00000 	nop			; (mov r0, r0)

0000a698 <g_halBatCheck_getBatteryStatus_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halBatCheck_getBatteryStatus_f64(void)
{
    a698:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a69c:	e28db000 	add	fp, sp, #0
	return m_batteryLevel_f64;
    a6a0:	e59f3014 	ldr	r3, [pc, #20]	; a6bc <g_halBatCheck_getBatteryStatus_f64+0x24>
    a6a4:	e1c320d0 	ldrd	r2, [r3]
    a6a8:	ec432b17 	vmov	d7, r2, r3
}
    a6ac:	eeb00b47 	vmov.f64	d0, d7
    a6b0:	e24bd000 	sub	sp, fp, #0
    a6b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a6b8:	e12fff1e 	bx	lr
    a6bc:	000197a8 	.word	0x000197a8

0000a6c0 <g_halBatCheck_readBatStatusFromI2C_bl>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
unsigned int  g_halBatCheck_readBatStatusFromI2C_bl(void)
{
    a6c0:	e92d4800 	push	{fp, lr}
    a6c4:	e28db004 	add	fp, sp, #4
    a6c8:	e24dd008 	sub	sp, sp, #8
	double l_batteryLevel_f64;

	l_batteryLevel_f64=g_halADC_get_ui16(M_HAL_BATCHECK_ADC_INPUT_PORT_UI8);
    a6cc:	e3a00001 	mov	r0, #1
    a6d0:	ebffff76 	bl	a4b0 <g_halADC_get_ui16>
    a6d4:	eef07a40 	vmov.f32	s15, s0
    a6d8:	eeb77ae7 	vcvt.f64.f32	d7, s15
    a6dc:	ed0b7b03 	vstr	d7, [fp, #-12]

	if(l_batteryLevel_f64<=0)
    a6e0:	ed1b7b03 	vldr	d7, [fp, #-12]
    a6e4:	eeb57bc0 	vcmpe.f64	d7, #0.0
    a6e8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    a6ec:	8a000001 	bhi	a6f8 <g_halBatCheck_readBatStatusFromI2C_bl+0x38>
	{return M_HAL_BATCHECK_FAILED_BL;}
    a6f0:	e3a03001 	mov	r3, #1
    a6f4:	ea000003 	b	a708 <g_halBatCheck_readBatStatusFromI2C_bl+0x48>

	m_batteryLevel_f64=l_batteryLevel_f64;
    a6f8:	e59f1014 	ldr	r1, [pc, #20]	; a714 <g_halBatCheck_readBatStatusFromI2C_bl+0x54>
    a6fc:	e14b20dc 	ldrd	r2, [fp, #-12]
    a700:	e1c120f0 	strd	r2, [r1]

	return M_HAL_BATCHECK_SUCCESS_BL;
    a704:	e3a03000 	mov	r3, #0
}
    a708:	e1a00003 	mov	r0, r3
    a70c:	e24bd004 	sub	sp, fp, #4
    a710:	e8bd8800 	pop	{fp, pc}
    a714:	000197a8 	.word	0x000197a8

0000a718 <g_halGps_getTime_ui32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
unsigned int g_halGps_getTime_ui32(void)
{
    a718:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a71c:	e28db000 	add	fp, sp, #0
	return l_time_ui32;
    a720:	e59f3010 	ldr	r3, [pc, #16]	; a738 <g_halGps_getTime_ui32+0x20>
    a724:	e5933000 	ldr	r3, [r3]
}
    a728:	e1a00003 	mov	r0, r3
    a72c:	e24bd000 	sub	sp, fp, #0
    a730:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a734:	e12fff1e 	bx	lr
    a738:	000197e0 	.word	0x000197e0

0000a73c <g_halGps_getLongitude_st>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
struct strPosition g_halGps_getLongitude_st(void)
{
    a73c:	e92d4800 	push	{fp, lr}
    a740:	e28db004 	add	fp, sp, #4
    a744:	e24dd008 	sub	sp, sp, #8
    a748:	e50b0008 	str	r0, [fp, #-8]
	return l_gps_longitude_st;
    a74c:	e51b2008 	ldr	r2, [fp, #-8]
    a750:	e59f3020 	ldr	r3, [pc, #32]	; a778 <g_halGps_getLongitude_st+0x3c>
    a754:	e1a0c002 	mov	ip, r2
    a758:	e1a0e003 	mov	lr, r3
    a75c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    a760:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    a764:	e89e0003 	ldm	lr, {r0, r1}
    a768:	e88c0003 	stm	ip, {r0, r1}
}
    a76c:	e51b0008 	ldr	r0, [fp, #-8]
    a770:	e24bd004 	sub	sp, fp, #4
    a774:	e8bd8800 	pop	{fp, pc}
    a778:	000197b0 	.word	0x000197b0

0000a77c <g_halGps_getLatitude_st>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
struct strPosition g_halGps_getLatitude_st(void)
{
    a77c:	e92d4800 	push	{fp, lr}
    a780:	e28db004 	add	fp, sp, #4
    a784:	e24dd008 	sub	sp, sp, #8
    a788:	e50b0008 	str	r0, [fp, #-8]
	return l_gps_latitude_st;
    a78c:	e51b2008 	ldr	r2, [fp, #-8]
    a790:	e59f3020 	ldr	r3, [pc, #32]	; a7b8 <g_halGps_getLatitude_st+0x3c>
    a794:	e1a0c002 	mov	ip, r2
    a798:	e1a0e003 	mov	lr, r3
    a79c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    a7a0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    a7a4:	e89e0003 	ldm	lr, {r0, r1}
    a7a8:	e88c0003 	stm	ip, {r0, r1}
}
    a7ac:	e51b0008 	ldr	r0, [fp, #-8]
    a7b0:	e24bd004 	sub	sp, fp, #4
    a7b4:	e8bd8800 	pop	{fp, pc}
    a7b8:	000197c8 	.word	0x000197c8

0000a7bc <g_halGps_getFix_ch>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
char g_halGps_getFix_ch(void)
{
    a7bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a7c0:	e28db000 	add	fp, sp, #0
	return l_fix_ch;
    a7c4:	e59f3010 	ldr	r3, [pc, #16]	; a7dc <g_halGps_getFix_ch+0x20>
    a7c8:	e5d33000 	ldrb	r3, [r3]
}
    a7cc:	e1a00003 	mov	r0, r3
    a7d0:	e24bd000 	sub	sp, fp, #0
    a7d4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a7d8:	e12fff1e 	bx	lr
    a7dc:	000197e4 	.word	0x000197e4

0000a7e0 <g_halGps_getVelocity_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getVelocity_f64(void)
{
    a7e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a7e4:	e28db000 	add	fp, sp, #0
	return l_velocity_f64;
    a7e8:	e59f3014 	ldr	r3, [pc, #20]	; a804 <g_halGps_getVelocity_f64+0x24>
    a7ec:	e1c320d0 	ldrd	r2, [r3]
    a7f0:	ec432b17 	vmov	d7, r2, r3
}
    a7f4:	eeb00b47 	vmov.f64	d0, d7
    a7f8:	e24bd000 	sub	sp, fp, #0
    a7fc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a800:	e12fff1e 	bx	lr
    a804:	000197e8 	.word	0x000197e8

0000a808 <g_halGps_getDirection_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getDirection_f64(void)
{
    a808:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a80c:	e28db000 	add	fp, sp, #0
	return l_direction_f64;
    a810:	e59f3014 	ldr	r3, [pc, #20]	; a82c <g_halGps_getDirection_f64+0x24>
    a814:	e1c320d0 	ldrd	r2, [r3]
    a818:	ec432b17 	vmov	d7, r2, r3
}
    a81c:	eeb00b47 	vmov.f64	d0, d7
    a820:	e24bd000 	sub	sp, fp, #0
    a824:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a828:	e12fff1e 	bx	lr
    a82c:	000197f0 	.word	0x000197f0

0000a830 <g_halGps_getDate_ui32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
unsigned int g_halGps_getDate_ui32(void)
{
    a830:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a834:	e28db000 	add	fp, sp, #0
	return l_date_ui32;
    a838:	e59f3010 	ldr	r3, [pc, #16]	; a850 <g_halGps_getDate_ui32+0x20>
    a83c:	e5933000 	ldr	r3, [r3]
}
    a840:	e1a00003 	mov	r0, r3
    a844:	e24bd000 	sub	sp, fp, #0
    a848:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a84c:	e12fff1e 	bx	lr
    a850:	000197f8 	.word	0x000197f8

0000a854 <g_halGps_getHeight_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getHeight_f64(void)
{
    a854:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a858:	e28db000 	add	fp, sp, #0
	return l_height_f64;
    a85c:	e59f3014 	ldr	r3, [pc, #20]	; a878 <g_halGps_getHeight_f64+0x24>
    a860:	e1c320d0 	ldrd	r2, [r3]
    a864:	ec432b17 	vmov	d7, r2, r3
}
    a868:	eeb00b47 	vmov.f64	d0, d7
    a86c:	e24bd000 	sub	sp, fp, #0
    a870:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a874:	e12fff1e 	bx	lr
    a878:	00019800 	.word	0x00019800

0000a87c <g_halGps_getGeoid_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getGeoid_f64(void)
{
    a87c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a880:	e28db000 	add	fp, sp, #0
	return l_geoid_f64;
    a884:	e59f3014 	ldr	r3, [pc, #20]	; a8a0 <g_halGps_getGeoid_f64+0x24>
    a888:	e1c320d0 	ldrd	r2, [r3]
    a88c:	ec432b17 	vmov	d7, r2, r3
}
    a890:	eeb00b47 	vmov.f64	d0, d7
    a894:	e24bd000 	sub	sp, fp, #0
    a898:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a89c:	e12fff1e 	bx	lr
    a8a0:	00019808 	.word	0x00019808

0000a8a4 <l_resetMessage1Values_vd>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void l_resetMessage1Values_vd(void)
{
    a8a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a8a8:	e28db000 	add	fp, sp, #0
	l_time_ui32=0;
    a8ac:	e59f3098 	ldr	r3, [pc, #152]	; a94c <l_resetMessage1Values_vd+0xa8>
    a8b0:	e3a02000 	mov	r2, #0
    a8b4:	e5832000 	str	r2, [r3]
	l_gps_longitude_st.l_degree_ui32=0;
    a8b8:	e59f3090 	ldr	r3, [pc, #144]	; a950 <l_resetMessage1Values_vd+0xac>
    a8bc:	e3a02000 	mov	r2, #0
    a8c0:	e5832000 	str	r2, [r3]
	l_gps_longitude_st.l_minutes_ui32=0;
    a8c4:	e59f3084 	ldr	r3, [pc, #132]	; a950 <l_resetMessage1Values_vd+0xac>
    a8c8:	e3a02000 	mov	r2, #0
    a8cc:	e5832004 	str	r2, [r3, #4]
	l_gps_longitude_st.l_seconds_f64=0;
    a8d0:	e59f1078 	ldr	r1, [pc, #120]	; a950 <l_resetMessage1Values_vd+0xac>
    a8d4:	e3a02000 	mov	r2, #0
    a8d8:	e3a03000 	mov	r3, #0
    a8dc:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_longitude_st.l_cardinalDirection_ch=' ';
    a8e0:	e59f3068 	ldr	r3, [pc, #104]	; a950 <l_resetMessage1Values_vd+0xac>
    a8e4:	e3a02020 	mov	r2, #32
    a8e8:	e5c32010 	strb	r2, [r3, #16]
	l_gps_latitude_st.l_degree_ui32=0;
    a8ec:	e59f3060 	ldr	r3, [pc, #96]	; a954 <l_resetMessage1Values_vd+0xb0>
    a8f0:	e3a02000 	mov	r2, #0
    a8f4:	e5832000 	str	r2, [r3]
	l_gps_latitude_st.l_minutes_ui32=0;
    a8f8:	e59f3054 	ldr	r3, [pc, #84]	; a954 <l_resetMessage1Values_vd+0xb0>
    a8fc:	e3a02000 	mov	r2, #0
    a900:	e5832004 	str	r2, [r3, #4]
	l_gps_latitude_st.l_seconds_f64=0;
    a904:	e59f1048 	ldr	r1, [pc, #72]	; a954 <l_resetMessage1Values_vd+0xb0>
    a908:	e3a02000 	mov	r2, #0
    a90c:	e3a03000 	mov	r3, #0
    a910:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_latitude_st.l_cardinalDirection_ch=' ';
    a914:	e59f3038 	ldr	r3, [pc, #56]	; a954 <l_resetMessage1Values_vd+0xb0>
    a918:	e3a02020 	mov	r2, #32
    a91c:	e5c32010 	strb	r2, [r3, #16]
	l_height_f64=0;
    a920:	e59f1030 	ldr	r1, [pc, #48]	; a958 <l_resetMessage1Values_vd+0xb4>
    a924:	e3a02000 	mov	r2, #0
    a928:	e3a03000 	mov	r3, #0
    a92c:	e1c120f0 	strd	r2, [r1]
	l_geoid_f64=0;
    a930:	e59f1024 	ldr	r1, [pc, #36]	; a95c <l_resetMessage1Values_vd+0xb8>
    a934:	e3a02000 	mov	r2, #0
    a938:	e3a03000 	mov	r3, #0
    a93c:	e1c120f0 	strd	r2, [r1]
}
    a940:	e24bd000 	sub	sp, fp, #0
    a944:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a948:	e12fff1e 	bx	lr
    a94c:	000197e0 	.word	0x000197e0
    a950:	000197b0 	.word	0x000197b0
    a954:	000197c8 	.word	0x000197c8
    a958:	00019800 	.word	0x00019800
    a95c:	00019808 	.word	0x00019808

0000a960 <l_resetMessage2Values_vd>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void l_resetMessage2Values_vd(void)
{
    a960:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a964:	e28db000 	add	fp, sp, #0
	l_time_ui32=0;
    a968:	e59f30b0 	ldr	r3, [pc, #176]	; aa20 <l_resetMessage2Values_vd+0xc0>
    a96c:	e3a02000 	mov	r2, #0
    a970:	e5832000 	str	r2, [r3]
	l_fix_ch=' ';
    a974:	e59f30a8 	ldr	r3, [pc, #168]	; aa24 <l_resetMessage2Values_vd+0xc4>
    a978:	e3a02020 	mov	r2, #32
    a97c:	e5c32000 	strb	r2, [r3]
	l_gps_longitude_st.l_degree_ui32=0;
    a980:	e59f30a0 	ldr	r3, [pc, #160]	; aa28 <l_resetMessage2Values_vd+0xc8>
    a984:	e3a02000 	mov	r2, #0
    a988:	e5832000 	str	r2, [r3]
	l_gps_longitude_st.l_minutes_ui32=0;
    a98c:	e59f3094 	ldr	r3, [pc, #148]	; aa28 <l_resetMessage2Values_vd+0xc8>
    a990:	e3a02000 	mov	r2, #0
    a994:	e5832004 	str	r2, [r3, #4]
	l_gps_longitude_st.l_seconds_f64=0;
    a998:	e59f1088 	ldr	r1, [pc, #136]	; aa28 <l_resetMessage2Values_vd+0xc8>
    a99c:	e3a02000 	mov	r2, #0
    a9a0:	e3a03000 	mov	r3, #0
    a9a4:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_longitude_st.l_cardinalDirection_ch=' ';
    a9a8:	e59f3078 	ldr	r3, [pc, #120]	; aa28 <l_resetMessage2Values_vd+0xc8>
    a9ac:	e3a02020 	mov	r2, #32
    a9b0:	e5c32010 	strb	r2, [r3, #16]
	l_gps_latitude_st.l_degree_ui32=0;
    a9b4:	e59f3070 	ldr	r3, [pc, #112]	; aa2c <l_resetMessage2Values_vd+0xcc>
    a9b8:	e3a02000 	mov	r2, #0
    a9bc:	e5832000 	str	r2, [r3]
	l_gps_latitude_st.l_minutes_ui32=0;
    a9c0:	e59f3064 	ldr	r3, [pc, #100]	; aa2c <l_resetMessage2Values_vd+0xcc>
    a9c4:	e3a02000 	mov	r2, #0
    a9c8:	e5832004 	str	r2, [r3, #4]
	l_gps_latitude_st.l_seconds_f64=0;
    a9cc:	e59f1058 	ldr	r1, [pc, #88]	; aa2c <l_resetMessage2Values_vd+0xcc>
    a9d0:	e3a02000 	mov	r2, #0
    a9d4:	e3a03000 	mov	r3, #0
    a9d8:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_latitude_st.l_cardinalDirection_ch=' ';
    a9dc:	e59f3048 	ldr	r3, [pc, #72]	; aa2c <l_resetMessage2Values_vd+0xcc>
    a9e0:	e3a02020 	mov	r2, #32
    a9e4:	e5c32010 	strb	r2, [r3, #16]
	l_velocity_f64=0;
    a9e8:	e59f1040 	ldr	r1, [pc, #64]	; aa30 <l_resetMessage2Values_vd+0xd0>
    a9ec:	e3a02000 	mov	r2, #0
    a9f0:	e3a03000 	mov	r3, #0
    a9f4:	e1c120f0 	strd	r2, [r1]
	l_direction_f64=0;
    a9f8:	e59f1034 	ldr	r1, [pc, #52]	; aa34 <l_resetMessage2Values_vd+0xd4>
    a9fc:	e3a02000 	mov	r2, #0
    aa00:	e3a03000 	mov	r3, #0
    aa04:	e1c120f0 	strd	r2, [r1]
	l_date_ui32=0;
    aa08:	e59f3028 	ldr	r3, [pc, #40]	; aa38 <l_resetMessage2Values_vd+0xd8>
    aa0c:	e3a02000 	mov	r2, #0
    aa10:	e5832000 	str	r2, [r3]
}
    aa14:	e24bd000 	sub	sp, fp, #0
    aa18:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    aa1c:	e12fff1e 	bx	lr
    aa20:	000197e0 	.word	0x000197e0
    aa24:	000197e4 	.word	0x000197e4
    aa28:	000197b0 	.word	0x000197b0
    aa2c:	000197c8 	.word	0x000197c8
    aa30:	000197e8 	.word	0x000197e8
    aa34:	000197f0 	.word	0x000197f0
    aa38:	000197f8 	.word	0x000197f8

0000aa3c <g_halGps_getData_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGps_getData_i32(void)
{
    aa3c:	e92d4800 	push	{fp, lr}
    aa40:	e28db004 	add	fp, sp, #4

	l_rec_Data_ch=g_lldUart_readByte_ch();
    aa44:	eb000afb 	bl	d638 <g_lldUart_readByte_ch>
    aa48:	e1a03000 	mov	r3, r0
    aa4c:	e1a02003 	mov	r2, r3
    aa50:	e59f38e0 	ldr	r3, [pc, #2272]	; b338 <g_halGps_getData_i32+0x8fc>
    aa54:	e5c32000 	strb	r2, [r3]

	if(!l_message_position_ch)//check which message is received
    aa58:	e59f38c4 	ldr	r3, [pc, #2244]	; b324 <g_halGps_getData_i32+0x8e8>
    aa5c:	e5d33000 	ldrb	r3, [r3]
    aa60:	e3530000 	cmp	r3, #0
    aa64:	1a0000a6 	bne	ad04 <g_halGps_getData_i32+0x2c8>
	{
		if(l_rec_Data_ch=='$')
    aa68:	e59f38c8 	ldr	r3, [pc, #2248]	; b338 <g_halGps_getData_i32+0x8fc>
    aa6c:	e5d33000 	ldrb	r3, [r3]
    aa70:	e3530024 	cmp	r3, #36	; 0x24
    aa74:	1a00000b 	bne	aaa8 <g_halGps_getData_i32+0x6c>
		{l_header_position_ch=1;l_succeded_i32=0;l_succeded_i32++;}
    aa78:	e59f38a8 	ldr	r3, [pc, #2216]	; b328 <g_halGps_getData_i32+0x8ec>
    aa7c:	e3a02001 	mov	r2, #1
    aa80:	e5c32000 	strb	r2, [r3]
    aa84:	e59f38b0 	ldr	r3, [pc, #2224]	; b33c <g_halGps_getData_i32+0x900>
    aa88:	e3a02000 	mov	r2, #0
    aa8c:	e5832000 	str	r2, [r3]
    aa90:	e59f38a4 	ldr	r3, [pc, #2212]	; b33c <g_halGps_getData_i32+0x900>
    aa94:	e5933000 	ldr	r3, [r3]
    aa98:	e2832001 	add	r2, r3, #1
    aa9c:	e59f3898 	ldr	r3, [pc, #2200]	; b33c <g_halGps_getData_i32+0x900>
    aaa0:	e5832000 	str	r2, [r3]
    aaa4:	ea000413 	b	baf8 <g_halGps_getData_i32+0x10bc>
		else if (l_header_position_ch==1 && l_rec_Data_ch=='G')
    aaa8:	e59f3878 	ldr	r3, [pc, #2168]	; b328 <g_halGps_getData_i32+0x8ec>
    aaac:	e5d33000 	ldrb	r3, [r3]
    aab0:	e3530001 	cmp	r3, #1
    aab4:	1a00000c 	bne	aaec <g_halGps_getData_i32+0xb0>
    aab8:	e59f3878 	ldr	r3, [pc, #2168]	; b338 <g_halGps_getData_i32+0x8fc>
    aabc:	e5d33000 	ldrb	r3, [r3]
    aac0:	e3530047 	cmp	r3, #71	; 0x47
    aac4:	1a000008 	bne	aaec <g_halGps_getData_i32+0xb0>
		{l_header_position_ch=2;l_succeded_i32++;}
    aac8:	e59f3858 	ldr	r3, [pc, #2136]	; b328 <g_halGps_getData_i32+0x8ec>
    aacc:	e3a02002 	mov	r2, #2
    aad0:	e5c32000 	strb	r2, [r3]
    aad4:	e59f3860 	ldr	r3, [pc, #2144]	; b33c <g_halGps_getData_i32+0x900>
    aad8:	e5933000 	ldr	r3, [r3]
    aadc:	e2832001 	add	r2, r3, #1
    aae0:	e59f3854 	ldr	r3, [pc, #2132]	; b33c <g_halGps_getData_i32+0x900>
    aae4:	e5832000 	str	r2, [r3]
    aae8:	ea000084 	b	ad00 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==2 && l_rec_Data_ch=='P')
    aaec:	e59f3834 	ldr	r3, [pc, #2100]	; b328 <g_halGps_getData_i32+0x8ec>
    aaf0:	e5d33000 	ldrb	r3, [r3]
    aaf4:	e3530002 	cmp	r3, #2
    aaf8:	1a00000c 	bne	ab30 <g_halGps_getData_i32+0xf4>
    aafc:	e59f3834 	ldr	r3, [pc, #2100]	; b338 <g_halGps_getData_i32+0x8fc>
    ab00:	e5d33000 	ldrb	r3, [r3]
    ab04:	e3530050 	cmp	r3, #80	; 0x50
    ab08:	1a000008 	bne	ab30 <g_halGps_getData_i32+0xf4>
		{l_header_position_ch=3;l_succeded_i32++;}
    ab0c:	e59f3814 	ldr	r3, [pc, #2068]	; b328 <g_halGps_getData_i32+0x8ec>
    ab10:	e3a02003 	mov	r2, #3
    ab14:	e5c32000 	strb	r2, [r3]
    ab18:	e59f381c 	ldr	r3, [pc, #2076]	; b33c <g_halGps_getData_i32+0x900>
    ab1c:	e5933000 	ldr	r3, [r3]
    ab20:	e2832001 	add	r2, r3, #1
    ab24:	e59f3810 	ldr	r3, [pc, #2064]	; b33c <g_halGps_getData_i32+0x900>
    ab28:	e5832000 	str	r2, [r3]
    ab2c:	ea000073 	b	ad00 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==3 && l_rec_Data_ch=='G')
    ab30:	e59f37f0 	ldr	r3, [pc, #2032]	; b328 <g_halGps_getData_i32+0x8ec>
    ab34:	e5d33000 	ldrb	r3, [r3]
    ab38:	e3530003 	cmp	r3, #3
    ab3c:	1a00000c 	bne	ab74 <g_halGps_getData_i32+0x138>
    ab40:	e59f37f0 	ldr	r3, [pc, #2032]	; b338 <g_halGps_getData_i32+0x8fc>
    ab44:	e5d33000 	ldrb	r3, [r3]
    ab48:	e3530047 	cmp	r3, #71	; 0x47
    ab4c:	1a000008 	bne	ab74 <g_halGps_getData_i32+0x138>
		{l_header_position_ch=14;l_succeded_i32++;}
    ab50:	e59f37d0 	ldr	r3, [pc, #2000]	; b328 <g_halGps_getData_i32+0x8ec>
    ab54:	e3a0200e 	mov	r2, #14
    ab58:	e5c32000 	strb	r2, [r3]
    ab5c:	e59f37d8 	ldr	r3, [pc, #2008]	; b33c <g_halGps_getData_i32+0x900>
    ab60:	e5933000 	ldr	r3, [r3]
    ab64:	e2832001 	add	r2, r3, #1
    ab68:	e59f37cc 	ldr	r3, [pc, #1996]	; b33c <g_halGps_getData_i32+0x900>
    ab6c:	e5832000 	str	r2, [r3]
    ab70:	ea000062 	b	ad00 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==3 && l_rec_Data_ch=='R')
    ab74:	e59f37ac 	ldr	r3, [pc, #1964]	; b328 <g_halGps_getData_i32+0x8ec>
    ab78:	e5d33000 	ldrb	r3, [r3]
    ab7c:	e3530003 	cmp	r3, #3
    ab80:	1a00000c 	bne	abb8 <g_halGps_getData_i32+0x17c>
    ab84:	e59f37ac 	ldr	r3, [pc, #1964]	; b338 <g_halGps_getData_i32+0x8fc>
    ab88:	e5d33000 	ldrb	r3, [r3]
    ab8c:	e3530052 	cmp	r3, #82	; 0x52
    ab90:	1a000008 	bne	abb8 <g_halGps_getData_i32+0x17c>
		{l_header_position_ch=24;l_succeded_i32++;}
    ab94:	e59f378c 	ldr	r3, [pc, #1932]	; b328 <g_halGps_getData_i32+0x8ec>
    ab98:	e3a02018 	mov	r2, #24
    ab9c:	e5c32000 	strb	r2, [r3]
    aba0:	e59f3794 	ldr	r3, [pc, #1940]	; b33c <g_halGps_getData_i32+0x900>
    aba4:	e5933000 	ldr	r3, [r3]
    aba8:	e2832001 	add	r2, r3, #1
    abac:	e59f3788 	ldr	r3, [pc, #1928]	; b33c <g_halGps_getData_i32+0x900>
    abb0:	e5832000 	str	r2, [r3]
    abb4:	ea000051 	b	ad00 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==14 && l_rec_Data_ch=='G')
    abb8:	e59f3768 	ldr	r3, [pc, #1896]	; b328 <g_halGps_getData_i32+0x8ec>
    abbc:	e5d33000 	ldrb	r3, [r3]
    abc0:	e353000e 	cmp	r3, #14
    abc4:	1a00000c 	bne	abfc <g_halGps_getData_i32+0x1c0>
    abc8:	e59f3768 	ldr	r3, [pc, #1896]	; b338 <g_halGps_getData_i32+0x8fc>
    abcc:	e5d33000 	ldrb	r3, [r3]
    abd0:	e3530047 	cmp	r3, #71	; 0x47
    abd4:	1a000008 	bne	abfc <g_halGps_getData_i32+0x1c0>
		{l_header_position_ch=15;l_succeded_i32++;}
    abd8:	e59f3748 	ldr	r3, [pc, #1864]	; b328 <g_halGps_getData_i32+0x8ec>
    abdc:	e3a0200f 	mov	r2, #15
    abe0:	e5c32000 	strb	r2, [r3]
    abe4:	e59f3750 	ldr	r3, [pc, #1872]	; b33c <g_halGps_getData_i32+0x900>
    abe8:	e5933000 	ldr	r3, [r3]
    abec:	e2832001 	add	r2, r3, #1
    abf0:	e59f3744 	ldr	r3, [pc, #1860]	; b33c <g_halGps_getData_i32+0x900>
    abf4:	e5832000 	str	r2, [r3]
    abf8:	ea000040 	b	ad00 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==24 && l_rec_Data_ch=='M')
    abfc:	e59f3724 	ldr	r3, [pc, #1828]	; b328 <g_halGps_getData_i32+0x8ec>
    ac00:	e5d33000 	ldrb	r3, [r3]
    ac04:	e3530018 	cmp	r3, #24
    ac08:	1a00000c 	bne	ac40 <g_halGps_getData_i32+0x204>
    ac0c:	e59f3724 	ldr	r3, [pc, #1828]	; b338 <g_halGps_getData_i32+0x8fc>
    ac10:	e5d33000 	ldrb	r3, [r3]
    ac14:	e353004d 	cmp	r3, #77	; 0x4d
    ac18:	1a000008 	bne	ac40 <g_halGps_getData_i32+0x204>
		{l_header_position_ch=25;l_succeded_i32++;}
    ac1c:	e59f3704 	ldr	r3, [pc, #1796]	; b328 <g_halGps_getData_i32+0x8ec>
    ac20:	e3a02019 	mov	r2, #25
    ac24:	e5c32000 	strb	r2, [r3]
    ac28:	e59f370c 	ldr	r3, [pc, #1804]	; b33c <g_halGps_getData_i32+0x900>
    ac2c:	e5933000 	ldr	r3, [r3]
    ac30:	e2832001 	add	r2, r3, #1
    ac34:	e59f3700 	ldr	r3, [pc, #1792]	; b33c <g_halGps_getData_i32+0x900>
    ac38:	e5832000 	str	r2, [r3]
    ac3c:	ea00002f 	b	ad00 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==15 && l_rec_Data_ch=='A')
    ac40:	e59f36e0 	ldr	r3, [pc, #1760]	; b328 <g_halGps_getData_i32+0x8ec>
    ac44:	e5d33000 	ldrb	r3, [r3]
    ac48:	e353000f 	cmp	r3, #15
    ac4c:	1a000013 	bne	aca0 <g_halGps_getData_i32+0x264>
    ac50:	e59f36e0 	ldr	r3, [pc, #1760]	; b338 <g_halGps_getData_i32+0x8fc>
    ac54:	e5d33000 	ldrb	r3, [r3]
    ac58:	e3530041 	cmp	r3, #65	; 0x41
    ac5c:	1a00000f 	bne	aca0 <g_halGps_getData_i32+0x264>
		{	l_message_ch=1;l_resetMessage1Values_vd();l_data_position_ch=0;l_message_position_ch=1; l_succeded_i32++;}
    ac60:	e59f36a8 	ldr	r3, [pc, #1704]	; b310 <g_halGps_getData_i32+0x8d4>
    ac64:	e3a02001 	mov	r2, #1
    ac68:	e5c32000 	strb	r2, [r3]
    ac6c:	ebffff0c 	bl	a8a4 <l_resetMessage1Values_vd>
    ac70:	e59f36b4 	ldr	r3, [pc, #1716]	; b32c <g_halGps_getData_i32+0x8f0>
    ac74:	e3a02000 	mov	r2, #0
    ac78:	e5c32000 	strb	r2, [r3]
    ac7c:	e59f36a0 	ldr	r3, [pc, #1696]	; b324 <g_halGps_getData_i32+0x8e8>
    ac80:	e3a02001 	mov	r2, #1
    ac84:	e5c32000 	strb	r2, [r3]
    ac88:	e59f36ac 	ldr	r3, [pc, #1708]	; b33c <g_halGps_getData_i32+0x900>
    ac8c:	e5933000 	ldr	r3, [r3]
    ac90:	e2832001 	add	r2, r3, #1
    ac94:	e59f36a0 	ldr	r3, [pc, #1696]	; b33c <g_halGps_getData_i32+0x900>
    ac98:	e5832000 	str	r2, [r3]
    ac9c:	ea000017 	b	ad00 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==25 && l_rec_Data_ch=='C')
    aca0:	e59f3680 	ldr	r3, [pc, #1664]	; b328 <g_halGps_getData_i32+0x8ec>
    aca4:	e5d33000 	ldrb	r3, [r3]
    aca8:	e3530019 	cmp	r3, #25
    acac:	1a000391 	bne	baf8 <g_halGps_getData_i32+0x10bc>
    acb0:	e59f3680 	ldr	r3, [pc, #1664]	; b338 <g_halGps_getData_i32+0x8fc>
    acb4:	e5d33000 	ldrb	r3, [r3]
    acb8:	e3530043 	cmp	r3, #67	; 0x43
    acbc:	1a00038d 	bne	baf8 <g_halGps_getData_i32+0x10bc>
		{	l_message_ch=2;l_resetMessage2Values_vd();l_data_position_ch=0; l_message_position_ch=1; l_succeded_i32++;}
    acc0:	e59f3648 	ldr	r3, [pc, #1608]	; b310 <g_halGps_getData_i32+0x8d4>
    acc4:	e3a02002 	mov	r2, #2
    acc8:	e5c32000 	strb	r2, [r3]
    accc:	ebffff23 	bl	a960 <l_resetMessage2Values_vd>
    acd0:	e59f3654 	ldr	r3, [pc, #1620]	; b32c <g_halGps_getData_i32+0x8f0>
    acd4:	e3a02000 	mov	r2, #0
    acd8:	e5c32000 	strb	r2, [r3]
    acdc:	e59f3640 	ldr	r3, [pc, #1600]	; b324 <g_halGps_getData_i32+0x8e8>
    ace0:	e3a02001 	mov	r2, #1
    ace4:	e5c32000 	strb	r2, [r3]
    ace8:	e59f364c 	ldr	r3, [pc, #1612]	; b33c <g_halGps_getData_i32+0x900>
    acec:	e5933000 	ldr	r3, [r3]
    acf0:	e2832001 	add	r2, r3, #1
    acf4:	e59f3640 	ldr	r3, [pc, #1600]	; b33c <g_halGps_getData_i32+0x900>
    acf8:	e5832000 	str	r2, [r3]
    acfc:	ea00037d 	b	baf8 <g_halGps_getData_i32+0x10bc>
    ad00:	ea00037c 	b	baf8 <g_halGps_getData_i32+0x10bc>
	}
	else
	{
		switch (l_message_ch)//check data within the two important messages
    ad04:	e59f3604 	ldr	r3, [pc, #1540]	; b310 <g_halGps_getData_i32+0x8d4>
    ad08:	e5d33000 	ldrb	r3, [r3]
    ad0c:	e3530001 	cmp	r3, #1
    ad10:	0a000002 	beq	ad20 <g_halGps_getData_i32+0x2e4>
    ad14:	e3530002 	cmp	r3, #2
    ad18:	0a0001ab 	beq	b3cc <g_halGps_getData_i32+0x990>
    ad1c:	ea000375 	b	baf8 <g_halGps_getData_i32+0x10bc>
		{
		case 1://$GPGGA ,205003.000 ,4841.9261 ,N ,00918.7276 ,E ,1 ,06 ,1.12 ,283.5 ,M ,48.0 ,M , ,*6D        38
			switch (l_rec_Data_ch)
    ad20:	e59f3610 	ldr	r3, [pc, #1552]	; b338 <g_halGps_getData_i32+0x8fc>
    ad24:	e5d33000 	ldrb	r3, [r3]
    ad28:	e353000a 	cmp	r3, #10
    ad2c:	0a00000e 	beq	ad6c <g_halGps_getData_i32+0x330>
    ad30:	e353002c 	cmp	r3, #44	; 0x2c
    ad34:	1a000018 	bne	ad9c <g_halGps_getData_i32+0x360>
			{
			case ',':
				l_data_position_ch++;
    ad38:	e59f35ec 	ldr	r3, [pc, #1516]	; b32c <g_halGps_getData_i32+0x8f0>
    ad3c:	e5d33000 	ldrb	r3, [r3]
    ad40:	e2833001 	add	r3, r3, #1
    ad44:	e6ef2073 	uxtb	r2, r3
    ad48:	e59f35dc 	ldr	r3, [pc, #1500]	; b32c <g_halGps_getData_i32+0x8f0>
    ad4c:	e5c32000 	strb	r2, [r3]
				l_fieldpointer_i32=0;
    ad50:	e59f35e8 	ldr	r3, [pc, #1512]	; b340 <g_halGps_getData_i32+0x904>
    ad54:	e3a02000 	mov	r2, #0
    ad58:	e5832000 	str	r2, [r3]
				l_decimal_place_factor_i32=10;
    ad5c:	e59f35bc 	ldr	r3, [pc, #1468]	; b320 <g_halGps_getData_i32+0x8e4>
    ad60:	e3a0200a 	mov	r2, #10
    ad64:	e5832000 	str	r2, [r3]
				break;
    ad68:	ea000196 	b	b3c8 <g_halGps_getData_i32+0x98c>
			case 10://LF found
				l_succeded_i32=l_succeded_i32+100;	//short comment
    ad6c:	e59f35c8 	ldr	r3, [pc, #1480]	; b33c <g_halGps_getData_i32+0x900>
    ad70:	e5933000 	ldr	r3, [r3]
    ad74:	e2832064 	add	r2, r3, #100	; 0x64
    ad78:	e59f35bc 	ldr	r3, [pc, #1468]	; b33c <g_halGps_getData_i32+0x900>
    ad7c:	e5832000 	str	r2, [r3]
				l_message_position_ch=0;
    ad80:	e59f359c 	ldr	r3, [pc, #1436]	; b324 <g_halGps_getData_i32+0x8e8>
    ad84:	e3a02000 	mov	r2, #0
    ad88:	e5c32000 	strb	r2, [r3]
				l_header_position_ch=0;
    ad8c:	e59f3594 	ldr	r3, [pc, #1428]	; b328 <g_halGps_getData_i32+0x8ec>
    ad90:	e3a02000 	mov	r2, #0
    ad94:	e5c32000 	strb	r2, [r3]
				break;
    ad98:	ea00018a 	b	b3c8 <g_halGps_getData_i32+0x98c>
			default:
				switch (l_data_position_ch)
    ad9c:	e59f3588 	ldr	r3, [pc, #1416]	; b32c <g_halGps_getData_i32+0x8f0>
    ada0:	e5d33000 	ldrb	r3, [r3]
    ada4:	e2433001 	sub	r3, r3, #1
    ada8:	e353000a 	cmp	r3, #10
    adac:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    adb0:	ea000183 	b	b3c4 <g_halGps_getData_i32+0x988>
    adb4:	0000ade0 	.word	0x0000ade0
    adb8:	0000ae50 	.word	0x0000ae50
    adbc:	0000af8c 	.word	0x0000af8c
    adc0:	0000afd8 	.word	0x0000afd8
    adc4:	0000b114 	.word	0x0000b114
    adc8:	0000b3c4 	.word	0x0000b3c4
    adcc:	0000b3c4 	.word	0x0000b3c4
    add0:	0000b3c4 	.word	0x0000b3c4
    add4:	0000b160 	.word	0x0000b160
    add8:	0000b3c4 	.word	0x0000b3c4
    addc:	0000b26c 	.word	0x0000b26c
				{
				case 1://Time
					if(l_fieldpointer_i32<6)
    ade0:	e59f3558 	ldr	r3, [pc, #1368]	; b340 <g_halGps_getData_i32+0x904>
    ade4:	e5933000 	ldr	r3, [r3]
    ade8:	e3530005 	cmp	r3, #5
    adec:	ca000011 	bgt	ae38 <g_halGps_getData_i32+0x3fc>
					{
						l_time_ui32=l_time_ui32*10+(l_rec_Data_ch-48);
    adf0:	e59f3538 	ldr	r3, [pc, #1336]	; b330 <g_halGps_getData_i32+0x8f4>
    adf4:	e5932000 	ldr	r2, [r3]
    adf8:	e1a03002 	mov	r3, r2
    adfc:	e1a03103 	lsl	r3, r3, #2
    ae00:	e0833002 	add	r3, r3, r2
    ae04:	e1a03083 	lsl	r3, r3, #1
    ae08:	e1a02003 	mov	r2, r3
    ae0c:	e59f3524 	ldr	r3, [pc, #1316]	; b338 <g_halGps_getData_i32+0x8fc>
    ae10:	e5d33000 	ldrb	r3, [r3]
    ae14:	e0823003 	add	r3, r2, r3
    ae18:	e2432030 	sub	r2, r3, #48	; 0x30
    ae1c:	e59f350c 	ldr	r3, [pc, #1292]	; b330 <g_halGps_getData_i32+0x8f4>
    ae20:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    ae24:	e59f3510 	ldr	r3, [pc, #1296]	; b33c <g_halGps_getData_i32+0x900>
    ae28:	e5933000 	ldr	r3, [r3]
    ae2c:	e2832001 	add	r2, r3, #1
    ae30:	e59f3504 	ldr	r3, [pc, #1284]	; b33c <g_halGps_getData_i32+0x900>
    ae34:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    ae38:	e59f3500 	ldr	r3, [pc, #1280]	; b340 <g_halGps_getData_i32+0x904>
    ae3c:	e5933000 	ldr	r3, [r3]
    ae40:	e2832001 	add	r2, r3, #1
    ae44:	e59f34f4 	ldr	r3, [pc, #1268]	; b340 <g_halGps_getData_i32+0x904>
    ae48:	e5832000 	str	r2, [r3]
					break;
    ae4c:	ea00015c 	b	b3c4 <g_halGps_getData_i32+0x988>
				case 2://Latitude
					if(l_fieldpointer_i32<2)
    ae50:	e59f34e8 	ldr	r3, [pc, #1256]	; b340 <g_halGps_getData_i32+0x904>
    ae54:	e5933000 	ldr	r3, [r3]
    ae58:	e3530001 	cmp	r3, #1
    ae5c:	ca000012 	bgt	aeac <g_halGps_getData_i32+0x470>
					{
						l_gps_latitude_st.l_degree_ui32=l_gps_latitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    ae60:	e59f34dc 	ldr	r3, [pc, #1244]	; b344 <g_halGps_getData_i32+0x908>
    ae64:	e5932000 	ldr	r2, [r3]
    ae68:	e1a03002 	mov	r3, r2
    ae6c:	e1a03103 	lsl	r3, r3, #2
    ae70:	e0833002 	add	r3, r3, r2
    ae74:	e1a03083 	lsl	r3, r3, #1
    ae78:	e1a02003 	mov	r2, r3
    ae7c:	e59f34b4 	ldr	r3, [pc, #1204]	; b338 <g_halGps_getData_i32+0x8fc>
    ae80:	e5d33000 	ldrb	r3, [r3]
    ae84:	e0823003 	add	r3, r2, r3
    ae88:	e2432030 	sub	r2, r3, #48	; 0x30
    ae8c:	e59f34b0 	ldr	r3, [pc, #1200]	; b344 <g_halGps_getData_i32+0x908>
    ae90:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    ae94:	e59f34a0 	ldr	r3, [pc, #1184]	; b33c <g_halGps_getData_i32+0x900>
    ae98:	e5933000 	ldr	r3, [r3]
    ae9c:	e2832001 	add	r2, r3, #1
    aea0:	e59f3494 	ldr	r3, [pc, #1172]	; b33c <g_halGps_getData_i32+0x900>
    aea4:	e5832000 	str	r2, [r3]
    aea8:	ea000031 	b	af74 <g_halGps_getData_i32+0x538>
					}
					else if(l_fieldpointer_i32<4)
    aeac:	e59f348c 	ldr	r3, [pc, #1164]	; b340 <g_halGps_getData_i32+0x904>
    aeb0:	e5933000 	ldr	r3, [r3]
    aeb4:	e3530003 	cmp	r3, #3
    aeb8:	ca000012 	bgt	af08 <g_halGps_getData_i32+0x4cc>
					{
						l_gps_latitude_st.l_minutes_ui32=l_gps_latitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    aebc:	e59f3480 	ldr	r3, [pc, #1152]	; b344 <g_halGps_getData_i32+0x908>
    aec0:	e5932004 	ldr	r2, [r3, #4]
    aec4:	e1a03002 	mov	r3, r2
    aec8:	e1a03103 	lsl	r3, r3, #2
    aecc:	e0833002 	add	r3, r3, r2
    aed0:	e1a03083 	lsl	r3, r3, #1
    aed4:	e1a02003 	mov	r2, r3
    aed8:	e59f3458 	ldr	r3, [pc, #1112]	; b338 <g_halGps_getData_i32+0x8fc>
    aedc:	e5d33000 	ldrb	r3, [r3]
    aee0:	e0823003 	add	r3, r2, r3
    aee4:	e2432030 	sub	r2, r3, #48	; 0x30
    aee8:	e59f3454 	ldr	r3, [pc, #1108]	; b344 <g_halGps_getData_i32+0x908>
    aeec:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    aef0:	e59f3444 	ldr	r3, [pc, #1092]	; b33c <g_halGps_getData_i32+0x900>
    aef4:	e5933000 	ldr	r3, [r3]
    aef8:	e2832001 	add	r2, r3, #1
    aefc:	e59f3438 	ldr	r3, [pc, #1080]	; b33c <g_halGps_getData_i32+0x900>
    af00:	e5832000 	str	r2, [r3]
    af04:	ea00001a 	b	af74 <g_halGps_getData_i32+0x538>
					}
					else if(l_fieldpointer_i32>=5 && l_fieldpointer_i32<9)
    af08:	e59f3430 	ldr	r3, [pc, #1072]	; b340 <g_halGps_getData_i32+0x904>
    af0c:	e5933000 	ldr	r3, [r3]
    af10:	e3530004 	cmp	r3, #4
    af14:	da000016 	ble	af74 <g_halGps_getData_i32+0x538>
    af18:	e59f3420 	ldr	r3, [pc, #1056]	; b340 <g_halGps_getData_i32+0x904>
    af1c:	e5933000 	ldr	r3, [r3]
    af20:	e3530008 	cmp	r3, #8
    af24:	ca000012 	bgt	af74 <g_halGps_getData_i32+0x538>
					{
						l_gps_latitude_st.l_seconds_f64=l_gps_latitude_st.l_seconds_f64*10+(l_rec_Data_ch-48)*0.006;
    af28:	e59f3414 	ldr	r3, [pc, #1044]	; b344 <g_halGps_getData_i32+0x908>
    af2c:	ed936b02 	vldr	d6, [r3, #8]
    af30:	ed9f7bf2 	vldr	d7, [pc, #968]	; b300 <g_halGps_getData_i32+0x8c4>
    af34:	ee266b07 	vmul.f64	d6, d6, d7
    af38:	e59f33f8 	ldr	r3, [pc, #1016]	; b338 <g_halGps_getData_i32+0x8fc>
    af3c:	e5d33000 	ldrb	r3, [r3]
    af40:	e2433030 	sub	r3, r3, #48	; 0x30
    af44:	ee073a90 	vmov	s15, r3
    af48:	eeb85be7 	vcvt.f64.s32	d5, s15
    af4c:	ed9f7bed 	vldr	d7, [pc, #948]	; b308 <g_halGps_getData_i32+0x8cc>
    af50:	ee257b07 	vmul.f64	d7, d5, d7
    af54:	ee367b07 	vadd.f64	d7, d6, d7
    af58:	e59f33e4 	ldr	r3, [pc, #996]	; b344 <g_halGps_getData_i32+0x908>
    af5c:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    af60:	e59f33d4 	ldr	r3, [pc, #980]	; b33c <g_halGps_getData_i32+0x900>
    af64:	e5933000 	ldr	r3, [r3]
    af68:	e2832001 	add	r2, r3, #1
    af6c:	e59f33c8 	ldr	r3, [pc, #968]	; b33c <g_halGps_getData_i32+0x900>
    af70:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    af74:	e59f33c4 	ldr	r3, [pc, #964]	; b340 <g_halGps_getData_i32+0x904>
    af78:	e5933000 	ldr	r3, [r3]
    af7c:	e2832001 	add	r2, r3, #1
    af80:	e59f33b8 	ldr	r3, [pc, #952]	; b340 <g_halGps_getData_i32+0x904>
    af84:	e5832000 	str	r2, [r3]
					break;
    af88:	ea00010d 	b	b3c4 <g_halGps_getData_i32+0x988>
				case 3://cardinal direction
					if(l_fieldpointer_i32<1)
    af8c:	e59f33ac 	ldr	r3, [pc, #940]	; b340 <g_halGps_getData_i32+0x904>
    af90:	e5933000 	ldr	r3, [r3]
    af94:	e3530000 	cmp	r3, #0
    af98:	ca000008 	bgt	afc0 <g_halGps_getData_i32+0x584>
					{
						l_gps_latitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    af9c:	e59f3394 	ldr	r3, [pc, #916]	; b338 <g_halGps_getData_i32+0x8fc>
    afa0:	e5d32000 	ldrb	r2, [r3]
    afa4:	e59f3398 	ldr	r3, [pc, #920]	; b344 <g_halGps_getData_i32+0x908>
    afa8:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    afac:	e59f3388 	ldr	r3, [pc, #904]	; b33c <g_halGps_getData_i32+0x900>
    afb0:	e5933000 	ldr	r3, [r3]
    afb4:	e2832001 	add	r2, r3, #1
    afb8:	e59f337c 	ldr	r3, [pc, #892]	; b33c <g_halGps_getData_i32+0x900>
    afbc:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    afc0:	e59f3378 	ldr	r3, [pc, #888]	; b340 <g_halGps_getData_i32+0x904>
    afc4:	e5933000 	ldr	r3, [r3]
    afc8:	e2832001 	add	r2, r3, #1
    afcc:	e59f336c 	ldr	r3, [pc, #876]	; b340 <g_halGps_getData_i32+0x904>
    afd0:	e5832000 	str	r2, [r3]
					break;
    afd4:	ea0000fa 	b	b3c4 <g_halGps_getData_i32+0x988>
				case 4://Longitude
					if(l_fieldpointer_i32<3)
    afd8:	e59f3360 	ldr	r3, [pc, #864]	; b340 <g_halGps_getData_i32+0x904>
    afdc:	e5933000 	ldr	r3, [r3]
    afe0:	e3530002 	cmp	r3, #2
    afe4:	ca000012 	bgt	b034 <g_halGps_getData_i32+0x5f8>
					{
						l_gps_longitude_st.l_degree_ui32=l_gps_longitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    afe8:	e59f3324 	ldr	r3, [pc, #804]	; b314 <g_halGps_getData_i32+0x8d8>
    afec:	e5932000 	ldr	r2, [r3]
    aff0:	e1a03002 	mov	r3, r2
    aff4:	e1a03103 	lsl	r3, r3, #2
    aff8:	e0833002 	add	r3, r3, r2
    affc:	e1a03083 	lsl	r3, r3, #1
    b000:	e1a02003 	mov	r2, r3
    b004:	e59f332c 	ldr	r3, [pc, #812]	; b338 <g_halGps_getData_i32+0x8fc>
    b008:	e5d33000 	ldrb	r3, [r3]
    b00c:	e0823003 	add	r3, r2, r3
    b010:	e2432030 	sub	r2, r3, #48	; 0x30
    b014:	e59f32f8 	ldr	r3, [pc, #760]	; b314 <g_halGps_getData_i32+0x8d8>
    b018:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    b01c:	e59f3318 	ldr	r3, [pc, #792]	; b33c <g_halGps_getData_i32+0x900>
    b020:	e5933000 	ldr	r3, [r3]
    b024:	e2832001 	add	r2, r3, #1
    b028:	e59f330c 	ldr	r3, [pc, #780]	; b33c <g_halGps_getData_i32+0x900>
    b02c:	e5832000 	str	r2, [r3]
    b030:	ea000031 	b	b0fc <g_halGps_getData_i32+0x6c0>
					}
					else if(l_fieldpointer_i32<5)
    b034:	e59f3304 	ldr	r3, [pc, #772]	; b340 <g_halGps_getData_i32+0x904>
    b038:	e5933000 	ldr	r3, [r3]
    b03c:	e3530004 	cmp	r3, #4
    b040:	ca000012 	bgt	b090 <g_halGps_getData_i32+0x654>
					{
						l_gps_longitude_st.l_minutes_ui32=l_gps_longitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    b044:	e59f32c8 	ldr	r3, [pc, #712]	; b314 <g_halGps_getData_i32+0x8d8>
    b048:	e5932004 	ldr	r2, [r3, #4]
    b04c:	e1a03002 	mov	r3, r2
    b050:	e1a03103 	lsl	r3, r3, #2
    b054:	e0833002 	add	r3, r3, r2
    b058:	e1a03083 	lsl	r3, r3, #1
    b05c:	e1a02003 	mov	r2, r3
    b060:	e59f32d0 	ldr	r3, [pc, #720]	; b338 <g_halGps_getData_i32+0x8fc>
    b064:	e5d33000 	ldrb	r3, [r3]
    b068:	e0823003 	add	r3, r2, r3
    b06c:	e2432030 	sub	r2, r3, #48	; 0x30
    b070:	e59f329c 	ldr	r3, [pc, #668]	; b314 <g_halGps_getData_i32+0x8d8>
    b074:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    b078:	e59f32bc 	ldr	r3, [pc, #700]	; b33c <g_halGps_getData_i32+0x900>
    b07c:	e5933000 	ldr	r3, [r3]
    b080:	e2832001 	add	r2, r3, #1
    b084:	e59f32b0 	ldr	r3, [pc, #688]	; b33c <g_halGps_getData_i32+0x900>
    b088:	e5832000 	str	r2, [r3]
    b08c:	ea00001a 	b	b0fc <g_halGps_getData_i32+0x6c0>
					}
					else if(l_fieldpointer_i32>=6 && l_fieldpointer_i32<10)
    b090:	e59f32a8 	ldr	r3, [pc, #680]	; b340 <g_halGps_getData_i32+0x904>
    b094:	e5933000 	ldr	r3, [r3]
    b098:	e3530005 	cmp	r3, #5
    b09c:	da000016 	ble	b0fc <g_halGps_getData_i32+0x6c0>
    b0a0:	e59f3298 	ldr	r3, [pc, #664]	; b340 <g_halGps_getData_i32+0x904>
    b0a4:	e5933000 	ldr	r3, [r3]
    b0a8:	e3530009 	cmp	r3, #9
    b0ac:	ca000012 	bgt	b0fc <g_halGps_getData_i32+0x6c0>
					{
						l_gps_longitude_st.l_seconds_f64=l_gps_longitude_st.l_seconds_f64*10+(l_rec_Data_ch-48)*0.006;
    b0b0:	e59f325c 	ldr	r3, [pc, #604]	; b314 <g_halGps_getData_i32+0x8d8>
    b0b4:	ed936b02 	vldr	d6, [r3, #8]
    b0b8:	ed9f7b90 	vldr	d7, [pc, #576]	; b300 <g_halGps_getData_i32+0x8c4>
    b0bc:	ee266b07 	vmul.f64	d6, d6, d7
    b0c0:	e59f3270 	ldr	r3, [pc, #624]	; b338 <g_halGps_getData_i32+0x8fc>
    b0c4:	e5d33000 	ldrb	r3, [r3]
    b0c8:	e2433030 	sub	r3, r3, #48	; 0x30
    b0cc:	ee073a90 	vmov	s15, r3
    b0d0:	eeb85be7 	vcvt.f64.s32	d5, s15
    b0d4:	ed9f7b8b 	vldr	d7, [pc, #556]	; b308 <g_halGps_getData_i32+0x8cc>
    b0d8:	ee257b07 	vmul.f64	d7, d5, d7
    b0dc:	ee367b07 	vadd.f64	d7, d6, d7
    b0e0:	e59f322c 	ldr	r3, [pc, #556]	; b314 <g_halGps_getData_i32+0x8d8>
    b0e4:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    b0e8:	e59f324c 	ldr	r3, [pc, #588]	; b33c <g_halGps_getData_i32+0x900>
    b0ec:	e5933000 	ldr	r3, [r3]
    b0f0:	e2832001 	add	r2, r3, #1
    b0f4:	e59f3240 	ldr	r3, [pc, #576]	; b33c <g_halGps_getData_i32+0x900>
    b0f8:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b0fc:	e59f323c 	ldr	r3, [pc, #572]	; b340 <g_halGps_getData_i32+0x904>
    b100:	e5933000 	ldr	r3, [r3]
    b104:	e2832001 	add	r2, r3, #1
    b108:	e59f3230 	ldr	r3, [pc, #560]	; b340 <g_halGps_getData_i32+0x904>
    b10c:	e5832000 	str	r2, [r3]
					break;
    b110:	ea0000ab 	b	b3c4 <g_halGps_getData_i32+0x988>
				case 5://cardinal direction
					if(l_fieldpointer_i32<1)
    b114:	e59f3224 	ldr	r3, [pc, #548]	; b340 <g_halGps_getData_i32+0x904>
    b118:	e5933000 	ldr	r3, [r3]
    b11c:	e3530000 	cmp	r3, #0
    b120:	ca000008 	bgt	b148 <g_halGps_getData_i32+0x70c>
					{
						l_gps_longitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    b124:	e59f320c 	ldr	r3, [pc, #524]	; b338 <g_halGps_getData_i32+0x8fc>
    b128:	e5d32000 	ldrb	r2, [r3]
    b12c:	e59f31e0 	ldr	r3, [pc, #480]	; b314 <g_halGps_getData_i32+0x8d8>
    b130:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    b134:	e59f3200 	ldr	r3, [pc, #512]	; b33c <g_halGps_getData_i32+0x900>
    b138:	e5933000 	ldr	r3, [r3]
    b13c:	e2832001 	add	r2, r3, #1
    b140:	e59f31f4 	ldr	r3, [pc, #500]	; b33c <g_halGps_getData_i32+0x900>
    b144:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b148:	e59f31f0 	ldr	r3, [pc, #496]	; b340 <g_halGps_getData_i32+0x904>
    b14c:	e5933000 	ldr	r3, [r3]
    b150:	e2832001 	add	r2, r3, #1
    b154:	e59f31e4 	ldr	r3, [pc, #484]	; b340 <g_halGps_getData_i32+0x904>
    b158:	e5832000 	str	r2, [r3]
					break;
    b15c:	ea000098 	b	b3c4 <g_halGps_getData_i32+0x988>
				case 9://Height
					if(l_rec_Data_ch!='.' && l_fieldpointer_i32==0)
    b160:	e59f31d0 	ldr	r3, [pc, #464]	; b338 <g_halGps_getData_i32+0x8fc>
    b164:	e5d33000 	ldrb	r3, [r3]
    b168:	e353002e 	cmp	r3, #46	; 0x2e
    b16c:	0a000015 	beq	b1c8 <g_halGps_getData_i32+0x78c>
    b170:	e59f31c8 	ldr	r3, [pc, #456]	; b340 <g_halGps_getData_i32+0x904>
    b174:	e5933000 	ldr	r3, [r3]
    b178:	e3530000 	cmp	r3, #0
    b17c:	1a000011 	bne	b1c8 <g_halGps_getData_i32+0x78c>
					{
						l_height_f64=l_height_f64*10+(double)(l_rec_Data_ch-48);
    b180:	e59f3190 	ldr	r3, [pc, #400]	; b318 <g_halGps_getData_i32+0x8dc>
    b184:	ed936b00 	vldr	d6, [r3]
    b188:	ed9f7b5c 	vldr	d7, [pc, #368]	; b300 <g_halGps_getData_i32+0x8c4>
    b18c:	ee266b07 	vmul.f64	d6, d6, d7
    b190:	e59f31a0 	ldr	r3, [pc, #416]	; b338 <g_halGps_getData_i32+0x8fc>
    b194:	e5d33000 	ldrb	r3, [r3]
    b198:	e2433030 	sub	r3, r3, #48	; 0x30
    b19c:	ee053a90 	vmov	s11, r3
    b1a0:	eeb87be5 	vcvt.f64.s32	d7, s11
    b1a4:	ee367b07 	vadd.f64	d7, d6, d7
    b1a8:	e59f3168 	ldr	r3, [pc, #360]	; b318 <g_halGps_getData_i32+0x8dc>
    b1ac:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    b1b0:	e59f3184 	ldr	r3, [pc, #388]	; b33c <g_halGps_getData_i32+0x900>
    b1b4:	e5933000 	ldr	r3, [r3]
    b1b8:	e2832001 	add	r2, r3, #1
    b1bc:	e59f3178 	ldr	r3, [pc, #376]	; b33c <g_halGps_getData_i32+0x900>
    b1c0:	e5832000 	str	r2, [r3]
    b1c4:	ea000027 	b	b268 <g_halGps_getData_i32+0x82c>

					}
					else if (l_rec_Data_ch=='.')
    b1c8:	e59f3168 	ldr	r3, [pc, #360]	; b338 <g_halGps_getData_i32+0x8fc>
    b1cc:	e5d33000 	ldrb	r3, [r3]
    b1d0:	e353002e 	cmp	r3, #46	; 0x2e
    b1d4:	1a000005 	bne	b1f0 <g_halGps_getData_i32+0x7b4>
					{
						l_fieldpointer_i32++;
    b1d8:	e59f3160 	ldr	r3, [pc, #352]	; b340 <g_halGps_getData_i32+0x904>
    b1dc:	e5933000 	ldr	r3, [r3]
    b1e0:	e2832001 	add	r2, r3, #1
    b1e4:	e59f3154 	ldr	r3, [pc, #340]	; b340 <g_halGps_getData_i32+0x904>
    b1e8:	e5832000 	str	r2, [r3]
    b1ec:	ea00001d 	b	b268 <g_halGps_getData_i32+0x82c>
					}
					else
					{
						l_height_f64=l_height_f64+(double)(l_rec_Data_ch-48)/l_decimal_place_factor_i32;
    b1f0:	e59f3140 	ldr	r3, [pc, #320]	; b338 <g_halGps_getData_i32+0x8fc>
    b1f4:	e5d33000 	ldrb	r3, [r3]
    b1f8:	e2433030 	sub	r3, r3, #48	; 0x30
    b1fc:	ee073a90 	vmov	s15, r3
    b200:	eeb86be7 	vcvt.f64.s32	d6, s15
    b204:	e59f3114 	ldr	r3, [pc, #276]	; b320 <g_halGps_getData_i32+0x8e4>
    b208:	e5933000 	ldr	r3, [r3]
    b20c:	ee053a90 	vmov	s11, r3
    b210:	eeb87be5 	vcvt.f64.s32	d7, s11
    b214:	ee866b07 	vdiv.f64	d6, d6, d7
    b218:	e59f30f8 	ldr	r3, [pc, #248]	; b318 <g_halGps_getData_i32+0x8dc>
    b21c:	ed937b00 	vldr	d7, [r3]
    b220:	ee367b07 	vadd.f64	d7, d6, d7
    b224:	e59f30ec 	ldr	r3, [pc, #236]	; b318 <g_halGps_getData_i32+0x8dc>
    b228:	ed837b00 	vstr	d7, [r3]
						l_decimal_place_factor_i32=l_decimal_place_factor_i32*10;
    b22c:	e59f30ec 	ldr	r3, [pc, #236]	; b320 <g_halGps_getData_i32+0x8e4>
    b230:	e5932000 	ldr	r2, [r3]
    b234:	e1a03002 	mov	r3, r2
    b238:	e1a03103 	lsl	r3, r3, #2
    b23c:	e0833002 	add	r3, r3, r2
    b240:	e1a03083 	lsl	r3, r3, #1
    b244:	e1a02003 	mov	r2, r3
    b248:	e59f30d0 	ldr	r3, [pc, #208]	; b320 <g_halGps_getData_i32+0x8e4>
    b24c:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    b250:	e59f30e4 	ldr	r3, [pc, #228]	; b33c <g_halGps_getData_i32+0x900>
    b254:	e5933000 	ldr	r3, [r3]
    b258:	e2832001 	add	r2, r3, #1
    b25c:	e59f30d8 	ldr	r3, [pc, #216]	; b33c <g_halGps_getData_i32+0x900>
    b260:	e5832000 	str	r2, [r3]
					}
					break;
    b264:	ea000056 	b	b3c4 <g_halGps_getData_i32+0x988>
    b268:	ea000055 	b	b3c4 <g_halGps_getData_i32+0x988>
				case 11://Geoid
					if(l_rec_Data_ch!='.' && l_fieldpointer_i32==0)
    b26c:	e59f30c4 	ldr	r3, [pc, #196]	; b338 <g_halGps_getData_i32+0x8fc>
    b270:	e5d33000 	ldrb	r3, [r3]
    b274:	e353002e 	cmp	r3, #46	; 0x2e
    b278:	0a000015 	beq	b2d4 <g_halGps_getData_i32+0x898>
    b27c:	e59f30bc 	ldr	r3, [pc, #188]	; b340 <g_halGps_getData_i32+0x904>
    b280:	e5933000 	ldr	r3, [r3]
    b284:	e3530000 	cmp	r3, #0
    b288:	1a000011 	bne	b2d4 <g_halGps_getData_i32+0x898>
					{
						l_geoid_f64=l_geoid_f64*10+(double)(l_rec_Data_ch-48);
    b28c:	e59f3088 	ldr	r3, [pc, #136]	; b31c <g_halGps_getData_i32+0x8e0>
    b290:	ed936b00 	vldr	d6, [r3]
    b294:	ed9f7b19 	vldr	d7, [pc, #100]	; b300 <g_halGps_getData_i32+0x8c4>
    b298:	ee266b07 	vmul.f64	d6, d6, d7
    b29c:	e59f3094 	ldr	r3, [pc, #148]	; b338 <g_halGps_getData_i32+0x8fc>
    b2a0:	e5d33000 	ldrb	r3, [r3]
    b2a4:	e2433030 	sub	r3, r3, #48	; 0x30
    b2a8:	ee053a90 	vmov	s11, r3
    b2ac:	eeb87be5 	vcvt.f64.s32	d7, s11
    b2b0:	ee367b07 	vadd.f64	d7, d6, d7
    b2b4:	e59f3060 	ldr	r3, [pc, #96]	; b31c <g_halGps_getData_i32+0x8e0>
    b2b8:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    b2bc:	e59f3078 	ldr	r3, [pc, #120]	; b33c <g_halGps_getData_i32+0x900>
    b2c0:	e5933000 	ldr	r3, [r3]
    b2c4:	e2832001 	add	r2, r3, #1
    b2c8:	e59f306c 	ldr	r3, [pc, #108]	; b33c <g_halGps_getData_i32+0x900>
    b2cc:	e5832000 	str	r2, [r3]
    b2d0:	ea00003a 	b	b3c0 <g_halGps_getData_i32+0x984>

					}
					else if (l_rec_Data_ch=='.')
    b2d4:	e59f305c 	ldr	r3, [pc, #92]	; b338 <g_halGps_getData_i32+0x8fc>
    b2d8:	e5d33000 	ldrb	r3, [r3]
    b2dc:	e353002e 	cmp	r3, #46	; 0x2e
    b2e0:	1a000018 	bne	b348 <g_halGps_getData_i32+0x90c>
					{
						l_fieldpointer_i32++;
    b2e4:	e59f3054 	ldr	r3, [pc, #84]	; b340 <g_halGps_getData_i32+0x904>
    b2e8:	e5933000 	ldr	r3, [r3]
    b2ec:	e2832001 	add	r2, r3, #1
    b2f0:	e59f3048 	ldr	r3, [pc, #72]	; b340 <g_halGps_getData_i32+0x904>
    b2f4:	e5832000 	str	r2, [r3]
    b2f8:	ea000030 	b	b3c0 <g_halGps_getData_i32+0x984>
    b2fc:	e1a00000 	nop			; (mov r0, r0)
    b300:	00000000 	.word	0x00000000
    b304:	40240000 	.word	0x40240000
    b308:	bc6a7efa 	.word	0xbc6a7efa
    b30c:	3f789374 	.word	0x3f789374
    b310:	00019811 	.word	0x00019811
    b314:	000197b0 	.word	0x000197b0
    b318:	00019800 	.word	0x00019800
    b31c:	00019808 	.word	0x00019808
    b320:	00019364 	.word	0x00019364
    b324:	00019813 	.word	0x00019813
    b328:	00019810 	.word	0x00019810
    b32c:	00019812 	.word	0x00019812
    b330:	000197e0 	.word	0x000197e0
    b334:	000197e4 	.word	0x000197e4
    b338:	00019360 	.word	0x00019360
    b33c:	00019818 	.word	0x00019818
    b340:	00019814 	.word	0x00019814
    b344:	000197c8 	.word	0x000197c8
					}
					else
					{
						l_geoid_f64=l_geoid_f64+(double)(l_rec_Data_ch-48)/l_decimal_place_factor_i32;
    b348:	e51f3018 	ldr	r3, [pc, #-24]	; b338 <g_halGps_getData_i32+0x8fc>
    b34c:	e5d33000 	ldrb	r3, [r3]
    b350:	e2433030 	sub	r3, r3, #48	; 0x30
    b354:	ee073a90 	vmov	s15, r3
    b358:	eeb86be7 	vcvt.f64.s32	d6, s15
    b35c:	e51f3044 	ldr	r3, [pc, #-68]	; b320 <g_halGps_getData_i32+0x8e4>
    b360:	e5933000 	ldr	r3, [r3]
    b364:	ee053a90 	vmov	s11, r3
    b368:	eeb87be5 	vcvt.f64.s32	d7, s11
    b36c:	ee866b07 	vdiv.f64	d6, d6, d7
    b370:	e51f305c 	ldr	r3, [pc, #-92]	; b31c <g_halGps_getData_i32+0x8e0>
    b374:	ed937b00 	vldr	d7, [r3]
    b378:	ee367b07 	vadd.f64	d7, d6, d7
    b37c:	e51f3068 	ldr	r3, [pc, #-104]	; b31c <g_halGps_getData_i32+0x8e0>
    b380:	ed837b00 	vstr	d7, [r3]
						l_decimal_place_factor_i32=l_decimal_place_factor_i32*10;
    b384:	e51f306c 	ldr	r3, [pc, #-108]	; b320 <g_halGps_getData_i32+0x8e4>
    b388:	e5932000 	ldr	r2, [r3]
    b38c:	e1a03002 	mov	r3, r2
    b390:	e1a03103 	lsl	r3, r3, #2
    b394:	e0833002 	add	r3, r3, r2
    b398:	e1a03083 	lsl	r3, r3, #1
    b39c:	e1a02003 	mov	r2, r3
    b3a0:	e51f3088 	ldr	r3, [pc, #-136]	; b320 <g_halGps_getData_i32+0x8e4>
    b3a4:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    b3a8:	e51f3074 	ldr	r3, [pc, #-116]	; b33c <g_halGps_getData_i32+0x900>
    b3ac:	e5933000 	ldr	r3, [r3]
    b3b0:	e2832001 	add	r2, r3, #1
    b3b4:	e51f3080 	ldr	r3, [pc, #-128]	; b33c <g_halGps_getData_i32+0x900>
    b3b8:	e5832000 	str	r2, [r3]
					}
					break;
    b3bc:	eaffffff 	b	b3c0 <g_halGps_getData_i32+0x984>
    b3c0:	e1a00000 	nop			; (mov r0, r0)
				}
				break;
    b3c4:	e1a00000 	nop			; (mov r0, r0)
			}
			break;
    b3c8:	ea0001ca 	b	baf8 <g_halGps_getData_i32+0x10bc>


		case 2://$GPRMC ,205003.000 ,A ,4841.9261 ,N ,00918.7276 ,E ,0.33 ,184.26 ,100415 , , , A*63      44- 46
			switch (l_rec_Data_ch)
    b3cc:	e51f309c 	ldr	r3, [pc, #-156]	; b338 <g_halGps_getData_i32+0x8fc>
    b3d0:	e5d33000 	ldrb	r3, [r3]
    b3d4:	e353000a 	cmp	r3, #10
    b3d8:	0a00000e 	beq	b418 <g_halGps_getData_i32+0x9dc>
    b3dc:	e353002c 	cmp	r3, #44	; 0x2c
    b3e0:	1a000018 	bne	b448 <g_halGps_getData_i32+0xa0c>
			{
			case ',':
				l_data_position_ch++;
    b3e4:	e51f30c0 	ldr	r3, [pc, #-192]	; b32c <g_halGps_getData_i32+0x8f0>
    b3e8:	e5d33000 	ldrb	r3, [r3]
    b3ec:	e2833001 	add	r3, r3, #1
    b3f0:	e6ef2073 	uxtb	r2, r3
    b3f4:	e51f30d0 	ldr	r3, [pc, #-208]	; b32c <g_halGps_getData_i32+0x8f0>
    b3f8:	e5c32000 	strb	r2, [r3]
				l_fieldpointer_i32=0;
    b3fc:	e51f30c4 	ldr	r3, [pc, #-196]	; b340 <g_halGps_getData_i32+0x904>
    b400:	e3a02000 	mov	r2, #0
    b404:	e5832000 	str	r2, [r3]
				l_decimal_place_factor_i32=10;
    b408:	e51f30f0 	ldr	r3, [pc, #-240]	; b320 <g_halGps_getData_i32+0x8e4>
    b40c:	e3a0200a 	mov	r2, #10
    b410:	e5832000 	str	r2, [r3]
				break;
    b414:	ea0001b6 	b	baf4 <g_halGps_getData_i32+0x10b8>
			case 10://LF found
				l_succeded_i32=l_succeded_i32+200;
    b418:	e51f30e4 	ldr	r3, [pc, #-228]	; b33c <g_halGps_getData_i32+0x900>
    b41c:	e5933000 	ldr	r3, [r3]
    b420:	e28320c8 	add	r2, r3, #200	; 0xc8
    b424:	e51f30f0 	ldr	r3, [pc, #-240]	; b33c <g_halGps_getData_i32+0x900>
    b428:	e5832000 	str	r2, [r3]
				l_message_position_ch=0;
    b42c:	e51f3110 	ldr	r3, [pc, #-272]	; b324 <g_halGps_getData_i32+0x8e8>
    b430:	e3a02000 	mov	r2, #0
    b434:	e5c32000 	strb	r2, [r3]
				l_header_position_ch=0;
    b438:	e51f3118 	ldr	r3, [pc, #-280]	; b328 <g_halGps_getData_i32+0x8ec>
    b43c:	e3a02000 	mov	r2, #0
    b440:	e5c32000 	strb	r2, [r3]
				break;
    b444:	ea0001aa 	b	baf4 <g_halGps_getData_i32+0x10b8>
			default:
				switch (l_data_position_ch)
    b448:	e51f3124 	ldr	r3, [pc, #-292]	; b32c <g_halGps_getData_i32+0x8f0>
    b44c:	e5d33000 	ldrb	r3, [r3]
    b450:	e2433001 	sub	r3, r3, #1
    b454:	e3530008 	cmp	r3, #8
    b458:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b45c:	ea0001a3 	b	baf0 <g_halGps_getData_i32+0x10b4>
    b460:	0000b484 	.word	0x0000b484
    b464:	0000b4f4 	.word	0x0000b4f4
    b468:	0000b540 	.word	0x0000b540
    b46c:	0000b67c 	.word	0x0000b67c
    b470:	0000b6c8 	.word	0x0000b6c8
    b474:	0000b804 	.word	0x0000b804
    b478:	0000b850 	.word	0x0000b850
    b47c:	0000b934 	.word	0x0000b934
    b480:	0000ba80 	.word	0x0000ba80
				{
				case 1://Time
					if(l_fieldpointer_i32<6)
    b484:	e51f314c 	ldr	r3, [pc, #-332]	; b340 <g_halGps_getData_i32+0x904>
    b488:	e5933000 	ldr	r3, [r3]
    b48c:	e3530005 	cmp	r3, #5
    b490:	ca000011 	bgt	b4dc <g_halGps_getData_i32+0xaa0>
					{
						l_time_ui32=l_time_ui32*10+(l_rec_Data_ch-48);
    b494:	e51f316c 	ldr	r3, [pc, #-364]	; b330 <g_halGps_getData_i32+0x8f4>
    b498:	e5932000 	ldr	r2, [r3]
    b49c:	e1a03002 	mov	r3, r2
    b4a0:	e1a03103 	lsl	r3, r3, #2
    b4a4:	e0833002 	add	r3, r3, r2
    b4a8:	e1a03083 	lsl	r3, r3, #1
    b4ac:	e1a02003 	mov	r2, r3
    b4b0:	e51f3180 	ldr	r3, [pc, #-384]	; b338 <g_halGps_getData_i32+0x8fc>
    b4b4:	e5d33000 	ldrb	r3, [r3]
    b4b8:	e0823003 	add	r3, r2, r3
    b4bc:	e2432030 	sub	r2, r3, #48	; 0x30
    b4c0:	e51f3198 	ldr	r3, [pc, #-408]	; b330 <g_halGps_getData_i32+0x8f4>
    b4c4:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    b4c8:	e51f3194 	ldr	r3, [pc, #-404]	; b33c <g_halGps_getData_i32+0x900>
    b4cc:	e5933000 	ldr	r3, [r3]
    b4d0:	e2832001 	add	r2, r3, #1
    b4d4:	e51f31a0 	ldr	r3, [pc, #-416]	; b33c <g_halGps_getData_i32+0x900>
    b4d8:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b4dc:	e51f31a4 	ldr	r3, [pc, #-420]	; b340 <g_halGps_getData_i32+0x904>
    b4e0:	e5933000 	ldr	r3, [r3]
    b4e4:	e2832001 	add	r2, r3, #1
    b4e8:	e51f31b0 	ldr	r3, [pc, #-432]	; b340 <g_halGps_getData_i32+0x904>
    b4ec:	e5832000 	str	r2, [r3]
					break;
    b4f0:	ea00017e 	b	baf0 <g_halGps_getData_i32+0x10b4>
				case 2://Fix
					if(l_fieldpointer_i32<2)
    b4f4:	e51f31bc 	ldr	r3, [pc, #-444]	; b340 <g_halGps_getData_i32+0x904>
    b4f8:	e5933000 	ldr	r3, [r3]
    b4fc:	e3530001 	cmp	r3, #1
    b500:	ca000008 	bgt	b528 <g_halGps_getData_i32+0xaec>
					{
						l_fix_ch=l_rec_Data_ch;
    b504:	e51f31d4 	ldr	r3, [pc, #-468]	; b338 <g_halGps_getData_i32+0x8fc>
    b508:	e5d32000 	ldrb	r2, [r3]
    b50c:	e51f31e0 	ldr	r3, [pc, #-480]	; b334 <g_halGps_getData_i32+0x8f8>
    b510:	e5c32000 	strb	r2, [r3]
						l_succeded_i32++;
    b514:	e51f31e0 	ldr	r3, [pc, #-480]	; b33c <g_halGps_getData_i32+0x900>
    b518:	e5933000 	ldr	r3, [r3]
    b51c:	e2832001 	add	r2, r3, #1
    b520:	e51f31ec 	ldr	r3, [pc, #-492]	; b33c <g_halGps_getData_i32+0x900>
    b524:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b528:	e51f31f0 	ldr	r3, [pc, #-496]	; b340 <g_halGps_getData_i32+0x904>
    b52c:	e5933000 	ldr	r3, [r3]
    b530:	e2832001 	add	r2, r3, #1
    b534:	e51f31fc 	ldr	r3, [pc, #-508]	; b340 <g_halGps_getData_i32+0x904>
    b538:	e5832000 	str	r2, [r3]
					break;
    b53c:	ea00016b 	b	baf0 <g_halGps_getData_i32+0x10b4>
				case 3://Latitude
					if(l_fieldpointer_i32<2)
    b540:	e51f3208 	ldr	r3, [pc, #-520]	; b340 <g_halGps_getData_i32+0x904>
    b544:	e5933000 	ldr	r3, [r3]
    b548:	e3530001 	cmp	r3, #1
    b54c:	ca000012 	bgt	b59c <g_halGps_getData_i32+0xb60>
					{
						l_gps_latitude_st.l_degree_ui32=l_gps_latitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    b550:	e51f3214 	ldr	r3, [pc, #-532]	; b344 <g_halGps_getData_i32+0x908>
    b554:	e5932000 	ldr	r2, [r3]
    b558:	e1a03002 	mov	r3, r2
    b55c:	e1a03103 	lsl	r3, r3, #2
    b560:	e0833002 	add	r3, r3, r2
    b564:	e1a03083 	lsl	r3, r3, #1
    b568:	e1a02003 	mov	r2, r3
    b56c:	e51f323c 	ldr	r3, [pc, #-572]	; b338 <g_halGps_getData_i32+0x8fc>
    b570:	e5d33000 	ldrb	r3, [r3]
    b574:	e0823003 	add	r3, r2, r3
    b578:	e2432030 	sub	r2, r3, #48	; 0x30
    b57c:	e51f3240 	ldr	r3, [pc, #-576]	; b344 <g_halGps_getData_i32+0x908>
    b580:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    b584:	e51f3250 	ldr	r3, [pc, #-592]	; b33c <g_halGps_getData_i32+0x900>
    b588:	e5933000 	ldr	r3, [r3]
    b58c:	e2832001 	add	r2, r3, #1
    b590:	e51f325c 	ldr	r3, [pc, #-604]	; b33c <g_halGps_getData_i32+0x900>
    b594:	e5832000 	str	r2, [r3]
    b598:	ea000031 	b	b664 <g_halGps_getData_i32+0xc28>
					}
					else if(l_fieldpointer_i32<4)
    b59c:	e51f3264 	ldr	r3, [pc, #-612]	; b340 <g_halGps_getData_i32+0x904>
    b5a0:	e5933000 	ldr	r3, [r3]
    b5a4:	e3530003 	cmp	r3, #3
    b5a8:	ca000012 	bgt	b5f8 <g_halGps_getData_i32+0xbbc>
					{
						l_gps_latitude_st.l_minutes_ui32=l_gps_latitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    b5ac:	e51f3270 	ldr	r3, [pc, #-624]	; b344 <g_halGps_getData_i32+0x908>
    b5b0:	e5932004 	ldr	r2, [r3, #4]
    b5b4:	e1a03002 	mov	r3, r2
    b5b8:	e1a03103 	lsl	r3, r3, #2
    b5bc:	e0833002 	add	r3, r3, r2
    b5c0:	e1a03083 	lsl	r3, r3, #1
    b5c4:	e1a02003 	mov	r2, r3
    b5c8:	e51f3298 	ldr	r3, [pc, #-664]	; b338 <g_halGps_getData_i32+0x8fc>
    b5cc:	e5d33000 	ldrb	r3, [r3]
    b5d0:	e0823003 	add	r3, r2, r3
    b5d4:	e2432030 	sub	r2, r3, #48	; 0x30
    b5d8:	e51f329c 	ldr	r3, [pc, #-668]	; b344 <g_halGps_getData_i32+0x908>
    b5dc:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    b5e0:	e51f32ac 	ldr	r3, [pc, #-684]	; b33c <g_halGps_getData_i32+0x900>
    b5e4:	e5933000 	ldr	r3, [r3]
    b5e8:	e2832001 	add	r2, r3, #1
    b5ec:	e51f32b8 	ldr	r3, [pc, #-696]	; b33c <g_halGps_getData_i32+0x900>
    b5f0:	e5832000 	str	r2, [r3]
    b5f4:	ea00001a 	b	b664 <g_halGps_getData_i32+0xc28>
					}
					else if(l_fieldpointer_i32>=5 && l_fieldpointer_i32<9)
    b5f8:	e51f32c0 	ldr	r3, [pc, #-704]	; b340 <g_halGps_getData_i32+0x904>
    b5fc:	e5933000 	ldr	r3, [r3]
    b600:	e3530004 	cmp	r3, #4
    b604:	da000016 	ble	b664 <g_halGps_getData_i32+0xc28>
    b608:	e51f32d0 	ldr	r3, [pc, #-720]	; b340 <g_halGps_getData_i32+0x904>
    b60c:	e5933000 	ldr	r3, [r3]
    b610:	e3530008 	cmp	r3, #8
    b614:	ca000012 	bgt	b664 <g_halGps_getData_i32+0xc28>
					{
						l_gps_latitude_st.l_seconds_f64=l_gps_latitude_st.l_seconds_f64*10+(double)(l_rec_Data_ch-48)*0.006;
    b618:	e51f32dc 	ldr	r3, [pc, #-732]	; b344 <g_halGps_getData_i32+0x908>
    b61c:	ed936b02 	vldr	d6, [r3, #8]
    b620:	ed9f7be8 	vldr	d7, [pc, #928]	; b9c8 <g_halGps_getData_i32+0xf8c>
    b624:	ee266b07 	vmul.f64	d6, d6, d7
    b628:	e59f33c4 	ldr	r3, [pc, #964]	; b9f4 <g_halGps_getData_i32+0xfb8>
    b62c:	e5d33000 	ldrb	r3, [r3]
    b630:	e2433030 	sub	r3, r3, #48	; 0x30
    b634:	ee073a90 	vmov	s15, r3
    b638:	eeb85be7 	vcvt.f64.s32	d5, s15
    b63c:	ed9f7be3 	vldr	d7, [pc, #908]	; b9d0 <g_halGps_getData_i32+0xf94>
    b640:	ee257b07 	vmul.f64	d7, d5, d7
    b644:	ee367b07 	vadd.f64	d7, d6, d7
    b648:	e59f3390 	ldr	r3, [pc, #912]	; b9e0 <g_halGps_getData_i32+0xfa4>
    b64c:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    b650:	e59f33a8 	ldr	r3, [pc, #936]	; ba00 <g_halGps_getData_i32+0xfc4>
    b654:	e5933000 	ldr	r3, [r3]
    b658:	e2832001 	add	r2, r3, #1
    b65c:	e59f339c 	ldr	r3, [pc, #924]	; ba00 <g_halGps_getData_i32+0xfc4>
    b660:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b664:	e59f3390 	ldr	r3, [pc, #912]	; b9fc <g_halGps_getData_i32+0xfc0>
    b668:	e5933000 	ldr	r3, [r3]
    b66c:	e2832001 	add	r2, r3, #1
    b670:	e59f3384 	ldr	r3, [pc, #900]	; b9fc <g_halGps_getData_i32+0xfc0>
    b674:	e5832000 	str	r2, [r3]
					break;
    b678:	ea00011c 	b	baf0 <g_halGps_getData_i32+0x10b4>
				case 4://cardinal direction
					if(l_fieldpointer_i32<1)
    b67c:	e59f3378 	ldr	r3, [pc, #888]	; b9fc <g_halGps_getData_i32+0xfc0>
    b680:	e5933000 	ldr	r3, [r3]
    b684:	e3530000 	cmp	r3, #0
    b688:	ca000008 	bgt	b6b0 <g_halGps_getData_i32+0xc74>
					{
						l_gps_latitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    b68c:	e59f3360 	ldr	r3, [pc, #864]	; b9f4 <g_halGps_getData_i32+0xfb8>
    b690:	e5d32000 	ldrb	r2, [r3]
    b694:	e59f3344 	ldr	r3, [pc, #836]	; b9e0 <g_halGps_getData_i32+0xfa4>
    b698:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    b69c:	e59f335c 	ldr	r3, [pc, #860]	; ba00 <g_halGps_getData_i32+0xfc4>
    b6a0:	e5933000 	ldr	r3, [r3]
    b6a4:	e2832001 	add	r2, r3, #1
    b6a8:	e59f3350 	ldr	r3, [pc, #848]	; ba00 <g_halGps_getData_i32+0xfc4>
    b6ac:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b6b0:	e59f3344 	ldr	r3, [pc, #836]	; b9fc <g_halGps_getData_i32+0xfc0>
    b6b4:	e5933000 	ldr	r3, [r3]
    b6b8:	e2832001 	add	r2, r3, #1
    b6bc:	e59f3338 	ldr	r3, [pc, #824]	; b9fc <g_halGps_getData_i32+0xfc0>
    b6c0:	e5832000 	str	r2, [r3]
					break;
    b6c4:	ea000109 	b	baf0 <g_halGps_getData_i32+0x10b4>
				case 5://Longitude
					if(l_fieldpointer_i32<3)
    b6c8:	e59f332c 	ldr	r3, [pc, #812]	; b9fc <g_halGps_getData_i32+0xfc0>
    b6cc:	e5933000 	ldr	r3, [r3]
    b6d0:	e3530002 	cmp	r3, #2
    b6d4:	ca000012 	bgt	b724 <g_halGps_getData_i32+0xce8>
					{
						l_gps_longitude_st.l_degree_ui32=l_gps_longitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    b6d8:	e59f3304 	ldr	r3, [pc, #772]	; b9e4 <g_halGps_getData_i32+0xfa8>
    b6dc:	e5932000 	ldr	r2, [r3]
    b6e0:	e1a03002 	mov	r3, r2
    b6e4:	e1a03103 	lsl	r3, r3, #2
    b6e8:	e0833002 	add	r3, r3, r2
    b6ec:	e1a03083 	lsl	r3, r3, #1
    b6f0:	e1a02003 	mov	r2, r3
    b6f4:	e59f32f8 	ldr	r3, [pc, #760]	; b9f4 <g_halGps_getData_i32+0xfb8>
    b6f8:	e5d33000 	ldrb	r3, [r3]
    b6fc:	e0823003 	add	r3, r2, r3
    b700:	e2432030 	sub	r2, r3, #48	; 0x30
    b704:	e59f32d8 	ldr	r3, [pc, #728]	; b9e4 <g_halGps_getData_i32+0xfa8>
    b708:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    b70c:	e59f32ec 	ldr	r3, [pc, #748]	; ba00 <g_halGps_getData_i32+0xfc4>
    b710:	e5933000 	ldr	r3, [r3]
    b714:	e2832001 	add	r2, r3, #1
    b718:	e59f32e0 	ldr	r3, [pc, #736]	; ba00 <g_halGps_getData_i32+0xfc4>
    b71c:	e5832000 	str	r2, [r3]
    b720:	ea000031 	b	b7ec <g_halGps_getData_i32+0xdb0>
					}
					else if(l_fieldpointer_i32<5)
    b724:	e59f32d0 	ldr	r3, [pc, #720]	; b9fc <g_halGps_getData_i32+0xfc0>
    b728:	e5933000 	ldr	r3, [r3]
    b72c:	e3530004 	cmp	r3, #4
    b730:	ca000012 	bgt	b780 <g_halGps_getData_i32+0xd44>
					{
						l_gps_longitude_st.l_minutes_ui32=l_gps_longitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    b734:	e59f32a8 	ldr	r3, [pc, #680]	; b9e4 <g_halGps_getData_i32+0xfa8>
    b738:	e5932004 	ldr	r2, [r3, #4]
    b73c:	e1a03002 	mov	r3, r2
    b740:	e1a03103 	lsl	r3, r3, #2
    b744:	e0833002 	add	r3, r3, r2
    b748:	e1a03083 	lsl	r3, r3, #1
    b74c:	e1a02003 	mov	r2, r3
    b750:	e59f329c 	ldr	r3, [pc, #668]	; b9f4 <g_halGps_getData_i32+0xfb8>
    b754:	e5d33000 	ldrb	r3, [r3]
    b758:	e0823003 	add	r3, r2, r3
    b75c:	e2432030 	sub	r2, r3, #48	; 0x30
    b760:	e59f327c 	ldr	r3, [pc, #636]	; b9e4 <g_halGps_getData_i32+0xfa8>
    b764:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    b768:	e59f3290 	ldr	r3, [pc, #656]	; ba00 <g_halGps_getData_i32+0xfc4>
    b76c:	e5933000 	ldr	r3, [r3]
    b770:	e2832001 	add	r2, r3, #1
    b774:	e59f3284 	ldr	r3, [pc, #644]	; ba00 <g_halGps_getData_i32+0xfc4>
    b778:	e5832000 	str	r2, [r3]
    b77c:	ea00001a 	b	b7ec <g_halGps_getData_i32+0xdb0>
					}
					else if(l_fieldpointer_i32>=6 && l_fieldpointer_i32<10)
    b780:	e59f3274 	ldr	r3, [pc, #628]	; b9fc <g_halGps_getData_i32+0xfc0>
    b784:	e5933000 	ldr	r3, [r3]
    b788:	e3530005 	cmp	r3, #5
    b78c:	da000016 	ble	b7ec <g_halGps_getData_i32+0xdb0>
    b790:	e59f3264 	ldr	r3, [pc, #612]	; b9fc <g_halGps_getData_i32+0xfc0>
    b794:	e5933000 	ldr	r3, [r3]
    b798:	e3530009 	cmp	r3, #9
    b79c:	ca000012 	bgt	b7ec <g_halGps_getData_i32+0xdb0>
					{
						l_gps_longitude_st.l_seconds_f64=l_gps_longitude_st.l_seconds_f64*10+(double)(l_rec_Data_ch-48)*0.006;
    b7a0:	e59f323c 	ldr	r3, [pc, #572]	; b9e4 <g_halGps_getData_i32+0xfa8>
    b7a4:	ed936b02 	vldr	d6, [r3, #8]
    b7a8:	ed9f7b86 	vldr	d7, [pc, #536]	; b9c8 <g_halGps_getData_i32+0xf8c>
    b7ac:	ee266b07 	vmul.f64	d6, d6, d7
    b7b0:	e59f323c 	ldr	r3, [pc, #572]	; b9f4 <g_halGps_getData_i32+0xfb8>
    b7b4:	e5d33000 	ldrb	r3, [r3]
    b7b8:	e2433030 	sub	r3, r3, #48	; 0x30
    b7bc:	ee073a90 	vmov	s15, r3
    b7c0:	eeb85be7 	vcvt.f64.s32	d5, s15
    b7c4:	ed9f7b81 	vldr	d7, [pc, #516]	; b9d0 <g_halGps_getData_i32+0xf94>
    b7c8:	ee257b07 	vmul.f64	d7, d5, d7
    b7cc:	ee367b07 	vadd.f64	d7, d6, d7
    b7d0:	e59f320c 	ldr	r3, [pc, #524]	; b9e4 <g_halGps_getData_i32+0xfa8>
    b7d4:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    b7d8:	e59f3220 	ldr	r3, [pc, #544]	; ba00 <g_halGps_getData_i32+0xfc4>
    b7dc:	e5933000 	ldr	r3, [r3]
    b7e0:	e2832001 	add	r2, r3, #1
    b7e4:	e59f3214 	ldr	r3, [pc, #532]	; ba00 <g_halGps_getData_i32+0xfc4>
    b7e8:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b7ec:	e59f3208 	ldr	r3, [pc, #520]	; b9fc <g_halGps_getData_i32+0xfc0>
    b7f0:	e5933000 	ldr	r3, [r3]
    b7f4:	e2832001 	add	r2, r3, #1
    b7f8:	e59f31fc 	ldr	r3, [pc, #508]	; b9fc <g_halGps_getData_i32+0xfc0>
    b7fc:	e5832000 	str	r2, [r3]
					break;
    b800:	ea0000ba 	b	baf0 <g_halGps_getData_i32+0x10b4>
				case 6://cardinal direction
					if(l_fieldpointer_i32<1)
    b804:	e59f31f0 	ldr	r3, [pc, #496]	; b9fc <g_halGps_getData_i32+0xfc0>
    b808:	e5933000 	ldr	r3, [r3]
    b80c:	e3530000 	cmp	r3, #0
    b810:	ca000008 	bgt	b838 <g_halGps_getData_i32+0xdfc>
					{
						l_gps_longitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    b814:	e59f31d8 	ldr	r3, [pc, #472]	; b9f4 <g_halGps_getData_i32+0xfb8>
    b818:	e5d32000 	ldrb	r2, [r3]
    b81c:	e59f31c0 	ldr	r3, [pc, #448]	; b9e4 <g_halGps_getData_i32+0xfa8>
    b820:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    b824:	e59f31d4 	ldr	r3, [pc, #468]	; ba00 <g_halGps_getData_i32+0xfc4>
    b828:	e5933000 	ldr	r3, [r3]
    b82c:	e2832001 	add	r2, r3, #1
    b830:	e59f31c8 	ldr	r3, [pc, #456]	; ba00 <g_halGps_getData_i32+0xfc4>
    b834:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b838:	e59f31bc 	ldr	r3, [pc, #444]	; b9fc <g_halGps_getData_i32+0xfc0>
    b83c:	e5933000 	ldr	r3, [r3]
    b840:	e2832001 	add	r2, r3, #1
    b844:	e59f31b0 	ldr	r3, [pc, #432]	; b9fc <g_halGps_getData_i32+0xfc0>
    b848:	e5832000 	str	r2, [r3]
					break;
    b84c:	ea0000a7 	b	baf0 <g_halGps_getData_i32+0x10b4>
				case 7://Velocity
					if(l_fieldpointer_i32<1)
    b850:	e59f31a4 	ldr	r3, [pc, #420]	; b9fc <g_halGps_getData_i32+0xfc0>
    b854:	e5933000 	ldr	r3, [r3]
    b858:	e3530000 	cmp	r3, #0
    b85c:	ca000013 	bgt	b8b0 <g_halGps_getData_i32+0xe74>
					{
						l_velocity_f64=l_velocity_f64*10+(double)(l_rec_Data_ch-48)*0.01;
    b860:	e59f3180 	ldr	r3, [pc, #384]	; b9e8 <g_halGps_getData_i32+0xfac>
    b864:	ed936b00 	vldr	d6, [r3]
    b868:	ed9f7b56 	vldr	d7, [pc, #344]	; b9c8 <g_halGps_getData_i32+0xf8c>
    b86c:	ee266b07 	vmul.f64	d6, d6, d7
    b870:	e59f317c 	ldr	r3, [pc, #380]	; b9f4 <g_halGps_getData_i32+0xfb8>
    b874:	e5d33000 	ldrb	r3, [r3]
    b878:	e2433030 	sub	r3, r3, #48	; 0x30
    b87c:	ee073a90 	vmov	s15, r3
    b880:	eeb85be7 	vcvt.f64.s32	d5, s15
    b884:	ed9f7b53 	vldr	d7, [pc, #332]	; b9d8 <g_halGps_getData_i32+0xf9c>
    b888:	ee257b07 	vmul.f64	d7, d5, d7
    b88c:	ee367b07 	vadd.f64	d7, d6, d7
    b890:	e59f3150 	ldr	r3, [pc, #336]	; b9e8 <g_halGps_getData_i32+0xfac>
    b894:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    b898:	e59f3160 	ldr	r3, [pc, #352]	; ba00 <g_halGps_getData_i32+0xfc4>
    b89c:	e5933000 	ldr	r3, [r3]
    b8a0:	e2832001 	add	r2, r3, #1
    b8a4:	e59f3154 	ldr	r3, [pc, #340]	; ba00 <g_halGps_getData_i32+0xfc4>
    b8a8:	e5832000 	str	r2, [r3]
    b8ac:	ea00001a 	b	b91c <g_halGps_getData_i32+0xee0>
					}
					else if(l_fieldpointer_i32>=2 && l_fieldpointer_i32<4)
    b8b0:	e59f3144 	ldr	r3, [pc, #324]	; b9fc <g_halGps_getData_i32+0xfc0>
    b8b4:	e5933000 	ldr	r3, [r3]
    b8b8:	e3530001 	cmp	r3, #1
    b8bc:	da000016 	ble	b91c <g_halGps_getData_i32+0xee0>
    b8c0:	e59f3134 	ldr	r3, [pc, #308]	; b9fc <g_halGps_getData_i32+0xfc0>
    b8c4:	e5933000 	ldr	r3, [r3]
    b8c8:	e3530003 	cmp	r3, #3
    b8cc:	ca000012 	bgt	b91c <g_halGps_getData_i32+0xee0>
					{
						l_velocity_f64=l_velocity_f64*10+(double)(l_rec_Data_ch-48)*0.01;
    b8d0:	e59f3110 	ldr	r3, [pc, #272]	; b9e8 <g_halGps_getData_i32+0xfac>
    b8d4:	ed936b00 	vldr	d6, [r3]
    b8d8:	ed9f7b3a 	vldr	d7, [pc, #232]	; b9c8 <g_halGps_getData_i32+0xf8c>
    b8dc:	ee266b07 	vmul.f64	d6, d6, d7
    b8e0:	e59f310c 	ldr	r3, [pc, #268]	; b9f4 <g_halGps_getData_i32+0xfb8>
    b8e4:	e5d33000 	ldrb	r3, [r3]
    b8e8:	e2433030 	sub	r3, r3, #48	; 0x30
    b8ec:	ee073a90 	vmov	s15, r3
    b8f0:	eeb85be7 	vcvt.f64.s32	d5, s15
    b8f4:	ed9f7b37 	vldr	d7, [pc, #220]	; b9d8 <g_halGps_getData_i32+0xf9c>
    b8f8:	ee257b07 	vmul.f64	d7, d5, d7
    b8fc:	ee367b07 	vadd.f64	d7, d6, d7
    b900:	e59f30e0 	ldr	r3, [pc, #224]	; b9e8 <g_halGps_getData_i32+0xfac>
    b904:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    b908:	e59f30f0 	ldr	r3, [pc, #240]	; ba00 <g_halGps_getData_i32+0xfc4>
    b90c:	e5933000 	ldr	r3, [r3]
    b910:	e2832001 	add	r2, r3, #1
    b914:	e59f30e4 	ldr	r3, [pc, #228]	; ba00 <g_halGps_getData_i32+0xfc4>
    b918:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b91c:	e59f30d8 	ldr	r3, [pc, #216]	; b9fc <g_halGps_getData_i32+0xfc0>
    b920:	e5933000 	ldr	r3, [r3]
    b924:	e2832001 	add	r2, r3, #1
    b928:	e59f30cc 	ldr	r3, [pc, #204]	; b9fc <g_halGps_getData_i32+0xfc0>
    b92c:	e5832000 	str	r2, [r3]
					break;
    b930:	ea00006e 	b	baf0 <g_halGps_getData_i32+0x10b4>
				case 8://Direction
					if(l_rec_Data_ch!='.' && l_fieldpointer_i32==0)
    b934:	e59f30b8 	ldr	r3, [pc, #184]	; b9f4 <g_halGps_getData_i32+0xfb8>
    b938:	e5d33000 	ldrb	r3, [r3]
    b93c:	e353002e 	cmp	r3, #46	; 0x2e
    b940:	0a000015 	beq	b99c <g_halGps_getData_i32+0xf60>
    b944:	e59f30b0 	ldr	r3, [pc, #176]	; b9fc <g_halGps_getData_i32+0xfc0>
    b948:	e5933000 	ldr	r3, [r3]
    b94c:	e3530000 	cmp	r3, #0
    b950:	1a000011 	bne	b99c <g_halGps_getData_i32+0xf60>
					{
						l_direction_f64=l_direction_f64*10+(double)(l_rec_Data_ch-48);
    b954:	e59f3090 	ldr	r3, [pc, #144]	; b9ec <g_halGps_getData_i32+0xfb0>
    b958:	ed936b00 	vldr	d6, [r3]
    b95c:	ed9f7b19 	vldr	d7, [pc, #100]	; b9c8 <g_halGps_getData_i32+0xf8c>
    b960:	ee266b07 	vmul.f64	d6, d6, d7
    b964:	e59f3088 	ldr	r3, [pc, #136]	; b9f4 <g_halGps_getData_i32+0xfb8>
    b968:	e5d33000 	ldrb	r3, [r3]
    b96c:	e2433030 	sub	r3, r3, #48	; 0x30
    b970:	ee053a90 	vmov	s11, r3
    b974:	eeb87be5 	vcvt.f64.s32	d7, s11
    b978:	ee367b07 	vadd.f64	d7, d6, d7
    b97c:	e59f3068 	ldr	r3, [pc, #104]	; b9ec <g_halGps_getData_i32+0xfb0>
    b980:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    b984:	e59f3074 	ldr	r3, [pc, #116]	; ba00 <g_halGps_getData_i32+0xfc4>
    b988:	e5933000 	ldr	r3, [r3]
    b98c:	e2832001 	add	r2, r3, #1
    b990:	e59f3068 	ldr	r3, [pc, #104]	; ba00 <g_halGps_getData_i32+0xfc4>
    b994:	e5832000 	str	r2, [r3]
    b998:	ea000037 	b	ba7c <g_halGps_getData_i32+0x1040>

					}
					else if (l_rec_Data_ch=='.')
    b99c:	e59f3050 	ldr	r3, [pc, #80]	; b9f4 <g_halGps_getData_i32+0xfb8>
    b9a0:	e5d33000 	ldrb	r3, [r3]
    b9a4:	e353002e 	cmp	r3, #46	; 0x2e
    b9a8:	1a000015 	bne	ba04 <g_halGps_getData_i32+0xfc8>
					{
						l_fieldpointer_i32++;
    b9ac:	e59f3048 	ldr	r3, [pc, #72]	; b9fc <g_halGps_getData_i32+0xfc0>
    b9b0:	e5933000 	ldr	r3, [r3]
    b9b4:	e2832001 	add	r2, r3, #1
    b9b8:	e59f303c 	ldr	r3, [pc, #60]	; b9fc <g_halGps_getData_i32+0xfc0>
    b9bc:	e5832000 	str	r2, [r3]
    b9c0:	ea00002d 	b	ba7c <g_halGps_getData_i32+0x1040>
    b9c4:	e1a00000 	nop			; (mov r0, r0)
    b9c8:	00000000 	.word	0x00000000
    b9cc:	40240000 	.word	0x40240000
    b9d0:	bc6a7efa 	.word	0xbc6a7efa
    b9d4:	3f789374 	.word	0x3f789374
    b9d8:	47ae147b 	.word	0x47ae147b
    b9dc:	3f847ae1 	.word	0x3f847ae1
    b9e0:	000197c8 	.word	0x000197c8
    b9e4:	000197b0 	.word	0x000197b0
    b9e8:	000197e8 	.word	0x000197e8
    b9ec:	000197f0 	.word	0x000197f0
    b9f0:	00019364 	.word	0x00019364
    b9f4:	00019360 	.word	0x00019360
    b9f8:	000197f8 	.word	0x000197f8
    b9fc:	00019814 	.word	0x00019814
    ba00:	00019818 	.word	0x00019818
					}
					else
					{
						l_direction_f64=l_direction_f64+(double)(l_rec_Data_ch-48)/l_decimal_place_factor_i32;
    ba04:	e51f3018 	ldr	r3, [pc, #-24]	; b9f4 <g_halGps_getData_i32+0xfb8>
    ba08:	e5d33000 	ldrb	r3, [r3]
    ba0c:	e2433030 	sub	r3, r3, #48	; 0x30
    ba10:	ee073a90 	vmov	s15, r3
    ba14:	eeb86be7 	vcvt.f64.s32	d6, s15
    ba18:	e51f3030 	ldr	r3, [pc, #-48]	; b9f0 <g_halGps_getData_i32+0xfb4>
    ba1c:	e5933000 	ldr	r3, [r3]
    ba20:	ee053a90 	vmov	s11, r3
    ba24:	eeb87be5 	vcvt.f64.s32	d7, s11
    ba28:	ee866b07 	vdiv.f64	d6, d6, d7
    ba2c:	e51f3048 	ldr	r3, [pc, #-72]	; b9ec <g_halGps_getData_i32+0xfb0>
    ba30:	ed937b00 	vldr	d7, [r3]
    ba34:	ee367b07 	vadd.f64	d7, d6, d7
    ba38:	e51f3054 	ldr	r3, [pc, #-84]	; b9ec <g_halGps_getData_i32+0xfb0>
    ba3c:	ed837b00 	vstr	d7, [r3]
						l_decimal_place_factor_i32=l_decimal_place_factor_i32*10;
    ba40:	e51f3058 	ldr	r3, [pc, #-88]	; b9f0 <g_halGps_getData_i32+0xfb4>
    ba44:	e5932000 	ldr	r2, [r3]
    ba48:	e1a03002 	mov	r3, r2
    ba4c:	e1a03103 	lsl	r3, r3, #2
    ba50:	e0833002 	add	r3, r3, r2
    ba54:	e1a03083 	lsl	r3, r3, #1
    ba58:	e1a02003 	mov	r2, r3
    ba5c:	e51f3074 	ldr	r3, [pc, #-116]	; b9f0 <g_halGps_getData_i32+0xfb4>
    ba60:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    ba64:	e51f306c 	ldr	r3, [pc, #-108]	; ba00 <g_halGps_getData_i32+0xfc4>
    ba68:	e5933000 	ldr	r3, [r3]
    ba6c:	e2832001 	add	r2, r3, #1
    ba70:	e51f3078 	ldr	r3, [pc, #-120]	; ba00 <g_halGps_getData_i32+0xfc4>
    ba74:	e5832000 	str	r2, [r3]
					}
					break;
    ba78:	ea00001c 	b	baf0 <g_halGps_getData_i32+0x10b4>
    ba7c:	ea00001b 	b	baf0 <g_halGps_getData_i32+0x10b4>
				case 9://Date
					if(l_fieldpointer_i32<6)
    ba80:	e51f308c 	ldr	r3, [pc, #-140]	; b9fc <g_halGps_getData_i32+0xfc0>
    ba84:	e5933000 	ldr	r3, [r3]
    ba88:	e3530005 	cmp	r3, #5
    ba8c:	ca000011 	bgt	bad8 <g_halGps_getData_i32+0x109c>
					{
						l_date_ui32=l_date_ui32*10+(l_rec_Data_ch-48);
    ba90:	e51f30a0 	ldr	r3, [pc, #-160]	; b9f8 <g_halGps_getData_i32+0xfbc>
    ba94:	e5932000 	ldr	r2, [r3]
    ba98:	e1a03002 	mov	r3, r2
    ba9c:	e1a03103 	lsl	r3, r3, #2
    baa0:	e0833002 	add	r3, r3, r2
    baa4:	e1a03083 	lsl	r3, r3, #1
    baa8:	e1a02003 	mov	r2, r3
    baac:	e51f30c0 	ldr	r3, [pc, #-192]	; b9f4 <g_halGps_getData_i32+0xfb8>
    bab0:	e5d33000 	ldrb	r3, [r3]
    bab4:	e0823003 	add	r3, r2, r3
    bab8:	e2432030 	sub	r2, r3, #48	; 0x30
    babc:	e51f30cc 	ldr	r3, [pc, #-204]	; b9f8 <g_halGps_getData_i32+0xfbc>
    bac0:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    bac4:	e51f30cc 	ldr	r3, [pc, #-204]	; ba00 <g_halGps_getData_i32+0xfc4>
    bac8:	e5933000 	ldr	r3, [r3]
    bacc:	e2832001 	add	r2, r3, #1
    bad0:	e51f30d8 	ldr	r3, [pc, #-216]	; ba00 <g_halGps_getData_i32+0xfc4>
    bad4:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    bad8:	e51f30e4 	ldr	r3, [pc, #-228]	; b9fc <g_halGps_getData_i32+0xfc0>
    badc:	e5933000 	ldr	r3, [r3]
    bae0:	e2832001 	add	r2, r3, #1
    bae4:	e51f30f0 	ldr	r3, [pc, #-240]	; b9fc <g_halGps_getData_i32+0xfc0>
    bae8:	e5832000 	str	r2, [r3]
					break;
    baec:	e1a00000 	nop			; (mov r0, r0)
				}
				break;
    baf0:	e1a00000 	nop			; (mov r0, r0)
			}
			break;
    baf4:	e1a00000 	nop			; (mov r0, r0)
		}
	}
	return(l_succeded_i32);
    baf8:	e51f3100 	ldr	r3, [pc, #-256]	; ba00 <g_halGps_getData_i32+0xfc4>
    bafc:	e5933000 	ldr	r3, [r3]
}
    bb00:	e1a00003 	mov	r0, r3
    bb04:	e8bd8800 	pop	{fp, pc}

0000bb08 <l_readI2cByte_ui8>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline unsigned char l_readI2cByte_ui8( unsigned char f_registerAddr_ui8 )
{
    bb08:	e92d4800 	push	{fp, lr}
    bb0c:	e28db004 	add	fp, sp, #4
    bb10:	e24dd010 	sub	sp, sp, #16
    bb14:	e1a03000 	mov	r3, r0
    bb18:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char	l_registerAddr_ui8 = 0;
    bb1c:	e3a03000 	mov	r3, #0
    bb20:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char	l_recvDataByte_ui8 = 0;
    bb24:	e3a03000 	mov	r3, #0
    bb28:	e54b3006 	strb	r3, [fp, #-6]

	/*
	 * ensure single byte read (MSB of register address shall be 0)
	 * -> Mask MSB to zero!
	 */
	l_registerAddr_ui8 = f_registerAddr_ui8 & 0b01111111;
    bb2c:	e55b300d 	ldrb	r3, [fp, #-13]
    bb30:	e203307f 	and	r3, r3, #127	; 0x7f
    bb34:	e6ef3073 	uxtb	r3, r3
    bb38:	e54b3005 	strb	r3, [fp, #-5]

	//write register request to I2C
	if ( g_lldI2c_WriteI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, &l_registerAddr_ui8, 1) != M_HAL_ACCMAG_SUCCESS_BL )
    bb3c:	e24b3005 	sub	r3, fp, #5
    bb40:	e3a0001e 	mov	r0, #30
    bb44:	e1a01003 	mov	r1, r3
    bb48:	e3a02001 	mov	r2, #1
    bb4c:	eb0005a3 	bl	d1e0 <g_lldI2c_WriteI2c_bl>
    bb50:	e1a03000 	mov	r3, r0
    bb54:	e3530000 	cmp	r3, #0
    bb58:	0a000001 	beq	bb64 <l_readI2cByte_ui8+0x5c>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    bb5c:	e3a03001 	mov	r3, #1
    bb60:	ea00000a 	b	bb90 <l_readI2cByte_ui8+0x88>
	}

	//read requested register data
	if ( g_lldI2c_ReadI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, &l_recvDataByte_ui8, 1) != M_HAL_ACCMAG_SUCCESS_BL )
    bb64:	e24b3006 	sub	r3, fp, #6
    bb68:	e3a0001e 	mov	r0, #30
    bb6c:	e1a01003 	mov	r1, r3
    bb70:	e3a02001 	mov	r2, #1
    bb74:	eb0005d4 	bl	d2cc <g_lldI2c_ReadI2c_bl>
    bb78:	e1a03000 	mov	r3, r0
    bb7c:	e3530000 	cmp	r3, #0
    bb80:	0a000001 	beq	bb8c <l_readI2cByte_ui8+0x84>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    bb84:	e3a03001 	mov	r3, #1
    bb88:	ea000000 	b	bb90 <l_readI2cByte_ui8+0x88>
	}

	return l_recvDataByte_ui8;
    bb8c:	e55b3006 	ldrb	r3, [fp, #-6]
}
    bb90:	e1a00003 	mov	r0, r3
    bb94:	e24bd004 	sub	sp, fp, #4
    bb98:	e8bd8800 	pop	{fp, pc}

0000bb9c <l_readI2cByteStream_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline unsigned int l_readI2cByteStream_bl( unsigned char f_startRegisterAddr_ui8, const unsigned char* f_readDestinationBuffer_pui8, unsigned int f_numOfBytesToRead_ui32 )
{
    bb9c:	e92d4800 	push	{fp, lr}
    bba0:	e28db004 	add	fp, sp, #4
    bba4:	e24dd018 	sub	sp, sp, #24
    bba8:	e1a03000 	mov	r3, r0
    bbac:	e50b1014 	str	r1, [fp, #-20]
    bbb0:	e50b2018 	str	r2, [fp, #-24]
    bbb4:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char	l_registerAddr_ui8 	= 0;
    bbb8:	e3a03000 	mov	r3, #0
    bbbc:	e54b3005 	strb	r3, [fp, #-5]

	// ensure at least one data byte to read
	if (f_numOfBytesToRead_ui32 < 1)
    bbc0:	e51b3018 	ldr	r3, [fp, #-24]
    bbc4:	e3530000 	cmp	r3, #0
    bbc8:	1a000001 	bne	bbd4 <l_readI2cByteStream_bl+0x38>
	{
		return M_HAL_ACCMAG_FAILED_BL;
    bbcc:	e3a03001 	mov	r3, #1
    bbd0:	ea000018 	b	bc38 <l_readI2cByteStream_bl+0x9c>
	 * ensure byte stream reading (MSB of register address shall be 1)
	 *   -> Mask MSB to one!
	 *   -> LSM303D will auto-increment the register address for each byte
	 *      of data
	 */
	l_registerAddr_ui8 = f_startRegisterAddr_ui8 | 0b10000000;
    bbd4:	e55b300d 	ldrb	r3, [fp, #-13]
    bbd8:	e1e03c83 	mvn	r3, r3, lsl #25
    bbdc:	e1e03ca3 	mvn	r3, r3, lsr #25
    bbe0:	e6ef3073 	uxtb	r3, r3
    bbe4:	e54b3005 	strb	r3, [fp, #-5]

	//write register request to I2C
	if ( g_lldI2c_WriteI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, &l_registerAddr_ui8, 1) != M_HAL_ACCMAG_SUCCESS_BL )
    bbe8:	e24b3005 	sub	r3, fp, #5
    bbec:	e3a0001e 	mov	r0, #30
    bbf0:	e1a01003 	mov	r1, r3
    bbf4:	e3a02001 	mov	r2, #1
    bbf8:	eb000578 	bl	d1e0 <g_lldI2c_WriteI2c_bl>
    bbfc:	e1a03000 	mov	r3, r0
    bc00:	e3530000 	cmp	r3, #0
    bc04:	0a000001 	beq	bc10 <l_readI2cByteStream_bl+0x74>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    bc08:	e3a03001 	mov	r3, #1
    bc0c:	ea000009 	b	bc38 <l_readI2cByteStream_bl+0x9c>
	}

	//read requested registers to I2C
	if ( g_lldI2c_ReadI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, f_readDestinationBuffer_pui8, f_numOfBytesToRead_ui32) != M_HAL_ACCMAG_SUCCESS_BL )
    bc10:	e3a0001e 	mov	r0, #30
    bc14:	e51b1014 	ldr	r1, [fp, #-20]
    bc18:	e51b2018 	ldr	r2, [fp, #-24]
    bc1c:	eb0005aa 	bl	d2cc <g_lldI2c_ReadI2c_bl>
    bc20:	e1a03000 	mov	r3, r0
    bc24:	e3530000 	cmp	r3, #0
    bc28:	0a000001 	beq	bc34 <l_readI2cByteStream_bl+0x98>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    bc2c:	e3a03001 	mov	r3, #1
    bc30:	ea000000 	b	bc38 <l_readI2cByteStream_bl+0x9c>
	}

	return M_HAL_ACCMAG_SUCCESS_BL;
    bc34:	e3a03000 	mov	r3, #0
}
    bc38:	e1a00003 	mov	r0, r3
    bc3c:	e24bd004 	sub	sp, fp, #4
    bc40:	e8bd8800 	pop	{fp, pc}

0000bc44 <l_writeI2cByteStream_bl>:
 * - changed malloc/free approach to fixed size array (with define to set
 *   size of array in header)
 * \endinternal
 ***********************************************************************/
static inline unsigned int l_writeI2cByteStream_bl( unsigned char f_startRegisterAddr_ui8, const unsigned char* const f_byteStreamToWrite_pui8, unsigned int f_numOfBytes_ui32 )
{
    bc44:	e92d4800 	push	{fp, lr}
    bc48:	e28db004 	add	fp, sp, #4
    bc4c:	e24dd028 	sub	sp, sp, #40	; 0x28
    bc50:	e1a03000 	mov	r3, r0
    bc54:	e50b1024 	str	r1, [fp, #-36]	; 0x24
    bc58:	e50b2028 	str	r2, [fp, #-40]	; 0x28
    bc5c:	e54b301d 	strb	r3, [fp, #-29]
	unsigned int	l_writeSucceeded_bl 	= M_HAL_ACCMAG_SUCCESS_BL; 	// success state as default
    bc60:	e3a03000 	mov	r3, #0
    bc64:	e50b3008 	str	r3, [fp, #-8]
	unsigned char 	l_bufCtr_ui8			= 0;						// loop counter to assemble payload and register address
    bc68:	e3a03000 	mov	r3, #0
    bc6c:	e54b3009 	strb	r3, [fp, #-9]
	/*
	 * - ensure at least one data byte to write
	 * - prevent a buffer overflow of l_byteStreamBuffer_rgXui8
	 *   --> payload data bytes + register address (subaddress)
	 */
	if ( 		(f_numOfBytes_ui32 < 1)
    bc70:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    bc74:	e3530000 	cmp	r3, #0
    bc78:	0a000002 	beq	bc88 <l_writeI2cByteStream_bl+0x44>
			||  (f_numOfBytes_ui32 > M_HAL_ACCMAG_WRITE_BYTESTREAM_BUFFER_SIZE_UI8-1) )
    bc7c:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    bc80:	e353000b 	cmp	r3, #11
    bc84:	9a000001 	bls	bc90 <l_writeI2cByteStream_bl+0x4c>
	{
		return M_HAL_ACCMAG_FAILED_BL;
    bc88:	e3a03001 	mov	r3, #1
    bc8c:	ea000026 	b	bd2c <l_writeI2cByteStream_bl+0xe8>
	 *     -> LSM303D will auto-increment the register address for each byte
	 *        of data
	 * (2) copy data to write to local buffer, start at second byte position
	 *     (first byte position is the register address)
	 */
	l_byteStreamBuffer_rgXui8[0] = f_startRegisterAddr_ui8 | 0b10000000;
    bc90:	e55b301d 	ldrb	r3, [fp, #-29]
    bc94:	e1e03c83 	mvn	r3, r3, lsl #25
    bc98:	e1e03ca3 	mvn	r3, r3, lsr #25
    bc9c:	e6ef3073 	uxtb	r3, r3
    bca0:	e54b3018 	strb	r3, [fp, #-24]
	for(l_bufCtr_ui8=0; l_bufCtr_ui8 < f_numOfBytes_ui32; l_bufCtr_ui8++)
    bca4:	e3a03000 	mov	r3, #0
    bca8:	e54b3009 	strb	r3, [fp, #-9]
    bcac:	ea00000d 	b	bce8 <l_writeI2cByteStream_bl+0xa4>
	{
		l_byteStreamBuffer_rgXui8[l_bufCtr_ui8+1] = f_byteStreamToWrite_pui8[l_bufCtr_ui8];
    bcb0:	e55b3009 	ldrb	r3, [fp, #-9]
    bcb4:	e2831001 	add	r1, r3, #1
    bcb8:	e55b3009 	ldrb	r3, [fp, #-9]
    bcbc:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
    bcc0:	e0823003 	add	r3, r2, r3
    bcc4:	e5d32000 	ldrb	r2, [r3]
    bcc8:	e3e03013 	mvn	r3, #19
    bccc:	e24b0004 	sub	r0, fp, #4
    bcd0:	e0801001 	add	r1, r0, r1
    bcd4:	e0813003 	add	r3, r1, r3
    bcd8:	e5c32000 	strb	r2, [r3]
	 *        of data
	 * (2) copy data to write to local buffer, start at second byte position
	 *     (first byte position is the register address)
	 */
	l_byteStreamBuffer_rgXui8[0] = f_startRegisterAddr_ui8 | 0b10000000;
	for(l_bufCtr_ui8=0; l_bufCtr_ui8 < f_numOfBytes_ui32; l_bufCtr_ui8++)
    bcdc:	e55b3009 	ldrb	r3, [fp, #-9]
    bce0:	e2833001 	add	r3, r3, #1
    bce4:	e54b3009 	strb	r3, [fp, #-9]
    bce8:	e55b2009 	ldrb	r2, [fp, #-9]
    bcec:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    bcf0:	e1520003 	cmp	r2, r3
    bcf4:	3affffed 	bcc	bcb0 <l_writeI2cByteStream_bl+0x6c>
	{
		l_byteStreamBuffer_rgXui8[l_bufCtr_ui8+1] = f_byteStreamToWrite_pui8[l_bufCtr_ui8];
	}

	//write register to I2C
	if ( g_lldI2c_WriteI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, l_byteStreamBuffer_rgXui8, f_numOfBytes_ui32 + 1) != M_HAL_ACCMAG_SUCCESS_BL )
    bcf8:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    bcfc:	e2833001 	add	r3, r3, #1
    bd00:	e24b2018 	sub	r2, fp, #24
    bd04:	e3a0001e 	mov	r0, #30
    bd08:	e1a01002 	mov	r1, r2
    bd0c:	e1a02003 	mov	r2, r3
    bd10:	eb000532 	bl	d1e0 <g_lldI2c_WriteI2c_bl>
    bd14:	e1a03000 	mov	r3, r0
    bd18:	e3530000 	cmp	r3, #0
    bd1c:	0a000001 	beq	bd28 <l_writeI2cByteStream_bl+0xe4>
	{
		// error in I2C access
		l_writeSucceeded_bl = M_HAL_ACCMAG_FAILED_BL;
    bd20:	e3a03001 	mov	r3, #1
    bd24:	e50b3008 	str	r3, [fp, #-8]
	}

	return l_writeSucceeded_bl;
    bd28:	e51b3008 	ldr	r3, [fp, #-8]
}
    bd2c:	e1a00003 	mov	r0, r3
    bd30:	e24bd004 	sub	sp, fp, #4
    bd34:	e8bd8800 	pop	{fp, pc}

0000bd38 <l_twoCompOf16Bit_ui16>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline signed short l_twoCompOf16Bit_ui16( unsigned char f_lsb_ui8, unsigned char f_msb_ui8 )
{
    bd38:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    bd3c:	e28db000 	add	fp, sp, #0
    bd40:	e24dd014 	sub	sp, sp, #20
    bd44:	e1a02000 	mov	r2, r0
    bd48:	e1a03001 	mov	r3, r1
    bd4c:	e54b200d 	strb	r2, [fp, #-13]
    bd50:	e54b300e 	strb	r3, [fp, #-14]
	signed short	l_compOfTwo_ui16 = 0; //init variable with zeros
    bd54:	e3a03000 	mov	r3, #0
    bd58:	e14b30b6 	strh	r3, [fp, #-6]
	 * 2. invert 16bit
	 * 3. add 1 to 16bit value
	 * 4. mask only 16bit range (to avoid overflows)
	 * --> conversion of two's complement
	 */
	l_compOfTwo_ui16 = (signed short)( ( ~((int)(f_msb_ui8 << 8) + (int)(f_lsb_ui8)) + (int)1 ) & (int)0xFFFF );
    bd5c:	e55b300e 	ldrb	r3, [fp, #-14]
    bd60:	e6ff3073 	uxth	r3, r3
    bd64:	e1a03403 	lsl	r3, r3, #8
    bd68:	e6ff2073 	uxth	r2, r3
    bd6c:	e55b300d 	ldrb	r3, [fp, #-13]
    bd70:	e6ff3073 	uxth	r3, r3
    bd74:	e0823003 	add	r3, r2, r3
    bd78:	e6ff3073 	uxth	r3, r3
    bd7c:	e2633000 	rsb	r3, r3, #0
    bd80:	e6ff3073 	uxth	r3, r3
    bd84:	e14b30b6 	strh	r3, [fp, #-6]

	return l_compOfTwo_ui16;
    bd88:	e15b30b6 	ldrh	r3, [fp, #-6]
    bd8c:	e6bf3073 	sxth	r3, r3
}
    bd90:	e1a00003 	mov	r0, r3
    bd94:	e24bd000 	sub	sp, fp, #0
    bd98:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    bd9c:	e12fff1e 	bx	lr

0000bda0 <l_convertMagRawToSIUnit_f64>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline double l_convertMagRawToSIUnit_f64( signed short f_rawMagVal_i16, unsigned char f_scalingValueGauss_ui8 )
{
    bda0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    bda4:	e28db000 	add	fp, sp, #0
    bda8:	e24dd01c 	sub	sp, sp, #28
    bdac:	e1a02000 	mov	r2, r0
    bdb0:	e1a03001 	mov	r3, r1
    bdb4:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
    bdb8:	e54b3017 	strb	r3, [fp, #-23]
	double			l_outputValue_f64 = 0;
    bdbc:	e3a02000 	mov	r2, #0
    bdc0:	e3a03000 	mov	r3, #0
    bdc4:	e14b20fc 	strd	r2, [fp, #-12]
	const double	l_gaussToSI_f64 = 0.1E-3;	//1Gauss = 0.1mT = 0.1*10^(-3)T
    bdc8:	e59f2060 	ldr	r2, [pc, #96]	; be30 <l_convertMagRawToSIUnit_f64+0x90>
    bdcc:	e59f3060 	ldr	r3, [pc, #96]	; be34 <l_convertMagRawToSIUnit_f64+0x94>
    bdd0:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

	// unitless [-1,1]
	l_outputValue_f64 = (double)f_rawMagVal_i16 / (double)SHRT_MAX;
    bdd4:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
    bdd8:	ee053a90 	vmov	s11, r3
    bddc:	eeb86be5 	vcvt.f64.s32	d6, s11
    bde0:	ed9f7b10 	vldr	d7, [pc, #64]	; be28 <l_convertMagRawToSIUnit_f64+0x88>
    bde4:	ee867b07 	vdiv.f64	d7, d6, d7
    bde8:	ed0b7b03 	vstr	d7, [fp, #-12]

	// Units: 1 * T*Gauss^(-1) * Gauss = m*s^(-2)
	l_outputValue_f64 = l_outputValue_f64 * l_gaussToSI_f64 * (double)f_scalingValueGauss_ui8;
    bdec:	ed1b6b03 	vldr	d6, [fp, #-12]
    bdf0:	ed1b7b05 	vldr	d7, [fp, #-20]	; 0xffffffec
    bdf4:	ee266b07 	vmul.f64	d6, d6, d7
    bdf8:	e55b3017 	ldrb	r3, [fp, #-23]
    bdfc:	ee053a90 	vmov	s11, r3
    be00:	eeb87b65 	vcvt.f64.u32	d7, s11
    be04:	ee267b07 	vmul.f64	d7, d6, d7
    be08:	ed0b7b03 	vstr	d7, [fp, #-12]

	return l_outputValue_f64;	//Tesla
    be0c:	e14b20dc 	ldrd	r2, [fp, #-12]
    be10:	ec432b17 	vmov	d7, r2, r3
}
    be14:	eeb00b47 	vmov.f64	d0, d7
    be18:	e24bd000 	sub	sp, fp, #0
    be1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    be20:	e12fff1e 	bx	lr
    be24:	e1a00000 	nop			; (mov r0, r0)
    be28:	00000000 	.word	0x00000000
    be2c:	40dfffc0 	.word	0x40dfffc0
    be30:	eb1c432d 	.word	0xeb1c432d
    be34:	3f1a36e2 	.word	0x3f1a36e2

0000be38 <l_convertAccRawToSIUnit_f64>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline double l_convertAccRawToSIUnit_f64( signed short f_rawAccVal_i16, unsigned char f_scalingValueG_ui8 )
{
    be38:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    be3c:	e28db000 	add	fp, sp, #0
    be40:	e24dd01c 	sub	sp, sp, #28
    be44:	e1a02000 	mov	r2, r0
    be48:	e1a03001 	mov	r3, r1
    be4c:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
    be50:	e54b3017 	strb	r3, [fp, #-23]
	double			l_outputValue_f64 	= 0;
    be54:	e3a02000 	mov	r2, #0
    be58:	e3a03000 	mov	r3, #0
    be5c:	e14b20fc 	strd	r2, [fp, #-12]
	const double	l_gravityConst_f64 	= 9.81; // m*(s^-2) per G
    be60:	e59f2060 	ldr	r2, [pc, #96]	; bec8 <l_convertAccRawToSIUnit_f64+0x90>
    be64:	e59f3060 	ldr	r3, [pc, #96]	; becc <l_convertAccRawToSIUnit_f64+0x94>
    be68:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

	// unitless [-1,1]
	l_outputValue_f64 = (double)f_scalingValueG_ui8 * (double)f_rawAccVal_i16 / (double)SHRT_MAX;
    be6c:	e55b3017 	ldrb	r3, [fp, #-23]
    be70:	ee053a90 	vmov	s11, r3
    be74:	eeb86b65 	vcvt.f64.u32	d6, s11
    be78:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
    be7c:	ee053a90 	vmov	s11, r3
    be80:	eeb87be5 	vcvt.f64.s32	d7, s11
    be84:	ee266b07 	vmul.f64	d6, d6, d7
    be88:	ed9f7b0c 	vldr	d7, [pc, #48]	; bec0 <l_convertAccRawToSIUnit_f64+0x88>
    be8c:	ee867b07 	vdiv.f64	d7, d6, d7
    be90:	ed0b7b03 	vstr	d7, [fp, #-12]

	// Units: 1 * m*s^(-2)*G^(-1) * G = m*s^(-2)
	l_outputValue_f64 = l_outputValue_f64 * l_gravityConst_f64;
    be94:	ed1b6b03 	vldr	d6, [fp, #-12]
    be98:	ed1b7b05 	vldr	d7, [fp, #-20]	; 0xffffffec
    be9c:	ee267b07 	vmul.f64	d7, d6, d7
    bea0:	ed0b7b03 	vstr	d7, [fp, #-12]

	return l_outputValue_f64;  // m*(s^-2)
    bea4:	e14b20dc 	ldrd	r2, [fp, #-12]
    bea8:	ec432b17 	vmov	d7, r2, r3
}
    beac:	eeb00b47 	vmov.f64	d0, d7
    beb0:	e24bd000 	sub	sp, fp, #0
    beb4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    beb8:	e12fff1e 	bx	lr
    bebc:	e1a00000 	nop			; (mov r0, r0)
    bec0:	00000000 	.word	0x00000000
    bec4:	40dfffc0 	.word	0x40dfffc0
    bec8:	51eb851f 	.word	0x51eb851f
    becc:	40239eb8 	.word	0x40239eb8

0000bed0 <l_updateSensorState_vd>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline unsigned int l_updateSensorState_vd( halAccmag_sensorSelect f_sensor_en )
{
    bed0:	e92d4800 	push	{fp, lr}
    bed4:	e28db004 	add	fp, sp, #4
    bed8:	e24dd048 	sub	sp, sp, #72	; 0x48
    bedc:	e50b0048 	str	r0, [fp, #-72]	; 0x48
	halAccmag_3dDoubleVector	l_accBuffer_st;
	halAccmag_3dDoubleVector	l_magBuffer_st;
	unsigned char				l_readBuffer_rg6ui8[6];
	signed short				l_tempComponent_i16 = 0;
    bee0:	e3a03000 	mov	r3, #0
    bee4:	e14b30ba 	strh	r3, [fp, #-10]
	unsigned int				l_successState_bl = M_HAL_ACCMAG_SUCCESS_BL;
    bee8:	e3a03000 	mov	r3, #0
    beec:	e50b3008 	str	r3, [fp, #-8]

	//init local data buffers with current values
	l_accBuffer_st = m_halAccmag_sensorState_st.acc;
    bef0:	e59f3238 	ldr	r3, [pc, #568]	; c130 <l_updateSensorState_vd+0x260>
    bef4:	e24bc024 	sub	ip, fp, #36	; 0x24
    bef8:	e1a0e003 	mov	lr, r3
    befc:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    bf00:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    bf04:	e89e0003 	ldm	lr, {r0, r1}
    bf08:	e88c0003 	stm	ip, {r0, r1}
	l_magBuffer_st = m_halAccmag_sensorState_st.mag;
    bf0c:	e59f321c 	ldr	r3, [pc, #540]	; c130 <l_updateSensorState_vd+0x260>
    bf10:	e24bc03c 	sub	ip, fp, #60	; 0x3c
    bf14:	e283e018 	add	lr, r3, #24
    bf18:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    bf1c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    bf20:	e89e0003 	ldm	lr, {r0, r1}
    bf24:	e88c0003 	stm	ip, {r0, r1}
	 *   (Byte 3) Y-Component, LSB
	 *   (Byte 4) Y-Component, MSB
	 *   (Byte 5) Z-Component, LSB
	 *   (Byte 6) Z-Component, MSB
	 */
	if ( (f_sensor_en == SENSOR_ACC_EN) || (f_sensor_en == SENSOR_BOTH_EN) )
    bf28:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    bf2c:	e3530000 	cmp	r3, #0
    bf30:	0a000002 	beq	bf40 <l_updateSensorState_vd+0x70>
    bf34:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    bf38:	e3530002 	cmp	r3, #2
    bf3c:	1a000031 	bne	c008 <l_updateSensorState_vd+0x138>
	{
		if ( l_readI2cByteStream_bl(M_HAL_ACCMAG_OUT_X_L_A_UI8,l_readBuffer_rg6ui8, 6) == M_HAL_ACCMAG_SUCCESS_BL )
    bf40:	e24b3044 	sub	r3, fp, #68	; 0x44
    bf44:	e3a00028 	mov	r0, #40	; 0x28
    bf48:	e1a01003 	mov	r1, r3
    bf4c:	e3a02006 	mov	r2, #6
    bf50:	ebffff11 	bl	bb9c <l_readI2cByteStream_bl>
    bf54:	e1a03000 	mov	r3, r0
    bf58:	e3530000 	cmp	r3, #0
    bf5c:	1a000027 	bne	c000 <l_updateSensorState_vd+0x130>
		{
			// x-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[0], l_readBuffer_rg6ui8[1]);
    bf60:	e55b2044 	ldrb	r2, [fp, #-68]	; 0x44
    bf64:	e55b3043 	ldrb	r3, [fp, #-67]	; 0x43
    bf68:	e1a00002 	mov	r0, r2
    bf6c:	e1a01003 	mov	r1, r3
    bf70:	ebffff70 	bl	bd38 <l_twoCompOf16Bit_ui16>
    bf74:	e1a03000 	mov	r3, r0
    bf78:	e14b30ba 	strh	r3, [fp, #-10]
			l_accBuffer_st.x_f64 = l_convertAccRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_ACCSCALE_UI8 );
    bf7c:	e15b30fa 	ldrsh	r3, [fp, #-10]
    bf80:	e1a00003 	mov	r0, r3
    bf84:	e3a01008 	mov	r1, #8
    bf88:	ebffffaa 	bl	be38 <l_convertAccRawToSIUnit_f64>
    bf8c:	eeb07b40 	vmov.f64	d7, d0
    bf90:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc

			// y-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[2], l_readBuffer_rg6ui8[3]);
    bf94:	e55b2042 	ldrb	r2, [fp, #-66]	; 0x42
    bf98:	e55b3041 	ldrb	r3, [fp, #-65]	; 0x41
    bf9c:	e1a00002 	mov	r0, r2
    bfa0:	e1a01003 	mov	r1, r3
    bfa4:	ebffff63 	bl	bd38 <l_twoCompOf16Bit_ui16>
    bfa8:	e1a03000 	mov	r3, r0
    bfac:	e14b30ba 	strh	r3, [fp, #-10]
			l_accBuffer_st.y_f64 = l_convertAccRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_ACCSCALE_UI8 );
    bfb0:	e15b30fa 	ldrsh	r3, [fp, #-10]
    bfb4:	e1a00003 	mov	r0, r3
    bfb8:	e3a01008 	mov	r1, #8
    bfbc:	ebffff9d 	bl	be38 <l_convertAccRawToSIUnit_f64>
    bfc0:	eeb07b40 	vmov.f64	d7, d0
    bfc4:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4

			// z-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[4], l_readBuffer_rg6ui8[5]);
    bfc8:	e55b2040 	ldrb	r2, [fp, #-64]	; 0x40
    bfcc:	e55b303f 	ldrb	r3, [fp, #-63]	; 0x3f
    bfd0:	e1a00002 	mov	r0, r2
    bfd4:	e1a01003 	mov	r1, r3
    bfd8:	ebffff56 	bl	bd38 <l_twoCompOf16Bit_ui16>
    bfdc:	e1a03000 	mov	r3, r0
    bfe0:	e14b30ba 	strh	r3, [fp, #-10]
			l_accBuffer_st.z_f64 = l_convertAccRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_ACCSCALE_UI8 );
    bfe4:	e15b30fa 	ldrsh	r3, [fp, #-10]
    bfe8:	e1a00003 	mov	r0, r3
    bfec:	e3a01008 	mov	r1, #8
    bff0:	ebffff90 	bl	be38 <l_convertAccRawToSIUnit_f64>
    bff4:	eeb07b40 	vmov.f64	d7, d0
    bff8:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
    bffc:	ea000001 	b	c008 <l_updateSensorState_vd+0x138>
		}else{
			l_successState_bl = M_HAL_ACCMAG_FAILED_BL;
    c000:	e3a03001 	mov	r3, #1
    c004:	e50b3008 	str	r3, [fp, #-8]
	 *   (Byte 3) Y-Component, LSB
	 *   (Byte 4) Y-Component, MSB
	 *   (Byte 5) Z-Component, LSB
	 *   (Byte 6) Z-Component, MSB
	 */
	if ( (f_sensor_en == SENSOR_MAG_EN) || (f_sensor_en == SENSOR_BOTH_EN) )
    c008:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    c00c:	e3530001 	cmp	r3, #1
    c010:	0a000002 	beq	c020 <l_updateSensorState_vd+0x150>
    c014:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    c018:	e3530002 	cmp	r3, #2
    c01c:	1a000031 	bne	c0e8 <l_updateSensorState_vd+0x218>
	{
		if ( l_readI2cByteStream_bl(M_HAL_ACCMAG_OUT_X_L_M_UI8,l_readBuffer_rg6ui8, 6) == M_HAL_ACCMAG_SUCCESS_BL )
    c020:	e24b3044 	sub	r3, fp, #68	; 0x44
    c024:	e3a00008 	mov	r0, #8
    c028:	e1a01003 	mov	r1, r3
    c02c:	e3a02006 	mov	r2, #6
    c030:	ebfffed9 	bl	bb9c <l_readI2cByteStream_bl>
    c034:	e1a03000 	mov	r3, r0
    c038:	e3530000 	cmp	r3, #0
    c03c:	1a000027 	bne	c0e0 <l_updateSensorState_vd+0x210>
		{
			// x-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[0], l_readBuffer_rg6ui8[1]);
    c040:	e55b2044 	ldrb	r2, [fp, #-68]	; 0x44
    c044:	e55b3043 	ldrb	r3, [fp, #-67]	; 0x43
    c048:	e1a00002 	mov	r0, r2
    c04c:	e1a01003 	mov	r1, r3
    c050:	ebffff38 	bl	bd38 <l_twoCompOf16Bit_ui16>
    c054:	e1a03000 	mov	r3, r0
    c058:	e14b30ba 	strh	r3, [fp, #-10]
			l_magBuffer_st.x_f64 = l_convertMagRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_MAGSCALE_UI8 );
    c05c:	e15b30fa 	ldrsh	r3, [fp, #-10]
    c060:	e1a00003 	mov	r0, r3
    c064:	e3a01004 	mov	r1, #4
    c068:	ebffff4c 	bl	bda0 <l_convertMagRawToSIUnit_f64>
    c06c:	eeb07b40 	vmov.f64	d7, d0
    c070:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4

			// y-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[2], l_readBuffer_rg6ui8[3]);
    c074:	e55b2042 	ldrb	r2, [fp, #-66]	; 0x42
    c078:	e55b3041 	ldrb	r3, [fp, #-65]	; 0x41
    c07c:	e1a00002 	mov	r0, r2
    c080:	e1a01003 	mov	r1, r3
    c084:	ebffff2b 	bl	bd38 <l_twoCompOf16Bit_ui16>
    c088:	e1a03000 	mov	r3, r0
    c08c:	e14b30ba 	strh	r3, [fp, #-10]
			l_magBuffer_st.y_f64 = l_convertMagRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_MAGSCALE_UI8 );
    c090:	e15b30fa 	ldrsh	r3, [fp, #-10]
    c094:	e1a00003 	mov	r0, r3
    c098:	e3a01004 	mov	r1, #4
    c09c:	ebffff3f 	bl	bda0 <l_convertMagRawToSIUnit_f64>
    c0a0:	eeb07b40 	vmov.f64	d7, d0
    c0a4:	ed0b7b0d 	vstr	d7, [fp, #-52]	; 0xffffffcc

			// z-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[4], l_readBuffer_rg6ui8[5]);
    c0a8:	e55b2040 	ldrb	r2, [fp, #-64]	; 0x40
    c0ac:	e55b303f 	ldrb	r3, [fp, #-63]	; 0x3f
    c0b0:	e1a00002 	mov	r0, r2
    c0b4:	e1a01003 	mov	r1, r3
    c0b8:	ebffff1e 	bl	bd38 <l_twoCompOf16Bit_ui16>
    c0bc:	e1a03000 	mov	r3, r0
    c0c0:	e14b30ba 	strh	r3, [fp, #-10]
			l_magBuffer_st.z_f64 = l_convertMagRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_MAGSCALE_UI8 );
    c0c4:	e15b30fa 	ldrsh	r3, [fp, #-10]
    c0c8:	e1a00003 	mov	r0, r3
    c0cc:	e3a01004 	mov	r1, #4
    c0d0:	ebffff32 	bl	bda0 <l_convertMagRawToSIUnit_f64>
    c0d4:	eeb07b40 	vmov.f64	d7, d0
    c0d8:	ed0b7b0b 	vstr	d7, [fp, #-44]	; 0xffffffd4
    c0dc:	ea000001 	b	c0e8 <l_updateSensorState_vd+0x218>
		}else{
			l_successState_bl = M_HAL_ACCMAG_FAILED_BL;
    c0e0:	e3a03001 	mov	r3, #1
    c0e4:	e50b3008 	str	r3, [fp, #-8]
		}
	}

	// update sensor state storage values
	m_halAccmag_sensorState_st.acc = l_accBuffer_st;
    c0e8:	e59f3040 	ldr	r3, [pc, #64]	; c130 <l_updateSensorState_vd+0x260>
    c0ec:	e1a0c003 	mov	ip, r3
    c0f0:	e24be024 	sub	lr, fp, #36	; 0x24
    c0f4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    c0f8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    c0fc:	e89e0003 	ldm	lr, {r0, r1}
    c100:	e88c0003 	stm	ip, {r0, r1}
	m_halAccmag_sensorState_st.mag = l_magBuffer_st;
    c104:	e59f3024 	ldr	r3, [pc, #36]	; c130 <l_updateSensorState_vd+0x260>
    c108:	e283c018 	add	ip, r3, #24
    c10c:	e24be03c 	sub	lr, fp, #60	; 0x3c
    c110:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    c114:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    c118:	e89e0003 	ldm	lr, {r0, r1}
    c11c:	e88c0003 	stm	ip, {r0, r1}

	return l_successState_bl;
    c120:	e51b3008 	ldr	r3, [fp, #-8]
}
    c124:	e1a00003 	mov	r0, r3
    c128:	e24bd004 	sub	sp, fp, #4
    c12c:	e8bd8800 	pop	{fp, pc}
    c130:	00019820 	.word	0x00019820

0000c134 <g_halAccmag_initSensor_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_initSensor_bl(void)
{
    c134:	e92d4800 	push	{fp, lr}
    c138:	e28db004 	add	fp, sp, #4
    c13c:	e24dd008 	sub	sp, sp, #8
	unsigned char l_configRegisters_rg8ui8[8];	//buffer for 8 control register bytes

	//Identify sensor
	if ( l_readI2cByte_ui8( M_HAL_ACCMAG_WHO_AM_I_UI8 ) != M_HAL_ACCMAG_WHO_AM_I_PATTERN_UI8 )
    c140:	e3a0000f 	mov	r0, #15
    c144:	ebfffe6f 	bl	bb08 <l_readI2cByte_ui8>
    c148:	e1a03000 	mov	r3, r0
    c14c:	e3530049 	cmp	r3, #73	; 0x49
    c150:	0a000001 	beq	c15c <g_halAccmag_initSensor_bl+0x28>
	{
		// sensor could not be identified --> abort initialization
		return M_HAL_ACCMAG_FAILED_BL;
    c154:	e3a03001 	mov	r3, #1
    c158:	ea00001a 	b	c1c8 <g_halAccmag_initSensor_bl+0x94>

	/*
	 * ACCELEROMETER
	 */
	// CTRL0: no FIFO (default values)
	l_configRegisters_rg8ui8[0] = 0b00000000;
    c15c:	e3a03000 	mov	r3, #0
    c160:	e54b300c 	strb	r3, [fp, #-12]

	// CTRL1: Enable accelerometer, 800Hz sampling
	l_configRegisters_rg8ui8[1] = (		M_HAL_ACCMAG_CTRL1_MASK_AXEN_UI8
    c164:	e3e03068 	mvn	r3, #104	; 0x68
    c168:	e54b300b 	strb	r3, [fp, #-11]
			| 	M_HAL_ACCMAG_CTRL1_MASK_AYEN_UI8
			|	M_HAL_ACCMAG_CTRL1_MASK_AZEN_UI8
			| 	M_HAL_ACCMAG_CTRL1_MASK_ACC_RATE_800HZ_UI8);

	// CTRL2 register (default values): Set scale +/-8G (accelerometer) & Anti-Alias-Filter ~200Hz
	l_configRegisters_rg8ui8[2] = ( 	M_HAL_ACCMAG_CTRL2_MASK_ACC_SCALE_8G_UI8
    c16c:	e3a03058 	mov	r3, #88	; 0x58
    c170:	e54b300a 	strb	r3, [fp, #-10]
									| 	M_HAL_ACCMAG_CTRL2_MASK_ACC_BANDWIDTH_194HZ_UI8 );

	// CTRL3 register (default values): Disable all interrupts
	l_configRegisters_rg8ui8[3] = 0b00000000;
    c174:	e3a03000 	mov	r3, #0
    c178:	e54b3009 	strb	r3, [fp, #-9]

	//CTRL4 register (default values)
	l_configRegisters_rg8ui8[4] = 0b00000000;
    c17c:	e3a03000 	mov	r3, #0
    c180:	e54b3008 	strb	r3, [fp, #-8]

	/*
	 * MAGNETOMETER
	 */
	// CTRL5 register: Disable Temp.-sensor, set high-resolution, set 100Hz data rate
	l_configRegisters_rg8ui8[5] = (		M_HAL_ACCMAG_CTRL5_MASK_MAG_RES_HIGH_UI8
    c184:	e3a03074 	mov	r3, #116	; 0x74
    c188:	e54b3007 	strb	r3, [fp, #-7]
			| 	M_HAL_ACCMAG_CTRL5_MASK_MAG_RATE_100HZ_UI8 );

	// CTRL6 register: set scale +/-0.4mT
	l_configRegisters_rg8ui8[6] = M_HAL_ACCMAG_CTRL6_MASK_MAG_SCALE_4GAUSS_UI8;
    c18c:	e3a03040 	mov	r3, #64	; 0x40
    c190:	e54b3006 	strb	r3, [fp, #-6]

	// CTRL7 register (default values): set continuous-conversion mode (magnetometer)
	l_configRegisters_rg8ui8[7] = M_HAL_ACCMAG_CTRL7_MASK_MAG_SENSMODE_CONTINOUS_UI8;
    c194:	e3a03000 	mov	r3, #0
    c198:	e54b3005 	strb	r3, [fp, #-5]


	// send config
	if ( l_writeI2cByteStream_bl(M_HAL_ACCMAG_CTRL0_UI8, l_configRegisters_rg8ui8, sizeof(l_configRegisters_rg8ui8) ) == M_HAL_ACCMAG_FAILED_BL )
    c19c:	e24b300c 	sub	r3, fp, #12
    c1a0:	e3a0001f 	mov	r0, #31
    c1a4:	e1a01003 	mov	r1, r3
    c1a8:	e3a02008 	mov	r2, #8
    c1ac:	ebfffea4 	bl	bc44 <l_writeI2cByteStream_bl>
    c1b0:	e1a03000 	mov	r3, r0
    c1b4:	e3530001 	cmp	r3, #1
    c1b8:	1a000001 	bne	c1c4 <g_halAccmag_initSensor_bl+0x90>
	{
		// setting register CTRL1 failed
		return M_HAL_ACCMAG_FAILED_BL;
    c1bc:	e3a03001 	mov	r3, #1
    c1c0:	ea000000 	b	c1c8 <g_halAccmag_initSensor_bl+0x94>
	}

	return M_HAL_ACCMAG_SUCCESS_BL;
    c1c4:	e3a03000 	mov	r3, #0
}
    c1c8:	e1a00003 	mov	r0, r3
    c1cc:	e24bd004 	sub	sp, fp, #4
    c1d0:	e8bd8800 	pop	{fp, pc}

0000c1d4 <g_halAccmag_triggerAccUpdate_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_triggerAccUpdate_bl( void )
{
    c1d4:	e92d4800 	push	{fp, lr}
    c1d8:	e28db004 	add	fp, sp, #4
	return l_updateSensorState_vd(SENSOR_ACC_EN);
    c1dc:	e3a00000 	mov	r0, #0
    c1e0:	ebffff3a 	bl	bed0 <l_updateSensorState_vd>
    c1e4:	e1a03000 	mov	r3, r0
}
    c1e8:	e1a00003 	mov	r0, r3
    c1ec:	e8bd8800 	pop	{fp, pc}

0000c1f0 <g_halAccmag_triggerMagUpdate_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_triggerMagUpdate_bl( void )
{
    c1f0:	e92d4800 	push	{fp, lr}
    c1f4:	e28db004 	add	fp, sp, #4
	return l_updateSensorState_vd(SENSOR_MAG_EN);
    c1f8:	e3a00001 	mov	r0, #1
    c1fc:	ebffff33 	bl	bed0 <l_updateSensorState_vd>
    c200:	e1a03000 	mov	r3, r0
}
    c204:	e1a00003 	mov	r0, r3
    c208:	e8bd8800 	pop	{fp, pc}

0000c20c <g_halAccmag_triggerFullUpdate_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_triggerFullUpdate_bl( void )
{
    c20c:	e92d4800 	push	{fp, lr}
    c210:	e28db004 	add	fp, sp, #4
	return l_updateSensorState_vd(SENSOR_BOTH_EN);
    c214:	e3a00002 	mov	r0, #2
    c218:	ebffff2c 	bl	bed0 <l_updateSensorState_vd>
    c21c:	e1a03000 	mov	r3, r0
}
    c220:	e1a00003 	mov	r0, r3
    c224:	e8bd8800 	pop	{fp, pc}

0000c228 <g_halAccmag_getAccVector_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halAccmag_3dDoubleVector g_halAccmag_getAccVector_st( void )
{
    c228:	e92d4830 	push	{r4, r5, fp, lr}
    c22c:	e28db00c 	add	fp, sp, #12
    c230:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_halAccmag_sensorState_st.acc;
    c234:	e59f3040 	ldr	r3, [pc, #64]	; c27c <g_halAccmag_getAccVector_st+0x54>
    c238:	e24bc024 	sub	ip, fp, #36	; 0x24
    c23c:	e1a0e003 	mov	lr, r3
    c240:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    c244:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    c248:	e89e0003 	ldm	lr, {r0, r1}
    c24c:	e88c0003 	stm	ip, {r0, r1}
    c250:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    c254:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    c258:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    c25c:	ec454b15 	vmov	d5, r4, r5
    c260:	ec410b16 	vmov	d6, r0, r1
    c264:	ec432b17 	vmov	d7, r2, r3
}
    c268:	eeb00b45 	vmov.f64	d0, d5
    c26c:	eeb01b46 	vmov.f64	d1, d6
    c270:	eeb02b47 	vmov.f64	d2, d7
    c274:	e24bd00c 	sub	sp, fp, #12
    c278:	e8bd8830 	pop	{r4, r5, fp, pc}
    c27c:	00019820 	.word	0x00019820

0000c280 <g_halAccmag_getMagVector_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halAccmag_3dDoubleVector g_halAccmag_getMagVector_st( void )
{
    c280:	e92d4830 	push	{r4, r5, fp, lr}
    c284:	e28db00c 	add	fp, sp, #12
    c288:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_halAccmag_sensorState_st.mag;
    c28c:	e59f3040 	ldr	r3, [pc, #64]	; c2d4 <g_halAccmag_getMagVector_st+0x54>
    c290:	e24bc024 	sub	ip, fp, #36	; 0x24
    c294:	e283e018 	add	lr, r3, #24
    c298:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    c29c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    c2a0:	e89e0003 	ldm	lr, {r0, r1}
    c2a4:	e88c0003 	stm	ip, {r0, r1}
    c2a8:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    c2ac:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    c2b0:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    c2b4:	ec454b15 	vmov	d5, r4, r5
    c2b8:	ec410b16 	vmov	d6, r0, r1
    c2bc:	ec432b17 	vmov	d7, r2, r3
}
    c2c0:	eeb00b45 	vmov.f64	d0, d5
    c2c4:	eeb01b46 	vmov.f64	d1, d6
    c2c8:	eeb02b47 	vmov.f64	d2, d7
    c2cc:	e24bd00c 	sub	sp, fp, #12
    c2d0:	e8bd8830 	pop	{r4, r5, fp, pc}
    c2d4:	00019820 	.word	0x00019820

0000c2d8 <g_halAccmag_getAccMagContainer_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halAccmag_dataContainer	g_halAccmag_getAccMagContainer_st( void )
{
    c2d8:	e92d4800 	push	{fp, lr}
    c2dc:	e28db004 	add	fp, sp, #4
    c2e0:	e24dd008 	sub	sp, sp, #8
    c2e4:	e50b0008 	str	r0, [fp, #-8]
	return m_halAccmag_sensorState_st;
    c2e8:	e51b2008 	ldr	r2, [fp, #-8]
    c2ec:	e59f3028 	ldr	r3, [pc, #40]	; c31c <g_halAccmag_getAccMagContainer_st+0x44>
    c2f0:	e1a0c002 	mov	ip, r2
    c2f4:	e1a0e003 	mov	lr, r3
    c2f8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    c2fc:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    c300:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    c304:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    c308:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
    c30c:	e88c000f 	stm	ip, {r0, r1, r2, r3}
}
    c310:	e51b0008 	ldr	r0, [fp, #-8]
    c314:	e24bd004 	sub	sp, fp, #4
    c318:	e8bd8800 	pop	{fp, pc}
    c31c:	00019820 	.word	0x00019820

0000c320 <g_halBaro_initBaro_i32>:
 * 2015/05/19 juscgs00:
 * - removed unused local variable 'l_ReadBuffer_ui8' (compiler warning)
 * \endinternal
 ********************************************************************** */
int g_halBaro_initBaro_i32(void)
{
    c320:	e92d4800 	push	{fp, lr}
    c324:	e28db004 	add	fp, sp, #4
	static unsigned char l_WriteBuffer_ui8[3];

	//RES_CONF(0x10)
	l_WriteBuffer_ui8[0]=M_HAL_BARO_SINGLE_FLAG_UI8 | M_HAL_BARO_RES_CONF_UI8;
    c328:	e59f3090 	ldr	r3, [pc, #144]	; c3c0 <g_halBaro_initBaro_i32+0xa0>
    c32c:	e3a02010 	mov	r2, #16
    c330:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]= M_HAL_BARO_TEMP_RES_CONF_128_UI8 | M_HAL_BARO_PRES_RES_CONF_512_UI8;
    c334:	e59f3084 	ldr	r3, [pc, #132]	; c3c0 <g_halBaro_initBaro_i32+0xa0>
    c338:	e3a0207a 	mov	r2, #122	; 0x7a
    c33c:	e5c32001 	strb	r2, [r3, #1]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
    c340:	e3a0005c 	mov	r0, #92	; 0x5c
    c344:	e59f1074 	ldr	r1, [pc, #116]	; c3c0 <g_halBaro_initBaro_i32+0xa0>
    c348:	e3a02002 	mov	r2, #2
    c34c:	eb0003a3 	bl	d1e0 <g_lldI2c_WriteI2c_bl>
    c350:	e1a03000 	mov	r3, r0
    c354:	e3530000 	cmp	r3, #0
    c358:	0a000001 	beq	c364 <g_halBaro_initBaro_i32+0x44>
	{return -1;}
    c35c:	e3e03000 	mvn	r3, #0
    c360:	ea000014 	b	c3b8 <g_halBaro_initBaro_i32+0x98>

	usleep(100000);
    c364:	e59f0058 	ldr	r0, [pc, #88]	; c3c4 <g_halBaro_initBaro_i32+0xa4>
    c368:	ebfff1ae 	bl	8a28 <_init+0xb0>

	//CTRL_REG1(0x20) = 0b11000100		setting Speed of Pressure to 25Hz and Temperature to 1Hz
										//REMARK: setting both Sensors to the same value did not work!!!
	//CTRL_REG2(0x21) = 0b10000000
	l_WriteBuffer_ui8[0]=M_HAL_BARO_MULTIPLE_FLAG_UI8 | M_HAL_BARO_CTRL_REG1_UI8;
    c36c:	e59f304c 	ldr	r3, [pc, #76]	; c3c0 <g_halBaro_initBaro_i32+0xa0>
    c370:	e3e0205f 	mvn	r2, #95	; 0x5f
    c374:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]=M_HAL_BARO_CTRL_REG1_PD_UI8|M_HAL_BARO_CTRL_REG1_DATARATE_P25HZ_T1HZ_UI8;
    c378:	e59f3040 	ldr	r3, [pc, #64]	; c3c0 <g_halBaro_initBaro_i32+0xa0>
    c37c:	e3e0203f 	mvn	r2, #63	; 0x3f
    c380:	e5c32001 	strb	r2, [r3, #1]
	l_WriteBuffer_ui8[2]=M_HAL_BARO_CTRL_REG2_BOOT_UI8;
    c384:	e59f3034 	ldr	r3, [pc, #52]	; c3c0 <g_halBaro_initBaro_i32+0xa0>
    c388:	e3e0207f 	mvn	r2, #127	; 0x7f
    c38c:	e5c32002 	strb	r2, [r3, #2]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
    c390:	e3a0005c 	mov	r0, #92	; 0x5c
    c394:	e59f1024 	ldr	r1, [pc, #36]	; c3c0 <g_halBaro_initBaro_i32+0xa0>
    c398:	e3a02003 	mov	r2, #3
    c39c:	eb00038f 	bl	d1e0 <g_lldI2c_WriteI2c_bl>
    c3a0:	e1a03000 	mov	r3, r0
    c3a4:	e3530000 	cmp	r3, #0
    c3a8:	0a000001 	beq	c3b4 <g_halBaro_initBaro_i32+0x94>
	{return -1;}
    c3ac:	e3e03000 	mvn	r3, #0
    c3b0:	ea000000 	b	c3b8 <g_halBaro_initBaro_i32+0x98>

	return 0;
    c3b4:	e3a03000 	mov	r3, #0
}
    c3b8:	e1a00003 	mov	r0, r3
    c3bc:	e8bd8800 	pop	{fp, pc}
    c3c0:	00019860 	.word	0x00019860
    c3c4:	000186a0 	.word	0x000186a0

0000c3c8 <g_halBaro_getPressure_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halBaro_getPressure_f64(void)
{
    c3c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    c3cc:	e28db000 	add	fp, sp, #0
	return m_pressure_f64;
    c3d0:	e59f3014 	ldr	r3, [pc, #20]	; c3ec <g_halBaro_getPressure_f64+0x24>
    c3d4:	e1c320d0 	ldrd	r2, [r3]
    c3d8:	ec432b17 	vmov	d7, r2, r3
}
    c3dc:	eeb00b47 	vmov.f64	d0, d7
    c3e0:	e24bd000 	sub	sp, fp, #0
    c3e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    c3e8:	e12fff1e 	bx	lr
    c3ec:	00019858 	.word	0x00019858

0000c3f0 <g_halBaro_getTemperature_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halBaro_getTemperature_f64(void)
{
    c3f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    c3f4:	e28db000 	add	fp, sp, #0
	return m_temperature_f64;
    c3f8:	e59f3014 	ldr	r3, [pc, #20]	; c414 <g_halBaro_getTemperature_f64+0x24>
    c3fc:	e1c320d0 	ldrd	r2, [r3]
    c400:	ec432b17 	vmov	d7, r2, r3
}
    c404:	eeb00b47 	vmov.f64	d0, d7
    c408:	e24bd000 	sub	sp, fp, #0
    c40c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    c410:	e12fff1e 	bx	lr
    c414:	00019850 	.word	0x00019850

0000c418 <g_halBaro_readPressureFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halBaro_readPressureFromI2C_i32(void)
{
    c418:	e92d4800 	push	{fp, lr}
    c41c:	e28db004 	add	fp, sp, #4
    c420:	e24dd010 	sub	sp, sp, #16
	unsigned char l_ReadBuffer_ui8[3]={0,0,0};
    c424:	e3a03000 	mov	r3, #0
    c428:	e54b300c 	strb	r3, [fp, #-12]
    c42c:	e3a03000 	mov	r3, #0
    c430:	e54b300b 	strb	r3, [fp, #-11]
    c434:	e3a03000 	mov	r3, #0
    c438:	e54b300a 	strb	r3, [fp, #-10]
	unsigned char l_rotatedReadBuffer_ui8[3]={0,0,0};
    c43c:	e3a03000 	mov	r3, #0
    c440:	e54b3010 	strb	r3, [fp, #-16]
    c444:	e3a03000 	mov	r3, #0
    c448:	e54b300f 	strb	r3, [fp, #-15]
    c44c:	e3a03000 	mov	r3, #0
    c450:	e54b300e 	strb	r3, [fp, #-14]
	unsigned char l_WriteBuffer_ui8[3];
	int l_countVariable_i32=0;
    c454:	e3a03000 	mov	r3, #0
    c458:	e50b3008 	str	r3, [fp, #-8]

	//maybe check STATUS_REG if new value is available

	//set SUB Address to Pressure register PRESS_OUT_XL and activate multiple read
	l_WriteBuffer_ui8[0]=M_HAL_BARO_MULTIPLE_FLAG_UI8 | M_HAL_BARO_PRESS_OUT_XL_UI8;
    c45c:	e3e03057 	mvn	r3, #87	; 0x57
    c460:	e54b3014 	strb	r3, [fp, #-20]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    c464:	e24b3014 	sub	r3, fp, #20
    c468:	e3a0005c 	mov	r0, #92	; 0x5c
    c46c:	e1a01003 	mov	r1, r3
    c470:	e3a02001 	mov	r2, #1
    c474:	eb000359 	bl	d1e0 <g_lldI2c_WriteI2c_bl>
    c478:	e1a03000 	mov	r3, r0
    c47c:	e3530000 	cmp	r3, #0
    c480:	0a000001 	beq	c48c <g_halBaro_readPressureFromI2C_i32+0x74>
	{return -1;}
    c484:	e3e03000 	mvn	r3, #0
    c488:	ea00002f 	b	c54c <g_halBaro_readPressureFromI2C_i32+0x134>


	//Read from PRESS_OUT_XL(0x28),PRESS_OUT_L(0x29),PRESS_OUT_H(0x2A)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
    c48c:	e24b300c 	sub	r3, fp, #12
    c490:	e3a0005c 	mov	r0, #92	; 0x5c
    c494:	e1a01003 	mov	r1, r3
    c498:	e3a02003 	mov	r2, #3
    c49c:	eb00038a 	bl	d2cc <g_lldI2c_ReadI2c_bl>
    c4a0:	e1a03000 	mov	r3, r0
    c4a4:	e3530000 	cmp	r3, #0
    c4a8:	0a000001 	beq	c4b4 <g_halBaro_readPressureFromI2C_i32+0x9c>
	{return -1;}
    c4ac:	e3e03000 	mvn	r3, #0
    c4b0:	ea000025 	b	c54c <g_halBaro_readPressureFromI2C_i32+0x134>
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<3;l_countVariable_i32++)
    c4b4:	e3a03000 	mov	r3, #0
    c4b8:	e50b3008 	str	r3, [fp, #-8]
    c4bc:	ea00000f 	b	c500 <g_halBaro_readPressureFromI2C_i32+0xe8>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[2-l_countVariable_i32];
    c4c0:	e51b3008 	ldr	r3, [fp, #-8]
    c4c4:	e2632002 	rsb	r2, r3, #2
    c4c8:	e3e03007 	mvn	r3, #7
    c4cc:	e24b0004 	sub	r0, fp, #4
    c4d0:	e0802002 	add	r2, r0, r2
    c4d4:	e0823003 	add	r3, r2, r3
    c4d8:	e5d32000 	ldrb	r2, [r3]
    c4dc:	e3e0300b 	mvn	r3, #11
    c4e0:	e51b1008 	ldr	r1, [fp, #-8]
    c4e4:	e24b0004 	sub	r0, fp, #4
    c4e8:	e0801001 	add	r1, r0, r1
    c4ec:	e0813003 	add	r3, r1, r3
    c4f0:	e5c32000 	strb	r2, [r3]
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
	{return -1;}
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<3;l_countVariable_i32++)
    c4f4:	e51b3008 	ldr	r3, [fp, #-8]
    c4f8:	e2833001 	add	r3, r3, #1
    c4fc:	e50b3008 	str	r3, [fp, #-8]
    c500:	e51b3008 	ldr	r3, [fp, #-8]
    c504:	e3530002 	cmp	r3, #2
    c508:	daffffec 	ble	c4c0 <g_halBaro_readPressureFromI2C_i32+0xa8>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[2-l_countVariable_i32];
		}

		m_pressure_f64=(double)g_halLib_twoComplement2Int(l_rotatedReadBuffer_ui8,3);
    c50c:	e24b3010 	sub	r3, fp, #16
    c510:	e1a00003 	mov	r0, r3
    c514:	e3a01003 	mov	r1, #3
    c518:	eb000184 	bl	cb30 <g_halLib_twoComplement2Int>
    c51c:	e1a03000 	mov	r3, r0
    c520:	ee063a90 	vmov	s13, r3
    c524:	eeb87be6 	vcvt.f64.s32	d7, s13
    c528:	e59f3030 	ldr	r3, [pc, #48]	; c560 <g_halBaro_readPressureFromI2C_i32+0x148>
    c52c:	ed837b00 	vstr	d7, [r3]
		m_pressure_f64=m_pressure_f64/4096;
    c530:	e59f3028 	ldr	r3, [pc, #40]	; c560 <g_halBaro_readPressureFromI2C_i32+0x148>
    c534:	ed936b00 	vldr	d6, [r3]
    c538:	ed9f7b06 	vldr	d7, [pc, #24]	; c558 <g_halBaro_readPressureFromI2C_i32+0x140>
    c53c:	ee867b07 	vdiv.f64	d7, d6, d7
    c540:	e59f3018 	ldr	r3, [pc, #24]	; c560 <g_halBaro_readPressureFromI2C_i32+0x148>
    c544:	ed837b00 	vstr	d7, [r3]
	}

	return 0;
    c548:	e3a03000 	mov	r3, #0
}
    c54c:	e1a00003 	mov	r0, r3
    c550:	e24bd004 	sub	sp, fp, #4
    c554:	e8bd8800 	pop	{fp, pc}
    c558:	00000000 	.word	0x00000000
    c55c:	40b00000 	.word	0x40b00000
    c560:	00019858 	.word	0x00019858

0000c564 <g_halBaro_readTemperatureFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halBaro_readTemperatureFromI2C_i32(void)
{
    c564:	e92d4800 	push	{fp, lr}
    c568:	e28db004 	add	fp, sp, #4
    c56c:	e24dd010 	sub	sp, sp, #16
	unsigned char l_ReadBuffer_ui8[2]={0,0};
    c570:	e3a03000 	mov	r3, #0
    c574:	e54b300c 	strb	r3, [fp, #-12]
    c578:	e3a03000 	mov	r3, #0
    c57c:	e54b300b 	strb	r3, [fp, #-11]
	unsigned char l_rotatedReadBuffer_ui8[2]={0,0};
    c580:	e3a03000 	mov	r3, #0
    c584:	e54b3010 	strb	r3, [fp, #-16]
    c588:	e3a03000 	mov	r3, #0
    c58c:	e54b300f 	strb	r3, [fp, #-15]
	unsigned char l_WriteBuffer_ui8[3];
	int l_countVariable_i32=0;
    c590:	e3a03000 	mov	r3, #0
    c594:	e50b3008 	str	r3, [fp, #-8]

	//maybe check STATUS_REG if new value is available

	//set SUB Address to Temperature register PRESS_OUT_XL and activate multiple read
	l_WriteBuffer_ui8[0]=M_HAL_BARO_MULTIPLE_FLAG_UI8 | M_HAL_BARO_TEMP_OUT_L_UI8;
    c598:	e3e03054 	mvn	r3, #84	; 0x54
    c59c:	e54b3014 	strb	r3, [fp, #-20]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    c5a0:	e24b3014 	sub	r3, fp, #20
    c5a4:	e3a0005c 	mov	r0, #92	; 0x5c
    c5a8:	e1a01003 	mov	r1, r3
    c5ac:	e3a02001 	mov	r2, #1
    c5b0:	eb00030a 	bl	d1e0 <g_lldI2c_WriteI2c_bl>
    c5b4:	e1a03000 	mov	r3, r0
    c5b8:	e3530000 	cmp	r3, #0
    c5bc:	0a000001 	beq	c5c8 <g_halBaro_readTemperatureFromI2C_i32+0x64>
	{return -1;}
    c5c0:	e3e03000 	mvn	r3, #0
    c5c4:	ea000031 	b	c690 <g_halBaro_readTemperatureFromI2C_i32+0x12c>


	//Read from TEMP_OUT_L (2Bh), TEMP_OUT_H (2Ch)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
    c5c8:	e24b300c 	sub	r3, fp, #12
    c5cc:	e3a0005c 	mov	r0, #92	; 0x5c
    c5d0:	e1a01003 	mov	r1, r3
    c5d4:	e3a02002 	mov	r2, #2
    c5d8:	eb00033b 	bl	d2cc <g_lldI2c_ReadI2c_bl>
    c5dc:	e1a03000 	mov	r3, r0
    c5e0:	e3530000 	cmp	r3, #0
    c5e4:	0a000001 	beq	c5f0 <g_halBaro_readTemperatureFromI2C_i32+0x8c>
	{return -1;}
    c5e8:	e3e03000 	mvn	r3, #0
    c5ec:	ea000027 	b	c690 <g_halBaro_readTemperatureFromI2C_i32+0x12c>
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    c5f0:	e3a03000 	mov	r3, #0
    c5f4:	e50b3008 	str	r3, [fp, #-8]
    c5f8:	ea00000f 	b	c63c <g_halBaro_readTemperatureFromI2C_i32+0xd8>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
    c5fc:	e51b3008 	ldr	r3, [fp, #-8]
    c600:	e2632001 	rsb	r2, r3, #1
    c604:	e3e03007 	mvn	r3, #7
    c608:	e24b0004 	sub	r0, fp, #4
    c60c:	e0802002 	add	r2, r0, r2
    c610:	e0823003 	add	r3, r2, r3
    c614:	e5d32000 	ldrb	r2, [r3]
    c618:	e3e0300b 	mvn	r3, #11
    c61c:	e51b1008 	ldr	r1, [fp, #-8]
    c620:	e24b0004 	sub	r0, fp, #4
    c624:	e0801001 	add	r1, r0, r1
    c628:	e0813003 	add	r3, r1, r3
    c62c:	e5c32000 	strb	r2, [r3]
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
	{return -1;}
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    c630:	e51b3008 	ldr	r3, [fp, #-8]
    c634:	e2833001 	add	r3, r3, #1
    c638:	e50b3008 	str	r3, [fp, #-8]
    c63c:	e51b3008 	ldr	r3, [fp, #-8]
    c640:	e3530001 	cmp	r3, #1
    c644:	daffffec 	ble	c5fc <g_halBaro_readTemperatureFromI2C_i32+0x98>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
		}

		m_temperature_f64=(double)g_halLib_twoComplement2Int(l_rotatedReadBuffer_ui8,2);
    c648:	e24b3010 	sub	r3, fp, #16
    c64c:	e1a00003 	mov	r0, r3
    c650:	e3a01002 	mov	r1, #2
    c654:	eb000135 	bl	cb30 <g_halLib_twoComplement2Int>
    c658:	e1a03000 	mov	r3, r0
    c65c:	ee063a90 	vmov	s13, r3
    c660:	eeb87be6 	vcvt.f64.s32	d7, s13
    c664:	e59f3044 	ldr	r3, [pc, #68]	; c6b0 <g_halBaro_readTemperatureFromI2C_i32+0x14c>
    c668:	ed837b00 	vstr	d7, [r3]
		m_temperature_f64=42.5+m_temperature_f64/480;
    c66c:	e59f303c 	ldr	r3, [pc, #60]	; c6b0 <g_halBaro_readTemperatureFromI2C_i32+0x14c>
    c670:	ed936b00 	vldr	d6, [r3]
    c674:	ed9f7b09 	vldr	d7, [pc, #36]	; c6a0 <g_halBaro_readTemperatureFromI2C_i32+0x13c>
    c678:	ee866b07 	vdiv.f64	d6, d6, d7
    c67c:	ed9f7b09 	vldr	d7, [pc, #36]	; c6a8 <g_halBaro_readTemperatureFromI2C_i32+0x144>
    c680:	ee367b07 	vadd.f64	d7, d6, d7
    c684:	e59f3024 	ldr	r3, [pc, #36]	; c6b0 <g_halBaro_readTemperatureFromI2C_i32+0x14c>
    c688:	ed837b00 	vstr	d7, [r3]
	}

	return 0;
    c68c:	e3a03000 	mov	r3, #0
}
    c690:	e1a00003 	mov	r0, r3
    c694:	e24bd004 	sub	sp, fp, #4
    c698:	e8bd8800 	pop	{fp, pc}
    c69c:	e1a00000 	nop			; (mov r0, r0)
    c6a0:	00000000 	.word	0x00000000
    c6a4:	407e0000 	.word	0x407e0000
    c6a8:	00000000 	.word	0x00000000
    c6ac:	40454000 	.word	0x40454000
    c6b0:	00019850 	.word	0x00019850
    c6b4:	e1a00000 	nop			; (mov r0, r0)

0000c6b8 <g_halGyro_initGyro_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGyro_initGyro_i32(void)
{
    c6b8:	e92d4800 	push	{fp, lr}
    c6bc:	e28db004 	add	fp, sp, #4

	//Bypass mode -> maybe Dynamic Stream if enough bandwidth on I2C is left

	//CTRL1 (20h)= 0b11101111 ODR=800Hz Cut-Off frequency=not used
	//CTRL2 (21h)= 0b00100000 HPF=normal mode; Cut-Off frequency=56Hz
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_MULTIPLE_READ_FLAG_UI8 | M_HAL_GYRO_CTRL1_UI8;
    c6c0:	e59f3090 	ldr	r3, [pc, #144]	; c758 <g_halGyro_initGyro_i32+0xa0>
    c6c4:	e3e0205f 	mvn	r2, #95	; 0x5f
    c6c8:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]=M_HAL_GYRO_CTRL1_DR0_DR1_UI8 | M_HAL_GYRO_CTRL1_BW1_UI8 | M_HAL_GYRO_CTRL1_NORMAL_UI8;
    c6cc:	e59f3084 	ldr	r3, [pc, #132]	; c758 <g_halGyro_initGyro_i32+0xa0>
    c6d0:	e3e02010 	mvn	r2, #16
    c6d4:	e5c32001 	strb	r2, [r3, #1]
	l_WriteBuffer_ui8[2]=M_HAL_GYRO_CTRL2_HPF_NORMAL_MODE_UI8;
    c6d8:	e59f3078 	ldr	r3, [pc, #120]	; c758 <g_halGyro_initGyro_i32+0xa0>
    c6dc:	e3a02020 	mov	r2, #32
    c6e0:	e5c32002 	strb	r2, [r3, #2]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
    c6e4:	e3a0006a 	mov	r0, #106	; 0x6a
    c6e8:	e59f1068 	ldr	r1, [pc, #104]	; c758 <g_halGyro_initGyro_i32+0xa0>
    c6ec:	e3a02003 	mov	r2, #3
    c6f0:	eb0002ba 	bl	d1e0 <g_lldI2c_WriteI2c_bl>
    c6f4:	e1a03000 	mov	r3, r0
    c6f8:	e3530000 	cmp	r3, #0
    c6fc:	0a000001 	beq	c708 <g_halGyro_initGyro_i32+0x50>
	{return -1;}
    c700:	e3e03000 	mvn	r3, #0
    c704:	ea000011 	b	c750 <g_halGyro_initGyro_i32+0x98>

	usleep(100000);
    c708:	e59f004c 	ldr	r0, [pc, #76]	; c75c <g_halGyro_initGyro_i32+0xa4>
    c70c:	ebfff0c5 	bl	8a28 <_init+0xb0>

	//CTRL4 (23h)= 0b00010000
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_SINGLE_READ_FLAG_UI8 | M_HAL_GYRO_CTRL4_UI8;
    c710:	e59f3040 	ldr	r3, [pc, #64]	; c758 <g_halGyro_initGyro_i32+0xa0>
    c714:	e3a02023 	mov	r2, #35	; 0x23
    c718:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]=M_HAL_GYRO_CTRL4_SCALE_500DPS_UI8;
    c71c:	e59f3034 	ldr	r3, [pc, #52]	; c758 <g_halGyro_initGyro_i32+0xa0>
    c720:	e3a02010 	mov	r2, #16
    c724:	e5c32001 	strb	r2, [r3, #1]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
    c728:	e3a0006a 	mov	r0, #106	; 0x6a
    c72c:	e59f1024 	ldr	r1, [pc, #36]	; c758 <g_halGyro_initGyro_i32+0xa0>
    c730:	e3a02002 	mov	r2, #2
    c734:	eb0002a9 	bl	d1e0 <g_lldI2c_WriteI2c_bl>
    c738:	e1a03000 	mov	r3, r0
    c73c:	e3530000 	cmp	r3, #0
    c740:	0a000001 	beq	c74c <g_halGyro_initGyro_i32+0x94>
	{return -1;}
    c744:	e3e03000 	mvn	r3, #0
    c748:	ea000000 	b	c750 <g_halGyro_initGyro_i32+0x98>

	return 0;
    c74c:	e3a03000 	mov	r3, #0
}
    c750:	e1a00003 	mov	r0, r3
    c754:	e8bd8800 	pop	{fp, pc}
    c758:	00019888 	.word	0x00019888
    c75c:	000186a0 	.word	0x000186a0

0000c760 <g_halGyro_getGyroscope_st>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
sigOri_orientationAngles g_halGyro_getGyroscope_st(void)
{
    c760:	e92d4830 	push	{r4, r5, fp, lr}
    c764:	e28db00c 	add	fp, sp, #12
    c768:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_rotation_str;
    c76c:	e59f3040 	ldr	r3, [pc, #64]	; c7b4 <g_halGyro_getGyroscope_st+0x54>
    c770:	e24bc024 	sub	ip, fp, #36	; 0x24
    c774:	e1a0e003 	mov	lr, r3
    c778:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    c77c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    c780:	e89e0003 	ldm	lr, {r0, r1}
    c784:	e88c0003 	stm	ip, {r0, r1}
    c788:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    c78c:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    c790:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    c794:	ec454b15 	vmov	d5, r4, r5
    c798:	ec410b16 	vmov	d6, r0, r1
    c79c:	ec432b17 	vmov	d7, r2, r3
}
    c7a0:	eeb00b45 	vmov.f64	d0, d5
    c7a4:	eeb01b46 	vmov.f64	d1, d6
    c7a8:	eeb02b47 	vmov.f64	d2, d7
    c7ac:	e24bd00c 	sub	sp, fp, #12
    c7b0:	e8bd8830 	pop	{r4, r5, fp, pc}
    c7b4:	00019868 	.word	0x00019868

0000c7b8 <g_halGyro_getTemperature_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGyro_getTemperature_f64(void)
{
    c7b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    c7bc:	e28db000 	add	fp, sp, #0
	return m_halGyro_temperature_f64;
    c7c0:	e59f3014 	ldr	r3, [pc, #20]	; c7dc <g_halGyro_getTemperature_f64+0x24>
    c7c4:	e1c320d0 	ldrd	r2, [r3]
    c7c8:	ec432b17 	vmov	d7, r2, r3
}
    c7cc:	eeb00b47 	vmov.f64	d0, d7
    c7d0:	e24bd000 	sub	sp, fp, #0
    c7d4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    c7d8:	e12fff1e 	bx	lr
    c7dc:	00019880 	.word	0x00019880

0000c7e0 <g_halGyro_readGyroscopeFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGyro_readGyroscopeFromI2C_i32(void)
{
    c7e0:	e92d4800 	push	{fp, lr}
    c7e4:	e28db004 	add	fp, sp, #4
    c7e8:	e24dd040 	sub	sp, sp, #64	; 0x40
	unsigned char l_ReadBuffer_ui8[6]={0,0,0,0,0,0};
    c7ec:	e3a03000 	mov	r3, #0
    c7f0:	e54b3034 	strb	r3, [fp, #-52]	; 0x34
    c7f4:	e3a03000 	mov	r3, #0
    c7f8:	e54b3033 	strb	r3, [fp, #-51]	; 0x33
    c7fc:	e3a03000 	mov	r3, #0
    c800:	e54b3032 	strb	r3, [fp, #-50]	; 0x32
    c804:	e3a03000 	mov	r3, #0
    c808:	e54b3031 	strb	r3, [fp, #-49]	; 0x31
    c80c:	e3a03000 	mov	r3, #0
    c810:	e54b3030 	strb	r3, [fp, #-48]	; 0x30
    c814:	e3a03000 	mov	r3, #0
    c818:	e54b302f 	strb	r3, [fp, #-47]	; 0x2f
	unsigned char l_xRegister_ui8[2]={0,0};
    c81c:	e3a03000 	mov	r3, #0
    c820:	e54b3038 	strb	r3, [fp, #-56]	; 0x38
    c824:	e3a03000 	mov	r3, #0
    c828:	e54b3037 	strb	r3, [fp, #-55]	; 0x37
	unsigned char l_yRegister_ui8[2]={0,0};
    c82c:	e3a03000 	mov	r3, #0
    c830:	e54b303c 	strb	r3, [fp, #-60]	; 0x3c
    c834:	e3a03000 	mov	r3, #0
    c838:	e54b303b 	strb	r3, [fp, #-59]	; 0x3b
	unsigned char l_zRegister_ui8[2]={0,0};
    c83c:	e3a03000 	mov	r3, #0
    c840:	e54b3040 	strb	r3, [fp, #-64]	; 0x40
    c844:	e3a03000 	mov	r3, #0
    c848:	e54b303f 	strb	r3, [fp, #-63]	; 0x3f
	double l_xValue_ui8=0;
    c84c:	e3a02000 	mov	r2, #0
    c850:	e3a03000 	mov	r3, #0
    c854:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	double l_yValue_ui8=0;
    c858:	e3a02000 	mov	r2, #0
    c85c:	e3a03000 	mov	r3, #0
    c860:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	double l_zValue_ui8=0;
    c864:	e3a02000 	mov	r2, #0
    c868:	e3a03000 	mov	r3, #0
    c86c:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	unsigned char l_WriteBuffer_ui8[3];
	int l_countVariable_i32=0;
    c870:	e3a03000 	mov	r3, #0
    c874:	e50b3008 	str	r3, [fp, #-8]
	//500dps in init set
	double l_factorRaw2Out_f64=(double)500.0/32767.0;
    c878:	e59f21e0 	ldr	r2, [pc, #480]	; ca60 <g_halGyro_readGyroscopeFromI2C_i32+0x280>
    c87c:	e59f31e0 	ldr	r3, [pc, #480]	; ca64 <g_halGyro_readGyroscopeFromI2C_i32+0x284>
    c880:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4


	//maybe check if new value is available; STATUS (27h) -->ZYXDA

	//set SUB Address to X register OUT_X_L and activate multiple read
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_MULTIPLE_READ_FLAG_UI8 | M_HAL_GYRO_OUT_X_L_UI8;
    c884:	e3e03057 	mvn	r3, #87	; 0x57
    c888:	e54b3044 	strb	r3, [fp, #-68]	; 0x44
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    c88c:	e24b3044 	sub	r3, fp, #68	; 0x44
    c890:	e3a0006a 	mov	r0, #106	; 0x6a
    c894:	e1a01003 	mov	r1, r3
    c898:	e3a02001 	mov	r2, #1
    c89c:	eb00024f 	bl	d1e0 <g_lldI2c_WriteI2c_bl>
    c8a0:	e1a03000 	mov	r3, r0
    c8a4:	e3530000 	cmp	r3, #0
    c8a8:	0a000001 	beq	c8b4 <g_halGyro_readGyroscopeFromI2C_i32+0xd4>
	{return -1;}
    c8ac:	e3e03000 	mvn	r3, #0
    c8b0:	ea000067 	b	ca54 <g_halGyro_readGyroscopeFromI2C_i32+0x274>

	//Read from OUT_X_L (28h), OUT_X_H (29h), OUT_Y_L (2Ah), OUT_Y_H (2Bh), OUT_Z_L (2Ch), OUT_Z_H (2Dh)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_SIX_UI8)!=0)
    c8b4:	e24b3034 	sub	r3, fp, #52	; 0x34
    c8b8:	e3a0006a 	mov	r0, #106	; 0x6a
    c8bc:	e1a01003 	mov	r1, r3
    c8c0:	e3a02006 	mov	r2, #6
    c8c4:	eb000280 	bl	d2cc <g_lldI2c_ReadI2c_bl>
    c8c8:	e1a03000 	mov	r3, r0
    c8cc:	e3530000 	cmp	r3, #0
    c8d0:	0a000001 	beq	c8dc <g_halGyro_readGyroscopeFromI2C_i32+0xfc>
	{return -1;}
    c8d4:	e3e03000 	mvn	r3, #0
    c8d8:	ea00005d 	b	ca54 <g_halGyro_readGyroscopeFromI2C_i32+0x274>
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    c8dc:	e3a03000 	mov	r3, #0
    c8e0:	e50b3008 	str	r3, [fp, #-8]
    c8e4:	ea000029 	b	c990 <g_halGyro_readGyroscopeFromI2C_i32+0x1b0>
		{
			l_xRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
    c8e8:	e51b3008 	ldr	r3, [fp, #-8]
    c8ec:	e2632001 	rsb	r2, r3, #1
    c8f0:	e3e0302f 	mvn	r3, #47	; 0x2f
    c8f4:	e24b0004 	sub	r0, fp, #4
    c8f8:	e0802002 	add	r2, r0, r2
    c8fc:	e0823003 	add	r3, r2, r3
    c900:	e5d32000 	ldrb	r2, [r3]
    c904:	e3e03033 	mvn	r3, #51	; 0x33
    c908:	e51b1008 	ldr	r1, [fp, #-8]
    c90c:	e24b0004 	sub	r0, fp, #4
    c910:	e0801001 	add	r1, r0, r1
    c914:	e0813003 	add	r3, r1, r3
    c918:	e5c32000 	strb	r2, [r3]
			l_yRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[3-l_countVariable_i32];
    c91c:	e51b3008 	ldr	r3, [fp, #-8]
    c920:	e2632003 	rsb	r2, r3, #3
    c924:	e3e0302f 	mvn	r3, #47	; 0x2f
    c928:	e24b1004 	sub	r1, fp, #4
    c92c:	e0812002 	add	r2, r1, r2
    c930:	e0823003 	add	r3, r2, r3
    c934:	e5d32000 	ldrb	r2, [r3]
    c938:	e3e03037 	mvn	r3, #55	; 0x37
    c93c:	e51b1008 	ldr	r1, [fp, #-8]
    c940:	e24b0004 	sub	r0, fp, #4
    c944:	e0801001 	add	r1, r0, r1
    c948:	e0813003 	add	r3, r1, r3
    c94c:	e5c32000 	strb	r2, [r3]
			l_zRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[5-l_countVariable_i32];
    c950:	e51b3008 	ldr	r3, [fp, #-8]
    c954:	e2632005 	rsb	r2, r3, #5
    c958:	e3e0302f 	mvn	r3, #47	; 0x2f
    c95c:	e24b1004 	sub	r1, fp, #4
    c960:	e0812002 	add	r2, r1, r2
    c964:	e0823003 	add	r3, r2, r3
    c968:	e5d32000 	ldrb	r2, [r3]
    c96c:	e3e0303b 	mvn	r3, #59	; 0x3b
    c970:	e51b1008 	ldr	r1, [fp, #-8]
    c974:	e24b0004 	sub	r0, fp, #4
    c978:	e0801001 	add	r1, r0, r1
    c97c:	e0813003 	add	r3, r1, r3
    c980:	e5c32000 	strb	r2, [r3]
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_SIX_UI8)!=0)
	{return -1;}
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    c984:	e51b3008 	ldr	r3, [fp, #-8]
    c988:	e2833001 	add	r3, r3, #1
    c98c:	e50b3008 	str	r3, [fp, #-8]
    c990:	e51b3008 	ldr	r3, [fp, #-8]
    c994:	e3530001 	cmp	r3, #1
    c998:	daffffd2 	ble	c8e8 <g_halGyro_readGyroscopeFromI2C_i32+0x108>
			l_xRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
			l_yRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[3-l_countVariable_i32];
			l_zRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[5-l_countVariable_i32];
		}

		l_xValue_ui8=(double)g_halLib_twoComplement2Int(l_xRegister_ui8,2);
    c99c:	e24b3038 	sub	r3, fp, #56	; 0x38
    c9a0:	e1a00003 	mov	r0, r3
    c9a4:	e3a01002 	mov	r1, #2
    c9a8:	eb000060 	bl	cb30 <g_halLib_twoComplement2Int>
    c9ac:	e1a03000 	mov	r3, r0
    c9b0:	ee063a90 	vmov	s13, r3
    c9b4:	eeb87be6 	vcvt.f64.s32	d7, s13
    c9b8:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
		l_yValue_ui8=(double)g_halLib_twoComplement2Int(l_yRegister_ui8,2);
    c9bc:	e24b303c 	sub	r3, fp, #60	; 0x3c
    c9c0:	e1a00003 	mov	r0, r3
    c9c4:	e3a01002 	mov	r1, #2
    c9c8:	eb000058 	bl	cb30 <g_halLib_twoComplement2Int>
    c9cc:	e1a03000 	mov	r3, r0
    c9d0:	ee063a90 	vmov	s13, r3
    c9d4:	eeb87be6 	vcvt.f64.s32	d7, s13
    c9d8:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4
		l_zValue_ui8=(double)g_halLib_twoComplement2Int(l_zRegister_ui8,2);
    c9dc:	e24b3040 	sub	r3, fp, #64	; 0x40
    c9e0:	e1a00003 	mov	r0, r3
    c9e4:	e3a01002 	mov	r1, #2
    c9e8:	eb000050 	bl	cb30 <g_halLib_twoComplement2Int>
    c9ec:	e1a03000 	mov	r3, r0
    c9f0:	ee063a90 	vmov	s13, r3
    c9f4:	eeb87be6 	vcvt.f64.s32	d7, s13
    c9f8:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc

		l_xValue_ui8=l_xValue_ui8*l_factorRaw2Out_f64;
    c9fc:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
    ca00:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    ca04:	ee267b07 	vmul.f64	d7, d6, d7
    ca08:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
		l_yValue_ui8=l_yValue_ui8*l_factorRaw2Out_f64;
    ca0c:	ed1b6b07 	vldr	d6, [fp, #-28]	; 0xffffffe4
    ca10:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    ca14:	ee267b07 	vmul.f64	d7, d6, d7
    ca18:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4
		l_zValue_ui8=l_zValue_ui8*l_factorRaw2Out_f64;
    ca1c:	ed1b6b09 	vldr	d6, [fp, #-36]	; 0xffffffdc
    ca20:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    ca24:	ee267b07 	vmul.f64	d7, d6, d7
    ca28:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc

		m_rotation_str.roll_f64=l_xValue_ui8;
    ca2c:	e59f1034 	ldr	r1, [pc, #52]	; ca68 <g_halGyro_readGyroscopeFromI2C_i32+0x288>
    ca30:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    ca34:	e1c120f0 	strd	r2, [r1]
		m_rotation_str.pitch_f64=l_yValue_ui8;
    ca38:	e59f1028 	ldr	r1, [pc, #40]	; ca68 <g_halGyro_readGyroscopeFromI2C_i32+0x288>
    ca3c:	e14b21dc 	ldrd	r2, [fp, #-28]	; 0xffffffe4
    ca40:	e1c120f8 	strd	r2, [r1, #8]
		m_rotation_str.yaw_f64=l_zValue_ui8;
    ca44:	e59f101c 	ldr	r1, [pc, #28]	; ca68 <g_halGyro_readGyroscopeFromI2C_i32+0x288>
    ca48:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
    ca4c:	e1c121f0 	strd	r2, [r1, #16]
	}

	return 0;
    ca50:	e3a03000 	mov	r3, #0
}
    ca54:	e1a00003 	mov	r0, r3
    ca58:	e24bd004 	sub	sp, fp, #4
    ca5c:	e8bd8800 	pop	{fp, pc}
    ca60:	807d00fa 	.word	0x807d00fa
    ca64:	3f8f403e 	.word	0x3f8f403e
    ca68:	00019868 	.word	0x00019868

0000ca6c <g_halGyro_readTemperatureFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGyro_readTemperatureFromI2C_i32(void)
{
    ca6c:	e92d4800 	push	{fp, lr}
    ca70:	e28db004 	add	fp, sp, #4
    ca74:	e24dd008 	sub	sp, sp, #8
	unsigned char l_ReadBuffer_ui8[2]={0,0};
    ca78:	e3a03000 	mov	r3, #0
    ca7c:	e54b3008 	strb	r3, [fp, #-8]
    ca80:	e3a03000 	mov	r3, #0
    ca84:	e54b3007 	strb	r3, [fp, #-7]
	unsigned char l_WriteBuffer_ui8[3];

	//set SUB Address to OUT_TEMP register and activate single read
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_SINGLE_READ_FLAG_UI8 | M_HAL_GYRO_OUT_TEMP_UI8;
    ca88:	e3a03026 	mov	r3, #38	; 0x26
    ca8c:	e54b300c 	strb	r3, [fp, #-12]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    ca90:	e24b300c 	sub	r3, fp, #12
    ca94:	e3a0006a 	mov	r0, #106	; 0x6a
    ca98:	e1a01003 	mov	r1, r3
    ca9c:	e3a02001 	mov	r2, #1
    caa0:	eb0001ce 	bl	d1e0 <g_lldI2c_WriteI2c_bl>
    caa4:	e1a03000 	mov	r3, r0
    caa8:	e3530000 	cmp	r3, #0
    caac:	0a000001 	beq	cab8 <g_halGyro_readTemperatureFromI2C_i32+0x4c>
	{return -1;}
    cab0:	e3e03000 	mvn	r3, #0
    cab4:	ea000015 	b	cb10 <g_halGyro_readTemperatureFromI2C_i32+0xa4>

	//Read from OUT_TEMP (26h)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    cab8:	e24b3008 	sub	r3, fp, #8
    cabc:	e3a0006a 	mov	r0, #106	; 0x6a
    cac0:	e1a01003 	mov	r1, r3
    cac4:	e3a02001 	mov	r2, #1
    cac8:	eb0001ff 	bl	d2cc <g_lldI2c_ReadI2c_bl>
    cacc:	e1a03000 	mov	r3, r0
    cad0:	e3530000 	cmp	r3, #0
    cad4:	0a000001 	beq	cae0 <g_halGyro_readTemperatureFromI2C_i32+0x74>
	{return -1;}
    cad8:	e3e03000 	mvn	r3, #0
    cadc:	ea00000b 	b	cb10 <g_halGyro_readTemperatureFromI2C_i32+0xa4>
	else
	{
		m_halGyro_temperature_f64=(double)(M_HAL_GYRO_TEMP_OFFSET_UI8)-(double)(g_halLib_twoComplement2Int(l_ReadBuffer_ui8,1));
    cae0:	e24b3008 	sub	r3, fp, #8
    cae4:	e1a00003 	mov	r0, r3
    cae8:	e3a01001 	mov	r1, #1
    caec:	eb00000f 	bl	cb30 <g_halLib_twoComplement2Int>
    caf0:	e1a03000 	mov	r3, r0
    caf4:	ee063a90 	vmov	s13, r3
    caf8:	eeb87be6 	vcvt.f64.s32	d7, s13
    cafc:	ed9f6b07 	vldr	d6, [pc, #28]	; cb20 <g_halGyro_readTemperatureFromI2C_i32+0xb4>
    cb00:	ee367b47 	vsub.f64	d7, d6, d7
    cb04:	e59f301c 	ldr	r3, [pc, #28]	; cb28 <g_halGyro_readTemperatureFromI2C_i32+0xbc>
    cb08:	ed837b00 	vstr	d7, [r3]
	}

	return 0;
    cb0c:	e3a03000 	mov	r3, #0
}
    cb10:	e1a00003 	mov	r0, r3
    cb14:	e24bd004 	sub	sp, fp, #4
    cb18:	e8bd8800 	pop	{fp, pc}
    cb1c:	e1a00000 	nop			; (mov r0, r0)
    cb20:	00000000 	.word	0x00000000
    cb24:	403b0000 	.word	0x403b0000
    cb28:	00019880 	.word	0x00019880
    cb2c:	e1a00000 	nop			; (mov r0, r0)

0000cb30 <g_halLib_twoComplement2Int>:
 */

#include "Hal_Lib.h"

int g_halLib_twoComplement2Int(unsigned char* f_buffer_ui8,unsigned int f_nrOfBytes_ui32)
{
    cb30:	e92d4830 	push	{r4, r5, fp, lr}
    cb34:	e28db00c 	add	fp, sp, #12
    cb38:	e24dd020 	sub	sp, sp, #32
    cb3c:	e50b0028 	str	r0, [fp, #-40]	; 0x28
    cb40:	e50b102c 	str	r1, [fp, #-44]	; 0x2c
    cb44:	e1a0100d 	mov	r1, sp
    cb48:	e1a0e001 	mov	lr, r1
	int l_countVariable_i32=0;
    cb4c:	e3a01000 	mov	r1, #0
    cb50:	e50b1010 	str	r1, [fp, #-16]
	int l_result_i32=0;
    cb54:	e3a01000 	mov	r1, #0
    cb58:	e50b1014 	str	r1, [fp, #-20]
	unsigned char l_shift_ui8=0;
    cb5c:	e3a01000 	mov	r1, #0
    cb60:	e54b1015 	strb	r1, [fp, #-21]
	unsigned int l_buffer_ui8[f_nrOfBytes_ui32];
    cb64:	e51bc02c 	ldr	ip, [fp, #-44]	; 0x2c
    cb68:	e1a0100c 	mov	r1, ip
    cb6c:	e2411001 	sub	r1, r1, #1
    cb70:	e50b101c 	str	r1, [fp, #-28]
    cb74:	e1a0000c 	mov	r0, ip
    cb78:	e3a01000 	mov	r1, #0
    cb7c:	e1a05281 	lsl	r5, r1, #5
    cb80:	e1855da0 	orr	r5, r5, r0, lsr #27
    cb84:	e1a04280 	lsl	r4, r0, #5
    cb88:	e1a0000c 	mov	r0, ip
    cb8c:	e3a01000 	mov	r1, #0
    cb90:	e1a03281 	lsl	r3, r1, #5
    cb94:	e1833da0 	orr	r3, r3, r0, lsr #27
    cb98:	e1a02280 	lsl	r2, r0, #5
    cb9c:	e1a0310c 	lsl	r3, ip, #2
    cba0:	e2833003 	add	r3, r3, #3
    cba4:	e2833007 	add	r3, r3, #7
    cba8:	e1a031a3 	lsr	r3, r3, #3
    cbac:	e1a03183 	lsl	r3, r3, #3
    cbb0:	e04dd003 	sub	sp, sp, r3
    cbb4:	e1a0300d 	mov	r3, sp
    cbb8:	e2833003 	add	r3, r3, #3
    cbbc:	e1a03123 	lsr	r3, r3, #2
    cbc0:	e1a03103 	lsl	r3, r3, #2
    cbc4:	e50b3020 	str	r3, [fp, #-32]

	//copy Parameter buffer to local buffer
	for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    cbc8:	e3a03000 	mov	r3, #0
    cbcc:	e50b3010 	str	r3, [fp, #-16]
    cbd0:	ea00000a 	b	cc00 <g_halLib_twoComplement2Int+0xd0>
	{
		l_buffer_ui8[l_countVariable_i32]=*(f_buffer_ui8+l_countVariable_i32);
    cbd4:	e51b3010 	ldr	r3, [fp, #-16]
    cbd8:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    cbdc:	e0823003 	add	r3, r2, r3
    cbe0:	e5d33000 	ldrb	r3, [r3]
    cbe4:	e1a01003 	mov	r1, r3
    cbe8:	e51b3020 	ldr	r3, [fp, #-32]
    cbec:	e51b2010 	ldr	r2, [fp, #-16]
    cbf0:	e7831102 	str	r1, [r3, r2, lsl #2]
	int l_result_i32=0;
	unsigned char l_shift_ui8=0;
	unsigned int l_buffer_ui8[f_nrOfBytes_ui32];

	//copy Parameter buffer to local buffer
	for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    cbf4:	e51b3010 	ldr	r3, [fp, #-16]
    cbf8:	e2833001 	add	r3, r3, #1
    cbfc:	e50b3010 	str	r3, [fp, #-16]
    cc00:	e51b2010 	ldr	r2, [fp, #-16]
    cc04:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    cc08:	e2433001 	sub	r3, r3, #1
    cc0c:	e1520003 	cmp	r2, r3
    cc10:	9affffef 	bls	cbd4 <g_halLib_twoComplement2Int+0xa4>
	{
		l_buffer_ui8[l_countVariable_i32]=*(f_buffer_ui8+l_countVariable_i32);
	}
//
	//if number is negative
	if ((l_buffer_ui8[0]& M_MASK_NEGATIVE_UI8)!=0)
    cc14:	e51b3020 	ldr	r3, [fp, #-32]
    cc18:	e5933000 	ldr	r3, [r3]
    cc1c:	e2033080 	and	r3, r3, #128	; 0x80
    cc20:	e3530000 	cmp	r3, #0
    cc24:	0a000023 	beq	ccb8 <g_halLib_twoComplement2Int+0x188>
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    cc28:	e3a03000 	mov	r3, #0
    cc2c:	e50b3010 	str	r3, [fp, #-16]
    cc30:	ea000014 	b	cc88 <g_halLib_twoComplement2Int+0x158>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
    cc34:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    cc38:	e6ef2073 	uxtb	r2, r3
    cc3c:	e51b3010 	ldr	r3, [fp, #-16]
    cc40:	e6ef3073 	uxtb	r3, r3
    cc44:	e0633002 	rsb	r3, r3, r2
    cc48:	e6ef3073 	uxtb	r3, r3
    cc4c:	e2433001 	sub	r3, r3, #1
    cc50:	e54b3015 	strb	r3, [fp, #-21]
			l_result_i32=l_result_i32+(((l_buffer_ui8[l_countVariable_i32])^255)<<(l_shift_ui8*8));
    cc54:	e51b3020 	ldr	r3, [fp, #-32]
    cc58:	e51b2010 	ldr	r2, [fp, #-16]
    cc5c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    cc60:	e22320ff 	eor	r2, r3, #255	; 0xff
    cc64:	e55b3015 	ldrb	r3, [fp, #-21]
    cc68:	e1a03183 	lsl	r3, r3, #3
    cc6c:	e1a02312 	lsl	r2, r2, r3
    cc70:	e51b3014 	ldr	r3, [fp, #-20]
    cc74:	e0823003 	add	r3, r2, r3
    cc78:	e50b3014 	str	r3, [fp, #-20]
	}
//
	//if number is negative
	if ((l_buffer_ui8[0]& M_MASK_NEGATIVE_UI8)!=0)
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    cc7c:	e51b3010 	ldr	r3, [fp, #-16]
    cc80:	e2833001 	add	r3, r3, #1
    cc84:	e50b3010 	str	r3, [fp, #-16]
    cc88:	e51b2010 	ldr	r2, [fp, #-16]
    cc8c:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    cc90:	e2433001 	sub	r3, r3, #1
    cc94:	e1520003 	cmp	r2, r3
    cc98:	9affffe5 	bls	cc34 <g_halLib_twoComplement2Int+0x104>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
			l_result_i32=l_result_i32+(((l_buffer_ui8[l_countVariable_i32])^255)<<(l_shift_ui8*8));
		}
		l_result_i32=l_result_i32+1;
    cc9c:	e51b3014 	ldr	r3, [fp, #-20]
    cca0:	e2833001 	add	r3, r3, #1
    cca4:	e50b3014 	str	r3, [fp, #-20]
		l_result_i32=l_result_i32*-1;
    cca8:	e51b3014 	ldr	r3, [fp, #-20]
    ccac:	e2633000 	rsb	r3, r3, #0
    ccb0:	e50b3014 	str	r3, [fp, #-20]
    ccb4:	ea00001b 	b	cd28 <g_halLib_twoComplement2Int+0x1f8>
	}
	else
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    ccb8:	e3a03000 	mov	r3, #0
    ccbc:	e50b3010 	str	r3, [fp, #-16]
    ccc0:	ea000013 	b	cd14 <g_halLib_twoComplement2Int+0x1e4>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
    ccc4:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    ccc8:	e6ef2073 	uxtb	r2, r3
    cccc:	e51b3010 	ldr	r3, [fp, #-16]
    ccd0:	e6ef3073 	uxtb	r3, r3
    ccd4:	e0633002 	rsb	r3, r3, r2
    ccd8:	e6ef3073 	uxtb	r3, r3
    ccdc:	e2433001 	sub	r3, r3, #1
    cce0:	e54b3015 	strb	r3, [fp, #-21]
			l_result_i32=l_result_i32+(l_buffer_ui8[l_countVariable_i32]<<l_shift_ui8*8);
    cce4:	e51b3020 	ldr	r3, [fp, #-32]
    cce8:	e51b2010 	ldr	r2, [fp, #-16]
    ccec:	e7932102 	ldr	r2, [r3, r2, lsl #2]
    ccf0:	e55b3015 	ldrb	r3, [fp, #-21]
    ccf4:	e1a03183 	lsl	r3, r3, #3
    ccf8:	e1a02312 	lsl	r2, r2, r3
    ccfc:	e51b3014 	ldr	r3, [fp, #-20]
    cd00:	e0823003 	add	r3, r2, r3
    cd04:	e50b3014 	str	r3, [fp, #-20]
		l_result_i32=l_result_i32+1;
		l_result_i32=l_result_i32*-1;
	}
	else
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    cd08:	e51b3010 	ldr	r3, [fp, #-16]
    cd0c:	e2833001 	add	r3, r3, #1
    cd10:	e50b3010 	str	r3, [fp, #-16]
    cd14:	e51b2010 	ldr	r2, [fp, #-16]
    cd18:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    cd1c:	e2433001 	sub	r3, r3, #1
    cd20:	e1520003 	cmp	r2, r3
    cd24:	9affffe6 	bls	ccc4 <g_halLib_twoComplement2Int+0x194>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
			l_result_i32=l_result_i32+(l_buffer_ui8[l_countVariable_i32]<<l_shift_ui8*8);
		}
	}
	return l_result_i32;
    cd28:	e51b3014 	ldr	r3, [fp, #-20]
    cd2c:	e1a0d00e 	mov	sp, lr
}
    cd30:	e1a00003 	mov	r0, r3
    cd34:	e24bd00c 	sub	sp, fp, #12
    cd38:	e8bd8830 	pop	{r4, r5, fp, pc}

0000cd3c <g_halImu_getImuValues_str>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halImu_orientationValues g_halImu_getImuValues_str(void)
{
    cd3c:	e92d4800 	push	{fp, lr}
    cd40:	e28db004 	add	fp, sp, #4
    cd44:	e24dd008 	sub	sp, sp, #8
    cd48:	e50b0008 	str	r0, [fp, #-8]
	return m_halImu_imuValues_st;
    cd4c:	e51b2008 	ldr	r2, [fp, #-8]
    cd50:	e59f3024 	ldr	r3, [pc, #36]	; cd7c <g_halImu_getImuValues_str+0x40>
    cd54:	e1a01002 	mov	r1, r2
    cd58:	e1a02003 	mov	r2, r3
    cd5c:	e3a03060 	mov	r3, #96	; 0x60
    cd60:	e1a00001 	mov	r0, r1
    cd64:	e1a01002 	mov	r1, r2
    cd68:	e1a02003 	mov	r2, r3
    cd6c:	ebffef51 	bl	8ab8 <_init+0x140>
}
    cd70:	e51b0008 	ldr	r0, [fp, #-8]
    cd74:	e24bd004 	sub	sp, fp, #4
    cd78:	e8bd8800 	pop	{fp, pc}
    cd7c:	00019890 	.word	0x00019890

0000cd80 <g_halImu_initImuSensors_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_initImuSensors_bl(void)
{
    cd80:	e92d4800 	push	{fp, lr}
    cd84:	e28db004 	add	fp, sp, #4
	// initialize Acceleration and electrical Compass chip
	if(g_halAccmag_initSensor_bl()!=0)
    cd88:	ebfffce9 	bl	c134 <g_halAccmag_initSensor_bl>
    cd8c:	e1a03000 	mov	r3, r0
    cd90:	e3530000 	cmp	r3, #0
    cd94:	0a000001 	beq	cda0 <g_halImu_initImuSensors_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    cd98:	e3a03001 	mov	r3, #1
    cd9c:	ea00000c 	b	cdd4 <g_halImu_initImuSensors_bl+0x54>

	// initialize Barometer chip
	if(g_halBaro_initBaro_i32()!=0)
    cda0:	ebfffd5e 	bl	c320 <g_halBaro_initBaro_i32>
    cda4:	e1a03000 	mov	r3, r0
    cda8:	e3530000 	cmp	r3, #0
    cdac:	0a000001 	beq	cdb8 <g_halImu_initImuSensors_bl+0x38>
	{return M_HAL_IMU_FAILED_BL;}
    cdb0:	e3a03001 	mov	r3, #1
    cdb4:	ea000006 	b	cdd4 <g_halImu_initImuSensors_bl+0x54>

	// initialize Gyroscope chip
	if(g_halGyro_initGyro_i32()!=0)
    cdb8:	ebfffe3e 	bl	c6b8 <g_halGyro_initGyro_i32>
    cdbc:	e1a03000 	mov	r3, r0
    cdc0:	e3530000 	cmp	r3, #0
    cdc4:	0a000001 	beq	cdd0 <g_halImu_initImuSensors_bl+0x50>
	{return M_HAL_IMU_FAILED_BL;}
    cdc8:	e3a03001 	mov	r3, #1
    cdcc:	ea000000 	b	cdd4 <g_halImu_initImuSensors_bl+0x54>

	return M_HAL_IMU_SUCCESS_BL;
    cdd0:	e3a03000 	mov	r3, #0
}
    cdd4:	e1a00003 	mov	r0, r3
    cdd8:	e8bd8800 	pop	{fp, pc}

0000cddc <g_halImu_triggerBaroReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerBaroReading_bl(void)
{
    cddc:	e92d4800 	push	{fp, lr}
    cde0:	e28db004 	add	fp, sp, #4
	if(g_halBaro_readPressureFromI2C_i32()!=0)
    cde4:	ebfffd8b 	bl	c418 <g_halBaro_readPressureFromI2C_i32>
    cde8:	e1a03000 	mov	r3, r0
    cdec:	e3530000 	cmp	r3, #0
    cdf0:	0a000001 	beq	cdfc <g_halImu_triggerBaroReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    cdf4:	e3a03001 	mov	r3, #1
    cdf8:	ea00000e 	b	ce38 <g_halImu_triggerBaroReading_bl+0x5c>

	if(g_halBaro_readTemperatureFromI2C_i32()!=0)
    cdfc:	ebfffdd8 	bl	c564 <g_halBaro_readTemperatureFromI2C_i32>
    ce00:	e1a03000 	mov	r3, r0
    ce04:	e3530000 	cmp	r3, #0
    ce08:	0a000001 	beq	ce14 <g_halImu_triggerBaroReading_bl+0x38>
	{return M_HAL_IMU_FAILED_BL;}
    ce0c:	e3a03001 	mov	r3, #1
    ce10:	ea000008 	b	ce38 <g_halImu_triggerBaroReading_bl+0x5c>

	m_halImu_imuValues_st.pressure_f64=g_halBaro_getPressure_f64();
    ce14:	ebfffd6b 	bl	c3c8 <g_halBaro_getPressure_f64>
    ce18:	eeb07b40 	vmov.f64	d7, d0
    ce1c:	e59f301c 	ldr	r3, [pc, #28]	; ce40 <g_halImu_triggerBaroReading_bl+0x64>
    ce20:	ed837b16 	vstr	d7, [r3, #88]	; 0x58
	m_halImu_imuValues_st.temperature_f64=g_halBaro_getTemperature_f64();
    ce24:	ebfffd71 	bl	c3f0 <g_halBaro_getTemperature_f64>
    ce28:	eeb07b40 	vmov.f64	d7, d0
    ce2c:	e59f300c 	ldr	r3, [pc, #12]	; ce40 <g_halImu_triggerBaroReading_bl+0x64>
    ce30:	ed837b14 	vstr	d7, [r3, #80]	; 0x50

	return M_HAL_IMU_SUCCESS_BL;
    ce34:	e3a03000 	mov	r3, #0
}
    ce38:	e1a00003 	mov	r0, r3
    ce3c:	e8bd8800 	pop	{fp, pc}
    ce40:	00019890 	.word	0x00019890

0000ce44 <g_halImu_triggerGyroReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerGyroReading_bl(void)
{
    ce44:	e92d4818 	push	{r3, r4, fp, lr}
    ce48:	e28db00c 	add	fp, sp, #12
	if(g_halGyro_readGyroscopeFromI2C_i32()!=0)
    ce4c:	ebfffe63 	bl	c7e0 <g_halGyro_readGyroscopeFromI2C_i32>
    ce50:	e1a03000 	mov	r3, r0
    ce54:	e3530000 	cmp	r3, #0
    ce58:	0a000001 	beq	ce64 <g_halImu_triggerGyroReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    ce5c:	e3a03001 	mov	r3, #1
    ce60:	ea000008 	b	ce88 <g_halImu_triggerGyroReading_bl+0x44>

	m_halImu_imuValues_st.gyro=g_halGyro_getGyroscope_st();
    ce64:	e59f4024 	ldr	r4, [pc, #36]	; ce90 <g_halImu_triggerGyroReading_bl+0x4c>
    ce68:	ebfffe3c 	bl	c760 <g_halGyro_getGyroscope_st>
    ce6c:	eeb05b40 	vmov.f64	d5, d0
    ce70:	eeb06b41 	vmov.f64	d6, d1
    ce74:	eeb07b42 	vmov.f64	d7, d2
    ce78:	ed845b0e 	vstr	d5, [r4, #56]	; 0x38
    ce7c:	ed846b10 	vstr	d6, [r4, #64]	; 0x40
    ce80:	ed847b12 	vstr	d7, [r4, #72]	; 0x48

	return M_HAL_IMU_SUCCESS_BL;
    ce84:	e3a03000 	mov	r3, #0
}
    ce88:	e1a00003 	mov	r0, r3
    ce8c:	e8bd8818 	pop	{r3, r4, fp, pc}
    ce90:	00019890 	.word	0x00019890

0000ce94 <g_halImu_triggerAccReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerAccReading_bl(void)
{
    ce94:	e92d4818 	push	{r3, r4, fp, lr}
    ce98:	e28db00c 	add	fp, sp, #12
	if(g_halAccmag_triggerAccUpdate_bl()!=0)
    ce9c:	ebfffccc 	bl	c1d4 <g_halAccmag_triggerAccUpdate_bl>
    cea0:	e1a03000 	mov	r3, r0
    cea4:	e3530000 	cmp	r3, #0
    cea8:	0a000001 	beq	ceb4 <g_halImu_triggerAccReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    ceac:	e3a03001 	mov	r3, #1
    ceb0:	ea000008 	b	ced8 <g_halImu_triggerAccReading_bl+0x44>

	m_halImu_imuValues_st.acc=g_halAccmag_getAccVector_st();
    ceb4:	e59f4024 	ldr	r4, [pc, #36]	; cee0 <g_halImu_triggerAccReading_bl+0x4c>
    ceb8:	ebfffcda 	bl	c228 <g_halAccmag_getAccVector_st>
    cebc:	eeb05b40 	vmov.f64	d5, d0
    cec0:	eeb06b41 	vmov.f64	d6, d1
    cec4:	eeb07b42 	vmov.f64	d7, d2
    cec8:	ed845b02 	vstr	d5, [r4, #8]
    cecc:	ed846b04 	vstr	d6, [r4, #16]
    ced0:	ed847b06 	vstr	d7, [r4, #24]

	return M_HAL_IMU_SUCCESS_BL;
    ced4:	e3a03000 	mov	r3, #0
}
    ced8:	e1a00003 	mov	r0, r3
    cedc:	e8bd8818 	pop	{r3, r4, fp, pc}
    cee0:	00019890 	.word	0x00019890

0000cee4 <g_halImu_triggerMagReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerMagReading_bl(void)
{
    cee4:	e92d4818 	push	{r3, r4, fp, lr}
    cee8:	e28db00c 	add	fp, sp, #12
	if(g_halAccmag_triggerMagUpdate_bl()!=0)
    ceec:	ebfffcbf 	bl	c1f0 <g_halAccmag_triggerMagUpdate_bl>
    cef0:	e1a03000 	mov	r3, r0
    cef4:	e3530000 	cmp	r3, #0
    cef8:	0a000001 	beq	cf04 <g_halImu_triggerMagReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    cefc:	e3a03001 	mov	r3, #1
    cf00:	ea000008 	b	cf28 <g_halImu_triggerMagReading_bl+0x44>

	m_halImu_imuValues_st.mag=g_halAccmag_getMagVector_st();
    cf04:	e59f4024 	ldr	r4, [pc, #36]	; cf30 <g_halImu_triggerMagReading_bl+0x4c>
    cf08:	ebfffcdc 	bl	c280 <g_halAccmag_getMagVector_st>
    cf0c:	eeb05b40 	vmov.f64	d5, d0
    cf10:	eeb06b41 	vmov.f64	d6, d1
    cf14:	eeb07b42 	vmov.f64	d7, d2
    cf18:	ed845b08 	vstr	d5, [r4, #32]
    cf1c:	ed846b0a 	vstr	d6, [r4, #40]	; 0x28
    cf20:	ed847b0c 	vstr	d7, [r4, #48]	; 0x30

	return M_HAL_IMU_SUCCESS_BL;
    cf24:	e3a03000 	mov	r3, #0
}
    cf28:	e1a00003 	mov	r0, r3
    cf2c:	e8bd8818 	pop	{r3, r4, fp, pc}
    cf30:	00019890 	.word	0x00019890

0000cf34 <g_halImu_triggerImuReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerImuReading_bl(void)
{
    cf34:	e92d4818 	push	{r3, r4, fp, lr}
    cf38:	e28db00c 	add	fp, sp, #12
	if(g_halBaro_readPressureFromI2C_i32()!=0)
    cf3c:	ebfffd35 	bl	c418 <g_halBaro_readPressureFromI2C_i32>
    cf40:	e1a03000 	mov	r3, r0
    cf44:	e3530000 	cmp	r3, #0
    cf48:	0a000001 	beq	cf54 <g_halImu_triggerImuReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    cf4c:	e3a03001 	mov	r3, #1
    cf50:	ea000038 	b	d038 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halBaro_readTemperatureFromI2C_i32()!=0)
    cf54:	ebfffd82 	bl	c564 <g_halBaro_readTemperatureFromI2C_i32>
    cf58:	e1a03000 	mov	r3, r0
    cf5c:	e3530000 	cmp	r3, #0
    cf60:	0a000001 	beq	cf6c <g_halImu_triggerImuReading_bl+0x38>
	{return M_HAL_IMU_FAILED_BL;}
    cf64:	e3a03001 	mov	r3, #1
    cf68:	ea000032 	b	d038 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halGyro_readGyroscopeFromI2C_i32()!=0)
    cf6c:	ebfffe1b 	bl	c7e0 <g_halGyro_readGyroscopeFromI2C_i32>
    cf70:	e1a03000 	mov	r3, r0
    cf74:	e3530000 	cmp	r3, #0
    cf78:	0a000001 	beq	cf84 <g_halImu_triggerImuReading_bl+0x50>
	{return M_HAL_IMU_FAILED_BL;}
    cf7c:	e3a03001 	mov	r3, #1
    cf80:	ea00002c 	b	d038 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halAccmag_triggerAccUpdate_bl()!=0)
    cf84:	ebfffc92 	bl	c1d4 <g_halAccmag_triggerAccUpdate_bl>
    cf88:	e1a03000 	mov	r3, r0
    cf8c:	e3530000 	cmp	r3, #0
    cf90:	0a000001 	beq	cf9c <g_halImu_triggerImuReading_bl+0x68>
	{return M_HAL_IMU_FAILED_BL;}
    cf94:	e3a03001 	mov	r3, #1
    cf98:	ea000026 	b	d038 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halAccmag_triggerMagUpdate_bl()!=0)
    cf9c:	ebfffc93 	bl	c1f0 <g_halAccmag_triggerMagUpdate_bl>
    cfa0:	e1a03000 	mov	r3, r0
    cfa4:	e3530000 	cmp	r3, #0
    cfa8:	0a000001 	beq	cfb4 <g_halImu_triggerImuReading_bl+0x80>
	{return M_HAL_IMU_FAILED_BL;}
    cfac:	e3a03001 	mov	r3, #1
    cfb0:	ea000020 	b	d038 <g_halImu_triggerImuReading_bl+0x104>

	m_halImu_imuValues_st.mag=g_halAccmag_getMagVector_st();
    cfb4:	e59f4084 	ldr	r4, [pc, #132]	; d040 <g_halImu_triggerImuReading_bl+0x10c>
    cfb8:	ebfffcb0 	bl	c280 <g_halAccmag_getMagVector_st>
    cfbc:	eeb05b40 	vmov.f64	d5, d0
    cfc0:	eeb06b41 	vmov.f64	d6, d1
    cfc4:	eeb07b42 	vmov.f64	d7, d2
    cfc8:	ed845b08 	vstr	d5, [r4, #32]
    cfcc:	ed846b0a 	vstr	d6, [r4, #40]	; 0x28
    cfd0:	ed847b0c 	vstr	d7, [r4, #48]	; 0x30
	m_halImu_imuValues_st.acc=g_halAccmag_getAccVector_st();
    cfd4:	e59f4064 	ldr	r4, [pc, #100]	; d040 <g_halImu_triggerImuReading_bl+0x10c>
    cfd8:	ebfffc92 	bl	c228 <g_halAccmag_getAccVector_st>
    cfdc:	eeb05b40 	vmov.f64	d5, d0
    cfe0:	eeb06b41 	vmov.f64	d6, d1
    cfe4:	eeb07b42 	vmov.f64	d7, d2
    cfe8:	ed845b02 	vstr	d5, [r4, #8]
    cfec:	ed846b04 	vstr	d6, [r4, #16]
    cff0:	ed847b06 	vstr	d7, [r4, #24]
	m_halImu_imuValues_st.gyro=g_halGyro_getGyroscope_st();
    cff4:	e59f4044 	ldr	r4, [pc, #68]	; d040 <g_halImu_triggerImuReading_bl+0x10c>
    cff8:	ebfffdd8 	bl	c760 <g_halGyro_getGyroscope_st>
    cffc:	eeb05b40 	vmov.f64	d5, d0
    d000:	eeb06b41 	vmov.f64	d6, d1
    d004:	eeb07b42 	vmov.f64	d7, d2
    d008:	ed845b0e 	vstr	d5, [r4, #56]	; 0x38
    d00c:	ed846b10 	vstr	d6, [r4, #64]	; 0x40
    d010:	ed847b12 	vstr	d7, [r4, #72]	; 0x48
	m_halImu_imuValues_st.pressure_f64=g_halBaro_getPressure_f64();
    d014:	ebfffceb 	bl	c3c8 <g_halBaro_getPressure_f64>
    d018:	eeb07b40 	vmov.f64	d7, d0
    d01c:	e59f301c 	ldr	r3, [pc, #28]	; d040 <g_halImu_triggerImuReading_bl+0x10c>
    d020:	ed837b16 	vstr	d7, [r3, #88]	; 0x58
	m_halImu_imuValues_st.temperature_f64=g_halBaro_getTemperature_f64();
    d024:	ebfffcf1 	bl	c3f0 <g_halBaro_getTemperature_f64>
    d028:	eeb07b40 	vmov.f64	d7, d0
    d02c:	e59f300c 	ldr	r3, [pc, #12]	; d040 <g_halImu_triggerImuReading_bl+0x10c>
    d030:	ed837b14 	vstr	d7, [r3, #80]	; 0x50

	return M_HAL_IMU_SUCCESS_BL;
    d034:	e3a03000 	mov	r3, #0
}
    d038:	e1a00003 	mov	r0, r3
    d03c:	e8bd8818 	pop	{r3, r4, fp, pc}
    d040:	00019890 	.word	0x00019890
    d044:	00000000 	.word	0x00000000

0000d048 <g_LIDAR_getDistance_f64>:
 *
 * \endinternal
 ********************************************************************** */

double g_LIDAR_getDistance_f64(void)
{
    d048:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    d04c:	e28db000 	add	fp, sp, #0
	return m_distance_f64;
    d050:	e59f3014 	ldr	r3, [pc, #20]	; d06c <g_LIDAR_getDistance_f64+0x24>
    d054:	e1c320d0 	ldrd	r2, [r3]
    d058:	ec432b17 	vmov	d7, r2, r3
}
    d05c:	eeb00b47 	vmov.f64	d0, d7
    d060:	e24bd000 	sub	sp, fp, #0
    d064:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    d068:	e12fff1e 	bx	lr
    d06c:	000198f0 	.word	0x000198f0

0000d070 <g_LIDAR_readDistanceFromI2C_i32>:
 *
 * \endinternal
 ********************************************************************** */

int g_LIDAR_readDistanceFromI2C_i32(void)
{
    d070:	e92d4800 	push	{fp, lr}
    d074:	e28db004 	add	fp, sp, #4
    d078:	e24dd010 	sub	sp, sp, #16
unsigned char l_ReadBuffer_ui8[2]={0,0};
    d07c:	e3a03000 	mov	r3, #0
    d080:	e54b300c 	strb	r3, [fp, #-12]
    d084:	e3a03000 	mov	r3, #0
    d088:	e54b300b 	strb	r3, [fp, #-11]
unsigned char l_WriteBuffer_ui8[2]={0,0};
    d08c:	e3a03000 	mov	r3, #0
    d090:	e54b3010 	strb	r3, [fp, #-16]
    d094:	e3a03000 	mov	r3, #0
    d098:	e54b300f 	strb	r3, [fp, #-15]
int l_DistInCm_i32 =  0;
    d09c:	e3a03000 	mov	r3, #0
    d0a0:	e50b3008 	str	r3, [fp, #-8]

//Trigger Measurement of Distance (DC stabnilization cycle, Signal Acquisition, DataProcessing)
l_WriteBuffer_ui8[0]=0x00; 								//write Reg 0x00
    d0a4:	e3a03000 	mov	r3, #0
    d0a8:	e54b3010 	strb	r3, [fp, #-16]
l_WriteBuffer_ui8[1]=0x04; 								//with value 0x04
    d0ac:	e3a03004 	mov	r3, #4
    d0b0:	e54b300f 	strb	r3, [fp, #-15]
if(g_lldI2c_WriteI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, l_WriteBuffer_ui8, 2)!=0)
    d0b4:	e24b3010 	sub	r3, fp, #16
    d0b8:	e3a00062 	mov	r0, #98	; 0x62
    d0bc:	e1a01003 	mov	r1, r3
    d0c0:	e3a02002 	mov	r2, #2
    d0c4:	eb0000b8 	bl	d3ac <g_lldI2c_WriteI2c0_bl>
    d0c8:	e1a03000 	mov	r3, r0
    d0cc:	e3530000 	cmp	r3, #0
    d0d0:	0a000001 	beq	d0dc <g_LIDAR_readDistanceFromI2C_i32+0x6c>
{
return -1;
    d0d4:	e3e03000 	mvn	r3, #0
    d0d8:	ea000038 	b	d1c0 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Waiting Time for Acquisition
usleep(20*1000);
    d0dc:	e59f00f4 	ldr	r0, [pc, #244]	; d1d8 <g_LIDAR_readDistanceFromI2C_i32+0x168>
    d0e0:	ebffee50 	bl	8a28 <_init+0xb0>


//Set Acquisition count cycle to 255
l_WriteBuffer_ui8[0]=0x02;
    d0e4:	e3a03002 	mov	r3, #2
    d0e8:	e54b3010 	strb	r3, [fp, #-16]
l_WriteBuffer_ui8[1]=0xFF;
    d0ec:	e3e03000 	mvn	r3, #0
    d0f0:	e54b300f 	strb	r3, [fp, #-15]
if(g_lldI2c_WriteI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, l_WriteBuffer_ui8, 2)!=0)
    d0f4:	e24b3010 	sub	r3, fp, #16
    d0f8:	e3a00062 	mov	r0, #98	; 0x62
    d0fc:	e1a01003 	mov	r1, r3
    d100:	e3a02002 	mov	r2, #2
    d104:	eb0000a8 	bl	d3ac <g_lldI2c_WriteI2c0_bl>
    d108:	e1a03000 	mov	r3, r0
    d10c:	e3530000 	cmp	r3, #0
    d110:	0a000001 	beq	d11c <g_LIDAR_readDistanceFromI2C_i32+0xac>
{
return -1;
    d114:	e3e03000 	mvn	r3, #0
    d118:	ea000028 	b	d1c0 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Set Reg 0x8f as Output-Register
l_WriteBuffer_ui8[0]=0x8f;
    d11c:	e3e03070 	mvn	r3, #112	; 0x70
    d120:	e54b3010 	strb	r3, [fp, #-16]
if(g_lldI2c_WriteI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, l_WriteBuffer_ui8, 1)!=0)
    d124:	e24b3010 	sub	r3, fp, #16
    d128:	e3a00062 	mov	r0, #98	; 0x62
    d12c:	e1a01003 	mov	r1, r3
    d130:	e3a02001 	mov	r2, #1
    d134:	eb00009c 	bl	d3ac <g_lldI2c_WriteI2c0_bl>
    d138:	e1a03000 	mov	r3, r0
    d13c:	e3530000 	cmp	r3, #0
    d140:	0a000001 	beq	d14c <g_LIDAR_readDistanceFromI2C_i32+0xdc>
{
return -1;
    d144:	e3e03000 	mvn	r3, #0
    d148:	ea00001c 	b	d1c0 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Read 2-Byte Distance in cm from Register 0x8f
if(g_lldI2c_ReadI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, (l_ReadBuffer_ui8), 2)!=0)
    d14c:	e24b300c 	sub	r3, fp, #12
    d150:	e3a00062 	mov	r0, #98	; 0x62
    d154:	e1a01003 	mov	r1, r3
    d158:	e3a02002 	mov	r2, #2
    d15c:	eb0000ca 	bl	d48c <g_lldI2c_ReadI2c0_bl>
    d160:	e1a03000 	mov	r3, r0
    d164:	e3530000 	cmp	r3, #0
    d168:	0a000001 	beq	d174 <g_LIDAR_readDistanceFromI2C_i32+0x104>
{
return -1;
    d16c:	e3e03000 	mvn	r3, #0
    d170:	ea000012 	b	d1c0 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Conversion from int(cm) to double(m)
l_DistInCm_i32 = *l_ReadBuffer_ui8 << 8;
    d174:	e55b300c 	ldrb	r3, [fp, #-12]
    d178:	e1a03403 	lsl	r3, r3, #8
    d17c:	e50b3008 	str	r3, [fp, #-8]
l_DistInCm_i32 |= *(l_ReadBuffer_ui8+1);
    d180:	e55b300b 	ldrb	r3, [fp, #-11]
    d184:	e51b2008 	ldr	r2, [fp, #-8]
    d188:	e1823003 	orr	r3, r2, r3
    d18c:	e50b3008 	str	r3, [fp, #-8]
m_distance_f64 = (double)l_DistInCm_i32;
    d190:	e51b3008 	ldr	r3, [fp, #-8]
    d194:	ee063a90 	vmov	s13, r3
    d198:	eeb87be6 	vcvt.f64.s32	d7, s13
    d19c:	e59f3038 	ldr	r3, [pc, #56]	; d1dc <g_LIDAR_readDistanceFromI2C_i32+0x16c>
    d1a0:	ed837b00 	vstr	d7, [r3]
m_distance_f64 = (m_distance_f64/100);
    d1a4:	e59f3030 	ldr	r3, [pc, #48]	; d1dc <g_LIDAR_readDistanceFromI2C_i32+0x16c>
    d1a8:	ed936b00 	vldr	d6, [r3]
    d1ac:	ed9f7b07 	vldr	d7, [pc, #28]	; d1d0 <g_LIDAR_readDistanceFromI2C_i32+0x160>
    d1b0:	ee867b07 	vdiv.f64	d7, d6, d7
    d1b4:	e59f3020 	ldr	r3, [pc, #32]	; d1dc <g_LIDAR_readDistanceFromI2C_i32+0x16c>
    d1b8:	ed837b00 	vstr	d7, [r3]
//printf("Distance: %d / %.2f\n",l_DistInCm_i32,m_distance_f64);
//usleep(500*1000);


return 0;
    d1bc:	e3a03000 	mov	r3, #0
}
    d1c0:	e1a00003 	mov	r0, r3
    d1c4:	e24bd004 	sub	sp, fp, #4
    d1c8:	e8bd8800 	pop	{fp, pc}
    d1cc:	e1a00000 	nop			; (mov r0, r0)
    d1d0:	00000000 	.word	0x00000000
    d1d4:	40590000 	.word	0x40590000
    d1d8:	00004e20 	.word	0x00004e20
    d1dc:	000198f0 	.word	0x000198f0

0000d1e0 <g_lldI2c_WriteI2c_bl>:
 * 2015/05/06 phwogs00:
 * Changed variable and function names in order to guideline
 * \endinternal
 ***********************************************************************/
unsigned int g_lldI2c_WriteI2c_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_i2cWriteBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    d1e0:	e92d4800 	push	{fp, lr}
    d1e4:	e28db004 	add	fp, sp, #4
    d1e8:	e24dd020 	sub	sp, sp, #32
    d1ec:	e1a03000 	mov	r3, r0
    d1f0:	e50b101c 	str	r1, [fp, #-28]
    d1f4:	e50b2020 	str	r2, [fp, #-32]
    d1f8:	e54b3015 	strb	r3, [fp, #-21]
	unsigned char 	l_returnOfWrittenBytes_ui8 	= 0;
    d1fc:	e3a03000 	mov	r3, #0
    d200:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_WriteRetryCounter_ui8 	= 0;
    d204:	e3a03000 	mov	r3, #0
    d208:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 				= 0;
    d20c:	e3a03000 	mov	r3, #0
    d210:	e50b300c 	str	r3, [fp, #-12]

	//TODO: DEL
	unsigned char test = f_i2cWriteBuffer_pui8[0];
    d214:	e51b301c 	ldr	r3, [fp, #-28]
    d218:	e5d33000 	ldrb	r3, [r3]
    d21c:	e54b300d 	strb	r3, [fp, #-13]
	//TODO: END

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C_DEV_UI8, O_RDWR);
    d220:	e59f009c 	ldr	r0, [pc, #156]	; d2c4 <g_lldI2c_WriteI2c_bl+0xe4>
    d224:	e3a01002 	mov	r1, #2
    d228:	ebffedda 	bl	8998 <_init+0x20>
    d22c:	e1a03000 	mov	r3, r0
    d230:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    d234:	e51b200c 	ldr	r2, [fp, #-12]
    d238:	e55b3015 	ldrb	r3, [fp, #-21]
    d23c:	e1a00002 	mov	r0, r2
    d240:	e59f1080 	ldr	r1, [pc, #128]	; d2c8 <g_lldI2c_WriteI2c_bl+0xe8>
    d244:	e1a02003 	mov	r2, r3
    d248:	ebffee14 	bl	8aa0 <_init+0x128>

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    d24c:	ea000009 	b	d278 <g_lldI2c_WriteI2c_bl+0x98>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    d250:	e51b300c 	ldr	r3, [fp, #-12]
    d254:	e1a00003 	mov	r0, r3
    d258:	e51b101c 	ldr	r1, [fp, #-28]
    d25c:	e51b2020 	ldr	r2, [fp, #-32]
    d260:	ebffedf9 	bl	8a4c <_init+0xd4>
    d264:	e1a03000 	mov	r3, r0
    d268:	e54b3005 	strb	r3, [fp, #-5]
		l_WriteRetryCounter_ui8++;
    d26c:	e55b3006 	ldrb	r3, [fp, #-6]
    d270:	e2833001 	add	r3, r3, #1
    d274:	e54b3006 	strb	r3, [fp, #-6]

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    d278:	e55b2005 	ldrb	r2, [fp, #-5]
    d27c:	e51b3020 	ldr	r3, [fp, #-32]
    d280:	e1520003 	cmp	r2, r3
    d284:	0a000002 	beq	d294 <g_lldI2c_WriteI2c_bl+0xb4>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    d288:	e55b3006 	ldrb	r3, [fp, #-6]
    d28c:	e3530002 	cmp	r3, #2
    d290:	9affffee 	bls	d250 <g_lldI2c_WriteI2c_bl+0x70>
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_WriteRetryCounter_ui8++;
	}

	if(l_WriteRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    d294:	e55b3006 	ldrb	r3, [fp, #-6]
    d298:	e3530002 	cmp	r3, #2
    d29c:	9a000001 	bls	d2a8 <g_lldI2c_WriteI2c_bl+0xc8>
	{
		return 1;
    d2a0:	e3a03001 	mov	r3, #1
    d2a4:	ea000003 	b	d2b8 <g_lldI2c_WriteI2c_bl+0xd8>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    d2a8:	e51b300c 	ldr	r3, [fp, #-12]
    d2ac:	e1a00003 	mov	r0, r3
    d2b0:	ebffee09 	bl	8adc <_init+0x164>
	{
		/*ERROR HANDLER*/
		return 1;
	}

	return 0;
    d2b4:	e3a03000 	mov	r3, #0
}
    d2b8:	e1a00003 	mov	r0, r3
    d2bc:	e24bd004 	sub	sp, fp, #4
    d2c0:	e8bd8800 	pop	{fp, pc}
    d2c4:	000110c0 	.word	0x000110c0
    d2c8:	00000703 	.word	0x00000703

0000d2cc <g_lldI2c_ReadI2c_bl>:
 * Changed variable and function names in order to guideline
 *   *
 * \endinternal
 ***********************************************************************/ 
unsigned int g_lldI2c_ReadI2c_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_lldI2c_i2cReadBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    d2cc:	e92d4800 	push	{fp, lr}
    d2d0:	e28db004 	add	fp, sp, #4
    d2d4:	e24dd018 	sub	sp, sp, #24
    d2d8:	e1a03000 	mov	r3, r0
    d2dc:	e50b1014 	str	r1, [fp, #-20]
    d2e0:	e50b2018 	str	r2, [fp, #-24]
    d2e4:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_ReturnOfReadBytes_ui8 = 0;
    d2e8:	e3a03000 	mov	r3, #0
    d2ec:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_ReadRetryCounter_ui8 	= 0;
    d2f0:	e3a03000 	mov	r3, #0
    d2f4:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 			= 0;
    d2f8:	e3a03000 	mov	r3, #0
    d2fc:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C_DEV_UI8, O_RDWR);   //Open I2C device
    d300:	e59f009c 	ldr	r0, [pc, #156]	; d3a4 <g_lldI2c_ReadI2c_bl+0xd8>
    d304:	e3a01002 	mov	r1, #2
    d308:	ebffeda2 	bl	8998 <_init+0x20>
    d30c:	e1a03000 	mov	r3, r0
    d310:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    d314:	e51b200c 	ldr	r2, [fp, #-12]
    d318:	e55b300d 	ldrb	r3, [fp, #-13]
    d31c:	e1a00002 	mov	r0, r2
    d320:	e59f1080 	ldr	r1, [pc, #128]	; d3a8 <g_lldI2c_ReadI2c_bl+0xdc>
    d324:	e1a02003 	mov	r2, r3
    d328:	ebffeddc 	bl	8aa0 <_init+0x128>

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    d32c:	ea000009 	b	d358 <g_lldI2c_ReadI2c_bl+0x8c>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    d330:	e51b300c 	ldr	r3, [fp, #-12]
    d334:	e1a00003 	mov	r0, r3
    d338:	e51b1014 	ldr	r1, [fp, #-20]
    d33c:	e51b2018 	ldr	r2, [fp, #-24]
    d340:	ebffedbe 	bl	8a40 <_init+0xc8>
    d344:	e1a03000 	mov	r3, r0
    d348:	e54b3005 	strb	r3, [fp, #-5]
		l_ReadRetryCounter_ui8++;
    d34c:	e55b3006 	ldrb	r3, [fp, #-6]
    d350:	e2833001 	add	r3, r3, #1
    d354:	e54b3006 	strb	r3, [fp, #-6]
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    d358:	e55b2005 	ldrb	r2, [fp, #-5]
    d35c:	e51b3018 	ldr	r3, [fp, #-24]
    d360:	e1520003 	cmp	r2, r3
    d364:	0a000002 	beq	d374 <g_lldI2c_ReadI2c_bl+0xa8>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    d368:	e55b3006 	ldrb	r3, [fp, #-6]
    d36c:	e3530002 	cmp	r3, #2
    d370:	9affffee 	bls	d330 <g_lldI2c_ReadI2c_bl+0x64>
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_ReadRetryCounter_ui8++;
	}

	if(l_ReadRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    d374:	e55b3006 	ldrb	r3, [fp, #-6]
    d378:	e3530002 	cmp	r3, #2
    d37c:	9a000001 	bls	d388 <g_lldI2c_ReadI2c_bl+0xbc>
	{
		return 1;
    d380:	e3a03001 	mov	r3, #1
    d384:	ea000003 	b	d398 <g_lldI2c_ReadI2c_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    d388:	e51b300c 	ldr	r3, [fp, #-12]
    d38c:	e1a00003 	mov	r0, r3
    d390:	ebffedd1 	bl	8adc <_init+0x164>
	if(l_i2cFile_ui32 < 0)
	{
		/*ERROR HANDLER*/
		return 1;
	}
	return(0);
    d394:	e3a03000 	mov	r3, #0

}
    d398:	e1a00003 	mov	r0, r3
    d39c:	e24bd004 	sub	sp, fp, #4
    d3a0:	e8bd8800 	pop	{fp, pc}
    d3a4:	000110c0 	.word	0x000110c0
    d3a8:	00000703 	.word	0x00000703

0000d3ac <g_lldI2c_WriteI2c0_bl>:
 *
 * 
 * \endinternal
 ***********************************************************************/
unsigned int g_lldI2c_WriteI2c0_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_i2cWriteBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    d3ac:	e92d4800 	push	{fp, lr}
    d3b0:	e28db004 	add	fp, sp, #4
    d3b4:	e24dd018 	sub	sp, sp, #24
    d3b8:	e1a03000 	mov	r3, r0
    d3bc:	e50b1014 	str	r1, [fp, #-20]
    d3c0:	e50b2018 	str	r2, [fp, #-24]
    d3c4:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_returnOfWrittenBytes_ui8 	= 0;
    d3c8:	e3a03000 	mov	r3, #0
    d3cc:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_WriteRetryCounter_ui8 	= 0;
    d3d0:	e3a03000 	mov	r3, #0
    d3d4:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 				= 0;
    d3d8:	e3a03000 	mov	r3, #0
    d3dc:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C0_DEV_UI8, O_RDWR);
    d3e0:	e59f009c 	ldr	r0, [pc, #156]	; d484 <g_lldI2c_WriteI2c0_bl+0xd8>
    d3e4:	e3a01002 	mov	r1, #2
    d3e8:	ebffed6a 	bl	8998 <_init+0x20>
    d3ec:	e1a03000 	mov	r3, r0
    d3f0:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    d3f4:	e51b200c 	ldr	r2, [fp, #-12]
    d3f8:	e55b300d 	ldrb	r3, [fp, #-13]
    d3fc:	e1a00002 	mov	r0, r2
    d400:	e59f1080 	ldr	r1, [pc, #128]	; d488 <g_lldI2c_WriteI2c0_bl+0xdc>
    d404:	e1a02003 	mov	r2, r3
    d408:	ebffeda4 	bl	8aa0 <_init+0x128>

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    d40c:	ea000009 	b	d438 <g_lldI2c_WriteI2c0_bl+0x8c>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    d410:	e51b300c 	ldr	r3, [fp, #-12]
    d414:	e1a00003 	mov	r0, r3
    d418:	e51b1014 	ldr	r1, [fp, #-20]
    d41c:	e51b2018 	ldr	r2, [fp, #-24]
    d420:	ebffed89 	bl	8a4c <_init+0xd4>
    d424:	e1a03000 	mov	r3, r0
    d428:	e54b3005 	strb	r3, [fp, #-5]
		l_WriteRetryCounter_ui8++;
    d42c:	e55b3006 	ldrb	r3, [fp, #-6]
    d430:	e2833001 	add	r3, r3, #1
    d434:	e54b3006 	strb	r3, [fp, #-6]

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    d438:	e55b2005 	ldrb	r2, [fp, #-5]
    d43c:	e51b3018 	ldr	r3, [fp, #-24]
    d440:	e1520003 	cmp	r2, r3
    d444:	0a000002 	beq	d454 <g_lldI2c_WriteI2c0_bl+0xa8>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    d448:	e55b3006 	ldrb	r3, [fp, #-6]
    d44c:	e3530002 	cmp	r3, #2
    d450:	9affffee 	bls	d410 <g_lldI2c_WriteI2c0_bl+0x64>
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_WriteRetryCounter_ui8++;
	}

	if(l_WriteRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    d454:	e55b3006 	ldrb	r3, [fp, #-6]
    d458:	e3530002 	cmp	r3, #2
    d45c:	9a000001 	bls	d468 <g_lldI2c_WriteI2c0_bl+0xbc>
	{
		return 1;
    d460:	e3a03001 	mov	r3, #1
    d464:	ea000003 	b	d478 <g_lldI2c_WriteI2c0_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    d468:	e51b300c 	ldr	r3, [fp, #-12]
    d46c:	e1a00003 	mov	r0, r3
    d470:	ebffed99 	bl	8adc <_init+0x164>
	{
		/*ERROR HANDLER*/
		return 1;
	}

	return 0;
    d474:	e3a03000 	mov	r3, #0
}
    d478:	e1a00003 	mov	r0, r3
    d47c:	e24bd004 	sub	sp, fp, #4
    d480:	e8bd8800 	pop	{fp, pc}
    d484:	000110cc 	.word	0x000110cc
    d488:	00000703 	.word	0x00000703

0000d48c <g_lldI2c_ReadI2c0_bl>:
 * 
 * 
 *  * \endinternal
 ***********************************************************************/ 
unsigned int g_lldI2c_ReadI2c0_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_lldI2c_i2cReadBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    d48c:	e92d4800 	push	{fp, lr}
    d490:	e28db004 	add	fp, sp, #4
    d494:	e24dd018 	sub	sp, sp, #24
    d498:	e1a03000 	mov	r3, r0
    d49c:	e50b1014 	str	r1, [fp, #-20]
    d4a0:	e50b2018 	str	r2, [fp, #-24]
    d4a4:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_ReturnOfReadBytes_ui8 = 0;
    d4a8:	e3a03000 	mov	r3, #0
    d4ac:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_ReadRetryCounter_ui8 	= 0;
    d4b0:	e3a03000 	mov	r3, #0
    d4b4:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 			= 0;
    d4b8:	e3a03000 	mov	r3, #0
    d4bc:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C0_DEV_UI8, O_RDWR);   //Open I2C device
    d4c0:	e59f009c 	ldr	r0, [pc, #156]	; d564 <g_lldI2c_ReadI2c0_bl+0xd8>
    d4c4:	e3a01002 	mov	r1, #2
    d4c8:	ebffed32 	bl	8998 <_init+0x20>
    d4cc:	e1a03000 	mov	r3, r0
    d4d0:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    d4d4:	e51b200c 	ldr	r2, [fp, #-12]
    d4d8:	e55b300d 	ldrb	r3, [fp, #-13]
    d4dc:	e1a00002 	mov	r0, r2
    d4e0:	e59f1080 	ldr	r1, [pc, #128]	; d568 <g_lldI2c_ReadI2c0_bl+0xdc>
    d4e4:	e1a02003 	mov	r2, r3
    d4e8:	ebffed6c 	bl	8aa0 <_init+0x128>

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    d4ec:	ea000009 	b	d518 <g_lldI2c_ReadI2c0_bl+0x8c>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    d4f0:	e51b300c 	ldr	r3, [fp, #-12]
    d4f4:	e1a00003 	mov	r0, r3
    d4f8:	e51b1014 	ldr	r1, [fp, #-20]
    d4fc:	e51b2018 	ldr	r2, [fp, #-24]
    d500:	ebffed4e 	bl	8a40 <_init+0xc8>
    d504:	e1a03000 	mov	r3, r0
    d508:	e54b3005 	strb	r3, [fp, #-5]
		l_ReadRetryCounter_ui8++;
    d50c:	e55b3006 	ldrb	r3, [fp, #-6]
    d510:	e2833001 	add	r3, r3, #1
    d514:	e54b3006 	strb	r3, [fp, #-6]
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    d518:	e55b2005 	ldrb	r2, [fp, #-5]
    d51c:	e51b3018 	ldr	r3, [fp, #-24]
    d520:	e1520003 	cmp	r2, r3
    d524:	0a000002 	beq	d534 <g_lldI2c_ReadI2c0_bl+0xa8>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    d528:	e55b3006 	ldrb	r3, [fp, #-6]
    d52c:	e3530002 	cmp	r3, #2
    d530:	9affffee 	bls	d4f0 <g_lldI2c_ReadI2c0_bl+0x64>
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_ReadRetryCounter_ui8++;
	}

	if(l_ReadRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    d534:	e55b3006 	ldrb	r3, [fp, #-6]
    d538:	e3530002 	cmp	r3, #2
    d53c:	9a000001 	bls	d548 <g_lldI2c_ReadI2c0_bl+0xbc>
	{
		return 1;
    d540:	e3a03001 	mov	r3, #1
    d544:	ea000003 	b	d558 <g_lldI2c_ReadI2c0_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    d548:	e51b300c 	ldr	r3, [fp, #-12]
    d54c:	e1a00003 	mov	r0, r3
    d550:	ebffed61 	bl	8adc <_init+0x164>
	if(l_i2cFile_ui32 < 0)
	{
		/*ERROR HANDLER*/
		return 1;
	}
	return(0);
    d554:	e3a03000 	mov	r3, #0

}
    d558:	e1a00003 	mov	r0, r3
    d55c:	e24bd004 	sub	sp, fp, #4
    d560:	e8bd8800 	pop	{fp, pc}
    d564:	000110cc 	.word	0x000110cc
    d568:	00000703 	.word	0x00000703

0000d56c <g_lldUart_uartOpen_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_lldUart_uartOpen_i32(void)
{
    d56c:	e92d4800 	push	{fp, lr}
    d570:	e28db004 	add	fp, sp, #4
    d574:	e24dd040 	sub	sp, sp, #64	; 0x40
	l_filestream_i32 = open("/dev/ttyAMA0", O_RDWR | O_NOCTTY | O_NDELAY);
    d578:	e59f00a8 	ldr	r0, [pc, #168]	; d628 <g_lldUart_uartOpen_i32+0xbc>
    d57c:	e59f10a8 	ldr	r1, [pc, #168]	; d62c <g_lldUart_uartOpen_i32+0xc0>
    d580:	ebffed04 	bl	8998 <_init+0x20>
    d584:	e1a02000 	mov	r2, r0
    d588:	e59f30a0 	ldr	r3, [pc, #160]	; d630 <g_lldUart_uartOpen_i32+0xc4>
    d58c:	e5832000 	str	r2, [r3]
	if (l_filestream_i32 == -1)
    d590:	e59f3098 	ldr	r3, [pc, #152]	; d630 <g_lldUart_uartOpen_i32+0xc4>
    d594:	e5933000 	ldr	r3, [r3]
    d598:	e3730001 	cmn	r3, #1
    d59c:	1a000001 	bne	d5a8 <g_lldUart_uartOpen_i32+0x3c>
	{
		//Error UART can not be opened
		return(-1);
    d5a0:	e3e03000 	mvn	r3, #0
    d5a4:	ea00001c 	b	d61c <g_lldUart_uartOpen_i32+0xb0>
	}
	struct termios l_options_st;
	tcgetattr(l_filestream_i32, &l_options_st);
    d5a8:	e59f3080 	ldr	r3, [pc, #128]	; d630 <g_lldUart_uartOpen_i32+0xc4>
    d5ac:	e5932000 	ldr	r2, [r3]
    d5b0:	e24b3040 	sub	r3, fp, #64	; 0x40
    d5b4:	e1a00002 	mov	r0, r2
    d5b8:	e1a01003 	mov	r1, r3
    d5bc:	ebffed2b 	bl	8a70 <_init+0xf8>
	l_options_st.c_cflag = B9600 | CS8 | CLOCAL | CREAD;
    d5c0:	e59f306c 	ldr	r3, [pc, #108]	; d634 <g_lldUart_uartOpen_i32+0xc8>
    d5c4:	e50b3038 	str	r3, [fp, #-56]	; 0x38
	l_options_st.c_iflag = IGNPAR;
    d5c8:	e3a03004 	mov	r3, #4
    d5cc:	e50b3040 	str	r3, [fp, #-64]	; 0x40
	l_options_st.c_oflag = 0;
    d5d0:	e3a03000 	mov	r3, #0
    d5d4:	e50b303c 	str	r3, [fp, #-60]	; 0x3c
	l_options_st.c_lflag = 0;
    d5d8:	e3a03000 	mov	r3, #0
    d5dc:	e50b3034 	str	r3, [fp, #-52]	; 0x34
	tcflush(l_filestream_i32, TCIFLUSH);
    d5e0:	e59f3048 	ldr	r3, [pc, #72]	; d630 <g_lldUart_uartOpen_i32+0xc4>
    d5e4:	e5933000 	ldr	r3, [r3]
    d5e8:	e1a00003 	mov	r0, r3
    d5ec:	e3a01000 	mov	r1, #0
    d5f0:	ebffed21 	bl	8a7c <_init+0x104>
	tcsetattr(l_filestream_i32, TCSANOW, &l_options_st);
    d5f4:	e59f3034 	ldr	r3, [pc, #52]	; d630 <g_lldUart_uartOpen_i32+0xc4>
    d5f8:	e5932000 	ldr	r2, [r3]
    d5fc:	e24b3040 	sub	r3, fp, #64	; 0x40
    d600:	e1a00002 	mov	r0, r2
    d604:	e3a01000 	mov	r1, #0
    d608:	e1a02003 	mov	r2, r3
    d60c:	ebffed47 	bl	8b30 <_init+0x1b8>
	sleep(3);
    d610:	e3a00003 	mov	r0, #3
    d614:	ebffed39 	bl	8b00 <_init+0x188>
	return(0);
    d618:	e3a03000 	mov	r3, #0
}
    d61c:	e1a00003 	mov	r0, r3
    d620:	e24bd004 	sub	sp, fp, #4
    d624:	e8bd8800 	pop	{fp, pc}
    d628:	000110d8 	.word	0x000110d8
    d62c:	00000902 	.word	0x00000902
    d630:	00019368 	.word	0x00019368
    d634:	000008bd 	.word	0x000008bd

0000d638 <g_lldUart_readByte_ch>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
char g_lldUart_readByte_ch(void)
{
    d638:	e92d4800 	push	{fp, lr}
    d63c:	e28db004 	add	fp, sp, #4
    d640:	e24dd008 	sub	sp, sp, #8
	char l_recChar_ch='0';
    d644:	e3a03030 	mov	r3, #48	; 0x30
    d648:	e54b3009 	strb	r3, [fp, #-9]
	ssize_t l_nrReadBytes_ssize=0;
    d64c:	e3a03000 	mov	r3, #0
    d650:	e50b3008 	str	r3, [fp, #-8]

	if (l_filestream_i32 == -1)
    d654:	e59f3064 	ldr	r3, [pc, #100]	; d6c0 <g_lldUart_readByte_ch+0x88>
    d658:	e5933000 	ldr	r3, [r3]
    d65c:	e3730001 	cmn	r3, #1
    d660:	1a000000 	bne	d668 <g_lldUart_readByte_ch+0x30>
	{
		g_lldUart_uartOpen_i32();
    d664:	ebffffc0 	bl	d56c <g_lldUart_uartOpen_i32>
	}

	//read new values if l_filestream_i32 is opened
	if (l_filestream_i32 != -1)
    d668:	e59f3050 	ldr	r3, [pc, #80]	; d6c0 <g_lldUart_readByte_ch+0x88>
    d66c:	e5933000 	ldr	r3, [r3]
    d670:	e3730001 	cmn	r3, #1
    d674:	0a00000d 	beq	d6b0 <g_lldUart_readByte_ch+0x78>
	{
		while (l_nrReadBytes_ssize!=1)
    d678:	ea000007 	b	d69c <g_lldUart_readByte_ch+0x64>
		{ l_nrReadBytes_ssize=read(l_filestream_i32, &l_recChar_ch, 1);}
    d67c:	e59f303c 	ldr	r3, [pc, #60]	; d6c0 <g_lldUart_readByte_ch+0x88>
    d680:	e5932000 	ldr	r2, [r3]
    d684:	e24b3009 	sub	r3, fp, #9
    d688:	e1a00002 	mov	r0, r2
    d68c:	e1a01003 	mov	r1, r3
    d690:	e3a02001 	mov	r2, #1
    d694:	ebffece9 	bl	8a40 <_init+0xc8>
    d698:	e50b0008 	str	r0, [fp, #-8]
	}

	//read new values if l_filestream_i32 is opened
	if (l_filestream_i32 != -1)
	{
		while (l_nrReadBytes_ssize!=1)
    d69c:	e51b3008 	ldr	r3, [fp, #-8]
    d6a0:	e3530001 	cmp	r3, #1
    d6a4:	1afffff4 	bne	d67c <g_lldUart_readByte_ch+0x44>
		{ l_nrReadBytes_ssize=read(l_filestream_i32, &l_recChar_ch, 1);}
		return l_recChar_ch;
    d6a8:	e55b3009 	ldrb	r3, [fp, #-9]
    d6ac:	ea000000 	b	d6b4 <g_lldUart_readByte_ch+0x7c>
	}
	return(-1);
    d6b0:	e3a030ff 	mov	r3, #255	; 0xff
}
    d6b4:	e1a00003 	mov	r0, r3
    d6b8:	e24bd004 	sub	sp, fp, #4
    d6bc:	e8bd8800 	pop	{fp, pc}
    d6c0:	00019368 	.word	0x00019368

0000d6c4 <g_lldUart_uartClose_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_lldUart_uartClose_i32(void)
{
    d6c4:	e92d4800 	push	{fp, lr}
    d6c8:	e28db004 	add	fp, sp, #4
	close(l_filestream_i32);
    d6cc:	e59f3014 	ldr	r3, [pc, #20]	; d6e8 <g_lldUart_uartClose_i32+0x24>
    d6d0:	e5933000 	ldr	r3, [r3]
    d6d4:	e1a00003 	mov	r0, r3
    d6d8:	ebffecff 	bl	8adc <_init+0x164>
	return(0);
    d6dc:	e3a03000 	mov	r3, #0
}
    d6e0:	e1a00003 	mov	r0, r3
    d6e4:	e8bd8800 	pop	{fp, pc}
    d6e8:	00019368 	.word	0x00019368

0000d6ec <InitMotor>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void InitMotor(){
    d6ec:	e92d4800 	push	{fp, lr}
    d6f0:	e28db004 	add	fp, sp, #4
	SetFlagRunSendPwmToMotor(0);
    d6f4:	e3a00000 	mov	r0, #0
    d6f8:	eb000064 	bl	d890 <SetFlagRunSendPwmToMotor>
	SetMotorExecutionOrder();
    d6fc:	eb000005 	bl	d718 <SetMotorExecutionOrder>
	SetPwmMotor(DEFMotorALL_PWM, DEFMotorSetpointMIN, 0);
    d700:	e3a000ff 	mov	r0, #255	; 0xff
    d704:	e3a0100a 	mov	r1, #10
    d708:	e3a02000 	mov	r2, #0
    d70c:	eb000007 	bl	d730 <SetPwmMotor>
	//Last one always initMotorTimer()
	InitMotorTimer();
    d710:	eb00003f 	bl	d814 <InitMotorTimer>
}
    d714:	e8bd8800 	pop	{fp, pc}

0000d718 <SetMotorExecutionOrder>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void SetMotorExecutionOrder(){
    d718:	e92d4800 	push	{fp, lr}
    d71c:	e28db004 	add	fp, sp, #4
	GetBLCtrlADRExecuteOrder(&BLCtrlADRExecuteOrder[0]);
    d720:	e59f0004 	ldr	r0, [pc, #4]	; d72c <SetMotorExecutionOrder+0x14>
    d724:	eb00009a 	bl	d994 <GetBLCtrlADRExecuteOrder>
}
    d728:	e8bd8800 	pop	{fp, pc}
    d72c:	00019e74 	.word	0x00019e74

0000d730 <SetPwmMotor>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void SetPwmMotor(char toSet , int pwmValue, int optFlag){
    d730:	e92d4800 	push	{fp, lr}
    d734:	e28db004 	add	fp, sp, #4
    d738:	e24dd018 	sub	sp, sp, #24
    d73c:	e1a03000 	mov	r3, r0
    d740:	e50b1014 	str	r1, [fp, #-20]
    d744:	e50b2018 	str	r2, [fp, #-24]
    d748:	e54b300d 	strb	r3, [fp, #-13]
	int i=0;
    d74c:	e3a03000 	mov	r3, #0
    d750:	e50b3008 	str	r3, [fp, #-8]
	while(toSet != 0 && i < DEFMotorsCount){
    d754:	ea00000e 	b	d794 <SetPwmMotor+0x64>

		if(toSet%2){
    d758:	e55b300d 	ldrb	r3, [fp, #-13]
    d75c:	e2033001 	and	r3, r3, #1
    d760:	e6ef3073 	uxtb	r3, r3
    d764:	e3530000 	cmp	r3, #0
    d768:	0a000006 	beq	d788 <SetPwmMotor+0x58>
			PWMValue[i++]= pwmValue;
    d76c:	e51b3008 	ldr	r3, [fp, #-8]
    d770:	e2832001 	add	r2, r3, #1
    d774:	e50b2008 	str	r2, [fp, #-8]
    d778:	e51b2014 	ldr	r2, [fp, #-20]
    d77c:	e6ef1072 	uxtb	r1, r2
    d780:	e59f2040 	ldr	r2, [pc, #64]	; d7c8 <SetPwmMotor+0x98>
    d784:	e7c21003 	strb	r1, [r2, r3]
		}
		toSet= toSet >>1;
    d788:	e55b300d 	ldrb	r3, [fp, #-13]
    d78c:	e1a030a3 	lsr	r3, r3, #1
    d790:	e54b300d 	strb	r3, [fp, #-13]
 *
 * \endinternal
 ********************************************************************** */
void SetPwmMotor(char toSet , int pwmValue, int optFlag){
	int i=0;
	while(toSet != 0 && i < DEFMotorsCount){
    d794:	e55b300d 	ldrb	r3, [fp, #-13]
    d798:	e3530000 	cmp	r3, #0
    d79c:	0a000002 	beq	d7ac <SetPwmMotor+0x7c>
    d7a0:	e51b3008 	ldr	r3, [fp, #-8]
    d7a4:	e3530003 	cmp	r3, #3
    d7a8:	daffffea 	ble	d758 <SetPwmMotor+0x28>
		if(toSet%2){
			PWMValue[i++]= pwmValue;
		}
		toSet= toSet >>1;
	}
	if(optFlag != 0){
    d7ac:	e51b3018 	ldr	r3, [fp, #-24]
    d7b0:	e3530000 	cmp	r3, #0
    d7b4:	0a000001 	beq	d7c0 <SetPwmMotor+0x90>
		SetFlagRunSendPwmToMotor(1);
    d7b8:	e3a00001 	mov	r0, #1
    d7bc:	eb000033 	bl	d890 <SetFlagRunSendPwmToMotor>
	}
}
    d7c0:	e24bd004 	sub	sp, fp, #4
    d7c4:	e8bd8800 	pop	{fp, pc}
    d7c8:	00019e70 	.word	0x00019e70

0000d7cc <GetPwmMotor>:

int GetPwmMotor(int motorNumber){
    d7cc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    d7d0:	e28db000 	add	fp, sp, #0
    d7d4:	e24dd00c 	sub	sp, sp, #12
    d7d8:	e50b0008 	str	r0, [fp, #-8]
	return motorNumber < DEFMotorsCount ? PWMValue[motorNumber]: 0;
    d7dc:	e51b3008 	ldr	r3, [fp, #-8]
    d7e0:	e3530003 	cmp	r3, #3
    d7e4:	ca000004 	bgt	d7fc <GetPwmMotor+0x30>
    d7e8:	e59f2020 	ldr	r2, [pc, #32]	; d810 <GetPwmMotor+0x44>
    d7ec:	e51b3008 	ldr	r3, [fp, #-8]
    d7f0:	e0823003 	add	r3, r2, r3
    d7f4:	e5d33000 	ldrb	r3, [r3]
    d7f8:	ea000000 	b	d800 <GetPwmMotor+0x34>
    d7fc:	e3a03000 	mov	r3, #0
}
    d800:	e1a00003 	mov	r0, r3
    d804:	e24bd000 	sub	sp, fp, #0
    d808:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    d80c:	e12fff1e 	bx	lr
    d810:	00019e70 	.word	0x00019e70

0000d814 <InitMotorTimer>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void InitMotorTimer(){
    d814:	e92d4800 	push	{fp, lr}
    d818:	e28db004 	add	fp, sp, #4
    d81c:	e24dd0a0 	sub	sp, sp, #160	; 0xa0

	struct sigaction sa;
	struct itimerval timer;

	//Creates Signal, if signal Rising a_handler called
	memset(&sa, 0 , sizeof(sa));
    d820:	e24b3090 	sub	r3, fp, #144	; 0x90
    d824:	e1a00003 	mov	r0, r3
    d828:	e3a01000 	mov	r1, #0
    d82c:	e3a0208c 	mov	r2, #140	; 0x8c
    d830:	ebffec76 	bl	8a10 <_init+0x98>
	sa.sa_handler = &IsrSetFlag;
    d834:	e59f3050 	ldr	r3, [pc, #80]	; d88c <InitMotorTimer+0x78>
    d838:	e50b3090 	str	r3, [fp, #-144]	; 0x90
	sigaction(SIGVTALRM, &sa, NULL);
    d83c:	e24b3090 	sub	r3, fp, #144	; 0x90
    d840:	e3a0001a 	mov	r0, #26
    d844:	e1a01003 	mov	r1, r3
    d848:	e3a02000 	mov	r2, #0
    d84c:	ebffeca5 	bl	8ae8 <_init+0x170>

	//Expire the Timer after:
	timer.it_value.tv_sec = 2;
    d850:	e3a03002 	mov	r3, #2
    d854:	e50b3098 	str	r3, [fp, #-152]	; 0x98
	timer.it_value.tv_usec = 0;
    d858:	e3a03000 	mov	r3, #0
    d85c:	e50b3094 	str	r3, [fp, #-148]	; 0x94
	//And every ... after that:
	timer.it_interval.tv_sec = 0;
    d860:	e3a03000 	mov	r3, #0
    d864:	e50b30a0 	str	r3, [fp, #-160]	; 0xa0
	timer.it_interval.tv_usec = 9;
    d868:	e3a03009 	mov	r3, #9
    d86c:	e50b309c 	str	r3, [fp, #-156]	; 0x9c
	//upon expiration the signal SIGVTALRM raised
	setitimer(ITIMER_VIRTUAL, &timer , NULL);
    d870:	e24b30a0 	sub	r3, fp, #160	; 0xa0
    d874:	e3a00001 	mov	r0, #1
    d878:	e1a01003 	mov	r1, r3
    d87c:	e3a02000 	mov	r2, #0
    d880:	ebffec65 	bl	8a1c <_init+0xa4>
}
    d884:	e24bd004 	sub	sp, fp, #4
    d888:	e8bd8800 	pop	{fp, pc}
    d88c:	0000d8dc 	.word	0x0000d8dc

0000d890 <SetFlagRunSendPwmToMotor>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void SetFlagRunSendPwmToMotor(char value){
    d890:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    d894:	e28db000 	add	fp, sp, #0
    d898:	e24dd00c 	sub	sp, sp, #12
    d89c:	e1a03000 	mov	r3, r0
    d8a0:	e54b3005 	strb	r3, [fp, #-5]
	if(value == 1){
    d8a4:	e55b3005 	ldrb	r3, [fp, #-5]
    d8a8:	e3530001 	cmp	r3, #1
    d8ac:	1a000003 	bne	d8c0 <SetFlagRunSendPwmToMotor+0x30>
		flagRunSendPwmToMotor=value;
    d8b0:	e59f3020 	ldr	r3, [pc, #32]	; d8d8 <SetFlagRunSendPwmToMotor+0x48>
    d8b4:	e55b2005 	ldrb	r2, [fp, #-5]
    d8b8:	e5c32000 	strb	r2, [r3]
    d8bc:	ea000002 	b	d8cc <SetFlagRunSendPwmToMotor+0x3c>
	}else{
		flagRunSendPwmToMotor=0;
    d8c0:	e59f3010 	ldr	r3, [pc, #16]	; d8d8 <SetFlagRunSendPwmToMotor+0x48>
    d8c4:	e3a02000 	mov	r2, #0
    d8c8:	e5c32000 	strb	r2, [r3]
	}
}
    d8cc:	e24bd000 	sub	sp, fp, #0
    d8d0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    d8d4:	e12fff1e 	bx	lr
    d8d8:	00019e78 	.word	0x00019e78

0000d8dc <IsrSetFlag>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void IsrSetFlag(){
    d8dc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    d8e0:	e28db000 	add	fp, sp, #0
	flagRunSendPwmToMotor=1;
    d8e4:	e59f3010 	ldr	r3, [pc, #16]	; d8fc <IsrSetFlag+0x20>
    d8e8:	e3a02001 	mov	r2, #1
    d8ec:	e5c32000 	strb	r2, [r3]
}
    d8f0:	e24bd000 	sub	sp, fp, #0
    d8f4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    d8f8:	e12fff1e 	bx	lr
    d8fc:	00019e78 	.word	0x00019e78

0000d900 <GetFlagRunSendPwmToMotor>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
char GetFlagRunSendPwmToMotor(){
    d900:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    d904:	e28db000 	add	fp, sp, #0
	return flagRunSendPwmToMotor;
    d908:	e59f3010 	ldr	r3, [pc, #16]	; d920 <GetFlagRunSendPwmToMotor+0x20>
    d90c:	e5d33000 	ldrb	r3, [r3]
}
    d910:	e1a00003 	mov	r0, r3
    d914:	e24bd000 	sub	sp, fp, #0
    d918:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    d91c:	e12fff1e 	bx	lr
    d920:	00019e78 	.word	0x00019e78

0000d924 <sendPwmToMotor>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void sendPwmToMotor(){
    d924:	e92d4800 	push	{fp, lr}
    d928:	e28db004 	add	fp, sp, #4
    d92c:	e24dd008 	sub	sp, sp, #8
	int i;
	for(i = 0; i < DEFMotorsCount ;i++)
    d930:	e3a03000 	mov	r3, #0
    d934:	e50b3008 	str	r3, [fp, #-8]
    d938:	ea00000e 	b	d978 <sendPwmToMotor+0x54>
	{
		g_lldI2c_WriteI2c_bl(BLCtrlADRExecuteOrder[i],&PWMValue[i],1);
    d93c:	e59f2048 	ldr	r2, [pc, #72]	; d98c <sendPwmToMotor+0x68>
    d940:	e51b3008 	ldr	r3, [fp, #-8]
    d944:	e0823003 	add	r3, r2, r3
    d948:	e5d33000 	ldrb	r3, [r3]
    d94c:	e1a02003 	mov	r2, r3
    d950:	e51b1008 	ldr	r1, [fp, #-8]
    d954:	e59f3034 	ldr	r3, [pc, #52]	; d990 <sendPwmToMotor+0x6c>
    d958:	e0813003 	add	r3, r1, r3
    d95c:	e1a00002 	mov	r0, r2
    d960:	e1a01003 	mov	r1, r3
    d964:	e3a02001 	mov	r2, #1
    d968:	ebfffe1c 	bl	d1e0 <g_lldI2c_WriteI2c_bl>
 *
 * \endinternal
 ********************************************************************** */
void sendPwmToMotor(){
	int i;
	for(i = 0; i < DEFMotorsCount ;i++)
    d96c:	e51b3008 	ldr	r3, [fp, #-8]
    d970:	e2833001 	add	r3, r3, #1
    d974:	e50b3008 	str	r3, [fp, #-8]
    d978:	e51b3008 	ldr	r3, [fp, #-8]
    d97c:	e3530003 	cmp	r3, #3
    d980:	daffffed 	ble	d93c <sendPwmToMotor+0x18>
	{
		g_lldI2c_WriteI2c_bl(BLCtrlADRExecuteOrder[i],&PWMValue[i],1);
	}
}
    d984:	e24bd004 	sub	sp, fp, #4
    d988:	e8bd8800 	pop	{fp, pc}
    d98c:	00019e74 	.word	0x00019e74
    d990:	00019e70 	.word	0x00019e70

0000d994 <GetBLCtrlADRExecuteOrder>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void GetBLCtrlADRExecuteOrder(char BLCtrlADRExecuteOrder[]){
    d994:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    d998:	e28db000 	add	fp, sp, #0
    d99c:	e24dd01c 	sub	sp, sp, #28
    d9a0:	e50b0018 	str	r0, [fp, #-24]
#if defined(Quadro_X) || defined(Quadro_Plus)
	int BLCTRLADR[4] = {DEFMotorNo1_BLCtrlADR, DEFMotorNo2_BLCtrlADR, DEFMotorNo3_BLCtrlADR, DEFMotorNo4_BLCtrlADR};
    d9a4:	e59f3060 	ldr	r3, [pc, #96]	; da0c <GetBLCtrlADRExecuteOrder+0x78>
    d9a8:	e24bc014 	sub	ip, fp, #20
    d9ac:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    d9b0:	e88c000f 	stm	ip, {r0, r1, r2, r3}

	BLCtrlADRExecuteOrder[DEFMotorNo1_OrderIDX ]=BLCTRLADR[0];
    d9b4:	e51b3014 	ldr	r3, [fp, #-20]
    d9b8:	e6ef2073 	uxtb	r2, r3
    d9bc:	e51b3018 	ldr	r3, [fp, #-24]
    d9c0:	e5c32000 	strb	r2, [r3]
					BLCtrlADRExecuteOrder[DEFMotorNo2_OrderIDX]=BLCTRLADR[1];
    d9c4:	e51b3018 	ldr	r3, [fp, #-24]
    d9c8:	e2833002 	add	r3, r3, #2
    d9cc:	e51b2010 	ldr	r2, [fp, #-16]
    d9d0:	e6ef2072 	uxtb	r2, r2
    d9d4:	e5c32000 	strb	r2, [r3]
					BLCtrlADRExecuteOrder[DEFMotorNo3_OrderIDX]=BLCTRLADR[2];
    d9d8:	e51b3018 	ldr	r3, [fp, #-24]
    d9dc:	e2833001 	add	r3, r3, #1
    d9e0:	e51b200c 	ldr	r2, [fp, #-12]
    d9e4:	e6ef2072 	uxtb	r2, r2
    d9e8:	e5c32000 	strb	r2, [r3]
					BLCtrlADRExecuteOrder[DEFMotorNo4_OrderIDX]=BLCTRLADR[3];
    d9ec:	e51b3018 	ldr	r3, [fp, #-24]
    d9f0:	e2833003 	add	r3, r3, #3
    d9f4:	e51b2008 	ldr	r2, [fp, #-8]
    d9f8:	e6ef2072 	uxtb	r2, r2
    d9fc:	e5c32000 	strb	r2, [r3]
	BLCtrlADRExecuteOrder[DEFMotorNo6_OrderIDX]=BLCTRLADR[5];
	BLCtrlADRExecuteOrder[DEFMotorNo7_OrderIDX]=BLCTRLADR[6];
	BLCtrlADRExecuteOrder[DEFMotorNo8_OrderIDX]=BLCTRLADR[7];

#endif
}
    da00:	e24bd000 	sub	sp, fp, #0
    da04:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    da08:	e12fff1e 	bx	lr
    da0c:	000110e8 	.word	0x000110e8

0000da10 <SendManeuver>:


void SendManeuver(maneuver m){
    da10:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    da14:	e28db000 	add	fp, sp, #0
    da18:	e24dd014 	sub	sp, sp, #20
    da1c:	eeb06b40 	vmov.f64	d6, d0
    da20:	eeb07b41 	vmov.f64	d7, d1
    da24:	ed0b6b05 	vstr	d6, [fp, #-20]	; 0xffffffec
    da28:	ed0b7b03 	vstr	d7, [fp, #-12]

}
    da2c:	e24bd000 	sub	sp, fp, #0
    da30:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    da34:	e12fff1e 	bx	lr

0000da38 <g_halMatlab_sendImuState_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_sendImuState_bl(	int f_socketHandler_i32,
											halImu_orientationValues f_imuState_st) {
    da38:	e24dd008 	sub	sp, sp, #8
    da3c:	e92d4800 	push	{fp, lr}
    da40:	e28db004 	add	fp, sp, #4
    da44:	e24dd078 	sub	sp, sp, #120	; 0x78
    da48:	e50b0078 	str	r0, [fp, #-120]	; 0x78
    da4c:	e28b1004 	add	r1, fp, #4
    da50:	e881000c 	stm	r1, {r2, r3}
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    da54:	e24b3074 	sub	r3, fp, #116	; 0x74
    da58:	e3a00000 	mov	r0, #0
    da5c:	e1a01003 	mov	r1, r3
    da60:	ebffebd5 	bl	89bc <_init+0x44>
    da64:	e1a03000 	mov	r3, r0
    da68:	e3530000 	cmp	r3, #0
    da6c:	0a000001 	beq	da78 <g_halMatlab_sendImuState_bl+0x40>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    da70:	e3a03001 	mov	r3, #1
    da74:	ea000010 	b	dabc <g_halMatlab_sendImuState_bl+0x84>
	}

	//assmeble timestamp and
	l_rtImuPayload_st.timestamp_st 	= l_timestamp_st;
    da78:	e24b306c 	sub	r3, fp, #108	; 0x6c
    da7c:	e24b2074 	sub	r2, fp, #116	; 0x74
    da80:	e8920003 	ldm	r2, {r0, r1}
    da84:	e8830003 	stm	r3, {r0, r1}
	l_rtImuPayload_st.imuState_st	= f_imuState_st;
    da88:	e24b1064 	sub	r1, fp, #100	; 0x64
    da8c:	e28b2004 	add	r2, fp, #4
    da90:	e3a03060 	mov	r3, #96	; 0x60
    da94:	e1a00001 	mov	r0, r1
    da98:	e1a01002 	mov	r1, r2
    da9c:	e1a02003 	mov	r2, r3
    daa0:	ebffec04 	bl	8ab8 <_init+0x140>

	return g_halMatlab_sendPacket_bl( 	f_socketHandler_i32,
    daa4:	e24b306c 	sub	r3, fp, #108	; 0x6c
    daa8:	e51b0078 	ldr	r0, [fp, #-120]	; 0x78
    daac:	e1a01003 	mov	r1, r3
    dab0:	e3a02068 	mov	r2, #104	; 0x68
    dab4:	eb000175 	bl	e090 <g_halMatlab_sendPacket_bl>
    dab8:	e1a03000 	mov	r3, r0
										(unsigned char*)&l_rtImuPayload_st,
										sizeof( l_rtImuPayload_st ) );
}
    dabc:	e1a00003 	mov	r0, r3
    dac0:	e24bd004 	sub	sp, fp, #4
    dac4:	e8bd4800 	pop	{fp, lr}
    dac8:	e28dd008 	add	sp, sp, #8
    dacc:	e12fff1e 	bx	lr

0000dad0 <g_halMatlab_recvImuStateAndTime_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halMatlab_rtImuPayload g_halMatlab_recvImuStateAndTime_bl(int f_socketHandler_i32) {
    dad0:	e92d4800 	push	{fp, lr}
    dad4:	e28db004 	add	fp, sp, #4
    dad8:	e24dd0e0 	sub	sp, sp, #224	; 0xe0
    dadc:	e50b00e0 	str	r0, [fp, #-224]	; 0xe0
    dae0:	e50b10e4 	str	r1, [fp, #-228]	; 0xe4
	halMatlab_rtImuPayload 		l_recvImuState_st;
	unsigned char				l_recvBuffer_rgXui8[ sizeof(halMatlab_rtImuPayload) ];
	unsigned int				l_recvBytesNumber_ui32;

	// zero all values
	l_recvImuState_st.timestamp_st.tv_sec 	= 0;
    dae4:	e3a03000 	mov	r3, #0
    dae8:	e50b3074 	str	r3, [fp, #-116]	; 0x74
	l_recvImuState_st.timestamp_st.tv_nsec 	= 0;
    daec:	e3a03000 	mov	r3, #0
    daf0:	e50b3070 	str	r3, [fp, #-112]	; 0x70

	l_recvImuState_st.imuState_st.acc.x_f64 = 0;
    daf4:	e3a02000 	mov	r2, #0
    daf8:	e3a03000 	mov	r3, #0
    dafc:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
	l_recvImuState_st.imuState_st.acc.y_f64 = 0;
    db00:	e3a02000 	mov	r2, #0
    db04:	e3a03000 	mov	r3, #0
    db08:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	l_recvImuState_st.imuState_st.acc.z_f64 = 0;
    db0c:	e3a02000 	mov	r2, #0
    db10:	e3a03000 	mov	r3, #0
    db14:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac

	l_recvImuState_st.imuState_st.gyro.pitch_f64 = 0;
    db18:	e3a02000 	mov	r2, #0
    db1c:	e3a03000 	mov	r3, #0
    db20:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
	l_recvImuState_st.imuState_st.gyro.roll_f64 = 0;
    db24:	e3a02000 	mov	r2, #0
    db28:	e3a03000 	mov	r3, #0
    db2c:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	l_recvImuState_st.imuState_st.gyro.yaw_f64 = 0;
    db30:	e3a02000 	mov	r2, #0
    db34:	e3a03000 	mov	r3, #0
    db38:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc

	l_recvImuState_st.imuState_st.mag.x_f64 = 0;
    db3c:	e3a02000 	mov	r2, #0
    db40:	e3a03000 	mov	r3, #0
    db44:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
	l_recvImuState_st.imuState_st.mag.y_f64 = 0;
    db48:	e3a02000 	mov	r2, #0
    db4c:	e3a03000 	mov	r3, #0
    db50:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	l_recvImuState_st.imuState_st.mag.z_f64 = 0;
    db54:	e3a02000 	mov	r2, #0
    db58:	e3a03000 	mov	r3, #0
    db5c:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4

	l_recvImuState_st.imuState_st.pressure_f64 = 0;
    db60:	e3a02000 	mov	r2, #0
    db64:	e3a03000 	mov	r3, #0
    db68:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	l_recvImuState_st.imuState_st.temperature_f64 = 0;
    db6c:	e3a02000 	mov	r2, #0
    db70:	e3a03000 	mov	r3, #0
    db74:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    db78:	e24b30dc 	sub	r3, fp, #220	; 0xdc
    db7c:	e51b00e4 	ldr	r0, [fp, #-228]	; 0xe4
    db80:	e1a01003 	mov	r1, r3
    db84:	e3a02068 	mov	r2, #104	; 0x68
    db88:	eb00019f 	bl	e20c <g_halMatlab_recvPacket_ui32>
    db8c:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halMatlab_rtImuPayload) );

	if ( l_recvBytesNumber_ui32 == sizeof(halMatlab_rtImuPayload) )
    db90:	e51b3008 	ldr	r3, [fp, #-8]
    db94:	e3530068 	cmp	r3, #104	; 0x68
    db98:	1a000005 	bne	dbb4 <g_halMatlab_recvImuStateAndTime_bl+0xe4>
	{
		memcpy( &l_recvImuState_st, &l_recvBuffer_rgXui8, sizeof(halMatlab_rtImuPayload));
    db9c:	e24b2074 	sub	r2, fp, #116	; 0x74
    dba0:	e24b30dc 	sub	r3, fp, #220	; 0xdc
    dba4:	e1a00002 	mov	r0, r2
    dba8:	e1a01003 	mov	r1, r3
    dbac:	e3a02068 	mov	r2, #104	; 0x68
    dbb0:	ebffebc0 	bl	8ab8 <_init+0x140>
	}

	return l_recvImuState_st;
    dbb4:	e51b30e0 	ldr	r3, [fp, #-224]	; 0xe0
    dbb8:	e1a01003 	mov	r1, r3
    dbbc:	e24b2074 	sub	r2, fp, #116	; 0x74
    dbc0:	e3a03068 	mov	r3, #104	; 0x68
    dbc4:	e1a00001 	mov	r0, r1
    dbc8:	e1a01002 	mov	r1, r2
    dbcc:	e1a02003 	mov	r2, r3
    dbd0:	ebffebb8 	bl	8ab8 <_init+0x140>
}
    dbd4:	e51b00e0 	ldr	r0, [fp, #-224]	; 0xe0
    dbd8:	e24bd004 	sub	sp, fp, #4
    dbdc:	e8bd8800 	pop	{fp, pc}

0000dbe0 <g_halMatlab_recvImuState_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halImu_orientationValues g_halMatlab_recvImuState_bl(int f_socketHandler_i32) {
    dbe0:	e92d4800 	push	{fp, lr}
    dbe4:	e28db004 	add	fp, sp, #4
    dbe8:	e24dd0d8 	sub	sp, sp, #216	; 0xd8
    dbec:	e50b00d8 	str	r0, [fp, #-216]	; 0xd8
    dbf0:	e50b10dc 	str	r1, [fp, #-220]	; 0xdc
	halImu_orientationValues 		l_recvImuState_st;
	unsigned char				l_recvBuffer_rgXui8[ sizeof(halMatlab_rtImuPayload) ];
	unsigned int				l_recvBytesNumber_ui32;

	l_recvImuState_st.acc.x_f64 = 0;
    dbf4:	e3a02000 	mov	r2, #0
    dbf8:	e3a03000 	mov	r3, #0
    dbfc:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
	l_recvImuState_st.acc.y_f64 = 0;
    dc00:	e3a02000 	mov	r2, #0
    dc04:	e3a03000 	mov	r3, #0
    dc08:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	l_recvImuState_st.acc.z_f64 = 0;
    dc0c:	e3a02000 	mov	r2, #0
    dc10:	e3a03000 	mov	r3, #0
    dc14:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac

	l_recvImuState_st.gyro.pitch_f64 = 0;
    dc18:	e3a02000 	mov	r2, #0
    dc1c:	e3a03000 	mov	r3, #0
    dc20:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
	l_recvImuState_st.gyro.roll_f64 = 0;
    dc24:	e3a02000 	mov	r2, #0
    dc28:	e3a03000 	mov	r3, #0
    dc2c:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	l_recvImuState_st.gyro.yaw_f64 = 0;
    dc30:	e3a02000 	mov	r2, #0
    dc34:	e3a03000 	mov	r3, #0
    dc38:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc

	l_recvImuState_st.mag.x_f64 = 0;
    dc3c:	e3a02000 	mov	r2, #0
    dc40:	e3a03000 	mov	r3, #0
    dc44:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
	l_recvImuState_st.mag.y_f64 = 0;
    dc48:	e3a02000 	mov	r2, #0
    dc4c:	e3a03000 	mov	r3, #0
    dc50:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	l_recvImuState_st.mag.z_f64 = 0;
    dc54:	e3a02000 	mov	r2, #0
    dc58:	e3a03000 	mov	r3, #0
    dc5c:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4

	l_recvImuState_st.pressure_f64 = 0;
    dc60:	e3a02000 	mov	r2, #0
    dc64:	e3a03000 	mov	r3, #0
    dc68:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	l_recvImuState_st.temperature_f64 = 0;
    dc6c:	e3a02000 	mov	r2, #0
    dc70:	e3a03000 	mov	r3, #0
    dc74:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    dc78:	e24b30d4 	sub	r3, fp, #212	; 0xd4
    dc7c:	e51b00dc 	ldr	r0, [fp, #-220]	; 0xdc
    dc80:	e1a01003 	mov	r1, r3
    dc84:	e3a02060 	mov	r2, #96	; 0x60
    dc88:	eb00015f 	bl	e20c <g_halMatlab_recvPacket_ui32>
    dc8c:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halImu_orientationValues) );

	if ( l_recvBytesNumber_ui32 == sizeof(halImu_orientationValues) )
    dc90:	e51b3008 	ldr	r3, [fp, #-8]
    dc94:	e3530060 	cmp	r3, #96	; 0x60
    dc98:	1a000005 	bne	dcb4 <g_halMatlab_recvImuState_bl+0xd4>
	{
		memcpy( &l_recvImuState_st, &l_recvBuffer_rgXui8, sizeof(halImu_orientationValues));
    dc9c:	e24b206c 	sub	r2, fp, #108	; 0x6c
    dca0:	e24b30d4 	sub	r3, fp, #212	; 0xd4
    dca4:	e1a00002 	mov	r0, r2
    dca8:	e1a01003 	mov	r1, r3
    dcac:	e3a02060 	mov	r2, #96	; 0x60
    dcb0:	ebffeb80 	bl	8ab8 <_init+0x140>
	}

	return l_recvImuState_st;
    dcb4:	e51b30d8 	ldr	r3, [fp, #-216]	; 0xd8
    dcb8:	e1a01003 	mov	r1, r3
    dcbc:	e24b206c 	sub	r2, fp, #108	; 0x6c
    dcc0:	e3a03060 	mov	r3, #96	; 0x60
    dcc4:	e1a00001 	mov	r0, r1
    dcc8:	e1a01002 	mov	r1, r2
    dccc:	e1a02003 	mov	r2, r3
    dcd0:	ebffeb78 	bl	8ab8 <_init+0x140>
}
    dcd4:	e51b00d8 	ldr	r0, [fp, #-216]	; 0xd8
    dcd8:	e24bd004 	sub	sp, fp, #4
    dcdc:	e8bd8800 	pop	{fp, pc}

0000dce0 <l_findFreeSocketSlot_i16>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static signed short l_findFreeSocketSlot_i16(void)
{
    dce0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    dce4:	e28db000 	add	fp, sp, #0
    dce8:	e24dd00c 	sub	sp, sp, #12
	signed short l_socketIndex_i16 = 0;
    dcec:	e3a03000 	mov	r3, #0
    dcf0:	e14b30b6 	strh	r3, [fp, #-6]

	// find empty slot in socket library
	while( 		(m_socketManagementBuffer_rg8st[l_socketIndex_i16].socketHandler_i32 > 0)
    dcf4:	ea000002 	b	dd04 <l_findFreeSocketSlot_i16+0x24>
			&& 	(l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8) )
	{
		l_socketIndex_i16++;
    dcf8:	e15b30b6 	ldrh	r3, [fp, #-6]
    dcfc:	e2833001 	add	r3, r3, #1
    dd00:	e14b30b6 	strh	r3, [fp, #-6]
static signed short l_findFreeSocketSlot_i16(void)
{
	signed short l_socketIndex_i16 = 0;

	// find empty slot in socket library
	while( 		(m_socketManagementBuffer_rg8st[l_socketIndex_i16].socketHandler_i32 > 0)
    dd04:	e15b20f6 	ldrsh	r2, [fp, #-6]
    dd08:	e59f005c 	ldr	r0, [pc, #92]	; dd6c <l_findFreeSocketSlot_i16+0x8c>
    dd0c:	e3a01020 	mov	r1, #32
    dd10:	e1a03002 	mov	r3, r2
    dd14:	e1a03183 	lsl	r3, r3, #3
    dd18:	e0833002 	add	r3, r3, r2
    dd1c:	e1a03103 	lsl	r3, r3, #2
    dd20:	e0803003 	add	r3, r0, r3
    dd24:	e0833001 	add	r3, r3, r1
    dd28:	e5933000 	ldr	r3, [r3]
    dd2c:	e3530000 	cmp	r3, #0
    dd30:	da000002 	ble	dd40 <l_findFreeSocketSlot_i16+0x60>
			&& 	(l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8) )
    dd34:	e15b30f6 	ldrsh	r3, [fp, #-6]
    dd38:	e3530007 	cmp	r3, #7
    dd3c:	daffffed 	ble	dcf8 <l_findFreeSocketSlot_i16+0x18>
	{
		l_socketIndex_i16++;
	}

	// if all slots are occupied, do not open a new one
	if (l_socketIndex_i16 >= M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8)
    dd40:	e15b30f6 	ldrsh	r3, [fp, #-6]
    dd44:	e3530007 	cmp	r3, #7
    dd48:	da000001 	ble	dd54 <l_findFreeSocketSlot_i16+0x74>
	{
		return M_HAL_MATLAB_ERROR_I8;
    dd4c:	e59f301c 	ldr	r3, [pc, #28]	; dd70 <l_findFreeSocketSlot_i16+0x90>
    dd50:	ea000000 	b	dd58 <l_findFreeSocketSlot_i16+0x78>
	}

	return l_socketIndex_i16;
    dd54:	e15b30b6 	ldrh	r3, [fp, #-6]
    dd58:	e6bf3073 	sxth	r3, r3
}
    dd5c:	e1a00003 	mov	r0, r3
    dd60:	e24bd000 	sub	sp, fp, #0
    dd64:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    dd68:	e12fff1e 	bx	lr
    dd6c:	000198f8 	.word	0x000198f8
    dd70:	0000ffff 	.word	0x0000ffff

0000dd74 <l_findSocket_i16>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static signed short l_findSocket_i16(signed int f_socketHandler_i32)
{
    dd74:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    dd78:	e28db000 	add	fp, sp, #0
    dd7c:	e24dd014 	sub	sp, sp, #20
    dd80:	e50b0010 	str	r0, [fp, #-16]
	signed short l_socketIndex_i16 = 0;
    dd84:	e3a03000 	mov	r3, #0
    dd88:	e14b30b6 	strh	r3, [fp, #-6]

	if (f_socketHandler_i32 <= 0 )
    dd8c:	e51b3010 	ldr	r3, [fp, #-16]
    dd90:	e3530000 	cmp	r3, #0
    dd94:	ca000001 	bgt	dda0 <l_findSocket_i16+0x2c>
	{
		return M_HAL_MATLAB_ERROR_I8;
    dd98:	e59f3088 	ldr	r3, [pc, #136]	; de28 <l_findSocket_i16+0xb4>
    dd9c:	ea00001c 	b	de14 <l_findSocket_i16+0xa0>
	}

	// find socket handler
	for( l_socketIndex_i16=0; l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8; l_socketIndex_i16++ )
    dda0:	e3a03000 	mov	r3, #0
    dda4:	e14b30b6 	strh	r3, [fp, #-6]
    dda8:	ea000010 	b	ddf0 <l_findSocket_i16+0x7c>
	{
		if ( m_socketManagementBuffer_rg8st[l_socketIndex_i16].socketHandler_i32 == f_socketHandler_i32 )
    ddac:	e15b20f6 	ldrsh	r2, [fp, #-6]
    ddb0:	e59f0074 	ldr	r0, [pc, #116]	; de2c <l_findSocket_i16+0xb8>
    ddb4:	e3a01020 	mov	r1, #32
    ddb8:	e1a03002 	mov	r3, r2
    ddbc:	e1a03183 	lsl	r3, r3, #3
    ddc0:	e0833002 	add	r3, r3, r2
    ddc4:	e1a03103 	lsl	r3, r3, #2
    ddc8:	e0803003 	add	r3, r0, r3
    ddcc:	e0833001 	add	r3, r3, r1
    ddd0:	e5932000 	ldr	r2, [r3]
    ddd4:	e51b3010 	ldr	r3, [fp, #-16]
    ddd8:	e1520003 	cmp	r2, r3
    dddc:	1a000000 	bne	dde4 <l_findSocket_i16+0x70>
		{
			break;
    dde0:	ea000005 	b	ddfc <l_findSocket_i16+0x88>
	{
		return M_HAL_MATLAB_ERROR_I8;
	}

	// find socket handler
	for( l_socketIndex_i16=0; l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8; l_socketIndex_i16++ )
    dde4:	e15b30b6 	ldrh	r3, [fp, #-6]
    dde8:	e2833001 	add	r3, r3, #1
    ddec:	e14b30b6 	strh	r3, [fp, #-6]
    ddf0:	e15b30f6 	ldrsh	r3, [fp, #-6]
    ddf4:	e3530007 	cmp	r3, #7
    ddf8:	daffffeb 	ble	ddac <l_findSocket_i16+0x38>
			break;
		}
	}

	// if all slots are occupied, do not open a new one
	if (l_socketIndex_i16 >= M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8)
    ddfc:	e15b30f6 	ldrsh	r3, [fp, #-6]
    de00:	e3530007 	cmp	r3, #7
    de04:	da000001 	ble	de10 <l_findSocket_i16+0x9c>
	{
		return M_HAL_MATLAB_ERROR_I8;
    de08:	e59f3018 	ldr	r3, [pc, #24]	; de28 <l_findSocket_i16+0xb4>
    de0c:	ea000000 	b	de14 <l_findSocket_i16+0xa0>
	}

	return l_socketIndex_i16;
    de10:	e15b30b6 	ldrh	r3, [fp, #-6]
    de14:	e6bf3073 	sxth	r3, r3
}
    de18:	e1a00003 	mov	r0, r3
    de1c:	e24bd000 	sub	sp, fp, #0
    de20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    de24:	e12fff1e 	bx	lr
    de28:	0000ffff 	.word	0x0000ffff
    de2c:	000198f8 	.word	0x000198f8

0000de30 <g_halMatlab_initSocket_i32>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
int g_halMatlab_initSocket_i32(	unsigned short f_udpListenPort_ui16 )
{
    de30:	e92d4800 	push	{fp, lr}
    de34:	e28db004 	add	fp, sp, #4
    de38:	e24dd010 	sub	sp, sp, #16
    de3c:	e1a03000 	mov	r3, r0
    de40:	e14b30be 	strh	r3, [fp, #-14]
	signed short 			l_socketSlotCtr_i16 = 0;
    de44:	e3a03000 	mov	r3, #0
    de48:	e14b30b6 	strh	r3, [fp, #-6]
	halMatlab_socketData* 	l_freeSocketSlot_pst;
#ifdef _WIN32
    WSADATA wsa;
#endif
    
	if ( (l_socketSlotCtr_i16 = l_findFreeSocketSlot_i16()) < 0)
    de4c:	ebffffa3 	bl	dce0 <l_findFreeSocketSlot_i16>
    de50:	e1a03000 	mov	r3, r0
    de54:	e14b30b6 	strh	r3, [fp, #-6]
    de58:	e15b30f6 	ldrsh	r3, [fp, #-6]
    de5c:	e3530000 	cmp	r3, #0
    de60:	aa000001 	bge	de6c <g_halMatlab_initSocket_i32+0x3c>
	{
		return M_HAL_MATLAB_ERROR_I8;
    de64:	e3e03000 	mvn	r3, #0
    de68:	ea00003c 	b	df60 <g_halMatlab_initSocket_i32+0x130>
	}


	l_freeSocketSlot_pst = &m_socketManagementBuffer_rg8st[l_socketSlotCtr_i16];
    de6c:	e15b20f6 	ldrsh	r2, [fp, #-6]
    de70:	e1a03002 	mov	r3, r2
    de74:	e1a03183 	lsl	r3, r3, #3
    de78:	e0833002 	add	r3, r3, r2
    de7c:	e1a03103 	lsl	r3, r3, #2
    de80:	e59f20e4 	ldr	r2, [pc, #228]	; df6c <g_halMatlab_initSocket_i32+0x13c>
    de84:	e0833002 	add	r3, r3, r2
    de88:	e50b300c 	str	r3, [fp, #-12]
	{
		return M_HAL_MATLAB_ERROR_I8;
	}
#endif
	// open socket
	if ( (l_freeSocketSlot_pst->socketHandler_i32 = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1 )
    de8c:	e3a00002 	mov	r0, #2
    de90:	e3a01002 	mov	r1, #2
    de94:	e3a02011 	mov	r2, #17
    de98:	ebffeafa 	bl	8a88 <_init+0x110>
    de9c:	e1a02000 	mov	r2, r0
    dea0:	e51b300c 	ldr	r3, [fp, #-12]
    dea4:	e5832020 	str	r2, [r3, #32]
    dea8:	e51b300c 	ldr	r3, [fp, #-12]
    deac:	e5933020 	ldr	r3, [r3, #32]
    deb0:	e3730001 	cmn	r3, #1
    deb4:	1a000004 	bne	decc <g_halMatlab_initSocket_i32+0x9c>
	{
		l_freeSocketSlot_pst->socketHandler_i32 = 0;
    deb8:	e51b300c 	ldr	r3, [fp, #-12]
    debc:	e3a02000 	mov	r2, #0
    dec0:	e5832020 	str	r2, [r3, #32]
		return M_HAL_MATLAB_ERROR_I8;
    dec4:	e3e03000 	mvn	r3, #0
    dec8:	ea000024 	b	df60 <g_halMatlab_initSocket_i32+0x130>
	}

	// bind ip
	// -->zero out the structure
	memset(	(char*)&(l_freeSocketSlot_pst->sockAddrListen_st), 0, sizeof(l_freeSocketSlot_pst->sockAddrListen_st) );
    decc:	e51b300c 	ldr	r3, [fp, #-12]
    ded0:	e1a00003 	mov	r0, r3
    ded4:	e3a01000 	mov	r1, #0
    ded8:	e3a02010 	mov	r2, #16
    dedc:	ebffeacb 	bl	8a10 <_init+0x98>

	l_freeSocketSlot_pst->sockAddrListen_st.sin_family 		= AF_INET;
    dee0:	e51b300c 	ldr	r3, [fp, #-12]
    dee4:	e3a02002 	mov	r2, #2
    dee8:	e1c320b0 	strh	r2, [r3]
	l_freeSocketSlot_pst->sockAddrListen_st.sin_port 		= htons((uint16_t)f_udpListenPort_ui16);
    deec:	e15b30be 	ldrh	r3, [fp, #-14]
    def0:	e1a00003 	mov	r0, r3
    def4:	ebffeac2 	bl	8a04 <_init+0x8c>
    def8:	e1a03000 	mov	r3, r0
    defc:	e1a02003 	mov	r2, r3
    df00:	e51b300c 	ldr	r3, [fp, #-12]
    df04:	e1c320b2 	strh	r2, [r3, #2]
	l_freeSocketSlot_pst->sockAddrListen_st.sin_addr.s_addr = htonl(INADDR_ANY);
    df08:	e3a00000 	mov	r0, #0
    df0c:	ebffeb0a 	bl	8b3c <_init+0x1c4>
    df10:	e1a02000 	mov	r2, r0
    df14:	e51b300c 	ldr	r3, [fp, #-12]
    df18:	e5832004 	str	r2, [r3, #4]

	//bind socket to port
	if( bind(	l_freeSocketSlot_pst->socketHandler_i32 ,
    df1c:	e51b300c 	ldr	r3, [fp, #-12]
    df20:	e5932020 	ldr	r2, [r3, #32]
				(struct sockaddr*)&(l_freeSocketSlot_pst->sockAddrListen_st),
    df24:	e51b300c 	ldr	r3, [fp, #-12]
	l_freeSocketSlot_pst->sockAddrListen_st.sin_family 		= AF_INET;
	l_freeSocketSlot_pst->sockAddrListen_st.sin_port 		= htons((uint16_t)f_udpListenPort_ui16);
	l_freeSocketSlot_pst->sockAddrListen_st.sin_addr.s_addr = htonl(INADDR_ANY);

	//bind socket to port
	if( bind(	l_freeSocketSlot_pst->socketHandler_i32 ,
    df28:	e1a00002 	mov	r0, r2
    df2c:	e1a01003 	mov	r1, r3
    df30:	e3a02010 	mov	r2, #16
    df34:	ebffeae5 	bl	8ad0 <_init+0x158>
    df38:	e1a03000 	mov	r3, r0
    df3c:	e3730001 	cmn	r3, #1
    df40:	1a000004 	bne	df58 <g_halMatlab_initSocket_i32+0x128>
				(struct sockaddr*)&(l_freeSocketSlot_pst->sockAddrListen_st),
				sizeof(l_freeSocketSlot_pst->sockAddrListen_st)
				)
		== -1 )
	{
		l_freeSocketSlot_pst->socketHandler_i32 = 0;
    df44:	e51b300c 	ldr	r3, [fp, #-12]
    df48:	e3a02000 	mov	r2, #0
    df4c:	e5832020 	str	r2, [r3, #32]
		return M_HAL_MATLAB_ERROR_I8;
    df50:	e3e03000 	mvn	r3, #0
    df54:	ea000001 	b	df60 <g_halMatlab_initSocket_i32+0x130>
	}

	return l_freeSocketSlot_pst->socketHandler_i32;
    df58:	e51b300c 	ldr	r3, [fp, #-12]
    df5c:	e5933020 	ldr	r3, [r3, #32]
}
    df60:	e1a00003 	mov	r0, r3
    df64:	e24bd004 	sub	sp, fp, #4
    df68:	e8bd8800 	pop	{fp, pc}
    df6c:	000198f8 	.word	0x000198f8

0000df70 <g_halMatlab_initConnection_i32>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
int 	g_halMatlab_initConnection_i32(const unsigned char* const f_destIpv4_rg4ui8, unsigned short f_udpConnectionPort_ui16 )
{
    df70:	e92d4800 	push	{fp, lr}
    df74:	e28db004 	add	fp, sp, #4
    df78:	e24dd010 	sub	sp, sp, #16
    df7c:	e50b0010 	str	r0, [fp, #-16]
    df80:	e1a03001 	mov	r3, r1
    df84:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	int	l_socketHandler_i32;

	// create socket
	if ( ( l_socketHandler_i32 = g_halMatlab_initSocket_i32(f_udpConnectionPort_ui16) ) <= 0 )
    df88:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    df8c:	e1a00003 	mov	r0, r3
    df90:	ebffffa6 	bl	de30 <g_halMatlab_initSocket_i32>
    df94:	e50b0008 	str	r0, [fp, #-8]
    df98:	e51b3008 	ldr	r3, [fp, #-8]
    df9c:	e3530000 	cmp	r3, #0
    dfa0:	ca000001 	bgt	dfac <g_halMatlab_initConnection_i32+0x3c>
	{
		// error occurred
		return M_HAL_MATLAB_ERROR_I8;
    dfa4:	e3e03000 	mvn	r3, #0
    dfa8:	ea00000a 	b	dfd8 <g_halMatlab_initConnection_i32+0x68>
	 *                        |  >Local machine>  |
	 *  ----------------------+  >sends to 5000>  +-----------------------
	 *     Local machine                               Remote machine
	 *
	 */
	if ( g_halMatlab_configSocket_bl(l_socketHandler_i32, f_destIpv4_rg4ui8, f_udpConnectionPort_ui16) != M_HAL_MATLAB_SUCCESS_UI8 )
    dfac:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    dfb0:	e51b0008 	ldr	r0, [fp, #-8]
    dfb4:	e51b1010 	ldr	r1, [fp, #-16]
    dfb8:	e1a02003 	mov	r2, r3
    dfbc:	eb0000c2 	bl	e2cc <g_halMatlab_configSocket_bl>
    dfc0:	e1a03000 	mov	r3, r0
    dfc4:	e3530000 	cmp	r3, #0
    dfc8:	0a000001 	beq	dfd4 <g_halMatlab_initConnection_i32+0x64>
	{
		// error occurred
		return M_HAL_MATLAB_ERROR_I8;
    dfcc:	e3e03000 	mvn	r3, #0
    dfd0:	ea000000 	b	dfd8 <g_halMatlab_initConnection_i32+0x68>
	}

	return l_socketHandler_i32;
    dfd4:	e51b3008 	ldr	r3, [fp, #-8]
}
    dfd8:	e1a00003 	mov	r0, r3
    dfdc:	e24bd004 	sub	sp, fp, #4
    dfe0:	e8bd8800 	pop	{fp, pc}

0000dfe4 <g_halMatlab_closeSocket_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_closeSocket_bl(int f_socketHandler_i32)
{
    dfe4:	e92d4800 	push	{fp, lr}
    dfe8:	e28db004 	add	fp, sp, #4
    dfec:	e24dd010 	sub	sp, sp, #16
    dff0:	e50b0010 	str	r0, [fp, #-16]
	signed short l_socketSlotNumber_i16 = 0;
    dff4:	e3a03000 	mov	r3, #0
    dff8:	e14b30b6 	strh	r3, [fp, #-6]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    dffc:	e51b0010 	ldr	r0, [fp, #-16]
    e000:	ebffff5b 	bl	dd74 <l_findSocket_i16>
    e004:	e1a03000 	mov	r3, r0
    e008:	e14b30b6 	strh	r3, [fp, #-6]
    e00c:	e15b30f6 	ldrsh	r3, [fp, #-6]
    e010:	e3530000 	cmp	r3, #0
    e014:	aa000001 	bge	e020 <g_halMatlab_closeSocket_bl+0x3c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    e018:	e3a03001 	mov	r3, #1
    e01c:	ea000017 	b	e080 <g_halMatlab_closeSocket_bl+0x9c>
	}

#ifdef __linux__
	/* close socket */
	close( m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16].socketHandler_i32 );
    e020:	e15b20f6 	ldrsh	r2, [fp, #-6]
    e024:	e59f0060 	ldr	r0, [pc, #96]	; e08c <g_halMatlab_closeSocket_bl+0xa8>
    e028:	e3a01020 	mov	r1, #32
    e02c:	e1a03002 	mov	r3, r2
    e030:	e1a03183 	lsl	r3, r3, #3
    e034:	e0833002 	add	r3, r3, r2
    e038:	e1a03103 	lsl	r3, r3, #2
    e03c:	e0803003 	add	r3, r0, r3
    e040:	e0833001 	add	r3, r3, r1
    e044:	e5933000 	ldr	r3, [r3]
    e048:	e1a00003 	mov	r0, r3
    e04c:	ebffeaa2 	bl	8adc <_init+0x164>
#elif _WIN32
    closesocket(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16].socketHandler_i32);
    WSACleanup();
#endif
	/* free slot */
	m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16].socketHandler_i32 = 0;
    e050:	e15b20f6 	ldrsh	r2, [fp, #-6]
    e054:	e59f0030 	ldr	r0, [pc, #48]	; e08c <g_halMatlab_closeSocket_bl+0xa8>
    e058:	e3a01020 	mov	r1, #32
    e05c:	e1a03002 	mov	r3, r2
    e060:	e1a03183 	lsl	r3, r3, #3
    e064:	e0833002 	add	r3, r3, r2
    e068:	e1a03103 	lsl	r3, r3, #2
    e06c:	e0803003 	add	r3, r0, r3
    e070:	e0833001 	add	r3, r3, r1
    e074:	e3a02000 	mov	r2, #0
    e078:	e5832000 	str	r2, [r3]

	return M_HAL_MATLAB_SUCCESS_UI8;
    e07c:	e3a03000 	mov	r3, #0
}
    e080:	e1a00003 	mov	r0, r3
    e084:	e24bd004 	sub	sp, fp, #4
    e088:	e8bd8800 	pop	{fp, pc}
    e08c:	000198f8 	.word	0x000198f8

0000e090 <g_halMatlab_sendPacket_bl>:
 ***********************************************************************/
unsigned int g_halMatlab_sendPacket_bl(	int f_socketHandler_i32,
										const unsigned char* const f_sendBuffer_pui8,
										unsigned int f_sendBufferSize_ui32
										)
{
    e090:	e92d4800 	push	{fp, lr}
    e094:	e28db004 	add	fp, sp, #4
    e098:	e24dd028 	sub	sp, sp, #40	; 0x28
    e09c:	e50b0018 	str	r0, [fp, #-24]
    e0a0:	e50b101c 	str	r1, [fp, #-28]
    e0a4:	e50b2020 	str	r2, [fp, #-32]
	int						l_sendSuccess_i32		= -1;
    e0a8:	e3e03000 	mvn	r3, #0
    e0ac:	e50b3008 	str	r3, [fp, #-8]
	signed short 			l_socketSlotNumber_i16 	= 0;
    e0b0:	e3a03000 	mov	r3, #0
    e0b4:	e14b30ba 	strh	r3, [fp, #-10]
	halMatlab_socketData* 	l_socketConfig_pst		= 0;
    e0b8:	e3a03000 	mov	r3, #0
    e0bc:	e50b3010 	str	r3, [fp, #-16]
	unsigned int			l_socketStructSize_ui32	= 0;
    e0c0:	e3a03000 	mov	r3, #0
    e0c4:	e50b3014 	str	r3, [fp, #-20]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    e0c8:	e51b0018 	ldr	r0, [fp, #-24]
    e0cc:	ebffff28 	bl	dd74 <l_findSocket_i16>
    e0d0:	e1a03000 	mov	r3, r0
    e0d4:	e14b30ba 	strh	r3, [fp, #-10]
    e0d8:	e15b30fa 	ldrsh	r3, [fp, #-10]
    e0dc:	e3530000 	cmp	r3, #0
    e0e0:	aa000001 	bge	e0ec <g_halMatlab_sendPacket_bl+0x5c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    e0e4:	e3a03001 	mov	r3, #1
    e0e8:	ea00001a 	b	e158 <g_halMatlab_sendPacket_bl+0xc8>
	}

	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);
    e0ec:	e15b20fa 	ldrsh	r2, [fp, #-10]
    e0f0:	e1a03002 	mov	r3, r2
    e0f4:	e1a03183 	lsl	r3, r3, #3
    e0f8:	e0833002 	add	r3, r3, r2
    e0fc:	e1a03103 	lsl	r3, r3, #2
    e100:	e59f205c 	ldr	r2, [pc, #92]	; e164 <g_halMatlab_sendPacket_bl+0xd4>
    e104:	e0833002 	add	r3, r3, r2
    e108:	e50b3010 	str	r3, [fp, #-16]

	// send telegram
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
    e10c:	e3a03010 	mov	r3, #16
    e110:	e50b3014 	str	r3, [fp, #-20]
	l_sendSuccess_i32 = sendto(	f_socketHandler_i32,
								f_sendBuffer_pui8,
								f_sendBufferSize_ui32,
								0 ,
								(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
    e114:	e51b3010 	ldr	r3, [fp, #-16]
    e118:	e2833010 	add	r3, r3, #16
	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);

	// send telegram
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
	l_sendSuccess_i32 = sendto(	f_socketHandler_i32,
    e11c:	e58d3000 	str	r3, [sp]
    e120:	e51b3014 	ldr	r3, [fp, #-20]
    e124:	e58d3004 	str	r3, [sp, #4]
    e128:	e51b0018 	ldr	r0, [fp, #-24]
    e12c:	e51b101c 	ldr	r1, [fp, #-28]
    e130:	e51b2020 	ldr	r2, [fp, #-32]
    e134:	e3a03000 	mov	r3, #0
    e138:	ebffea2e 	bl	89f8 <_init+0x80>
    e13c:	e50b0008 	str	r0, [fp, #-8]
								f_sendBufferSize_ui32,
								0 ,
								(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
								l_socketStructSize_ui32 );

	if ( l_sendSuccess_i32 == M_HAL_MATLAB_ERROR_I8 )
    e140:	e51b3008 	ldr	r3, [fp, #-8]
    e144:	e3730001 	cmn	r3, #1
    e148:	1a000001 	bne	e154 <g_halMatlab_sendPacket_bl+0xc4>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    e14c:	e3a03001 	mov	r3, #1
    e150:	ea000000 	b	e158 <g_halMatlab_sendPacket_bl+0xc8>
	}else{
		return M_HAL_MATLAB_SUCCESS_UI8;
    e154:	e3a03000 	mov	r3, #0
	}
}
    e158:	e1a00003 	mov	r0, r3
    e15c:	e24bd004 	sub	sp, fp, #4
    e160:	e8bd8800 	pop	{fp, pc}
    e164:	000198f8 	.word	0x000198f8

0000e168 <g_halMatlab_sendRtDataPacket_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_sendRtDataPacket_bl(	int f_socketHandler_i32,
												const unsigned char* const f_sendBuffer_pui8,
												unsigned int f_sendBufferSize_ui32)
{
    e168:	e92d4800 	push	{fp, lr}
    e16c:	e28db004 	add	fp, sp, #4
    e170:	e24dde22 	sub	sp, sp, #544	; 0x220
    e174:	e50b0218 	str	r0, [fp, #-536]	; 0x218
    e178:	e50b121c 	str	r1, [fp, #-540]	; 0x21c
    e17c:	e50b2220 	str	r2, [fp, #-544]	; 0x220
	struct timespec			l_timestamp_st;
	unsigned char			l_sendBuffer_rgXi8[M_HAL_MATLAB_SEND_BUFFER_SIZE_UI16];
	unsigned int			l_sizePayload_ui32		= 0;
    e180:	e3a03000 	mov	r3, #0
    e184:	e50b3008 	str	r3, [fp, #-8]
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    e188:	e24b3010 	sub	r3, fp, #16
    e18c:	e3a00000 	mov	r0, #0
    e190:	e1a01003 	mov	r1, r3
    e194:	ebffea08 	bl	89bc <_init+0x44>
    e198:	e1a03000 	mov	r3, r0
    e19c:	e3530000 	cmp	r3, #0
    e1a0:	0a000001 	beq	e1ac <g_halMatlab_sendRtDataPacket_bl+0x44>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    e1a4:	e3a03001 	mov	r3, #1
    e1a8:	ea000014 	b	e200 <g_halMatlab_sendRtDataPacket_bl+0x98>
	}

	// add timestamp to payload data
	memcpy(	l_sendBuffer_rgXi8,
    e1ac:	e24b2e21 	sub	r2, fp, #528	; 0x210
    e1b0:	e24b3010 	sub	r3, fp, #16
    e1b4:	e1a00002 	mov	r0, r2
    e1b8:	e1a01003 	mov	r1, r3
    e1bc:	e3a02008 	mov	r2, #8
    e1c0:	ebffea3c 	bl	8ab8 <_init+0x140>
			&l_timestamp_st,
			sizeof(l_timestamp_st) );
	memcpy(	(l_sendBuffer_rgXi8+sizeof(l_timestamp_st)),
    e1c4:	e24b3e21 	sub	r3, fp, #528	; 0x210
    e1c8:	e2833008 	add	r3, r3, #8
    e1cc:	e1a00003 	mov	r0, r3
    e1d0:	e51b121c 	ldr	r1, [fp, #-540]	; 0x21c
    e1d4:	e51b2220 	ldr	r2, [fp, #-544]	; 0x220
    e1d8:	ebffea36 	bl	8ab8 <_init+0x140>
			f_sendBuffer_pui8,
			f_sendBufferSize_ui32 );

	// adjust size of telegram's payload (due to added timestamp)
	l_sizePayload_ui32 = f_sendBufferSize_ui32 + sizeof(l_timestamp_st);
    e1dc:	e51b3220 	ldr	r3, [fp, #-544]	; 0x220
    e1e0:	e2833008 	add	r3, r3, #8
    e1e4:	e50b3008 	str	r3, [fp, #-8]

	return g_halMatlab_sendPacket_bl(f_socketHandler_i32, l_sendBuffer_rgXi8, l_sizePayload_ui32);
    e1e8:	e24b3e21 	sub	r3, fp, #528	; 0x210
    e1ec:	e51b0218 	ldr	r0, [fp, #-536]	; 0x218
    e1f0:	e1a01003 	mov	r1, r3
    e1f4:	e51b2008 	ldr	r2, [fp, #-8]
    e1f8:	ebffffa4 	bl	e090 <g_halMatlab_sendPacket_bl>
    e1fc:	e1a03000 	mov	r3, r0
}
    e200:	e1a00003 	mov	r0, r3
    e204:	e24bd004 	sub	sp, fp, #4
    e208:	e8bd8800 	pop	{fp, pc}

0000e20c <g_halMatlab_recvPacket_ui32>:
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_recvPacket_ui32( int f_socketHandler_i32,
		unsigned char* const f_recvBuffer_pui8,
		unsigned int f_recvBufferSize_ui32)
{
    e20c:	e92d4800 	push	{fp, lr}
    e210:	e28db004 	add	fp, sp, #4
    e214:	e24dd028 	sub	sp, sp, #40	; 0x28
    e218:	e50b0018 	str	r0, [fp, #-24]
    e21c:	e50b101c 	str	r1, [fp, #-28]
    e220:	e50b2020 	str	r2, [fp, #-32]
	signed short 			l_socketSlotNumber_i16 	= 0;
    e224:	e3a03000 	mov	r3, #0
    e228:	e14b30b6 	strh	r3, [fp, #-6]
	halMatlab_socketData* 	l_socketConfig_pst		= 0;
    e22c:	e3a03000 	mov	r3, #0
    e230:	e50b300c 	str	r3, [fp, #-12]
	int						l_recvFromFlag_i32		= 0;	// blocking behavior (standard)
    e234:	e3a03000 	mov	r3, #0
    e238:	e50b3010 	str	r3, [fp, #-16]
	unsigned int			l_socketStructSize_ui32	= 0;
    e23c:	e3a03000 	mov	r3, #0
    e240:	e50b3014 	str	r3, [fp, #-20]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    e244:	e51b0018 	ldr	r0, [fp, #-24]
    e248:	ebfffec9 	bl	dd74 <l_findSocket_i16>
    e24c:	e1a03000 	mov	r3, r0
    e250:	e14b30b6 	strh	r3, [fp, #-6]
    e254:	e15b30f6 	ldrsh	r3, [fp, #-6]
    e258:	e3530000 	cmp	r3, #0
    e25c:	aa000001 	bge	e268 <g_halMatlab_recvPacket_ui32+0x5c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    e260:	e3a03001 	mov	r3, #1
    e264:	ea000014 	b	e2bc <g_halMatlab_recvPacket_ui32+0xb0>
	}

	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);
    e268:	e15b20f6 	ldrsh	r2, [fp, #-6]
    e26c:	e1a03002 	mov	r3, r2
    e270:	e1a03183 	lsl	r3, r3, #3
    e274:	e0833002 	add	r3, r3, r2
    e278:	e1a03103 	lsl	r3, r3, #2
    e27c:	e59f2044 	ldr	r2, [pc, #68]	; e2c8 <g_halMatlab_recvPacket_ui32+0xbc>
    e280:	e0833002 	add	r3, r3, r2
    e284:	e50b300c 	str	r3, [fp, #-12]
//		// blocking behavior (standard)
//		l_recvFromFlag_i32 = 0;
//	}

	// recv telegram (blocking!)
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
    e288:	e3a03010 	mov	r3, #16
    e28c:	e50b3014 	str	r3, [fp, #-20]
	return recvfrom(	f_socketHandler_i32,
						f_recvBuffer_pui8,
						f_recvBufferSize_ui32,
						l_recvFromFlag_i32,
						(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
    e290:	e51b300c 	ldr	r3, [fp, #-12]
    e294:	e2833010 	add	r3, r3, #16
//		l_recvFromFlag_i32 = 0;
//	}

	// recv telegram (blocking!)
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
	return recvfrom(	f_socketHandler_i32,
    e298:	e58d3000 	str	r3, [sp]
    e29c:	e24b3014 	sub	r3, fp, #20
    e2a0:	e58d3004 	str	r3, [sp, #4]
    e2a4:	e51b0018 	ldr	r0, [fp, #-24]
    e2a8:	e51b101c 	ldr	r1, [fp, #-28]
    e2ac:	e51b2020 	ldr	r2, [fp, #-32]
    e2b0:	e51b3010 	ldr	r3, [fp, #-16]
    e2b4:	ebffea26 	bl	8b54 <_init+0x1dc>
    e2b8:	e1a03000 	mov	r3, r0
						f_recvBuffer_pui8,
						f_recvBufferSize_ui32,
						l_recvFromFlag_i32,
						(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
						&l_socketStructSize_ui32);
}
    e2bc:	e1a00003 	mov	r0, r3
    e2c0:	e24bd004 	sub	sp, fp, #4
    e2c4:	e8bd8800 	pop	{fp, pc}
    e2c8:	000198f8 	.word	0x000198f8

0000e2cc <g_halMatlab_configSocket_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_configSocket_bl(	int f_socketHandler_i32,
		const unsigned char* const f_destIpv4_rg4ui8,
		unsigned short f_destPort_ui16)
{
    e2cc:	e92d4800 	push	{fp, lr}
    e2d0:	e28db004 	add	fp, sp, #4
    e2d4:	e24dd020 	sub	sp, sp, #32
    e2d8:	e50b0018 	str	r0, [fp, #-24]
    e2dc:	e50b101c 	str	r1, [fp, #-28]
    e2e0:	e1a03002 	mov	r3, r2
    e2e4:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
	signed short 			l_socketSlotNumber_i16 	= 0;
    e2e8:	e3a03000 	mov	r3, #0
    e2ec:	e14b30b6 	strh	r3, [fp, #-6]
	halMatlab_socketData* 	l_socketConfig_pst		= 0;
    e2f0:	e3a03000 	mov	r3, #0
    e2f4:	e50b300c 	str	r3, [fp, #-12]
	unsigned int			l_ipv4Addr_ui32			= 0;
    e2f8:	e3a03000 	mov	r3, #0
    e2fc:	e50b3010 	str	r3, [fp, #-16]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    e300:	e51b0018 	ldr	r0, [fp, #-24]
    e304:	ebfffe9a 	bl	dd74 <l_findSocket_i16>
    e308:	e1a03000 	mov	r3, r0
    e30c:	e14b30b6 	strh	r3, [fp, #-6]
    e310:	e15b30f6 	ldrsh	r3, [fp, #-6]
    e314:	e3530000 	cmp	r3, #0
    e318:	aa000001 	bge	e324 <g_halMatlab_configSocket_bl+0x58>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    e31c:	e3a03001 	mov	r3, #1
    e320:	ea00002f 	b	e3e4 <g_halMatlab_configSocket_bl+0x118>
	}

	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);
    e324:	e15b20f6 	ldrsh	r2, [fp, #-6]
    e328:	e1a03002 	mov	r3, r2
    e32c:	e1a03183 	lsl	r3, r3, #3
    e330:	e0833002 	add	r3, r3, r2
    e334:	e1a03103 	lsl	r3, r3, #2
    e338:	e59f20b0 	ldr	r2, [pc, #176]	; e3f0 <g_halMatlab_configSocket_bl+0x124>
    e33c:	e0833002 	add	r3, r3, r2
    e340:	e50b300c 	str	r3, [fp, #-12]

	// set values in l_socketConfig_pst->sockAddrRemote_st
	memset((char*) &l_socketConfig_pst->sockAddrRemote_st, 0, sizeof(l_socketConfig_pst->sockAddrRemote_st));
    e344:	e51b300c 	ldr	r3, [fp, #-12]
    e348:	e2833010 	add	r3, r3, #16
    e34c:	e1a00003 	mov	r0, r3
    e350:	e3a01000 	mov	r1, #0
    e354:	e3a02010 	mov	r2, #16
    e358:	ebffe9ac 	bl	8a10 <_init+0x98>
	l_socketConfig_pst->sockAddrRemote_st.sin_family = AF_INET;
    e35c:	e51b300c 	ldr	r3, [fp, #-12]
    e360:	e3a02002 	mov	r2, #2
    e364:	e1c321b0 	strh	r2, [r3, #16]
	l_socketConfig_pst->sockAddrRemote_st.sin_port = htons(f_destPort_ui16);
    e368:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
    e36c:	e1a00003 	mov	r0, r3
    e370:	ebffe9a3 	bl	8a04 <_init+0x8c>
    e374:	e1a03000 	mov	r3, r0
    e378:	e1a02003 	mov	r2, r3
    e37c:	e51b300c 	ldr	r3, [fp, #-12]
    e380:	e1c321b2 	strh	r2, [r3, #18]

	// assemble 4 bytes of IPv4 address into one 32bit value
	l_ipv4Addr_ui32 = 		( f_destIpv4_rg4ui8[0] << 24 )
    e384:	e51b301c 	ldr	r3, [fp, #-28]
    e388:	e5d33000 	ldrb	r3, [r3]
    e38c:	e1a02c03 	lsl	r2, r3, #24
						+ 	( f_destIpv4_rg4ui8[1] << 16 )
    e390:	e51b301c 	ldr	r3, [fp, #-28]
    e394:	e2833001 	add	r3, r3, #1
    e398:	e5d33000 	ldrb	r3, [r3]
    e39c:	e1a03803 	lsl	r3, r3, #16
    e3a0:	e0822003 	add	r2, r2, r3
						+ 	( f_destIpv4_rg4ui8[2] << 8 )
    e3a4:	e51b301c 	ldr	r3, [fp, #-28]
    e3a8:	e2833002 	add	r3, r3, #2
    e3ac:	e5d33000 	ldrb	r3, [r3]
    e3b0:	e1a03403 	lsl	r3, r3, #8
    e3b4:	e0822003 	add	r2, r2, r3
						+ 	( f_destIpv4_rg4ui8[3] );
    e3b8:	e51b301c 	ldr	r3, [fp, #-28]
    e3bc:	e2833003 	add	r3, r3, #3
    e3c0:	e5d33000 	ldrb	r3, [r3]
    e3c4:	e0823003 	add	r3, r2, r3
	memset((char*) &l_socketConfig_pst->sockAddrRemote_st, 0, sizeof(l_socketConfig_pst->sockAddrRemote_st));
	l_socketConfig_pst->sockAddrRemote_st.sin_family = AF_INET;
	l_socketConfig_pst->sockAddrRemote_st.sin_port = htons(f_destPort_ui16);

	// assemble 4 bytes of IPv4 address into one 32bit value
	l_ipv4Addr_ui32 = 		( f_destIpv4_rg4ui8[0] << 24 )
    e3c8:	e50b3010 	str	r3, [fp, #-16]
						+ 	( f_destIpv4_rg4ui8[1] << 16 )
						+ 	( f_destIpv4_rg4ui8[2] << 8 )
						+ 	( f_destIpv4_rg4ui8[3] );

	l_socketConfig_pst->sockAddrRemote_st.sin_addr.s_addr = htonl( l_ipv4Addr_ui32 );
    e3cc:	e51b0010 	ldr	r0, [fp, #-16]
    e3d0:	ebffe9d9 	bl	8b3c <_init+0x1c4>
    e3d4:	e1a02000 	mov	r2, r0
    e3d8:	e51b300c 	ldr	r3, [fp, #-12]
    e3dc:	e5832014 	str	r2, [r3, #20]

	return M_HAL_MATLAB_SUCCESS_UI8;
    e3e0:	e3a03000 	mov	r3, #0
}
    e3e4:	e1a00003 	mov	r0, r3
    e3e8:	e24bd004 	sub	sp, fp, #4
    e3ec:	e8bd8800 	pop	{fp, pc}
    e3f0:	000198f8 	.word	0x000198f8

0000e3f4 <g_halMatlab_sendSigState_bl>:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_sendSigState_bl(	int f_socketHandler_i32,
											sigOri_orientationAngles f_sigState_st )
{
    e3f4:	e92d4800 	push	{fp, lr}
    e3f8:	e28db004 	add	fp, sp, #4
    e3fc:	e24dd048 	sub	sp, sp, #72	; 0x48
    e400:	e50b0030 	str	r0, [fp, #-48]	; 0x30
    e404:	eeb05b40 	vmov.f64	d5, d0
    e408:	eeb06b41 	vmov.f64	d6, d1
    e40c:	eeb07b42 	vmov.f64	d7, d2
    e410:	ed0b5b13 	vstr	d5, [fp, #-76]	; 0xffffffb4
    e414:	ed0b6b11 	vstr	d6, [fp, #-68]	; 0xffffffbc
    e418:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    e41c:	e24b302c 	sub	r3, fp, #44	; 0x2c
    e420:	e3a00000 	mov	r0, #0
    e424:	e1a01003 	mov	r1, r3
    e428:	ebffe963 	bl	89bc <_init+0x44>
    e42c:	e1a03000 	mov	r3, r0
    e430:	e3530000 	cmp	r3, #0
    e434:	0a000001 	beq	e440 <g_halMatlab_sendSigState_bl+0x4c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    e438:	e3a03001 	mov	r3, #1
    e43c:	ea00000f 	b	e480 <g_halMatlab_sendSigState_bl+0x8c>
	}

	//assmeble timestamp and
	l_rtSigPayload_st.timestamp_st 	= l_timestamp_st;
    e440:	e24b3024 	sub	r3, fp, #36	; 0x24
    e444:	e24b202c 	sub	r2, fp, #44	; 0x2c
    e448:	e8920003 	ldm	r2, {r0, r1}
    e44c:	e8830003 	stm	r3, {r0, r1}
	l_rtSigPayload_st.sigState_st	= f_sigState_st;
    e450:	e24bc01c 	sub	ip, fp, #28
    e454:	e24be04c 	sub	lr, fp, #76	; 0x4c
    e458:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    e45c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    e460:	e89e0003 	ldm	lr, {r0, r1}
    e464:	e88c0003 	stm	ip, {r0, r1}

	return g_halMatlab_sendPacket_bl( 	f_socketHandler_i32,
    e468:	e24b3024 	sub	r3, fp, #36	; 0x24
    e46c:	e51b0030 	ldr	r0, [fp, #-48]	; 0x30
    e470:	e1a01003 	mov	r1, r3
    e474:	e3a02020 	mov	r2, #32
    e478:	ebffff04 	bl	e090 <g_halMatlab_sendPacket_bl>
    e47c:	e1a03000 	mov	r3, r0
										(unsigned char*)&l_rtSigPayload_st,
										sizeof( l_rtSigPayload_st ) );
}
    e480:	e1a00003 	mov	r0, r3
    e484:	e24bd004 	sub	sp, fp, #4
    e488:	e8bd8800 	pop	{fp, pc}

0000e48c <g_halMatlab_sendSigAllStates_bl>:
 ***********************************************************************/
unsigned int g_halMatlab_sendSigAllStates_bl(	int f_socketHandler_i32,
												halImu_orientationValues f_rawImuState_st,
												sigOri_orientationAngles f_sigKalmanState_st,
												sigOri_orientationAngles f_sigComplementaryState_st )
{
    e48c:	e24dd008 	sub	sp, sp, #8
    e490:	e92d4800 	push	{fp, lr}
    e494:	e28db004 	add	fp, sp, #4
    e498:	e24dd0d8 	sub	sp, sp, #216	; 0xd8
    e49c:	e50b00a8 	str	r0, [fp, #-168]	; 0xa8
    e4a0:	e28b1004 	add	r1, fp, #4
    e4a4:	e881000c 	stm	r1, {r2, r3}
    e4a8:	eeb06b44 	vmov.f64	d6, d4
    e4ac:	eeb07b45 	vmov.f64	d7, d5
    e4b0:	ed0b0b31 	vstr	d0, [fp, #-196]	; 0xffffff3c
    e4b4:	ed0b1b2f 	vstr	d1, [fp, #-188]	; 0xffffff44
    e4b8:	ed0b2b2d 	vstr	d2, [fp, #-180]	; 0xffffff4c
    e4bc:	ed0b3b37 	vstr	d3, [fp, #-220]	; 0xffffff24
    e4c0:	ed0b6b35 	vstr	d6, [fp, #-212]	; 0xffffff2c
    e4c4:	ed0b7b33 	vstr	d7, [fp, #-204]	; 0xffffff34
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    e4c8:	e24b30a4 	sub	r3, fp, #164	; 0xa4
    e4cc:	e3a00000 	mov	r0, #0
    e4d0:	e1a01003 	mov	r1, r3
    e4d4:	ebffe938 	bl	89bc <_init+0x44>
    e4d8:	e1a03000 	mov	r3, r0
    e4dc:	e3530000 	cmp	r3, #0
    e4e0:	0a000001 	beq	e4ec <g_halMatlab_sendSigAllStates_bl+0x60>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    e4e4:	e3a03001 	mov	r3, #1
    e4e8:	ea00001c 	b	e560 <g_halMatlab_sendSigAllStates_bl+0xd4>
	}

	//assmeble timestamp and
	l_rtCompleteSigPayload_st.timestamp_st 				= l_timestamp_st;
    e4ec:	e24b309c 	sub	r3, fp, #156	; 0x9c
    e4f0:	e24b20a4 	sub	r2, fp, #164	; 0xa4
    e4f4:	e8920003 	ldm	r2, {r0, r1}
    e4f8:	e8830003 	stm	r3, {r0, r1}
	l_rtCompleteSigPayload_st.imuState_st				= f_rawImuState_st;
    e4fc:	e24b1094 	sub	r1, fp, #148	; 0x94
    e500:	e28b2004 	add	r2, fp, #4
    e504:	e3a03060 	mov	r3, #96	; 0x60
    e508:	e1a00001 	mov	r0, r1
    e50c:	e1a01002 	mov	r1, r2
    e510:	e1a02003 	mov	r2, r3
    e514:	ebffe967 	bl	8ab8 <_init+0x140>
	l_rtCompleteSigPayload_st.kalmanSigState_st 		= f_sigKalmanState_st;
    e518:	e24bc034 	sub	ip, fp, #52	; 0x34
    e51c:	e24be0c4 	sub	lr, fp, #196	; 0xc4
    e520:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    e524:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    e528:	e89e0003 	ldm	lr, {r0, r1}
    e52c:	e88c0003 	stm	ip, {r0, r1}
	l_rtCompleteSigPayload_st.complementarySigState_st	= f_sigComplementaryState_st;
    e530:	e24bc01c 	sub	ip, fp, #28
    e534:	e24be0dc 	sub	lr, fp, #220	; 0xdc
    e538:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    e53c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    e540:	e89e0003 	ldm	lr, {r0, r1}
    e544:	e88c0003 	stm	ip, {r0, r1}

	return g_halMatlab_sendPacket_bl( 	f_socketHandler_i32,
    e548:	e24b309c 	sub	r3, fp, #156	; 0x9c
    e54c:	e51b00a8 	ldr	r0, [fp, #-168]	; 0xa8
    e550:	e1a01003 	mov	r1, r3
    e554:	e3a02098 	mov	r2, #152	; 0x98
    e558:	ebfffecc 	bl	e090 <g_halMatlab_sendPacket_bl>
    e55c:	e1a03000 	mov	r3, r0
										(unsigned char*)&l_rtCompleteSigPayload_st,
										sizeof( l_rtCompleteSigPayload_st ) );
}
    e560:	e1a00003 	mov	r0, r3
    e564:	e24bd004 	sub	sp, fp, #4
    e568:	e8bd4800 	pop	{fp, lr}
    e56c:	e28dd008 	add	sp, sp, #8
    e570:	e12fff1e 	bx	lr

0000e574 <g_halMatlab_recvSigState_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halMatlab_rtSigPayload g_halMatlab_recvSigState_bl( int f_socketHandler_i32 ) {
    e574:	e92d4800 	push	{fp, lr}
    e578:	e28db004 	add	fp, sp, #4
    e57c:	e24dd050 	sub	sp, sp, #80	; 0x50
    e580:	e50b0050 	str	r0, [fp, #-80]	; 0x50
    e584:	e50b1054 	str	r1, [fp, #-84]	; 0x54
	halMatlab_rtSigPayload 		l_recvSigState_st;
	unsigned char				l_recvBuffer_rgXui8[ sizeof(halMatlab_rtSigPayload) ];
	unsigned int				l_recvBytesNumber_ui32;

	// zero all values
	l_recvSigState_st.timestamp_st.tv_sec 	= 0;
    e588:	e3a03000 	mov	r3, #0
    e58c:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
	l_recvSigState_st.timestamp_st.tv_nsec 	= 0;
    e590:	e3a03000 	mov	r3, #0
    e594:	e50b3028 	str	r3, [fp, #-40]	; 0x28

	l_recvSigState_st.sigState_st.roll_f64 	= 0;
    e598:	e3a02000 	mov	r2, #0
    e59c:	e3a03000 	mov	r3, #0
    e5a0:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	l_recvSigState_st.sigState_st.pitch_f64 = 0;
    e5a4:	e3a02000 	mov	r2, #0
    e5a8:	e3a03000 	mov	r3, #0
    e5ac:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	l_recvSigState_st.sigState_st.yaw_f64 	= 0;
    e5b0:	e3a02000 	mov	r2, #0
    e5b4:	e3a03000 	mov	r3, #0
    e5b8:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec


	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    e5bc:	e24b304c 	sub	r3, fp, #76	; 0x4c
    e5c0:	e51b0054 	ldr	r0, [fp, #-84]	; 0x54
    e5c4:	e1a01003 	mov	r1, r3
    e5c8:	e3a02020 	mov	r2, #32
    e5cc:	ebffff0e 	bl	e20c <g_halMatlab_recvPacket_ui32>
    e5d0:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halMatlab_rtSigPayload) );

	if ( l_recvBytesNumber_ui32 == sizeof(halMatlab_rtSigPayload) )
    e5d4:	e51b3008 	ldr	r3, [fp, #-8]
    e5d8:	e3530020 	cmp	r3, #32
    e5dc:	1a000005 	bne	e5f8 <g_halMatlab_recvSigState_bl+0x84>
	{
		memcpy( &l_recvSigState_st, &l_recvBuffer_rgXui8, sizeof(halMatlab_rtSigPayload));
    e5e0:	e24b202c 	sub	r2, fp, #44	; 0x2c
    e5e4:	e24b304c 	sub	r3, fp, #76	; 0x4c
    e5e8:	e1a00002 	mov	r0, r2
    e5ec:	e1a01003 	mov	r1, r3
    e5f0:	e3a02020 	mov	r2, #32
    e5f4:	ebffe92f 	bl	8ab8 <_init+0x140>
	}

	return l_recvSigState_st;
    e5f8:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
    e5fc:	e1a0c003 	mov	ip, r3
    e600:	e24be02c 	sub	lr, fp, #44	; 0x2c
    e604:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    e608:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    e60c:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
    e610:	e88c000f 	stm	ip, {r0, r1, r2, r3}
}
    e614:	e51b0050 	ldr	r0, [fp, #-80]	; 0x50
    e618:	e24bd004 	sub	sp, fp, #4
    e61c:	e8bd8800 	pop	{fp, pc}

0000e620 <g_halMatlab_recvSigAllStates_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halMatlab_rtSigAllStatePayload g_halMatlab_recvSigAllStates_bl( int f_socketHandler_i32 ) {
    e620:	e92d4800 	push	{fp, lr}
    e624:	e28db004 	add	fp, sp, #4
    e628:	e24ddd05 	sub	sp, sp, #320	; 0x140
    e62c:	e50b0140 	str	r0, [fp, #-320]	; 0x140
    e630:	e50b1144 	str	r1, [fp, #-324]	; 0x144
	halMatlab_rtSigAllStatePayload 		l_recvSigAllStates_st;
	unsigned char				              l_recvBuffer_rgXui8[ sizeof(halMatlab_rtSigAllStatePayload) ];
	unsigned int				              l_recvBytesNumber_ui32;

	// zero all values
	l_recvSigAllStates_st.timestamp_st.tv_sec 	= 0;
    e634:	e3a03000 	mov	r3, #0
    e638:	e50b30a4 	str	r3, [fp, #-164]	; 0xa4
	l_recvSigAllStates_st.timestamp_st.tv_nsec 	= 0;
    e63c:	e3a03000 	mov	r3, #0
    e640:	e50b30a0 	str	r3, [fp, #-160]	; 0xa0

    l_recvSigAllStates_st.imuState_st.acc.x_f64       = 0;
    e644:	e3a02000 	mov	r2, #0
    e648:	e3a03000 	mov	r3, #0
    e64c:	e14b29f4 	strd	r2, [fp, #-148]	; 0xffffff6c
    l_recvSigAllStates_st.imuState_st.acc.y_f64       = 0;
    e650:	e3a02000 	mov	r2, #0
    e654:	e3a03000 	mov	r3, #0
    e658:	e14b28fc 	strd	r2, [fp, #-140]	; 0xffffff74
    l_recvSigAllStates_st.imuState_st.acc.z_f64       = 0;
    e65c:	e3a02000 	mov	r2, #0
    e660:	e3a03000 	mov	r3, #0
    e664:	e14b28f4 	strd	r2, [fp, #-132]	; 0xffffff7c
  
    l_recvSigAllStates_st.imuState_st.mag.x_f64       = 0;
    e668:	e3a02000 	mov	r2, #0
    e66c:	e3a03000 	mov	r3, #0
    e670:	e14b27fc 	strd	r2, [fp, #-124]	; 0xffffff84
    l_recvSigAllStates_st.imuState_st.mag.y_f64       = 0;
    e674:	e3a02000 	mov	r2, #0
    e678:	e3a03000 	mov	r3, #0
    e67c:	e14b27f4 	strd	r2, [fp, #-116]	; 0xffffff8c
    l_recvSigAllStates_st.imuState_st.mag.z_f64       = 0;
    e680:	e3a02000 	mov	r2, #0
    e684:	e3a03000 	mov	r3, #0
    e688:	e14b26fc 	strd	r2, [fp, #-108]	; 0xffffff94
  
	l_recvSigAllStates_st.imuState_st.gyro.roll_f64 	= 0;
    e68c:	e3a02000 	mov	r2, #0
    e690:	e3a03000 	mov	r3, #0
    e694:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
    l_recvSigAllStates_st.imuState_st.gyro.pitch_f64  = 0;
    e698:	e3a02000 	mov	r2, #0
    e69c:	e3a03000 	mov	r3, #0
    e6a0:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	l_recvSigAllStates_st.imuState_st.gyro.yaw_f64 	  = 0;
    e6a4:	e3a02000 	mov	r2, #0
    e6a8:	e3a03000 	mov	r3, #0
    e6ac:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac
  
    l_recvSigAllStates_st.imuState_st.temperature_f64 = 0;
    e6b0:	e3a02000 	mov	r2, #0
    e6b4:	e3a03000 	mov	r3, #0
    e6b8:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
    l_recvSigAllStates_st.imuState_st.pressure_f64    = 0;
    e6bc:	e3a02000 	mov	r2, #0
    e6c0:	e3a03000 	mov	r3, #0
    e6c4:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
  
	l_recvSigAllStates_st.kalmanSigState_st.roll_f64 	= 0;
    e6c8:	e3a02000 	mov	r2, #0
    e6cc:	e3a03000 	mov	r3, #0
    e6d0:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4
	l_recvSigAllStates_st.kalmanSigState_st.pitch_f64 = 0;
    e6d4:	e3a02000 	mov	r2, #0
    e6d8:	e3a03000 	mov	r3, #0
    e6dc:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	l_recvSigAllStates_st.kalmanSigState_st.yaw_f64 	= 0;
    e6e0:	e3a02000 	mov	r2, #0
    e6e4:	e3a03000 	mov	r3, #0
    e6e8:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4

	l_recvSigAllStates_st.complementarySigState_st.roll_f64 	= 0;
    e6ec:	e3a02000 	mov	r2, #0
    e6f0:	e3a03000 	mov	r3, #0
    e6f4:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
    l_recvSigAllStates_st.complementarySigState_st.pitch_f64 = 0;
    e6f8:	e3a02000 	mov	r2, #0
    e6fc:	e3a03000 	mov	r3, #0
    e700:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	l_recvSigAllStates_st.complementarySigState_st.yaw_f64 	= 0;
    e704:	e3a02000 	mov	r2, #0
    e708:	e3a03000 	mov	r3, #0
    e70c:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    e710:	e24b3f4f 	sub	r3, fp, #316	; 0x13c
    e714:	e51b0144 	ldr	r0, [fp, #-324]	; 0x144
    e718:	e1a01003 	mov	r1, r3
    e71c:	e3a02098 	mov	r2, #152	; 0x98
    e720:	ebfffeb9 	bl	e20c <g_halMatlab_recvPacket_ui32>
    e724:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halMatlab_rtSigAllStatePayload) );

	if ( l_recvBytesNumber_ui32 == sizeof(halMatlab_rtSigAllStatePayload) )
    e728:	e51b3008 	ldr	r3, [fp, #-8]
    e72c:	e3530098 	cmp	r3, #152	; 0x98
    e730:	1a000005 	bne	e74c <g_halMatlab_recvSigAllStates_bl+0x12c>
	{
		memcpy( &l_recvSigAllStates_st, &l_recvBuffer_rgXui8, sizeof(halMatlab_rtSigAllStatePayload));
    e734:	e24b20a4 	sub	r2, fp, #164	; 0xa4
    e738:	e24b3f4f 	sub	r3, fp, #316	; 0x13c
    e73c:	e1a00002 	mov	r0, r2
    e740:	e1a01003 	mov	r1, r3
    e744:	e3a02098 	mov	r2, #152	; 0x98
    e748:	ebffe8da 	bl	8ab8 <_init+0x140>
	}

	return l_recvSigAllStates_st;
    e74c:	e51b3140 	ldr	r3, [fp, #-320]	; 0x140
    e750:	e1a01003 	mov	r1, r3
    e754:	e24b20a4 	sub	r2, fp, #164	; 0xa4
    e758:	e3a03098 	mov	r3, #152	; 0x98
    e75c:	e1a00001 	mov	r0, r1
    e760:	e1a01002 	mov	r1, r2
    e764:	e1a02003 	mov	r2, r3
    e768:	ebffe8d2 	bl	8ab8 <_init+0x140>
}
    e76c:	e51b0140 	ldr	r0, [fp, #-320]	; 0x140
    e770:	e24bd004 	sub	sp, fp, #4
    e774:	e8bd8800 	pop	{fp, pc}

0000e778 <m_getIndex_i32>:
#include <math.h>
//memcpy(dest, src, strlen(src)+1);


unsigned int m_getIndex_i32(unsigned int f_maxCol_ui32,unsigned int f_row_ui32,unsigned int f_col_ui32)
{
    e778:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    e77c:	e28db000 	add	fp, sp, #0
    e780:	e24dd014 	sub	sp, sp, #20
    e784:	e50b0008 	str	r0, [fp, #-8]
    e788:	e50b100c 	str	r1, [fp, #-12]
    e78c:	e50b2010 	str	r2, [fp, #-16]
	return (f_maxCol_ui32*f_row_ui32+f_col_ui32);
    e790:	e51b3008 	ldr	r3, [fp, #-8]
    e794:	e51b200c 	ldr	r2, [fp, #-12]
    e798:	e0020392 	mul	r2, r2, r3
    e79c:	e51b3010 	ldr	r3, [fp, #-16]
    e7a0:	e0823003 	add	r3, r2, r3
}
    e7a4:	e1a00003 	mov	r0, r3
    e7a8:	e24bd000 	sub	sp, fp, #0
    e7ac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    e7b0:	e12fff1e 	bx	lr

0000e7b4 <g_sigMath_matrixMultiplikation_bl>:
unsigned int g_sigMath_matrixMultiplikation_bl(
		double* f_matrixResult_pf64, double* f_matrixA_pf64,
		unsigned int f_nrOfRowsA_ui32, unsigned int f_nrOfColsA_ui32,
		double* f_matrixB_pf64, unsigned int f_nrOfRowsB_ui32,
		unsigned int f_nrOfColsB_ui32)
{
    e7b4:	e92d4800 	push	{fp, lr}
    e7b8:	ed2d8b02 	vpush	{d8}
    e7bc:	e28db00c 	add	fp, sp, #12
    e7c0:	e24dd028 	sub	sp, sp, #40	; 0x28
    e7c4:	e50b0028 	str	r0, [fp, #-40]	; 0x28
    e7c8:	e50b102c 	str	r1, [fp, #-44]	; 0x2c
    e7cc:	e50b2030 	str	r2, [fp, #-48]	; 0x30
    e7d0:	e50b3034 	str	r3, [fp, #-52]	; 0x34
	unsigned int l_rowCounter_ui32=0;
    e7d4:	e3a03000 	mov	r3, #0
    e7d8:	e50b3010 	str	r3, [fp, #-16]
	unsigned int l_colCounter_ui32=0;
    e7dc:	e3a03000 	mov	r3, #0
    e7e0:	e50b3014 	str	r3, [fp, #-20]
	unsigned int l_innerCounter_ui32=0;
    e7e4:	e3a03000 	mov	r3, #0
    e7e8:	e50b3018 	str	r3, [fp, #-24]
	double l_temporalStorage_f64=0;
    e7ec:	e3a02000 	mov	r2, #0
    e7f0:	e3a03000 	mov	r3, #0
    e7f4:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc

	if(f_nrOfColsA_ui32!=f_nrOfRowsB_ui32)
    e7f8:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    e7fc:	e59b3008 	ldr	r3, [fp, #8]
    e800:	e1520003 	cmp	r2, r3
    e804:	0a000001 	beq	e810 <g_sigMath_matrixMultiplikation_bl+0x5c>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    e808:	e3a03001 	mov	r3, #1
    e80c:	ea000041 	b	e918 <g_sigMath_matrixMultiplikation_bl+0x164>
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    e810:	e3a03000 	mov	r3, #0
    e814:	e50b3010 	str	r3, [fp, #-16]
    e818:	ea000039 	b	e904 <g_sigMath_matrixMultiplikation_bl+0x150>
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
    e81c:	e3a03000 	mov	r3, #0
    e820:	e50b3014 	str	r3, [fp, #-20]
    e824:	ea00002f 	b	e8e8 <g_sigMath_matrixMultiplikation_bl+0x134>
			{
				for(l_innerCounter_ui32=0;l_innerCounter_ui32<f_nrOfColsA_ui32;l_innerCounter_ui32++)
    e828:	e3a03000 	mov	r3, #0
    e82c:	e50b3018 	str	r3, [fp, #-24]
    e830:	ea000018 	b	e898 <g_sigMath_matrixMultiplikation_bl+0xe4>
				{
					l_temporalStorage_f64+=f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_innerCounter_ui32)]*
    e834:	e51b0034 	ldr	r0, [fp, #-52]	; 0x34
    e838:	e51b1010 	ldr	r1, [fp, #-16]
    e83c:	e51b2018 	ldr	r2, [fp, #-24]
    e840:	ebffffcc 	bl	e778 <m_getIndex_i32>
    e844:	e1a03000 	mov	r3, r0
    e848:	e1a03183 	lsl	r3, r3, #3
    e84c:	e51b202c 	ldr	r2, [fp, #-44]	; 0x2c
    e850:	e0823003 	add	r3, r2, r3
    e854:	ed938b00 	vldr	d8, [r3]
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_innerCounter_ui32,l_colCounter_ui32)];
    e858:	e59b000c 	ldr	r0, [fp, #12]
    e85c:	e51b1018 	ldr	r1, [fp, #-24]
    e860:	e51b2014 	ldr	r2, [fp, #-20]
    e864:	ebffffc3 	bl	e778 <m_getIndex_i32>
    e868:	e1a03000 	mov	r3, r0
    e86c:	e1a03183 	lsl	r3, r3, #3
    e870:	e59b2004 	ldr	r2, [fp, #4]
    e874:	e0823003 	add	r3, r2, r3
    e878:	ed937b00 	vldr	d7, [r3]
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
			{
				for(l_innerCounter_ui32=0;l_innerCounter_ui32<f_nrOfColsA_ui32;l_innerCounter_ui32++)
				{
					l_temporalStorage_f64+=f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_innerCounter_ui32)]*
    e87c:	ee287b07 	vmul.f64	d7, d8, d7
    e880:	ed1b6b09 	vldr	d6, [fp, #-36]	; 0xffffffdc
    e884:	ee367b07 	vadd.f64	d7, d6, d7
    e888:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
			{
				for(l_innerCounter_ui32=0;l_innerCounter_ui32<f_nrOfColsA_ui32;l_innerCounter_ui32++)
    e88c:	e51b3018 	ldr	r3, [fp, #-24]
    e890:	e2833001 	add	r3, r3, #1
    e894:	e50b3018 	str	r3, [fp, #-24]
    e898:	e51b2018 	ldr	r2, [fp, #-24]
    e89c:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    e8a0:	e1520003 	cmp	r2, r3
    e8a4:	3affffe2 	bcc	e834 <g_sigMath_matrixMultiplikation_bl+0x80>
				{
					l_temporalStorage_f64+=f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_innerCounter_ui32)]*
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_innerCounter_ui32,l_colCounter_ui32)];
				}
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=l_temporalStorage_f64;
    e8a8:	e59b000c 	ldr	r0, [fp, #12]
    e8ac:	e51b1010 	ldr	r1, [fp, #-16]
    e8b0:	e51b2014 	ldr	r2, [fp, #-20]
    e8b4:	ebffffaf 	bl	e778 <m_getIndex_i32>
    e8b8:	e1a03000 	mov	r3, r0
    e8bc:	e1a03183 	lsl	r3, r3, #3
    e8c0:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    e8c4:	e0821003 	add	r1, r2, r3
    e8c8:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
    e8cc:	e1c120f0 	strd	r2, [r1]
				l_temporalStorage_f64=0;
    e8d0:	e3a02000 	mov	r2, #0
    e8d4:	e3a03000 	mov	r3, #0
    e8d8:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
    e8dc:	e51b3014 	ldr	r3, [fp, #-20]
    e8e0:	e2833001 	add	r3, r3, #1
    e8e4:	e50b3014 	str	r3, [fp, #-20]
    e8e8:	e51b2014 	ldr	r2, [fp, #-20]
    e8ec:	e59b300c 	ldr	r3, [fp, #12]
    e8f0:	e1520003 	cmp	r2, r3
    e8f4:	3affffcb 	bcc	e828 <g_sigMath_matrixMultiplikation_bl+0x74>

	if(f_nrOfColsA_ui32!=f_nrOfRowsB_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    e8f8:	e51b3010 	ldr	r3, [fp, #-16]
    e8fc:	e2833001 	add	r3, r3, #1
    e900:	e50b3010 	str	r3, [fp, #-16]
    e904:	e51b2010 	ldr	r2, [fp, #-16]
    e908:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    e90c:	e1520003 	cmp	r2, r3
    e910:	3affffc1 	bcc	e81c <g_sigMath_matrixMultiplikation_bl+0x68>
				}
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=l_temporalStorage_f64;
				l_temporalStorage_f64=0;
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    e914:	e3a03000 	mov	r3, #0
	}
}
    e918:	e1a00003 	mov	r0, r3
    e91c:	e24bd00c 	sub	sp, fp, #12
    e920:	ecbd8b02 	vpop	{d8}
    e924:	e8bd8800 	pop	{fp, pc}

0000e928 <g_sigMath_matrixAddition_bl>:
 ***********************************************************************/
unsigned int g_sigMath_matrixAddition_bl(double* f_matrixResult_pf64,
		double* f_matrixA_pf64, unsigned int f_nrOfRowsA_ui32,
		unsigned int f_nrOfColsA_ui32, double* f_matrixB_pf64,
		unsigned int f_nrOfRowsB_ui32, unsigned int f_nrOfColsB_ui32)
		{
    e928:	e92d4810 	push	{r4, fp, lr}
    e92c:	ed2d8b02 	vpush	{d8}
    e930:	e28db010 	add	fp, sp, #16
    e934:	e24dd01c 	sub	sp, sp, #28
    e938:	e50b0020 	str	r0, [fp, #-32]
    e93c:	e50b1024 	str	r1, [fp, #-36]	; 0x24
    e940:	e50b2028 	str	r2, [fp, #-40]	; 0x28
    e944:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
	unsigned int l_rowCounter_ui32=0;
    e948:	e3a03000 	mov	r3, #0
    e94c:	e50b3018 	str	r3, [fp, #-24]
	unsigned int l_colCounter_ui32=0;
    e950:	e3a03000 	mov	r3, #0
    e954:	e50b301c 	str	r3, [fp, #-28]

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
    e958:	e51b202c 	ldr	r2, [fp, #-44]	; 0x2c
    e95c:	e59b300c 	ldr	r3, [fp, #12]
    e960:	e1520003 	cmp	r2, r3
    e964:	0a000005 	beq	e980 <g_sigMath_matrixAddition_bl+0x58>
    e968:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    e96c:	e59b3008 	ldr	r3, [fp, #8]
    e970:	e1520003 	cmp	r2, r3
    e974:	0a000001 	beq	e980 <g_sigMath_matrixAddition_bl+0x58>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    e978:	e3a03001 	mov	r3, #1
    e97c:	ea000030 	b	ea44 <g_sigMath_matrixAddition_bl+0x11c>
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    e980:	e3a03000 	mov	r3, #0
    e984:	e50b3018 	str	r3, [fp, #-24]
    e988:	ea000028 	b	ea30 <g_sigMath_matrixAddition_bl+0x108>
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    e98c:	e3a03000 	mov	r3, #0
    e990:	e50b301c 	str	r3, [fp, #-28]
    e994:	ea00001e 	b	ea14 <g_sigMath_matrixAddition_bl+0xec>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    e998:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    e99c:	e51b1018 	ldr	r1, [fp, #-24]
    e9a0:	e51b201c 	ldr	r2, [fp, #-28]
    e9a4:	ebffff73 	bl	e778 <m_getIndex_i32>
    e9a8:	e1a03000 	mov	r3, r0
    e9ac:	e1a03183 	lsl	r3, r3, #3
    e9b0:	e51b2020 	ldr	r2, [fp, #-32]
    e9b4:	e0824003 	add	r4, r2, r3
						f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+
    e9b8:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    e9bc:	e51b1018 	ldr	r1, [fp, #-24]
    e9c0:	e51b201c 	ldr	r2, [fp, #-28]
    e9c4:	ebffff6b 	bl	e778 <m_getIndex_i32>
    e9c8:	e1a03000 	mov	r3, r0
    e9cc:	e1a03183 	lsl	r3, r3, #3
    e9d0:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
    e9d4:	e0823003 	add	r3, r2, r3
    e9d8:	ed938b00 	vldr	d8, [r3]
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
    e9dc:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    e9e0:	e51b1018 	ldr	r1, [fp, #-24]
    e9e4:	e51b201c 	ldr	r2, [fp, #-28]
    e9e8:	ebffff62 	bl	e778 <m_getIndex_i32>
    e9ec:	e1a03000 	mov	r3, r0
    e9f0:	e1a03183 	lsl	r3, r3, #3
    e9f4:	e59b2004 	ldr	r2, [fp, #4]
    e9f8:	e0823003 	add	r3, r2, r3
    e9fc:	ed937b00 	vldr	d7, [r3]
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+
    ea00:	ee387b07 	vadd.f64	d7, d8, d7
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    ea04:	ed847b00 	vstr	d7, [r4]
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    ea08:	e51b301c 	ldr	r3, [fp, #-28]
    ea0c:	e2833001 	add	r3, r3, #1
    ea10:	e50b301c 	str	r3, [fp, #-28]
    ea14:	e51b201c 	ldr	r2, [fp, #-28]
    ea18:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    ea1c:	e1520003 	cmp	r2, r3
    ea20:	3affffdc 	bcc	e998 <g_sigMath_matrixAddition_bl+0x70>

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    ea24:	e51b3018 	ldr	r3, [fp, #-24]
    ea28:	e2833001 	add	r3, r3, #1
    ea2c:	e50b3018 	str	r3, [fp, #-24]
    ea30:	e51b2018 	ldr	r2, [fp, #-24]
    ea34:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    ea38:	e1520003 	cmp	r2, r3
    ea3c:	3affffd2 	bcc	e98c <g_sigMath_matrixAddition_bl+0x64>
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    ea40:	e3a03000 	mov	r3, #0
	}
}
    ea44:	e1a00003 	mov	r0, r3
    ea48:	e24bd010 	sub	sp, fp, #16
    ea4c:	ecbd8b02 	vpop	{d8}
    ea50:	e8bd8810 	pop	{r4, fp, pc}

0000ea54 <g_sigMath_matrixSubtraktion_bl>:
 ***********************************************************************/
unsigned int g_sigMath_matrixSubtraktion_bl(double* f_matrixResult_pf64,
		double* f_matrixA_pf64, unsigned int f_nrOfRowsA_ui32,
		unsigned int f_nrOfColsA_ui32, double* f_matrixB_pf64,
		unsigned int f_nrOfRowsB_ui32, unsigned int f_nrOfColsB_ui32)
{
    ea54:	e92d4810 	push	{r4, fp, lr}
    ea58:	ed2d8b02 	vpush	{d8}
    ea5c:	e28db010 	add	fp, sp, #16
    ea60:	e24dd01c 	sub	sp, sp, #28
    ea64:	e50b0020 	str	r0, [fp, #-32]
    ea68:	e50b1024 	str	r1, [fp, #-36]	; 0x24
    ea6c:	e50b2028 	str	r2, [fp, #-40]	; 0x28
    ea70:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
	unsigned int l_rowCounter_ui32=0;
    ea74:	e3a03000 	mov	r3, #0
    ea78:	e50b3018 	str	r3, [fp, #-24]
	unsigned int l_colCounter_ui32=0;
    ea7c:	e3a03000 	mov	r3, #0
    ea80:	e50b301c 	str	r3, [fp, #-28]

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
    ea84:	e51b202c 	ldr	r2, [fp, #-44]	; 0x2c
    ea88:	e59b300c 	ldr	r3, [fp, #12]
    ea8c:	e1520003 	cmp	r2, r3
    ea90:	0a000005 	beq	eaac <g_sigMath_matrixSubtraktion_bl+0x58>
    ea94:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    ea98:	e59b3008 	ldr	r3, [fp, #8]
    ea9c:	e1520003 	cmp	r2, r3
    eaa0:	0a000001 	beq	eaac <g_sigMath_matrixSubtraktion_bl+0x58>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    eaa4:	e3a03001 	mov	r3, #1
    eaa8:	ea000030 	b	eb70 <g_sigMath_matrixSubtraktion_bl+0x11c>
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    eaac:	e3a03000 	mov	r3, #0
    eab0:	e50b3018 	str	r3, [fp, #-24]
    eab4:	ea000028 	b	eb5c <g_sigMath_matrixSubtraktion_bl+0x108>
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    eab8:	e3a03000 	mov	r3, #0
    eabc:	e50b301c 	str	r3, [fp, #-28]
    eac0:	ea00001e 	b	eb40 <g_sigMath_matrixSubtraktion_bl+0xec>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    eac4:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    eac8:	e51b1018 	ldr	r1, [fp, #-24]
    eacc:	e51b201c 	ldr	r2, [fp, #-28]
    ead0:	ebffff28 	bl	e778 <m_getIndex_i32>
    ead4:	e1a03000 	mov	r3, r0
    ead8:	e1a03183 	lsl	r3, r3, #3
    eadc:	e51b2020 	ldr	r2, [fp, #-32]
    eae0:	e0824003 	add	r4, r2, r3
							f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-
    eae4:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    eae8:	e51b1018 	ldr	r1, [fp, #-24]
    eaec:	e51b201c 	ldr	r2, [fp, #-28]
    eaf0:	ebffff20 	bl	e778 <m_getIndex_i32>
    eaf4:	e1a03000 	mov	r3, r0
    eaf8:	e1a03183 	lsl	r3, r3, #3
    eafc:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
    eb00:	e0823003 	add	r3, r2, r3
    eb04:	ed938b00 	vldr	d8, [r3]
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
    eb08:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    eb0c:	e51b1018 	ldr	r1, [fp, #-24]
    eb10:	e51b201c 	ldr	r2, [fp, #-28]
    eb14:	ebffff17 	bl	e778 <m_getIndex_i32>
    eb18:	e1a03000 	mov	r3, r0
    eb1c:	e1a03183 	lsl	r3, r3, #3
    eb20:	e59b2004 	ldr	r2, [fp, #4]
    eb24:	e0823003 	add	r3, r2, r3
    eb28:	ed937b00 	vldr	d7, [r3]
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
							f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-
    eb2c:	ee387b47 	vsub.f64	d7, d8, d7
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    eb30:	ed847b00 	vstr	d7, [r4]
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    eb34:	e51b301c 	ldr	r3, [fp, #-28]
    eb38:	e2833001 	add	r3, r3, #1
    eb3c:	e50b301c 	str	r3, [fp, #-28]
    eb40:	e51b201c 	ldr	r2, [fp, #-28]
    eb44:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    eb48:	e1520003 	cmp	r2, r3
    eb4c:	3affffdc 	bcc	eac4 <g_sigMath_matrixSubtraktion_bl+0x70>

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    eb50:	e51b3018 	ldr	r3, [fp, #-24]
    eb54:	e2833001 	add	r3, r3, #1
    eb58:	e50b3018 	str	r3, [fp, #-24]
    eb5c:	e51b2018 	ldr	r2, [fp, #-24]
    eb60:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    eb64:	e1520003 	cmp	r2, r3
    eb68:	3affffd2 	bcc	eab8 <g_sigMath_matrixSubtraktion_bl+0x64>
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
							f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    eb6c:	e3a03000 	mov	r3, #0
	}
}
    eb70:	e1a00003 	mov	r0, r3
    eb74:	e24bd010 	sub	sp, fp, #16
    eb78:	ecbd8b02 	vpop	{d8}
    eb7c:	e8bd8810 	pop	{r4, fp, pc}

0000eb80 <g_sigMath_matrixTransponiert_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixTransponiert_bl(
		double* f_matrixResult_pf64, double* f_matrix_pf64,
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32)
{
    eb80:	e92d4810 	push	{r4, fp, lr}
    eb84:	e28db008 	add	fp, sp, #8
    eb88:	e24dd01c 	sub	sp, sp, #28
    eb8c:	e50b0018 	str	r0, [fp, #-24]
    eb90:	e50b101c 	str	r1, [fp, #-28]
    eb94:	e50b2020 	str	r2, [fp, #-32]
    eb98:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	unsigned int l_rowCounter_ui32=0;
    eb9c:	e3a03000 	mov	r3, #0
    eba0:	e50b3010 	str	r3, [fp, #-16]
	unsigned int l_colCounter_ui32=0;
    eba4:	e3a03000 	mov	r3, #0
    eba8:	e50b3014 	str	r3, [fp, #-20]

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    ebac:	e3a03000 	mov	r3, #0
    ebb0:	e50b3010 	str	r3, [fp, #-16]
    ebb4:	ea00001e 	b	ec34 <g_sigMath_matrixTransponiert_bl+0xb4>
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    ebb8:	e3a03000 	mov	r3, #0
    ebbc:	e50b3014 	str	r3, [fp, #-20]
    ebc0:	ea000014 	b	ec18 <g_sigMath_matrixTransponiert_bl+0x98>
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_colCounter_ui32,l_rowCounter_ui32)]=
    ebc4:	e51b0024 	ldr	r0, [fp, #-36]	; 0x24
    ebc8:	e51b1014 	ldr	r1, [fp, #-20]
    ebcc:	e51b2010 	ldr	r2, [fp, #-16]
    ebd0:	ebfffee8 	bl	e778 <m_getIndex_i32>
    ebd4:	e1a03000 	mov	r3, r0
    ebd8:	e1a03183 	lsl	r3, r3, #3
    ebdc:	e51b2018 	ldr	r2, [fp, #-24]
    ebe0:	e0824003 	add	r4, r2, r3
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
    ebe4:	e51b0024 	ldr	r0, [fp, #-36]	; 0x24
    ebe8:	e51b1010 	ldr	r1, [fp, #-16]
    ebec:	e51b2014 	ldr	r2, [fp, #-20]
    ebf0:	ebfffee0 	bl	e778 <m_getIndex_i32>
    ebf4:	e1a03000 	mov	r3, r0
    ebf8:	e1a03183 	lsl	r3, r3, #3
    ebfc:	e51b201c 	ldr	r2, [fp, #-28]
    ec00:	e0823003 	add	r3, r2, r3
    ec04:	e1c320d0 	ldrd	r2, [r3]

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_colCounter_ui32,l_rowCounter_ui32)]=
    ec08:	e1c420f0 	strd	r2, [r4]
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    ec0c:	e51b3014 	ldr	r3, [fp, #-20]
    ec10:	e2833001 	add	r3, r3, #1
    ec14:	e50b3014 	str	r3, [fp, #-20]
    ec18:	e51b2014 	ldr	r2, [fp, #-20]
    ec1c:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
    ec20:	e1520003 	cmp	r2, r3
    ec24:	3affffe6 	bcc	ebc4 <g_sigMath_matrixTransponiert_bl+0x44>
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32)
{
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    ec28:	e51b3010 	ldr	r3, [fp, #-16]
    ec2c:	e2833001 	add	r3, r3, #1
    ec30:	e50b3010 	str	r3, [fp, #-16]
    ec34:	e51b2010 	ldr	r2, [fp, #-16]
    ec38:	e51b3020 	ldr	r3, [fp, #-32]
    ec3c:	e1520003 	cmp	r2, r3
    ec40:	3affffdc 	bcc	ebb8 <g_sigMath_matrixTransponiert_bl+0x38>
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_colCounter_ui32,l_rowCounter_ui32)]=
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
		}
	}
	return M_SIG_MATRIXLIB_SUCCESS_BL;
    ec44:	e3a03000 	mov	r3, #0
}
    ec48:	e1a00003 	mov	r0, r3
    ec4c:	e24bd008 	sub	sp, fp, #8
    ec50:	e8bd8810 	pop	{r4, fp, pc}

0000ec54 <g_sigMath_matrixInverse_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixInverse_bl(double* f_matrixResult_pf64,
		double* f_matrixA_pf64, unsigned int f_nrOfRowsA_ui32,
		unsigned int f_nrOfColsA_ui32)
{
    ec54:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec58:	ed2d8b02 	vpush	{d8}
    ec5c:	e28db028 	add	fp, sp, #40	; 0x28
    ec60:	e24dd0a4 	sub	sp, sp, #164	; 0xa4
    ec64:	e50b0078 	str	r0, [fp, #-120]	; 0x78
    ec68:	e50b107c 	str	r1, [fp, #-124]	; 0x7c
    ec6c:	e50b2080 	str	r2, [fp, #-128]	; 0x80
    ec70:	e50b3084 	str	r3, [fp, #-132]	; 0x84
    ec74:	e1a0300d 	mov	r3, sp
    ec78:	e1a0a003 	mov	sl, r3
	int l_rowCounter_ui32=0;
    ec7c:	e3a03000 	mov	r3, #0
    ec80:	e50b3030 	str	r3, [fp, #-48]	; 0x30
	int l_rowCounterInnerLoop_ui32=0;
    ec84:	e3a03000 	mov	r3, #0
    ec88:	e50b3034 	str	r3, [fp, #-52]	; 0x34
	int l_colCounter_ui32=0;
    ec8c:	e3a03000 	mov	r3, #0
    ec90:	e50b3038 	str	r3, [fp, #-56]	; 0x38
	double l_tempValue_f64=0;
    ec94:	e3a02000 	mov	r2, #0
    ec98:	e3a03000 	mov	r3, #0
    ec9c:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	//double l_determinant_f64=0;
	//Matrix for building a lower triangular matrix
	double l_lowerTriangularMatrix_f64[f_nrOfRowsA_ui32][f_nrOfColsA_ui32];
    eca0:	e51b8084 	ldr	r8, [fp, #-132]	; 0x84
    eca4:	e51b9080 	ldr	r9, [fp, #-128]	; 0x80
    eca8:	e1a03008 	mov	r3, r8
    ecac:	e2433001 	sub	r3, r3, #1
    ecb0:	e50b3048 	str	r3, [fp, #-72]	; 0x48
    ecb4:	e1a02008 	mov	r2, r8
    ecb8:	e3a03000 	mov	r3, #0
    ecbc:	e1a05303 	lsl	r5, r3, #6
    ecc0:	e1855d22 	orr	r5, r5, r2, lsr #26
    ecc4:	e1a04302 	lsl	r4, r2, #6
    ecc8:	e1a03009 	mov	r3, r9
    eccc:	e2433001 	sub	r3, r3, #1
    ecd0:	e50b304c 	str	r3, [fp, #-76]	; 0x4c
    ecd4:	e1a00008 	mov	r0, r8
    ecd8:	e3a01000 	mov	r1, #0
    ecdc:	e1a02009 	mov	r2, r9
    ece0:	e3a03000 	mov	r3, #0
    ece4:	e00e0192 	mul	lr, r2, r1
    ece8:	e00c0390 	mul	ip, r0, r3
    ecec:	e08ec00c 	add	ip, lr, ip
    ecf0:	e0832290 	umull	r2, r3, r0, r2
    ecf4:	e08c1003 	add	r1, ip, r3
    ecf8:	e1a03001 	mov	r3, r1
    ecfc:	e1a07303 	lsl	r7, r3, #6
    ed00:	e1877d22 	orr	r7, r7, r2, lsr #26
    ed04:	e1a06302 	lsl	r6, r2, #6
    ed08:	e1a00008 	mov	r0, r8
    ed0c:	e3a01000 	mov	r1, #0
    ed10:	e1a02009 	mov	r2, r9
    ed14:	e3a03000 	mov	r3, #0
    ed18:	e00e0192 	mul	lr, r2, r1
    ed1c:	e00c0390 	mul	ip, r0, r3
    ed20:	e08ec00c 	add	ip, lr, ip
    ed24:	e0832290 	umull	r2, r3, r0, r2
    ed28:	e08c1003 	add	r1, ip, r3
    ed2c:	e1a03001 	mov	r3, r1
    ed30:	e1a01303 	lsl	r1, r3, #6
    ed34:	e50b1088 	str	r1, [fp, #-136]	; 0x88
    ed38:	e51b1088 	ldr	r1, [fp, #-136]	; 0x88
    ed3c:	e1811d22 	orr	r1, r1, r2, lsr #26
    ed40:	e50b1088 	str	r1, [fp, #-136]	; 0x88
    ed44:	e1a01302 	lsl	r1, r2, #6
    ed48:	e0030899 	mul	r3, r9, r8
    ed4c:	e1a03183 	lsl	r3, r3, #3
    ed50:	e2833007 	add	r3, r3, #7
    ed54:	e2833007 	add	r3, r3, #7
    ed58:	e1a031a3 	lsr	r3, r3, #3
    ed5c:	e1a03183 	lsl	r3, r3, #3
    ed60:	e04dd003 	sub	sp, sp, r3
    ed64:	e28d3010 	add	r3, sp, #16
    ed68:	e2833007 	add	r3, r3, #7
    ed6c:	e1a031a3 	lsr	r3, r3, #3
    ed70:	e1a03183 	lsl	r3, r3, #3
    ed74:	e50b3050 	str	r3, [fp, #-80]	; 0x50
	double* l_lowerTriangularMatrix_pf64=(double*)l_lowerTriangularMatrix_f64;
    ed78:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
    ed7c:	e50b3054 	str	r3, [fp, #-84]	; 0x54
	//Matrix for solving a system
	double l_lowerInverseTriangularMatrix_f64[f_nrOfRowsA_ui32][f_nrOfColsA_ui32];
    ed80:	e51b4084 	ldr	r4, [fp, #-132]	; 0x84
    ed84:	e51b5080 	ldr	r5, [fp, #-128]	; 0x80
    ed88:	e1a03004 	mov	r3, r4
    ed8c:	e2433001 	sub	r3, r3, #1
    ed90:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    ed94:	e1a02004 	mov	r2, r4
    ed98:	e3a03000 	mov	r3, #0
    ed9c:	e1a01303 	lsl	r1, r3, #6
    eda0:	e50b1090 	str	r1, [fp, #-144]	; 0x90
    eda4:	e51b1090 	ldr	r1, [fp, #-144]	; 0x90
    eda8:	e1811d22 	orr	r1, r1, r2, lsr #26
    edac:	e50b1090 	str	r1, [fp, #-144]	; 0x90
    edb0:	e1a01302 	lsl	r1, r2, #6
    edb4:	e1a03005 	mov	r3, r5
    edb8:	e2433001 	sub	r3, r3, #1
    edbc:	e50b305c 	str	r3, [fp, #-92]	; 0x5c
    edc0:	e1a00004 	mov	r0, r4
    edc4:	e3a01000 	mov	r1, #0
    edc8:	e1a02005 	mov	r2, r5
    edcc:	e3a03000 	mov	r3, #0
    edd0:	e00e0192 	mul	lr, r2, r1
    edd4:	e00c0390 	mul	ip, r0, r3
    edd8:	e08ec00c 	add	ip, lr, ip
    eddc:	e0832290 	umull	r2, r3, r0, r2
    ede0:	e08c1003 	add	r1, ip, r3
    ede4:	e1a03001 	mov	r3, r1
    ede8:	e1a01303 	lsl	r1, r3, #6
    edec:	e50b1098 	str	r1, [fp, #-152]	; 0x98
    edf0:	e51b1098 	ldr	r1, [fp, #-152]	; 0x98
    edf4:	e1811d22 	orr	r1, r1, r2, lsr #26
    edf8:	e50b1098 	str	r1, [fp, #-152]	; 0x98
    edfc:	e1a01302 	lsl	r1, r2, #6
    ee00:	e1a02004 	mov	r2, r4
    ee04:	e3a03000 	mov	r3, #0
    ee08:	e1a00005 	mov	r0, r5
    ee0c:	e3a01000 	mov	r1, #0
    ee10:	e00e0390 	mul	lr, r0, r3
    ee14:	e00c0192 	mul	ip, r2, r1
    ee18:	e08ec00c 	add	ip, lr, ip
    ee1c:	e0832092 	umull	r2, r3, r2, r0
    ee20:	e08c1003 	add	r1, ip, r3
    ee24:	e1a03001 	mov	r3, r1
    ee28:	e1a01303 	lsl	r1, r3, #6
    ee2c:	e50b10a0 	str	r1, [fp, #-160]	; 0xa0
    ee30:	e51b10a0 	ldr	r1, [fp, #-160]	; 0xa0
    ee34:	e1811d22 	orr	r1, r1, r2, lsr #26
    ee38:	e50b10a0 	str	r1, [fp, #-160]	; 0xa0
    ee3c:	e1a01302 	lsl	r1, r2, #6
    ee40:	e0030495 	mul	r3, r5, r4
    ee44:	e1a03183 	lsl	r3, r3, #3
    ee48:	e2833007 	add	r3, r3, #7
    ee4c:	e2833007 	add	r3, r3, #7
    ee50:	e1a031a3 	lsr	r3, r3, #3
    ee54:	e1a03183 	lsl	r3, r3, #3
    ee58:	e04dd003 	sub	sp, sp, r3
    ee5c:	e28d3010 	add	r3, sp, #16
    ee60:	e2833007 	add	r3, r3, #7
    ee64:	e1a031a3 	lsr	r3, r3, #3
    ee68:	e1a03183 	lsl	r3, r3, #3
    ee6c:	e50b3060 	str	r3, [fp, #-96]	; 0x60
	double* l_lowerInverseTriangularMatrix_pf64=(double*)l_lowerInverseTriangularMatrix_f64;
    ee70:	e51b3060 	ldr	r3, [fp, #-96]	; 0x60
    ee74:	e50b3064 	str	r3, [fp, #-100]	; 0x64

	double l_eyeMatrix_f64[f_nrOfRowsA_ui32][f_nrOfColsA_ui32];
    ee78:	e51bc084 	ldr	ip, [fp, #-132]	; 0x84
    ee7c:	e51be080 	ldr	lr, [fp, #-128]	; 0x80
    ee80:	e1a0300c 	mov	r3, ip
    ee84:	e2433001 	sub	r3, r3, #1
    ee88:	e50b3068 	str	r3, [fp, #-104]	; 0x68
    ee8c:	e1a0200c 	mov	r2, ip
    ee90:	e3a03000 	mov	r3, #0
    ee94:	e1a01303 	lsl	r1, r3, #6
    ee98:	e50b10a8 	str	r1, [fp, #-168]	; 0xa8
    ee9c:	e51b10a8 	ldr	r1, [fp, #-168]	; 0xa8
    eea0:	e1811d22 	orr	r1, r1, r2, lsr #26
    eea4:	e50b10a8 	str	r1, [fp, #-168]	; 0xa8
    eea8:	e1a01302 	lsl	r1, r2, #6
    eeac:	e1a0300e 	mov	r3, lr
    eeb0:	e2433001 	sub	r3, r3, #1
    eeb4:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    eeb8:	e1a0000c 	mov	r0, ip
    eebc:	e3a01000 	mov	r1, #0
    eec0:	e1a0200e 	mov	r2, lr
    eec4:	e3a03000 	mov	r3, #0
    eec8:	e0050192 	mul	r5, r2, r1
    eecc:	e0040390 	mul	r4, r0, r3
    eed0:	e0854004 	add	r4, r5, r4
    eed4:	e0832290 	umull	r2, r3, r0, r2
    eed8:	e0841003 	add	r1, r4, r3
    eedc:	e1a03001 	mov	r3, r1
    eee0:	e1a01303 	lsl	r1, r3, #6
    eee4:	e50b10b0 	str	r1, [fp, #-176]	; 0xb0
    eee8:	e51b10b0 	ldr	r1, [fp, #-176]	; 0xb0
    eeec:	e1811d22 	orr	r1, r1, r2, lsr #26
    eef0:	e50b10b0 	str	r1, [fp, #-176]	; 0xb0
    eef4:	e1a01302 	lsl	r1, r2, #6
    eef8:	e1a0000c 	mov	r0, ip
    eefc:	e3a01000 	mov	r1, #0
    ef00:	e1a0200e 	mov	r2, lr
    ef04:	e3a03000 	mov	r3, #0
    ef08:	e0050192 	mul	r5, r2, r1
    ef0c:	e0040390 	mul	r4, r0, r3
    ef10:	e0854004 	add	r4, r5, r4
    ef14:	e0832290 	umull	r2, r3, r0, r2
    ef18:	e0841003 	add	r1, r4, r3
    ef1c:	e1a03001 	mov	r3, r1
    ef20:	e1a01303 	lsl	r1, r3, #6
    ef24:	e50b10b8 	str	r1, [fp, #-184]	; 0xb8
    ef28:	e51b10b8 	ldr	r1, [fp, #-184]	; 0xb8
    ef2c:	e1811d22 	orr	r1, r1, r2, lsr #26
    ef30:	e50b10b8 	str	r1, [fp, #-184]	; 0xb8
    ef34:	e1a01302 	lsl	r1, r2, #6
    ef38:	e0030c9e 	mul	r3, lr, ip
    ef3c:	e1a03183 	lsl	r3, r3, #3
    ef40:	e2833007 	add	r3, r3, #7
    ef44:	e2833007 	add	r3, r3, #7
    ef48:	e1a031a3 	lsr	r3, r3, #3
    ef4c:	e1a03183 	lsl	r3, r3, #3
    ef50:	e04dd003 	sub	sp, sp, r3
    ef54:	e28d3010 	add	r3, sp, #16
    ef58:	e2833007 	add	r3, r3, #7
    ef5c:	e1a031a3 	lsr	r3, r3, #3
    ef60:	e1a03183 	lsl	r3, r3, #3
    ef64:	e50b3070 	str	r3, [fp, #-112]	; 0x70
	double* l_eyeMatrix_pf64=(double*)l_eyeMatrix_f64;
    ef68:	e51b3070 	ldr	r3, [fp, #-112]	; 0x70
    ef6c:	e50b3074 	str	r3, [fp, #-116]	; 0x74

	if(f_nrOfRowsA_ui32!=f_nrOfColsA_ui32)
    ef70:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
    ef74:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    ef78:	e1520003 	cmp	r2, r3
    ef7c:	0a000001 	beq	ef88 <g_sigMath_matrixInverse_bl+0x334>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    ef80:	e3a03001 	mov	r3, #1
    ef84:	ea00013b 	b	f478 <g_sigMath_matrixInverse_bl+0x824>


	//Cholesky for building the lower triangular matrix
	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    ef88:	e3a03000 	mov	r3, #0
    ef8c:	e50b3038 	str	r3, [fp, #-56]	; 0x38
    ef90:	ea0000a8 	b	f238 <g_sigMath_matrixInverse_bl+0x5e4>
	{
		for(l_rowCounter_ui32=l_colCounter_ui32;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    ef94:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    ef98:	e50b3030 	str	r3, [fp, #-48]	; 0x30
    ef9c:	ea00009e 	b	f21c <g_sigMath_matrixInverse_bl+0x5c8>
		{
			if(l_rowCounter_ui32==l_colCounter_ui32)
    efa0:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    efa4:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    efa8:	e1520003 	cmp	r2, r3
    efac:	1a00004c 	bne	f0e4 <g_sigMath_matrixInverse_bl+0x490>
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
    efb0:	e3a03000 	mov	r3, #0
    efb4:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    efb8:	ea000014 	b	f010 <g_sigMath_matrixInverse_bl+0x3bc>
				{
					l_tempValue_f64+=pow(l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)],2);
    efbc:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    efc0:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    efc4:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    efc8:	e1a01002 	mov	r1, r2
    efcc:	e1a02003 	mov	r2, r3
    efd0:	ebfffde8 	bl	e778 <m_getIndex_i32>
    efd4:	e1a03000 	mov	r3, r0
    efd8:	e1a03183 	lsl	r3, r3, #3
    efdc:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    efe0:	e0823003 	add	r3, r2, r3
    efe4:	ed937b00 	vldr	d7, [r3]
    efe8:	eeb00b47 	vmov.f64	d0, d7
    efec:	ed9f1bab 	vldr	d1, [pc, #684]	; f2a0 <g_sigMath_matrixInverse_bl+0x64c>
    eff0:	ebffe67d 	bl	89ec <_init+0x74>
    eff4:	eeb07b40 	vmov.f64	d7, d0
    eff8:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
    effc:	ee367b07 	vadd.f64	d7, d6, d7
    f000:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc
	{
		for(l_rowCounter_ui32=l_colCounter_ui32;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			if(l_rowCounter_ui32==l_colCounter_ui32)
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
    f004:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    f008:	e2833001 	add	r3, r3, #1
    f00c:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    f010:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    f014:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    f018:	e1520003 	cmp	r2, r3
    f01c:	baffffe6 	blt	efbc <g_sigMath_matrixInverse_bl+0x368>
				{
					l_tempValue_f64+=pow(l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)],2);
				}
				if(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64<0)
    f020:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    f024:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    f028:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    f02c:	e1a01002 	mov	r1, r2
    f030:	e1a02003 	mov	r2, r3
    f034:	ebfffdcf 	bl	e778 <m_getIndex_i32>
    f038:	e1a03000 	mov	r3, r0
    f03c:	e1a03183 	lsl	r3, r3, #3
    f040:	e51b207c 	ldr	r2, [fp, #-124]	; 0x7c
    f044:	e0823003 	add	r3, r2, r3
    f048:	ed936b00 	vldr	d6, [r3]
    f04c:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    f050:	ee367b47 	vsub.f64	d7, d6, d7
    f054:	eeb57bc0 	vcmpe.f64	d7, #0.0
    f058:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    f05c:	5a000001 	bpl	f068 <g_sigMath_matrixInverse_bl+0x414>
				{return M_SIG_MATRIXLIB_FAILED_BL;}
    f060:	e3a03001 	mov	r3, #1
    f064:	ea000103 	b	f478 <g_sigMath_matrixInverse_bl+0x824>

				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    f068:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    f06c:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    f070:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    f074:	e1a01002 	mov	r1, r2
    f078:	e1a02003 	mov	r2, r3
    f07c:	ebfffdbd 	bl	e778 <m_getIndex_i32>
    f080:	e1a03000 	mov	r3, r0
    f084:	e1a03183 	lsl	r3, r3, #3
    f088:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    f08c:	e0824003 	add	r4, r2, r3
						sqrt(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64);
    f090:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    f094:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    f098:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    f09c:	e1a01002 	mov	r1, r2
    f0a0:	e1a02003 	mov	r2, r3
    f0a4:	ebfffdb3 	bl	e778 <m_getIndex_i32>
    f0a8:	e1a03000 	mov	r3, r0
    f0ac:	e1a03183 	lsl	r3, r3, #3
    f0b0:	e51b207c 	ldr	r2, [fp, #-124]	; 0x7c
    f0b4:	e0823003 	add	r3, r2, r3
    f0b8:	ed936b00 	vldr	d6, [r3]
    f0bc:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    f0c0:	ee367b47 	vsub.f64	d7, d6, d7
    f0c4:	eeb00b47 	vmov.f64	d0, d7
    f0c8:	ebffe659 	bl	8a34 <_init+0xbc>
    f0cc:	eeb07b40 	vmov.f64	d7, d0
					l_tempValue_f64+=pow(l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)],2);
				}
				if(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64<0)
				{return M_SIG_MATRIXLIB_FAILED_BL;}

				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    f0d0:	ed847b00 	vstr	d7, [r4]
						sqrt(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64);

				l_tempValue_f64=0;
    f0d4:	e3a02000 	mov	r2, #0
    f0d8:	e3a03000 	mov	r3, #0
    f0dc:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
    f0e0:	ea00004a 	b	f210 <g_sigMath_matrixInverse_bl+0x5bc>
			}
			else
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
    f0e4:	e3a03000 	mov	r3, #0
    f0e8:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    f0ec:	ea00001c 	b	f164 <g_sigMath_matrixInverse_bl+0x510>
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
    f0f0:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    f0f4:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    f0f8:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    f0fc:	e1a01002 	mov	r1, r2
    f100:	e1a02003 	mov	r2, r3
    f104:	ebfffd9b 	bl	e778 <m_getIndex_i32>
    f108:	e1a03000 	mov	r3, r0
    f10c:	e1a03183 	lsl	r3, r3, #3
    f110:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    f114:	e0823003 	add	r3, r2, r3
    f118:	ed938b00 	vldr	d8, [r3]
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
    f11c:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    f120:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    f124:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    f128:	e1a01002 	mov	r1, r2
    f12c:	e1a02003 	mov	r2, r3
    f130:	ebfffd90 	bl	e778 <m_getIndex_i32>
    f134:	e1a03000 	mov	r3, r0
    f138:	e1a03183 	lsl	r3, r3, #3
    f13c:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    f140:	e0823003 	add	r3, r2, r3
    f144:	ed937b00 	vldr	d7, [r3]
			}
			else
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
    f148:	ee287b07 	vmul.f64	d7, d8, d7
    f14c:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
    f150:	ee367b07 	vadd.f64	d7, d6, d7
    f154:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc

				l_tempValue_f64=0;
			}
			else
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
    f158:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    f15c:	e2833001 	add	r3, r3, #1
    f160:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    f164:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    f168:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    f16c:	e1520003 	cmp	r2, r3
    f170:	baffffde 	blt	f0f0 <g_sigMath_matrixInverse_bl+0x49c>
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
				}
				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    f174:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    f178:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    f17c:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    f180:	e1a01002 	mov	r1, r2
    f184:	e1a02003 	mov	r2, r3
    f188:	ebfffd7a 	bl	e778 <m_getIndex_i32>
    f18c:	e1a03000 	mov	r3, r0
    f190:	e1a03183 	lsl	r3, r3, #3
    f194:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    f198:	e0824003 	add	r4, r2, r3
										(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64)/
    f19c:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    f1a0:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    f1a4:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    f1a8:	e1a01002 	mov	r1, r2
    f1ac:	e1a02003 	mov	r2, r3
    f1b0:	ebfffd70 	bl	e778 <m_getIndex_i32>
    f1b4:	e1a03000 	mov	r3, r0
    f1b8:	e1a03183 	lsl	r3, r3, #3
    f1bc:	e51b207c 	ldr	r2, [fp, #-124]	; 0x7c
    f1c0:	e0823003 	add	r3, r2, r3
    f1c4:	ed936b00 	vldr	d6, [r3]
    f1c8:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    f1cc:	ee368b47 	vsub.f64	d8, d6, d7
										l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)];
    f1d0:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    f1d4:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    f1d8:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    f1dc:	e1a01002 	mov	r1, r2
    f1e0:	e1a02003 	mov	r2, r3
    f1e4:	ebfffd63 	bl	e778 <m_getIndex_i32>
    f1e8:	e1a03000 	mov	r3, r0
    f1ec:	e1a03183 	lsl	r3, r3, #3
    f1f0:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    f1f4:	e0823003 	add	r3, r2, r3
    f1f8:	ed937b00 	vldr	d7, [r3]
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
				}
				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
										(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64)/
    f1fc:	ee887b07 	vdiv.f64	d7, d8, d7
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
				}
				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    f200:	ed847b00 	vstr	d7, [r4]
										(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64)/
										l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)];
				l_tempValue_f64=0;
    f204:	e3a02000 	mov	r2, #0
    f208:	e3a03000 	mov	r3, #0
    f20c:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc


	//Cholesky for building the lower triangular matrix
	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=l_colCounter_ui32;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    f210:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    f214:	e2833001 	add	r3, r3, #1
    f218:	e50b3030 	str	r3, [fp, #-48]	; 0x30
    f21c:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    f220:	e51b3080 	ldr	r3, [fp, #-128]	; 0x80
    f224:	e1520003 	cmp	r2, r3
    f228:	3affff5c 	bcc	efa0 <g_sigMath_matrixInverse_bl+0x34c>
	if(f_nrOfRowsA_ui32!=f_nrOfColsA_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}


	//Cholesky for building the lower triangular matrix
	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    f22c:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    f230:	e2833001 	add	r3, r3, #1
    f234:	e50b3038 	str	r3, [fp, #-56]	; 0x38
    f238:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    f23c:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    f240:	e1520003 	cmp	r2, r3
    f244:	3affff52 	bcc	ef94 <g_sigMath_matrixInverse_bl+0x340>
//	}
//	l_determinant_f64=pow(l_determinant_f64,2);

//solve linear system

	if(g_sigMath_matrixEye_bl(l_eyeMatrix_f64[0],f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
    f248:	e51b3070 	ldr	r3, [fp, #-112]	; 0x70
    f24c:	e1a00003 	mov	r0, r3
    f250:	e51b1080 	ldr	r1, [fp, #-128]	; 0x80
    f254:	e51b2084 	ldr	r2, [fp, #-132]	; 0x84
    f258:	eb0000f7 	bl	f63c <g_sigMath_matrixEye_bl>
    f25c:	e1a03000 	mov	r3, r0
    f260:	e3530000 	cmp	r3, #0
    f264:	0a000001 	beq	f270 <g_sigMath_matrixInverse_bl+0x61c>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    f268:	e3a03001 	mov	r3, #1
    f26c:	ea000081 	b	f478 <g_sigMath_matrixInverse_bl+0x824>
	l_tempValue_f64=0;
    f270:	e3a02000 	mov	r2, #0
    f274:	e3a03000 	mov	r3, #0
    f278:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    f27c:	e3a03000 	mov	r3, #0
    f280:	e50b3038 	str	r3, [fp, #-56]	; 0x38
    f284:	ea000059 	b	f3f0 <g_sigMath_matrixInverse_bl+0x79c>
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    f288:	e3a03000 	mov	r3, #0
    f28c:	e50b3030 	str	r3, [fp, #-48]	; 0x30
    f290:	ea00004f 	b	f3d4 <g_sigMath_matrixInverse_bl+0x780>
		{
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
    f294:	e3a03000 	mov	r3, #0
    f298:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    f29c:	ea00001e 	b	f31c <g_sigMath_matrixInverse_bl+0x6c8>
    f2a0:	00000000 	.word	0x00000000
    f2a4:	40000000 	.word	0x40000000
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
    f2a8:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    f2ac:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    f2b0:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    f2b4:	e1a01002 	mov	r1, r2
    f2b8:	e1a02003 	mov	r2, r3
    f2bc:	ebfffd2d 	bl	e778 <m_getIndex_i32>
    f2c0:	e1a03000 	mov	r3, r0
    f2c4:	e1a03183 	lsl	r3, r3, #3
    f2c8:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    f2cc:	e0823003 	add	r3, r2, r3
    f2d0:	ed938b00 	vldr	d8, [r3]
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
    f2d4:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    f2d8:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    f2dc:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    f2e0:	e1a01002 	mov	r1, r2
    f2e4:	e1a02003 	mov	r2, r3
    f2e8:	ebfffd22 	bl	e778 <m_getIndex_i32>
    f2ec:	e1a03000 	mov	r3, r0
    f2f0:	e1a03183 	lsl	r3, r3, #3
    f2f4:	e51b2064 	ldr	r2, [fp, #-100]	; 0x64
    f2f8:	e0823003 	add	r3, r2, r3
    f2fc:	ed937b00 	vldr	d7, [r3]
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
    f300:	ee287b07 	vmul.f64	d7, d8, d7
    f304:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
    f308:	ee367b47 	vsub.f64	d7, d6, d7
    f30c:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
    f310:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    f314:	e2833001 	add	r3, r3, #1
    f318:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    f31c:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    f320:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    f324:	e1520003 	cmp	r2, r3
    f328:	baffffde 	blt	f2a8 <g_sigMath_matrixInverse_bl+0x654>
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
			}
			l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    f32c:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    f330:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    f334:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    f338:	e1a01002 	mov	r1, r2
    f33c:	e1a02003 	mov	r2, r3
    f340:	ebfffd0c 	bl	e778 <m_getIndex_i32>
    f344:	e1a03000 	mov	r3, r0
    f348:	e1a03183 	lsl	r3, r3, #3
    f34c:	e51b2064 	ldr	r2, [fp, #-100]	; 0x64
    f350:	e0824003 	add	r4, r2, r3
						(l_eyeMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+l_tempValue_f64)/
    f354:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    f358:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    f35c:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    f360:	e1a01002 	mov	r1, r2
    f364:	e1a02003 	mov	r2, r3
    f368:	ebfffd02 	bl	e778 <m_getIndex_i32>
    f36c:	e1a03000 	mov	r3, r0
    f370:	e1a03183 	lsl	r3, r3, #3
    f374:	e51b2074 	ldr	r2, [fp, #-116]	; 0x74
    f378:	e0823003 	add	r3, r2, r3
    f37c:	ed936b00 	vldr	d6, [r3]
    f380:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    f384:	ee368b07 	vadd.f64	d8, d6, d7
						l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounter_ui32)];
    f388:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    f38c:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    f390:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    f394:	e1a01002 	mov	r1, r2
    f398:	e1a02003 	mov	r2, r3
    f39c:	ebfffcf5 	bl	e778 <m_getIndex_i32>
    f3a0:	e1a03000 	mov	r3, r0
    f3a4:	e1a03183 	lsl	r3, r3, #3
    f3a8:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    f3ac:	e0823003 	add	r3, r2, r3
    f3b0:	ed937b00 	vldr	d7, [r3]
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
			}
			l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						(l_eyeMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+l_tempValue_f64)/
    f3b4:	ee887b07 	vdiv.f64	d7, d8, d7
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
			}
			l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    f3b8:	ed847b00 	vstr	d7, [r4]
						(l_eyeMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+l_tempValue_f64)/
						l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounter_ui32)];
			l_tempValue_f64=0;
    f3bc:	e3a02000 	mov	r2, #0
    f3c0:	e3a03000 	mov	r3, #0
    f3c4:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	l_tempValue_f64=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    f3c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    f3cc:	e2833001 	add	r3, r3, #1
    f3d0:	e50b3030 	str	r3, [fp, #-48]	; 0x30
    f3d4:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    f3d8:	e51b3080 	ldr	r3, [fp, #-128]	; 0x80
    f3dc:	e1520003 	cmp	r2, r3
    f3e0:	3affffab 	bcc	f294 <g_sigMath_matrixInverse_bl+0x640>

	if(g_sigMath_matrixEye_bl(l_eyeMatrix_f64[0],f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	l_tempValue_f64=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    f3e4:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    f3e8:	e2833001 	add	r3, r3, #1
    f3ec:	e50b3038 	str	r3, [fp, #-56]	; 0x38
    f3f0:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    f3f4:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    f3f8:	e1520003 	cmp	r2, r3
    f3fc:	3affffa1 	bcc	f288 <g_sigMath_matrixInverse_bl+0x634>
						l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounter_ui32)];
			l_tempValue_f64=0;
		}
	}

	if(g_sigMath_matrixTransponiert_bl((double*)l_lowerTriangularMatrix_f64,(double*)l_lowerInverseTriangularMatrix_f64,
    f400:	e51b2050 	ldr	r2, [fp, #-80]	; 0x50
    f404:	e51b3060 	ldr	r3, [fp, #-96]	; 0x60
    f408:	e1a00002 	mov	r0, r2
    f40c:	e1a01003 	mov	r1, r3
    f410:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
    f414:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    f418:	ebfffdd8 	bl	eb80 <g_sigMath_matrixTransponiert_bl>
    f41c:	e1a03000 	mov	r3, r0
    f420:	e3530000 	cmp	r3, #0
    f424:	0a000001 	beq	f430 <g_sigMath_matrixInverse_bl+0x7dc>
				f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    f428:	e3a03001 	mov	r3, #1
    f42c:	ea000011 	b	f478 <g_sigMath_matrixInverse_bl+0x824>

	if(g_sigMath_matrixMultiplikation_bl((double*)f_matrixResult_pf64,(double*)l_lowerTriangularMatrix_f64 ,
    f430:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
			f_nrOfRowsA_ui32,f_nrOfColsA_ui32,(double*)l_lowerInverseTriangularMatrix_f64,f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
    f434:	e51b2060 	ldr	r2, [fp, #-96]	; 0x60

	if(g_sigMath_matrixTransponiert_bl((double*)l_lowerTriangularMatrix_f64,(double*)l_lowerInverseTriangularMatrix_f64,
				f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}

	if(g_sigMath_matrixMultiplikation_bl((double*)f_matrixResult_pf64,(double*)l_lowerTriangularMatrix_f64 ,
    f438:	e58d2000 	str	r2, [sp]
    f43c:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
    f440:	e58d2004 	str	r2, [sp, #4]
    f444:	e51b2084 	ldr	r2, [fp, #-132]	; 0x84
    f448:	e58d2008 	str	r2, [sp, #8]
    f44c:	e51b0078 	ldr	r0, [fp, #-120]	; 0x78
    f450:	e1a01003 	mov	r1, r3
    f454:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
    f458:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    f45c:	ebfffcd4 	bl	e7b4 <g_sigMath_matrixMultiplikation_bl>
    f460:	e1a03000 	mov	r3, r0
    f464:	e3530000 	cmp	r3, #0
    f468:	0a000001 	beq	f474 <g_sigMath_matrixInverse_bl+0x820>
			f_nrOfRowsA_ui32,f_nrOfColsA_ui32,(double*)l_lowerInverseTriangularMatrix_f64,f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    f46c:	e3a03001 	mov	r3, #1
    f470:	ea000000 	b	f478 <g_sigMath_matrixInverse_bl+0x824>

	return M_SIG_MATRIXLIB_SUCCESS_BL;
    f474:	e3a03000 	mov	r3, #0
    f478:	e1a0d00a 	mov	sp, sl
}
    f47c:	e1a00003 	mov	r0, r3
    f480:	e24bd028 	sub	sp, fp, #40	; 0x28
    f484:	ecbd8b02 	vpop	{d8}
    f488:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f48c <g_sigMath_matrixAssignment_bl>:
 ***********************************************************************/
unsigned int g_sigMath_matrixAssignment_bl(double* f_matrixResult_pf64,
		unsigned int f_nrOfRowsResult_ui32,unsigned int f_nrOfColsResult_ui32,
		double* f_matrix_pf64, unsigned int f_nrOfRows_ui32,
		unsigned int f_nrOfCols_ui32)
{
    f48c:	e92d4810 	push	{r4, fp, lr}
    f490:	e28db008 	add	fp, sp, #8
    f494:	e24dd01c 	sub	sp, sp, #28
    f498:	e50b0018 	str	r0, [fp, #-24]
    f49c:	e50b101c 	str	r1, [fp, #-28]
    f4a0:	e50b2020 	str	r2, [fp, #-32]
    f4a4:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	unsigned int l_rowCounter_ui32=0;
    f4a8:	e3a03000 	mov	r3, #0
    f4ac:	e50b3010 	str	r3, [fp, #-16]
	unsigned int l_colCounter_ui32=0;
    f4b0:	e3a03000 	mov	r3, #0
    f4b4:	e50b3014 	str	r3, [fp, #-20]

	if(f_nrOfRows_ui32!=f_nrOfRowsResult_ui32 && f_nrOfCols_ui32!=f_nrOfColsResult_ui32)
    f4b8:	e59b2004 	ldr	r2, [fp, #4]
    f4bc:	e51b301c 	ldr	r3, [fp, #-28]
    f4c0:	e1520003 	cmp	r2, r3
    f4c4:	0a000005 	beq	f4e0 <g_sigMath_matrixAssignment_bl+0x54>
    f4c8:	e59b2008 	ldr	r2, [fp, #8]
    f4cc:	e51b3020 	ldr	r3, [fp, #-32]
    f4d0:	e1520003 	cmp	r2, r3
    f4d4:	0a000001 	beq	f4e0 <g_sigMath_matrixAssignment_bl+0x54>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
    f4d8:	e3a03001 	mov	r3, #1
    f4dc:	ea000026 	b	f57c <g_sigMath_matrixAssignment_bl+0xf0>
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    f4e0:	e3a03000 	mov	r3, #0
    f4e4:	e50b3014 	str	r3, [fp, #-20]
    f4e8:	ea00001e 	b	f568 <g_sigMath_matrixAssignment_bl+0xdc>
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    f4ec:	e3a03000 	mov	r3, #0
    f4f0:	e50b3010 	str	r3, [fp, #-16]
    f4f4:	ea000014 	b	f54c <g_sigMath_matrixAssignment_bl+0xc0>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    f4f8:	e59b0008 	ldr	r0, [fp, #8]
    f4fc:	e51b1010 	ldr	r1, [fp, #-16]
    f500:	e51b2014 	ldr	r2, [fp, #-20]
    f504:	ebfffc9b 	bl	e778 <m_getIndex_i32>
    f508:	e1a03000 	mov	r3, r0
    f50c:	e1a03183 	lsl	r3, r3, #3
    f510:	e51b2018 	ldr	r2, [fp, #-24]
    f514:	e0824003 	add	r4, r2, r3
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
    f518:	e59b0008 	ldr	r0, [fp, #8]
    f51c:	e51b1010 	ldr	r1, [fp, #-16]
    f520:	e51b2014 	ldr	r2, [fp, #-20]
    f524:	ebfffc93 	bl	e778 <m_getIndex_i32>
    f528:	e1a03000 	mov	r3, r0
    f52c:	e1a03183 	lsl	r3, r3, #3
    f530:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
    f534:	e0823003 	add	r3, r2, r3
    f538:	e1c320d0 	ldrd	r2, [r3]
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    f53c:	e1c420f0 	strd	r2, [r4]
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    f540:	e51b3010 	ldr	r3, [fp, #-16]
    f544:	e2833001 	add	r3, r3, #1
    f548:	e50b3010 	str	r3, [fp, #-16]
    f54c:	e51b2010 	ldr	r2, [fp, #-16]
    f550:	e59b3004 	ldr	r3, [fp, #4]
    f554:	e1520003 	cmp	r2, r3
    f558:	3affffe6 	bcc	f4f8 <g_sigMath_matrixAssignment_bl+0x6c>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    f55c:	e51b3014 	ldr	r3, [fp, #-20]
    f560:	e2833001 	add	r3, r3, #1
    f564:	e50b3014 	str	r3, [fp, #-20]
    f568:	e51b2014 	ldr	r2, [fp, #-20]
    f56c:	e59b3008 	ldr	r3, [fp, #8]
    f570:	e1520003 	cmp	r2, r3
    f574:	3affffdc 	bcc	f4ec <g_sigMath_matrixAssignment_bl+0x60>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    f578:	e3a03000 	mov	r3, #0
	}
}
    f57c:	e1a00003 	mov	r0, r3
    f580:	e24bd008 	sub	sp, fp, #8
    f584:	e8bd8810 	pop	{r4, fp, pc}

0000f588 <g_sigMath_matrixInitialize_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixInitialize_bl(double* f_matrixResult_pf64,
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32,
		double f_setValue_f64)
{
    f588:	e92d4800 	push	{fp, lr}
    f58c:	e28db004 	add	fp, sp, #4
    f590:	e24dd020 	sub	sp, sp, #32
    f594:	e50b0010 	str	r0, [fp, #-16]
    f598:	e50b1014 	str	r1, [fp, #-20]
    f59c:	e50b2018 	str	r2, [fp, #-24]
    f5a0:	ed0b0b09 	vstr	d0, [fp, #-36]	; 0xffffffdc
	unsigned int l_rowCounter_ui32=0;
    f5a4:	e3a03000 	mov	r3, #0
    f5a8:	e50b3008 	str	r3, [fp, #-8]
	unsigned int l_colCounter_ui32=0;
    f5ac:	e3a03000 	mov	r3, #0
    f5b0:	e50b300c 	str	r3, [fp, #-12]

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    f5b4:	e3a03000 	mov	r3, #0
    f5b8:	e50b300c 	str	r3, [fp, #-12]
    f5bc:	ea000016 	b	f61c <g_sigMath_matrixInitialize_bl+0x94>
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    f5c0:	e3a03000 	mov	r3, #0
    f5c4:	e50b3008 	str	r3, [fp, #-8]
    f5c8:	ea00000c 	b	f600 <g_sigMath_matrixInitialize_bl+0x78>
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=f_setValue_f64;
    f5cc:	e51b0018 	ldr	r0, [fp, #-24]
    f5d0:	e51b1008 	ldr	r1, [fp, #-8]
    f5d4:	e51b200c 	ldr	r2, [fp, #-12]
    f5d8:	ebfffc66 	bl	e778 <m_getIndex_i32>
    f5dc:	e1a03000 	mov	r3, r0
    f5e0:	e1a03183 	lsl	r3, r3, #3
    f5e4:	e51b2010 	ldr	r2, [fp, #-16]
    f5e8:	e0821003 	add	r1, r2, r3
    f5ec:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
    f5f0:	e1c120f0 	strd	r2, [r1]
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    f5f4:	e51b3008 	ldr	r3, [fp, #-8]
    f5f8:	e2833001 	add	r3, r3, #1
    f5fc:	e50b3008 	str	r3, [fp, #-8]
    f600:	e51b2008 	ldr	r2, [fp, #-8]
    f604:	e51b3014 	ldr	r3, [fp, #-20]
    f608:	e1520003 	cmp	r2, r3
    f60c:	3affffee 	bcc	f5cc <g_sigMath_matrixInitialize_bl+0x44>
		double f_setValue_f64)
{
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    f610:	e51b300c 	ldr	r3, [fp, #-12]
    f614:	e2833001 	add	r3, r3, #1
    f618:	e50b300c 	str	r3, [fp, #-12]
    f61c:	e51b200c 	ldr	r2, [fp, #-12]
    f620:	e51b3018 	ldr	r3, [fp, #-24]
    f624:	e1520003 	cmp	r2, r3
    f628:	3affffe4 	bcc	f5c0 <g_sigMath_matrixInitialize_bl+0x38>
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=f_setValue_f64;
		}
	}
	return M_SIG_MATRIXLIB_SUCCESS_BL;
    f62c:	e3a03000 	mov	r3, #0

}
    f630:	e1a00003 	mov	r0, r3
    f634:	e24bd004 	sub	sp, fp, #4
    f638:	e8bd8800 	pop	{fp, pc}

0000f63c <g_sigMath_matrixEye_bl>:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixEye_bl(double* f_matrixResult_pf64,
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32)
{
    f63c:	e92d4800 	push	{fp, lr}
    f640:	e28db004 	add	fp, sp, #4
    f644:	e24dd018 	sub	sp, sp, #24
    f648:	e50b0010 	str	r0, [fp, #-16]
    f64c:	e50b1014 	str	r1, [fp, #-20]
    f650:	e50b2018 	str	r2, [fp, #-24]
	unsigned int l_rowCounter_ui32=0;
    f654:	e3a03000 	mov	r3, #0
    f658:	e50b3008 	str	r3, [fp, #-8]
	unsigned int l_colCounter_ui32=0;
    f65c:	e3a03000 	mov	r3, #0
    f660:	e50b300c 	str	r3, [fp, #-12]

	if(f_nrOfRows_ui32!=f_nrOfCols_ui32)
    f664:	e51b2014 	ldr	r2, [fp, #-20]
    f668:	e51b3018 	ldr	r3, [fp, #-24]
    f66c:	e1520003 	cmp	r2, r3
    f670:	0a000001 	beq	f67c <g_sigMath_matrixEye_bl+0x40>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
    f674:	e3a03001 	mov	r3, #1
    f678:	ea00002f 	b	f73c <g_sigMath_matrixEye_bl+0x100>
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    f67c:	e3a03000 	mov	r3, #0
    f680:	e50b300c 	str	r3, [fp, #-12]
    f684:	ea000027 	b	f728 <g_sigMath_matrixEye_bl+0xec>
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    f688:	e3a03000 	mov	r3, #0
    f68c:	e50b3008 	str	r3, [fp, #-8]
    f690:	ea00001d 	b	f70c <g_sigMath_matrixEye_bl+0xd0>
			{
				if(l_rowCounter_ui32==l_colCounter_ui32)
    f694:	e51b2008 	ldr	r2, [fp, #-8]
    f698:	e51b300c 	ldr	r3, [fp, #-12]
    f69c:	e1520003 	cmp	r2, r3
    f6a0:	1a00000b 	bne	f6d4 <g_sigMath_matrixEye_bl+0x98>
				{
					f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=1;
    f6a4:	e51b0018 	ldr	r0, [fp, #-24]
    f6a8:	e51b1008 	ldr	r1, [fp, #-8]
    f6ac:	e51b200c 	ldr	r2, [fp, #-12]
    f6b0:	ebfffc30 	bl	e778 <m_getIndex_i32>
    f6b4:	e1a03000 	mov	r3, r0
    f6b8:	e1a03183 	lsl	r3, r3, #3
    f6bc:	e51b2010 	ldr	r2, [fp, #-16]
    f6c0:	e0821003 	add	r1, r2, r3
    f6c4:	e3a02000 	mov	r2, #0
    f6c8:	e59f3078 	ldr	r3, [pc, #120]	; f748 <g_sigMath_matrixEye_bl+0x10c>
    f6cc:	e1c120f0 	strd	r2, [r1]
    f6d0:	ea00000a 	b	f700 <g_sigMath_matrixEye_bl+0xc4>
				}
				else
				{
					f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=0;
    f6d4:	e51b0018 	ldr	r0, [fp, #-24]
    f6d8:	e51b1008 	ldr	r1, [fp, #-8]
    f6dc:	e51b200c 	ldr	r2, [fp, #-12]
    f6e0:	ebfffc24 	bl	e778 <m_getIndex_i32>
    f6e4:	e1a03000 	mov	r3, r0
    f6e8:	e1a03183 	lsl	r3, r3, #3
    f6ec:	e51b2010 	ldr	r2, [fp, #-16]
    f6f0:	e0821003 	add	r1, r2, r3
    f6f4:	e3a02000 	mov	r2, #0
    f6f8:	e3a03000 	mov	r3, #0
    f6fc:	e1c120f0 	strd	r2, [r1]
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    f700:	e51b3008 	ldr	r3, [fp, #-8]
    f704:	e2833001 	add	r3, r3, #1
    f708:	e50b3008 	str	r3, [fp, #-8]
    f70c:	e51b2008 	ldr	r2, [fp, #-8]
    f710:	e51b3014 	ldr	r3, [fp, #-20]
    f714:	e1520003 	cmp	r2, r3
    f718:	3affffdd 	bcc	f694 <g_sigMath_matrixEye_bl+0x58>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    f71c:	e51b300c 	ldr	r3, [fp, #-12]
    f720:	e2833001 	add	r3, r3, #1
    f724:	e50b300c 	str	r3, [fp, #-12]
    f728:	e51b200c 	ldr	r2, [fp, #-12]
    f72c:	e51b3018 	ldr	r3, [fp, #-24]
    f730:	e1520003 	cmp	r2, r3
    f734:	3affffd3 	bcc	f688 <g_sigMath_matrixEye_bl+0x4c>
				{
					f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=0;
				}
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    f738:	e3a03000 	mov	r3, #0
	}
}
    f73c:	e1a00003 	mov	r0, r3
    f740:	e24bd004 	sub	sp, fp, #4
    f744:	e8bd8800 	pop	{fp, pc}
    f748:	3ff00000 	.word	0x3ff00000
    f74c:	e1a00000 	nop			; (mov r0, r0)

0000f750 <g_sigOri_getAnglesComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles g_sigOri_getAnglesComplementary_bl()
{
    f750:	e92d4830 	push	{r4, r5, fp, lr}
    f754:	e28db00c 	add	fp, sp, #12
    f758:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_sigOri_arrayOutputAnglesComplementary_st;
    f75c:	e59f3040 	ldr	r3, [pc, #64]	; f7a4 <g_sigOri_getAnglesComplementary_bl+0x54>
    f760:	e24bc024 	sub	ip, fp, #36	; 0x24
    f764:	e1a0e003 	mov	lr, r3
    f768:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    f76c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    f770:	e89e0003 	ldm	lr, {r0, r1}
    f774:	e88c0003 	stm	ip, {r0, r1}
    f778:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    f77c:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    f780:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    f784:	ec454b15 	vmov	d5, r4, r5
    f788:	ec410b16 	vmov	d6, r0, r1
    f78c:	ec432b17 	vmov	d7, r2, r3
}
    f790:	eeb00b45 	vmov.f64	d0, d5
    f794:	eeb01b46 	vmov.f64	d1, d6
    f798:	eeb02b47 	vmov.f64	d2, d7
    f79c:	e24bd00c 	sub	sp, fp, #12
    f7a0:	e8bd8830 	pop	{r4, r5, fp, pc}
    f7a4:	00019b50 	.word	0x00019b50

0000f7a8 <g_sigOri_getPitchComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getPitchComplementary_bl()
{
    f7a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    f7ac:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64;
    f7b0:	e59f3014 	ldr	r3, [pc, #20]	; f7cc <g_sigOri_getPitchComplementary_bl+0x24>
    f7b4:	e1c320d8 	ldrd	r2, [r3, #8]
    f7b8:	ec432b17 	vmov	d7, r2, r3
}
    f7bc:	eeb00b47 	vmov.f64	d0, d7
    f7c0:	e24bd000 	sub	sp, fp, #0
    f7c4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    f7c8:	e12fff1e 	bx	lr
    f7cc:	00019b50 	.word	0x00019b50

0000f7d0 <g_sigOri_getRollComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getRollComplementary_bl()
{
    f7d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    f7d4:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesComplementary_st.roll_f64;
    f7d8:	e59f3014 	ldr	r3, [pc, #20]	; f7f4 <g_sigOri_getRollComplementary_bl+0x24>
    f7dc:	e1c320d0 	ldrd	r2, [r3]
    f7e0:	ec432b17 	vmov	d7, r2, r3
}
    f7e4:	eeb00b47 	vmov.f64	d0, d7
    f7e8:	e24bd000 	sub	sp, fp, #0
    f7ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    f7f0:	e12fff1e 	bx	lr
    f7f4:	00019b50 	.word	0x00019b50

0000f7f8 <g_sigOri_getYawComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getYawComplementary_bl()
{
    f7f8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    f7fc:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64;
    f800:	e59f3014 	ldr	r3, [pc, #20]	; f81c <g_sigOri_getYawComplementary_bl+0x24>
    f804:	e1c321d0 	ldrd	r2, [r3, #16]
    f808:	ec432b17 	vmov	d7, r2, r3
}
    f80c:	eeb00b47 	vmov.f64	d0, d7
    f810:	e24bd000 	sub	sp, fp, #0
    f814:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    f818:	e12fff1e 	bx	lr
    f81c:	00019b50 	.word	0x00019b50

0000f820 <g_sigOri_getAnglesKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles g_sigOri_getAnglesKalman_bl()
{
    f820:	e92d4830 	push	{r4, r5, fp, lr}
    f824:	e28db00c 	add	fp, sp, #12
    f828:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_sigOri_arrayOutputAnglesKalman_st;
    f82c:	e59f3040 	ldr	r3, [pc, #64]	; f874 <g_sigOri_getAnglesKalman_bl+0x54>
    f830:	e24bc024 	sub	ip, fp, #36	; 0x24
    f834:	e1a0e003 	mov	lr, r3
    f838:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    f83c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    f840:	e89e0003 	ldm	lr, {r0, r1}
    f844:	e88c0003 	stm	ip, {r0, r1}
    f848:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    f84c:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    f850:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    f854:	ec454b15 	vmov	d5, r4, r5
    f858:	ec410b16 	vmov	d6, r0, r1
    f85c:	ec432b17 	vmov	d7, r2, r3
}
    f860:	eeb00b45 	vmov.f64	d0, d5
    f864:	eeb01b46 	vmov.f64	d1, d6
    f868:	eeb02b47 	vmov.f64	d2, d7
    f86c:	e24bd00c 	sub	sp, fp, #12
    f870:	e8bd8830 	pop	{r4, r5, fp, pc}
    f874:	00019b08 	.word	0x00019b08

0000f878 <g_sigOri_getPitchKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getPitchKalman_bl()
{
    f878:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    f87c:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesKalman_st.pitch_f64;
    f880:	e59f3014 	ldr	r3, [pc, #20]	; f89c <g_sigOri_getPitchKalman_bl+0x24>
    f884:	e1c320d8 	ldrd	r2, [r3, #8]
    f888:	ec432b17 	vmov	d7, r2, r3
}
    f88c:	eeb00b47 	vmov.f64	d0, d7
    f890:	e24bd000 	sub	sp, fp, #0
    f894:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    f898:	e12fff1e 	bx	lr
    f89c:	00019b08 	.word	0x00019b08

0000f8a0 <g_sigOri_getRollKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getRollKalman_bl()
{
    f8a0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    f8a4:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesKalman_st.roll_f64;
    f8a8:	e59f3014 	ldr	r3, [pc, #20]	; f8c4 <g_sigOri_getRollKalman_bl+0x24>
    f8ac:	e1c320d0 	ldrd	r2, [r3]
    f8b0:	ec432b17 	vmov	d7, r2, r3
}
    f8b4:	eeb00b47 	vmov.f64	d0, d7
    f8b8:	e24bd000 	sub	sp, fp, #0
    f8bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    f8c0:	e12fff1e 	bx	lr
    f8c4:	00019b08 	.word	0x00019b08

0000f8c8 <g_sigOri_getYawKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getYawKalman_bl()
{
    f8c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    f8cc:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesKalman_st.yaw_f64;
    f8d0:	e59f3014 	ldr	r3, [pc, #20]	; f8ec <g_sigOri_getYawKalman_bl+0x24>
    f8d4:	e1c321d0 	ldrd	r2, [r3, #16]
    f8d8:	ec432b17 	vmov	d7, r2, r3
}
    f8dc:	eeb00b47 	vmov.f64	d0, d7
    f8e0:	e24bd000 	sub	sp, fp, #0
    f8e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    f8e8:	e12fff1e 	bx	lr
    f8ec:	00019b08 	.word	0x00019b08

0000f8f0 <g_sigOri_initImuSensors_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_sigOri_initImuSensors_bl()
{
    f8f0:	e92d4800 	push	{fp, lr}
    f8f4:	e28db004 	add	fp, sp, #4
	if( g_SigFil_initImuSensors_bl() != 0 )
    f8f8:	eb000394 	bl	10750 <g_SigFil_initImuSensors_bl>
    f8fc:	e1a03000 	mov	r3, r0
    f900:	e3530000 	cmp	r3, #0
    f904:	0a000001 	beq	f910 <g_sigOri_initImuSensors_bl+0x20>
	{return 1;}
    f908:	e3a03001 	mov	r3, #1
    f90c:	ea000000 	b	f914 <g_sigOri_initImuSensors_bl+0x24>
	else
	{return 0;}
    f910:	e3a03000 	mov	r3, #0
}
    f914:	e1a00003 	mov	r0, r3
    f918:	e8bd8800 	pop	{fp, pc}

0000f91c <g_sigOri_initMatrices_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_sigOri_initMatrices_bl()
{
    f91c:	e92d4800 	push	{fp, lr}
    f920:	e28db004 	add	fp, sp, #4
	//initialize Pk Matrix
	if(g_sigMath_matrixEye_bl((double*)m_sigOri_matrixPk_rg9f64,3,3)!=0)
    f924:	e59f00ac 	ldr	r0, [pc, #172]	; f9d8 <g_sigOri_initMatrices_bl+0xbc>
    f928:	e3a01003 	mov	r1, #3
    f92c:	e3a02003 	mov	r2, #3
    f930:	ebffff41 	bl	f63c <g_sigMath_matrixEye_bl>
    f934:	e1a03000 	mov	r3, r0
    f938:	e3530000 	cmp	r3, #0
    f93c:	0a000001 	beq	f948 <g_sigOri_initMatrices_bl+0x2c>
	{return 1;}
    f940:	e3a03001 	mov	r3, #1
    f944:	ea000021 	b	f9d0 <g_sigOri_initMatrices_bl+0xb4>

	//initialize an Identity matrix
	if(g_sigMath_matrixEye_bl((double*)m_sigOri_matrixI_rg9f64,3,3)!=0)
    f948:	e59f008c 	ldr	r0, [pc, #140]	; f9dc <g_sigOri_initMatrices_bl+0xc0>
    f94c:	e3a01003 	mov	r1, #3
    f950:	e3a02003 	mov	r2, #3
    f954:	ebffff38 	bl	f63c <g_sigMath_matrixEye_bl>
    f958:	e1a03000 	mov	r3, r0
    f95c:	e3530000 	cmp	r3, #0
    f960:	0a000001 	beq	f96c <g_sigOri_initMatrices_bl+0x50>
	{return 1;}
    f964:	e3a03001 	mov	r3, #1
    f968:	ea000018 	b	f9d0 <g_sigOri_initMatrices_bl+0xb4>
	m_sigOri_matrixQ_rg9f64[0][0]=0.005;
	m_sigOri_matrixQ_rg9f64[1][1]=0.005;
	m_sigOri_matrixQ_rg9f64[2][2]=0.0001;*/

	//initialize the measurement noise matrix
		m_sigOri_matrixR_rg9f64[0][0]=0.06;
    f96c:	e59f106c 	ldr	r1, [pc, #108]	; f9e0 <g_sigOri_initMatrices_bl+0xc4>
    f970:	e59f206c 	ldr	r2, [pc, #108]	; f9e4 <g_sigOri_initMatrices_bl+0xc8>
    f974:	e59f306c 	ldr	r3, [pc, #108]	; f9e8 <g_sigOri_initMatrices_bl+0xcc>
    f978:	e1c120f0 	strd	r2, [r1]
		m_sigOri_matrixR_rg9f64[1][1]=0.1;
    f97c:	e59f105c 	ldr	r1, [pc, #92]	; f9e0 <g_sigOri_initMatrices_bl+0xc4>
    f980:	e59f2064 	ldr	r2, [pc, #100]	; f9ec <g_sigOri_initMatrices_bl+0xd0>
    f984:	e59f3064 	ldr	r3, [pc, #100]	; f9f0 <g_sigOri_initMatrices_bl+0xd4>
    f988:	e1c122f0 	strd	r2, [r1, #32]
		m_sigOri_matrixR_rg9f64[2][2]=0.07;
    f98c:	e59f104c 	ldr	r1, [pc, #76]	; f9e0 <g_sigOri_initMatrices_bl+0xc4>
    f990:	e59f205c 	ldr	r2, [pc, #92]	; f9f4 <g_sigOri_initMatrices_bl+0xd8>
    f994:	e59f305c 	ldr	r3, [pc, #92]	; f9f8 <g_sigOri_initMatrices_bl+0xdc>
    f998:	e1c124f0 	strd	r2, [r1, #64]	; 0x40

		//initialize the process noise matrix
		m_sigOri_matrixQ_rg9f64[0][0]=0.005;
    f99c:	e59f1058 	ldr	r1, [pc, #88]	; f9fc <g_sigOri_initMatrices_bl+0xe0>
    f9a0:	e59f2058 	ldr	r2, [pc, #88]	; fa00 <g_sigOri_initMatrices_bl+0xe4>
    f9a4:	e59f3058 	ldr	r3, [pc, #88]	; fa04 <g_sigOri_initMatrices_bl+0xe8>
    f9a8:	e1c120f0 	strd	r2, [r1]
		m_sigOri_matrixQ_rg9f64[1][1]=0.005;
    f9ac:	e59f1048 	ldr	r1, [pc, #72]	; f9fc <g_sigOri_initMatrices_bl+0xe0>
    f9b0:	e59f2048 	ldr	r2, [pc, #72]	; fa00 <g_sigOri_initMatrices_bl+0xe4>
    f9b4:	e59f3048 	ldr	r3, [pc, #72]	; fa04 <g_sigOri_initMatrices_bl+0xe8>
    f9b8:	e1c122f0 	strd	r2, [r1, #32]
		m_sigOri_matrixQ_rg9f64[2][2]=0.005;
    f9bc:	e59f1038 	ldr	r1, [pc, #56]	; f9fc <g_sigOri_initMatrices_bl+0xe0>
    f9c0:	e59f2038 	ldr	r2, [pc, #56]	; fa00 <g_sigOri_initMatrices_bl+0xe4>
    f9c4:	e59f3038 	ldr	r3, [pc, #56]	; fa04 <g_sigOri_initMatrices_bl+0xe8>
    f9c8:	e1c124f0 	strd	r2, [r1, #64]	; 0x40


	return 0;
    f9cc:	e3a03000 	mov	r3, #0
}
    f9d0:	e1a00003 	mov	r0, r3
    f9d4:	e8bd8800 	pop	{fp, pc}
    f9d8:	00019c88 	.word	0x00019c88
    f9dc:	00019c40 	.word	0x00019c40
    f9e0:	00019cd0 	.word	0x00019cd0
    f9e4:	eb851eb8 	.word	0xeb851eb8
    f9e8:	3faeb851 	.word	0x3faeb851
    f9ec:	9999999a 	.word	0x9999999a
    f9f0:	3fb99999 	.word	0x3fb99999
    f9f4:	1eb851ec 	.word	0x1eb851ec
    f9f8:	3fb1eb85 	.word	0x3fb1eb85
    f9fc:	00019d18 	.word	0x00019d18
    fa00:	47ae147b 	.word	0x47ae147b
    fa04:	3f747ae1 	.word	0x3f747ae1

0000fa08 <g_sigOri_initBuildReferenceValues_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigOri_initBuildReferenceValues_bl()
{
    fa08:	e92d4800 	push	{fp, lr}
    fa0c:	e28db004 	add	fp, sp, #4
    fa10:	e24dd080 	sub	sp, sp, #128	; 0x80
	double l_barometricValue_f64=0;
    fa14:	e3a02000 	mov	r2, #0
    fa18:	e3a03000 	mov	r3, #0
    fa1c:	e14b20fc 	strd	r2, [fp, #-12]
	double l_GravityValue_f64=0;
    fa20:	e3a02000 	mov	r2, #0
    fa24:	e3a03000 	mov	r3, #0
    fa28:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	double l_Temperature_f64=0;
    fa2c:	e3a02000 	mov	r2, #0
    fa30:	e3a03000 	mov	r3, #0
    fa34:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	int l_countVar_i32=0;
    fa38:	e3a03000 	mov	r3, #0
    fa3c:	e50b3020 	str	r3, [fp, #-32]
	halImu_orientationValues l_imuValues_st;

// create Reference pressure,Gravity and Temperature as mean value over M_NR_OF_VALUES_OFFSET_I32 values
	for(l_countVar_i32=0;l_countVar_i32<M_NR_OF_VALUES_OFFSET_I32;l_countVar_i32++)
    fa40:	e3a03000 	mov	r3, #0
    fa44:	e50b3020 	str	r3, [fp, #-32]
    fa48:	ea000012 	b	fa98 <g_sigOri_initBuildReferenceValues_bl+0x90>
	{
		g_sigFil_readImuData_bl();
    fa4c:	eb000351 	bl	10798 <g_sigFil_readImuData_bl>
		l_imuValues_st=g_sigFil_getImuValuesUnfiltered_st();
    fa50:	e24b3084 	sub	r3, fp, #132	; 0x84
    fa54:	e1a00003 	mov	r0, r3
    fa58:	eb0002e4 	bl	105f0 <g_sigFil_getImuValuesUnfiltered_st>
		l_barometricValue_f64+=l_imuValues_st.pressure_f64;
    fa5c:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    fa60:	ed1b6b03 	vldr	d6, [fp, #-12]
    fa64:	ee367b07 	vadd.f64	d7, d6, d7
    fa68:	ed0b7b03 	vstr	d7, [fp, #-12]
		l_GravityValue_f64+=l_imuValues_st.acc.z_f64;
    fa6c:	ed1b7b1b 	vldr	d7, [fp, #-108]	; 0xffffff94
    fa70:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
    fa74:	ee367b07 	vadd.f64	d7, d6, d7
    fa78:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
		l_Temperature_f64+=l_imuValues_st.temperature_f64;
    fa7c:	ed1b7b0d 	vldr	d7, [fp, #-52]	; 0xffffffcc
    fa80:	ed1b6b07 	vldr	d6, [fp, #-28]	; 0xffffffe4
    fa84:	ee367b07 	vadd.f64	d7, d6, d7
    fa88:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4
	double l_Temperature_f64=0;
	int l_countVar_i32=0;
	halImu_orientationValues l_imuValues_st;

// create Reference pressure,Gravity and Temperature as mean value over M_NR_OF_VALUES_OFFSET_I32 values
	for(l_countVar_i32=0;l_countVar_i32<M_NR_OF_VALUES_OFFSET_I32;l_countVar_i32++)
    fa8c:	e51b3020 	ldr	r3, [fp, #-32]
    fa90:	e2833001 	add	r3, r3, #1
    fa94:	e50b3020 	str	r3, [fp, #-32]
    fa98:	e51b3020 	ldr	r3, [fp, #-32]
    fa9c:	e3530ffa 	cmp	r3, #1000	; 0x3e8
    faa0:	baffffe9 	blt	fa4c <g_sigOri_initBuildReferenceValues_bl+0x44>
		l_imuValues_st=g_sigFil_getImuValuesUnfiltered_st();
		l_barometricValue_f64+=l_imuValues_st.pressure_f64;
		l_GravityValue_f64+=l_imuValues_st.acc.z_f64;
		l_Temperature_f64+=l_imuValues_st.temperature_f64;
	}
	m_sigOri_referencePressure_f64 =l_barometricValue_f64/M_NR_OF_VALUES_OFFSET_I32;
    faa4:	ed1b6b03 	vldr	d6, [fp, #-12]
    faa8:	ed9f7b0e 	vldr	d7, [pc, #56]	; fae8 <g_sigOri_initBuildReferenceValues_bl+0xe0>
    faac:	ee867b07 	vdiv.f64	d7, d6, d7
    fab0:	e59f3038 	ldr	r3, [pc, #56]	; faf0 <g_sigOri_initBuildReferenceValues_bl+0xe8>
    fab4:	ed837b00 	vstr	d7, [r3]
	m_sigOri_referenceGravity_f64=l_GravityValue_f64/M_NR_OF_VALUES_OFFSET_I32;
    fab8:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
    fabc:	ed9f7b09 	vldr	d7, [pc, #36]	; fae8 <g_sigOri_initBuildReferenceValues_bl+0xe0>
    fac0:	ee867b07 	vdiv.f64	d7, d6, d7
    fac4:	e59f3028 	ldr	r3, [pc, #40]	; faf4 <g_sigOri_initBuildReferenceValues_bl+0xec>
    fac8:	ed837b00 	vstr	d7, [r3]
	m_sigOri_referenceTemperature_f64=l_Temperature_f64/M_NR_OF_VALUES_OFFSET_I32;
    facc:	ed1b6b07 	vldr	d6, [fp, #-28]	; 0xffffffe4
    fad0:	ed9f7b04 	vldr	d7, [pc, #16]	; fae8 <g_sigOri_initBuildReferenceValues_bl+0xe0>
    fad4:	ee867b07 	vdiv.f64	d7, d6, d7
    fad8:	e59f3018 	ldr	r3, [pc, #24]	; faf8 <g_sigOri_initBuildReferenceValues_bl+0xf0>
    fadc:	ed837b00 	vstr	d7, [r3]
}
    fae0:	e24bd004 	sub	sp, fp, #4
    fae4:	e8bd8800 	pop	{fp, pc}
    fae8:	00000000 	.word	0x00000000
    faec:	408f4000 	.word	0x408f4000
    faf0:	00019a80 	.word	0x00019a80
    faf4:	00019a88 	.word	0x00019a88
    faf8:	00019a90 	.word	0x00019a90

0000fafc <m_sigOri_getImuData_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void m_sigOri_getImuData_bl()
{
    fafc:	e92d4810 	push	{r4, fp, lr}
    fb00:	e28db008 	add	fp, sp, #8
    fb04:	e24dd064 	sub	sp, sp, #100	; 0x64
	g_sigFil_readImuData_bl();
    fb08:	eb000322 	bl	10798 <g_sigFil_readImuData_bl>
	m_sigori_imuValues_st = g_sigFil_getImuValuesUnfiltered_st();
    fb0c:	e59f402c 	ldr	r4, [pc, #44]	; fb40 <m_sigOri_getImuData_bl+0x44>
    fb10:	e24b306c 	sub	r3, fp, #108	; 0x6c
    fb14:	e1a00003 	mov	r0, r3
    fb18:	eb0002b4 	bl	105f0 <g_sigFil_getImuValuesUnfiltered_st>
    fb1c:	e1a01004 	mov	r1, r4
    fb20:	e24b206c 	sub	r2, fp, #108	; 0x6c
    fb24:	e3a03060 	mov	r3, #96	; 0x60
    fb28:	e1a00001 	mov	r0, r1
    fb2c:	e1a01002 	mov	r1, r2
    fb30:	e1a02003 	mov	r2, r3
    fb34:	ebffe3df 	bl	8ab8 <_init+0x140>
}
    fb38:	e24bd008 	sub	sp, fp, #8
    fb3c:	e8bd8810 	pop	{r4, fp, pc}
    fb40:	00019a18 	.word	0x00019a18

0000fb44 <m_sigOri_calcAccMagAngle_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles m_sigOri_calcAccMagAngle_st()
{
    fb44:	e92d4830 	push	{r4, r5, fp, lr}
    fb48:	ed2d8b04 	vpush	{d8-d9}
    fb4c:	e28db01c 	add	fp, sp, #28
    fb50:	e24dd0b0 	sub	sp, sp, #176	; 0xb0
	sigOri_orientationAngles l_angles_f64;
	double l_roll_f64=0;
    fb54:	e3a02000 	mov	r2, #0
    fb58:	e3a03000 	mov	r3, #0
    fb5c:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	double l_pitch_f64=0;
    fb60:	e3a02000 	mov	r2, #0
    fb64:	e3a03000 	mov	r3, #0
    fb68:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
	double l_yaw_f64=0;
    fb6c:	e3a02000 	mov	r2, #0
    fb70:	e3a03000 	mov	r3, #0
    fb74:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	double l_divider_f64=0;
    fb78:	e3a02000 	mov	r2, #0
    fb7c:	e3a03000 	mov	r3, #0
    fb80:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4

	double ll_minX_f64=M_SIGORI_MAG_MINX_F64;
    fb84:	e59f22ec 	ldr	r2, [pc, #748]	; fe78 <m_sigOri_calcAccMagAngle_st+0x334>
    fb88:	e59f32ec 	ldr	r3, [pc, #748]	; fe7c <m_sigOri_calcAccMagAngle_st+0x338>
    fb8c:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	double ll_maxX_f64=M_SIGORI_MAG_MAXX_F64;
    fb90:	e59f22e8 	ldr	r2, [pc, #744]	; fe80 <m_sigOri_calcAccMagAngle_st+0x33c>
    fb94:	e59f32e8 	ldr	r3, [pc, #744]	; fe84 <m_sigOri_calcAccMagAngle_st+0x340>
    fb98:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
	double ll_minY_f64=M_SIGORI_MAG_MINY_F64;
    fb9c:	e59f22e4 	ldr	r2, [pc, #740]	; fe88 <m_sigOri_calcAccMagAngle_st+0x344>
    fba0:	e59f32e4 	ldr	r3, [pc, #740]	; fe8c <m_sigOri_calcAccMagAngle_st+0x348>
    fba4:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac
	double ll_maxY_f64=M_SIGORI_MAG_MAXY_F64;
    fba8:	e59f22e0 	ldr	r2, [pc, #736]	; fe90 <m_sigOri_calcAccMagAngle_st+0x34c>
    fbac:	e59f32e0 	ldr	r3, [pc, #736]	; fe94 <m_sigOri_calcAccMagAngle_st+0x350>
    fbb0:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	double ll_minZ_f64=M_SIGORI_MAG_MINZ_F64;
    fbb4:	e59f22dc 	ldr	r2, [pc, #732]	; fe98 <m_sigOri_calcAccMagAngle_st+0x354>
    fbb8:	e59f32dc 	ldr	r3, [pc, #732]	; fe9c <m_sigOri_calcAccMagAngle_st+0x358>
    fbbc:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
	double ll_maxZ_f64=M_SIGORI_MAG_MAXZ_F64;
    fbc0:	e59f22d8 	ldr	r2, [pc, #728]	; fea0 <m_sigOri_calcAccMagAngle_st+0x35c>
    fbc4:	e59f32d8 	ldr	r3, [pc, #728]	; fea4 <m_sigOri_calcAccMagAngle_st+0x360>
    fbc8:	e14b26fc 	strd	r2, [fp, #-108]	; 0xffffff94

	halAccmag_3dDoubleVector l_mag_st;
	
	l_mag_st.x_f64=(m_sigori_imuValues_st.mag.x_f64-ll_minX_f64)/(ll_maxX_f64-ll_minX_f64)*2-1;
    fbcc:	e59f32d4 	ldr	r3, [pc, #724]	; fea8 <m_sigOri_calcAccMagAngle_st+0x364>
    fbd0:	ed936b08 	vldr	d6, [r3, #32]
    fbd4:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    fbd8:	ee366b47 	vsub.f64	d6, d6, d7
    fbdc:	ed1b5b13 	vldr	d5, [fp, #-76]	; 0xffffffb4
    fbe0:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    fbe4:	ee357b47 	vsub.f64	d7, d5, d7
    fbe8:	ee867b07 	vdiv.f64	d7, d6, d7
    fbec:	ee376b07 	vadd.f64	d6, d7, d7
    fbf0:	ed9f7b9c 	vldr	d7, [pc, #624]	; fe68 <m_sigOri_calcAccMagAngle_st+0x324>
    fbf4:	ee367b47 	vsub.f64	d7, d6, d7
    fbf8:	ed0b7b2d 	vstr	d7, [fp, #-180]	; 0xffffff4c
	l_mag_st.y_f64=(m_sigori_imuValues_st.mag.y_f64-ll_minY_f64)/(ll_maxY_f64-ll_minY_f64)*2-1;
    fbfc:	e59f32a4 	ldr	r3, [pc, #676]	; fea8 <m_sigOri_calcAccMagAngle_st+0x364>
    fc00:	ed936b0a 	vldr	d6, [r3, #40]	; 0x28
    fc04:	ed1b7b15 	vldr	d7, [fp, #-84]	; 0xffffffac
    fc08:	ee366b47 	vsub.f64	d6, d6, d7
    fc0c:	ed1b5b17 	vldr	d5, [fp, #-92]	; 0xffffffa4
    fc10:	ed1b7b15 	vldr	d7, [fp, #-84]	; 0xffffffac
    fc14:	ee357b47 	vsub.f64	d7, d5, d7
    fc18:	ee867b07 	vdiv.f64	d7, d6, d7
    fc1c:	ee376b07 	vadd.f64	d6, d7, d7
    fc20:	ed9f7b90 	vldr	d7, [pc, #576]	; fe68 <m_sigOri_calcAccMagAngle_st+0x324>
    fc24:	ee367b47 	vsub.f64	d7, d6, d7
    fc28:	ed0b7b2b 	vstr	d7, [fp, #-172]	; 0xffffff54
	l_mag_st.z_f64=(m_sigori_imuValues_st.mag.z_f64-ll_minZ_f64)/(ll_maxZ_f64-ll_minZ_f64)*2-1;
    fc2c:	e59f3274 	ldr	r3, [pc, #628]	; fea8 <m_sigOri_calcAccMagAngle_st+0x364>
    fc30:	ed936b0c 	vldr	d6, [r3, #48]	; 0x30
    fc34:	ed1b7b19 	vldr	d7, [fp, #-100]	; 0xffffff9c
    fc38:	ee366b47 	vsub.f64	d6, d6, d7
    fc3c:	ed1b5b1b 	vldr	d5, [fp, #-108]	; 0xffffff94
    fc40:	ed1b7b19 	vldr	d7, [fp, #-100]	; 0xffffff9c
    fc44:	ee357b47 	vsub.f64	d7, d5, d7
    fc48:	ee867b07 	vdiv.f64	d7, d6, d7
    fc4c:	ee376b07 	vadd.f64	d6, d7, d7
    fc50:	ed9f7b84 	vldr	d7, [pc, #528]	; fe68 <m_sigOri_calcAccMagAngle_st+0x324>
    fc54:	ee367b47 	vsub.f64	d7, d6, d7
    fc58:	ed0b7b29 	vstr	d7, [fp, #-164]	; 0xffffff5c

	//calculate roll with accelerometer values
	if(m_sigori_imuValues_st.acc.z_f64!=0)
    fc5c:	e59f3244 	ldr	r3, [pc, #580]	; fea8 <m_sigOri_calcAccMagAngle_st+0x364>
    fc60:	ed937b06 	vldr	d7, [r3, #24]
    fc64:	eeb57b40 	vcmp.f64	d7, #0.0
    fc68:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    fc6c:	0a00000c 	beq	fca4 <m_sigOri_calcAccMagAngle_st+0x160>
	{
		l_roll_f64=atan2(m_sigori_imuValues_st.acc.y_f64,m_sigori_imuValues_st.acc.z_f64);
    fc70:	e59f3230 	ldr	r3, [pc, #560]	; fea8 <m_sigOri_calcAccMagAngle_st+0x364>
    fc74:	ed936b04 	vldr	d6, [r3, #16]
    fc78:	e59f3228 	ldr	r3, [pc, #552]	; fea8 <m_sigOri_calcAccMagAngle_st+0x364>
    fc7c:	ed937b06 	vldr	d7, [r3, #24]
    fc80:	eeb00b46 	vmov.f64	d0, d6
    fc84:	eeb01b47 	vmov.f64	d1, d7
    fc88:	ebffe399 	bl	8af4 <_init+0x17c>
    fc8c:	ed0b0b09 	vstr	d0, [fp, #-36]	; 0xffffffdc
		l_angles_f64.roll_f64=-l_roll_f64*M_RAD_TO_DEG_F64;
    fc90:	ed1b7b09 	vldr	d7, [fp, #-36]	; 0xffffffdc
    fc94:	eeb16b47 	vneg.f64	d6, d7
    fc98:	ed9f7b74 	vldr	d7, [pc, #464]	; fe70 <m_sigOri_calcAccMagAngle_st+0x32c>
    fc9c:	ee267b07 	vmul.f64	d7, d6, d7
    fca0:	ed0b7b27 	vstr	d7, [fp, #-156]	; 0xffffff64
	}
	//calculate pitch with accelerometer values
	l_divider_f64=m_sigori_imuValues_st.acc.y_f64*sin(l_roll_f64)+m_sigori_imuValues_st.acc.z_f64*cos(l_roll_f64);
    fca4:	e59f31fc 	ldr	r3, [pc, #508]	; fea8 <m_sigOri_calcAccMagAngle_st+0x364>
    fca8:	ed938b04 	vldr	d8, [r3, #16]
    fcac:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    fcb0:	ebffe3a4 	bl	8b48 <_init+0x1d0>
    fcb4:	eeb07b40 	vmov.f64	d7, d0
    fcb8:	ee288b07 	vmul.f64	d8, d8, d7
    fcbc:	e59f31e4 	ldr	r3, [pc, #484]	; fea8 <m_sigOri_calcAccMagAngle_st+0x364>
    fcc0:	ed939b06 	vldr	d9, [r3, #24]
    fcc4:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    fcc8:	ebffe377 	bl	8aac <_init+0x134>
    fccc:	eeb07b40 	vmov.f64	d7, d0
    fcd0:	ee297b07 	vmul.f64	d7, d9, d7
    fcd4:	ee387b07 	vadd.f64	d7, d8, d7
    fcd8:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	if(l_divider_f64!=0)
    fcdc:	ed1b7b0f 	vldr	d7, [fp, #-60]	; 0xffffffc4
    fce0:	eeb57b40 	vcmp.f64	d7, #0.0
    fce4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    fce8:	0a00000c 	beq	fd20 <m_sigOri_calcAccMagAngle_st+0x1dc>
	{
		l_pitch_f64=atan(-m_sigori_imuValues_st.acc.x_f64/l_divider_f64);
    fcec:	e59f31b4 	ldr	r3, [pc, #436]	; fea8 <m_sigOri_calcAccMagAngle_st+0x364>
    fcf0:	ed937b02 	vldr	d7, [r3, #8]
    fcf4:	eeb16b47 	vneg.f64	d6, d7
    fcf8:	ed1b7b0f 	vldr	d7, [fp, #-60]	; 0xffffffc4
    fcfc:	ee867b07 	vdiv.f64	d7, d6, d7
    fd00:	eeb00b47 	vmov.f64	d0, d7
    fd04:	ebffe353 	bl	8a58 <_init+0xe0>
    fd08:	ed0b0b0b 	vstr	d0, [fp, #-44]	; 0xffffffd4
		l_angles_f64.pitch_f64=-l_pitch_f64*M_RAD_TO_DEG_F64;
    fd0c:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    fd10:	eeb16b47 	vneg.f64	d6, d7
    fd14:	ed9f7b55 	vldr	d7, [pc, #340]	; fe70 <m_sigOri_calcAccMagAngle_st+0x32c>
    fd18:	ee267b07 	vmul.f64	d7, d6, d7
    fd1c:	ed0b7b25 	vstr	d7, [fp, #-148]	; 0xffffff6c
	}

	//calculate yaw and make a tilt compensation for the eCompass
	l_divider_f64= m_sigori_imuValues_st.mag.x_f64*cos(l_pitch_f64)+
    fd20:	e59f3180 	ldr	r3, [pc, #384]	; fea8 <m_sigOri_calcAccMagAngle_st+0x364>
    fd24:	ed938b08 	vldr	d8, [r3, #32]
    fd28:	ed1b0b0b 	vldr	d0, [fp, #-44]	; 0xffffffd4
    fd2c:	ebffe35e 	bl	8aac <_init+0x134>
    fd30:	eeb07b40 	vmov.f64	d7, d0
    fd34:	ee288b07 	vmul.f64	d8, d8, d7
					m_sigori_imuValues_st.mag.y_f64*sin(l_pitch_f64)*sin(l_roll_f64)+
    fd38:	e59f3168 	ldr	r3, [pc, #360]	; fea8 <m_sigOri_calcAccMagAngle_st+0x364>
    fd3c:	ed939b0a 	vldr	d9, [r3, #40]	; 0x28
    fd40:	ed1b0b0b 	vldr	d0, [fp, #-44]	; 0xffffffd4
    fd44:	ebffe37f 	bl	8b48 <_init+0x1d0>
    fd48:	eeb07b40 	vmov.f64	d7, d0
    fd4c:	ee299b07 	vmul.f64	d9, d9, d7
    fd50:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    fd54:	ebffe37b 	bl	8b48 <_init+0x1d0>
    fd58:	eeb07b40 	vmov.f64	d7, d0
    fd5c:	ee297b07 	vmul.f64	d7, d9, d7
		l_pitch_f64=atan(-m_sigori_imuValues_st.acc.x_f64/l_divider_f64);
		l_angles_f64.pitch_f64=-l_pitch_f64*M_RAD_TO_DEG_F64;
	}

	//calculate yaw and make a tilt compensation for the eCompass
	l_divider_f64= m_sigori_imuValues_st.mag.x_f64*cos(l_pitch_f64)+
    fd60:	ee388b07 	vadd.f64	d8, d8, d7
					m_sigori_imuValues_st.mag.y_f64*sin(l_pitch_f64)*sin(l_roll_f64)+
					m_sigori_imuValues_st.mag.z_f64*sin(l_pitch_f64)*cos(l_roll_f64);
    fd64:	e59f313c 	ldr	r3, [pc, #316]	; fea8 <m_sigOri_calcAccMagAngle_st+0x364>
    fd68:	ed939b0c 	vldr	d9, [r3, #48]	; 0x30
    fd6c:	ed1b0b0b 	vldr	d0, [fp, #-44]	; 0xffffffd4
    fd70:	ebffe374 	bl	8b48 <_init+0x1d0>
    fd74:	eeb07b40 	vmov.f64	d7, d0
    fd78:	ee299b07 	vmul.f64	d9, d9, d7
    fd7c:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    fd80:	ebffe349 	bl	8aac <_init+0x134>
    fd84:	eeb07b40 	vmov.f64	d7, d0
    fd88:	ee297b07 	vmul.f64	d7, d9, d7
		l_pitch_f64=atan(-m_sigori_imuValues_st.acc.x_f64/l_divider_f64);
		l_angles_f64.pitch_f64=-l_pitch_f64*M_RAD_TO_DEG_F64;
	}

	//calculate yaw and make a tilt compensation for the eCompass
	l_divider_f64= m_sigori_imuValues_st.mag.x_f64*cos(l_pitch_f64)+
    fd8c:	ee387b07 	vadd.f64	d7, d8, d7
    fd90:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
					m_sigori_imuValues_st.mag.y_f64*sin(l_pitch_f64)*sin(l_roll_f64)+
					m_sigori_imuValues_st.mag.z_f64*sin(l_pitch_f64)*cos(l_roll_f64);
	if(l_divider_f64!=0)
    fd94:	ed1b7b0f 	vldr	d7, [fp, #-60]	; 0xffffffc4
    fd98:	eeb57b40 	vcmp.f64	d7, #0.0
    fd9c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    fda0:	0a000016 	beq	fe00 <m_sigOri_calcAccMagAngle_st+0x2bc>
	{
		l_yaw_f64=atan2(-(-m_sigori_imuValues_st.mag.z_f64*sin(l_roll_f64)+m_sigori_imuValues_st.mag.y_f64*cos(l_roll_f64)),
    fda4:	e59f30fc 	ldr	r3, [pc, #252]	; fea8 <m_sigOri_calcAccMagAngle_st+0x364>
    fda8:	ed937b0c 	vldr	d7, [r3, #48]	; 0x30
    fdac:	eeb18b47 	vneg.f64	d8, d7
    fdb0:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    fdb4:	ebffe363 	bl	8b48 <_init+0x1d0>
    fdb8:	eeb07b40 	vmov.f64	d7, d0
    fdbc:	ee288b07 	vmul.f64	d8, d8, d7
    fdc0:	e59f30e0 	ldr	r3, [pc, #224]	; fea8 <m_sigOri_calcAccMagAngle_st+0x364>
    fdc4:	ed939b0a 	vldr	d9, [r3, #40]	; 0x28
    fdc8:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    fdcc:	ebffe336 	bl	8aac <_init+0x134>
    fdd0:	eeb07b40 	vmov.f64	d7, d0
    fdd4:	ee297b07 	vmul.f64	d7, d9, d7
    fdd8:	ee387b07 	vadd.f64	d7, d8, d7
    fddc:	eeb17b47 	vneg.f64	d7, d7
    fde0:	eeb00b47 	vmov.f64	d0, d7
    fde4:	ed1b1b0f 	vldr	d1, [fp, #-60]	; 0xffffffc4
    fde8:	ebffe341 	bl	8af4 <_init+0x17c>
    fdec:	ed0b0b0d 	vstr	d0, [fp, #-52]	; 0xffffffcc
					l_divider_f64);
		l_angles_f64.yaw_f64=l_yaw_f64*M_RAD_TO_DEG_F64;	
    fdf0:	ed1b6b0d 	vldr	d6, [fp, #-52]	; 0xffffffcc
    fdf4:	ed9f7b1d 	vldr	d7, [pc, #116]	; fe70 <m_sigOri_calcAccMagAngle_st+0x32c>
    fdf8:	ee267b07 	vmul.f64	d7, d6, d7
    fdfc:	ed0b7b23 	vstr	d7, [fp, #-140]	; 0xffffff74
			l_yaw_f64=atan2(l_divider_f64,l_mag_st.z_f64*sin(l_pitch_f64)+l_mag_st.x_f64*cos(l_pitch_f64));
			l_angles_f64.yaw_f64=l_yaw_f64*M_RAD_TO_DEG_F64;

		}*/

	m_sigOri_arrayOutputAnglesAccMagCalc_st = l_angles_f64;
    fe00:	e59f30a4 	ldr	r3, [pc, #164]	; feac <m_sigOri_calcAccMagAngle_st+0x368>
    fe04:	e1a0c003 	mov	ip, r3
    fe08:	e24be09c 	sub	lr, fp, #156	; 0x9c
    fe0c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    fe10:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    fe14:	e89e0003 	ldm	lr, {r0, r1}
    fe18:	e88c0003 	stm	ip, {r0, r1}

	return l_angles_f64;
    fe1c:	e24bc084 	sub	ip, fp, #132	; 0x84
    fe20:	e24be09c 	sub	lr, fp, #156	; 0x9c
    fe24:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    fe28:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    fe2c:	e89e0003 	ldm	lr, {r0, r1}
    fe30:	e88c0003 	stm	ip, {r0, r1}
    fe34:	e14b48d4 	ldrd	r4, [fp, #-132]	; 0xffffff7c
    fe38:	e14b07dc 	ldrd	r0, [fp, #-124]	; 0xffffff84
    fe3c:	e14b27d4 	ldrd	r2, [fp, #-116]	; 0xffffff8c
    fe40:	ec454b15 	vmov	d5, r4, r5
    fe44:	ec410b16 	vmov	d6, r0, r1
    fe48:	ec432b17 	vmov	d7, r2, r3
}
    fe4c:	eeb00b45 	vmov.f64	d0, d5
    fe50:	eeb01b46 	vmov.f64	d1, d6
    fe54:	eeb02b47 	vmov.f64	d2, d7
    fe58:	e24bd01c 	sub	sp, fp, #28
    fe5c:	ecbd8b04 	vpop	{d8-d9}
    fe60:	e8bd8830 	pop	{r4, r5, fp, pc}
    fe64:	e1a00000 	nop			; (mov r0, r0)
    fe68:	00000000 	.word	0x00000000
    fe6c:	3ff00000 	.word	0x3ff00000
    fe70:	b05cc3e8 	.word	0xb05cc3e8
    fe74:	404ca5dd 	.word	0x404ca5dd
    fe78:	9ba5e354 	.word	0x9ba5e354
    fe7c:	c033b0c4 	.word	0xc033b0c4
    fe80:	eecbfb16 	.word	0xeecbfb16
    fe84:	4034c3c9 	.word	0x4034c3c9
    fe88:	3fe5c91d 	.word	0x3fe5c91d
    fe8c:	c030bfa4 	.word	0xc030bfa4
    fe90:	b98c7e28 	.word	0xb98c7e28
    fe94:	4035696b 	.word	0x4035696b
    fe98:	a0902de0 	.word	0xa0902de0
    fe9c:	c02e71f8 	.word	0xc02e71f8
    fea0:	c5d63886 	.word	0xc5d63886
    fea4:	4035b46d 	.word	0x4035b46d
    fea8:	00019a18 	.word	0x00019a18
    feac:	00019ac0 	.word	0x00019ac0

0000feb0 <m_sigOri_calcGyroAnglePerStep_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles m_sigOri_calcGyroAnglePerStep_st()
{
    feb0:	e92d4830 	push	{r4, r5, fp, lr}
    feb4:	e28db00c 	add	fp, sp, #12
    feb8:	e24dd060 	sub	sp, sp, #96	; 0x60
	sigOri_orientationAngles l_angles_f64;
	
	long int time_difference;
	struct timeval gettime_now;
	double l_timestep_f64=0;
    febc:	e3a02000 	mov	r2, #0
    fec0:	e3a03000 	mov	r3, #0
    fec4:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	gettimeofday(&gettime_now,(void *)0);
    fec8:	e24b3054 	sub	r3, fp, #84	; 0x54
    fecc:	e1a00003 	mov	r0, r3
    fed0:	e3a01000 	mov	r1, #0
    fed4:	ebffe2e2 	bl	8a64 <_init+0xec>

	time_difference=gettime_now.tv_usec-gettime_old.tv_usec;
    fed8:	e51b2050 	ldr	r2, [fp, #-80]	; 0x50
    fedc:	e59f30fc 	ldr	r3, [pc, #252]	; ffe0 <m_sigOri_calcGyroAnglePerStep_st+0x130>
    fee0:	e5933004 	ldr	r3, [r3, #4]
    fee4:	e0633002 	rsb	r3, r3, r2
    fee8:	e50b3010 	str	r3, [fp, #-16]
	if(time_difference<0)
    feec:	e51b3010 	ldr	r3, [fp, #-16]
    fef0:	e3530000 	cmp	r3, #0
    fef4:	aa000006 	bge	ff14 <m_sigOri_calcGyroAnglePerStep_st+0x64>
	{
		time_difference=1000000-gettime_old.tv_usec+gettime_now.tv_usec;
    fef8:	e59f30e0 	ldr	r3, [pc, #224]	; ffe0 <m_sigOri_calcGyroAnglePerStep_st+0x130>
    fefc:	e5933004 	ldr	r3, [r3, #4]
    ff00:	e263393d 	rsb	r3, r3, #999424	; 0xf4000
    ff04:	e2833d09 	add	r3, r3, #576	; 0x240
    ff08:	e51b2050 	ldr	r2, [fp, #-80]	; 0x50
    ff0c:	e0833002 	add	r3, r3, r2
    ff10:	e50b3010 	str	r3, [fp, #-16]
	}

	l_timestep_f64=(double)(time_difference)*0.000001;
    ff14:	e51b3010 	ldr	r3, [fp, #-16]
    ff18:	ee073a90 	vmov	s15, r3
    ff1c:	eeb86be7 	vcvt.f64.s32	d6, s15
    ff20:	ed9f7b2c 	vldr	d7, [pc, #176]	; ffd8 <m_sigOri_calcGyroAnglePerStep_st+0x128>
    ff24:	ee267b07 	vmul.f64	d7, d6, d7
    ff28:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4

	l_angles_f64.roll_f64=m_sigori_imuValues_st.gyro.roll_f64*l_timestep_f64;
    ff2c:	e59f30b0 	ldr	r3, [pc, #176]	; ffe4 <m_sigOri_calcGyroAnglePerStep_st+0x134>
    ff30:	ed936b0e 	vldr	d6, [r3, #56]	; 0x38
    ff34:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
    ff38:	ee267b07 	vmul.f64	d7, d6, d7
    ff3c:	ed0b7b13 	vstr	d7, [fp, #-76]	; 0xffffffb4
	l_angles_f64.pitch_f64=m_sigori_imuValues_st.gyro.pitch_f64*l_timestep_f64;
    ff40:	e59f309c 	ldr	r3, [pc, #156]	; ffe4 <m_sigOri_calcGyroAnglePerStep_st+0x134>
    ff44:	ed936b10 	vldr	d6, [r3, #64]	; 0x40
    ff48:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
    ff4c:	ee267b07 	vmul.f64	d7, d6, d7
    ff50:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc
	l_angles_f64.yaw_f64=m_sigori_imuValues_st.gyro.yaw_f64*l_timestep_f64;
    ff54:	e59f3088 	ldr	r3, [pc, #136]	; ffe4 <m_sigOri_calcGyroAnglePerStep_st+0x134>
    ff58:	ed936b12 	vldr	d6, [r3, #72]	; 0x48
    ff5c:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
    ff60:	ee267b07 	vmul.f64	d7, d6, d7
    ff64:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	gettimeofday(&gettime_old,(void *)0);
    ff68:	e59f0070 	ldr	r0, [pc, #112]	; ffe0 <m_sigOri_calcGyroAnglePerStep_st+0x130>
    ff6c:	e3a01000 	mov	r1, #0
    ff70:	ebffe2bb 	bl	8a64 <_init+0xec>

	m_sigOri_arrayOutputAnglesGyroPerStep_st = l_angles_f64;
    ff74:	e59f306c 	ldr	r3, [pc, #108]	; ffe8 <m_sigOri_calcGyroAnglePerStep_st+0x138>
    ff78:	e1a0c003 	mov	ip, r3
    ff7c:	e24be04c 	sub	lr, fp, #76	; 0x4c
    ff80:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    ff84:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    ff88:	e89e0003 	ldm	lr, {r0, r1}
    ff8c:	e88c0003 	stm	ip, {r0, r1}

	return l_angles_f64;
    ff90:	e24bc034 	sub	ip, fp, #52	; 0x34
    ff94:	e24be04c 	sub	lr, fp, #76	; 0x4c
    ff98:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    ff9c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    ffa0:	e89e0003 	ldm	lr, {r0, r1}
    ffa4:	e88c0003 	stm	ip, {r0, r1}
    ffa8:	e14b43d4 	ldrd	r4, [fp, #-52]	; 0xffffffcc
    ffac:	e14b02dc 	ldrd	r0, [fp, #-44]	; 0xffffffd4
    ffb0:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
    ffb4:	ec454b15 	vmov	d5, r4, r5
    ffb8:	ec410b16 	vmov	d6, r0, r1
    ffbc:	ec432b17 	vmov	d7, r2, r3
}
    ffc0:	eeb00b45 	vmov.f64	d0, d5
    ffc4:	eeb01b46 	vmov.f64	d1, d6
    ffc8:	eeb02b47 	vmov.f64	d2, d7
    ffcc:	e24bd00c 	sub	sp, fp, #12
    ffd0:	e8bd8830 	pop	{r4, r5, fp, pc}
    ffd4:	e1a00000 	nop			; (mov r0, r0)
    ffd8:	a0b5ed8d 	.word	0xa0b5ed8d
    ffdc:	3eb0c6f7 	.word	0x3eb0c6f7
    ffe0:	00019df0 	.word	0x00019df0
    ffe4:	00019a18 	.word	0x00019a18
    ffe8:	00019aa8 	.word	0x00019aa8

0000ffec <m_sigOri_calcBarometricHeight_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void m_sigOri_calcBarometricHeight_st()
{
    ffec:	e92d4800 	push	{fp, lr}
    fff0:	ed2d8b02 	vpush	{d8}
    fff4:	e28db00c 	add	fp, sp, #12
    fff8:	e24dd010 	sub	sp, sp, #16
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
    fffc:	e59f2094 	ldr	r2, [pc, #148]	; 10098 <m_sigOri_calcBarometricHeight_st+0xac>
   10000:	e59f3094 	ldr	r3, [pc, #148]	; 1009c <m_sigOri_calcBarometricHeight_st+0xb0>
   10004:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	double l_Deg2Kelvin_f64=273.15;
   10008:	e59f2090 	ldr	r2, [pc, #144]	; 100a0 <m_sigOri_calcBarometricHeight_st+0xb4>
   1000c:	e59f3090 	ldr	r3, [pc, #144]	; 100a4 <m_sigOri_calcBarometricHeight_st+0xb8>
   10010:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
   10014:	e59f308c 	ldr	r3, [pc, #140]	; 100a8 <m_sigOri_calcBarometricHeight_st+0xbc>
   10018:	ed937b00 	vldr	d7, [r3]
   1001c:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
   10020:	ee866b07 	vdiv.f64	d6, d6, d7
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
   10024:	e59f3080 	ldr	r3, [pc, #128]	; 100ac <m_sigOri_calcBarometricHeight_st+0xc0>
   10028:	ed935b14 	vldr	d5, [r3, #80]	; 0x50
   1002c:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
   10030:	ee355b07 	vadd.f64	d5, d5, d7
   10034:	e59f3074 	ldr	r3, [pc, #116]	; 100b0 <m_sigOri_calcBarometricHeight_st+0xc4>
   10038:	ed937b00 	vldr	d7, [r3]
   1003c:	ee355b07 	vadd.f64	d5, d5, d7
   10040:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
   10044:	ee355b07 	vadd.f64	d5, d5, d7
   10048:	ed9f7b10 	vldr	d7, [pc, #64]	; 10090 <m_sigOri_calcBarometricHeight_st+0xa4>
   1004c:	ee857b07 	vdiv.f64	d7, d5, d7
void m_sigOri_calcBarometricHeight_st()
{
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
	double l_Deg2Kelvin_f64=273.15;

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
   10050:	ee268b07 	vmul.f64	d8, d6, d7
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
			log(m_sigOri_referencePressure_f64/m_sigori_imuValues_st.pressure_f64);
   10054:	e59f3058 	ldr	r3, [pc, #88]	; 100b4 <m_sigOri_calcBarometricHeight_st+0xc8>
   10058:	ed936b00 	vldr	d6, [r3]
   1005c:	e59f3048 	ldr	r3, [pc, #72]	; 100ac <m_sigOri_calcBarometricHeight_st+0xc0>
   10060:	ed937b16 	vldr	d7, [r3, #88]	; 0x58
   10064:	ee867b07 	vdiv.f64	d7, d6, d7
   10068:	eeb00b47 	vmov.f64	d0, d7
   1006c:	ebffe2ac 	bl	8b24 <_init+0x1ac>
   10070:	eeb07b40 	vmov.f64	d7, d0
{
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
	double l_Deg2Kelvin_f64=273.15;

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
   10074:	ee287b07 	vmul.f64	d7, d8, d7
void m_sigOri_calcBarometricHeight_st()
{
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
	double l_Deg2Kelvin_f64=273.15;

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
   10078:	e59f3038 	ldr	r3, [pc, #56]	; 100b8 <m_sigOri_calcBarometricHeight_st+0xcc>
   1007c:	ed837b00 	vstr	d7, [r3]
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
			log(m_sigOri_referencePressure_f64/m_sigori_imuValues_st.pressure_f64);
}
   10080:	e24bd00c 	sub	sp, fp, #12
   10084:	ecbd8b02 	vpop	{d8}
   10088:	e8bd8800 	pop	{fp, pc}
   1008c:	e1a00000 	nop			; (mov r0, r0)
   10090:	00000000 	.word	0x00000000
   10094:	40000000 	.word	0x40000000
   10098:	cccccccd 	.word	0xcccccccd
   1009c:	4071f0cc 	.word	0x4071f0cc
   100a0:	66666666 	.word	0x66666666
   100a4:	40711266 	.word	0x40711266
   100a8:	00019a88 	.word	0x00019a88
   100ac:	00019a18 	.word	0x00019a18
   100b0:	00019a90 	.word	0x00019a90
   100b4:	00019a80 	.word	0x00019a80
   100b8:	00019a78 	.word	0x00019a78

000100bc <g_sigOri_calcKalmanOrientation_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigOri_calcKalmanOrientation_bl()
{
   100bc:	e92d4800 	push	{fp, lr}
   100c0:	e28db004 	add	fp, sp, #4
   100c4:	e24dd0e8 	sub	sp, sp, #232	; 0xe8
	double l_matrixTemp_rg9f64[M_SIGORI_SIZEOFARRAY_UI8][M_SIGORI_SIZEOFARRAY_UI8];
	double l_matrixTemp2_rg9f64[M_SIGORI_SIZEOFARRAY_UI8][M_SIGORI_SIZEOFARRAY_UI8];
	double l_matrixInnovation_rg9f64[M_SIGORI_SIZEOFARRAY_UI8][M_SIGORI_SIZEOFARRAY_UI8];

	//read new data from the IMU
	m_sigOri_getImuData_bl();
   100c8:	ebfffe8b 	bl	fafc <m_sigOri_getImuData_bl>

	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesKalman_st=m_sigOri_calcAccMagAngle_st();
   100cc:	ebfffe9c 	bl	fb44 <m_sigOri_calcAccMagAngle_st>
   100d0:	eeb05b40 	vmov.f64	d5, d0
   100d4:	eeb06b41 	vmov.f64	d6, d1
   100d8:	eeb07b42 	vmov.f64	d7, d2
   100dc:	e59f3314 	ldr	r3, [pc, #788]	; 103f8 <g_sigOri_calcKalmanOrientation_bl+0x33c>
   100e0:	ed835b00 	vstr	d5, [r3]
   100e4:	ed836b02 	vstr	d6, [r3, #8]
   100e8:	ed837b04 	vstr	d7, [r3, #16]
	m_sigOri_arrayGyroAnglesKalman_st=m_sigOri_calcGyroAnglePerStep_st();
   100ec:	ebffff6f 	bl	feb0 <m_sigOri_calcGyroAnglePerStep_st>
   100f0:	eeb05b40 	vmov.f64	d5, d0
   100f4:	eeb06b41 	vmov.f64	d6, d1
   100f8:	eeb07b42 	vmov.f64	d7, d2
   100fc:	e59f32f8 	ldr	r3, [pc, #760]	; 103fc <g_sigOri_calcKalmanOrientation_bl+0x340>
   10100:	ed835b00 	vstr	d5, [r3]
   10104:	ed836b02 	vstr	d6, [r3, #8]
   10108:	ed837b04 	vstr	d7, [r3, #16]

	//set new calculated angles from the sensors in the matrices
	m_sigOri_matrixXnew_rg9f64[0][0]=m_sigOri_arrayAccMagAnglesKalman_st.roll_f64;
   1010c:	e59f32e4 	ldr	r3, [pc, #740]	; 103f8 <g_sigOri_calcKalmanOrientation_bl+0x33c>
   10110:	e1c320d0 	ldrd	r2, [r3]
   10114:	e59f12e4 	ldr	r1, [pc, #740]	; 10400 <g_sigOri_calcKalmanOrientation_bl+0x344>
   10118:	e1c120f0 	strd	r2, [r1]
	m_sigOri_matrixXnew_rg9f64[1][1]=m_sigOri_arrayAccMagAnglesKalman_st.pitch_f64;
   1011c:	e59f32d4 	ldr	r3, [pc, #724]	; 103f8 <g_sigOri_calcKalmanOrientation_bl+0x33c>
   10120:	e1c320d8 	ldrd	r2, [r3, #8]
   10124:	e59f12d4 	ldr	r1, [pc, #724]	; 10400 <g_sigOri_calcKalmanOrientation_bl+0x344>
   10128:	e1c122f0 	strd	r2, [r1, #32]
	m_sigOri_matrixXnew_rg9f64[2][2]=m_sigOri_arrayAccMagAnglesKalman_st.yaw_f64;
   1012c:	e59f32c4 	ldr	r3, [pc, #708]	; 103f8 <g_sigOri_calcKalmanOrientation_bl+0x33c>
   10130:	e1c321d0 	ldrd	r2, [r3, #16]
   10134:	e59f12c4 	ldr	r1, [pc, #708]	; 10400 <g_sigOri_calcKalmanOrientation_bl+0x344>
   10138:	e1c124f0 	strd	r2, [r1, #64]	; 0x40

	m_sigOri_matrixUk_rg9f64[0][0]=m_sigOri_arrayGyroAnglesKalman_st.roll_f64;
   1013c:	e59f32b8 	ldr	r3, [pc, #696]	; 103fc <g_sigOri_calcKalmanOrientation_bl+0x340>
   10140:	e1c320d0 	ldrd	r2, [r3]
   10144:	e59f12b8 	ldr	r1, [pc, #696]	; 10404 <g_sigOri_calcKalmanOrientation_bl+0x348>
   10148:	e1c120f0 	strd	r2, [r1]
	m_sigOri_matrixUk_rg9f64[1][1]=m_sigOri_arrayGyroAnglesKalman_st.pitch_f64;
   1014c:	e59f32a8 	ldr	r3, [pc, #680]	; 103fc <g_sigOri_calcKalmanOrientation_bl+0x340>
   10150:	e1c320d8 	ldrd	r2, [r3, #8]
   10154:	e59f12a8 	ldr	r1, [pc, #680]	; 10404 <g_sigOri_calcKalmanOrientation_bl+0x348>
   10158:	e1c122f0 	strd	r2, [r1, #32]
	m_sigOri_matrixUk_rg9f64[2][2]=m_sigOri_arrayGyroAnglesKalman_st.yaw_f64;
   1015c:	e59f3298 	ldr	r3, [pc, #664]	; 103fc <g_sigOri_calcKalmanOrientation_bl+0x340>
   10160:	e1c321d0 	ldrd	r2, [r3, #16]
   10164:	e59f1298 	ldr	r1, [pc, #664]	; 10404 <g_sigOri_calcKalmanOrientation_bl+0x348>
   10168:	e1c124f0 	strd	r2, [r1, #64]	; 0x40

//PREDICTION
	//state estimation (prediction)
	g_sigMath_matrixAddition_bl((double*) l_matrixTemp_rg9f64,
   1016c:	e24b304c 	sub	r3, fp, #76	; 0x4c
   10170:	e59f228c 	ldr	r2, [pc, #652]	; 10404 <g_sigOri_calcKalmanOrientation_bl+0x348>
   10174:	e58d2000 	str	r2, [sp]
   10178:	e3a02003 	mov	r2, #3
   1017c:	e58d2004 	str	r2, [sp, #4]
   10180:	e3a02003 	mov	r2, #3
   10184:	e58d2008 	str	r2, [sp, #8]
   10188:	e1a00003 	mov	r0, r3
   1018c:	e59f1274 	ldr	r1, [pc, #628]	; 10408 <g_sigOri_calcKalmanOrientation_bl+0x34c>
   10190:	e3a02003 	mov	r2, #3
   10194:	e3a03003 	mov	r3, #3
   10198:	ebfff9e2 	bl	e928 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixXk_rg9f64, 3,3, 
		(double*) m_sigOri_matrixUk_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixXk_rg9f64,3,3,
   1019c:	e24b304c 	sub	r3, fp, #76	; 0x4c
   101a0:	e3a02003 	mov	r2, #3
   101a4:	e58d2000 	str	r2, [sp]
   101a8:	e3a02003 	mov	r2, #3
   101ac:	e58d2004 	str	r2, [sp, #4]
   101b0:	e59f0250 	ldr	r0, [pc, #592]	; 10408 <g_sigOri_calcKalmanOrientation_bl+0x34c>
   101b4:	e3a01003 	mov	r1, #3
   101b8:	e3a02003 	mov	r2, #3
   101bc:	ebfffcb2 	bl	f48c <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp_rg9f64,3,3);


	//covariance estimation (prediction)
	g_sigMath_matrixAddition_bl((double*) l_matrixTemp_rg9f64,
   101c0:	e24b304c 	sub	r3, fp, #76	; 0x4c
   101c4:	e59f2240 	ldr	r2, [pc, #576]	; 1040c <g_sigOri_calcKalmanOrientation_bl+0x350>
   101c8:	e58d2000 	str	r2, [sp]
   101cc:	e3a02003 	mov	r2, #3
   101d0:	e58d2004 	str	r2, [sp, #4]
   101d4:	e3a02003 	mov	r2, #3
   101d8:	e58d2008 	str	r2, [sp, #8]
   101dc:	e1a00003 	mov	r0, r3
   101e0:	e59f1228 	ldr	r1, [pc, #552]	; 10410 <g_sigOri_calcKalmanOrientation_bl+0x354>
   101e4:	e3a02003 	mov	r2, #3
   101e8:	e3a03003 	mov	r3, #3
   101ec:	ebfff9cd 	bl	e928 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixPk_rg9f64, 3,3, 
		(double*) m_sigOri_matrixQ_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixPk_rg9f64,3,3,
   101f0:	e24b304c 	sub	r3, fp, #76	; 0x4c
   101f4:	e3a02003 	mov	r2, #3
   101f8:	e58d2000 	str	r2, [sp]
   101fc:	e3a02003 	mov	r2, #3
   10200:	e58d2004 	str	r2, [sp, #4]
   10204:	e59f0204 	ldr	r0, [pc, #516]	; 10410 <g_sigOri_calcKalmanOrientation_bl+0x354>
   10208:	e3a01003 	mov	r1, #3
   1020c:	e3a02003 	mov	r2, #3
   10210:	ebfffc9d 	bl	f48c <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp_rg9f64,3,3);

//UPDATE
	//Innovation (update)
	g_sigMath_matrixSubtraktion_bl((double*) l_matrixInnovation_rg9f64,
   10214:	e24b30dc 	sub	r3, fp, #220	; 0xdc
   10218:	e59f21e8 	ldr	r2, [pc, #488]	; 10408 <g_sigOri_calcKalmanOrientation_bl+0x34c>
   1021c:	e58d2000 	str	r2, [sp]
   10220:	e3a02003 	mov	r2, #3
   10224:	e58d2004 	str	r2, [sp, #4]
   10228:	e3a02003 	mov	r2, #3
   1022c:	e58d2008 	str	r2, [sp, #8]
   10230:	e1a00003 	mov	r0, r3
   10234:	e59f11c4 	ldr	r1, [pc, #452]	; 10400 <g_sigOri_calcKalmanOrientation_bl+0x344>
   10238:	e3a02003 	mov	r2, #3
   1023c:	e3a03003 	mov	r3, #3
   10240:	ebfffa03 	bl	ea54 <g_sigMath_matrixSubtraktion_bl>
		(double*) m_sigOri_matrixXnew_rg9f64,3,3, 
		(double*) m_sigOri_matrixXk_rg9f64,3,3);

	//Innovation covariance (update)
	g_sigMath_matrixAddition_bl((double*) m_sigOri_matrixS_rg9f64,
   10244:	e59f31c8 	ldr	r3, [pc, #456]	; 10414 <g_sigOri_calcKalmanOrientation_bl+0x358>
   10248:	e58d3000 	str	r3, [sp]
   1024c:	e3a03003 	mov	r3, #3
   10250:	e58d3004 	str	r3, [sp, #4]
   10254:	e3a03003 	mov	r3, #3
   10258:	e58d3008 	str	r3, [sp, #8]
   1025c:	e59f01b4 	ldr	r0, [pc, #436]	; 10418 <g_sigOri_calcKalmanOrientation_bl+0x35c>
   10260:	e59f11a8 	ldr	r1, [pc, #424]	; 10410 <g_sigOri_calcKalmanOrientation_bl+0x354>
   10264:	e3a02003 	mov	r2, #3
   10268:	e3a03003 	mov	r3, #3
   1026c:	ebfff9ad 	bl	e928 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixPk_rg9f64, 3,3, 
		(double*) m_sigOri_matrixR_rg9f64,3,3);

	//Kalman Gain calculation (update)
	g_sigMath_matrixInverse_bl((double*) l_matrixTemp_rg9f64,
   10270:	e24b304c 	sub	r3, fp, #76	; 0x4c
   10274:	e1a00003 	mov	r0, r3
   10278:	e59f1198 	ldr	r1, [pc, #408]	; 10418 <g_sigOri_calcKalmanOrientation_bl+0x35c>
   1027c:	e3a02003 	mov	r2, #3
   10280:	e3a03003 	mov	r3, #3
   10284:	ebfffa72 	bl	ec54 <g_sigMath_matrixInverse_bl>
		(double*) m_sigOri_matrixS_rg9f64,3,3);
	g_sigMath_matrixMultiplikation_bl(
   10288:	e24b304c 	sub	r3, fp, #76	; 0x4c
   1028c:	e58d3000 	str	r3, [sp]
   10290:	e3a03003 	mov	r3, #3
   10294:	e58d3004 	str	r3, [sp, #4]
   10298:	e3a03003 	mov	r3, #3
   1029c:	e58d3008 	str	r3, [sp, #8]
   102a0:	e59f0174 	ldr	r0, [pc, #372]	; 1041c <g_sigOri_calcKalmanOrientation_bl+0x360>
   102a4:	e59f1164 	ldr	r1, [pc, #356]	; 10410 <g_sigOri_calcKalmanOrientation_bl+0x354>
   102a8:	e3a02003 	mov	r2, #3
   102ac:	e3a03003 	mov	r3, #3
   102b0:	ebfff93f 	bl	e7b4 <g_sigMath_matrixMultiplikation_bl>
		(double*) m_sigOri_matrixK_rg9f64, 
		(double*) m_sigOri_matrixPk_rg9f64,3,3,
		(double*) l_matrixTemp_rg9f64,3,3);

	//State estimation (update)
	g_sigMath_matrixMultiplikation_bl(
   102b4:	e24b304c 	sub	r3, fp, #76	; 0x4c
   102b8:	e24b20dc 	sub	r2, fp, #220	; 0xdc
   102bc:	e58d2000 	str	r2, [sp]
   102c0:	e3a02003 	mov	r2, #3
   102c4:	e58d2004 	str	r2, [sp, #4]
   102c8:	e3a02003 	mov	r2, #3
   102cc:	e58d2008 	str	r2, [sp, #8]
   102d0:	e1a00003 	mov	r0, r3
   102d4:	e59f1140 	ldr	r1, [pc, #320]	; 1041c <g_sigOri_calcKalmanOrientation_bl+0x360>
   102d8:	e3a02003 	mov	r2, #3
   102dc:	e3a03003 	mov	r3, #3
   102e0:	ebfff933 	bl	e7b4 <g_sigMath_matrixMultiplikation_bl>
		(double*) l_matrixTemp_rg9f64, 
		(double*) m_sigOri_matrixK_rg9f64,3,3,
		(double*) l_matrixInnovation_rg9f64,3,3);
	g_sigMath_matrixAddition_bl((double*) l_matrixTemp2_rg9f64,
   102e4:	e24b3094 	sub	r3, fp, #148	; 0x94
   102e8:	e24b204c 	sub	r2, fp, #76	; 0x4c
   102ec:	e58d2000 	str	r2, [sp]
   102f0:	e3a02003 	mov	r2, #3
   102f4:	e58d2004 	str	r2, [sp, #4]
   102f8:	e3a02003 	mov	r2, #3
   102fc:	e58d2008 	str	r2, [sp, #8]
   10300:	e1a00003 	mov	r0, r3
   10304:	e59f10fc 	ldr	r1, [pc, #252]	; 10408 <g_sigOri_calcKalmanOrientation_bl+0x34c>
   10308:	e3a02003 	mov	r2, #3
   1030c:	e3a03003 	mov	r3, #3
   10310:	ebfff984 	bl	e928 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixXk_rg9f64, 3,3, 
		(double*) l_matrixTemp_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixXk_rg9f64,3,3,
   10314:	e24b3094 	sub	r3, fp, #148	; 0x94
   10318:	e3a02003 	mov	r2, #3
   1031c:	e58d2000 	str	r2, [sp]
   10320:	e3a02003 	mov	r2, #3
   10324:	e58d2004 	str	r2, [sp, #4]
   10328:	e59f00d8 	ldr	r0, [pc, #216]	; 10408 <g_sigOri_calcKalmanOrientation_bl+0x34c>
   1032c:	e3a01003 	mov	r1, #3
   10330:	e3a02003 	mov	r2, #3
   10334:	ebfffc54 	bl	f48c <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp2_rg9f64,3,3);

	//Covariance estimation (update)
	g_sigMath_matrixSubtraktion_bl((double*) l_matrixTemp_rg9f64,
   10338:	e24b304c 	sub	r3, fp, #76	; 0x4c
   1033c:	e59f20d8 	ldr	r2, [pc, #216]	; 1041c <g_sigOri_calcKalmanOrientation_bl+0x360>
   10340:	e58d2000 	str	r2, [sp]
   10344:	e3a02003 	mov	r2, #3
   10348:	e58d2004 	str	r2, [sp, #4]
   1034c:	e3a02003 	mov	r2, #3
   10350:	e58d2008 	str	r2, [sp, #8]
   10354:	e1a00003 	mov	r0, r3
   10358:	e59f10c0 	ldr	r1, [pc, #192]	; 10420 <g_sigOri_calcKalmanOrientation_bl+0x364>
   1035c:	e3a02003 	mov	r2, #3
   10360:	e3a03003 	mov	r3, #3
   10364:	ebfff9ba 	bl	ea54 <g_sigMath_matrixSubtraktion_bl>
		(double*) m_sigOri_matrixI_rg9f64,3,3, 
		(double*) m_sigOri_matrixK_rg9f64,3,3);
	g_sigMath_matrixMultiplikation_bl(
   10368:	e24b2094 	sub	r2, fp, #148	; 0x94
   1036c:	e24b304c 	sub	r3, fp, #76	; 0x4c
   10370:	e59f1098 	ldr	r1, [pc, #152]	; 10410 <g_sigOri_calcKalmanOrientation_bl+0x354>
   10374:	e58d1000 	str	r1, [sp]
   10378:	e3a01003 	mov	r1, #3
   1037c:	e58d1004 	str	r1, [sp, #4]
   10380:	e3a01003 	mov	r1, #3
   10384:	e58d1008 	str	r1, [sp, #8]
   10388:	e1a00002 	mov	r0, r2
   1038c:	e1a01003 	mov	r1, r3
   10390:	e3a02003 	mov	r2, #3
   10394:	e3a03003 	mov	r3, #3
   10398:	ebfff905 	bl	e7b4 <g_sigMath_matrixMultiplikation_bl>
		(double*) l_matrixTemp2_rg9f64, 
		(double*) l_matrixTemp_rg9f64,3,3,
		(double*) m_sigOri_matrixPk_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixPk_rg9f64,3,3,
   1039c:	e24b3094 	sub	r3, fp, #148	; 0x94
   103a0:	e3a02003 	mov	r2, #3
   103a4:	e58d2000 	str	r2, [sp]
   103a8:	e3a02003 	mov	r2, #3
   103ac:	e58d2004 	str	r2, [sp, #4]
   103b0:	e59f0058 	ldr	r0, [pc, #88]	; 10410 <g_sigOri_calcKalmanOrientation_bl+0x354>
   103b4:	e3a01003 	mov	r1, #3
   103b8:	e3a02003 	mov	r2, #3
   103bc:	ebfffc32 	bl	f48c <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp2_rg9f64,3,3);

//set calculate within this module global
	m_sigOri_arrayOutputAnglesKalman_st.roll_f64=m_sigOri_matrixXk_rg9f64[0][0];
   103c0:	e59f3040 	ldr	r3, [pc, #64]	; 10408 <g_sigOri_calcKalmanOrientation_bl+0x34c>
   103c4:	e1c320d0 	ldrd	r2, [r3]
   103c8:	e59f1054 	ldr	r1, [pc, #84]	; 10424 <g_sigOri_calcKalmanOrientation_bl+0x368>
   103cc:	e1c120f0 	strd	r2, [r1]
	m_sigOri_arrayOutputAnglesKalman_st.pitch_f64=m_sigOri_matrixXk_rg9f64[1][1];
   103d0:	e59f3030 	ldr	r3, [pc, #48]	; 10408 <g_sigOri_calcKalmanOrientation_bl+0x34c>
   103d4:	e1c322d0 	ldrd	r2, [r3, #32]
   103d8:	e59f1044 	ldr	r1, [pc, #68]	; 10424 <g_sigOri_calcKalmanOrientation_bl+0x368>
   103dc:	e1c120f8 	strd	r2, [r1, #8]
	m_sigOri_arrayOutputAnglesKalman_st.yaw_f64=m_sigOri_matrixXk_rg9f64[2][2];
   103e0:	e59f3020 	ldr	r3, [pc, #32]	; 10408 <g_sigOri_calcKalmanOrientation_bl+0x34c>
   103e4:	e1c324d0 	ldrd	r2, [r3, #64]	; 0x40
   103e8:	e59f1034 	ldr	r1, [pc, #52]	; 10424 <g_sigOri_calcKalmanOrientation_bl+0x368>
   103ec:	e1c121f0 	strd	r2, [r1, #16]
}
   103f0:	e24bd004 	sub	sp, fp, #4
   103f4:	e8bd8800 	pop	{fp, pc}
   103f8:	00019ad8 	.word	0x00019ad8
   103fc:	00019af0 	.word	0x00019af0
   10400:	00019bb0 	.word	0x00019bb0
   10404:	00019bf8 	.word	0x00019bf8
   10408:	00019b68 	.word	0x00019b68
   1040c:	00019d18 	.word	0x00019d18
   10410:	00019c88 	.word	0x00019c88
   10414:	00019cd0 	.word	0x00019cd0
   10418:	00019d60 	.word	0x00019d60
   1041c:	00019da8 	.word	0x00019da8
   10420:	00019c40 	.word	0x00019c40
   10424:	00019b08 	.word	0x00019b08

00010428 <g_sigOri_calcComplementaryOrientation_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigOri_calcComplementaryOrientation_bl()
{
   10428:	e92d4800 	push	{fp, lr}
   1042c:	e28db004 	add	fp, sp, #4
	//read new data from the IMU
	m_sigOri_getImuData_bl();
   10430:	ebfffdb1 	bl	fafc <m_sigOri_getImuData_bl>
	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesComplementary_st=m_sigOri_calcAccMagAngle_st();
   10434:	ebfffdc2 	bl	fb44 <m_sigOri_calcAccMagAngle_st>
   10438:	eeb05b40 	vmov.f64	d5, d0
   1043c:	eeb06b41 	vmov.f64	d6, d1
   10440:	eeb07b42 	vmov.f64	d7, d2
   10444:	e59f30e4 	ldr	r3, [pc, #228]	; 10530 <g_sigOri_calcComplementaryOrientation_bl+0x108>
   10448:	ed835b00 	vstr	d5, [r3]
   1044c:	ed836b02 	vstr	d6, [r3, #8]
   10450:	ed837b04 	vstr	d7, [r3, #16]
	m_sigOri_arrayGyroAnglesComplementary_st=m_sigOri_calcGyroAnglePerStep_st();
   10454:	ebfffe95 	bl	feb0 <m_sigOri_calcGyroAnglePerStep_st>
   10458:	eeb05b40 	vmov.f64	d5, d0
   1045c:	eeb06b41 	vmov.f64	d6, d1
   10460:	eeb07b42 	vmov.f64	d7, d2
   10464:	e59f30c8 	ldr	r3, [pc, #200]	; 10534 <g_sigOri_calcComplementaryOrientation_bl+0x10c>
   10468:	ed835b00 	vstr	d5, [r3]
   1046c:	ed836b02 	vstr	d6, [r3, #8]
   10470:	ed837b04 	vstr	d7, [r3, #16]

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
   10474:	e59f30bc 	ldr	r3, [pc, #188]	; 10538 <g_sigOri_calcComplementaryOrientation_bl+0x110>
   10478:	ed936b02 	vldr	d6, [r3, #8]
   1047c:	e59f30b0 	ldr	r3, [pc, #176]	; 10534 <g_sigOri_calcComplementaryOrientation_bl+0x10c>
   10480:	ed937b02 	vldr	d7, [r3, #8]
   10484:	ee366b07 	vadd.f64	d6, d6, d7
   10488:	ed9f7b24 	vldr	d7, [pc, #144]	; 10520 <g_sigOri_calcComplementaryOrientation_bl+0xf8>
   1048c:	ee266b07 	vmul.f64	d6, d6, d7
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;
   10490:	e59f3098 	ldr	r3, [pc, #152]	; 10530 <g_sigOri_calcComplementaryOrientation_bl+0x108>
   10494:	ed935b02 	vldr	d5, [r3, #8]
   10498:	ed9f7b22 	vldr	d7, [pc, #136]	; 10528 <g_sigOri_calcComplementaryOrientation_bl+0x100>
   1049c:	ee257b07 	vmul.f64	d7, d5, d7
	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesComplementary_st=m_sigOri_calcAccMagAngle_st();
	m_sigOri_arrayGyroAnglesComplementary_st=m_sigOri_calcGyroAnglePerStep_st();

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
   104a0:	ee367b07 	vadd.f64	d7, d6, d7
	m_sigOri_getImuData_bl();
	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesComplementary_st=m_sigOri_calcAccMagAngle_st();
	m_sigOri_arrayGyroAnglesComplementary_st=m_sigOri_calcGyroAnglePerStep_st();

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
   104a4:	e59f308c 	ldr	r3, [pc, #140]	; 10538 <g_sigOri_calcComplementaryOrientation_bl+0x110>
   104a8:	ed837b02 	vstr	d7, [r3, #8]
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
   104ac:	e59f3084 	ldr	r3, [pc, #132]	; 10538 <g_sigOri_calcComplementaryOrientation_bl+0x110>
   104b0:	ed936b00 	vldr	d6, [r3]
   104b4:	e59f3078 	ldr	r3, [pc, #120]	; 10534 <g_sigOri_calcComplementaryOrientation_bl+0x10c>
   104b8:	ed937b00 	vldr	d7, [r3]
   104bc:	ee366b07 	vadd.f64	d6, d6, d7
   104c0:	ed9f7b16 	vldr	d7, [pc, #88]	; 10520 <g_sigOri_calcComplementaryOrientation_bl+0xf8>
   104c4:	ee266b07 	vmul.f64	d6, d6, d7
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;
   104c8:	e59f3060 	ldr	r3, [pc, #96]	; 10530 <g_sigOri_calcComplementaryOrientation_bl+0x108>
   104cc:	ed935b00 	vldr	d5, [r3]
   104d0:	ed9f7b14 	vldr	d7, [pc, #80]	; 10528 <g_sigOri_calcComplementaryOrientation_bl+0x100>
   104d4:	ee257b07 	vmul.f64	d7, d5, d7
	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
   104d8:	ee367b07 	vadd.f64	d7, d6, d7

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
   104dc:	e59f3054 	ldr	r3, [pc, #84]	; 10538 <g_sigOri_calcComplementaryOrientation_bl+0x110>
   104e0:	ed837b00 	vstr	d7, [r3]
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64=
		M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64+m_sigOri_arrayGyroAnglesComplementary_st.yaw_f64) +
   104e4:	e59f304c 	ldr	r3, [pc, #76]	; 10538 <g_sigOri_calcComplementaryOrientation_bl+0x110>
   104e8:	ed936b04 	vldr	d6, [r3, #16]
   104ec:	e59f3040 	ldr	r3, [pc, #64]	; 10534 <g_sigOri_calcComplementaryOrientation_bl+0x10c>
   104f0:	ed937b04 	vldr	d7, [r3, #16]
   104f4:	ee366b07 	vadd.f64	d6, d6, d7
   104f8:	ed9f7b08 	vldr	d7, [pc, #32]	; 10520 <g_sigOri_calcComplementaryOrientation_bl+0xf8>
   104fc:	ee266b07 	vmul.f64	d6, d6, d7
		(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.yaw_f64;
   10500:	e59f3028 	ldr	r3, [pc, #40]	; 10530 <g_sigOri_calcComplementaryOrientation_bl+0x108>
   10504:	ed935b04 	vldr	d5, [r3, #16]
   10508:	ed9f7b06 	vldr	d7, [pc, #24]	; 10528 <g_sigOri_calcComplementaryOrientation_bl+0x100>
   1050c:	ee257b07 	vmul.f64	d7, d5, d7
	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64=
		M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64+m_sigOri_arrayGyroAnglesComplementary_st.yaw_f64) +
   10510:	ee367b07 	vadd.f64	d7, d6, d7

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64=
   10514:	e59f301c 	ldr	r3, [pc, #28]	; 10538 <g_sigOri_calcComplementaryOrientation_bl+0x110>
   10518:	ed837b04 	vstr	d7, [r3, #16]
		M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64+m_sigOri_arrayGyroAnglesComplementary_st.yaw_f64) +
		(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.yaw_f64;
}
   1051c:	e8bd8800 	pop	{fp, pc}
   10520:	f9db22d1 	.word	0xf9db22d1
   10524:	3fec6a7e 	.word	0x3fec6a7e
   10528:	3126e978 	.word	0x3126e978
   1052c:	3fbcac08 	.word	0x3fbcac08
   10530:	00019b20 	.word	0x00019b20
   10534:	00019b38 	.word	0x00019b38
   10538:	00019b50 	.word	0x00019b50

0001053c <g_sigOri_getAnglesAccMagCalc_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles g_sigOri_getAnglesAccMagCalc_bl()
{
   1053c:	e92d4830 	push	{r4, r5, fp, lr}
   10540:	e28db00c 	add	fp, sp, #12
   10544:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_sigOri_arrayOutputAnglesAccMagCalc_st;
   10548:	e59f3040 	ldr	r3, [pc, #64]	; 10590 <g_sigOri_getAnglesAccMagCalc_bl+0x54>
   1054c:	e24bc024 	sub	ip, fp, #36	; 0x24
   10550:	e1a0e003 	mov	lr, r3
   10554:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   10558:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   1055c:	e89e0003 	ldm	lr, {r0, r1}
   10560:	e88c0003 	stm	ip, {r0, r1}
   10564:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
   10568:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
   1056c:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
   10570:	ec454b15 	vmov	d5, r4, r5
   10574:	ec410b16 	vmov	d6, r0, r1
   10578:	ec432b17 	vmov	d7, r2, r3
}
   1057c:	eeb00b45 	vmov.f64	d0, d5
   10580:	eeb01b46 	vmov.f64	d1, d6
   10584:	eeb02b47 	vmov.f64	d2, d7
   10588:	e24bd00c 	sub	sp, fp, #12
   1058c:	e8bd8830 	pop	{r4, r5, fp, pc}
   10590:	00019ac0 	.word	0x00019ac0

00010594 <g_sigOri_getAnglesGyroPerStep_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles g_sigOri_getAnglesGyroPerStep_bl()
{
   10594:	e92d4830 	push	{r4, r5, fp, lr}
   10598:	e28db00c 	add	fp, sp, #12
   1059c:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_sigOri_arrayOutputAnglesGyroPerStep_st;
   105a0:	e59f3040 	ldr	r3, [pc, #64]	; 105e8 <g_sigOri_getAnglesGyroPerStep_bl+0x54>
   105a4:	e24bc024 	sub	ip, fp, #36	; 0x24
   105a8:	e1a0e003 	mov	lr, r3
   105ac:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   105b0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   105b4:	e89e0003 	ldm	lr, {r0, r1}
   105b8:	e88c0003 	stm	ip, {r0, r1}
   105bc:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
   105c0:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
   105c4:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
   105c8:	ec454b15 	vmov	d5, r4, r5
   105cc:	ec410b16 	vmov	d6, r0, r1
   105d0:	ec432b17 	vmov	d7, r2, r3
}
   105d4:	eeb00b45 	vmov.f64	d0, d5
   105d8:	eeb01b46 	vmov.f64	d1, d6
   105dc:	eeb02b47 	vmov.f64	d2, d7
   105e0:	e24bd00c 	sub	sp, fp, #12
   105e4:	e8bd8830 	pop	{r4, r5, fp, pc}
   105e8:	00019aa8 	.word	0x00019aa8
   105ec:	e1a00000 	nop			; (mov r0, r0)

000105f0 <g_sigFil_getImuValuesUnfiltered_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halImu_orientationValues g_sigFil_getImuValuesUnfiltered_st()
{
   105f0:	e92d4800 	push	{fp, lr}
   105f4:	e28db004 	add	fp, sp, #4
   105f8:	e24dd008 	sub	sp, sp, #8
   105fc:	e50b0008 	str	r0, [fp, #-8]
	return m_sigFil_imuValues_st;
   10600:	e51b2008 	ldr	r2, [fp, #-8]
   10604:	e59f3024 	ldr	r3, [pc, #36]	; 10630 <g_sigFil_getImuValuesUnfiltered_st+0x40>
   10608:	e1a01002 	mov	r1, r2
   1060c:	e1a02003 	mov	r2, r3
   10610:	e3a03060 	mov	r3, #96	; 0x60
   10614:	e1a00001 	mov	r0, r1
   10618:	e1a01002 	mov	r1, r2
   1061c:	e1a02003 	mov	r2, r3
   10620:	ebffe124 	bl	8ab8 <_init+0x140>
}
   10624:	e51b0008 	ldr	r0, [fp, #-8]
   10628:	e24bd004 	sub	sp, fp, #4
   1062c:	e8bd8800 	pop	{fp, pc}
   10630:	00019df8 	.word	0x00019df8

00010634 <m_sigFil_offsetCorrectionGyro_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles m_sigFil_offsetCorrectionGyro_st()
{
   10634:	e92d4830 	push	{r4, r5, fp, lr}
   10638:	e28db00c 	add	fp, sp, #12
   1063c:	e24dd0b0 	sub	sp, sp, #176	; 0xb0
	int i=0;
   10640:	e3a03000 	mov	r3, #0
   10644:	e50b3010 	str	r3, [fp, #-16]
	sigOri_orientationAngles l_measuredGyroValue_st={0,0,0};
   10648:	e3a02000 	mov	r2, #0
   1064c:	e3a03000 	mov	r3, #0
   10650:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
   10654:	e3a02000 	mov	r2, #0
   10658:	e3a03000 	mov	r3, #0
   1065c:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4
   10660:	e3a02000 	mov	r2, #0
   10664:	e3a03000 	mov	r3, #0
   10668:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	halImu_orientationValues l_sigFil_imuValues_st;

	for(i=0;i<M_NR_OF_VALUES_FOR_OFFSET_UI8;i++)
   1066c:	e3a03000 	mov	r3, #0
   10670:	e50b3010 	str	r3, [fp, #-16]
   10674:	ea000012 	b	106c4 <m_sigFil_offsetCorrectionGyro_st+0x90>
	{
		g_halImu_triggerImuReading_bl();
   10678:	ebfff22d 	bl	cf34 <g_halImu_triggerImuReading_bl>
		l_sigFil_imuValues_st = g_halImu_getImuValues_str();
   1067c:	e24b30a4 	sub	r3, fp, #164	; 0xa4
   10680:	e1a00003 	mov	r0, r3
   10684:	ebfff1ac 	bl	cd3c <g_halImu_getImuValues_str>

		l_measuredGyroValue_st.roll_f64+=l_sigFil_imuValues_st.gyro.roll_f64;
   10688:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
   1068c:	ed1b7b1b 	vldr	d7, [fp, #-108]	; 0xffffff94
   10690:	ee367b07 	vadd.f64	d7, d6, d7
   10694:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc
		l_measuredGyroValue_st.pitch_f64+=l_sigFil_imuValues_st.gyro.pitch_f64;
   10698:	ed1b6b0f 	vldr	d6, [fp, #-60]	; 0xffffffc4
   1069c:	ed1b7b19 	vldr	d7, [fp, #-100]	; 0xffffff9c
   106a0:	ee367b07 	vadd.f64	d7, d6, d7
   106a4:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
		l_measuredGyroValue_st.yaw_f64+=l_sigFil_imuValues_st.gyro.yaw_f64;
   106a8:	ed1b6b0d 	vldr	d6, [fp, #-52]	; 0xffffffcc
   106ac:	ed1b7b17 	vldr	d7, [fp, #-92]	; 0xffffffa4
   106b0:	ee367b07 	vadd.f64	d7, d6, d7
   106b4:	ed0b7b0d 	vstr	d7, [fp, #-52]	; 0xffffffcc
{
	int i=0;
	sigOri_orientationAngles l_measuredGyroValue_st={0,0,0};
	halImu_orientationValues l_sigFil_imuValues_st;

	for(i=0;i<M_NR_OF_VALUES_FOR_OFFSET_UI8;i++)
   106b8:	e51b3010 	ldr	r3, [fp, #-16]
   106bc:	e2833001 	add	r3, r3, #1
   106c0:	e50b3010 	str	r3, [fp, #-16]
   106c4:	e51b3010 	ldr	r3, [fp, #-16]
   106c8:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   106cc:	baffffe9 	blt	10678 <m_sigFil_offsetCorrectionGyro_st+0x44>
		l_measuredGyroValue_st.roll_f64+=l_sigFil_imuValues_st.gyro.roll_f64;
		l_measuredGyroValue_st.pitch_f64+=l_sigFil_imuValues_st.gyro.pitch_f64;
		l_measuredGyroValue_st.yaw_f64+=l_sigFil_imuValues_st.gyro.yaw_f64;
	}

	l_measuredGyroValue_st.roll_f64=l_measuredGyroValue_st.roll_f64/M_NR_OF_VALUES_FOR_OFFSET_UI8;
   106d0:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
   106d4:	ed9f7b1b 	vldr	d7, [pc, #108]	; 10748 <m_sigFil_offsetCorrectionGyro_st+0x114>
   106d8:	ee867b07 	vdiv.f64	d7, d6, d7
   106dc:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc
	l_measuredGyroValue_st.pitch_f64=l_measuredGyroValue_st.pitch_f64/M_NR_OF_VALUES_FOR_OFFSET_UI8;
   106e0:	ed1b6b0f 	vldr	d6, [fp, #-60]	; 0xffffffc4
   106e4:	ed9f7b17 	vldr	d7, [pc, #92]	; 10748 <m_sigFil_offsetCorrectionGyro_st+0x114>
   106e8:	ee867b07 	vdiv.f64	d7, d6, d7
   106ec:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	l_measuredGyroValue_st.yaw_f64=l_measuredGyroValue_st.yaw_f64/M_NR_OF_VALUES_FOR_OFFSET_UI8;
   106f0:	ed1b6b0d 	vldr	d6, [fp, #-52]	; 0xffffffcc
   106f4:	ed9f7b13 	vldr	d7, [pc, #76]	; 10748 <m_sigFil_offsetCorrectionGyro_st+0x114>
   106f8:	ee867b07 	vdiv.f64	d7, d6, d7
   106fc:	ed0b7b0d 	vstr	d7, [fp, #-52]	; 0xffffffcc

	return l_measuredGyroValue_st;
   10700:	e24bc02c 	sub	ip, fp, #44	; 0x2c
   10704:	e24be044 	sub	lr, fp, #68	; 0x44
   10708:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   1070c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   10710:	e89e0003 	ldm	lr, {r0, r1}
   10714:	e88c0003 	stm	ip, {r0, r1}
   10718:	e14b42dc 	ldrd	r4, [fp, #-44]	; 0xffffffd4
   1071c:	e14b02d4 	ldrd	r0, [fp, #-36]	; 0xffffffdc
   10720:	e14b21dc 	ldrd	r2, [fp, #-28]	; 0xffffffe4
   10724:	ec454b15 	vmov	d5, r4, r5
   10728:	ec410b16 	vmov	d6, r0, r1
   1072c:	ec432b17 	vmov	d7, r2, r3
}
   10730:	eeb00b45 	vmov.f64	d0, d5
   10734:	eeb01b46 	vmov.f64	d1, d6
   10738:	eeb02b47 	vmov.f64	d2, d7
   1073c:	e24bd00c 	sub	sp, fp, #12
   10740:	e8bd8830 	pop	{r4, r5, fp, pc}
   10744:	e1a00000 	nop			; (mov r0, r0)
   10748:	00000000 	.word	0x00000000
   1074c:	408f4000 	.word	0x408f4000

00010750 <g_SigFil_initImuSensors_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_SigFil_initImuSensors_bl()
{
   10750:	e92d4800 	push	{fp, lr}
   10754:	e28db004 	add	fp, sp, #4
   10758:	e24dd008 	sub	sp, sp, #8
	unsigned int l_initState_bl;

	l_initState_bl = g_halImu_initImuSensors_bl();
   1075c:	ebfff187 	bl	cd80 <g_halImu_initImuSensors_bl>
   10760:	e50b0008 	str	r0, [fp, #-8]
	m_offsetGyro_st=m_sigFil_offsetCorrectionGyro_st();
   10764:	ebffffb2 	bl	10634 <m_sigFil_offsetCorrectionGyro_st>
   10768:	eeb05b40 	vmov.f64	d5, d0
   1076c:	eeb06b41 	vmov.f64	d6, d1
   10770:	eeb07b42 	vmov.f64	d7, d2
   10774:	e59f3018 	ldr	r3, [pc, #24]	; 10794 <g_SigFil_initImuSensors_bl+0x44>
   10778:	ed835b00 	vstr	d5, [r3]
   1077c:	ed836b02 	vstr	d6, [r3, #8]
   10780:	ed837b04 	vstr	d7, [r3, #16]

	return l_initState_bl;
   10784:	e51b3008 	ldr	r3, [fp, #-8]
}
   10788:	e1a00003 	mov	r0, r3
   1078c:	e24bd004 	sub	sp, fp, #4
   10790:	e8bd8800 	pop	{fp, pc}
   10794:	00019e58 	.word	0x00019e58

00010798 <g_sigFil_readImuData_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigFil_readImuData_bl()
{
   10798:	e92d4810 	push	{r4, fp, lr}
   1079c:	e28db008 	add	fp, sp, #8
   107a0:	e24dd064 	sub	sp, sp, #100	; 0x64
	g_halImu_triggerImuReading_bl();
   107a4:	ebfff1e2 	bl	cf34 <g_halImu_triggerImuReading_bl>
	m_sigFil_imuValues_st = g_halImu_getImuValues_str();
   107a8:	e59f40e8 	ldr	r4, [pc, #232]	; 10898 <g_sigFil_readImuData_bl+0x100>
   107ac:	e24b306c 	sub	r3, fp, #108	; 0x6c
   107b0:	e1a00003 	mov	r0, r3
   107b4:	ebfff160 	bl	cd3c <g_halImu_getImuValues_str>
   107b8:	e1a01004 	mov	r1, r4
   107bc:	e24b206c 	sub	r2, fp, #108	; 0x6c
   107c0:	e3a03060 	mov	r3, #96	; 0x60
   107c4:	e1a00001 	mov	r0, r1
   107c8:	e1a01002 	mov	r1, r2
   107cc:	e1a02003 	mov	r2, r3
   107d0:	ebffe0b8 	bl	8ab8 <_init+0x140>

	m_sigFil_imuValues_st.acc.z_f64=-m_sigFil_imuValues_st.acc.z_f64;
   107d4:	e59f30bc 	ldr	r3, [pc, #188]	; 10898 <g_sigFil_readImuData_bl+0x100>
   107d8:	ed937b06 	vldr	d7, [r3, #24]
   107dc:	eeb17b47 	vneg.f64	d7, d7
   107e0:	e59f30b0 	ldr	r3, [pc, #176]	; 10898 <g_sigFil_readImuData_bl+0x100>
   107e4:	ed837b06 	vstr	d7, [r3, #24]
	m_sigFil_imuValues_st.mag.x_f64=m_sigFil_imuValues_st.mag.x_f64*1000000;
   107e8:	e59f30a8 	ldr	r3, [pc, #168]	; 10898 <g_sigFil_readImuData_bl+0x100>
   107ec:	ed936b08 	vldr	d6, [r3, #32]
   107f0:	ed9f7b26 	vldr	d7, [pc, #152]	; 10890 <g_sigFil_readImuData_bl+0xf8>
   107f4:	ee267b07 	vmul.f64	d7, d6, d7
   107f8:	e59f3098 	ldr	r3, [pc, #152]	; 10898 <g_sigFil_readImuData_bl+0x100>
   107fc:	ed837b08 	vstr	d7, [r3, #32]
	m_sigFil_imuValues_st.mag.y_f64=m_sigFil_imuValues_st.mag.y_f64*1000000;
   10800:	e59f3090 	ldr	r3, [pc, #144]	; 10898 <g_sigFil_readImuData_bl+0x100>
   10804:	ed936b0a 	vldr	d6, [r3, #40]	; 0x28
   10808:	ed9f7b20 	vldr	d7, [pc, #128]	; 10890 <g_sigFil_readImuData_bl+0xf8>
   1080c:	ee267b07 	vmul.f64	d7, d6, d7
   10810:	e59f3080 	ldr	r3, [pc, #128]	; 10898 <g_sigFil_readImuData_bl+0x100>
   10814:	ed837b0a 	vstr	d7, [r3, #40]	; 0x28
	m_sigFil_imuValues_st.mag.z_f64=-m_sigFil_imuValues_st.mag.z_f64*1000000;
   10818:	e59f3078 	ldr	r3, [pc, #120]	; 10898 <g_sigFil_readImuData_bl+0x100>
   1081c:	ed937b0c 	vldr	d7, [r3, #48]	; 0x30
   10820:	eeb16b47 	vneg.f64	d6, d7
   10824:	ed9f7b19 	vldr	d7, [pc, #100]	; 10890 <g_sigFil_readImuData_bl+0xf8>
   10828:	ee267b07 	vmul.f64	d7, d6, d7
   1082c:	e59f3064 	ldr	r3, [pc, #100]	; 10898 <g_sigFil_readImuData_bl+0x100>
   10830:	ed837b0c 	vstr	d7, [r3, #48]	; 0x30
	m_sigFil_imuValues_st.gyro.roll_f64=m_sigFil_imuValues_st.gyro.roll_f64-m_offsetGyro_st.roll_f64;
   10834:	e59f305c 	ldr	r3, [pc, #92]	; 10898 <g_sigFil_readImuData_bl+0x100>
   10838:	ed936b0e 	vldr	d6, [r3, #56]	; 0x38
   1083c:	e59f3058 	ldr	r3, [pc, #88]	; 1089c <g_sigFil_readImuData_bl+0x104>
   10840:	ed937b00 	vldr	d7, [r3]
   10844:	ee367b47 	vsub.f64	d7, d6, d7
   10848:	e59f3048 	ldr	r3, [pc, #72]	; 10898 <g_sigFil_readImuData_bl+0x100>
   1084c:	ed837b0e 	vstr	d7, [r3, #56]	; 0x38
	m_sigFil_imuValues_st.gyro.pitch_f64=m_sigFil_imuValues_st.gyro.pitch_f64-m_offsetGyro_st.pitch_f64;
   10850:	e59f3040 	ldr	r3, [pc, #64]	; 10898 <g_sigFil_readImuData_bl+0x100>
   10854:	ed936b10 	vldr	d6, [r3, #64]	; 0x40
   10858:	e59f303c 	ldr	r3, [pc, #60]	; 1089c <g_sigFil_readImuData_bl+0x104>
   1085c:	ed937b02 	vldr	d7, [r3, #8]
   10860:	ee367b47 	vsub.f64	d7, d6, d7
   10864:	e59f302c 	ldr	r3, [pc, #44]	; 10898 <g_sigFil_readImuData_bl+0x100>
   10868:	ed837b10 	vstr	d7, [r3, #64]	; 0x40
	m_sigFil_imuValues_st.gyro.yaw_f64=m_sigFil_imuValues_st.gyro.yaw_f64-m_offsetGyro_st.yaw_f64;
   1086c:	e59f3024 	ldr	r3, [pc, #36]	; 10898 <g_sigFil_readImuData_bl+0x100>
   10870:	ed936b12 	vldr	d6, [r3, #72]	; 0x48
   10874:	e59f3020 	ldr	r3, [pc, #32]	; 1089c <g_sigFil_readImuData_bl+0x104>
   10878:	ed937b04 	vldr	d7, [r3, #16]
   1087c:	ee367b47 	vsub.f64	d7, d6, d7
   10880:	e59f3010 	ldr	r3, [pc, #16]	; 10898 <g_sigFil_readImuData_bl+0x100>
   10884:	ed837b12 	vstr	d7, [r3, #72]	; 0x48

}
   10888:	e24bd008 	sub	sp, fp, #8
   1088c:	e8bd8810 	pop	{r4, fp, pc}
   10890:	00000000 	.word	0x00000000
   10894:	412e8480 	.word	0x412e8480
   10898:	00019df8 	.word	0x00019df8
   1089c:	00019e58 	.word	0x00019e58

000108a0 <__libc_csu_init>:
   108a0:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}
   108a4:	e1a06000 	mov	r6, r0
   108a8:	e59f5048 	ldr	r5, [pc, #72]	; 108f8 <__libc_csu_init+0x58>
   108ac:	e59fa048 	ldr	sl, [pc, #72]	; 108fc <__libc_csu_init+0x5c>
   108b0:	e08f5005 	add	r5, pc, r5
   108b4:	e08fa00a 	add	sl, pc, sl
   108b8:	e065a00a 	rsb	sl, r5, sl
   108bc:	e1a07001 	mov	r7, r1
   108c0:	e1a08002 	mov	r8, r2
   108c4:	ebffe02b 	bl	8978 <_init>
   108c8:	e1b0a14a 	asrs	sl, sl, #2
   108cc:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, sl, pc}
   108d0:	e3a04000 	mov	r4, #0
   108d4:	e4953004 	ldr	r3, [r5], #4
   108d8:	e1a00006 	mov	r0, r6
   108dc:	e1a01007 	mov	r1, r7
   108e0:	e1a02008 	mov	r2, r8
   108e4:	e2844001 	add	r4, r4, #1
   108e8:	e12fff33 	blx	r3
   108ec:	e154000a 	cmp	r4, sl
   108f0:	1afffff7 	bne	108d4 <__libc_csu_init+0x34>
   108f4:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, sl, pc}
   108f8:	0000884c 	.word	0x0000884c
   108fc:	0000884c 	.word	0x0000884c

00010900 <__libc_csu_fini>:
   10900:	e12fff1e 	bx	lr

Disassembly of section .fini:

00010904 <_fini>:
   10904:	e92d4008 	push	{r3, lr}
   10908:	e8bd8008 	pop	{r3, pc}
