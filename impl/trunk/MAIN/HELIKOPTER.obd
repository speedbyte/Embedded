
HELIKOPTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .interp       00000019  00008134  00008134  00000134  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.ABI-tag 00000020  00008150  00008150  00000150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  00008170  00008170  00000170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .hash         00000134  00008194  00008194  00000194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dynsym       00000260  000082c8  000082c8  000002c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynstr       00000194  00008528  00008528  00000528  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .gnu.version  0000004c  000086bc  000086bc  000006bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version_r 00000070  00008708  00008708  00000708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rel.dyn      00000008  00008778  00008778  00000778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rel.plt      00000110  00008780  00008780  00000780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .init         0000000c  00008890  00008890  00000890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .plt          000001ac  0000889c  0000889c  0000089c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text         00006ae4  00008a48  00008a48  00000a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .fini         00000008  0000f52c  0000f52c  0000752c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .rodata       000003ec  0000f534  0000f534  00007534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .ARM.exidx    00000008  0000f920  0000f920  00007920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame     00000004  0000f928  0000f928  00007928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .init_array   00000004  00010000  00010000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 18 .fini_array   00000004  00010004  00010004  00008004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 19 .jcr          00000004  00010008  00010008  00008008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 20 .dynamic      00000108  0001000c  0001000c  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .got          00000098  00010114  00010114  00008114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 22 .data         000000a4  000101b0  000101b0  000081b0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .bss          000006d0  00010258  00010258  00008254  2**3
                  ALLOC
 24 .comment      0000005b  00000000  00000000  00008254  2**0
                  CONTENTS, READONLY
 25 .ARM.attributes 00000031  00000000  00000000  000082af  2**0
                  CONTENTS, READONLY
 26 .debug_aranges 00000240  00000000  00000000  000082e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_info   00003548  00000000  00000000  00008520  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_abbrev 00000f38  00000000  00000000  0000ba68  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_line   00004972  00000000  00000000  0000c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .debug_frame  00000ea8  00000000  00000000  00011314  2**2
                  CONTENTS, READONLY, DEBUGGING
 31 .debug_str    00016f65  00000000  00000000  000121bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 32 .debug_macro  000077b1  00000000  00000000  00029121  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .init:

00008890 <_init>:
    8890:	e92d4008 	push	{r3, lr}
    8894:	eb00007a 	bl	8a84 <call_gmon_start>
    8898:	e8bd8008 	pop	{r3, pc}

Disassembly of section .plt:

0000889c <.plt>:
    889c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    88a0:	e59fe004 	ldr	lr, [pc, #4]	; 88ac <_init+0x1c>
    88a4:	e08fe00e 	add	lr, pc, lr
    88a8:	e5bef008 	ldr	pc, [lr, #8]!
    88ac:	00007868 	.word	0x00007868
    88b0:	e28fc600 	add	ip, pc, #0, 12
    88b4:	e28cca07 	add	ip, ip, #28672	; 0x7000
    88b8:	e5bcf868 	ldr	pc, [ip, #2152]!	; 0x868
    88bc:	e28fc600 	add	ip, pc, #0, 12
    88c0:	e28cca07 	add	ip, ip, #28672	; 0x7000
    88c4:	e5bcf860 	ldr	pc, [ip, #2144]!	; 0x860
    88c8:	e28fc600 	add	ip, pc, #0, 12
    88cc:	e28cca07 	add	ip, ip, #28672	; 0x7000
    88d0:	e5bcf858 	ldr	pc, [ip, #2136]!	; 0x858
    88d4:	e28fc600 	add	ip, pc, #0, 12
    88d8:	e28cca07 	add	ip, ip, #28672	; 0x7000
    88dc:	e5bcf850 	ldr	pc, [ip, #2128]!	; 0x850
    88e0:	e28fc600 	add	ip, pc, #0, 12
    88e4:	e28cca07 	add	ip, ip, #28672	; 0x7000
    88e8:	e5bcf848 	ldr	pc, [ip, #2120]!	; 0x848
    88ec:	e28fc600 	add	ip, pc, #0, 12
    88f0:	e28cca07 	add	ip, ip, #28672	; 0x7000
    88f4:	e5bcf840 	ldr	pc, [ip, #2112]!	; 0x840
    88f8:	e28fc600 	add	ip, pc, #0, 12
    88fc:	e28cca07 	add	ip, ip, #28672	; 0x7000
    8900:	e5bcf838 	ldr	pc, [ip, #2104]!	; 0x838
    8904:	e28fc600 	add	ip, pc, #0, 12
    8908:	e28cca07 	add	ip, ip, #28672	; 0x7000
    890c:	e5bcf830 	ldr	pc, [ip, #2096]!	; 0x830
    8910:	e28fc600 	add	ip, pc, #0, 12
    8914:	e28cca07 	add	ip, ip, #28672	; 0x7000
    8918:	e5bcf828 	ldr	pc, [ip, #2088]!	; 0x828
    891c:	e28fc600 	add	ip, pc, #0, 12
    8920:	e28cca07 	add	ip, ip, #28672	; 0x7000
    8924:	e5bcf820 	ldr	pc, [ip, #2080]!	; 0x820
    8928:	e28fc600 	add	ip, pc, #0, 12
    892c:	e28cca07 	add	ip, ip, #28672	; 0x7000
    8930:	e5bcf818 	ldr	pc, [ip, #2072]!	; 0x818
    8934:	e28fc600 	add	ip, pc, #0, 12
    8938:	e28cca07 	add	ip, ip, #28672	; 0x7000
    893c:	e5bcf810 	ldr	pc, [ip, #2064]!	; 0x810
    8940:	e28fc600 	add	ip, pc, #0, 12
    8944:	e28cca07 	add	ip, ip, #28672	; 0x7000
    8948:	e5bcf808 	ldr	pc, [ip, #2056]!	; 0x808
    894c:	e28fc600 	add	ip, pc, #0, 12
    8950:	e28cca07 	add	ip, ip, #28672	; 0x7000
    8954:	e5bcf800 	ldr	pc, [ip, #2048]!	; 0x800
    8958:	e28fc600 	add	ip, pc, #0, 12
    895c:	e28cca07 	add	ip, ip, #28672	; 0x7000
    8960:	e5bcf7f8 	ldr	pc, [ip, #2040]!	; 0x7f8
    8964:	e28fc600 	add	ip, pc, #0, 12
    8968:	e28cca07 	add	ip, ip, #28672	; 0x7000
    896c:	e5bcf7f0 	ldr	pc, [ip, #2032]!	; 0x7f0
    8970:	e28fc600 	add	ip, pc, #0, 12
    8974:	e28cca07 	add	ip, ip, #28672	; 0x7000
    8978:	e5bcf7e8 	ldr	pc, [ip, #2024]!	; 0x7e8
    897c:	e28fc600 	add	ip, pc, #0, 12
    8980:	e28cca07 	add	ip, ip, #28672	; 0x7000
    8984:	e5bcf7e0 	ldr	pc, [ip, #2016]!	; 0x7e0
    8988:	e28fc600 	add	ip, pc, #0, 12
    898c:	e28cca07 	add	ip, ip, #28672	; 0x7000
    8990:	e5bcf7d8 	ldr	pc, [ip, #2008]!	; 0x7d8
    8994:	e28fc600 	add	ip, pc, #0, 12
    8998:	e28cca07 	add	ip, ip, #28672	; 0x7000
    899c:	e5bcf7d0 	ldr	pc, [ip, #2000]!	; 0x7d0
    89a0:	e28fc600 	add	ip, pc, #0, 12
    89a4:	e28cca07 	add	ip, ip, #28672	; 0x7000
    89a8:	e5bcf7c8 	ldr	pc, [ip, #1992]!	; 0x7c8
    89ac:	e28fc600 	add	ip, pc, #0, 12
    89b0:	e28cca07 	add	ip, ip, #28672	; 0x7000
    89b4:	e5bcf7c0 	ldr	pc, [ip, #1984]!	; 0x7c0
    89b8:	e28fc600 	add	ip, pc, #0, 12
    89bc:	e28cca07 	add	ip, ip, #28672	; 0x7000
    89c0:	e5bcf7b8 	ldr	pc, [ip, #1976]!	; 0x7b8
    89c4:	e28fc600 	add	ip, pc, #0, 12
    89c8:	e28cca07 	add	ip, ip, #28672	; 0x7000
    89cc:	e5bcf7b0 	ldr	pc, [ip, #1968]!	; 0x7b0
    89d0:	e28fc600 	add	ip, pc, #0, 12
    89d4:	e28cca07 	add	ip, ip, #28672	; 0x7000
    89d8:	e5bcf7a8 	ldr	pc, [ip, #1960]!	; 0x7a8
    89dc:	e28fc600 	add	ip, pc, #0, 12
    89e0:	e28cca07 	add	ip, ip, #28672	; 0x7000
    89e4:	e5bcf7a0 	ldr	pc, [ip, #1952]!	; 0x7a0
    89e8:	e28fc600 	add	ip, pc, #0, 12
    89ec:	e28cca07 	add	ip, ip, #28672	; 0x7000
    89f0:	e5bcf798 	ldr	pc, [ip, #1944]!	; 0x798
    89f4:	e28fc600 	add	ip, pc, #0, 12
    89f8:	e28cca07 	add	ip, ip, #28672	; 0x7000
    89fc:	e5bcf790 	ldr	pc, [ip, #1936]!	; 0x790
    8a00:	e28fc600 	add	ip, pc, #0, 12
    8a04:	e28cca07 	add	ip, ip, #28672	; 0x7000
    8a08:	e5bcf788 	ldr	pc, [ip, #1928]!	; 0x788
    8a0c:	e28fc600 	add	ip, pc, #0, 12
    8a10:	e28cca07 	add	ip, ip, #28672	; 0x7000
    8a14:	e5bcf780 	ldr	pc, [ip, #1920]!	; 0x780
    8a18:	e28fc600 	add	ip, pc, #0, 12
    8a1c:	e28cca07 	add	ip, ip, #28672	; 0x7000
    8a20:	e5bcf778 	ldr	pc, [ip, #1912]!	; 0x778
    8a24:	e28fc600 	add	ip, pc, #0, 12
    8a28:	e28cca07 	add	ip, ip, #28672	; 0x7000
    8a2c:	e5bcf770 	ldr	pc, [ip, #1904]!	; 0x770
    8a30:	e28fc600 	add	ip, pc, #0, 12
    8a34:	e28cca07 	add	ip, ip, #28672	; 0x7000
    8a38:	e5bcf768 	ldr	pc, [ip, #1896]!	; 0x768
    8a3c:	e28fc600 	add	ip, pc, #0, 12
    8a40:	e28cca07 	add	ip, ip, #28672	; 0x7000
    8a44:	e5bcf760 	ldr	pc, [ip, #1888]!	; 0x760

Disassembly of section .text:

00008a48 <_start>:
    8a48:	e3a0b000 	mov	fp, #0
    8a4c:	e3a0e000 	mov	lr, #0
    8a50:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    8a54:	e1a0200d 	mov	r2, sp
    8a58:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
    8a5c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    8a60:	e59fc010 	ldr	ip, [pc, #16]	; 8a78 <_start+0x30>
    8a64:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
    8a68:	e59f000c 	ldr	r0, [pc, #12]	; 8a7c <_start+0x34>
    8a6c:	e59f300c 	ldr	r3, [pc, #12]	; 8a80 <_start+0x38>
    8a70:	ebffff97 	bl	88d4 <_init+0x44>
    8a74:	ebffff90 	bl	88bc <_init+0x2c>
    8a78:	0000f528 	.word	0x0000f528
    8a7c:	00008b70 	.word	0x00008b70
    8a80:	0000f4c8 	.word	0x0000f4c8

00008a84 <call_gmon_start>:
    8a84:	e59f3014 	ldr	r3, [pc, #20]	; 8aa0 <call_gmon_start+0x1c>
    8a88:	e59f2014 	ldr	r2, [pc, #20]	; 8aa4 <call_gmon_start+0x20>
    8a8c:	e08f3003 	add	r3, pc, r3
    8a90:	e7933002 	ldr	r3, [r3, r2]
    8a94:	e3530000 	cmp	r3, #0
    8a98:	012fff1e 	bxeq	lr
    8a9c:	eaffff8f 	b	88e0 <_init+0x50>
    8aa0:	00007680 	.word	0x00007680
    8aa4:	00000094 	.word	0x00000094

00008aa8 <deregister_tm_clones>:
    8aa8:	e59f301c 	ldr	r3, [pc, #28]	; 8acc <deregister_tm_clones+0x24>
    8aac:	e59f001c 	ldr	r0, [pc, #28]	; 8ad0 <deregister_tm_clones+0x28>
    8ab0:	e0603003 	rsb	r3, r0, r3
    8ab4:	e3530006 	cmp	r3, #6
    8ab8:	912fff1e 	bxls	lr
    8abc:	e59f3010 	ldr	r3, [pc, #16]	; 8ad4 <deregister_tm_clones+0x2c>
    8ac0:	e3530000 	cmp	r3, #0
    8ac4:	012fff1e 	bxeq	lr
    8ac8:	e12fff13 	bx	r3
    8acc:	00010257 	.word	0x00010257
    8ad0:	00010254 	.word	0x00010254
    8ad4:	00000000 	.word	0x00000000

00008ad8 <register_tm_clones>:
    8ad8:	e59f3024 	ldr	r3, [pc, #36]	; 8b04 <register_tm_clones+0x2c>
    8adc:	e59f0024 	ldr	r0, [pc, #36]	; 8b08 <register_tm_clones+0x30>
    8ae0:	e0603003 	rsb	r3, r0, r3
    8ae4:	e1a03143 	asr	r3, r3, #2
    8ae8:	e0833fa3 	add	r3, r3, r3, lsr #31
    8aec:	e1b010c3 	asrs	r1, r3, #1
    8af0:	012fff1e 	bxeq	lr
    8af4:	e59f2010 	ldr	r2, [pc, #16]	; 8b0c <register_tm_clones+0x34>
    8af8:	e3520000 	cmp	r2, #0
    8afc:	012fff1e 	bxeq	lr
    8b00:	e12fff12 	bx	r2
    8b04:	00010254 	.word	0x00010254
    8b08:	00010254 	.word	0x00010254
    8b0c:	00000000 	.word	0x00000000

00008b10 <__do_global_dtors_aux>:
    8b10:	e92d4010 	push	{r4, lr}
    8b14:	e59f4018 	ldr	r4, [pc, #24]	; 8b34 <__do_global_dtors_aux+0x24>
    8b18:	e5d43000 	ldrb	r3, [r4]
    8b1c:	e3530000 	cmp	r3, #0
    8b20:	18bd8010 	popne	{r4, pc}
    8b24:	ebffffdf 	bl	8aa8 <deregister_tm_clones>
    8b28:	e3a03001 	mov	r3, #1
    8b2c:	e5c43000 	strb	r3, [r4]
    8b30:	e8bd8010 	pop	{r4, pc}
    8b34:	00010258 	.word	0x00010258

00008b38 <frame_dummy>:
    8b38:	e59f0024 	ldr	r0, [pc, #36]	; 8b64 <frame_dummy+0x2c>
    8b3c:	e92d4008 	push	{r3, lr}
    8b40:	e5903000 	ldr	r3, [r0]
    8b44:	e3530000 	cmp	r3, #0
    8b48:	0a000003 	beq	8b5c <frame_dummy+0x24>
    8b4c:	e59f3014 	ldr	r3, [pc, #20]	; 8b68 <frame_dummy+0x30>
    8b50:	e3530000 	cmp	r3, #0
    8b54:	0a000000 	beq	8b5c <frame_dummy+0x24>
    8b58:	e12fff33 	blx	r3
    8b5c:	e8bd4008 	pop	{r3, lr}
    8b60:	eaffffdc 	b	8ad8 <register_tm_clones>
    8b64:	00010008 	.word	0x00010008
	...

00008b70 <main>:
#include "../hal/LASER/LIDAR.h"
#include "../hal/LLD_IF/LLD_UART.h"

extern float g_halADC_get_ui16(unsigned char );

int main() {
    8b70:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    8b74:	ed2d8b0c 	vpush	{d8-d13}
    8b78:	e28db04c 	add	fp, sp, #76	; 0x4c
    8b7c:	e24dde1d 	sub	sp, sp, #464	; 0x1d0

	int runCommand = 0;
    8b80:	e3a03000 	mov	r3, #0
    8b84:	e50b3050 	str	r3, [fp, #-80]	; 0x50
	char testValue[20];
	scanf("%s", testValue);
    8b88:	e24b30d0 	sub	r3, fp, #208	; 0xd0
    8b8c:	e59f09c4 	ldr	r0, [pc, #2500]	; 9558 <main+0x9e8>
    8b90:	e1a01003 	mov	r1, r3
    8b94:	ebffff93 	bl	89e8 <_init+0x158>
	printf("Received string is %s\n", testValue);
    8b98:	e24b30d0 	sub	r3, fp, #208	; 0xd0
    8b9c:	e59f09b8 	ldr	r0, [pc, #2488]	; 955c <main+0x9ec>
    8ba0:	e1a01003 	mov	r1, r3
    8ba4:	ebffff80 	bl	89ac <_init+0x11c>
	if ( strcmp(testValue,"testadc")  == 0 )
    8ba8:	e24b30d0 	sub	r3, fp, #208	; 0xd0
    8bac:	e1a00003 	mov	r0, r3
    8bb0:	e59f19a8 	ldr	r1, [pc, #2472]	; 9560 <main+0x9f0>
    8bb4:	ebffffa0 	bl	8a3c <_init+0x1ac>
    8bb8:	e1a03000 	mov	r3, r0
    8bbc:	e3530000 	cmp	r3, #0
    8bc0:	1a000002 	bne	8bd0 <main+0x60>
		runCommand = 1;
    8bc4:	e3a03001 	mov	r3, #1
    8bc8:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8bcc:	ea00006c 	b	8d84 <main+0x214>
	else if ( strcmp(testValue,"testadc")  == 0 )
    8bd0:	e24b30d0 	sub	r3, fp, #208	; 0xd0
    8bd4:	e1a00003 	mov	r0, r3
    8bd8:	e59f1980 	ldr	r1, [pc, #2432]	; 9560 <main+0x9f0>
    8bdc:	ebffff96 	bl	8a3c <_init+0x1ac>
    8be0:	e1a03000 	mov	r3, r0
    8be4:	e3530000 	cmp	r3, #0
    8be8:	1a000002 	bne	8bf8 <main+0x88>
		runCommand = 2;
    8bec:	e3a03002 	mov	r3, #2
    8bf0:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8bf4:	ea000062 	b	8d84 <main+0x214>
	else if ( strcmp(testValue,"testbattery")  == 0 )
    8bf8:	e24b30d0 	sub	r3, fp, #208	; 0xd0
    8bfc:	e1a00003 	mov	r0, r3
    8c00:	e59f195c 	ldr	r1, [pc, #2396]	; 9564 <main+0x9f4>
    8c04:	ebffff8c 	bl	8a3c <_init+0x1ac>
    8c08:	e1a03000 	mov	r3, r0
    8c0c:	e3530000 	cmp	r3, #0
    8c10:	1a000002 	bne	8c20 <main+0xb0>
		runCommand = 3;
    8c14:	e3a03003 	mov	r3, #3
    8c18:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8c1c:	ea000058 	b	8d84 <main+0x214>
	else if ( strcmp(testValue,"testgps")  == 0 )
    8c20:	e24b30d0 	sub	r3, fp, #208	; 0xd0
    8c24:	e1a00003 	mov	r0, r3
    8c28:	e59f1938 	ldr	r1, [pc, #2360]	; 9568 <main+0x9f8>
    8c2c:	ebffff82 	bl	8a3c <_init+0x1ac>
    8c30:	e1a03000 	mov	r3, r0
    8c34:	e3530000 	cmp	r3, #0
    8c38:	1a000002 	bne	8c48 <main+0xd8>
		runCommand = 4;
    8c3c:	e3a03004 	mov	r3, #4
    8c40:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8c44:	ea00004e 	b	8d84 <main+0x214>
	else if ( strcmp(testValue,"testimu")  == 0 )
    8c48:	e24b30d0 	sub	r3, fp, #208	; 0xd0
    8c4c:	e1a00003 	mov	r0, r3
    8c50:	e59f1914 	ldr	r1, [pc, #2324]	; 956c <main+0x9fc>
    8c54:	ebffff78 	bl	8a3c <_init+0x1ac>
    8c58:	e1a03000 	mov	r3, r0
    8c5c:	e3530000 	cmp	r3, #0
    8c60:	1a000002 	bne	8c70 <main+0x100>
		runCommand = 5;
    8c64:	e3a03005 	mov	r3, #5
    8c68:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8c6c:	ea000044 	b	8d84 <main+0x214>
	else if ( strcmp(testValue,"testlaser")  == 0 )
    8c70:	e24b30d0 	sub	r3, fp, #208	; 0xd0
    8c74:	e1a00003 	mov	r0, r3
    8c78:	e59f18f0 	ldr	r1, [pc, #2288]	; 9570 <main+0xa00>
    8c7c:	ebffff6e 	bl	8a3c <_init+0x1ac>
    8c80:	e1a03000 	mov	r3, r0
    8c84:	e3530000 	cmp	r3, #0
    8c88:	1a000002 	bne	8c98 <main+0x128>
		runCommand = 6;
    8c8c:	e3a03006 	mov	r3, #6
    8c90:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8c94:	ea00003a 	b	8d84 <main+0x214>
	else if ( strcmp(testValue,"testmatlabimu")  == 0 )
    8c98:	e24b30d0 	sub	r3, fp, #208	; 0xd0
    8c9c:	e1a00003 	mov	r0, r3
    8ca0:	e59f18cc 	ldr	r1, [pc, #2252]	; 9574 <main+0xa04>
    8ca4:	ebffff64 	bl	8a3c <_init+0x1ac>
    8ca8:	e1a03000 	mov	r3, r0
    8cac:	e3530000 	cmp	r3, #0
    8cb0:	1a000002 	bne	8cc0 <main+0x150>
		runCommand = 7;
    8cb4:	e3a03007 	mov	r3, #7
    8cb8:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8cbc:	ea000030 	b	8d84 <main+0x214>
	else if ( strcmp(testValue,"testmatlabkalman")  == 0 )
    8cc0:	e24b30d0 	sub	r3, fp, #208	; 0xd0
    8cc4:	e1a00003 	mov	r0, r3
    8cc8:	e59f18a8 	ldr	r1, [pc, #2216]	; 9578 <main+0xa08>
    8ccc:	ebffff5a 	bl	8a3c <_init+0x1ac>
    8cd0:	e1a03000 	mov	r3, r0
    8cd4:	e3530000 	cmp	r3, #0
    8cd8:	1a000002 	bne	8ce8 <main+0x178>
		runCommand = 8;
    8cdc:	e3a03008 	mov	r3, #8
    8ce0:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8ce4:	ea000026 	b	8d84 <main+0x214>
	else if ( strcmp(testValue,"testaccmag")  == 0 )
    8ce8:	e24b30d0 	sub	r3, fp, #208	; 0xd0
    8cec:	e1a00003 	mov	r0, r3
    8cf0:	e59f1884 	ldr	r1, [pc, #2180]	; 957c <main+0xa0c>
    8cf4:	ebffff50 	bl	8a3c <_init+0x1ac>
    8cf8:	e1a03000 	mov	r3, r0
    8cfc:	e3530000 	cmp	r3, #0
    8d00:	1a000002 	bne	8d10 <main+0x1a0>
		runCommand = 9;
    8d04:	e3a03009 	mov	r3, #9
    8d08:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8d0c:	ea00001c 	b	8d84 <main+0x214>
	else if ( strcmp(testValue,"testgyro")  == 0 )
    8d10:	e24b30d0 	sub	r3, fp, #208	; 0xd0
    8d14:	e1a00003 	mov	r0, r3
    8d18:	e59f1860 	ldr	r1, [pc, #2144]	; 9580 <main+0xa10>
    8d1c:	ebffff46 	bl	8a3c <_init+0x1ac>
    8d20:	e1a03000 	mov	r3, r0
    8d24:	e3530000 	cmp	r3, #0
    8d28:	1a000002 	bne	8d38 <main+0x1c8>
		runCommand = 10;
    8d2c:	e3a0300a 	mov	r3, #10
    8d30:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8d34:	ea000012 	b	8d84 <main+0x214>
	else if ( strcmp(testValue,"testbaro")  == 0 )
    8d38:	e24b30d0 	sub	r3, fp, #208	; 0xd0
    8d3c:	e1a00003 	mov	r0, r3
    8d40:	e59f183c 	ldr	r1, [pc, #2108]	; 9584 <main+0xa14>
    8d44:	ebffff3c 	bl	8a3c <_init+0x1ac>
    8d48:	e1a03000 	mov	r3, r0
    8d4c:	e3530000 	cmp	r3, #0
    8d50:	1a000002 	bne	8d60 <main+0x1f0>
		runCommand = 11;
    8d54:	e3a0300b 	mov	r3, #11
    8d58:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8d5c:	ea000008 	b	8d84 <main+0x214>
	else if ( strcmp(testValue,"testmatrixlib")  == 0 )
    8d60:	e24b30d0 	sub	r3, fp, #208	; 0xd0
    8d64:	e1a00003 	mov	r0, r3
    8d68:	e59f1818 	ldr	r1, [pc, #2072]	; 9588 <main+0xa18>
    8d6c:	ebffff32 	bl	8a3c <_init+0x1ac>
    8d70:	e1a03000 	mov	r3, r0
    8d74:	e3530000 	cmp	r3, #0
    8d78:	1a000001 	bne	8d84 <main+0x214>
		runCommand = 12;
    8d7c:	e3a0300c 	mov	r3, #12
    8d80:	e50b3050 	str	r3, [fp, #-80]	; 0x50

	switch (runCommand)
    8d84:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
    8d88:	e2433001 	sub	r3, r3, #1
    8d8c:	e353000b 	cmp	r3, #11
    8d90:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    8d94:	ea0001e4 	b	952c <main+0x9bc>
    8d98:	00008dc8 	.word	0x00008dc8
    8d9c:	00008e14 	.word	0x00008e14
    8da0:	00008e4c 	.word	0x00008e4c
    8da4:	00008e64 	.word	0x00008e64
    8da8:	00008f24 	.word	0x00008f24
    8dac:	00008f5c 	.word	0x00008f5c
    8db0:	00008fd4 	.word	0x00008fd4
    8db4:	00009080 	.word	0x00009080
    8db8:	000091b4 	.word	0x000091b4
    8dbc:	0000927c 	.word	0x0000927c
    8dc0:	00009334 	.word	0x00009334
    8dc4:	000093ec 	.word	0x000093ec
	{
		case 1:
		{
			float erg;
			printf("Starting ADC Test\n");
    8dc8:	e59f07bc 	ldr	r0, [pc, #1980]	; 958c <main+0xa1c>
    8dcc:	ebffff08 	bl	89f4 <_init+0x164>
			erg = g_halADC_get_ui16(1);
    8dd0:	e3a00001 	mov	r0, #1
    8dd4:	eb000213 	bl	9628 <g_halADC_get_ui16>
    8dd8:	ed0b0a15 	vstr	s0, [fp, #-84]	; 0xffffffac
			if(erg<0)
    8ddc:	ed5b7a15 	vldr	s15, [fp, #-84]	; 0xffffffac
    8de0:	eef57ac0 	vcmpe.f32	s15, #0.0
    8de4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8de8:	5a000003 	bpl	8dfc <main+0x28c>
			{
				printf("Fehler");
    8dec:	e59f079c 	ldr	r0, [pc, #1948]	; 9590 <main+0xa20>
    8df0:	ebfffeed 	bl	89ac <_init+0x11c>
				return 1;
    8df4:	e3a03001 	mov	r3, #1
    8df8:	ea0001cf 	b	953c <main+0x9cc>
			}
			else
			{
				printf("Ergebniss: %f\n",erg);
    8dfc:	ed5b7a15 	vldr	s15, [fp, #-84]	; 0xffffffac
    8e00:	eeb77ae7 	vcvt.f64.f32	d7, s15
    8e04:	e59f0788 	ldr	r0, [pc, #1928]	; 9594 <main+0xa24>
    8e08:	ec532b17 	vmov	r2, r3, d7
    8e0c:	ebfffee6 	bl	89ac <_init+0x11c>
			}
			break;
    8e10:	ea0001c8 	b	9538 <main+0x9c8>
		}
		case 2:
		{
			double l_batterLevel_f64=0;
    8e14:	e3a02000 	mov	r2, #0
    8e18:	e3a03000 	mov	r3, #0
    8e1c:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
			printf("Starting Battery Test\n");
    8e20:	e59f0770 	ldr	r0, [pc, #1904]	; 9598 <main+0xa28>
    8e24:	ebfffef2 	bl	89f4 <_init+0x164>
			while(1)
			{
				g_halBatCheck_readBatStatusFromI2C_bl();
    8e28:	eb000282 	bl	9838 <g_halBatCheck_readBatStatusFromI2C_bl>
				l_batterLevel_f64=g_halBatCheck_getBatteryStatus_f64();
    8e2c:	eb000277 	bl	9810 <g_halBatCheck_getBatteryStatus_f64>
    8e30:	ed0b0b17 	vstr	d0, [fp, #-92]	; 0xffffffa4
				printf("Measured Voltage: %5.3f\n",l_batterLevel_f64);
    8e34:	e59f0760 	ldr	r0, [pc, #1888]	; 959c <main+0xa2c>
    8e38:	e14b25dc 	ldrd	r2, [fp, #-92]	; 0xffffffa4
    8e3c:	ebfffeda 	bl	89ac <_init+0x11c>
				sleep(1);
    8e40:	e3a00001 	mov	r0, #1
    8e44:	ebfffee4 	bl	89dc <_init+0x14c>
			}
    8e48:	eafffff6 	b	8e28 <main+0x2b8>
			break;
		}
		case 3:
		{
			int i=0;
    8e4c:	e3a03000 	mov	r3, #0
    8e50:	e50b3060 	str	r3, [fp, #-96]	; 0x60
			struct strPosition main_longitude;
			struct strPosition main_latitude;
			printf("Starting GPS Test\n");
    8e54:	e59f0744 	ldr	r0, [pc, #1860]	; 95a0 <main+0xa30>
    8e58:	ebfffee5 	bl	89f4 <_init+0x164>
			while(1)
			{
				g_halGps_getData_i32();
    8e5c:	eb000354 	bl	9bb4 <g_halGps_getData_i32>
			}
    8e60:	eafffffd 	b	8e5c <main+0x2ec>
			break;
		}
		case 4:
		{
			halImu_orientationValues l_imuMeasurements_st;
			printf("Starting IMU Test\n");
    8e64:	e59f0738 	ldr	r0, [pc, #1848]	; 95a4 <main+0xa34>
    8e68:	ebfffee1 	bl	89f4 <_init+0x164>
			g_halImu_initImuSensors_bl();
    8e6c:	eb000c21 	bl	bef8 <g_halImu_initImuSensors_bl>
			while(1)
			{
				g_halImu_triggerImuReading_bl();
    8e70:	eb000c8d 	bl	c0ac <g_halImu_triggerImuReading_bl>
				g_halImu_triggerBaroReading_bl();
    8e74:	eb000c36 	bl	bf54 <g_halImu_triggerBaroReading_bl>
				g_halImu_triggerGyroReading_bl();
    8e78:	eb000c4f 	bl	bfbc <g_halImu_triggerGyroReading_bl>
				g_halImu_triggerAccReading_bl();
    8e7c:	eb000c62 	bl	c00c <g_halImu_triggerAccReading_bl>

				l_imuMeasurements_st=g_halImu_getImuValues_str();
    8e80:	e24b3f73 	sub	r3, fp, #460	; 0x1cc
    8e84:	e1a00003 	mov	r0, r3
    8e88:	eb000c09 	bl	beb4 <g_halImu_getImuValues_str>

				printf("Pressure: %5.3f    ;    Temperature:  %5.3f\n",l_imuMeasurements_st.pressure_f64,l_imuMeasurements_st.temperature_f64);
    8e8c:	e24b3f5f 	sub	r3, fp, #380	; 0x17c
    8e90:	e1c320d0 	ldrd	r2, [r3]
    8e94:	e24b1f61 	sub	r1, fp, #388	; 0x184
    8e98:	e1c100d0 	ldrd	r0, [r1]
    8e9c:	e1cd00f0 	strd	r0, [sp]
    8ea0:	e59f0700 	ldr	r0, [pc, #1792]	; 95a8 <main+0xa38>
    8ea4:	ebfffec0 	bl	89ac <_init+0x11c>
				printf("yaw: %5.3f ; pitch:  %5.3f ; roll:  %5.3f\n",l_imuMeasurements_st.gyro.l_yaw_f64,l_imuMeasurements_st.gyro.l_pitch_f64,l_imuMeasurements_st.gyro.l_roll_f64);
    8ea8:	e24b3f67 	sub	r3, fp, #412	; 0x19c
    8eac:	e1c320d0 	ldrd	r2, [r3]
    8eb0:	e24b5f65 	sub	r5, fp, #404	; 0x194
    8eb4:	e1c540d0 	ldrd	r4, [r5]
    8eb8:	e24b1f63 	sub	r1, fp, #396	; 0x18c
    8ebc:	e1c100d0 	ldrd	r0, [r1]
    8ec0:	e1cd40f0 	strd	r4, [sp]
    8ec4:	e1cd00f8 	strd	r0, [sp, #8]
    8ec8:	e59f06dc 	ldr	r0, [pc, #1756]	; 95ac <main+0xa3c>
    8ecc:	ebfffeb6 	bl	89ac <_init+0x11c>
				printf("X: %5.3f ; Y:  %5.3f ; Z:  %5.3f\n",l_imuMeasurements_st.acc.x_f64,l_imuMeasurements_st.acc.y_f64,l_imuMeasurements_st.acc.z_f64);
    8ed0:	e24b3f73 	sub	r3, fp, #460	; 0x1cc
    8ed4:	e1c320d0 	ldrd	r2, [r3]
    8ed8:	e24b5f71 	sub	r5, fp, #452	; 0x1c4
    8edc:	e1c540d0 	ldrd	r4, [r5]
    8ee0:	e24b1f6f 	sub	r1, fp, #444	; 0x1bc
    8ee4:	e1c100d0 	ldrd	r0, [r1]
    8ee8:	e1cd40f0 	strd	r4, [sp]
    8eec:	e1cd00f8 	strd	r0, [sp, #8]
    8ef0:	e59f06b8 	ldr	r0, [pc, #1720]	; 95b0 <main+0xa40>
    8ef4:	ebfffeac 	bl	89ac <_init+0x11c>
				printf("X: %5.10f ; Y:  %5.10f ; Z:  %5.10f\n\n\n\n",l_imuMeasurements_st.mag.x_f64,l_imuMeasurements_st.mag.y_f64,l_imuMeasurements_st.mag.z_f64);
    8ef8:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
    8efc:	e1c320d0 	ldrd	r2, [r3]
    8f00:	e24b5f6b 	sub	r5, fp, #428	; 0x1ac
    8f04:	e1c540d0 	ldrd	r4, [r5]
    8f08:	e24b1f69 	sub	r1, fp, #420	; 0x1a4
    8f0c:	e1c100d0 	ldrd	r0, [r1]
    8f10:	e1cd40f0 	strd	r4, [sp]
    8f14:	e1cd00f8 	strd	r0, [sp, #8]
    8f18:	e59f0694 	ldr	r0, [pc, #1684]	; 95b4 <main+0xa44>
    8f1c:	ebfffea2 	bl	89ac <_init+0x11c>
			}
    8f20:	eaffffd2 	b	8e70 <main+0x300>
			break;
		}
		case 5:
		{
			double dist=0;
    8f24:	e3a02000 	mov	r2, #0
    8f28:	e3a03000 	mov	r3, #0
    8f2c:	e14b26fc 	strd	r2, [fp, #-108]	; 0xffffff94
			printf("Starting LASER Test\n");
    8f30:	e59f0680 	ldr	r0, [pc, #1664]	; 95b8 <main+0xa48>
    8f34:	ebfffeae 	bl	89f4 <_init+0x164>
			while(1)
			{
				g_LIDAR_readDistanceFromI2C_i32();
    8f38:	eb000caa 	bl	c1e8 <g_LIDAR_readDistanceFromI2C_i32>
				//usleep(100000);

				dist=g_LIDAR_getDistance_f64();
    8f3c:	eb000c9f 	bl	c1c0 <g_LIDAR_getDistance_f64>
    8f40:	ed0b0b1b 	vstr	d0, [fp, #-108]	; 0xffffff94

				printf("Distance: %4.2f m\n",dist);
    8f44:	e59f0670 	ldr	r0, [pc, #1648]	; 95bc <main+0xa4c>
    8f48:	e14b26dc 	ldrd	r2, [fp, #-108]	; 0xffffff94
    8f4c:	ebfffe96 	bl	89ac <_init+0x11c>
				usleep(500*1000);
    8f50:	e59f0668 	ldr	r0, [pc, #1640]	; 95c0 <main+0xa50>
    8f54:	ebfffe70 	bl	891c <_init+0x8c>
			}
    8f58:	eafffff6 	b	8f38 <main+0x3c8>
			break;
		}
		case 6:
		{
			char rec_char='z';
    8f5c:	e3a0307a 	mov	r3, #122	; 0x7a
    8f60:	e54b3105 	strb	r3, [fp, #-261]	; 0x105
			char *ptr_rec_char=&rec_char;
    8f64:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8f68:	e2433001 	sub	r3, r3, #1
    8f6c:	e50b3070 	str	r3, [fp, #-112]	; 0x70
			printf("Starting UART Test\n");
    8f70:	e59f064c 	ldr	r0, [pc, #1612]	; 95c4 <main+0xa54>
    8f74:	ebfffe9e 	bl	89f4 <_init+0x164>
			FILE *fp=(FILE *)-1;
    8f78:	e3e03000 	mvn	r3, #0
    8f7c:	e50b3074 	str	r3, [fp, #-116]	; 0x74
			//open file to write received data from GPS
			fp = (FILE *)open("GPS_logging.txt",100 | 01,400);
    8f80:	e59f0640 	ldr	r0, [pc, #1600]	; 95c8 <main+0xa58>
    8f84:	e3a01065 	mov	r1, #101	; 0x65
    8f88:	e3a02e19 	mov	r2, #400	; 0x190
    8f8c:	ebfffe47 	bl	88b0 <_init+0x20>
    8f90:	e1a03000 	mov	r3, r0
    8f94:	e50b3074 	str	r3, [fp, #-116]	; 0x74
			sleep(1);
    8f98:	e3a00001 	mov	r0, #1
    8f9c:	ebfffe8e 	bl	89dc <_init+0x14c>
			while(1)
			{
				rec_char=g_lldUart_readByte_ch();
    8fa0:	eb000dff 	bl	c7a4 <g_lldUart_readByte_ch>
    8fa4:	e1a03000 	mov	r3, r0
    8fa8:	e54b3105 	strb	r3, [fp, #-261]	; 0x105
				//save read values if filestream is opened
				if (fp != (FILE *)-1)
    8fac:	e51b3074 	ldr	r3, [fp, #-116]	; 0x74
    8fb0:	e3730001 	cmn	r3, #1
    8fb4:	0a000005 	beq	8fd0 <main+0x460>
				{
					write((int)fp,ptr_rec_char,1);
    8fb8:	e51b3074 	ldr	r3, [fp, #-116]	; 0x74
    8fbc:	e1a00003 	mov	r0, r3
    8fc0:	e51b1070 	ldr	r1, [fp, #-112]	; 0x70
    8fc4:	e3a02001 	mov	r2, #1
    8fc8:	ebfffe5c 	bl	8940 <_init+0xb0>
				}
			}
    8fcc:	eafffff3 	b	8fa0 <main+0x430>
    8fd0:	eafffff2 	b	8fa0 <main+0x430>
			fclose(fp);
			break;
		}
		case 7:
		{
			printf("Starting IMU Matlab Test\n");
    8fd4:	e59f05f0 	ldr	r0, [pc, #1520]	; 95cc <main+0xa5c>
    8fd8:	ebfffe85 	bl	89f4 <_init+0x164>
			unsigned char	l_remoteHostAddr_rg4ui8[4] 	= {192,168,22,160};
    8fdc:	e59f25ec 	ldr	r2, [pc, #1516]	; 95d0 <main+0xa60>
    8fe0:	e24b3f43 	sub	r3, fp, #268	; 0x10c
    8fe4:	e5920000 	ldr	r0, [r2]
    8fe8:	e5830000 	str	r0, [r3]
			unsigned short	l_remoteHostPort_ui16		= 5000;
    8fec:	e59f35e0 	ldr	r3, [pc, #1504]	; 95d4 <main+0xa64>
    8ff0:	e14b37b6 	strh	r3, [fp, #-118]	; 0xffffff8a
			int				l_udpSocket_i32;
			unsigned int	l_sendState_bl;

			// open udp connection
			l_udpSocket_i32 = g_halMatlab_initConnection_i32( l_remoteHostAddr_rg4ui8, l_remoteHostPort_ui16 );
    8ff4:	e24b2f43 	sub	r2, fp, #268	; 0x10c
    8ff8:	e15b37b6 	ldrh	r3, [fp, #-118]	; 0xffffff8a
    8ffc:	e1a00002 	mov	r0, r2
    9000:	e1a01003 	mov	r1, r3
    9004:	eb000f21 	bl	cc90 <g_halMatlab_initConnection_i32>
    9008:	e50b007c 	str	r0, [fp, #-124]	; 0x7c

			halImu_orientationValues l_imuMeasurements_st;
			g_halImu_initImuSensors_bl();
    900c:	eb000bb9 	bl	bef8 <g_halImu_initImuSensors_bl>

			while(1)
			{
				g_halImu_triggerImuReading_bl();
    9010:	eb000c25 	bl	c0ac <g_halImu_triggerImuReading_bl>
				g_halImu_triggerBaroReading_bl();
    9014:	eb000bce 	bl	bf54 <g_halImu_triggerBaroReading_bl>
				g_halImu_triggerGyroReading_bl();
    9018:	eb000be7 	bl	bfbc <g_halImu_triggerGyroReading_bl>
				g_halImu_triggerAccReading_bl();
    901c:	eb000bfa 	bl	c00c <g_halImu_triggerAccReading_bl>

				l_imuMeasurements_st=g_halImu_getImuValues_str();
    9020:	e24b3f73 	sub	r3, fp, #460	; 0x1cc
    9024:	e1a00003 	mov	r0, r3
    9028:	eb000ba1 	bl	beb4 <g_halImu_getImuValues_str>

				l_sendState_bl = g_halMatlab_sendImuState_bl(l_udpSocket_i32, l_imuMeasurements_st);
    902c:	e1a0100d 	mov	r1, sp
    9030:	e24b2f71 	sub	r2, fp, #452	; 0x1c4
    9034:	e3a03050 	mov	r3, #80	; 0x50
    9038:	e1a00001 	mov	r0, r1
    903c:	e1a01002 	mov	r1, r2
    9040:	e1a02003 	mov	r2, r3
    9044:	ebfffe55 	bl	89a0 <_init+0x110>
    9048:	e24b3f73 	sub	r3, fp, #460	; 0x1cc
    904c:	e893000c 	ldm	r3, {r2, r3}
    9050:	e51b007c 	ldr	r0, [fp, #-124]	; 0x7c
    9054:	eb000dff 	bl	c858 <g_halMatlab_sendImuState_bl>
    9058:	e1a03000 	mov	r3, r0
    905c:	e50b3080 	str	r3, [fp, #-128]	; 0x80
				if ( l_sendState_bl != M_HAL_MATLAB_SUCCESS_UI8 )
    9060:	e51b3080 	ldr	r3, [fp, #-128]	; 0x80
    9064:	e3530000 	cmp	r3, #0
    9068:	0a000001 	beq	9074 <main+0x504>
				{
					printf("UDP-Packet error\n");
    906c:	e59f0564 	ldr	r0, [pc, #1380]	; 95d8 <main+0xa68>
    9070:	ebfffe5f 	bl	89f4 <_init+0x164>
				}

				usleep( 20000 ); //20ms = 50Hz
    9074:	e59f0560 	ldr	r0, [pc, #1376]	; 95dc <main+0xa6c>
    9078:	ebfffe27 	bl	891c <_init+0x8c>
			}
    907c:	eaffffe3 	b	9010 <main+0x4a0>
			g_halMatlab_closeSocket_bl(l_udpSocket_i32);
			break;
		}
		case 8:
		{
			printf("Starting Kalman Orientation Matlab Test\n");
    9080:	e59f0558 	ldr	r0, [pc, #1368]	; 95e0 <main+0xa70>
    9084:	ebfffe5a 	bl	89f4 <_init+0x164>
			unsigned char	l_remoteHostAddr_rg4ui8[4] 	= {192,168,22,160};
    9088:	e59f2540 	ldr	r2, [pc, #1344]	; 95d0 <main+0xa60>
    908c:	e24b3e11 	sub	r3, fp, #272	; 0x110
    9090:	e5920000 	ldr	r0, [r2]
    9094:	e5830000 	str	r0, [r3]
			unsigned short	l_remoteHostPort_ui16		= 5000;
    9098:	e59f3534 	ldr	r3, [pc, #1332]	; 95d4 <main+0xa64>
    909c:	e14b38b2 	strh	r3, [fp, #-130]	; 0xffffff7e
			sigOri_orientationAngles	l_kalmanAngles_st;
			sigOri_orientationAngles	l_compAngles_st;
			halImu_orientationValues	l_imuStates_st;

			// open udp connection
			l_udpSocket_i32 = g_halMatlab_initConnection_i32( l_remoteHostAddr_rg4ui8, l_remoteHostPort_ui16 );
    90a0:	e24b2e11 	sub	r2, fp, #272	; 0x110
    90a4:	e15b38b2 	ldrh	r3, [fp, #-130]	; 0xffffff7e
    90a8:	e1a00002 	mov	r0, r2
    90ac:	e1a01003 	mov	r1, r3
    90b0:	eb000ef6 	bl	cc90 <g_halMatlab_initConnection_i32>
    90b4:	e50b0088 	str	r0, [fp, #-136]	; 0x88

			g_sigOri_initMatrices_bl();
    90b8:	eb00155f 	bl	e63c <g_sigOri_initMatrices_bl>
			g_sigOri_initImuSensors_bl();
    90bc:	eb001553 	bl	e610 <g_sigOri_initImuSensors_bl>

			while(1)
			{
				g_sigOri_calcKalmanOrientation_bl();
    90c0:	eb001733 	bl	ed94 <g_sigOri_calcKalmanOrientation_bl>
				g_sigOri_calcComplementaryOrientation_bl();
    90c4:	eb00180d 	bl	f100 <g_sigOri_calcComplementaryOrientation_bl>

				l_kalmanAngles_st 	= g_sigOri_getAnglesKalman_bl();
    90c8:	eb00151c 	bl	e540 <g_sigOri_getAnglesKalman_bl>
    90cc:	eeb05b40 	vmov.f64	d5, d0
    90d0:	eeb06b41 	vmov.f64	d6, d1
    90d4:	eeb07b42 	vmov.f64	d7, d2
    90d8:	ed0b5b4b 	vstr	d5, [fp, #-300]	; 0xfffffed4
    90dc:	ed0b6b49 	vstr	d6, [fp, #-292]	; 0xfffffedc
    90e0:	ed0b7b47 	vstr	d7, [fp, #-284]	; 0xfffffee4
				l_compAngles_st		= g_sigOri_getAnglesComplementary_bl();
    90e4:	eb0014e1 	bl	e470 <g_sigOri_getAnglesComplementary_bl>
    90e8:	eeb05b40 	vmov.f64	d5, d0
    90ec:	eeb06b41 	vmov.f64	d6, d1
    90f0:	eeb07b42 	vmov.f64	d7, d2
    90f4:	ed0b5b51 	vstr	d5, [fp, #-324]	; 0xfffffebc
    90f8:	ed0b6b4f 	vstr	d6, [fp, #-316]	; 0xfffffec4
    90fc:	ed0b7b4d 	vstr	d7, [fp, #-308]	; 0xfffffecc
				l_imuStates_st 		= g_halImu_getImuValues_str();
    9100:	e24b3f73 	sub	r3, fp, #460	; 0x1cc
    9104:	e1a00003 	mov	r0, r3
    9108:	eb000b69 	bl	beb4 <g_halImu_getImuValues_str>

				printf("Temp%f\nMag%f",l_imuStates_st.temperature_f64, l_imuStates_st.mag.x_f64);
    910c:	e24b3f61 	sub	r3, fp, #388	; 0x184
    9110:	e1c320d0 	ldrd	r2, [r3]
    9114:	e24b1f6d 	sub	r1, fp, #436	; 0x1b4
    9118:	e1c100d0 	ldrd	r0, [r1]
    911c:	e1cd00f0 	strd	r0, [sp]
    9120:	e59f04bc 	ldr	r0, [pc, #1212]	; 95e4 <main+0xa74>
    9124:	ebfffe20 	bl	89ac <_init+0x11c>
				l_sendState_bl = g_halMatlab_sendSigAllStates_bl(	l_udpSocket_i32,
    9128:	ed1bdb4b 	vldr	d13, [fp, #-300]	; 0xfffffed4
    912c:	ed1bcb49 	vldr	d12, [fp, #-292]	; 0xfffffedc
    9130:	ed1bbb47 	vldr	d11, [fp, #-284]	; 0xfffffee4
    9134:	ed1bab51 	vldr	d10, [fp, #-324]	; 0xfffffebc
    9138:	ed1b9b4f 	vldr	d9, [fp, #-316]	; 0xfffffec4
    913c:	ed1b8b4d 	vldr	d8, [fp, #-308]	; 0xfffffecc
    9140:	e1a0100d 	mov	r1, sp
    9144:	e24b2f71 	sub	r2, fp, #452	; 0x1c4
    9148:	e3a03050 	mov	r3, #80	; 0x50
    914c:	e1a00001 	mov	r0, r1
    9150:	e1a01002 	mov	r1, r2
    9154:	e1a02003 	mov	r2, r3
    9158:	ebfffe10 	bl	89a0 <_init+0x110>
    915c:	e24b3f73 	sub	r3, fp, #460	; 0x1cc
    9160:	e893000c 	ldm	r3, {r2, r3}
    9164:	e51b0088 	ldr	r0, [fp, #-136]	; 0x88
    9168:	eeb00b4d 	vmov.f64	d0, d13
    916c:	eeb01b4c 	vmov.f64	d1, d12
    9170:	eeb02b4b 	vmov.f64	d2, d11
    9174:	eeb03b4a 	vmov.f64	d3, d10
    9178:	eeb04b49 	vmov.f64	d4, d9
    917c:	eeb05b48 	vmov.f64	d5, d8
    9180:	eb001009 	bl	d1ac <g_halMatlab_sendSigAllStates_bl>
    9184:	e50b008c 	str	r0, [fp, #-140]	; 0x8c
																	l_imuStates_st,
																	l_kalmanAngles_st,
																	l_compAngles_st);
				if ( l_sendState_bl != M_HAL_MATLAB_SUCCESS_UI8 )
    9188:	e51b308c 	ldr	r3, [fp, #-140]	; 0x8c
    918c:	e3530000 	cmp	r3, #0
    9190:	0a000002 	beq	91a0 <main+0x630>
				{
					printf("UDP-Packet error\n");
    9194:	e59f043c 	ldr	r0, [pc, #1084]	; 95d8 <main+0xa68>
    9198:	ebfffe15 	bl	89f4 <_init+0x164>
    919c:	ea000001 	b	91a8 <main+0x638>
				}
				else
				{
					printf("Sent packet\n");
    91a0:	e59f0440 	ldr	r0, [pc, #1088]	; 95e8 <main+0xa78>
    91a4:	ebfffe12 	bl	89f4 <_init+0x164>
				}
				usleep( 20000 ); //20ms = 50Hz
    91a8:	e59f042c 	ldr	r0, [pc, #1068]	; 95dc <main+0xa6c>
    91ac:	ebfffdda 	bl	891c <_init+0x8c>
			}
    91b0:	eaffffc2 	b	90c0 <main+0x550>
			break;
		}
		case 9:
		{
			halAccmag_dataContainer l_sensorData_st;
			printf("IMU Acceleration and Compass Test\n");
    91b4:	e59f0430 	ldr	r0, [pc, #1072]	; 95ec <main+0xa7c>
    91b8:	ebfffe0d 	bl	89f4 <_init+0x164>
			if ( g_halAccmag_initSensor_bl() != M_HAL_ACCMAG_SUCCESS_BL )
    91bc:	eb00083a 	bl	b2ac <g_halAccmag_initSensor_bl>
    91c0:	e1a03000 	mov	r3, r0
    91c4:	e3530000 	cmp	r3, #0
    91c8:	0a000003 	beq	91dc <main+0x66c>
			{
				printf( "Init failed!\n" );
    91cc:	e59f041c 	ldr	r0, [pc, #1052]	; 95f0 <main+0xa80>
    91d0:	ebfffe07 	bl	89f4 <_init+0x164>
				return 1;
    91d4:	e3a03001 	mov	r3, #1
    91d8:	ea0000d7 	b	953c <main+0x9cc>
			}

			while (1)
			{
				if ( g_halAccmag_triggerAccUpdate_bl() != M_HAL_ACCMAG_SUCCESS_BL )
    91dc:	eb00085a 	bl	b34c <g_halAccmag_triggerAccUpdate_bl>
    91e0:	e1a03000 	mov	r3, r0
    91e4:	e3530000 	cmp	r3, #0
    91e8:	0a000003 	beq	91fc <main+0x68c>
				{
					printf( "ACC update failed!\n" );
    91ec:	e59f0400 	ldr	r0, [pc, #1024]	; 95f4 <main+0xa84>
    91f0:	ebfffdff 	bl	89f4 <_init+0x164>
					return 1;
    91f4:	e3a03001 	mov	r3, #1
    91f8:	ea0000cf 	b	953c <main+0x9cc>
				}
				if ( g_halAccmag_triggerMagUpdate_bl() != M_HAL_ACCMAG_SUCCESS_BL )
    91fc:	eb000859 	bl	b368 <g_halAccmag_triggerMagUpdate_bl>
    9200:	e1a03000 	mov	r3, r0
    9204:	e3530000 	cmp	r3, #0
    9208:	0a000003 	beq	921c <main+0x6ac>
				{
					printf( "MAG update failed!\n" );
    920c:	e59f03e4 	ldr	r0, [pc, #996]	; 95f8 <main+0xa88>
    9210:	ebfffdf7 	bl	89f4 <_init+0x164>
					return 1;
    9214:	e3a03001 	mov	r3, #1
    9218:	ea0000c7 	b	953c <main+0x9cc>
				}

				l_sensorData_st = g_halAccmag_getAccMagContainer_st();
    921c:	e24b3f73 	sub	r3, fp, #460	; 0x1cc
    9220:	e1a00003 	mov	r0, r3
    9224:	eb000889 	bl	b450 <g_halAccmag_getAccMagContainer_st>

				printf("Acc - x:%f y:%lf z:%f | Mag - x:%.10f y:%.10f z:%.10f\n",
    9228:	e24b3f73 	sub	r3, fp, #460	; 0x1cc
    922c:	e1c320d0 	ldrd	r2, [r3]
    9230:	ed1b7b71 	vldr	d7, [fp, #-452]	; 0xfffffe3c
    9234:	e24b9f6f 	sub	r9, fp, #444	; 0x1bc
    9238:	e1c980d0 	ldrd	r8, [r9]
    923c:	e24b7f6d 	sub	r7, fp, #436	; 0x1b4
    9240:	e1c760d0 	ldrd	r6, [r7]
    9244:	e24b5f6b 	sub	r5, fp, #428	; 0x1ac
    9248:	e1c540d0 	ldrd	r4, [r5]
    924c:	e24b1f69 	sub	r1, fp, #420	; 0x1a4
    9250:	e1c100d0 	ldrd	r0, [r1]
    9254:	ed8d7b00 	vstr	d7, [sp]
    9258:	e1cd80f8 	strd	r8, [sp, #8]
    925c:	e1cd61f0 	strd	r6, [sp, #16]
    9260:	e1cd41f8 	strd	r4, [sp, #24]
    9264:	e1cd02f0 	strd	r0, [sp, #32]
    9268:	e59f038c 	ldr	r0, [pc, #908]	; 95fc <main+0xa8c>
    926c:	ebfffdce 	bl	89ac <_init+0x11c>
						l_sensorData_st.mag.x_f64,
						l_sensorData_st.mag.y_f64,
						l_sensorData_st.mag.z_f64
						);

				usleep( 250000 );
    9270:	e59f0388 	ldr	r0, [pc, #904]	; 9600 <main+0xa90>
    9274:	ebfffda8 	bl	891c <_init+0x8c>
			}
    9278:	eaffffd7 	b	91dc <main+0x66c>
			break;
		}
		case 10:
		{
			double pressure=0;
    927c:	e3a02000 	mov	r2, #0
    9280:	e3a03000 	mov	r3, #0
    9284:	e14b29f4 	strd	r2, [fp, #-148]	; 0xffffff6c
			double temp=0;
    9288:	e3a02000 	mov	r2, #0
    928c:	e3a03000 	mov	r3, #0
    9290:	e14b29fc 	strd	r2, [fp, #-156]	; 0xffffff64
			strGyro GyroValues;
			double Gyrotemp=0;
    9294:	e3a02000 	mov	r2, #0
    9298:	e3a03000 	mov	r3, #0
    929c:	e14b2af4 	strd	r2, [fp, #-164]	; 0xffffff5c
			g_halBaro_initBaro_i32();
    92a0:	eb00087c 	bl	b498 <g_halBaro_initBaro_i32>
			g_halGyro_initGyro_i32();
    92a4:	eb000961 	bl	b830 <g_halGyro_initGyro_i32>
			printf("IMU Barometer pressure test");
    92a8:	e59f0354 	ldr	r0, [pc, #852]	; 9604 <main+0xa94>
    92ac:	ebfffdbe 	bl	89ac <_init+0x11c>
			while(1)
			{
				g_halBaro_readPressureFromI2C_i32();
    92b0:	eb0008b6 	bl	b590 <g_halBaro_readPressureFromI2C_i32>
				//usleep(100000);
				g_halBaro_readTemperatureFromI2C_i32();
    92b4:	eb000908 	bl	b6dc <g_halBaro_readTemperatureFromI2C_i32>
				//usleep(100000);
				pressure=g_halBaro_getPressure_f64();
    92b8:	eb0008a0 	bl	b540 <g_halBaro_getPressure_f64>
    92bc:	ed0b0b25 	vstr	d0, [fp, #-148]	; 0xffffff6c
				temp=g_halBaro_getTemperature_f64();
    92c0:	eb0008a8 	bl	b568 <g_halBaro_getTemperature_f64>
    92c4:	ed0b0b27 	vstr	d0, [fp, #-156]	; 0xffffff64
				printf("Pressure: %5.3f    ;    Temperature:  %5.3f\n",pressure,temp);
    92c8:	e14b29dc 	ldrd	r2, [fp, #-156]	; 0xffffff64
    92cc:	e1cd20f0 	strd	r2, [sp]
    92d0:	e59f02d0 	ldr	r0, [pc, #720]	; 95a8 <main+0xa38>
    92d4:	e14b29d4 	ldrd	r2, [fp, #-148]	; 0xffffff6c
    92d8:	ebfffdb3 	bl	89ac <_init+0x11c>
				//usleep(100000);


				g_halGyro_readGyroscopeFromI2C_i32();
    92dc:	eb00099d 	bl	b958 <g_halGyro_readGyroscopeFromI2C_i32>
				//usleep(100000);
				g_halGyro_readTemperatureFromI2C_i32();
    92e0:	eb000a3f 	bl	bbe4 <g_halGyro_readTemperatureFromI2C_i32>
				//usleep(100000);
				GyroValues=g_halGyro_getGyroscope_st();
    92e4:	eb00097b 	bl	b8d8 <g_halGyro_getGyroscope_st>
    92e8:	eeb05b40 	vmov.f64	d5, d0
    92ec:	eeb06b41 	vmov.f64	d6, d1
    92f0:	eeb07b42 	vmov.f64	d7, d2
    92f4:	ed0b5b57 	vstr	d5, [fp, #-348]	; 0xfffffea4
    92f8:	ed0b6b55 	vstr	d6, [fp, #-340]	; 0xfffffeac
    92fc:	ed0b7b53 	vstr	d7, [fp, #-332]	; 0xfffffeb4
				Gyrotemp=g_halGyro_getTemperature_f64();
    9300:	eb00098a 	bl	b930 <g_halGyro_getTemperature_f64>
    9304:	ed0b0b29 	vstr	d0, [fp, #-164]	; 0xffffff5c
				printf("yaw: %5.3f    ;    pitch:  %5.3f    ;    roll:  %5.3f\n",GyroValues.l_yaw_f64,GyroValues.l_pitch_f64,GyroValues.l_roll_f64);
    9308:	e24b3f57 	sub	r3, fp, #348	; 0x15c
    930c:	e1c320d0 	ldrd	r2, [r3]
    9310:	e24b5f55 	sub	r5, fp, #340	; 0x154
    9314:	e1c540d0 	ldrd	r4, [r5]
    9318:	e24b1f53 	sub	r1, fp, #332	; 0x14c
    931c:	e1c100d0 	ldrd	r0, [r1]
    9320:	e1cd40f0 	strd	r4, [sp]
    9324:	e1cd00f8 	strd	r0, [sp, #8]
    9328:	e59f02d8 	ldr	r0, [pc, #728]	; 9608 <main+0xa98>
    932c:	ebfffd9e 	bl	89ac <_init+0x11c>
				//usleep(100000);
			}
    9330:	eaffffde 	b	92b0 <main+0x740>
			break;
		}
		case 11:
		{
			double pressure=0;
    9334:	e3a02000 	mov	r2, #0
    9338:	e3a03000 	mov	r3, #0
    933c:	e14b2afc 	strd	r2, [fp, #-172]	; 0xffffff54
			double temp=0;
    9340:	e3a02000 	mov	r2, #0
    9344:	e3a03000 	mov	r3, #0
    9348:	e14b2bf4 	strd	r2, [fp, #-180]	; 0xffffff4c
			strGyro GyroValues;
			double Gyrotemp=0;
    934c:	e3a02000 	mov	r2, #0
    9350:	e3a03000 	mov	r3, #0
    9354:	e14b2bfc 	strd	r2, [fp, #-188]	; 0xffffff44
			printf("IMU Gyroscope test\n");
    9358:	e59f02ac 	ldr	r0, [pc, #684]	; 960c <main+0xa9c>
    935c:	ebfffda4 	bl	89f4 <_init+0x164>
			g_halBaro_initBaro_i32();
    9360:	eb00084c 	bl	b498 <g_halBaro_initBaro_i32>
			g_halGyro_initGyro_i32();
    9364:	eb000931 	bl	b830 <g_halGyro_initGyro_i32>
			while(1)
			{
				g_halBaro_readPressureFromI2C_i32();
    9368:	eb000888 	bl	b590 <g_halBaro_readPressureFromI2C_i32>
				//usleep(100000);
				g_halBaro_readTemperatureFromI2C_i32();
    936c:	eb0008da 	bl	b6dc <g_halBaro_readTemperatureFromI2C_i32>
				//usleep(100000);
				pressure=g_halBaro_getPressure_f64();
    9370:	eb000872 	bl	b540 <g_halBaro_getPressure_f64>
    9374:	ed0b0b2b 	vstr	d0, [fp, #-172]	; 0xffffff54
				temp=g_halBaro_getTemperature_f64();
    9378:	eb00087a 	bl	b568 <g_halBaro_getTemperature_f64>
    937c:	ed0b0b2d 	vstr	d0, [fp, #-180]	; 0xffffff4c
				printf("Pressure: %5.3f    ;    Temperature:  %5.3f\n",pressure,temp);
    9380:	e14b2bd4 	ldrd	r2, [fp, #-180]	; 0xffffff4c
    9384:	e1cd20f0 	strd	r2, [sp]
    9388:	e59f0218 	ldr	r0, [pc, #536]	; 95a8 <main+0xa38>
    938c:	e14b2adc 	ldrd	r2, [fp, #-172]	; 0xffffff54
    9390:	ebfffd85 	bl	89ac <_init+0x11c>
				//usleep(100000);
				g_halGyro_readGyroscopeFromI2C_i32();
    9394:	eb00096f 	bl	b958 <g_halGyro_readGyroscopeFromI2C_i32>
				//usleep(100000);
				g_halGyro_readTemperatureFromI2C_i32();
    9398:	eb000a11 	bl	bbe4 <g_halGyro_readTemperatureFromI2C_i32>
				//usleep(100000);
				GyroValues=g_halGyro_getGyroscope_st();
    939c:	eb00094d 	bl	b8d8 <g_halGyro_getGyroscope_st>
    93a0:	eeb05b40 	vmov.f64	d5, d0
    93a4:	eeb06b41 	vmov.f64	d6, d1
    93a8:	eeb07b42 	vmov.f64	d7, d2
    93ac:	ed0b5b5d 	vstr	d5, [fp, #-372]	; 0xfffffe8c
    93b0:	ed0b6b5b 	vstr	d6, [fp, #-364]	; 0xfffffe94
    93b4:	ed0b7b59 	vstr	d7, [fp, #-356]	; 0xfffffe9c
				Gyrotemp=g_halGyro_getTemperature_f64();
    93b8:	eb00095c 	bl	b930 <g_halGyro_getTemperature_f64>
    93bc:	ed0b0b2f 	vstr	d0, [fp, #-188]	; 0xffffff44
				printf("yaw: %5.3f    ;    pitch:  %5.3f    ;    roll:  %5.3f\n",GyroValues.l_yaw_f64,GyroValues.l_pitch_f64,GyroValues.l_roll_f64);
    93c0:	e24b3f5d 	sub	r3, fp, #372	; 0x174
    93c4:	e1c320d0 	ldrd	r2, [r3]
    93c8:	e24b5f5b 	sub	r5, fp, #364	; 0x16c
    93cc:	e1c540d0 	ldrd	r4, [r5]
    93d0:	e24b1f59 	sub	r1, fp, #356	; 0x164
    93d4:	e1c100d0 	ldrd	r0, [r1]
    93d8:	e1cd40f0 	strd	r4, [sp]
    93dc:	e1cd00f8 	strd	r0, [sp, #8]
    93e0:	e59f0220 	ldr	r0, [pc, #544]	; 9608 <main+0xa98>
    93e4:	ebfffd70 	bl	89ac <_init+0x11c>
				//usleep(100000);
			}
    93e8:	eaffffde 	b	9368 <main+0x7f8>
			//static	double l_MatrixA_f64[1][3]={{1,2,9}};
			static	double l_MatrixB_f64[3][3]={{3,6,7},{2,5,9},{4,6,8}};
			//static	double l_MatrixB_f64[3][2]={{3,6},{2,5},{4,6}};
			static	double l_outputMatrix_f64[3][3]={{0,0,0},{0,0,0},{0,0,0}};
			//static	double l_outputMatrix_f64[3][2]={{0,0},{0,0},{0,0}};
			printf("matrix lib function test\n");
    93ec:	e59f021c 	ldr	r0, [pc, #540]	; 9610 <main+0xaa0>
    93f0:	ebfffd7f 	bl	89f4 <_init+0x164>
			while(1)
			{
				g_sigMath_matrixEye_bl((double*)l_outputMatrix_f64,3,3);
    93f4:	e59f0218 	ldr	r0, [pc, #536]	; 9614 <main+0xaa4>
    93f8:	e3a01003 	mov	r1, #3
    93fc:	e3a02003 	mov	r2, #3
    9400:	eb0013d5 	bl	e35c <g_sigMath_matrixEye_bl>
				sleep(1);
    9404:	e3a00001 	mov	r0, #1
    9408:	ebfffd73 	bl	89dc <_init+0x14c>
				g_sigMath_matrixInitialize_bl((double*)l_outputMatrix_f64,3,3,1);
    940c:	e59f0200 	ldr	r0, [pc, #512]	; 9614 <main+0xaa4>
    9410:	e3a01003 	mov	r1, #3
    9414:	e3a02003 	mov	r2, #3
    9418:	ed9f0b4c 	vldr	d0, [pc, #304]	; 9550 <main+0x9e0>
    941c:	eb0013a1 	bl	e2a8 <g_sigMath_matrixInitialize_bl>
				sleep(1);
    9420:	e3a00001 	mov	r0, #1
    9424:	ebfffd6c 	bl	89dc <_init+0x14c>
				g_sigMath_matrixMultiplikation_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3,(double*)l_MatrixB_f64,3,3);
    9428:	e59f31e8 	ldr	r3, [pc, #488]	; 9618 <main+0xaa8>
    942c:	e58d3000 	str	r3, [sp]
    9430:	e3a03003 	mov	r3, #3
    9434:	e58d3004 	str	r3, [sp, #4]
    9438:	e3a03003 	mov	r3, #3
    943c:	e58d3008 	str	r3, [sp, #8]
    9440:	e59f01cc 	ldr	r0, [pc, #460]	; 9614 <main+0xaa4>
    9444:	e59f11d0 	ldr	r1, [pc, #464]	; 961c <main+0xaac>
    9448:	e3a02003 	mov	r2, #3
    944c:	e3a03003 	mov	r3, #3
    9450:	eb00101f 	bl	d4d4 <g_sigMath_matrixMultiplikation_bl>
				sleep(1);
    9454:	e3a00001 	mov	r0, #1
    9458:	ebfffd5f 	bl	89dc <_init+0x14c>
				g_sigMath_matrixAddition_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3,(double*)l_MatrixB_f64,3,3);
    945c:	e59f31b4 	ldr	r3, [pc, #436]	; 9618 <main+0xaa8>
    9460:	e58d3000 	str	r3, [sp]
    9464:	e3a03003 	mov	r3, #3
    9468:	e58d3004 	str	r3, [sp, #4]
    946c:	e3a03003 	mov	r3, #3
    9470:	e58d3008 	str	r3, [sp, #8]
    9474:	e59f0198 	ldr	r0, [pc, #408]	; 9614 <main+0xaa4>
    9478:	e59f119c 	ldr	r1, [pc, #412]	; 961c <main+0xaac>
    947c:	e3a02003 	mov	r2, #3
    9480:	e3a03003 	mov	r3, #3
    9484:	eb00106f 	bl	d648 <g_sigMath_matrixAddition_bl>
				sleep(1);
    9488:	e3a00001 	mov	r0, #1
    948c:	ebfffd52 	bl	89dc <_init+0x14c>
				g_sigMath_matrixSubtraktion_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3,(double*)l_MatrixB_f64,3,3);
    9490:	e59f3180 	ldr	r3, [pc, #384]	; 9618 <main+0xaa8>
    9494:	e58d3000 	str	r3, [sp]
    9498:	e3a03003 	mov	r3, #3
    949c:	e58d3004 	str	r3, [sp, #4]
    94a0:	e3a03003 	mov	r3, #3
    94a4:	e58d3008 	str	r3, [sp, #8]
    94a8:	e59f0164 	ldr	r0, [pc, #356]	; 9614 <main+0xaa4>
    94ac:	e59f1168 	ldr	r1, [pc, #360]	; 961c <main+0xaac>
    94b0:	e3a02003 	mov	r2, #3
    94b4:	e3a03003 	mov	r3, #3
    94b8:	eb0010ad 	bl	d774 <g_sigMath_matrixSubtraktion_bl>
				sleep(1);
    94bc:	e3a00001 	mov	r0, #1
    94c0:	ebfffd45 	bl	89dc <_init+0x14c>
				g_sigMath_matrixAssignment_bl((double*)l_outputMatrix_f64,3,3,(double*)l_MatrixA_f64,3,3);
    94c4:	e3a03003 	mov	r3, #3
    94c8:	e58d3000 	str	r3, [sp]
    94cc:	e3a03003 	mov	r3, #3
    94d0:	e58d3004 	str	r3, [sp, #4]
    94d4:	e59f0138 	ldr	r0, [pc, #312]	; 9614 <main+0xaa4>
    94d8:	e3a01003 	mov	r1, #3
    94dc:	e3a02003 	mov	r2, #3
    94e0:	e59f3134 	ldr	r3, [pc, #308]	; 961c <main+0xaac>
    94e4:	eb001330 	bl	e1ac <g_sigMath_matrixAssignment_bl>
				sleep(1);
    94e8:	e3a00001 	mov	r0, #1
    94ec:	ebfffd3a 	bl	89dc <_init+0x14c>
				g_sigMath_matrixTransponiert_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3);
    94f0:	e59f011c 	ldr	r0, [pc, #284]	; 9614 <main+0xaa4>
    94f4:	e59f1120 	ldr	r1, [pc, #288]	; 961c <main+0xaac>
    94f8:	e3a02003 	mov	r2, #3
    94fc:	e3a03003 	mov	r3, #3
    9500:	eb0010e6 	bl	d8a0 <g_sigMath_matrixTransponiert_bl>
				sleep(1);
    9504:	e3a00001 	mov	r0, #1
    9508:	ebfffd33 	bl	89dc <_init+0x14c>
				g_sigMath_matrixInverse_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3);
    950c:	e59f0100 	ldr	r0, [pc, #256]	; 9614 <main+0xaa4>
    9510:	e59f1104 	ldr	r1, [pc, #260]	; 961c <main+0xaac>
    9514:	e3a02003 	mov	r2, #3
    9518:	e3a03003 	mov	r3, #3
    951c:	eb001114 	bl	d974 <g_sigMath_matrixInverse_bl>
				sleep(1);
    9520:	e3a00001 	mov	r0, #1
    9524:	ebfffd2c 	bl	89dc <_init+0x14c>
			}
    9528:	eaffffb1 	b	93f4 <main+0x884>
			break;
		}
		default:
		{
			printf("Nothing found");
    952c:	e59f00ec 	ldr	r0, [pc, #236]	; 9620 <main+0xab0>
    9530:	ebfffd1d 	bl	89ac <_init+0x11c>
			break;
    9534:	e1a00000 	nop			; (mov r0, r0)
		}
	}
	return 0;
    9538:	e3a03000 	mov	r3, #0
}
    953c:	e1a00003 	mov	r0, r3
    9540:	e24bd04c 	sub	sp, fp, #76	; 0x4c
    9544:	ecbd8b0c 	vpop	{d8-d13}
    9548:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    954c:	e1a00000 	nop			; (mov r0, r0)
    9550:	00000000 	.word	0x00000000
    9554:	3ff00000 	.word	0x3ff00000
    9558:	0000f538 	.word	0x0000f538
    955c:	0000f53c 	.word	0x0000f53c
    9560:	0000f554 	.word	0x0000f554
    9564:	0000f55c 	.word	0x0000f55c
    9568:	0000f568 	.word	0x0000f568
    956c:	0000f570 	.word	0x0000f570
    9570:	0000f578 	.word	0x0000f578
    9574:	0000f584 	.word	0x0000f584
    9578:	0000f594 	.word	0x0000f594
    957c:	0000f5a8 	.word	0x0000f5a8
    9580:	0000f5b4 	.word	0x0000f5b4
    9584:	0000f5c0 	.word	0x0000f5c0
    9588:	0000f5cc 	.word	0x0000f5cc
    958c:	0000f5dc 	.word	0x0000f5dc
    9590:	0000f5f0 	.word	0x0000f5f0
    9594:	0000f5f8 	.word	0x0000f5f8
    9598:	0000f608 	.word	0x0000f608
    959c:	0000f620 	.word	0x0000f620
    95a0:	0000f63c 	.word	0x0000f63c
    95a4:	0000f650 	.word	0x0000f650
    95a8:	0000f664 	.word	0x0000f664
    95ac:	0000f694 	.word	0x0000f694
    95b0:	0000f6c0 	.word	0x0000f6c0
    95b4:	0000f6e4 	.word	0x0000f6e4
    95b8:	0000f70c 	.word	0x0000f70c
    95bc:	0000f720 	.word	0x0000f720
    95c0:	0007a120 	.word	0x0007a120
    95c4:	0000f734 	.word	0x0000f734
    95c8:	0000f748 	.word	0x0000f748
    95cc:	0000f758 	.word	0x0000f758
    95d0:	0000f8f4 	.word	0x0000f8f4
    95d4:	00001388 	.word	0x00001388
    95d8:	0000f774 	.word	0x0000f774
    95dc:	00004e20 	.word	0x00004e20
    95e0:	0000f788 	.word	0x0000f788
    95e4:	0000f7b0 	.word	0x0000f7b0
    95e8:	0000f7c0 	.word	0x0000f7c0
    95ec:	0000f7cc 	.word	0x0000f7cc
    95f0:	0000f7f0 	.word	0x0000f7f0
    95f4:	0000f800 	.word	0x0000f800
    95f8:	0000f814 	.word	0x0000f814
    95fc:	0000f828 	.word	0x0000f828
    9600:	0003d090 	.word	0x0003d090
    9604:	0000f860 	.word	0x0000f860
    9608:	0000f87c 	.word	0x0000f87c
    960c:	0000f8b4 	.word	0x0000f8b4
    9610:	0000f8c8 	.word	0x0000f8c8
    9614:	00010260 	.word	0x00010260
    9618:	00010200 	.word	0x00010200
    961c:	000101b8 	.word	0x000101b8
    9620:	0000f8e4 	.word	0x0000f8e4
    9624:	e1a00000 	nop			; (mov r0, r0)

00009628 <g_halADC_get_ui16>:
 * 2015/05/08 mabrgs00:
 *  Error handling from I2C included
 *
 * \endinternal
 ***********************************************************************/
float g_halADC_get_ui16(unsigned char l_input_ui8){
    9628:	e92d4800 	push	{fp, lr}
    962c:	e28db004 	add	fp, sp, #4
    9630:	e24dd018 	sub	sp, sp, #24
    9634:	e1a03000 	mov	r3, r0
    9638:	e54b3015 	strb	r3, [fp, #-21]

  unsigned char l_address_ui8 = 0x49;		// Address of our device on the I2C bus
    963c:	e3a03049 	mov	r3, #73	; 0x49
    9640:	e54b3006 	strb	r3, [fp, #-6]
  unsigned char l_mux_ui8;			// Config value depening on input
  unsigned short l_val_ui16;			// (Converted) result of ADC
  unsigned char l_checkerror_bl;			// Variable to store return value

  // Setting Config according to select Input
  switch(l_input_ui8){			   	// Standard: 1100 0011  (Bit 15-8) Input A0
    9644:	e55b3015 	ldrb	r3, [fp, #-21]
    9648:	e2433001 	sub	r3, r3, #1
    964c:	e3530003 	cmp	r3, #3
    9650:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9654:	ea00000f 	b	9698 <g_halADC_get_ui16+0x70>
    9658:	00009668 	.word	0x00009668
    965c:	00009674 	.word	0x00009674
    9660:	00009680 	.word	0x00009680
    9664:	0000968c 	.word	0x0000968c
	case 1: l_mux_ui8 = 0xC2; break;	// Input: A0	
    9668:	e3e0303d 	mvn	r3, #61	; 0x3d
    966c:	e54b3005 	strb	r3, [fp, #-5]
    9670:	ea00000a 	b	96a0 <g_halADC_get_ui16+0x78>
	case 2: l_mux_ui8 = 0xD2; break;	
    9674:	e3e0302d 	mvn	r3, #45	; 0x2d
    9678:	e54b3005 	strb	r3, [fp, #-5]
    967c:	ea000007 	b	96a0 <g_halADC_get_ui16+0x78>
	case 3: l_mux_ui8 = 0xE2; break;	
    9680:	e3e0301d 	mvn	r3, #29
    9684:	e54b3005 	strb	r3, [fp, #-5]
    9688:	ea000004 	b	96a0 <g_halADC_get_ui16+0x78>
	case 4: l_mux_ui8 = 0xF2; break;	// Input: A3
    968c:	e3e0300d 	mvn	r3, #13
    9690:	e54b3005 	strb	r3, [fp, #-5]
    9694:	ea000001 	b	96a0 <g_halADC_get_ui16+0x78>
	default: l_mux_ui8 = 0xC2; 			
    9698:	e3e0303d 	mvn	r3, #61	; 0x3d
    969c:	e54b3005 	strb	r3, [fp, #-5]
  // First Hex depends on Starting Conversion + the Input, which Pin to read A0-3
  // Second Value is PGA (001)=+-4,099V and continuous Mode (0)


  // These three bytes are written to the ADS1015 to set the config register and start the conversion 
  l_writeBuf_rg24[0] = 1;		// This sets the pointer register to write two bytes to the config register
    96a0:	e3a03001 	mov	r3, #1
    96a4:	e54b3010 	strb	r3, [fp, #-16]
  l_writeBuf_rg24[1] = l_mux_ui8;   	// This sets the 8 MSBs of the config register (bits 15-8) to 11000011
    96a8:	e55b3005 	ldrb	r3, [fp, #-5]
    96ac:	e54b300f 	strb	r3, [fp, #-15]
  l_writeBuf_rg24[2] = 0x23;  		// This sets the 8 LSBs of the config register (bits  7-0) to 00100011   
    96b0:	e3a03023 	mov	r3, #35	; 0x23
    96b4:	e54b300e 	strb	r3, [fp, #-14]
  // First Hex is sample Rate. (001) sets to 250SPS + Comp Mode (0)
  // Second Hex is Comp. config. (0011) disable the comparator


  // Initialize the buffer used to read data from the ADS1015 to 0
  l_readBuf_rg16[0]= 0;		
    96b8:	e3a03000 	mov	r3, #0
    96bc:	e54b3014 	strb	r3, [fp, #-20]
  l_readBuf_rg16[1]= 0;
    96c0:	e3a03000 	mov	r3, #0
    96c4:	e54b3013 	strb	r3, [fp, #-19]
  
  // Write l_writeBuf_rg24 to the ADS1015, the 3 specifies the number of bytes we are writing,
  // this begins a continuous conversion
  l_checkerror_bl = g_lldI2c_WriteI2c_bl(l_address_ui8,l_writeBuf_rg24,3);
    96c8:	e55b2006 	ldrb	r2, [fp, #-6]
    96cc:	e24b3010 	sub	r3, fp, #16
    96d0:	e1a00002 	mov	r0, r2
    96d4:	e1a01003 	mov	r1, r3
    96d8:	e3a02003 	mov	r2, #3
    96dc:	eb000b1d 	bl	c358 <g_lldI2c_WriteI2c_bl>
    96e0:	e1a03000 	mov	r3, r0
    96e4:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    96e8:	e55b3007 	ldrb	r3, [fp, #-7]
    96ec:	e3530001 	cmp	r3, #1
    96f0:	1a000001 	bne	96fc <g_halADC_get_ui16+0xd4>
	{
	return -1;
    96f4:	eddf7a43 	vldr	s15, [pc, #268]	; 9808 <g_halADC_get_ui16+0x1e0>
    96f8:	ea00003b 	b	97ec <g_halADC_get_ui16+0x1c4>
	}

  // Read the config register into readBuf
  l_checkerror_bl = g_lldI2c_ReadI2c_bl(l_address_ui8,l_readBuf_rg16,2);
    96fc:	e55b2006 	ldrb	r2, [fp, #-6]
    9700:	e24b3014 	sub	r3, fp, #20
    9704:	e1a00002 	mov	r0, r2
    9708:	e1a01003 	mov	r1, r3
    970c:	e3a02002 	mov	r2, #2
    9710:	eb000b48 	bl	c438 <g_lldI2c_ReadI2c_bl>
    9714:	e1a03000 	mov	r3, r0
    9718:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    971c:	e55b3007 	ldrb	r3, [fp, #-7]
    9720:	e3530001 	cmp	r3, #1
    9724:	1a000001 	bne	9730 <g_halADC_get_ui16+0x108>
	{
	return -1;
    9728:	eddf7a36 	vldr	s15, [pc, #216]	; 9808 <g_halADC_get_ui16+0x1e0>
    972c:	ea00002e 	b	97ec <g_halADC_get_ui16+0x1c4>
	}	
	
  // Set pointer register to 0 to read from the conversion register
  l_writeBuf_rg24[0] = 0;			
    9730:	e3a03000 	mov	r3, #0
    9734:	e54b3010 	strb	r3, [fp, #-16]
  l_checkerror_bl = g_lldI2c_WriteI2c_bl(l_address_ui8, l_writeBuf_rg24,1);
    9738:	e55b2006 	ldrb	r2, [fp, #-6]
    973c:	e24b3010 	sub	r3, fp, #16
    9740:	e1a00002 	mov	r0, r2
    9744:	e1a01003 	mov	r1, r3
    9748:	e3a02001 	mov	r2, #1
    974c:	eb000b01 	bl	c358 <g_lldI2c_WriteI2c_bl>
    9750:	e1a03000 	mov	r3, r0
    9754:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    9758:	e55b3007 	ldrb	r3, [fp, #-7]
    975c:	e3530001 	cmp	r3, #1
    9760:	1a000001 	bne	976c <g_halADC_get_ui16+0x144>
	{
	return -1;
    9764:	eddf7a27 	vldr	s15, [pc, #156]	; 9808 <g_halADC_get_ui16+0x1e0>
    9768:	ea00001f 	b	97ec <g_halADC_get_ui16+0x1c4>
	}

  // Read the contents of the conversion register into readBuf		
  l_checkerror_bl = g_lldI2c_ReadI2c_bl(l_address_ui8,l_readBuf_rg16,2);	
    976c:	e55b2006 	ldrb	r2, [fp, #-6]
    9770:	e24b3014 	sub	r3, fp, #20
    9774:	e1a00002 	mov	r0, r2
    9778:	e1a01003 	mov	r1, r3
    977c:	e3a02002 	mov	r2, #2
    9780:	eb000b2c 	bl	c438 <g_lldI2c_ReadI2c_bl>
    9784:	e1a03000 	mov	r3, r0
    9788:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    978c:	e55b3007 	ldrb	r3, [fp, #-7]
    9790:	e3530001 	cmp	r3, #1
    9794:	1a000001 	bne	97a0 <g_halADC_get_ui16+0x178>
	{
	return -1;
    9798:	eddf7a1a 	vldr	s15, [pc, #104]	; 9808 <g_halADC_get_ui16+0x1e0>
    979c:	ea000012 	b	97ec <g_halADC_get_ui16+0x1c4>
	}

  // Combine the two bytes of readBuf into a single 16 bit result 
  l_val_ui16 = l_readBuf_rg16[0] << 8 | l_readBuf_rg16[1];	
    97a0:	e55b3014 	ldrb	r3, [fp, #-20]
    97a4:	e1a03403 	lsl	r3, r3, #8
    97a8:	e6ff2073 	uxth	r2, r3
    97ac:	e55b3013 	ldrb	r3, [fp, #-19]
    97b0:	e1823003 	orr	r3, r2, r3
    97b4:	e6ff3073 	uxth	r3, r3
    97b8:	e14b30ba 	strh	r3, [fp, #-10]
  l_val_ui16 = l_val_ui16 >> 4; 
    97bc:	e15b30ba 	ldrh	r3, [fp, #-10]
    97c0:	e1a03223 	lsr	r3, r3, #4
    97c4:	e14b30ba 	strh	r3, [fp, #-10]

  return((float)l_val_ui16*4.096/2047.0);
    97c8:	e15b30ba 	ldrh	r3, [fp, #-10]
    97cc:	ee073a10 	vmov	s14, r3
    97d0:	eef87a47 	vcvt.f32.u32	s15, s14
    97d4:	eeb76ae7 	vcvt.f64.f32	d6, s15
    97d8:	ed9f7b06 	vldr	d7, [pc, #24]	; 97f8 <g_halADC_get_ui16+0x1d0>
    97dc:	ee266b07 	vmul.f64	d6, d6, d7
    97e0:	ed9f7b06 	vldr	d7, [pc, #24]	; 9800 <g_halADC_get_ui16+0x1d8>
    97e4:	ee867b07 	vdiv.f64	d7, d6, d7
    97e8:	eef77bc7 	vcvt.f32.f64	s15, d7

}
    97ec:	eeb00a67 	vmov.f32	s0, s15
    97f0:	e24bd004 	sub	sp, fp, #4
    97f4:	e8bd8800 	pop	{fp, pc}
    97f8:	d2f1a9fc 	.word	0xd2f1a9fc
    97fc:	4010624d 	.word	0x4010624d
    9800:	00000000 	.word	0x00000000
    9804:	409ffc00 	.word	0x409ffc00
    9808:	bf800000 	.word	0xbf800000
    980c:	e1a00000 	nop			; (mov r0, r0)

00009810 <g_halBatCheck_getBatteryStatus_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halBatCheck_getBatteryStatus_f64(void)
{
    9810:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9814:	e28db000 	add	fp, sp, #0
	return m_batteryLevel_f64;
    9818:	e59f3014 	ldr	r3, [pc, #20]	; 9834 <g_halBatCheck_getBatteryStatus_f64+0x24>
    981c:	e1c320d0 	ldrd	r2, [r3]
    9820:	ec432b17 	vmov	d7, r2, r3
}
    9824:	eeb00b47 	vmov.f64	d0, d7
    9828:	e24bd000 	sub	sp, fp, #0
    982c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    9830:	e12fff1e 	bx	lr
    9834:	000102a8 	.word	0x000102a8

00009838 <g_halBatCheck_readBatStatusFromI2C_bl>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
unsigned int  g_halBatCheck_readBatStatusFromI2C_bl(void)
{
    9838:	e92d4800 	push	{fp, lr}
    983c:	e28db004 	add	fp, sp, #4
    9840:	e24dd008 	sub	sp, sp, #8
	double l_batteryLevel_f64;

	l_batteryLevel_f64=g_halADC_get_ui16(M_HAL_BATCHECK_ADC_INPUT_PORT_UI8);
    9844:	e3a00001 	mov	r0, #1
    9848:	ebffff76 	bl	9628 <g_halADC_get_ui16>
    984c:	eef07a40 	vmov.f32	s15, s0
    9850:	eeb77ae7 	vcvt.f64.f32	d7, s15
    9854:	ed0b7b03 	vstr	d7, [fp, #-12]

	if(l_batteryLevel_f64<=0)
    9858:	ed1b7b03 	vldr	d7, [fp, #-12]
    985c:	eeb57bc0 	vcmpe.f64	d7, #0.0
    9860:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    9864:	8a000001 	bhi	9870 <g_halBatCheck_readBatStatusFromI2C_bl+0x38>
	{return M_HAL_BATCHECK_FAILED_BL;}
    9868:	e3a03001 	mov	r3, #1
    986c:	ea000003 	b	9880 <g_halBatCheck_readBatStatusFromI2C_bl+0x48>

	m_batteryLevel_f64=l_batteryLevel_f64;
    9870:	e59f1014 	ldr	r1, [pc, #20]	; 988c <g_halBatCheck_readBatStatusFromI2C_bl+0x54>
    9874:	e14b20dc 	ldrd	r2, [fp, #-12]
    9878:	e1c120f0 	strd	r2, [r1]

	return M_HAL_BATCHECK_SUCCESS_BL;
    987c:	e3a03000 	mov	r3, #0
}
    9880:	e1a00003 	mov	r0, r3
    9884:	e24bd004 	sub	sp, fp, #4
    9888:	e8bd8800 	pop	{fp, pc}
    988c:	000102a8 	.word	0x000102a8

00009890 <g_halGps_getTime_ui32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
unsigned int g_halGps_getTime_ui32(void)
{
    9890:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9894:	e28db000 	add	fp, sp, #0
	return l_time_ui32;
    9898:	e59f3010 	ldr	r3, [pc, #16]	; 98b0 <g_halGps_getTime_ui32+0x20>
    989c:	e5933000 	ldr	r3, [r3]
}
    98a0:	e1a00003 	mov	r0, r3
    98a4:	e24bd000 	sub	sp, fp, #0
    98a8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    98ac:	e12fff1e 	bx	lr
    98b0:	000102e0 	.word	0x000102e0

000098b4 <g_halGps_getLongitude_st>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
struct strPosition g_halGps_getLongitude_st(void)
{
    98b4:	e92d4800 	push	{fp, lr}
    98b8:	e28db004 	add	fp, sp, #4
    98bc:	e24dd008 	sub	sp, sp, #8
    98c0:	e50b0008 	str	r0, [fp, #-8]
	return l_gps_longitude_st;
    98c4:	e51b2008 	ldr	r2, [fp, #-8]
    98c8:	e59f3020 	ldr	r3, [pc, #32]	; 98f0 <g_halGps_getLongitude_st+0x3c>
    98cc:	e1a0c002 	mov	ip, r2
    98d0:	e1a0e003 	mov	lr, r3
    98d4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    98d8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    98dc:	e89e0003 	ldm	lr, {r0, r1}
    98e0:	e88c0003 	stm	ip, {r0, r1}
}
    98e4:	e51b0008 	ldr	r0, [fp, #-8]
    98e8:	e24bd004 	sub	sp, fp, #4
    98ec:	e8bd8800 	pop	{fp, pc}
    98f0:	000102b0 	.word	0x000102b0

000098f4 <g_halGps_getLatitude_st>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
struct strPosition g_halGps_getLatitude_st(void)
{
    98f4:	e92d4800 	push	{fp, lr}
    98f8:	e28db004 	add	fp, sp, #4
    98fc:	e24dd008 	sub	sp, sp, #8
    9900:	e50b0008 	str	r0, [fp, #-8]
	return l_gps_latitude_st;
    9904:	e51b2008 	ldr	r2, [fp, #-8]
    9908:	e59f3020 	ldr	r3, [pc, #32]	; 9930 <g_halGps_getLatitude_st+0x3c>
    990c:	e1a0c002 	mov	ip, r2
    9910:	e1a0e003 	mov	lr, r3
    9914:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9918:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    991c:	e89e0003 	ldm	lr, {r0, r1}
    9920:	e88c0003 	stm	ip, {r0, r1}
}
    9924:	e51b0008 	ldr	r0, [fp, #-8]
    9928:	e24bd004 	sub	sp, fp, #4
    992c:	e8bd8800 	pop	{fp, pc}
    9930:	000102c8 	.word	0x000102c8

00009934 <g_halGps_getFix_ch>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
char g_halGps_getFix_ch(void)
{
    9934:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9938:	e28db000 	add	fp, sp, #0
	return l_fix_ch;
    993c:	e59f3010 	ldr	r3, [pc, #16]	; 9954 <g_halGps_getFix_ch+0x20>
    9940:	e5d33000 	ldrb	r3, [r3]
}
    9944:	e1a00003 	mov	r0, r3
    9948:	e24bd000 	sub	sp, fp, #0
    994c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    9950:	e12fff1e 	bx	lr
    9954:	000102e4 	.word	0x000102e4

00009958 <g_halGps_getVelocity_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getVelocity_f64(void)
{
    9958:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    995c:	e28db000 	add	fp, sp, #0
	return l_velocity_f64;
    9960:	e59f3014 	ldr	r3, [pc, #20]	; 997c <g_halGps_getVelocity_f64+0x24>
    9964:	e1c320d0 	ldrd	r2, [r3]
    9968:	ec432b17 	vmov	d7, r2, r3
}
    996c:	eeb00b47 	vmov.f64	d0, d7
    9970:	e24bd000 	sub	sp, fp, #0
    9974:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    9978:	e12fff1e 	bx	lr
    997c:	000102e8 	.word	0x000102e8

00009980 <g_halGps_getDirection_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getDirection_f64(void)
{
    9980:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9984:	e28db000 	add	fp, sp, #0
	return l_direction_f64;
    9988:	e59f3014 	ldr	r3, [pc, #20]	; 99a4 <g_halGps_getDirection_f64+0x24>
    998c:	e1c320d0 	ldrd	r2, [r3]
    9990:	ec432b17 	vmov	d7, r2, r3
}
    9994:	eeb00b47 	vmov.f64	d0, d7
    9998:	e24bd000 	sub	sp, fp, #0
    999c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    99a0:	e12fff1e 	bx	lr
    99a4:	000102f0 	.word	0x000102f0

000099a8 <g_halGps_getDate_ui32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
unsigned int g_halGps_getDate_ui32(void)
{
    99a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    99ac:	e28db000 	add	fp, sp, #0
	return l_date_ui32;
    99b0:	e59f3010 	ldr	r3, [pc, #16]	; 99c8 <g_halGps_getDate_ui32+0x20>
    99b4:	e5933000 	ldr	r3, [r3]
}
    99b8:	e1a00003 	mov	r0, r3
    99bc:	e24bd000 	sub	sp, fp, #0
    99c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    99c4:	e12fff1e 	bx	lr
    99c8:	000102f8 	.word	0x000102f8

000099cc <g_halGps_getHeight_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getHeight_f64(void)
{
    99cc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    99d0:	e28db000 	add	fp, sp, #0
	return l_height_f64;
    99d4:	e59f3014 	ldr	r3, [pc, #20]	; 99f0 <g_halGps_getHeight_f64+0x24>
    99d8:	e1c320d0 	ldrd	r2, [r3]
    99dc:	ec432b17 	vmov	d7, r2, r3
}
    99e0:	eeb00b47 	vmov.f64	d0, d7
    99e4:	e24bd000 	sub	sp, fp, #0
    99e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    99ec:	e12fff1e 	bx	lr
    99f0:	00010300 	.word	0x00010300

000099f4 <g_halGps_getGeoid_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getGeoid_f64(void)
{
    99f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    99f8:	e28db000 	add	fp, sp, #0
	return l_geoid_f64;
    99fc:	e59f3014 	ldr	r3, [pc, #20]	; 9a18 <g_halGps_getGeoid_f64+0x24>
    9a00:	e1c320d0 	ldrd	r2, [r3]
    9a04:	ec432b17 	vmov	d7, r2, r3
}
    9a08:	eeb00b47 	vmov.f64	d0, d7
    9a0c:	e24bd000 	sub	sp, fp, #0
    9a10:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    9a14:	e12fff1e 	bx	lr
    9a18:	00010308 	.word	0x00010308

00009a1c <l_resetMessage1Values_vd>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void l_resetMessage1Values_vd(void)
{
    9a1c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9a20:	e28db000 	add	fp, sp, #0
	l_time_ui32=0;
    9a24:	e59f3098 	ldr	r3, [pc, #152]	; 9ac4 <l_resetMessage1Values_vd+0xa8>
    9a28:	e3a02000 	mov	r2, #0
    9a2c:	e5832000 	str	r2, [r3]
	l_gps_longitude_st.l_degree_ui32=0;
    9a30:	e59f3090 	ldr	r3, [pc, #144]	; 9ac8 <l_resetMessage1Values_vd+0xac>
    9a34:	e3a02000 	mov	r2, #0
    9a38:	e5832000 	str	r2, [r3]
	l_gps_longitude_st.l_minutes_ui32=0;
    9a3c:	e59f3084 	ldr	r3, [pc, #132]	; 9ac8 <l_resetMessage1Values_vd+0xac>
    9a40:	e3a02000 	mov	r2, #0
    9a44:	e5832004 	str	r2, [r3, #4]
	l_gps_longitude_st.l_seconds_f64=0;
    9a48:	e59f1078 	ldr	r1, [pc, #120]	; 9ac8 <l_resetMessage1Values_vd+0xac>
    9a4c:	e3a02000 	mov	r2, #0
    9a50:	e3a03000 	mov	r3, #0
    9a54:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_longitude_st.l_cardinalDirection_ch=' ';
    9a58:	e59f3068 	ldr	r3, [pc, #104]	; 9ac8 <l_resetMessage1Values_vd+0xac>
    9a5c:	e3a02020 	mov	r2, #32
    9a60:	e5c32010 	strb	r2, [r3, #16]
	l_gps_latitude_st.l_degree_ui32=0;
    9a64:	e59f3060 	ldr	r3, [pc, #96]	; 9acc <l_resetMessage1Values_vd+0xb0>
    9a68:	e3a02000 	mov	r2, #0
    9a6c:	e5832000 	str	r2, [r3]
	l_gps_latitude_st.l_minutes_ui32=0;
    9a70:	e59f3054 	ldr	r3, [pc, #84]	; 9acc <l_resetMessage1Values_vd+0xb0>
    9a74:	e3a02000 	mov	r2, #0
    9a78:	e5832004 	str	r2, [r3, #4]
	l_gps_latitude_st.l_seconds_f64=0;
    9a7c:	e59f1048 	ldr	r1, [pc, #72]	; 9acc <l_resetMessage1Values_vd+0xb0>
    9a80:	e3a02000 	mov	r2, #0
    9a84:	e3a03000 	mov	r3, #0
    9a88:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_latitude_st.l_cardinalDirection_ch=' ';
    9a8c:	e59f3038 	ldr	r3, [pc, #56]	; 9acc <l_resetMessage1Values_vd+0xb0>
    9a90:	e3a02020 	mov	r2, #32
    9a94:	e5c32010 	strb	r2, [r3, #16]
	l_height_f64=0;
    9a98:	e59f1030 	ldr	r1, [pc, #48]	; 9ad0 <l_resetMessage1Values_vd+0xb4>
    9a9c:	e3a02000 	mov	r2, #0
    9aa0:	e3a03000 	mov	r3, #0
    9aa4:	e1c120f0 	strd	r2, [r1]
	l_geoid_f64=0;
    9aa8:	e59f1024 	ldr	r1, [pc, #36]	; 9ad4 <l_resetMessage1Values_vd+0xb8>
    9aac:	e3a02000 	mov	r2, #0
    9ab0:	e3a03000 	mov	r3, #0
    9ab4:	e1c120f0 	strd	r2, [r1]
}
    9ab8:	e24bd000 	sub	sp, fp, #0
    9abc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    9ac0:	e12fff1e 	bx	lr
    9ac4:	000102e0 	.word	0x000102e0
    9ac8:	000102b0 	.word	0x000102b0
    9acc:	000102c8 	.word	0x000102c8
    9ad0:	00010300 	.word	0x00010300
    9ad4:	00010308 	.word	0x00010308

00009ad8 <l_resetMessage2Values_vd>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void l_resetMessage2Values_vd(void)
{
    9ad8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9adc:	e28db000 	add	fp, sp, #0
	l_time_ui32=0;
    9ae0:	e59f30b0 	ldr	r3, [pc, #176]	; 9b98 <l_resetMessage2Values_vd+0xc0>
    9ae4:	e3a02000 	mov	r2, #0
    9ae8:	e5832000 	str	r2, [r3]
	l_fix_ch=' ';
    9aec:	e59f30a8 	ldr	r3, [pc, #168]	; 9b9c <l_resetMessage2Values_vd+0xc4>
    9af0:	e3a02020 	mov	r2, #32
    9af4:	e5c32000 	strb	r2, [r3]
	l_gps_longitude_st.l_degree_ui32=0;
    9af8:	e59f30a0 	ldr	r3, [pc, #160]	; 9ba0 <l_resetMessage2Values_vd+0xc8>
    9afc:	e3a02000 	mov	r2, #0
    9b00:	e5832000 	str	r2, [r3]
	l_gps_longitude_st.l_minutes_ui32=0;
    9b04:	e59f3094 	ldr	r3, [pc, #148]	; 9ba0 <l_resetMessage2Values_vd+0xc8>
    9b08:	e3a02000 	mov	r2, #0
    9b0c:	e5832004 	str	r2, [r3, #4]
	l_gps_longitude_st.l_seconds_f64=0;
    9b10:	e59f1088 	ldr	r1, [pc, #136]	; 9ba0 <l_resetMessage2Values_vd+0xc8>
    9b14:	e3a02000 	mov	r2, #0
    9b18:	e3a03000 	mov	r3, #0
    9b1c:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_longitude_st.l_cardinalDirection_ch=' ';
    9b20:	e59f3078 	ldr	r3, [pc, #120]	; 9ba0 <l_resetMessage2Values_vd+0xc8>
    9b24:	e3a02020 	mov	r2, #32
    9b28:	e5c32010 	strb	r2, [r3, #16]
	l_gps_latitude_st.l_degree_ui32=0;
    9b2c:	e59f3070 	ldr	r3, [pc, #112]	; 9ba4 <l_resetMessage2Values_vd+0xcc>
    9b30:	e3a02000 	mov	r2, #0
    9b34:	e5832000 	str	r2, [r3]
	l_gps_latitude_st.l_minutes_ui32=0;
    9b38:	e59f3064 	ldr	r3, [pc, #100]	; 9ba4 <l_resetMessage2Values_vd+0xcc>
    9b3c:	e3a02000 	mov	r2, #0
    9b40:	e5832004 	str	r2, [r3, #4]
	l_gps_latitude_st.l_seconds_f64=0;
    9b44:	e59f1058 	ldr	r1, [pc, #88]	; 9ba4 <l_resetMessage2Values_vd+0xcc>
    9b48:	e3a02000 	mov	r2, #0
    9b4c:	e3a03000 	mov	r3, #0
    9b50:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_latitude_st.l_cardinalDirection_ch=' ';
    9b54:	e59f3048 	ldr	r3, [pc, #72]	; 9ba4 <l_resetMessage2Values_vd+0xcc>
    9b58:	e3a02020 	mov	r2, #32
    9b5c:	e5c32010 	strb	r2, [r3, #16]
	l_velocity_f64=0;
    9b60:	e59f1040 	ldr	r1, [pc, #64]	; 9ba8 <l_resetMessage2Values_vd+0xd0>
    9b64:	e3a02000 	mov	r2, #0
    9b68:	e3a03000 	mov	r3, #0
    9b6c:	e1c120f0 	strd	r2, [r1]
	l_direction_f64=0;
    9b70:	e59f1034 	ldr	r1, [pc, #52]	; 9bac <l_resetMessage2Values_vd+0xd4>
    9b74:	e3a02000 	mov	r2, #0
    9b78:	e3a03000 	mov	r3, #0
    9b7c:	e1c120f0 	strd	r2, [r1]
	l_date_ui32=0;
    9b80:	e59f3028 	ldr	r3, [pc, #40]	; 9bb0 <l_resetMessage2Values_vd+0xd8>
    9b84:	e3a02000 	mov	r2, #0
    9b88:	e5832000 	str	r2, [r3]
}
    9b8c:	e24bd000 	sub	sp, fp, #0
    9b90:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    9b94:	e12fff1e 	bx	lr
    9b98:	000102e0 	.word	0x000102e0
    9b9c:	000102e4 	.word	0x000102e4
    9ba0:	000102b0 	.word	0x000102b0
    9ba4:	000102c8 	.word	0x000102c8
    9ba8:	000102e8 	.word	0x000102e8
    9bac:	000102f0 	.word	0x000102f0
    9bb0:	000102f8 	.word	0x000102f8

00009bb4 <g_halGps_getData_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGps_getData_i32(void)
{
    9bb4:	e92d4800 	push	{fp, lr}
    9bb8:	e28db004 	add	fp, sp, #4

	l_rec_Data_ch=g_lldUart_readByte_ch();
    9bbc:	eb000af8 	bl	c7a4 <g_lldUart_readByte_ch>
    9bc0:	e1a03000 	mov	r3, r0
    9bc4:	e1a02003 	mov	r2, r3
    9bc8:	e59f38e0 	ldr	r3, [pc, #2272]	; a4b0 <g_halGps_getData_i32+0x8fc>
    9bcc:	e5c32000 	strb	r2, [r3]

	if(!l_message_position_ch)//check which message is received
    9bd0:	e59f38c4 	ldr	r3, [pc, #2244]	; a49c <g_halGps_getData_i32+0x8e8>
    9bd4:	e5d33000 	ldrb	r3, [r3]
    9bd8:	e3530000 	cmp	r3, #0
    9bdc:	1a0000a6 	bne	9e7c <g_halGps_getData_i32+0x2c8>
	{
		if(l_rec_Data_ch=='$')
    9be0:	e59f38c8 	ldr	r3, [pc, #2248]	; a4b0 <g_halGps_getData_i32+0x8fc>
    9be4:	e5d33000 	ldrb	r3, [r3]
    9be8:	e3530024 	cmp	r3, #36	; 0x24
    9bec:	1a00000b 	bne	9c20 <g_halGps_getData_i32+0x6c>
		{l_header_position_ch=1;l_succeded_i32=0;l_succeded_i32++;}
    9bf0:	e59f38a8 	ldr	r3, [pc, #2216]	; a4a0 <g_halGps_getData_i32+0x8ec>
    9bf4:	e3a02001 	mov	r2, #1
    9bf8:	e5c32000 	strb	r2, [r3]
    9bfc:	e59f38b0 	ldr	r3, [pc, #2224]	; a4b4 <g_halGps_getData_i32+0x900>
    9c00:	e3a02000 	mov	r2, #0
    9c04:	e5832000 	str	r2, [r3]
    9c08:	e59f38a4 	ldr	r3, [pc, #2212]	; a4b4 <g_halGps_getData_i32+0x900>
    9c0c:	e5933000 	ldr	r3, [r3]
    9c10:	e2832001 	add	r2, r3, #1
    9c14:	e59f3898 	ldr	r3, [pc, #2200]	; a4b4 <g_halGps_getData_i32+0x900>
    9c18:	e5832000 	str	r2, [r3]
    9c1c:	ea000413 	b	ac70 <g_halGps_getData_i32+0x10bc>
		else if (l_header_position_ch==1 && l_rec_Data_ch=='G')
    9c20:	e59f3878 	ldr	r3, [pc, #2168]	; a4a0 <g_halGps_getData_i32+0x8ec>
    9c24:	e5d33000 	ldrb	r3, [r3]
    9c28:	e3530001 	cmp	r3, #1
    9c2c:	1a00000c 	bne	9c64 <g_halGps_getData_i32+0xb0>
    9c30:	e59f3878 	ldr	r3, [pc, #2168]	; a4b0 <g_halGps_getData_i32+0x8fc>
    9c34:	e5d33000 	ldrb	r3, [r3]
    9c38:	e3530047 	cmp	r3, #71	; 0x47
    9c3c:	1a000008 	bne	9c64 <g_halGps_getData_i32+0xb0>
		{l_header_position_ch=2;l_succeded_i32++;}
    9c40:	e59f3858 	ldr	r3, [pc, #2136]	; a4a0 <g_halGps_getData_i32+0x8ec>
    9c44:	e3a02002 	mov	r2, #2
    9c48:	e5c32000 	strb	r2, [r3]
    9c4c:	e59f3860 	ldr	r3, [pc, #2144]	; a4b4 <g_halGps_getData_i32+0x900>
    9c50:	e5933000 	ldr	r3, [r3]
    9c54:	e2832001 	add	r2, r3, #1
    9c58:	e59f3854 	ldr	r3, [pc, #2132]	; a4b4 <g_halGps_getData_i32+0x900>
    9c5c:	e5832000 	str	r2, [r3]
    9c60:	ea000084 	b	9e78 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==2 && l_rec_Data_ch=='P')
    9c64:	e59f3834 	ldr	r3, [pc, #2100]	; a4a0 <g_halGps_getData_i32+0x8ec>
    9c68:	e5d33000 	ldrb	r3, [r3]
    9c6c:	e3530002 	cmp	r3, #2
    9c70:	1a00000c 	bne	9ca8 <g_halGps_getData_i32+0xf4>
    9c74:	e59f3834 	ldr	r3, [pc, #2100]	; a4b0 <g_halGps_getData_i32+0x8fc>
    9c78:	e5d33000 	ldrb	r3, [r3]
    9c7c:	e3530050 	cmp	r3, #80	; 0x50
    9c80:	1a000008 	bne	9ca8 <g_halGps_getData_i32+0xf4>
		{l_header_position_ch=3;l_succeded_i32++;}
    9c84:	e59f3814 	ldr	r3, [pc, #2068]	; a4a0 <g_halGps_getData_i32+0x8ec>
    9c88:	e3a02003 	mov	r2, #3
    9c8c:	e5c32000 	strb	r2, [r3]
    9c90:	e59f381c 	ldr	r3, [pc, #2076]	; a4b4 <g_halGps_getData_i32+0x900>
    9c94:	e5933000 	ldr	r3, [r3]
    9c98:	e2832001 	add	r2, r3, #1
    9c9c:	e59f3810 	ldr	r3, [pc, #2064]	; a4b4 <g_halGps_getData_i32+0x900>
    9ca0:	e5832000 	str	r2, [r3]
    9ca4:	ea000073 	b	9e78 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==3 && l_rec_Data_ch=='G')
    9ca8:	e59f37f0 	ldr	r3, [pc, #2032]	; a4a0 <g_halGps_getData_i32+0x8ec>
    9cac:	e5d33000 	ldrb	r3, [r3]
    9cb0:	e3530003 	cmp	r3, #3
    9cb4:	1a00000c 	bne	9cec <g_halGps_getData_i32+0x138>
    9cb8:	e59f37f0 	ldr	r3, [pc, #2032]	; a4b0 <g_halGps_getData_i32+0x8fc>
    9cbc:	e5d33000 	ldrb	r3, [r3]
    9cc0:	e3530047 	cmp	r3, #71	; 0x47
    9cc4:	1a000008 	bne	9cec <g_halGps_getData_i32+0x138>
		{l_header_position_ch=14;l_succeded_i32++;}
    9cc8:	e59f37d0 	ldr	r3, [pc, #2000]	; a4a0 <g_halGps_getData_i32+0x8ec>
    9ccc:	e3a0200e 	mov	r2, #14
    9cd0:	e5c32000 	strb	r2, [r3]
    9cd4:	e59f37d8 	ldr	r3, [pc, #2008]	; a4b4 <g_halGps_getData_i32+0x900>
    9cd8:	e5933000 	ldr	r3, [r3]
    9cdc:	e2832001 	add	r2, r3, #1
    9ce0:	e59f37cc 	ldr	r3, [pc, #1996]	; a4b4 <g_halGps_getData_i32+0x900>
    9ce4:	e5832000 	str	r2, [r3]
    9ce8:	ea000062 	b	9e78 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==3 && l_rec_Data_ch=='R')
    9cec:	e59f37ac 	ldr	r3, [pc, #1964]	; a4a0 <g_halGps_getData_i32+0x8ec>
    9cf0:	e5d33000 	ldrb	r3, [r3]
    9cf4:	e3530003 	cmp	r3, #3
    9cf8:	1a00000c 	bne	9d30 <g_halGps_getData_i32+0x17c>
    9cfc:	e59f37ac 	ldr	r3, [pc, #1964]	; a4b0 <g_halGps_getData_i32+0x8fc>
    9d00:	e5d33000 	ldrb	r3, [r3]
    9d04:	e3530052 	cmp	r3, #82	; 0x52
    9d08:	1a000008 	bne	9d30 <g_halGps_getData_i32+0x17c>
		{l_header_position_ch=24;l_succeded_i32++;}
    9d0c:	e59f378c 	ldr	r3, [pc, #1932]	; a4a0 <g_halGps_getData_i32+0x8ec>
    9d10:	e3a02018 	mov	r2, #24
    9d14:	e5c32000 	strb	r2, [r3]
    9d18:	e59f3794 	ldr	r3, [pc, #1940]	; a4b4 <g_halGps_getData_i32+0x900>
    9d1c:	e5933000 	ldr	r3, [r3]
    9d20:	e2832001 	add	r2, r3, #1
    9d24:	e59f3788 	ldr	r3, [pc, #1928]	; a4b4 <g_halGps_getData_i32+0x900>
    9d28:	e5832000 	str	r2, [r3]
    9d2c:	ea000051 	b	9e78 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==14 && l_rec_Data_ch=='G')
    9d30:	e59f3768 	ldr	r3, [pc, #1896]	; a4a0 <g_halGps_getData_i32+0x8ec>
    9d34:	e5d33000 	ldrb	r3, [r3]
    9d38:	e353000e 	cmp	r3, #14
    9d3c:	1a00000c 	bne	9d74 <g_halGps_getData_i32+0x1c0>
    9d40:	e59f3768 	ldr	r3, [pc, #1896]	; a4b0 <g_halGps_getData_i32+0x8fc>
    9d44:	e5d33000 	ldrb	r3, [r3]
    9d48:	e3530047 	cmp	r3, #71	; 0x47
    9d4c:	1a000008 	bne	9d74 <g_halGps_getData_i32+0x1c0>
		{l_header_position_ch=15;l_succeded_i32++;}
    9d50:	e59f3748 	ldr	r3, [pc, #1864]	; a4a0 <g_halGps_getData_i32+0x8ec>
    9d54:	e3a0200f 	mov	r2, #15
    9d58:	e5c32000 	strb	r2, [r3]
    9d5c:	e59f3750 	ldr	r3, [pc, #1872]	; a4b4 <g_halGps_getData_i32+0x900>
    9d60:	e5933000 	ldr	r3, [r3]
    9d64:	e2832001 	add	r2, r3, #1
    9d68:	e59f3744 	ldr	r3, [pc, #1860]	; a4b4 <g_halGps_getData_i32+0x900>
    9d6c:	e5832000 	str	r2, [r3]
    9d70:	ea000040 	b	9e78 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==24 && l_rec_Data_ch=='M')
    9d74:	e59f3724 	ldr	r3, [pc, #1828]	; a4a0 <g_halGps_getData_i32+0x8ec>
    9d78:	e5d33000 	ldrb	r3, [r3]
    9d7c:	e3530018 	cmp	r3, #24
    9d80:	1a00000c 	bne	9db8 <g_halGps_getData_i32+0x204>
    9d84:	e59f3724 	ldr	r3, [pc, #1828]	; a4b0 <g_halGps_getData_i32+0x8fc>
    9d88:	e5d33000 	ldrb	r3, [r3]
    9d8c:	e353004d 	cmp	r3, #77	; 0x4d
    9d90:	1a000008 	bne	9db8 <g_halGps_getData_i32+0x204>
		{l_header_position_ch=25;l_succeded_i32++;}
    9d94:	e59f3704 	ldr	r3, [pc, #1796]	; a4a0 <g_halGps_getData_i32+0x8ec>
    9d98:	e3a02019 	mov	r2, #25
    9d9c:	e5c32000 	strb	r2, [r3]
    9da0:	e59f370c 	ldr	r3, [pc, #1804]	; a4b4 <g_halGps_getData_i32+0x900>
    9da4:	e5933000 	ldr	r3, [r3]
    9da8:	e2832001 	add	r2, r3, #1
    9dac:	e59f3700 	ldr	r3, [pc, #1792]	; a4b4 <g_halGps_getData_i32+0x900>
    9db0:	e5832000 	str	r2, [r3]
    9db4:	ea00002f 	b	9e78 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==15 && l_rec_Data_ch=='A')
    9db8:	e59f36e0 	ldr	r3, [pc, #1760]	; a4a0 <g_halGps_getData_i32+0x8ec>
    9dbc:	e5d33000 	ldrb	r3, [r3]
    9dc0:	e353000f 	cmp	r3, #15
    9dc4:	1a000013 	bne	9e18 <g_halGps_getData_i32+0x264>
    9dc8:	e59f36e0 	ldr	r3, [pc, #1760]	; a4b0 <g_halGps_getData_i32+0x8fc>
    9dcc:	e5d33000 	ldrb	r3, [r3]
    9dd0:	e3530041 	cmp	r3, #65	; 0x41
    9dd4:	1a00000f 	bne	9e18 <g_halGps_getData_i32+0x264>
		{	l_message_ch=1;l_resetMessage1Values_vd();l_data_position_ch=0;l_message_position_ch=1; l_succeded_i32++;}
    9dd8:	e59f36a8 	ldr	r3, [pc, #1704]	; a488 <g_halGps_getData_i32+0x8d4>
    9ddc:	e3a02001 	mov	r2, #1
    9de0:	e5c32000 	strb	r2, [r3]
    9de4:	ebffff0c 	bl	9a1c <l_resetMessage1Values_vd>
    9de8:	e59f36b4 	ldr	r3, [pc, #1716]	; a4a4 <g_halGps_getData_i32+0x8f0>
    9dec:	e3a02000 	mov	r2, #0
    9df0:	e5c32000 	strb	r2, [r3]
    9df4:	e59f36a0 	ldr	r3, [pc, #1696]	; a49c <g_halGps_getData_i32+0x8e8>
    9df8:	e3a02001 	mov	r2, #1
    9dfc:	e5c32000 	strb	r2, [r3]
    9e00:	e59f36ac 	ldr	r3, [pc, #1708]	; a4b4 <g_halGps_getData_i32+0x900>
    9e04:	e5933000 	ldr	r3, [r3]
    9e08:	e2832001 	add	r2, r3, #1
    9e0c:	e59f36a0 	ldr	r3, [pc, #1696]	; a4b4 <g_halGps_getData_i32+0x900>
    9e10:	e5832000 	str	r2, [r3]
    9e14:	ea000017 	b	9e78 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==25 && l_rec_Data_ch=='C')
    9e18:	e59f3680 	ldr	r3, [pc, #1664]	; a4a0 <g_halGps_getData_i32+0x8ec>
    9e1c:	e5d33000 	ldrb	r3, [r3]
    9e20:	e3530019 	cmp	r3, #25
    9e24:	1a000391 	bne	ac70 <g_halGps_getData_i32+0x10bc>
    9e28:	e59f3680 	ldr	r3, [pc, #1664]	; a4b0 <g_halGps_getData_i32+0x8fc>
    9e2c:	e5d33000 	ldrb	r3, [r3]
    9e30:	e3530043 	cmp	r3, #67	; 0x43
    9e34:	1a00038d 	bne	ac70 <g_halGps_getData_i32+0x10bc>
		{	l_message_ch=2;l_resetMessage2Values_vd();l_data_position_ch=0; l_message_position_ch=1; l_succeded_i32++;}
    9e38:	e59f3648 	ldr	r3, [pc, #1608]	; a488 <g_halGps_getData_i32+0x8d4>
    9e3c:	e3a02002 	mov	r2, #2
    9e40:	e5c32000 	strb	r2, [r3]
    9e44:	ebffff23 	bl	9ad8 <l_resetMessage2Values_vd>
    9e48:	e59f3654 	ldr	r3, [pc, #1620]	; a4a4 <g_halGps_getData_i32+0x8f0>
    9e4c:	e3a02000 	mov	r2, #0
    9e50:	e5c32000 	strb	r2, [r3]
    9e54:	e59f3640 	ldr	r3, [pc, #1600]	; a49c <g_halGps_getData_i32+0x8e8>
    9e58:	e3a02001 	mov	r2, #1
    9e5c:	e5c32000 	strb	r2, [r3]
    9e60:	e59f364c 	ldr	r3, [pc, #1612]	; a4b4 <g_halGps_getData_i32+0x900>
    9e64:	e5933000 	ldr	r3, [r3]
    9e68:	e2832001 	add	r2, r3, #1
    9e6c:	e59f3640 	ldr	r3, [pc, #1600]	; a4b4 <g_halGps_getData_i32+0x900>
    9e70:	e5832000 	str	r2, [r3]
    9e74:	ea00037d 	b	ac70 <g_halGps_getData_i32+0x10bc>
    9e78:	ea00037c 	b	ac70 <g_halGps_getData_i32+0x10bc>
	}
	else
	{
		switch (l_message_ch)//check data within the two important messages
    9e7c:	e59f3604 	ldr	r3, [pc, #1540]	; a488 <g_halGps_getData_i32+0x8d4>
    9e80:	e5d33000 	ldrb	r3, [r3]
    9e84:	e3530001 	cmp	r3, #1
    9e88:	0a000002 	beq	9e98 <g_halGps_getData_i32+0x2e4>
    9e8c:	e3530002 	cmp	r3, #2
    9e90:	0a0001ab 	beq	a544 <g_halGps_getData_i32+0x990>
    9e94:	ea000375 	b	ac70 <g_halGps_getData_i32+0x10bc>
		{
		case 1://$GPGGA ,205003.000 ,4841.9261 ,N ,00918.7276 ,E ,1 ,06 ,1.12 ,283.5 ,M ,48.0 ,M , ,*6D        38
			switch (l_rec_Data_ch)
    9e98:	e59f3610 	ldr	r3, [pc, #1552]	; a4b0 <g_halGps_getData_i32+0x8fc>
    9e9c:	e5d33000 	ldrb	r3, [r3]
    9ea0:	e353000a 	cmp	r3, #10
    9ea4:	0a00000e 	beq	9ee4 <g_halGps_getData_i32+0x330>
    9ea8:	e353002c 	cmp	r3, #44	; 0x2c
    9eac:	1a000018 	bne	9f14 <g_halGps_getData_i32+0x360>
			{
			case ',':
				l_data_position_ch++;
    9eb0:	e59f35ec 	ldr	r3, [pc, #1516]	; a4a4 <g_halGps_getData_i32+0x8f0>
    9eb4:	e5d33000 	ldrb	r3, [r3]
    9eb8:	e2833001 	add	r3, r3, #1
    9ebc:	e6ef2073 	uxtb	r2, r3
    9ec0:	e59f35dc 	ldr	r3, [pc, #1500]	; a4a4 <g_halGps_getData_i32+0x8f0>
    9ec4:	e5c32000 	strb	r2, [r3]
				l_fieldpointer_i32=0;
    9ec8:	e59f35e8 	ldr	r3, [pc, #1512]	; a4b8 <g_halGps_getData_i32+0x904>
    9ecc:	e3a02000 	mov	r2, #0
    9ed0:	e5832000 	str	r2, [r3]
				l_decimal_place_factor_i32=10;
    9ed4:	e59f35bc 	ldr	r3, [pc, #1468]	; a498 <g_halGps_getData_i32+0x8e4>
    9ed8:	e3a0200a 	mov	r2, #10
    9edc:	e5832000 	str	r2, [r3]
				break;
    9ee0:	ea000196 	b	a540 <g_halGps_getData_i32+0x98c>
			case 10://LF found
				l_succeded_i32=l_succeded_i32+100;	//short comment
    9ee4:	e59f35c8 	ldr	r3, [pc, #1480]	; a4b4 <g_halGps_getData_i32+0x900>
    9ee8:	e5933000 	ldr	r3, [r3]
    9eec:	e2832064 	add	r2, r3, #100	; 0x64
    9ef0:	e59f35bc 	ldr	r3, [pc, #1468]	; a4b4 <g_halGps_getData_i32+0x900>
    9ef4:	e5832000 	str	r2, [r3]
				l_message_position_ch=0;
    9ef8:	e59f359c 	ldr	r3, [pc, #1436]	; a49c <g_halGps_getData_i32+0x8e8>
    9efc:	e3a02000 	mov	r2, #0
    9f00:	e5c32000 	strb	r2, [r3]
				l_header_position_ch=0;
    9f04:	e59f3594 	ldr	r3, [pc, #1428]	; a4a0 <g_halGps_getData_i32+0x8ec>
    9f08:	e3a02000 	mov	r2, #0
    9f0c:	e5c32000 	strb	r2, [r3]
				break;
    9f10:	ea00018a 	b	a540 <g_halGps_getData_i32+0x98c>
			default:
				switch (l_data_position_ch)
    9f14:	e59f3588 	ldr	r3, [pc, #1416]	; a4a4 <g_halGps_getData_i32+0x8f0>
    9f18:	e5d33000 	ldrb	r3, [r3]
    9f1c:	e2433001 	sub	r3, r3, #1
    9f20:	e353000a 	cmp	r3, #10
    9f24:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9f28:	ea000183 	b	a53c <g_halGps_getData_i32+0x988>
    9f2c:	00009f58 	.word	0x00009f58
    9f30:	00009fc8 	.word	0x00009fc8
    9f34:	0000a104 	.word	0x0000a104
    9f38:	0000a150 	.word	0x0000a150
    9f3c:	0000a28c 	.word	0x0000a28c
    9f40:	0000a53c 	.word	0x0000a53c
    9f44:	0000a53c 	.word	0x0000a53c
    9f48:	0000a53c 	.word	0x0000a53c
    9f4c:	0000a2d8 	.word	0x0000a2d8
    9f50:	0000a53c 	.word	0x0000a53c
    9f54:	0000a3e4 	.word	0x0000a3e4
				{
				case 1://Time
					if(l_fieldpointer_i32<6)
    9f58:	e59f3558 	ldr	r3, [pc, #1368]	; a4b8 <g_halGps_getData_i32+0x904>
    9f5c:	e5933000 	ldr	r3, [r3]
    9f60:	e3530005 	cmp	r3, #5
    9f64:	ca000011 	bgt	9fb0 <g_halGps_getData_i32+0x3fc>
					{
						l_time_ui32=l_time_ui32*10+(l_rec_Data_ch-48);
    9f68:	e59f3538 	ldr	r3, [pc, #1336]	; a4a8 <g_halGps_getData_i32+0x8f4>
    9f6c:	e5932000 	ldr	r2, [r3]
    9f70:	e1a03002 	mov	r3, r2
    9f74:	e1a03103 	lsl	r3, r3, #2
    9f78:	e0833002 	add	r3, r3, r2
    9f7c:	e1a03083 	lsl	r3, r3, #1
    9f80:	e1a02003 	mov	r2, r3
    9f84:	e59f3524 	ldr	r3, [pc, #1316]	; a4b0 <g_halGps_getData_i32+0x8fc>
    9f88:	e5d33000 	ldrb	r3, [r3]
    9f8c:	e0823003 	add	r3, r2, r3
    9f90:	e2432030 	sub	r2, r3, #48	; 0x30
    9f94:	e59f350c 	ldr	r3, [pc, #1292]	; a4a8 <g_halGps_getData_i32+0x8f4>
    9f98:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    9f9c:	e59f3510 	ldr	r3, [pc, #1296]	; a4b4 <g_halGps_getData_i32+0x900>
    9fa0:	e5933000 	ldr	r3, [r3]
    9fa4:	e2832001 	add	r2, r3, #1
    9fa8:	e59f3504 	ldr	r3, [pc, #1284]	; a4b4 <g_halGps_getData_i32+0x900>
    9fac:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    9fb0:	e59f3500 	ldr	r3, [pc, #1280]	; a4b8 <g_halGps_getData_i32+0x904>
    9fb4:	e5933000 	ldr	r3, [r3]
    9fb8:	e2832001 	add	r2, r3, #1
    9fbc:	e59f34f4 	ldr	r3, [pc, #1268]	; a4b8 <g_halGps_getData_i32+0x904>
    9fc0:	e5832000 	str	r2, [r3]
					break;
    9fc4:	ea00015c 	b	a53c <g_halGps_getData_i32+0x988>
				case 2://Latitude
					if(l_fieldpointer_i32<2)
    9fc8:	e59f34e8 	ldr	r3, [pc, #1256]	; a4b8 <g_halGps_getData_i32+0x904>
    9fcc:	e5933000 	ldr	r3, [r3]
    9fd0:	e3530001 	cmp	r3, #1
    9fd4:	ca000012 	bgt	a024 <g_halGps_getData_i32+0x470>
					{
						l_gps_latitude_st.l_degree_ui32=l_gps_latitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    9fd8:	e59f34dc 	ldr	r3, [pc, #1244]	; a4bc <g_halGps_getData_i32+0x908>
    9fdc:	e5932000 	ldr	r2, [r3]
    9fe0:	e1a03002 	mov	r3, r2
    9fe4:	e1a03103 	lsl	r3, r3, #2
    9fe8:	e0833002 	add	r3, r3, r2
    9fec:	e1a03083 	lsl	r3, r3, #1
    9ff0:	e1a02003 	mov	r2, r3
    9ff4:	e59f34b4 	ldr	r3, [pc, #1204]	; a4b0 <g_halGps_getData_i32+0x8fc>
    9ff8:	e5d33000 	ldrb	r3, [r3]
    9ffc:	e0823003 	add	r3, r2, r3
    a000:	e2432030 	sub	r2, r3, #48	; 0x30
    a004:	e59f34b0 	ldr	r3, [pc, #1200]	; a4bc <g_halGps_getData_i32+0x908>
    a008:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    a00c:	e59f34a0 	ldr	r3, [pc, #1184]	; a4b4 <g_halGps_getData_i32+0x900>
    a010:	e5933000 	ldr	r3, [r3]
    a014:	e2832001 	add	r2, r3, #1
    a018:	e59f3494 	ldr	r3, [pc, #1172]	; a4b4 <g_halGps_getData_i32+0x900>
    a01c:	e5832000 	str	r2, [r3]
    a020:	ea000031 	b	a0ec <g_halGps_getData_i32+0x538>
					}
					else if(l_fieldpointer_i32<4)
    a024:	e59f348c 	ldr	r3, [pc, #1164]	; a4b8 <g_halGps_getData_i32+0x904>
    a028:	e5933000 	ldr	r3, [r3]
    a02c:	e3530003 	cmp	r3, #3
    a030:	ca000012 	bgt	a080 <g_halGps_getData_i32+0x4cc>
					{
						l_gps_latitude_st.l_minutes_ui32=l_gps_latitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    a034:	e59f3480 	ldr	r3, [pc, #1152]	; a4bc <g_halGps_getData_i32+0x908>
    a038:	e5932004 	ldr	r2, [r3, #4]
    a03c:	e1a03002 	mov	r3, r2
    a040:	e1a03103 	lsl	r3, r3, #2
    a044:	e0833002 	add	r3, r3, r2
    a048:	e1a03083 	lsl	r3, r3, #1
    a04c:	e1a02003 	mov	r2, r3
    a050:	e59f3458 	ldr	r3, [pc, #1112]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a054:	e5d33000 	ldrb	r3, [r3]
    a058:	e0823003 	add	r3, r2, r3
    a05c:	e2432030 	sub	r2, r3, #48	; 0x30
    a060:	e59f3454 	ldr	r3, [pc, #1108]	; a4bc <g_halGps_getData_i32+0x908>
    a064:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    a068:	e59f3444 	ldr	r3, [pc, #1092]	; a4b4 <g_halGps_getData_i32+0x900>
    a06c:	e5933000 	ldr	r3, [r3]
    a070:	e2832001 	add	r2, r3, #1
    a074:	e59f3438 	ldr	r3, [pc, #1080]	; a4b4 <g_halGps_getData_i32+0x900>
    a078:	e5832000 	str	r2, [r3]
    a07c:	ea00001a 	b	a0ec <g_halGps_getData_i32+0x538>
					}
					else if(l_fieldpointer_i32>=5 && l_fieldpointer_i32<9)
    a080:	e59f3430 	ldr	r3, [pc, #1072]	; a4b8 <g_halGps_getData_i32+0x904>
    a084:	e5933000 	ldr	r3, [r3]
    a088:	e3530004 	cmp	r3, #4
    a08c:	da000016 	ble	a0ec <g_halGps_getData_i32+0x538>
    a090:	e59f3420 	ldr	r3, [pc, #1056]	; a4b8 <g_halGps_getData_i32+0x904>
    a094:	e5933000 	ldr	r3, [r3]
    a098:	e3530008 	cmp	r3, #8
    a09c:	ca000012 	bgt	a0ec <g_halGps_getData_i32+0x538>
					{
						l_gps_latitude_st.l_seconds_f64=l_gps_latitude_st.l_seconds_f64*10+(l_rec_Data_ch-48)*0.006;
    a0a0:	e59f3414 	ldr	r3, [pc, #1044]	; a4bc <g_halGps_getData_i32+0x908>
    a0a4:	ed936b02 	vldr	d6, [r3, #8]
    a0a8:	ed9f7bf2 	vldr	d7, [pc, #968]	; a478 <g_halGps_getData_i32+0x8c4>
    a0ac:	ee266b07 	vmul.f64	d6, d6, d7
    a0b0:	e59f33f8 	ldr	r3, [pc, #1016]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a0b4:	e5d33000 	ldrb	r3, [r3]
    a0b8:	e2433030 	sub	r3, r3, #48	; 0x30
    a0bc:	ee073a90 	vmov	s15, r3
    a0c0:	eeb85be7 	vcvt.f64.s32	d5, s15
    a0c4:	ed9f7bed 	vldr	d7, [pc, #948]	; a480 <g_halGps_getData_i32+0x8cc>
    a0c8:	ee257b07 	vmul.f64	d7, d5, d7
    a0cc:	ee367b07 	vadd.f64	d7, d6, d7
    a0d0:	e59f33e4 	ldr	r3, [pc, #996]	; a4bc <g_halGps_getData_i32+0x908>
    a0d4:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    a0d8:	e59f33d4 	ldr	r3, [pc, #980]	; a4b4 <g_halGps_getData_i32+0x900>
    a0dc:	e5933000 	ldr	r3, [r3]
    a0e0:	e2832001 	add	r2, r3, #1
    a0e4:	e59f33c8 	ldr	r3, [pc, #968]	; a4b4 <g_halGps_getData_i32+0x900>
    a0e8:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    a0ec:	e59f33c4 	ldr	r3, [pc, #964]	; a4b8 <g_halGps_getData_i32+0x904>
    a0f0:	e5933000 	ldr	r3, [r3]
    a0f4:	e2832001 	add	r2, r3, #1
    a0f8:	e59f33b8 	ldr	r3, [pc, #952]	; a4b8 <g_halGps_getData_i32+0x904>
    a0fc:	e5832000 	str	r2, [r3]
					break;
    a100:	ea00010d 	b	a53c <g_halGps_getData_i32+0x988>
				case 3://cardinal direction
					if(l_fieldpointer_i32<1)
    a104:	e59f33ac 	ldr	r3, [pc, #940]	; a4b8 <g_halGps_getData_i32+0x904>
    a108:	e5933000 	ldr	r3, [r3]
    a10c:	e3530000 	cmp	r3, #0
    a110:	ca000008 	bgt	a138 <g_halGps_getData_i32+0x584>
					{
						l_gps_latitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    a114:	e59f3394 	ldr	r3, [pc, #916]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a118:	e5d32000 	ldrb	r2, [r3]
    a11c:	e59f3398 	ldr	r3, [pc, #920]	; a4bc <g_halGps_getData_i32+0x908>
    a120:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    a124:	e59f3388 	ldr	r3, [pc, #904]	; a4b4 <g_halGps_getData_i32+0x900>
    a128:	e5933000 	ldr	r3, [r3]
    a12c:	e2832001 	add	r2, r3, #1
    a130:	e59f337c 	ldr	r3, [pc, #892]	; a4b4 <g_halGps_getData_i32+0x900>
    a134:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    a138:	e59f3378 	ldr	r3, [pc, #888]	; a4b8 <g_halGps_getData_i32+0x904>
    a13c:	e5933000 	ldr	r3, [r3]
    a140:	e2832001 	add	r2, r3, #1
    a144:	e59f336c 	ldr	r3, [pc, #876]	; a4b8 <g_halGps_getData_i32+0x904>
    a148:	e5832000 	str	r2, [r3]
					break;
    a14c:	ea0000fa 	b	a53c <g_halGps_getData_i32+0x988>
				case 4://Longitude
					if(l_fieldpointer_i32<3)
    a150:	e59f3360 	ldr	r3, [pc, #864]	; a4b8 <g_halGps_getData_i32+0x904>
    a154:	e5933000 	ldr	r3, [r3]
    a158:	e3530002 	cmp	r3, #2
    a15c:	ca000012 	bgt	a1ac <g_halGps_getData_i32+0x5f8>
					{
						l_gps_longitude_st.l_degree_ui32=l_gps_longitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    a160:	e59f3324 	ldr	r3, [pc, #804]	; a48c <g_halGps_getData_i32+0x8d8>
    a164:	e5932000 	ldr	r2, [r3]
    a168:	e1a03002 	mov	r3, r2
    a16c:	e1a03103 	lsl	r3, r3, #2
    a170:	e0833002 	add	r3, r3, r2
    a174:	e1a03083 	lsl	r3, r3, #1
    a178:	e1a02003 	mov	r2, r3
    a17c:	e59f332c 	ldr	r3, [pc, #812]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a180:	e5d33000 	ldrb	r3, [r3]
    a184:	e0823003 	add	r3, r2, r3
    a188:	e2432030 	sub	r2, r3, #48	; 0x30
    a18c:	e59f32f8 	ldr	r3, [pc, #760]	; a48c <g_halGps_getData_i32+0x8d8>
    a190:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    a194:	e59f3318 	ldr	r3, [pc, #792]	; a4b4 <g_halGps_getData_i32+0x900>
    a198:	e5933000 	ldr	r3, [r3]
    a19c:	e2832001 	add	r2, r3, #1
    a1a0:	e59f330c 	ldr	r3, [pc, #780]	; a4b4 <g_halGps_getData_i32+0x900>
    a1a4:	e5832000 	str	r2, [r3]
    a1a8:	ea000031 	b	a274 <g_halGps_getData_i32+0x6c0>
					}
					else if(l_fieldpointer_i32<5)
    a1ac:	e59f3304 	ldr	r3, [pc, #772]	; a4b8 <g_halGps_getData_i32+0x904>
    a1b0:	e5933000 	ldr	r3, [r3]
    a1b4:	e3530004 	cmp	r3, #4
    a1b8:	ca000012 	bgt	a208 <g_halGps_getData_i32+0x654>
					{
						l_gps_longitude_st.l_minutes_ui32=l_gps_longitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    a1bc:	e59f32c8 	ldr	r3, [pc, #712]	; a48c <g_halGps_getData_i32+0x8d8>
    a1c0:	e5932004 	ldr	r2, [r3, #4]
    a1c4:	e1a03002 	mov	r3, r2
    a1c8:	e1a03103 	lsl	r3, r3, #2
    a1cc:	e0833002 	add	r3, r3, r2
    a1d0:	e1a03083 	lsl	r3, r3, #1
    a1d4:	e1a02003 	mov	r2, r3
    a1d8:	e59f32d0 	ldr	r3, [pc, #720]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a1dc:	e5d33000 	ldrb	r3, [r3]
    a1e0:	e0823003 	add	r3, r2, r3
    a1e4:	e2432030 	sub	r2, r3, #48	; 0x30
    a1e8:	e59f329c 	ldr	r3, [pc, #668]	; a48c <g_halGps_getData_i32+0x8d8>
    a1ec:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    a1f0:	e59f32bc 	ldr	r3, [pc, #700]	; a4b4 <g_halGps_getData_i32+0x900>
    a1f4:	e5933000 	ldr	r3, [r3]
    a1f8:	e2832001 	add	r2, r3, #1
    a1fc:	e59f32b0 	ldr	r3, [pc, #688]	; a4b4 <g_halGps_getData_i32+0x900>
    a200:	e5832000 	str	r2, [r3]
    a204:	ea00001a 	b	a274 <g_halGps_getData_i32+0x6c0>
					}
					else if(l_fieldpointer_i32>=6 && l_fieldpointer_i32<10)
    a208:	e59f32a8 	ldr	r3, [pc, #680]	; a4b8 <g_halGps_getData_i32+0x904>
    a20c:	e5933000 	ldr	r3, [r3]
    a210:	e3530005 	cmp	r3, #5
    a214:	da000016 	ble	a274 <g_halGps_getData_i32+0x6c0>
    a218:	e59f3298 	ldr	r3, [pc, #664]	; a4b8 <g_halGps_getData_i32+0x904>
    a21c:	e5933000 	ldr	r3, [r3]
    a220:	e3530009 	cmp	r3, #9
    a224:	ca000012 	bgt	a274 <g_halGps_getData_i32+0x6c0>
					{
						l_gps_longitude_st.l_seconds_f64=l_gps_longitude_st.l_seconds_f64*10+(l_rec_Data_ch-48)*0.006;
    a228:	e59f325c 	ldr	r3, [pc, #604]	; a48c <g_halGps_getData_i32+0x8d8>
    a22c:	ed936b02 	vldr	d6, [r3, #8]
    a230:	ed9f7b90 	vldr	d7, [pc, #576]	; a478 <g_halGps_getData_i32+0x8c4>
    a234:	ee266b07 	vmul.f64	d6, d6, d7
    a238:	e59f3270 	ldr	r3, [pc, #624]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a23c:	e5d33000 	ldrb	r3, [r3]
    a240:	e2433030 	sub	r3, r3, #48	; 0x30
    a244:	ee073a90 	vmov	s15, r3
    a248:	eeb85be7 	vcvt.f64.s32	d5, s15
    a24c:	ed9f7b8b 	vldr	d7, [pc, #556]	; a480 <g_halGps_getData_i32+0x8cc>
    a250:	ee257b07 	vmul.f64	d7, d5, d7
    a254:	ee367b07 	vadd.f64	d7, d6, d7
    a258:	e59f322c 	ldr	r3, [pc, #556]	; a48c <g_halGps_getData_i32+0x8d8>
    a25c:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    a260:	e59f324c 	ldr	r3, [pc, #588]	; a4b4 <g_halGps_getData_i32+0x900>
    a264:	e5933000 	ldr	r3, [r3]
    a268:	e2832001 	add	r2, r3, #1
    a26c:	e59f3240 	ldr	r3, [pc, #576]	; a4b4 <g_halGps_getData_i32+0x900>
    a270:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    a274:	e59f323c 	ldr	r3, [pc, #572]	; a4b8 <g_halGps_getData_i32+0x904>
    a278:	e5933000 	ldr	r3, [r3]
    a27c:	e2832001 	add	r2, r3, #1
    a280:	e59f3230 	ldr	r3, [pc, #560]	; a4b8 <g_halGps_getData_i32+0x904>
    a284:	e5832000 	str	r2, [r3]
					break;
    a288:	ea0000ab 	b	a53c <g_halGps_getData_i32+0x988>
				case 5://cardinal direction
					if(l_fieldpointer_i32<1)
    a28c:	e59f3224 	ldr	r3, [pc, #548]	; a4b8 <g_halGps_getData_i32+0x904>
    a290:	e5933000 	ldr	r3, [r3]
    a294:	e3530000 	cmp	r3, #0
    a298:	ca000008 	bgt	a2c0 <g_halGps_getData_i32+0x70c>
					{
						l_gps_longitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    a29c:	e59f320c 	ldr	r3, [pc, #524]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a2a0:	e5d32000 	ldrb	r2, [r3]
    a2a4:	e59f31e0 	ldr	r3, [pc, #480]	; a48c <g_halGps_getData_i32+0x8d8>
    a2a8:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    a2ac:	e59f3200 	ldr	r3, [pc, #512]	; a4b4 <g_halGps_getData_i32+0x900>
    a2b0:	e5933000 	ldr	r3, [r3]
    a2b4:	e2832001 	add	r2, r3, #1
    a2b8:	e59f31f4 	ldr	r3, [pc, #500]	; a4b4 <g_halGps_getData_i32+0x900>
    a2bc:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    a2c0:	e59f31f0 	ldr	r3, [pc, #496]	; a4b8 <g_halGps_getData_i32+0x904>
    a2c4:	e5933000 	ldr	r3, [r3]
    a2c8:	e2832001 	add	r2, r3, #1
    a2cc:	e59f31e4 	ldr	r3, [pc, #484]	; a4b8 <g_halGps_getData_i32+0x904>
    a2d0:	e5832000 	str	r2, [r3]
					break;
    a2d4:	ea000098 	b	a53c <g_halGps_getData_i32+0x988>
				case 9://Height
					if(l_rec_Data_ch!='.' && l_fieldpointer_i32==0)
    a2d8:	e59f31d0 	ldr	r3, [pc, #464]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a2dc:	e5d33000 	ldrb	r3, [r3]
    a2e0:	e353002e 	cmp	r3, #46	; 0x2e
    a2e4:	0a000015 	beq	a340 <g_halGps_getData_i32+0x78c>
    a2e8:	e59f31c8 	ldr	r3, [pc, #456]	; a4b8 <g_halGps_getData_i32+0x904>
    a2ec:	e5933000 	ldr	r3, [r3]
    a2f0:	e3530000 	cmp	r3, #0
    a2f4:	1a000011 	bne	a340 <g_halGps_getData_i32+0x78c>
					{
						l_height_f64=l_height_f64*10+(double)(l_rec_Data_ch-48);
    a2f8:	e59f3190 	ldr	r3, [pc, #400]	; a490 <g_halGps_getData_i32+0x8dc>
    a2fc:	ed936b00 	vldr	d6, [r3]
    a300:	ed9f7b5c 	vldr	d7, [pc, #368]	; a478 <g_halGps_getData_i32+0x8c4>
    a304:	ee266b07 	vmul.f64	d6, d6, d7
    a308:	e59f31a0 	ldr	r3, [pc, #416]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a30c:	e5d33000 	ldrb	r3, [r3]
    a310:	e2433030 	sub	r3, r3, #48	; 0x30
    a314:	ee053a90 	vmov	s11, r3
    a318:	eeb87be5 	vcvt.f64.s32	d7, s11
    a31c:	ee367b07 	vadd.f64	d7, d6, d7
    a320:	e59f3168 	ldr	r3, [pc, #360]	; a490 <g_halGps_getData_i32+0x8dc>
    a324:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    a328:	e59f3184 	ldr	r3, [pc, #388]	; a4b4 <g_halGps_getData_i32+0x900>
    a32c:	e5933000 	ldr	r3, [r3]
    a330:	e2832001 	add	r2, r3, #1
    a334:	e59f3178 	ldr	r3, [pc, #376]	; a4b4 <g_halGps_getData_i32+0x900>
    a338:	e5832000 	str	r2, [r3]
    a33c:	ea000027 	b	a3e0 <g_halGps_getData_i32+0x82c>

					}
					else if (l_rec_Data_ch=='.')
    a340:	e59f3168 	ldr	r3, [pc, #360]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a344:	e5d33000 	ldrb	r3, [r3]
    a348:	e353002e 	cmp	r3, #46	; 0x2e
    a34c:	1a000005 	bne	a368 <g_halGps_getData_i32+0x7b4>
					{
						l_fieldpointer_i32++;
    a350:	e59f3160 	ldr	r3, [pc, #352]	; a4b8 <g_halGps_getData_i32+0x904>
    a354:	e5933000 	ldr	r3, [r3]
    a358:	e2832001 	add	r2, r3, #1
    a35c:	e59f3154 	ldr	r3, [pc, #340]	; a4b8 <g_halGps_getData_i32+0x904>
    a360:	e5832000 	str	r2, [r3]
    a364:	ea00001d 	b	a3e0 <g_halGps_getData_i32+0x82c>
					}
					else
					{
						l_height_f64=l_height_f64+(double)(l_rec_Data_ch-48)/l_decimal_place_factor_i32;
    a368:	e59f3140 	ldr	r3, [pc, #320]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a36c:	e5d33000 	ldrb	r3, [r3]
    a370:	e2433030 	sub	r3, r3, #48	; 0x30
    a374:	ee073a90 	vmov	s15, r3
    a378:	eeb86be7 	vcvt.f64.s32	d6, s15
    a37c:	e59f3114 	ldr	r3, [pc, #276]	; a498 <g_halGps_getData_i32+0x8e4>
    a380:	e5933000 	ldr	r3, [r3]
    a384:	ee053a90 	vmov	s11, r3
    a388:	eeb87be5 	vcvt.f64.s32	d7, s11
    a38c:	ee866b07 	vdiv.f64	d6, d6, d7
    a390:	e59f30f8 	ldr	r3, [pc, #248]	; a490 <g_halGps_getData_i32+0x8dc>
    a394:	ed937b00 	vldr	d7, [r3]
    a398:	ee367b07 	vadd.f64	d7, d6, d7
    a39c:	e59f30ec 	ldr	r3, [pc, #236]	; a490 <g_halGps_getData_i32+0x8dc>
    a3a0:	ed837b00 	vstr	d7, [r3]
						l_decimal_place_factor_i32=l_decimal_place_factor_i32*10;
    a3a4:	e59f30ec 	ldr	r3, [pc, #236]	; a498 <g_halGps_getData_i32+0x8e4>
    a3a8:	e5932000 	ldr	r2, [r3]
    a3ac:	e1a03002 	mov	r3, r2
    a3b0:	e1a03103 	lsl	r3, r3, #2
    a3b4:	e0833002 	add	r3, r3, r2
    a3b8:	e1a03083 	lsl	r3, r3, #1
    a3bc:	e1a02003 	mov	r2, r3
    a3c0:	e59f30d0 	ldr	r3, [pc, #208]	; a498 <g_halGps_getData_i32+0x8e4>
    a3c4:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    a3c8:	e59f30e4 	ldr	r3, [pc, #228]	; a4b4 <g_halGps_getData_i32+0x900>
    a3cc:	e5933000 	ldr	r3, [r3]
    a3d0:	e2832001 	add	r2, r3, #1
    a3d4:	e59f30d8 	ldr	r3, [pc, #216]	; a4b4 <g_halGps_getData_i32+0x900>
    a3d8:	e5832000 	str	r2, [r3]
					}
					break;
    a3dc:	ea000056 	b	a53c <g_halGps_getData_i32+0x988>
    a3e0:	ea000055 	b	a53c <g_halGps_getData_i32+0x988>
				case 11://Geoid
					if(l_rec_Data_ch!='.' && l_fieldpointer_i32==0)
    a3e4:	e59f30c4 	ldr	r3, [pc, #196]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a3e8:	e5d33000 	ldrb	r3, [r3]
    a3ec:	e353002e 	cmp	r3, #46	; 0x2e
    a3f0:	0a000015 	beq	a44c <g_halGps_getData_i32+0x898>
    a3f4:	e59f30bc 	ldr	r3, [pc, #188]	; a4b8 <g_halGps_getData_i32+0x904>
    a3f8:	e5933000 	ldr	r3, [r3]
    a3fc:	e3530000 	cmp	r3, #0
    a400:	1a000011 	bne	a44c <g_halGps_getData_i32+0x898>
					{
						l_geoid_f64=l_geoid_f64*10+(double)(l_rec_Data_ch-48);
    a404:	e59f3088 	ldr	r3, [pc, #136]	; a494 <g_halGps_getData_i32+0x8e0>
    a408:	ed936b00 	vldr	d6, [r3]
    a40c:	ed9f7b19 	vldr	d7, [pc, #100]	; a478 <g_halGps_getData_i32+0x8c4>
    a410:	ee266b07 	vmul.f64	d6, d6, d7
    a414:	e59f3094 	ldr	r3, [pc, #148]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a418:	e5d33000 	ldrb	r3, [r3]
    a41c:	e2433030 	sub	r3, r3, #48	; 0x30
    a420:	ee053a90 	vmov	s11, r3
    a424:	eeb87be5 	vcvt.f64.s32	d7, s11
    a428:	ee367b07 	vadd.f64	d7, d6, d7
    a42c:	e59f3060 	ldr	r3, [pc, #96]	; a494 <g_halGps_getData_i32+0x8e0>
    a430:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    a434:	e59f3078 	ldr	r3, [pc, #120]	; a4b4 <g_halGps_getData_i32+0x900>
    a438:	e5933000 	ldr	r3, [r3]
    a43c:	e2832001 	add	r2, r3, #1
    a440:	e59f306c 	ldr	r3, [pc, #108]	; a4b4 <g_halGps_getData_i32+0x900>
    a444:	e5832000 	str	r2, [r3]
    a448:	ea00003a 	b	a538 <g_halGps_getData_i32+0x984>

					}
					else if (l_rec_Data_ch=='.')
    a44c:	e59f305c 	ldr	r3, [pc, #92]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a450:	e5d33000 	ldrb	r3, [r3]
    a454:	e353002e 	cmp	r3, #46	; 0x2e
    a458:	1a000018 	bne	a4c0 <g_halGps_getData_i32+0x90c>
					{
						l_fieldpointer_i32++;
    a45c:	e59f3054 	ldr	r3, [pc, #84]	; a4b8 <g_halGps_getData_i32+0x904>
    a460:	e5933000 	ldr	r3, [r3]
    a464:	e2832001 	add	r2, r3, #1
    a468:	e59f3048 	ldr	r3, [pc, #72]	; a4b8 <g_halGps_getData_i32+0x904>
    a46c:	e5832000 	str	r2, [r3]
    a470:	ea000030 	b	a538 <g_halGps_getData_i32+0x984>
    a474:	e1a00000 	nop			; (mov r0, r0)
    a478:	00000000 	.word	0x00000000
    a47c:	40240000 	.word	0x40240000
    a480:	bc6a7efa 	.word	0xbc6a7efa
    a484:	3f789374 	.word	0x3f789374
    a488:	00010311 	.word	0x00010311
    a48c:	000102b0 	.word	0x000102b0
    a490:	00010300 	.word	0x00010300
    a494:	00010308 	.word	0x00010308
    a498:	0001024c 	.word	0x0001024c
    a49c:	00010313 	.word	0x00010313
    a4a0:	00010310 	.word	0x00010310
    a4a4:	00010312 	.word	0x00010312
    a4a8:	000102e0 	.word	0x000102e0
    a4ac:	000102e4 	.word	0x000102e4
    a4b0:	00010248 	.word	0x00010248
    a4b4:	00010318 	.word	0x00010318
    a4b8:	00010314 	.word	0x00010314
    a4bc:	000102c8 	.word	0x000102c8
					}
					else
					{
						l_geoid_f64=l_geoid_f64+(double)(l_rec_Data_ch-48)/l_decimal_place_factor_i32;
    a4c0:	e51f3018 	ldr	r3, [pc, #-24]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a4c4:	e5d33000 	ldrb	r3, [r3]
    a4c8:	e2433030 	sub	r3, r3, #48	; 0x30
    a4cc:	ee073a90 	vmov	s15, r3
    a4d0:	eeb86be7 	vcvt.f64.s32	d6, s15
    a4d4:	e51f3044 	ldr	r3, [pc, #-68]	; a498 <g_halGps_getData_i32+0x8e4>
    a4d8:	e5933000 	ldr	r3, [r3]
    a4dc:	ee053a90 	vmov	s11, r3
    a4e0:	eeb87be5 	vcvt.f64.s32	d7, s11
    a4e4:	ee866b07 	vdiv.f64	d6, d6, d7
    a4e8:	e51f305c 	ldr	r3, [pc, #-92]	; a494 <g_halGps_getData_i32+0x8e0>
    a4ec:	ed937b00 	vldr	d7, [r3]
    a4f0:	ee367b07 	vadd.f64	d7, d6, d7
    a4f4:	e51f3068 	ldr	r3, [pc, #-104]	; a494 <g_halGps_getData_i32+0x8e0>
    a4f8:	ed837b00 	vstr	d7, [r3]
						l_decimal_place_factor_i32=l_decimal_place_factor_i32*10;
    a4fc:	e51f306c 	ldr	r3, [pc, #-108]	; a498 <g_halGps_getData_i32+0x8e4>
    a500:	e5932000 	ldr	r2, [r3]
    a504:	e1a03002 	mov	r3, r2
    a508:	e1a03103 	lsl	r3, r3, #2
    a50c:	e0833002 	add	r3, r3, r2
    a510:	e1a03083 	lsl	r3, r3, #1
    a514:	e1a02003 	mov	r2, r3
    a518:	e51f3088 	ldr	r3, [pc, #-136]	; a498 <g_halGps_getData_i32+0x8e4>
    a51c:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    a520:	e51f3074 	ldr	r3, [pc, #-116]	; a4b4 <g_halGps_getData_i32+0x900>
    a524:	e5933000 	ldr	r3, [r3]
    a528:	e2832001 	add	r2, r3, #1
    a52c:	e51f3080 	ldr	r3, [pc, #-128]	; a4b4 <g_halGps_getData_i32+0x900>
    a530:	e5832000 	str	r2, [r3]
					}
					break;
    a534:	eaffffff 	b	a538 <g_halGps_getData_i32+0x984>
    a538:	e1a00000 	nop			; (mov r0, r0)
				}
				break;
    a53c:	e1a00000 	nop			; (mov r0, r0)
			}
			break;
    a540:	ea0001ca 	b	ac70 <g_halGps_getData_i32+0x10bc>


		case 2://$GPRMC ,205003.000 ,A ,4841.9261 ,N ,00918.7276 ,E ,0.33 ,184.26 ,100415 , , , A*63      44- 46
			switch (l_rec_Data_ch)
    a544:	e51f309c 	ldr	r3, [pc, #-156]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a548:	e5d33000 	ldrb	r3, [r3]
    a54c:	e353000a 	cmp	r3, #10
    a550:	0a00000e 	beq	a590 <g_halGps_getData_i32+0x9dc>
    a554:	e353002c 	cmp	r3, #44	; 0x2c
    a558:	1a000018 	bne	a5c0 <g_halGps_getData_i32+0xa0c>
			{
			case ',':
				l_data_position_ch++;
    a55c:	e51f30c0 	ldr	r3, [pc, #-192]	; a4a4 <g_halGps_getData_i32+0x8f0>
    a560:	e5d33000 	ldrb	r3, [r3]
    a564:	e2833001 	add	r3, r3, #1
    a568:	e6ef2073 	uxtb	r2, r3
    a56c:	e51f30d0 	ldr	r3, [pc, #-208]	; a4a4 <g_halGps_getData_i32+0x8f0>
    a570:	e5c32000 	strb	r2, [r3]
				l_fieldpointer_i32=0;
    a574:	e51f30c4 	ldr	r3, [pc, #-196]	; a4b8 <g_halGps_getData_i32+0x904>
    a578:	e3a02000 	mov	r2, #0
    a57c:	e5832000 	str	r2, [r3]
				l_decimal_place_factor_i32=10;
    a580:	e51f30f0 	ldr	r3, [pc, #-240]	; a498 <g_halGps_getData_i32+0x8e4>
    a584:	e3a0200a 	mov	r2, #10
    a588:	e5832000 	str	r2, [r3]
				break;
    a58c:	ea0001b6 	b	ac6c <g_halGps_getData_i32+0x10b8>
			case 10://LF found
				l_succeded_i32=l_succeded_i32+200;
    a590:	e51f30e4 	ldr	r3, [pc, #-228]	; a4b4 <g_halGps_getData_i32+0x900>
    a594:	e5933000 	ldr	r3, [r3]
    a598:	e28320c8 	add	r2, r3, #200	; 0xc8
    a59c:	e51f30f0 	ldr	r3, [pc, #-240]	; a4b4 <g_halGps_getData_i32+0x900>
    a5a0:	e5832000 	str	r2, [r3]
				l_message_position_ch=0;
    a5a4:	e51f3110 	ldr	r3, [pc, #-272]	; a49c <g_halGps_getData_i32+0x8e8>
    a5a8:	e3a02000 	mov	r2, #0
    a5ac:	e5c32000 	strb	r2, [r3]
				l_header_position_ch=0;
    a5b0:	e51f3118 	ldr	r3, [pc, #-280]	; a4a0 <g_halGps_getData_i32+0x8ec>
    a5b4:	e3a02000 	mov	r2, #0
    a5b8:	e5c32000 	strb	r2, [r3]
				break;
    a5bc:	ea0001aa 	b	ac6c <g_halGps_getData_i32+0x10b8>
			default:
				switch (l_data_position_ch)
    a5c0:	e51f3124 	ldr	r3, [pc, #-292]	; a4a4 <g_halGps_getData_i32+0x8f0>
    a5c4:	e5d33000 	ldrb	r3, [r3]
    a5c8:	e2433001 	sub	r3, r3, #1
    a5cc:	e3530008 	cmp	r3, #8
    a5d0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    a5d4:	ea0001a3 	b	ac68 <g_halGps_getData_i32+0x10b4>
    a5d8:	0000a5fc 	.word	0x0000a5fc
    a5dc:	0000a66c 	.word	0x0000a66c
    a5e0:	0000a6b8 	.word	0x0000a6b8
    a5e4:	0000a7f4 	.word	0x0000a7f4
    a5e8:	0000a840 	.word	0x0000a840
    a5ec:	0000a97c 	.word	0x0000a97c
    a5f0:	0000a9c8 	.word	0x0000a9c8
    a5f4:	0000aaac 	.word	0x0000aaac
    a5f8:	0000abf8 	.word	0x0000abf8
				{
				case 1://Time
					if(l_fieldpointer_i32<6)
    a5fc:	e51f314c 	ldr	r3, [pc, #-332]	; a4b8 <g_halGps_getData_i32+0x904>
    a600:	e5933000 	ldr	r3, [r3]
    a604:	e3530005 	cmp	r3, #5
    a608:	ca000011 	bgt	a654 <g_halGps_getData_i32+0xaa0>
					{
						l_time_ui32=l_time_ui32*10+(l_rec_Data_ch-48);
    a60c:	e51f316c 	ldr	r3, [pc, #-364]	; a4a8 <g_halGps_getData_i32+0x8f4>
    a610:	e5932000 	ldr	r2, [r3]
    a614:	e1a03002 	mov	r3, r2
    a618:	e1a03103 	lsl	r3, r3, #2
    a61c:	e0833002 	add	r3, r3, r2
    a620:	e1a03083 	lsl	r3, r3, #1
    a624:	e1a02003 	mov	r2, r3
    a628:	e51f3180 	ldr	r3, [pc, #-384]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a62c:	e5d33000 	ldrb	r3, [r3]
    a630:	e0823003 	add	r3, r2, r3
    a634:	e2432030 	sub	r2, r3, #48	; 0x30
    a638:	e51f3198 	ldr	r3, [pc, #-408]	; a4a8 <g_halGps_getData_i32+0x8f4>
    a63c:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    a640:	e51f3194 	ldr	r3, [pc, #-404]	; a4b4 <g_halGps_getData_i32+0x900>
    a644:	e5933000 	ldr	r3, [r3]
    a648:	e2832001 	add	r2, r3, #1
    a64c:	e51f31a0 	ldr	r3, [pc, #-416]	; a4b4 <g_halGps_getData_i32+0x900>
    a650:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    a654:	e51f31a4 	ldr	r3, [pc, #-420]	; a4b8 <g_halGps_getData_i32+0x904>
    a658:	e5933000 	ldr	r3, [r3]
    a65c:	e2832001 	add	r2, r3, #1
    a660:	e51f31b0 	ldr	r3, [pc, #-432]	; a4b8 <g_halGps_getData_i32+0x904>
    a664:	e5832000 	str	r2, [r3]
					break;
    a668:	ea00017e 	b	ac68 <g_halGps_getData_i32+0x10b4>
				case 2://Fix
					if(l_fieldpointer_i32<2)
    a66c:	e51f31bc 	ldr	r3, [pc, #-444]	; a4b8 <g_halGps_getData_i32+0x904>
    a670:	e5933000 	ldr	r3, [r3]
    a674:	e3530001 	cmp	r3, #1
    a678:	ca000008 	bgt	a6a0 <g_halGps_getData_i32+0xaec>
					{
						l_fix_ch=l_rec_Data_ch;
    a67c:	e51f31d4 	ldr	r3, [pc, #-468]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a680:	e5d32000 	ldrb	r2, [r3]
    a684:	e51f31e0 	ldr	r3, [pc, #-480]	; a4ac <g_halGps_getData_i32+0x8f8>
    a688:	e5c32000 	strb	r2, [r3]
						l_succeded_i32++;
    a68c:	e51f31e0 	ldr	r3, [pc, #-480]	; a4b4 <g_halGps_getData_i32+0x900>
    a690:	e5933000 	ldr	r3, [r3]
    a694:	e2832001 	add	r2, r3, #1
    a698:	e51f31ec 	ldr	r3, [pc, #-492]	; a4b4 <g_halGps_getData_i32+0x900>
    a69c:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    a6a0:	e51f31f0 	ldr	r3, [pc, #-496]	; a4b8 <g_halGps_getData_i32+0x904>
    a6a4:	e5933000 	ldr	r3, [r3]
    a6a8:	e2832001 	add	r2, r3, #1
    a6ac:	e51f31fc 	ldr	r3, [pc, #-508]	; a4b8 <g_halGps_getData_i32+0x904>
    a6b0:	e5832000 	str	r2, [r3]
					break;
    a6b4:	ea00016b 	b	ac68 <g_halGps_getData_i32+0x10b4>
				case 3://Latitude
					if(l_fieldpointer_i32<2)
    a6b8:	e51f3208 	ldr	r3, [pc, #-520]	; a4b8 <g_halGps_getData_i32+0x904>
    a6bc:	e5933000 	ldr	r3, [r3]
    a6c0:	e3530001 	cmp	r3, #1
    a6c4:	ca000012 	bgt	a714 <g_halGps_getData_i32+0xb60>
					{
						l_gps_latitude_st.l_degree_ui32=l_gps_latitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    a6c8:	e51f3214 	ldr	r3, [pc, #-532]	; a4bc <g_halGps_getData_i32+0x908>
    a6cc:	e5932000 	ldr	r2, [r3]
    a6d0:	e1a03002 	mov	r3, r2
    a6d4:	e1a03103 	lsl	r3, r3, #2
    a6d8:	e0833002 	add	r3, r3, r2
    a6dc:	e1a03083 	lsl	r3, r3, #1
    a6e0:	e1a02003 	mov	r2, r3
    a6e4:	e51f323c 	ldr	r3, [pc, #-572]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a6e8:	e5d33000 	ldrb	r3, [r3]
    a6ec:	e0823003 	add	r3, r2, r3
    a6f0:	e2432030 	sub	r2, r3, #48	; 0x30
    a6f4:	e51f3240 	ldr	r3, [pc, #-576]	; a4bc <g_halGps_getData_i32+0x908>
    a6f8:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    a6fc:	e51f3250 	ldr	r3, [pc, #-592]	; a4b4 <g_halGps_getData_i32+0x900>
    a700:	e5933000 	ldr	r3, [r3]
    a704:	e2832001 	add	r2, r3, #1
    a708:	e51f325c 	ldr	r3, [pc, #-604]	; a4b4 <g_halGps_getData_i32+0x900>
    a70c:	e5832000 	str	r2, [r3]
    a710:	ea000031 	b	a7dc <g_halGps_getData_i32+0xc28>
					}
					else if(l_fieldpointer_i32<4)
    a714:	e51f3264 	ldr	r3, [pc, #-612]	; a4b8 <g_halGps_getData_i32+0x904>
    a718:	e5933000 	ldr	r3, [r3]
    a71c:	e3530003 	cmp	r3, #3
    a720:	ca000012 	bgt	a770 <g_halGps_getData_i32+0xbbc>
					{
						l_gps_latitude_st.l_minutes_ui32=l_gps_latitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    a724:	e51f3270 	ldr	r3, [pc, #-624]	; a4bc <g_halGps_getData_i32+0x908>
    a728:	e5932004 	ldr	r2, [r3, #4]
    a72c:	e1a03002 	mov	r3, r2
    a730:	e1a03103 	lsl	r3, r3, #2
    a734:	e0833002 	add	r3, r3, r2
    a738:	e1a03083 	lsl	r3, r3, #1
    a73c:	e1a02003 	mov	r2, r3
    a740:	e51f3298 	ldr	r3, [pc, #-664]	; a4b0 <g_halGps_getData_i32+0x8fc>
    a744:	e5d33000 	ldrb	r3, [r3]
    a748:	e0823003 	add	r3, r2, r3
    a74c:	e2432030 	sub	r2, r3, #48	; 0x30
    a750:	e51f329c 	ldr	r3, [pc, #-668]	; a4bc <g_halGps_getData_i32+0x908>
    a754:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    a758:	e51f32ac 	ldr	r3, [pc, #-684]	; a4b4 <g_halGps_getData_i32+0x900>
    a75c:	e5933000 	ldr	r3, [r3]
    a760:	e2832001 	add	r2, r3, #1
    a764:	e51f32b8 	ldr	r3, [pc, #-696]	; a4b4 <g_halGps_getData_i32+0x900>
    a768:	e5832000 	str	r2, [r3]
    a76c:	ea00001a 	b	a7dc <g_halGps_getData_i32+0xc28>
					}
					else if(l_fieldpointer_i32>=5 && l_fieldpointer_i32<9)
    a770:	e51f32c0 	ldr	r3, [pc, #-704]	; a4b8 <g_halGps_getData_i32+0x904>
    a774:	e5933000 	ldr	r3, [r3]
    a778:	e3530004 	cmp	r3, #4
    a77c:	da000016 	ble	a7dc <g_halGps_getData_i32+0xc28>
    a780:	e51f32d0 	ldr	r3, [pc, #-720]	; a4b8 <g_halGps_getData_i32+0x904>
    a784:	e5933000 	ldr	r3, [r3]
    a788:	e3530008 	cmp	r3, #8
    a78c:	ca000012 	bgt	a7dc <g_halGps_getData_i32+0xc28>
					{
						l_gps_latitude_st.l_seconds_f64=l_gps_latitude_st.l_seconds_f64*10+(double)(l_rec_Data_ch-48)*0.006;
    a790:	e51f32dc 	ldr	r3, [pc, #-732]	; a4bc <g_halGps_getData_i32+0x908>
    a794:	ed936b02 	vldr	d6, [r3, #8]
    a798:	ed9f7be8 	vldr	d7, [pc, #928]	; ab40 <g_halGps_getData_i32+0xf8c>
    a79c:	ee266b07 	vmul.f64	d6, d6, d7
    a7a0:	e59f33c4 	ldr	r3, [pc, #964]	; ab6c <g_halGps_getData_i32+0xfb8>
    a7a4:	e5d33000 	ldrb	r3, [r3]
    a7a8:	e2433030 	sub	r3, r3, #48	; 0x30
    a7ac:	ee073a90 	vmov	s15, r3
    a7b0:	eeb85be7 	vcvt.f64.s32	d5, s15
    a7b4:	ed9f7be3 	vldr	d7, [pc, #908]	; ab48 <g_halGps_getData_i32+0xf94>
    a7b8:	ee257b07 	vmul.f64	d7, d5, d7
    a7bc:	ee367b07 	vadd.f64	d7, d6, d7
    a7c0:	e59f3390 	ldr	r3, [pc, #912]	; ab58 <g_halGps_getData_i32+0xfa4>
    a7c4:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    a7c8:	e59f33a8 	ldr	r3, [pc, #936]	; ab78 <g_halGps_getData_i32+0xfc4>
    a7cc:	e5933000 	ldr	r3, [r3]
    a7d0:	e2832001 	add	r2, r3, #1
    a7d4:	e59f339c 	ldr	r3, [pc, #924]	; ab78 <g_halGps_getData_i32+0xfc4>
    a7d8:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    a7dc:	e59f3390 	ldr	r3, [pc, #912]	; ab74 <g_halGps_getData_i32+0xfc0>
    a7e0:	e5933000 	ldr	r3, [r3]
    a7e4:	e2832001 	add	r2, r3, #1
    a7e8:	e59f3384 	ldr	r3, [pc, #900]	; ab74 <g_halGps_getData_i32+0xfc0>
    a7ec:	e5832000 	str	r2, [r3]
					break;
    a7f0:	ea00011c 	b	ac68 <g_halGps_getData_i32+0x10b4>
				case 4://cardinal direction
					if(l_fieldpointer_i32<1)
    a7f4:	e59f3378 	ldr	r3, [pc, #888]	; ab74 <g_halGps_getData_i32+0xfc0>
    a7f8:	e5933000 	ldr	r3, [r3]
    a7fc:	e3530000 	cmp	r3, #0
    a800:	ca000008 	bgt	a828 <g_halGps_getData_i32+0xc74>
					{
						l_gps_latitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    a804:	e59f3360 	ldr	r3, [pc, #864]	; ab6c <g_halGps_getData_i32+0xfb8>
    a808:	e5d32000 	ldrb	r2, [r3]
    a80c:	e59f3344 	ldr	r3, [pc, #836]	; ab58 <g_halGps_getData_i32+0xfa4>
    a810:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    a814:	e59f335c 	ldr	r3, [pc, #860]	; ab78 <g_halGps_getData_i32+0xfc4>
    a818:	e5933000 	ldr	r3, [r3]
    a81c:	e2832001 	add	r2, r3, #1
    a820:	e59f3350 	ldr	r3, [pc, #848]	; ab78 <g_halGps_getData_i32+0xfc4>
    a824:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    a828:	e59f3344 	ldr	r3, [pc, #836]	; ab74 <g_halGps_getData_i32+0xfc0>
    a82c:	e5933000 	ldr	r3, [r3]
    a830:	e2832001 	add	r2, r3, #1
    a834:	e59f3338 	ldr	r3, [pc, #824]	; ab74 <g_halGps_getData_i32+0xfc0>
    a838:	e5832000 	str	r2, [r3]
					break;
    a83c:	ea000109 	b	ac68 <g_halGps_getData_i32+0x10b4>
				case 5://Longitude
					if(l_fieldpointer_i32<3)
    a840:	e59f332c 	ldr	r3, [pc, #812]	; ab74 <g_halGps_getData_i32+0xfc0>
    a844:	e5933000 	ldr	r3, [r3]
    a848:	e3530002 	cmp	r3, #2
    a84c:	ca000012 	bgt	a89c <g_halGps_getData_i32+0xce8>
					{
						l_gps_longitude_st.l_degree_ui32=l_gps_longitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    a850:	e59f3304 	ldr	r3, [pc, #772]	; ab5c <g_halGps_getData_i32+0xfa8>
    a854:	e5932000 	ldr	r2, [r3]
    a858:	e1a03002 	mov	r3, r2
    a85c:	e1a03103 	lsl	r3, r3, #2
    a860:	e0833002 	add	r3, r3, r2
    a864:	e1a03083 	lsl	r3, r3, #1
    a868:	e1a02003 	mov	r2, r3
    a86c:	e59f32f8 	ldr	r3, [pc, #760]	; ab6c <g_halGps_getData_i32+0xfb8>
    a870:	e5d33000 	ldrb	r3, [r3]
    a874:	e0823003 	add	r3, r2, r3
    a878:	e2432030 	sub	r2, r3, #48	; 0x30
    a87c:	e59f32d8 	ldr	r3, [pc, #728]	; ab5c <g_halGps_getData_i32+0xfa8>
    a880:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    a884:	e59f32ec 	ldr	r3, [pc, #748]	; ab78 <g_halGps_getData_i32+0xfc4>
    a888:	e5933000 	ldr	r3, [r3]
    a88c:	e2832001 	add	r2, r3, #1
    a890:	e59f32e0 	ldr	r3, [pc, #736]	; ab78 <g_halGps_getData_i32+0xfc4>
    a894:	e5832000 	str	r2, [r3]
    a898:	ea000031 	b	a964 <g_halGps_getData_i32+0xdb0>
					}
					else if(l_fieldpointer_i32<5)
    a89c:	e59f32d0 	ldr	r3, [pc, #720]	; ab74 <g_halGps_getData_i32+0xfc0>
    a8a0:	e5933000 	ldr	r3, [r3]
    a8a4:	e3530004 	cmp	r3, #4
    a8a8:	ca000012 	bgt	a8f8 <g_halGps_getData_i32+0xd44>
					{
						l_gps_longitude_st.l_minutes_ui32=l_gps_longitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    a8ac:	e59f32a8 	ldr	r3, [pc, #680]	; ab5c <g_halGps_getData_i32+0xfa8>
    a8b0:	e5932004 	ldr	r2, [r3, #4]
    a8b4:	e1a03002 	mov	r3, r2
    a8b8:	e1a03103 	lsl	r3, r3, #2
    a8bc:	e0833002 	add	r3, r3, r2
    a8c0:	e1a03083 	lsl	r3, r3, #1
    a8c4:	e1a02003 	mov	r2, r3
    a8c8:	e59f329c 	ldr	r3, [pc, #668]	; ab6c <g_halGps_getData_i32+0xfb8>
    a8cc:	e5d33000 	ldrb	r3, [r3]
    a8d0:	e0823003 	add	r3, r2, r3
    a8d4:	e2432030 	sub	r2, r3, #48	; 0x30
    a8d8:	e59f327c 	ldr	r3, [pc, #636]	; ab5c <g_halGps_getData_i32+0xfa8>
    a8dc:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    a8e0:	e59f3290 	ldr	r3, [pc, #656]	; ab78 <g_halGps_getData_i32+0xfc4>
    a8e4:	e5933000 	ldr	r3, [r3]
    a8e8:	e2832001 	add	r2, r3, #1
    a8ec:	e59f3284 	ldr	r3, [pc, #644]	; ab78 <g_halGps_getData_i32+0xfc4>
    a8f0:	e5832000 	str	r2, [r3]
    a8f4:	ea00001a 	b	a964 <g_halGps_getData_i32+0xdb0>
					}
					else if(l_fieldpointer_i32>=6 && l_fieldpointer_i32<10)
    a8f8:	e59f3274 	ldr	r3, [pc, #628]	; ab74 <g_halGps_getData_i32+0xfc0>
    a8fc:	e5933000 	ldr	r3, [r3]
    a900:	e3530005 	cmp	r3, #5
    a904:	da000016 	ble	a964 <g_halGps_getData_i32+0xdb0>
    a908:	e59f3264 	ldr	r3, [pc, #612]	; ab74 <g_halGps_getData_i32+0xfc0>
    a90c:	e5933000 	ldr	r3, [r3]
    a910:	e3530009 	cmp	r3, #9
    a914:	ca000012 	bgt	a964 <g_halGps_getData_i32+0xdb0>
					{
						l_gps_longitude_st.l_seconds_f64=l_gps_longitude_st.l_seconds_f64*10+(double)(l_rec_Data_ch-48)*0.006;
    a918:	e59f323c 	ldr	r3, [pc, #572]	; ab5c <g_halGps_getData_i32+0xfa8>
    a91c:	ed936b02 	vldr	d6, [r3, #8]
    a920:	ed9f7b86 	vldr	d7, [pc, #536]	; ab40 <g_halGps_getData_i32+0xf8c>
    a924:	ee266b07 	vmul.f64	d6, d6, d7
    a928:	e59f323c 	ldr	r3, [pc, #572]	; ab6c <g_halGps_getData_i32+0xfb8>
    a92c:	e5d33000 	ldrb	r3, [r3]
    a930:	e2433030 	sub	r3, r3, #48	; 0x30
    a934:	ee073a90 	vmov	s15, r3
    a938:	eeb85be7 	vcvt.f64.s32	d5, s15
    a93c:	ed9f7b81 	vldr	d7, [pc, #516]	; ab48 <g_halGps_getData_i32+0xf94>
    a940:	ee257b07 	vmul.f64	d7, d5, d7
    a944:	ee367b07 	vadd.f64	d7, d6, d7
    a948:	e59f320c 	ldr	r3, [pc, #524]	; ab5c <g_halGps_getData_i32+0xfa8>
    a94c:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    a950:	e59f3220 	ldr	r3, [pc, #544]	; ab78 <g_halGps_getData_i32+0xfc4>
    a954:	e5933000 	ldr	r3, [r3]
    a958:	e2832001 	add	r2, r3, #1
    a95c:	e59f3214 	ldr	r3, [pc, #532]	; ab78 <g_halGps_getData_i32+0xfc4>
    a960:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    a964:	e59f3208 	ldr	r3, [pc, #520]	; ab74 <g_halGps_getData_i32+0xfc0>
    a968:	e5933000 	ldr	r3, [r3]
    a96c:	e2832001 	add	r2, r3, #1
    a970:	e59f31fc 	ldr	r3, [pc, #508]	; ab74 <g_halGps_getData_i32+0xfc0>
    a974:	e5832000 	str	r2, [r3]
					break;
    a978:	ea0000ba 	b	ac68 <g_halGps_getData_i32+0x10b4>
				case 6://cardinal direction
					if(l_fieldpointer_i32<1)
    a97c:	e59f31f0 	ldr	r3, [pc, #496]	; ab74 <g_halGps_getData_i32+0xfc0>
    a980:	e5933000 	ldr	r3, [r3]
    a984:	e3530000 	cmp	r3, #0
    a988:	ca000008 	bgt	a9b0 <g_halGps_getData_i32+0xdfc>
					{
						l_gps_longitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    a98c:	e59f31d8 	ldr	r3, [pc, #472]	; ab6c <g_halGps_getData_i32+0xfb8>
    a990:	e5d32000 	ldrb	r2, [r3]
    a994:	e59f31c0 	ldr	r3, [pc, #448]	; ab5c <g_halGps_getData_i32+0xfa8>
    a998:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    a99c:	e59f31d4 	ldr	r3, [pc, #468]	; ab78 <g_halGps_getData_i32+0xfc4>
    a9a0:	e5933000 	ldr	r3, [r3]
    a9a4:	e2832001 	add	r2, r3, #1
    a9a8:	e59f31c8 	ldr	r3, [pc, #456]	; ab78 <g_halGps_getData_i32+0xfc4>
    a9ac:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    a9b0:	e59f31bc 	ldr	r3, [pc, #444]	; ab74 <g_halGps_getData_i32+0xfc0>
    a9b4:	e5933000 	ldr	r3, [r3]
    a9b8:	e2832001 	add	r2, r3, #1
    a9bc:	e59f31b0 	ldr	r3, [pc, #432]	; ab74 <g_halGps_getData_i32+0xfc0>
    a9c0:	e5832000 	str	r2, [r3]
					break;
    a9c4:	ea0000a7 	b	ac68 <g_halGps_getData_i32+0x10b4>
				case 7://Velocity
					if(l_fieldpointer_i32<1)
    a9c8:	e59f31a4 	ldr	r3, [pc, #420]	; ab74 <g_halGps_getData_i32+0xfc0>
    a9cc:	e5933000 	ldr	r3, [r3]
    a9d0:	e3530000 	cmp	r3, #0
    a9d4:	ca000013 	bgt	aa28 <g_halGps_getData_i32+0xe74>
					{
						l_velocity_f64=l_velocity_f64*10+(double)(l_rec_Data_ch-48)*0.01;
    a9d8:	e59f3180 	ldr	r3, [pc, #384]	; ab60 <g_halGps_getData_i32+0xfac>
    a9dc:	ed936b00 	vldr	d6, [r3]
    a9e0:	ed9f7b56 	vldr	d7, [pc, #344]	; ab40 <g_halGps_getData_i32+0xf8c>
    a9e4:	ee266b07 	vmul.f64	d6, d6, d7
    a9e8:	e59f317c 	ldr	r3, [pc, #380]	; ab6c <g_halGps_getData_i32+0xfb8>
    a9ec:	e5d33000 	ldrb	r3, [r3]
    a9f0:	e2433030 	sub	r3, r3, #48	; 0x30
    a9f4:	ee073a90 	vmov	s15, r3
    a9f8:	eeb85be7 	vcvt.f64.s32	d5, s15
    a9fc:	ed9f7b53 	vldr	d7, [pc, #332]	; ab50 <g_halGps_getData_i32+0xf9c>
    aa00:	ee257b07 	vmul.f64	d7, d5, d7
    aa04:	ee367b07 	vadd.f64	d7, d6, d7
    aa08:	e59f3150 	ldr	r3, [pc, #336]	; ab60 <g_halGps_getData_i32+0xfac>
    aa0c:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    aa10:	e59f3160 	ldr	r3, [pc, #352]	; ab78 <g_halGps_getData_i32+0xfc4>
    aa14:	e5933000 	ldr	r3, [r3]
    aa18:	e2832001 	add	r2, r3, #1
    aa1c:	e59f3154 	ldr	r3, [pc, #340]	; ab78 <g_halGps_getData_i32+0xfc4>
    aa20:	e5832000 	str	r2, [r3]
    aa24:	ea00001a 	b	aa94 <g_halGps_getData_i32+0xee0>
					}
					else if(l_fieldpointer_i32>=2 && l_fieldpointer_i32<4)
    aa28:	e59f3144 	ldr	r3, [pc, #324]	; ab74 <g_halGps_getData_i32+0xfc0>
    aa2c:	e5933000 	ldr	r3, [r3]
    aa30:	e3530001 	cmp	r3, #1
    aa34:	da000016 	ble	aa94 <g_halGps_getData_i32+0xee0>
    aa38:	e59f3134 	ldr	r3, [pc, #308]	; ab74 <g_halGps_getData_i32+0xfc0>
    aa3c:	e5933000 	ldr	r3, [r3]
    aa40:	e3530003 	cmp	r3, #3
    aa44:	ca000012 	bgt	aa94 <g_halGps_getData_i32+0xee0>
					{
						l_velocity_f64=l_velocity_f64*10+(double)(l_rec_Data_ch-48)*0.01;
    aa48:	e59f3110 	ldr	r3, [pc, #272]	; ab60 <g_halGps_getData_i32+0xfac>
    aa4c:	ed936b00 	vldr	d6, [r3]
    aa50:	ed9f7b3a 	vldr	d7, [pc, #232]	; ab40 <g_halGps_getData_i32+0xf8c>
    aa54:	ee266b07 	vmul.f64	d6, d6, d7
    aa58:	e59f310c 	ldr	r3, [pc, #268]	; ab6c <g_halGps_getData_i32+0xfb8>
    aa5c:	e5d33000 	ldrb	r3, [r3]
    aa60:	e2433030 	sub	r3, r3, #48	; 0x30
    aa64:	ee073a90 	vmov	s15, r3
    aa68:	eeb85be7 	vcvt.f64.s32	d5, s15
    aa6c:	ed9f7b37 	vldr	d7, [pc, #220]	; ab50 <g_halGps_getData_i32+0xf9c>
    aa70:	ee257b07 	vmul.f64	d7, d5, d7
    aa74:	ee367b07 	vadd.f64	d7, d6, d7
    aa78:	e59f30e0 	ldr	r3, [pc, #224]	; ab60 <g_halGps_getData_i32+0xfac>
    aa7c:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    aa80:	e59f30f0 	ldr	r3, [pc, #240]	; ab78 <g_halGps_getData_i32+0xfc4>
    aa84:	e5933000 	ldr	r3, [r3]
    aa88:	e2832001 	add	r2, r3, #1
    aa8c:	e59f30e4 	ldr	r3, [pc, #228]	; ab78 <g_halGps_getData_i32+0xfc4>
    aa90:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    aa94:	e59f30d8 	ldr	r3, [pc, #216]	; ab74 <g_halGps_getData_i32+0xfc0>
    aa98:	e5933000 	ldr	r3, [r3]
    aa9c:	e2832001 	add	r2, r3, #1
    aaa0:	e59f30cc 	ldr	r3, [pc, #204]	; ab74 <g_halGps_getData_i32+0xfc0>
    aaa4:	e5832000 	str	r2, [r3]
					break;
    aaa8:	ea00006e 	b	ac68 <g_halGps_getData_i32+0x10b4>
				case 8://Direction
					if(l_rec_Data_ch!='.' && l_fieldpointer_i32==0)
    aaac:	e59f30b8 	ldr	r3, [pc, #184]	; ab6c <g_halGps_getData_i32+0xfb8>
    aab0:	e5d33000 	ldrb	r3, [r3]
    aab4:	e353002e 	cmp	r3, #46	; 0x2e
    aab8:	0a000015 	beq	ab14 <g_halGps_getData_i32+0xf60>
    aabc:	e59f30b0 	ldr	r3, [pc, #176]	; ab74 <g_halGps_getData_i32+0xfc0>
    aac0:	e5933000 	ldr	r3, [r3]
    aac4:	e3530000 	cmp	r3, #0
    aac8:	1a000011 	bne	ab14 <g_halGps_getData_i32+0xf60>
					{
						l_direction_f64=l_direction_f64*10+(double)(l_rec_Data_ch-48);
    aacc:	e59f3090 	ldr	r3, [pc, #144]	; ab64 <g_halGps_getData_i32+0xfb0>
    aad0:	ed936b00 	vldr	d6, [r3]
    aad4:	ed9f7b19 	vldr	d7, [pc, #100]	; ab40 <g_halGps_getData_i32+0xf8c>
    aad8:	ee266b07 	vmul.f64	d6, d6, d7
    aadc:	e59f3088 	ldr	r3, [pc, #136]	; ab6c <g_halGps_getData_i32+0xfb8>
    aae0:	e5d33000 	ldrb	r3, [r3]
    aae4:	e2433030 	sub	r3, r3, #48	; 0x30
    aae8:	ee053a90 	vmov	s11, r3
    aaec:	eeb87be5 	vcvt.f64.s32	d7, s11
    aaf0:	ee367b07 	vadd.f64	d7, d6, d7
    aaf4:	e59f3068 	ldr	r3, [pc, #104]	; ab64 <g_halGps_getData_i32+0xfb0>
    aaf8:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    aafc:	e59f3074 	ldr	r3, [pc, #116]	; ab78 <g_halGps_getData_i32+0xfc4>
    ab00:	e5933000 	ldr	r3, [r3]
    ab04:	e2832001 	add	r2, r3, #1
    ab08:	e59f3068 	ldr	r3, [pc, #104]	; ab78 <g_halGps_getData_i32+0xfc4>
    ab0c:	e5832000 	str	r2, [r3]
    ab10:	ea000037 	b	abf4 <g_halGps_getData_i32+0x1040>

					}
					else if (l_rec_Data_ch=='.')
    ab14:	e59f3050 	ldr	r3, [pc, #80]	; ab6c <g_halGps_getData_i32+0xfb8>
    ab18:	e5d33000 	ldrb	r3, [r3]
    ab1c:	e353002e 	cmp	r3, #46	; 0x2e
    ab20:	1a000015 	bne	ab7c <g_halGps_getData_i32+0xfc8>
					{
						l_fieldpointer_i32++;
    ab24:	e59f3048 	ldr	r3, [pc, #72]	; ab74 <g_halGps_getData_i32+0xfc0>
    ab28:	e5933000 	ldr	r3, [r3]
    ab2c:	e2832001 	add	r2, r3, #1
    ab30:	e59f303c 	ldr	r3, [pc, #60]	; ab74 <g_halGps_getData_i32+0xfc0>
    ab34:	e5832000 	str	r2, [r3]
    ab38:	ea00002d 	b	abf4 <g_halGps_getData_i32+0x1040>
    ab3c:	e1a00000 	nop			; (mov r0, r0)
    ab40:	00000000 	.word	0x00000000
    ab44:	40240000 	.word	0x40240000
    ab48:	bc6a7efa 	.word	0xbc6a7efa
    ab4c:	3f789374 	.word	0x3f789374
    ab50:	47ae147b 	.word	0x47ae147b
    ab54:	3f847ae1 	.word	0x3f847ae1
    ab58:	000102c8 	.word	0x000102c8
    ab5c:	000102b0 	.word	0x000102b0
    ab60:	000102e8 	.word	0x000102e8
    ab64:	000102f0 	.word	0x000102f0
    ab68:	0001024c 	.word	0x0001024c
    ab6c:	00010248 	.word	0x00010248
    ab70:	000102f8 	.word	0x000102f8
    ab74:	00010314 	.word	0x00010314
    ab78:	00010318 	.word	0x00010318
					}
					else
					{
						l_direction_f64=l_direction_f64+(double)(l_rec_Data_ch-48)/l_decimal_place_factor_i32;
    ab7c:	e51f3018 	ldr	r3, [pc, #-24]	; ab6c <g_halGps_getData_i32+0xfb8>
    ab80:	e5d33000 	ldrb	r3, [r3]
    ab84:	e2433030 	sub	r3, r3, #48	; 0x30
    ab88:	ee073a90 	vmov	s15, r3
    ab8c:	eeb86be7 	vcvt.f64.s32	d6, s15
    ab90:	e51f3030 	ldr	r3, [pc, #-48]	; ab68 <g_halGps_getData_i32+0xfb4>
    ab94:	e5933000 	ldr	r3, [r3]
    ab98:	ee053a90 	vmov	s11, r3
    ab9c:	eeb87be5 	vcvt.f64.s32	d7, s11
    aba0:	ee866b07 	vdiv.f64	d6, d6, d7
    aba4:	e51f3048 	ldr	r3, [pc, #-72]	; ab64 <g_halGps_getData_i32+0xfb0>
    aba8:	ed937b00 	vldr	d7, [r3]
    abac:	ee367b07 	vadd.f64	d7, d6, d7
    abb0:	e51f3054 	ldr	r3, [pc, #-84]	; ab64 <g_halGps_getData_i32+0xfb0>
    abb4:	ed837b00 	vstr	d7, [r3]
						l_decimal_place_factor_i32=l_decimal_place_factor_i32*10;
    abb8:	e51f3058 	ldr	r3, [pc, #-88]	; ab68 <g_halGps_getData_i32+0xfb4>
    abbc:	e5932000 	ldr	r2, [r3]
    abc0:	e1a03002 	mov	r3, r2
    abc4:	e1a03103 	lsl	r3, r3, #2
    abc8:	e0833002 	add	r3, r3, r2
    abcc:	e1a03083 	lsl	r3, r3, #1
    abd0:	e1a02003 	mov	r2, r3
    abd4:	e51f3074 	ldr	r3, [pc, #-116]	; ab68 <g_halGps_getData_i32+0xfb4>
    abd8:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    abdc:	e51f306c 	ldr	r3, [pc, #-108]	; ab78 <g_halGps_getData_i32+0xfc4>
    abe0:	e5933000 	ldr	r3, [r3]
    abe4:	e2832001 	add	r2, r3, #1
    abe8:	e51f3078 	ldr	r3, [pc, #-120]	; ab78 <g_halGps_getData_i32+0xfc4>
    abec:	e5832000 	str	r2, [r3]
					}
					break;
    abf0:	ea00001c 	b	ac68 <g_halGps_getData_i32+0x10b4>
    abf4:	ea00001b 	b	ac68 <g_halGps_getData_i32+0x10b4>
				case 9://Date
					if(l_fieldpointer_i32<6)
    abf8:	e51f308c 	ldr	r3, [pc, #-140]	; ab74 <g_halGps_getData_i32+0xfc0>
    abfc:	e5933000 	ldr	r3, [r3]
    ac00:	e3530005 	cmp	r3, #5
    ac04:	ca000011 	bgt	ac50 <g_halGps_getData_i32+0x109c>
					{
						l_date_ui32=l_date_ui32*10+(l_rec_Data_ch-48);
    ac08:	e51f30a0 	ldr	r3, [pc, #-160]	; ab70 <g_halGps_getData_i32+0xfbc>
    ac0c:	e5932000 	ldr	r2, [r3]
    ac10:	e1a03002 	mov	r3, r2
    ac14:	e1a03103 	lsl	r3, r3, #2
    ac18:	e0833002 	add	r3, r3, r2
    ac1c:	e1a03083 	lsl	r3, r3, #1
    ac20:	e1a02003 	mov	r2, r3
    ac24:	e51f30c0 	ldr	r3, [pc, #-192]	; ab6c <g_halGps_getData_i32+0xfb8>
    ac28:	e5d33000 	ldrb	r3, [r3]
    ac2c:	e0823003 	add	r3, r2, r3
    ac30:	e2432030 	sub	r2, r3, #48	; 0x30
    ac34:	e51f30cc 	ldr	r3, [pc, #-204]	; ab70 <g_halGps_getData_i32+0xfbc>
    ac38:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    ac3c:	e51f30cc 	ldr	r3, [pc, #-204]	; ab78 <g_halGps_getData_i32+0xfc4>
    ac40:	e5933000 	ldr	r3, [r3]
    ac44:	e2832001 	add	r2, r3, #1
    ac48:	e51f30d8 	ldr	r3, [pc, #-216]	; ab78 <g_halGps_getData_i32+0xfc4>
    ac4c:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    ac50:	e51f30e4 	ldr	r3, [pc, #-228]	; ab74 <g_halGps_getData_i32+0xfc0>
    ac54:	e5933000 	ldr	r3, [r3]
    ac58:	e2832001 	add	r2, r3, #1
    ac5c:	e51f30f0 	ldr	r3, [pc, #-240]	; ab74 <g_halGps_getData_i32+0xfc0>
    ac60:	e5832000 	str	r2, [r3]
					break;
    ac64:	e1a00000 	nop			; (mov r0, r0)
				}
				break;
    ac68:	e1a00000 	nop			; (mov r0, r0)
			}
			break;
    ac6c:	e1a00000 	nop			; (mov r0, r0)
		}
	}
	return(l_succeded_i32);
    ac70:	e51f3100 	ldr	r3, [pc, #-256]	; ab78 <g_halGps_getData_i32+0xfc4>
    ac74:	e5933000 	ldr	r3, [r3]
}
    ac78:	e1a00003 	mov	r0, r3
    ac7c:	e8bd8800 	pop	{fp, pc}

0000ac80 <l_readI2cByte_ui8>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline unsigned char l_readI2cByte_ui8( unsigned char f_registerAddr_ui8 )
{
    ac80:	e92d4800 	push	{fp, lr}
    ac84:	e28db004 	add	fp, sp, #4
    ac88:	e24dd010 	sub	sp, sp, #16
    ac8c:	e1a03000 	mov	r3, r0
    ac90:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char	l_registerAddr_ui8 = 0;
    ac94:	e3a03000 	mov	r3, #0
    ac98:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char	l_recvDataByte_ui8 = 0;
    ac9c:	e3a03000 	mov	r3, #0
    aca0:	e54b3006 	strb	r3, [fp, #-6]

	/*
	 * ensure single byte read (MSB of register address shall be 0)
	 * -> Mask MSB to zero!
	 */
	l_registerAddr_ui8 = f_registerAddr_ui8 & 0b01111111;
    aca4:	e55b300d 	ldrb	r3, [fp, #-13]
    aca8:	e203307f 	and	r3, r3, #127	; 0x7f
    acac:	e6ef3073 	uxtb	r3, r3
    acb0:	e54b3005 	strb	r3, [fp, #-5]

	//write register request to I2C
	if ( g_lldI2c_WriteI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, &l_registerAddr_ui8, 1) != M_HAL_ACCMAG_SUCCESS_BL )
    acb4:	e24b3005 	sub	r3, fp, #5
    acb8:	e3a0001e 	mov	r0, #30
    acbc:	e1a01003 	mov	r1, r3
    acc0:	e3a02001 	mov	r2, #1
    acc4:	eb0005a3 	bl	c358 <g_lldI2c_WriteI2c_bl>
    acc8:	e1a03000 	mov	r3, r0
    accc:	e3530000 	cmp	r3, #0
    acd0:	0a000001 	beq	acdc <l_readI2cByte_ui8+0x5c>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    acd4:	e3a03001 	mov	r3, #1
    acd8:	ea00000a 	b	ad08 <l_readI2cByte_ui8+0x88>
	}

	//read requested register data
	if ( g_lldI2c_ReadI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, &l_recvDataByte_ui8, 1) != M_HAL_ACCMAG_SUCCESS_BL )
    acdc:	e24b3006 	sub	r3, fp, #6
    ace0:	e3a0001e 	mov	r0, #30
    ace4:	e1a01003 	mov	r1, r3
    ace8:	e3a02001 	mov	r2, #1
    acec:	eb0005d1 	bl	c438 <g_lldI2c_ReadI2c_bl>
    acf0:	e1a03000 	mov	r3, r0
    acf4:	e3530000 	cmp	r3, #0
    acf8:	0a000001 	beq	ad04 <l_readI2cByte_ui8+0x84>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    acfc:	e3a03001 	mov	r3, #1
    ad00:	ea000000 	b	ad08 <l_readI2cByte_ui8+0x88>
	}

	return l_recvDataByte_ui8;
    ad04:	e55b3006 	ldrb	r3, [fp, #-6]
}
    ad08:	e1a00003 	mov	r0, r3
    ad0c:	e24bd004 	sub	sp, fp, #4
    ad10:	e8bd8800 	pop	{fp, pc}

0000ad14 <l_readI2cByteStream_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline unsigned int l_readI2cByteStream_bl( unsigned char f_startRegisterAddr_ui8, const unsigned char* f_readDestinationBuffer_pui8, unsigned int f_numOfBytesToRead_ui32 )
{
    ad14:	e92d4800 	push	{fp, lr}
    ad18:	e28db004 	add	fp, sp, #4
    ad1c:	e24dd018 	sub	sp, sp, #24
    ad20:	e1a03000 	mov	r3, r0
    ad24:	e50b1014 	str	r1, [fp, #-20]
    ad28:	e50b2018 	str	r2, [fp, #-24]
    ad2c:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char	l_registerAddr_ui8 	= 0;
    ad30:	e3a03000 	mov	r3, #0
    ad34:	e54b3005 	strb	r3, [fp, #-5]

	// ensure at least one data byte to read
	if (f_numOfBytesToRead_ui32 < 1)
    ad38:	e51b3018 	ldr	r3, [fp, #-24]
    ad3c:	e3530000 	cmp	r3, #0
    ad40:	1a000001 	bne	ad4c <l_readI2cByteStream_bl+0x38>
	{
		return M_HAL_ACCMAG_FAILED_BL;
    ad44:	e3a03001 	mov	r3, #1
    ad48:	ea000018 	b	adb0 <l_readI2cByteStream_bl+0x9c>
	 * ensure byte stream reading (MSB of register address shall be 1)
	 *   -> Mask MSB to one!
	 *   -> LSM303D will auto-increment the register address for each byte
	 *      of data
	 */
	l_registerAddr_ui8 = f_startRegisterAddr_ui8 | 0b10000000;
    ad4c:	e55b300d 	ldrb	r3, [fp, #-13]
    ad50:	e1e03c83 	mvn	r3, r3, lsl #25
    ad54:	e1e03ca3 	mvn	r3, r3, lsr #25
    ad58:	e6ef3073 	uxtb	r3, r3
    ad5c:	e54b3005 	strb	r3, [fp, #-5]

	//write register request to I2C
	if ( g_lldI2c_WriteI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, &l_registerAddr_ui8, 1) != M_HAL_ACCMAG_SUCCESS_BL )
    ad60:	e24b3005 	sub	r3, fp, #5
    ad64:	e3a0001e 	mov	r0, #30
    ad68:	e1a01003 	mov	r1, r3
    ad6c:	e3a02001 	mov	r2, #1
    ad70:	eb000578 	bl	c358 <g_lldI2c_WriteI2c_bl>
    ad74:	e1a03000 	mov	r3, r0
    ad78:	e3530000 	cmp	r3, #0
    ad7c:	0a000001 	beq	ad88 <l_readI2cByteStream_bl+0x74>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    ad80:	e3a03001 	mov	r3, #1
    ad84:	ea000009 	b	adb0 <l_readI2cByteStream_bl+0x9c>
	}

	//read requested registers to I2C
	if ( g_lldI2c_ReadI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, f_readDestinationBuffer_pui8, f_numOfBytesToRead_ui32) != M_HAL_ACCMAG_SUCCESS_BL )
    ad88:	e3a0001e 	mov	r0, #30
    ad8c:	e51b1014 	ldr	r1, [fp, #-20]
    ad90:	e51b2018 	ldr	r2, [fp, #-24]
    ad94:	eb0005a7 	bl	c438 <g_lldI2c_ReadI2c_bl>
    ad98:	e1a03000 	mov	r3, r0
    ad9c:	e3530000 	cmp	r3, #0
    ada0:	0a000001 	beq	adac <l_readI2cByteStream_bl+0x98>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    ada4:	e3a03001 	mov	r3, #1
    ada8:	ea000000 	b	adb0 <l_readI2cByteStream_bl+0x9c>
	}

	return M_HAL_ACCMAG_SUCCESS_BL;
    adac:	e3a03000 	mov	r3, #0
}
    adb0:	e1a00003 	mov	r0, r3
    adb4:	e24bd004 	sub	sp, fp, #4
    adb8:	e8bd8800 	pop	{fp, pc}

0000adbc <l_writeI2cByteStream_bl>:
 * - changed malloc/free approach to fixed size array (with define to set
 *   size of array in header)
 * \endinternal
 ***********************************************************************/
static inline unsigned int l_writeI2cByteStream_bl( unsigned char f_startRegisterAddr_ui8, const unsigned char* const f_byteStreamToWrite_pui8, unsigned int f_numOfBytes_ui32 )
{
    adbc:	e92d4800 	push	{fp, lr}
    adc0:	e28db004 	add	fp, sp, #4
    adc4:	e24dd028 	sub	sp, sp, #40	; 0x28
    adc8:	e1a03000 	mov	r3, r0
    adcc:	e50b1024 	str	r1, [fp, #-36]	; 0x24
    add0:	e50b2028 	str	r2, [fp, #-40]	; 0x28
    add4:	e54b301d 	strb	r3, [fp, #-29]
	unsigned int	l_writeSucceeded_bl 	= M_HAL_ACCMAG_SUCCESS_BL; 	// success state as default
    add8:	e3a03000 	mov	r3, #0
    addc:	e50b3008 	str	r3, [fp, #-8]
	unsigned char 	l_bufCtr_ui8			= 0;						// loop counter to assemble payload and register address
    ade0:	e3a03000 	mov	r3, #0
    ade4:	e54b3009 	strb	r3, [fp, #-9]
	/*
	 * - ensure at least one data byte to write
	 * - prevent a buffer overflow of l_byteStreamBuffer_rgXui8
	 *   --> payload data bytes + register address (subaddress)
	 */
	if ( 		(f_numOfBytes_ui32 < 1)
    ade8:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    adec:	e3530000 	cmp	r3, #0
    adf0:	0a000002 	beq	ae00 <l_writeI2cByteStream_bl+0x44>
			||  (f_numOfBytes_ui32 > M_HAL_ACCMAG_WRITE_BYTESTREAM_BUFFER_SIZE_UI8-1) )
    adf4:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    adf8:	e353000b 	cmp	r3, #11
    adfc:	9a000001 	bls	ae08 <l_writeI2cByteStream_bl+0x4c>
	{
		return M_HAL_ACCMAG_FAILED_BL;
    ae00:	e3a03001 	mov	r3, #1
    ae04:	ea000026 	b	aea4 <l_writeI2cByteStream_bl+0xe8>
	 *     -> LSM303D will auto-increment the register address for each byte
	 *        of data
	 * (2) copy data to write to local buffer, start at second byte position
	 *     (first byte position is the register address)
	 */
	l_byteStreamBuffer_rgXui8[0] = f_startRegisterAddr_ui8 | 0b10000000;
    ae08:	e55b301d 	ldrb	r3, [fp, #-29]
    ae0c:	e1e03c83 	mvn	r3, r3, lsl #25
    ae10:	e1e03ca3 	mvn	r3, r3, lsr #25
    ae14:	e6ef3073 	uxtb	r3, r3
    ae18:	e54b3018 	strb	r3, [fp, #-24]
	for(l_bufCtr_ui8=0; l_bufCtr_ui8 < f_numOfBytes_ui32; l_bufCtr_ui8++)
    ae1c:	e3a03000 	mov	r3, #0
    ae20:	e54b3009 	strb	r3, [fp, #-9]
    ae24:	ea00000d 	b	ae60 <l_writeI2cByteStream_bl+0xa4>
	{
		l_byteStreamBuffer_rgXui8[l_bufCtr_ui8+1] = f_byteStreamToWrite_pui8[l_bufCtr_ui8];
    ae28:	e55b3009 	ldrb	r3, [fp, #-9]
    ae2c:	e2831001 	add	r1, r3, #1
    ae30:	e55b3009 	ldrb	r3, [fp, #-9]
    ae34:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
    ae38:	e0823003 	add	r3, r2, r3
    ae3c:	e5d32000 	ldrb	r2, [r3]
    ae40:	e3e03013 	mvn	r3, #19
    ae44:	e24b0004 	sub	r0, fp, #4
    ae48:	e0801001 	add	r1, r0, r1
    ae4c:	e0813003 	add	r3, r1, r3
    ae50:	e5c32000 	strb	r2, [r3]
	 *        of data
	 * (2) copy data to write to local buffer, start at second byte position
	 *     (first byte position is the register address)
	 */
	l_byteStreamBuffer_rgXui8[0] = f_startRegisterAddr_ui8 | 0b10000000;
	for(l_bufCtr_ui8=0; l_bufCtr_ui8 < f_numOfBytes_ui32; l_bufCtr_ui8++)
    ae54:	e55b3009 	ldrb	r3, [fp, #-9]
    ae58:	e2833001 	add	r3, r3, #1
    ae5c:	e54b3009 	strb	r3, [fp, #-9]
    ae60:	e55b2009 	ldrb	r2, [fp, #-9]
    ae64:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    ae68:	e1520003 	cmp	r2, r3
    ae6c:	3affffed 	bcc	ae28 <l_writeI2cByteStream_bl+0x6c>
	{
		l_byteStreamBuffer_rgXui8[l_bufCtr_ui8+1] = f_byteStreamToWrite_pui8[l_bufCtr_ui8];
	}

	//write register to I2C
	if ( g_lldI2c_WriteI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, l_byteStreamBuffer_rgXui8, f_numOfBytes_ui32 + 1) != M_HAL_ACCMAG_SUCCESS_BL )
    ae70:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    ae74:	e2833001 	add	r3, r3, #1
    ae78:	e24b2018 	sub	r2, fp, #24
    ae7c:	e3a0001e 	mov	r0, #30
    ae80:	e1a01002 	mov	r1, r2
    ae84:	e1a02003 	mov	r2, r3
    ae88:	eb000532 	bl	c358 <g_lldI2c_WriteI2c_bl>
    ae8c:	e1a03000 	mov	r3, r0
    ae90:	e3530000 	cmp	r3, #0
    ae94:	0a000001 	beq	aea0 <l_writeI2cByteStream_bl+0xe4>
	{
		// error in I2C access
		l_writeSucceeded_bl = M_HAL_ACCMAG_FAILED_BL;
    ae98:	e3a03001 	mov	r3, #1
    ae9c:	e50b3008 	str	r3, [fp, #-8]
	}

	return l_writeSucceeded_bl;
    aea0:	e51b3008 	ldr	r3, [fp, #-8]
}
    aea4:	e1a00003 	mov	r0, r3
    aea8:	e24bd004 	sub	sp, fp, #4
    aeac:	e8bd8800 	pop	{fp, pc}

0000aeb0 <l_twoCompOf16Bit_ui16>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline signed short l_twoCompOf16Bit_ui16( unsigned char f_lsb_ui8, unsigned char f_msb_ui8 )
{
    aeb0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    aeb4:	e28db000 	add	fp, sp, #0
    aeb8:	e24dd014 	sub	sp, sp, #20
    aebc:	e1a02000 	mov	r2, r0
    aec0:	e1a03001 	mov	r3, r1
    aec4:	e54b200d 	strb	r2, [fp, #-13]
    aec8:	e54b300e 	strb	r3, [fp, #-14]
	signed short	l_compOfTwo_ui16 = 0; //init variable with zeros
    aecc:	e3a03000 	mov	r3, #0
    aed0:	e14b30b6 	strh	r3, [fp, #-6]
	 * 2. invert 16bit
	 * 3. add 1 to 16bit value
	 * 4. mask only 16bit range (to avoid overflows)
	 * --> conversion of two's complement
	 */
	l_compOfTwo_ui16 = (signed short)( ( ~((int)(f_msb_ui8 << 8) + (int)(f_lsb_ui8)) + (int)1 ) & (int)0xFFFF );
    aed4:	e55b300e 	ldrb	r3, [fp, #-14]
    aed8:	e6ff3073 	uxth	r3, r3
    aedc:	e1a03403 	lsl	r3, r3, #8
    aee0:	e6ff2073 	uxth	r2, r3
    aee4:	e55b300d 	ldrb	r3, [fp, #-13]
    aee8:	e6ff3073 	uxth	r3, r3
    aeec:	e0823003 	add	r3, r2, r3
    aef0:	e6ff3073 	uxth	r3, r3
    aef4:	e2633000 	rsb	r3, r3, #0
    aef8:	e6ff3073 	uxth	r3, r3
    aefc:	e14b30b6 	strh	r3, [fp, #-6]

	return l_compOfTwo_ui16;
    af00:	e15b30b6 	ldrh	r3, [fp, #-6]
    af04:	e6bf3073 	sxth	r3, r3
}
    af08:	e1a00003 	mov	r0, r3
    af0c:	e24bd000 	sub	sp, fp, #0
    af10:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    af14:	e12fff1e 	bx	lr

0000af18 <l_convertMagRawToSIUnit_f64>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline double l_convertMagRawToSIUnit_f64( signed short f_rawMagVal_i16, unsigned char f_scalingValueGauss_ui8 )
{
    af18:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    af1c:	e28db000 	add	fp, sp, #0
    af20:	e24dd01c 	sub	sp, sp, #28
    af24:	e1a02000 	mov	r2, r0
    af28:	e1a03001 	mov	r3, r1
    af2c:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
    af30:	e54b3017 	strb	r3, [fp, #-23]
	double			l_outputValue_f64 = 0;
    af34:	e3a02000 	mov	r2, #0
    af38:	e3a03000 	mov	r3, #0
    af3c:	e14b20fc 	strd	r2, [fp, #-12]
	const double	l_gaussToSI_f64 = 0.1E-3;	//1Gauss = 0.1mT = 0.1*10^(-3)T
    af40:	e59f2060 	ldr	r2, [pc, #96]	; afa8 <l_convertMagRawToSIUnit_f64+0x90>
    af44:	e59f3060 	ldr	r3, [pc, #96]	; afac <l_convertMagRawToSIUnit_f64+0x94>
    af48:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

	// unitless [-1,1]
	l_outputValue_f64 = (double)f_rawMagVal_i16 / (double)SHRT_MAX;
    af4c:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
    af50:	ee053a90 	vmov	s11, r3
    af54:	eeb86be5 	vcvt.f64.s32	d6, s11
    af58:	ed9f7b10 	vldr	d7, [pc, #64]	; afa0 <l_convertMagRawToSIUnit_f64+0x88>
    af5c:	ee867b07 	vdiv.f64	d7, d6, d7
    af60:	ed0b7b03 	vstr	d7, [fp, #-12]

	// Units: 1 * T*Gauss^(-1) * Gauss = m*s^(-2)
	l_outputValue_f64 = l_outputValue_f64 * l_gaussToSI_f64 * (double)f_scalingValueGauss_ui8;
    af64:	ed1b6b03 	vldr	d6, [fp, #-12]
    af68:	ed1b7b05 	vldr	d7, [fp, #-20]	; 0xffffffec
    af6c:	ee266b07 	vmul.f64	d6, d6, d7
    af70:	e55b3017 	ldrb	r3, [fp, #-23]
    af74:	ee053a90 	vmov	s11, r3
    af78:	eeb87b65 	vcvt.f64.u32	d7, s11
    af7c:	ee267b07 	vmul.f64	d7, d6, d7
    af80:	ed0b7b03 	vstr	d7, [fp, #-12]

	return l_outputValue_f64;	//Tesla
    af84:	e14b20dc 	ldrd	r2, [fp, #-12]
    af88:	ec432b17 	vmov	d7, r2, r3
}
    af8c:	eeb00b47 	vmov.f64	d0, d7
    af90:	e24bd000 	sub	sp, fp, #0
    af94:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    af98:	e12fff1e 	bx	lr
    af9c:	e1a00000 	nop			; (mov r0, r0)
    afa0:	00000000 	.word	0x00000000
    afa4:	40dfffc0 	.word	0x40dfffc0
    afa8:	eb1c432d 	.word	0xeb1c432d
    afac:	3f1a36e2 	.word	0x3f1a36e2

0000afb0 <l_convertAccRawToSIUnit_f64>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline double l_convertAccRawToSIUnit_f64( signed short f_rawAccVal_i16, unsigned char f_scalingValueG_ui8 )
{
    afb0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    afb4:	e28db000 	add	fp, sp, #0
    afb8:	e24dd01c 	sub	sp, sp, #28
    afbc:	e1a02000 	mov	r2, r0
    afc0:	e1a03001 	mov	r3, r1
    afc4:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
    afc8:	e54b3017 	strb	r3, [fp, #-23]
	double			l_outputValue_f64 	= 0;
    afcc:	e3a02000 	mov	r2, #0
    afd0:	e3a03000 	mov	r3, #0
    afd4:	e14b20fc 	strd	r2, [fp, #-12]
	const double	l_gravityConst_f64 	= 9.81; // m*(s^-2) per G
    afd8:	e59f2060 	ldr	r2, [pc, #96]	; b040 <l_convertAccRawToSIUnit_f64+0x90>
    afdc:	e59f3060 	ldr	r3, [pc, #96]	; b044 <l_convertAccRawToSIUnit_f64+0x94>
    afe0:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

	// unitless [-1,1]
	l_outputValue_f64 = (double)f_scalingValueG_ui8 * (double)f_rawAccVal_i16 / (double)SHRT_MAX;
    afe4:	e55b3017 	ldrb	r3, [fp, #-23]
    afe8:	ee053a90 	vmov	s11, r3
    afec:	eeb86b65 	vcvt.f64.u32	d6, s11
    aff0:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
    aff4:	ee053a90 	vmov	s11, r3
    aff8:	eeb87be5 	vcvt.f64.s32	d7, s11
    affc:	ee266b07 	vmul.f64	d6, d6, d7
    b000:	ed9f7b0c 	vldr	d7, [pc, #48]	; b038 <l_convertAccRawToSIUnit_f64+0x88>
    b004:	ee867b07 	vdiv.f64	d7, d6, d7
    b008:	ed0b7b03 	vstr	d7, [fp, #-12]

	// Units: 1 * m*s^(-2)*G^(-1) * G = m*s^(-2)
	l_outputValue_f64 = l_outputValue_f64 * l_gravityConst_f64;
    b00c:	ed1b6b03 	vldr	d6, [fp, #-12]
    b010:	ed1b7b05 	vldr	d7, [fp, #-20]	; 0xffffffec
    b014:	ee267b07 	vmul.f64	d7, d6, d7
    b018:	ed0b7b03 	vstr	d7, [fp, #-12]

	return l_outputValue_f64;  // m*(s^-2)
    b01c:	e14b20dc 	ldrd	r2, [fp, #-12]
    b020:	ec432b17 	vmov	d7, r2, r3
}
    b024:	eeb00b47 	vmov.f64	d0, d7
    b028:	e24bd000 	sub	sp, fp, #0
    b02c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    b030:	e12fff1e 	bx	lr
    b034:	e1a00000 	nop			; (mov r0, r0)
    b038:	00000000 	.word	0x00000000
    b03c:	40dfffc0 	.word	0x40dfffc0
    b040:	51eb851f 	.word	0x51eb851f
    b044:	40239eb8 	.word	0x40239eb8

0000b048 <l_updateSensorState_vd>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline unsigned int l_updateSensorState_vd( halAccmag_sensorSelect f_sensor_en )
{
    b048:	e92d4800 	push	{fp, lr}
    b04c:	e28db004 	add	fp, sp, #4
    b050:	e24dd048 	sub	sp, sp, #72	; 0x48
    b054:	e50b0048 	str	r0, [fp, #-72]	; 0x48
	halAccmag_3dDoubleVector	l_accBuffer_st;
	halAccmag_3dDoubleVector	l_magBuffer_st;
	unsigned char				l_readBuffer_rg6ui8[6];
	signed short				l_tempComponent_i16 = 0;
    b058:	e3a03000 	mov	r3, #0
    b05c:	e14b30ba 	strh	r3, [fp, #-10]
	unsigned int				l_successState_bl = M_HAL_ACCMAG_SUCCESS_BL;
    b060:	e3a03000 	mov	r3, #0
    b064:	e50b3008 	str	r3, [fp, #-8]

	//init local data buffers with current values
	l_accBuffer_st = m_halAccmag_sensorState_st.acc;
    b068:	e59f3238 	ldr	r3, [pc, #568]	; b2a8 <l_updateSensorState_vd+0x260>
    b06c:	e24bc024 	sub	ip, fp, #36	; 0x24
    b070:	e1a0e003 	mov	lr, r3
    b074:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    b078:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    b07c:	e89e0003 	ldm	lr, {r0, r1}
    b080:	e88c0003 	stm	ip, {r0, r1}
	l_magBuffer_st = m_halAccmag_sensorState_st.mag;
    b084:	e59f321c 	ldr	r3, [pc, #540]	; b2a8 <l_updateSensorState_vd+0x260>
    b088:	e24bc03c 	sub	ip, fp, #60	; 0x3c
    b08c:	e283e018 	add	lr, r3, #24
    b090:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    b094:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    b098:	e89e0003 	ldm	lr, {r0, r1}
    b09c:	e88c0003 	stm	ip, {r0, r1}
	 *   (Byte 3) Y-Component, LSB
	 *   (Byte 4) Y-Component, MSB
	 *   (Byte 5) Z-Component, LSB
	 *   (Byte 6) Z-Component, MSB
	 */
	if ( (f_sensor_en == SENSOR_ACC_EN) || (f_sensor_en == SENSOR_BOTH_EN) )
    b0a0:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    b0a4:	e3530000 	cmp	r3, #0
    b0a8:	0a000002 	beq	b0b8 <l_updateSensorState_vd+0x70>
    b0ac:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    b0b0:	e3530002 	cmp	r3, #2
    b0b4:	1a000031 	bne	b180 <l_updateSensorState_vd+0x138>
	{
		if ( l_readI2cByteStream_bl(M_HAL_ACCMAG_OUT_X_L_A_UI8,l_readBuffer_rg6ui8, 6) == M_HAL_ACCMAG_SUCCESS_BL )
    b0b8:	e24b3044 	sub	r3, fp, #68	; 0x44
    b0bc:	e3a00028 	mov	r0, #40	; 0x28
    b0c0:	e1a01003 	mov	r1, r3
    b0c4:	e3a02006 	mov	r2, #6
    b0c8:	ebffff11 	bl	ad14 <l_readI2cByteStream_bl>
    b0cc:	e1a03000 	mov	r3, r0
    b0d0:	e3530000 	cmp	r3, #0
    b0d4:	1a000027 	bne	b178 <l_updateSensorState_vd+0x130>
		{
			// x-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[0], l_readBuffer_rg6ui8[1]);
    b0d8:	e55b2044 	ldrb	r2, [fp, #-68]	; 0x44
    b0dc:	e55b3043 	ldrb	r3, [fp, #-67]	; 0x43
    b0e0:	e1a00002 	mov	r0, r2
    b0e4:	e1a01003 	mov	r1, r3
    b0e8:	ebffff70 	bl	aeb0 <l_twoCompOf16Bit_ui16>
    b0ec:	e1a03000 	mov	r3, r0
    b0f0:	e14b30ba 	strh	r3, [fp, #-10]
			l_accBuffer_st.x_f64 = l_convertAccRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_ACCSCALE_UI8 );
    b0f4:	e15b30fa 	ldrsh	r3, [fp, #-10]
    b0f8:	e1a00003 	mov	r0, r3
    b0fc:	e3a01008 	mov	r1, #8
    b100:	ebffffaa 	bl	afb0 <l_convertAccRawToSIUnit_f64>
    b104:	eeb07b40 	vmov.f64	d7, d0
    b108:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc

			// y-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[2], l_readBuffer_rg6ui8[3]);
    b10c:	e55b2042 	ldrb	r2, [fp, #-66]	; 0x42
    b110:	e55b3041 	ldrb	r3, [fp, #-65]	; 0x41
    b114:	e1a00002 	mov	r0, r2
    b118:	e1a01003 	mov	r1, r3
    b11c:	ebffff63 	bl	aeb0 <l_twoCompOf16Bit_ui16>
    b120:	e1a03000 	mov	r3, r0
    b124:	e14b30ba 	strh	r3, [fp, #-10]
			l_accBuffer_st.y_f64 = l_convertAccRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_ACCSCALE_UI8 );
    b128:	e15b30fa 	ldrsh	r3, [fp, #-10]
    b12c:	e1a00003 	mov	r0, r3
    b130:	e3a01008 	mov	r1, #8
    b134:	ebffff9d 	bl	afb0 <l_convertAccRawToSIUnit_f64>
    b138:	eeb07b40 	vmov.f64	d7, d0
    b13c:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4

			// z-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[4], l_readBuffer_rg6ui8[5]);
    b140:	e55b2040 	ldrb	r2, [fp, #-64]	; 0x40
    b144:	e55b303f 	ldrb	r3, [fp, #-63]	; 0x3f
    b148:	e1a00002 	mov	r0, r2
    b14c:	e1a01003 	mov	r1, r3
    b150:	ebffff56 	bl	aeb0 <l_twoCompOf16Bit_ui16>
    b154:	e1a03000 	mov	r3, r0
    b158:	e14b30ba 	strh	r3, [fp, #-10]
			l_accBuffer_st.z_f64 = l_convertAccRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_ACCSCALE_UI8 );
    b15c:	e15b30fa 	ldrsh	r3, [fp, #-10]
    b160:	e1a00003 	mov	r0, r3
    b164:	e3a01008 	mov	r1, #8
    b168:	ebffff90 	bl	afb0 <l_convertAccRawToSIUnit_f64>
    b16c:	eeb07b40 	vmov.f64	d7, d0
    b170:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
    b174:	ea000001 	b	b180 <l_updateSensorState_vd+0x138>
		}else{
			l_successState_bl = M_HAL_ACCMAG_FAILED_BL;
    b178:	e3a03001 	mov	r3, #1
    b17c:	e50b3008 	str	r3, [fp, #-8]
	 *   (Byte 3) Y-Component, LSB
	 *   (Byte 4) Y-Component, MSB
	 *   (Byte 5) Z-Component, LSB
	 *   (Byte 6) Z-Component, MSB
	 */
	if ( (f_sensor_en == SENSOR_MAG_EN) || (f_sensor_en == SENSOR_BOTH_EN) )
    b180:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    b184:	e3530001 	cmp	r3, #1
    b188:	0a000002 	beq	b198 <l_updateSensorState_vd+0x150>
    b18c:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    b190:	e3530002 	cmp	r3, #2
    b194:	1a000031 	bne	b260 <l_updateSensorState_vd+0x218>
	{
		if ( l_readI2cByteStream_bl(M_HAL_ACCMAG_OUT_X_L_M_UI8,l_readBuffer_rg6ui8, 6) == M_HAL_ACCMAG_SUCCESS_BL )
    b198:	e24b3044 	sub	r3, fp, #68	; 0x44
    b19c:	e3a00008 	mov	r0, #8
    b1a0:	e1a01003 	mov	r1, r3
    b1a4:	e3a02006 	mov	r2, #6
    b1a8:	ebfffed9 	bl	ad14 <l_readI2cByteStream_bl>
    b1ac:	e1a03000 	mov	r3, r0
    b1b0:	e3530000 	cmp	r3, #0
    b1b4:	1a000027 	bne	b258 <l_updateSensorState_vd+0x210>
		{
			// x-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[0], l_readBuffer_rg6ui8[1]);
    b1b8:	e55b2044 	ldrb	r2, [fp, #-68]	; 0x44
    b1bc:	e55b3043 	ldrb	r3, [fp, #-67]	; 0x43
    b1c0:	e1a00002 	mov	r0, r2
    b1c4:	e1a01003 	mov	r1, r3
    b1c8:	ebffff38 	bl	aeb0 <l_twoCompOf16Bit_ui16>
    b1cc:	e1a03000 	mov	r3, r0
    b1d0:	e14b30ba 	strh	r3, [fp, #-10]
			l_magBuffer_st.x_f64 = l_convertMagRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_MAGSCALE_UI8 );
    b1d4:	e15b30fa 	ldrsh	r3, [fp, #-10]
    b1d8:	e1a00003 	mov	r0, r3
    b1dc:	e3a01004 	mov	r1, #4
    b1e0:	ebffff4c 	bl	af18 <l_convertMagRawToSIUnit_f64>
    b1e4:	eeb07b40 	vmov.f64	d7, d0
    b1e8:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4

			// y-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[2], l_readBuffer_rg6ui8[3]);
    b1ec:	e55b2042 	ldrb	r2, [fp, #-66]	; 0x42
    b1f0:	e55b3041 	ldrb	r3, [fp, #-65]	; 0x41
    b1f4:	e1a00002 	mov	r0, r2
    b1f8:	e1a01003 	mov	r1, r3
    b1fc:	ebffff2b 	bl	aeb0 <l_twoCompOf16Bit_ui16>
    b200:	e1a03000 	mov	r3, r0
    b204:	e14b30ba 	strh	r3, [fp, #-10]
			l_magBuffer_st.y_f64 = l_convertMagRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_MAGSCALE_UI8 );
    b208:	e15b30fa 	ldrsh	r3, [fp, #-10]
    b20c:	e1a00003 	mov	r0, r3
    b210:	e3a01004 	mov	r1, #4
    b214:	ebffff3f 	bl	af18 <l_convertMagRawToSIUnit_f64>
    b218:	eeb07b40 	vmov.f64	d7, d0
    b21c:	ed0b7b0d 	vstr	d7, [fp, #-52]	; 0xffffffcc

			// z-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[4], l_readBuffer_rg6ui8[5]);
    b220:	e55b2040 	ldrb	r2, [fp, #-64]	; 0x40
    b224:	e55b303f 	ldrb	r3, [fp, #-63]	; 0x3f
    b228:	e1a00002 	mov	r0, r2
    b22c:	e1a01003 	mov	r1, r3
    b230:	ebffff1e 	bl	aeb0 <l_twoCompOf16Bit_ui16>
    b234:	e1a03000 	mov	r3, r0
    b238:	e14b30ba 	strh	r3, [fp, #-10]
			l_magBuffer_st.z_f64 = l_convertMagRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_MAGSCALE_UI8 );
    b23c:	e15b30fa 	ldrsh	r3, [fp, #-10]
    b240:	e1a00003 	mov	r0, r3
    b244:	e3a01004 	mov	r1, #4
    b248:	ebffff32 	bl	af18 <l_convertMagRawToSIUnit_f64>
    b24c:	eeb07b40 	vmov.f64	d7, d0
    b250:	ed0b7b0b 	vstr	d7, [fp, #-44]	; 0xffffffd4
    b254:	ea000001 	b	b260 <l_updateSensorState_vd+0x218>
		}else{
			l_successState_bl = M_HAL_ACCMAG_FAILED_BL;
    b258:	e3a03001 	mov	r3, #1
    b25c:	e50b3008 	str	r3, [fp, #-8]
		}
	}

	// update sensor state storage values
	m_halAccmag_sensorState_st.acc = l_accBuffer_st;
    b260:	e59f3040 	ldr	r3, [pc, #64]	; b2a8 <l_updateSensorState_vd+0x260>
    b264:	e1a0c003 	mov	ip, r3
    b268:	e24be024 	sub	lr, fp, #36	; 0x24
    b26c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    b270:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    b274:	e89e0003 	ldm	lr, {r0, r1}
    b278:	e88c0003 	stm	ip, {r0, r1}
	m_halAccmag_sensorState_st.mag = l_magBuffer_st;
    b27c:	e59f3024 	ldr	r3, [pc, #36]	; b2a8 <l_updateSensorState_vd+0x260>
    b280:	e283c018 	add	ip, r3, #24
    b284:	e24be03c 	sub	lr, fp, #60	; 0x3c
    b288:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    b28c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    b290:	e89e0003 	ldm	lr, {r0, r1}
    b294:	e88c0003 	stm	ip, {r0, r1}

	return l_successState_bl;
    b298:	e51b3008 	ldr	r3, [fp, #-8]
}
    b29c:	e1a00003 	mov	r0, r3
    b2a0:	e24bd004 	sub	sp, fp, #4
    b2a4:	e8bd8800 	pop	{fp, pc}
    b2a8:	00010320 	.word	0x00010320

0000b2ac <g_halAccmag_initSensor_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_initSensor_bl(void)
{
    b2ac:	e92d4800 	push	{fp, lr}
    b2b0:	e28db004 	add	fp, sp, #4
    b2b4:	e24dd008 	sub	sp, sp, #8
	unsigned char l_configRegisters_rg8ui8[8];	//buffer for 8 control register bytes

	//Identify sensor
	if ( l_readI2cByte_ui8( M_HAL_ACCMAG_WHO_AM_I_UI8 ) != M_HAL_ACCMAG_WHO_AM_I_PATTERN_UI8 )
    b2b8:	e3a0000f 	mov	r0, #15
    b2bc:	ebfffe6f 	bl	ac80 <l_readI2cByte_ui8>
    b2c0:	e1a03000 	mov	r3, r0
    b2c4:	e3530049 	cmp	r3, #73	; 0x49
    b2c8:	0a000001 	beq	b2d4 <g_halAccmag_initSensor_bl+0x28>
	{
		// sensor could not be identified --> abort initialization
		return M_HAL_ACCMAG_FAILED_BL;
    b2cc:	e3a03001 	mov	r3, #1
    b2d0:	ea00001a 	b	b340 <g_halAccmag_initSensor_bl+0x94>

	/*
	 * ACCELEROMETER
	 */
	// CTRL0: no FIFO (default values)
	l_configRegisters_rg8ui8[0] = 0b00000000;
    b2d4:	e3a03000 	mov	r3, #0
    b2d8:	e54b300c 	strb	r3, [fp, #-12]

	// CTRL1: Enable accelerometer, 800Hz sampling
	l_configRegisters_rg8ui8[1] = (		M_HAL_ACCMAG_CTRL1_MASK_AXEN_UI8
    b2dc:	e3e03068 	mvn	r3, #104	; 0x68
    b2e0:	e54b300b 	strb	r3, [fp, #-11]
			| 	M_HAL_ACCMAG_CTRL1_MASK_AYEN_UI8
			|	M_HAL_ACCMAG_CTRL1_MASK_AZEN_UI8
			| 	M_HAL_ACCMAG_CTRL1_MASK_ACC_RATE_800HZ_UI8);

	// CTRL2 register (default values): Set scale +/-8G (accelerometer) & Anti-Alias-Filter ~200Hz
	l_configRegisters_rg8ui8[2] = ( 	M_HAL_ACCMAG_CTRL2_MASK_ACC_SCALE_8G_UI8
    b2e4:	e3a03058 	mov	r3, #88	; 0x58
    b2e8:	e54b300a 	strb	r3, [fp, #-10]
									| 	M_HAL_ACCMAG_CTRL2_MASK_ACC_BANDWIDTH_194HZ_UI8 );

	// CTRL3 register (default values): Disable all interrupts
	l_configRegisters_rg8ui8[3] = 0b00000000;
    b2ec:	e3a03000 	mov	r3, #0
    b2f0:	e54b3009 	strb	r3, [fp, #-9]

	//CTRL4 register (default values)
	l_configRegisters_rg8ui8[4] = 0b00000000;
    b2f4:	e3a03000 	mov	r3, #0
    b2f8:	e54b3008 	strb	r3, [fp, #-8]

	/*
	 * MAGNETOMETER
	 */
	// CTRL5 register: Disable Temp.-sensor, set high-resolution, set 100Hz data rate
	l_configRegisters_rg8ui8[5] = (		M_HAL_ACCMAG_CTRL5_MASK_MAG_RES_HIGH_UI8
    b2fc:	e3a03074 	mov	r3, #116	; 0x74
    b300:	e54b3007 	strb	r3, [fp, #-7]
			| 	M_HAL_ACCMAG_CTRL5_MASK_MAG_RATE_100HZ_UI8 );

	// CTRL6 register: set scale +/-0.4mT
	l_configRegisters_rg8ui8[6] = M_HAL_ACCMAG_CTRL6_MASK_MAG_SCALE_4GAUSS_UI8;
    b304:	e3a03040 	mov	r3, #64	; 0x40
    b308:	e54b3006 	strb	r3, [fp, #-6]

	// CTRL7 register (default values): set continuous-conversion mode (magnetometer)
	l_configRegisters_rg8ui8[7] = M_HAL_ACCMAG_CTRL7_MASK_MAG_SENSMODE_CONTINOUS_UI8;
    b30c:	e3a03000 	mov	r3, #0
    b310:	e54b3005 	strb	r3, [fp, #-5]


	// send config
	if ( l_writeI2cByteStream_bl(M_HAL_ACCMAG_CTRL0_UI8, l_configRegisters_rg8ui8, sizeof(l_configRegisters_rg8ui8) ) == M_HAL_ACCMAG_FAILED_BL )
    b314:	e24b300c 	sub	r3, fp, #12
    b318:	e3a0001f 	mov	r0, #31
    b31c:	e1a01003 	mov	r1, r3
    b320:	e3a02008 	mov	r2, #8
    b324:	ebfffea4 	bl	adbc <l_writeI2cByteStream_bl>
    b328:	e1a03000 	mov	r3, r0
    b32c:	e3530001 	cmp	r3, #1
    b330:	1a000001 	bne	b33c <g_halAccmag_initSensor_bl+0x90>
	{
		// setting register CTRL1 failed
		return M_HAL_ACCMAG_FAILED_BL;
    b334:	e3a03001 	mov	r3, #1
    b338:	ea000000 	b	b340 <g_halAccmag_initSensor_bl+0x94>
	}

	return M_HAL_ACCMAG_SUCCESS_BL;
    b33c:	e3a03000 	mov	r3, #0
}
    b340:	e1a00003 	mov	r0, r3
    b344:	e24bd004 	sub	sp, fp, #4
    b348:	e8bd8800 	pop	{fp, pc}

0000b34c <g_halAccmag_triggerAccUpdate_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_triggerAccUpdate_bl( void )
{
    b34c:	e92d4800 	push	{fp, lr}
    b350:	e28db004 	add	fp, sp, #4
	return l_updateSensorState_vd(SENSOR_ACC_EN);
    b354:	e3a00000 	mov	r0, #0
    b358:	ebffff3a 	bl	b048 <l_updateSensorState_vd>
    b35c:	e1a03000 	mov	r3, r0
}
    b360:	e1a00003 	mov	r0, r3
    b364:	e8bd8800 	pop	{fp, pc}

0000b368 <g_halAccmag_triggerMagUpdate_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_triggerMagUpdate_bl( void )
{
    b368:	e92d4800 	push	{fp, lr}
    b36c:	e28db004 	add	fp, sp, #4
	return l_updateSensorState_vd(SENSOR_MAG_EN);
    b370:	e3a00001 	mov	r0, #1
    b374:	ebffff33 	bl	b048 <l_updateSensorState_vd>
    b378:	e1a03000 	mov	r3, r0
}
    b37c:	e1a00003 	mov	r0, r3
    b380:	e8bd8800 	pop	{fp, pc}

0000b384 <g_halAccmag_triggerFullUpdate_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_triggerFullUpdate_bl( void )
{
    b384:	e92d4800 	push	{fp, lr}
    b388:	e28db004 	add	fp, sp, #4
	return l_updateSensorState_vd(SENSOR_BOTH_EN);
    b38c:	e3a00002 	mov	r0, #2
    b390:	ebffff2c 	bl	b048 <l_updateSensorState_vd>
    b394:	e1a03000 	mov	r3, r0
}
    b398:	e1a00003 	mov	r0, r3
    b39c:	e8bd8800 	pop	{fp, pc}

0000b3a0 <g_halAccmag_getAccVector_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halAccmag_3dDoubleVector g_halAccmag_getAccVector_st( void )
{
    b3a0:	e92d4830 	push	{r4, r5, fp, lr}
    b3a4:	e28db00c 	add	fp, sp, #12
    b3a8:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_halAccmag_sensorState_st.acc;
    b3ac:	e59f3040 	ldr	r3, [pc, #64]	; b3f4 <g_halAccmag_getAccVector_st+0x54>
    b3b0:	e24bc024 	sub	ip, fp, #36	; 0x24
    b3b4:	e1a0e003 	mov	lr, r3
    b3b8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    b3bc:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    b3c0:	e89e0003 	ldm	lr, {r0, r1}
    b3c4:	e88c0003 	stm	ip, {r0, r1}
    b3c8:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    b3cc:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    b3d0:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    b3d4:	ec454b15 	vmov	d5, r4, r5
    b3d8:	ec410b16 	vmov	d6, r0, r1
    b3dc:	ec432b17 	vmov	d7, r2, r3
}
    b3e0:	eeb00b45 	vmov.f64	d0, d5
    b3e4:	eeb01b46 	vmov.f64	d1, d6
    b3e8:	eeb02b47 	vmov.f64	d2, d7
    b3ec:	e24bd00c 	sub	sp, fp, #12
    b3f0:	e8bd8830 	pop	{r4, r5, fp, pc}
    b3f4:	00010320 	.word	0x00010320

0000b3f8 <g_halAccmag_getMagVector_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halAccmag_3dDoubleVector g_halAccmag_getMagVector_st( void )
{
    b3f8:	e92d4830 	push	{r4, r5, fp, lr}
    b3fc:	e28db00c 	add	fp, sp, #12
    b400:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_halAccmag_sensorState_st.mag;
    b404:	e59f3040 	ldr	r3, [pc, #64]	; b44c <g_halAccmag_getMagVector_st+0x54>
    b408:	e24bc024 	sub	ip, fp, #36	; 0x24
    b40c:	e283e018 	add	lr, r3, #24
    b410:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    b414:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    b418:	e89e0003 	ldm	lr, {r0, r1}
    b41c:	e88c0003 	stm	ip, {r0, r1}
    b420:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    b424:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    b428:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    b42c:	ec454b15 	vmov	d5, r4, r5
    b430:	ec410b16 	vmov	d6, r0, r1
    b434:	ec432b17 	vmov	d7, r2, r3
}
    b438:	eeb00b45 	vmov.f64	d0, d5
    b43c:	eeb01b46 	vmov.f64	d1, d6
    b440:	eeb02b47 	vmov.f64	d2, d7
    b444:	e24bd00c 	sub	sp, fp, #12
    b448:	e8bd8830 	pop	{r4, r5, fp, pc}
    b44c:	00010320 	.word	0x00010320

0000b450 <g_halAccmag_getAccMagContainer_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halAccmag_dataContainer	g_halAccmag_getAccMagContainer_st( void )
{
    b450:	e92d4800 	push	{fp, lr}
    b454:	e28db004 	add	fp, sp, #4
    b458:	e24dd008 	sub	sp, sp, #8
    b45c:	e50b0008 	str	r0, [fp, #-8]
	return m_halAccmag_sensorState_st;
    b460:	e51b2008 	ldr	r2, [fp, #-8]
    b464:	e59f3028 	ldr	r3, [pc, #40]	; b494 <g_halAccmag_getAccMagContainer_st+0x44>
    b468:	e1a0c002 	mov	ip, r2
    b46c:	e1a0e003 	mov	lr, r3
    b470:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    b474:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    b478:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    b47c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    b480:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
    b484:	e88c000f 	stm	ip, {r0, r1, r2, r3}
}
    b488:	e51b0008 	ldr	r0, [fp, #-8]
    b48c:	e24bd004 	sub	sp, fp, #4
    b490:	e8bd8800 	pop	{fp, pc}
    b494:	00010320 	.word	0x00010320

0000b498 <g_halBaro_initBaro_i32>:
 * 2015/05/19 juscgs00:
 * - removed unused local variable 'l_ReadBuffer_ui8' (compiler warning)
 * \endinternal
 ********************************************************************** */
int g_halBaro_initBaro_i32(void)
{
    b498:	e92d4800 	push	{fp, lr}
    b49c:	e28db004 	add	fp, sp, #4
	static unsigned char l_WriteBuffer_ui8[3];

	//RES_CONF(0x10)
	l_WriteBuffer_ui8[0]=M_HAL_BARO_SINGLE_FLAG_UI8 | M_HAL_BARO_RES_CONF_UI8;
    b4a0:	e59f3090 	ldr	r3, [pc, #144]	; b538 <g_halBaro_initBaro_i32+0xa0>
    b4a4:	e3a02010 	mov	r2, #16
    b4a8:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]= M_HAL_BARO_TEMP_RES_CONF_128_UI8 | M_HAL_BARO_PRES_RES_CONF_512_UI8;
    b4ac:	e59f3084 	ldr	r3, [pc, #132]	; b538 <g_halBaro_initBaro_i32+0xa0>
    b4b0:	e3a0207a 	mov	r2, #122	; 0x7a
    b4b4:	e5c32001 	strb	r2, [r3, #1]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
    b4b8:	e3a0005c 	mov	r0, #92	; 0x5c
    b4bc:	e59f1074 	ldr	r1, [pc, #116]	; b538 <g_halBaro_initBaro_i32+0xa0>
    b4c0:	e3a02002 	mov	r2, #2
    b4c4:	eb0003a3 	bl	c358 <g_lldI2c_WriteI2c_bl>
    b4c8:	e1a03000 	mov	r3, r0
    b4cc:	e3530000 	cmp	r3, #0
    b4d0:	0a000001 	beq	b4dc <g_halBaro_initBaro_i32+0x44>
	{return -1;}
    b4d4:	e3e03000 	mvn	r3, #0
    b4d8:	ea000014 	b	b530 <g_halBaro_initBaro_i32+0x98>

	usleep(100000);
    b4dc:	e59f0058 	ldr	r0, [pc, #88]	; b53c <g_halBaro_initBaro_i32+0xa4>
    b4e0:	ebfff50d 	bl	891c <_init+0x8c>

	//CTRL_REG1(0x20) = 0b11000100		setting Speed of Pressure to 25Hz and Temperature to 1Hz
										//REMARK: setting both Sensors to the same value did not work!!!
	//CTRL_REG2(0x21) = 0b10000000
	l_WriteBuffer_ui8[0]=M_HAL_BARO_MULTIPLE_FLAG_UI8 | M_HAL_BARO_CTRL_REG1_UI8;
    b4e4:	e59f304c 	ldr	r3, [pc, #76]	; b538 <g_halBaro_initBaro_i32+0xa0>
    b4e8:	e3e0205f 	mvn	r2, #95	; 0x5f
    b4ec:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]=M_HAL_BARO_CTRL_REG1_PD_UI8|M_HAL_BARO_CTRL_REG1_DATARATE_P25HZ_T1HZ_UI8;
    b4f0:	e59f3040 	ldr	r3, [pc, #64]	; b538 <g_halBaro_initBaro_i32+0xa0>
    b4f4:	e3e0203f 	mvn	r2, #63	; 0x3f
    b4f8:	e5c32001 	strb	r2, [r3, #1]
	l_WriteBuffer_ui8[2]=M_HAL_BARO_CTRL_REG2_BOOT_UI8;
    b4fc:	e59f3034 	ldr	r3, [pc, #52]	; b538 <g_halBaro_initBaro_i32+0xa0>
    b500:	e3e0207f 	mvn	r2, #127	; 0x7f
    b504:	e5c32002 	strb	r2, [r3, #2]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
    b508:	e3a0005c 	mov	r0, #92	; 0x5c
    b50c:	e59f1024 	ldr	r1, [pc, #36]	; b538 <g_halBaro_initBaro_i32+0xa0>
    b510:	e3a02003 	mov	r2, #3
    b514:	eb00038f 	bl	c358 <g_lldI2c_WriteI2c_bl>
    b518:	e1a03000 	mov	r3, r0
    b51c:	e3530000 	cmp	r3, #0
    b520:	0a000001 	beq	b52c <g_halBaro_initBaro_i32+0x94>
	{return -1;}
    b524:	e3e03000 	mvn	r3, #0
    b528:	ea000000 	b	b530 <g_halBaro_initBaro_i32+0x98>

	return 0;
    b52c:	e3a03000 	mov	r3, #0
}
    b530:	e1a00003 	mov	r0, r3
    b534:	e8bd8800 	pop	{fp, pc}
    b538:	00010360 	.word	0x00010360
    b53c:	000186a0 	.word	0x000186a0

0000b540 <g_halBaro_getPressure_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halBaro_getPressure_f64(void)
{
    b540:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    b544:	e28db000 	add	fp, sp, #0
	return m_pressure_f64;
    b548:	e59f3014 	ldr	r3, [pc, #20]	; b564 <g_halBaro_getPressure_f64+0x24>
    b54c:	e1c320d0 	ldrd	r2, [r3]
    b550:	ec432b17 	vmov	d7, r2, r3
}
    b554:	eeb00b47 	vmov.f64	d0, d7
    b558:	e24bd000 	sub	sp, fp, #0
    b55c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    b560:	e12fff1e 	bx	lr
    b564:	00010358 	.word	0x00010358

0000b568 <g_halBaro_getTemperature_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halBaro_getTemperature_f64(void)
{
    b568:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    b56c:	e28db000 	add	fp, sp, #0
	return m_temperature_f64;
    b570:	e59f3014 	ldr	r3, [pc, #20]	; b58c <g_halBaro_getTemperature_f64+0x24>
    b574:	e1c320d0 	ldrd	r2, [r3]
    b578:	ec432b17 	vmov	d7, r2, r3
}
    b57c:	eeb00b47 	vmov.f64	d0, d7
    b580:	e24bd000 	sub	sp, fp, #0
    b584:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    b588:	e12fff1e 	bx	lr
    b58c:	00010350 	.word	0x00010350

0000b590 <g_halBaro_readPressureFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halBaro_readPressureFromI2C_i32(void)
{
    b590:	e92d4800 	push	{fp, lr}
    b594:	e28db004 	add	fp, sp, #4
    b598:	e24dd010 	sub	sp, sp, #16
	unsigned char l_ReadBuffer_ui8[3]={0,0,0};
    b59c:	e3a03000 	mov	r3, #0
    b5a0:	e54b300c 	strb	r3, [fp, #-12]
    b5a4:	e3a03000 	mov	r3, #0
    b5a8:	e54b300b 	strb	r3, [fp, #-11]
    b5ac:	e3a03000 	mov	r3, #0
    b5b0:	e54b300a 	strb	r3, [fp, #-10]
	unsigned char l_rotatedReadBuffer_ui8[3]={0,0,0};
    b5b4:	e3a03000 	mov	r3, #0
    b5b8:	e54b3010 	strb	r3, [fp, #-16]
    b5bc:	e3a03000 	mov	r3, #0
    b5c0:	e54b300f 	strb	r3, [fp, #-15]
    b5c4:	e3a03000 	mov	r3, #0
    b5c8:	e54b300e 	strb	r3, [fp, #-14]
	unsigned char l_WriteBuffer_ui8[3];
	int l_countVariable_i32=0;
    b5cc:	e3a03000 	mov	r3, #0
    b5d0:	e50b3008 	str	r3, [fp, #-8]

	//maybe check STATUS_REG if new value is available

	//set SUB Address to Pressure register PRESS_OUT_XL and activate multiple read
	l_WriteBuffer_ui8[0]=M_HAL_BARO_MULTIPLE_FLAG_UI8 | M_HAL_BARO_PRESS_OUT_XL_UI8;
    b5d4:	e3e03057 	mvn	r3, #87	; 0x57
    b5d8:	e54b3014 	strb	r3, [fp, #-20]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    b5dc:	e24b3014 	sub	r3, fp, #20
    b5e0:	e3a0005c 	mov	r0, #92	; 0x5c
    b5e4:	e1a01003 	mov	r1, r3
    b5e8:	e3a02001 	mov	r2, #1
    b5ec:	eb000359 	bl	c358 <g_lldI2c_WriteI2c_bl>
    b5f0:	e1a03000 	mov	r3, r0
    b5f4:	e3530000 	cmp	r3, #0
    b5f8:	0a000001 	beq	b604 <g_halBaro_readPressureFromI2C_i32+0x74>
	{return -1;}
    b5fc:	e3e03000 	mvn	r3, #0
    b600:	ea00002f 	b	b6c4 <g_halBaro_readPressureFromI2C_i32+0x134>


	//Read from PRESS_OUT_XL(0x28),PRESS_OUT_L(0x29),PRESS_OUT_H(0x2A)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
    b604:	e24b300c 	sub	r3, fp, #12
    b608:	e3a0005c 	mov	r0, #92	; 0x5c
    b60c:	e1a01003 	mov	r1, r3
    b610:	e3a02003 	mov	r2, #3
    b614:	eb000387 	bl	c438 <g_lldI2c_ReadI2c_bl>
    b618:	e1a03000 	mov	r3, r0
    b61c:	e3530000 	cmp	r3, #0
    b620:	0a000001 	beq	b62c <g_halBaro_readPressureFromI2C_i32+0x9c>
	{return -1;}
    b624:	e3e03000 	mvn	r3, #0
    b628:	ea000025 	b	b6c4 <g_halBaro_readPressureFromI2C_i32+0x134>
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<3;l_countVariable_i32++)
    b62c:	e3a03000 	mov	r3, #0
    b630:	e50b3008 	str	r3, [fp, #-8]
    b634:	ea00000f 	b	b678 <g_halBaro_readPressureFromI2C_i32+0xe8>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[2-l_countVariable_i32];
    b638:	e51b3008 	ldr	r3, [fp, #-8]
    b63c:	e2632002 	rsb	r2, r3, #2
    b640:	e3e03007 	mvn	r3, #7
    b644:	e24b0004 	sub	r0, fp, #4
    b648:	e0802002 	add	r2, r0, r2
    b64c:	e0823003 	add	r3, r2, r3
    b650:	e5d32000 	ldrb	r2, [r3]
    b654:	e3e0300b 	mvn	r3, #11
    b658:	e51b1008 	ldr	r1, [fp, #-8]
    b65c:	e24b0004 	sub	r0, fp, #4
    b660:	e0801001 	add	r1, r0, r1
    b664:	e0813003 	add	r3, r1, r3
    b668:	e5c32000 	strb	r2, [r3]
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
	{return -1;}
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<3;l_countVariable_i32++)
    b66c:	e51b3008 	ldr	r3, [fp, #-8]
    b670:	e2833001 	add	r3, r3, #1
    b674:	e50b3008 	str	r3, [fp, #-8]
    b678:	e51b3008 	ldr	r3, [fp, #-8]
    b67c:	e3530002 	cmp	r3, #2
    b680:	daffffec 	ble	b638 <g_halBaro_readPressureFromI2C_i32+0xa8>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[2-l_countVariable_i32];
		}

		m_pressure_f64=(double)g_halLib_twoComplement2Int(l_rotatedReadBuffer_ui8,3);
    b684:	e24b3010 	sub	r3, fp, #16
    b688:	e1a00003 	mov	r0, r3
    b68c:	e3a01003 	mov	r1, #3
    b690:	eb000184 	bl	bca8 <g_halLib_twoComplement2Int>
    b694:	e1a03000 	mov	r3, r0
    b698:	ee063a90 	vmov	s13, r3
    b69c:	eeb87be6 	vcvt.f64.s32	d7, s13
    b6a0:	e59f3030 	ldr	r3, [pc, #48]	; b6d8 <g_halBaro_readPressureFromI2C_i32+0x148>
    b6a4:	ed837b00 	vstr	d7, [r3]
		m_pressure_f64=m_pressure_f64/4096;
    b6a8:	e59f3028 	ldr	r3, [pc, #40]	; b6d8 <g_halBaro_readPressureFromI2C_i32+0x148>
    b6ac:	ed936b00 	vldr	d6, [r3]
    b6b0:	ed9f7b06 	vldr	d7, [pc, #24]	; b6d0 <g_halBaro_readPressureFromI2C_i32+0x140>
    b6b4:	ee867b07 	vdiv.f64	d7, d6, d7
    b6b8:	e59f3018 	ldr	r3, [pc, #24]	; b6d8 <g_halBaro_readPressureFromI2C_i32+0x148>
    b6bc:	ed837b00 	vstr	d7, [r3]
	}

	return 0;
    b6c0:	e3a03000 	mov	r3, #0
}
    b6c4:	e1a00003 	mov	r0, r3
    b6c8:	e24bd004 	sub	sp, fp, #4
    b6cc:	e8bd8800 	pop	{fp, pc}
    b6d0:	00000000 	.word	0x00000000
    b6d4:	40b00000 	.word	0x40b00000
    b6d8:	00010358 	.word	0x00010358

0000b6dc <g_halBaro_readTemperatureFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halBaro_readTemperatureFromI2C_i32(void)
{
    b6dc:	e92d4800 	push	{fp, lr}
    b6e0:	e28db004 	add	fp, sp, #4
    b6e4:	e24dd010 	sub	sp, sp, #16
	unsigned char l_ReadBuffer_ui8[2]={0,0};
    b6e8:	e3a03000 	mov	r3, #0
    b6ec:	e54b300c 	strb	r3, [fp, #-12]
    b6f0:	e3a03000 	mov	r3, #0
    b6f4:	e54b300b 	strb	r3, [fp, #-11]
	unsigned char l_rotatedReadBuffer_ui8[2]={0,0};
    b6f8:	e3a03000 	mov	r3, #0
    b6fc:	e54b3010 	strb	r3, [fp, #-16]
    b700:	e3a03000 	mov	r3, #0
    b704:	e54b300f 	strb	r3, [fp, #-15]
	unsigned char l_WriteBuffer_ui8[3];
	int l_countVariable_i32=0;
    b708:	e3a03000 	mov	r3, #0
    b70c:	e50b3008 	str	r3, [fp, #-8]

	//maybe check STATUS_REG if new value is available

	//set SUB Address to Temperature register PRESS_OUT_XL and activate multiple read
	l_WriteBuffer_ui8[0]=M_HAL_BARO_MULTIPLE_FLAG_UI8 | M_HAL_BARO_TEMP_OUT_L_UI8;
    b710:	e3e03054 	mvn	r3, #84	; 0x54
    b714:	e54b3014 	strb	r3, [fp, #-20]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    b718:	e24b3014 	sub	r3, fp, #20
    b71c:	e3a0005c 	mov	r0, #92	; 0x5c
    b720:	e1a01003 	mov	r1, r3
    b724:	e3a02001 	mov	r2, #1
    b728:	eb00030a 	bl	c358 <g_lldI2c_WriteI2c_bl>
    b72c:	e1a03000 	mov	r3, r0
    b730:	e3530000 	cmp	r3, #0
    b734:	0a000001 	beq	b740 <g_halBaro_readTemperatureFromI2C_i32+0x64>
	{return -1;}
    b738:	e3e03000 	mvn	r3, #0
    b73c:	ea000031 	b	b808 <g_halBaro_readTemperatureFromI2C_i32+0x12c>


	//Read from TEMP_OUT_L (2Bh), TEMP_OUT_H (2Ch)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
    b740:	e24b300c 	sub	r3, fp, #12
    b744:	e3a0005c 	mov	r0, #92	; 0x5c
    b748:	e1a01003 	mov	r1, r3
    b74c:	e3a02002 	mov	r2, #2
    b750:	eb000338 	bl	c438 <g_lldI2c_ReadI2c_bl>
    b754:	e1a03000 	mov	r3, r0
    b758:	e3530000 	cmp	r3, #0
    b75c:	0a000001 	beq	b768 <g_halBaro_readTemperatureFromI2C_i32+0x8c>
	{return -1;}
    b760:	e3e03000 	mvn	r3, #0
    b764:	ea000027 	b	b808 <g_halBaro_readTemperatureFromI2C_i32+0x12c>
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    b768:	e3a03000 	mov	r3, #0
    b76c:	e50b3008 	str	r3, [fp, #-8]
    b770:	ea00000f 	b	b7b4 <g_halBaro_readTemperatureFromI2C_i32+0xd8>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
    b774:	e51b3008 	ldr	r3, [fp, #-8]
    b778:	e2632001 	rsb	r2, r3, #1
    b77c:	e3e03007 	mvn	r3, #7
    b780:	e24b0004 	sub	r0, fp, #4
    b784:	e0802002 	add	r2, r0, r2
    b788:	e0823003 	add	r3, r2, r3
    b78c:	e5d32000 	ldrb	r2, [r3]
    b790:	e3e0300b 	mvn	r3, #11
    b794:	e51b1008 	ldr	r1, [fp, #-8]
    b798:	e24b0004 	sub	r0, fp, #4
    b79c:	e0801001 	add	r1, r0, r1
    b7a0:	e0813003 	add	r3, r1, r3
    b7a4:	e5c32000 	strb	r2, [r3]
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
	{return -1;}
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    b7a8:	e51b3008 	ldr	r3, [fp, #-8]
    b7ac:	e2833001 	add	r3, r3, #1
    b7b0:	e50b3008 	str	r3, [fp, #-8]
    b7b4:	e51b3008 	ldr	r3, [fp, #-8]
    b7b8:	e3530001 	cmp	r3, #1
    b7bc:	daffffec 	ble	b774 <g_halBaro_readTemperatureFromI2C_i32+0x98>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
		}

		m_temperature_f64=(double)g_halLib_twoComplement2Int(l_rotatedReadBuffer_ui8,2);
    b7c0:	e24b3010 	sub	r3, fp, #16
    b7c4:	e1a00003 	mov	r0, r3
    b7c8:	e3a01002 	mov	r1, #2
    b7cc:	eb000135 	bl	bca8 <g_halLib_twoComplement2Int>
    b7d0:	e1a03000 	mov	r3, r0
    b7d4:	ee063a90 	vmov	s13, r3
    b7d8:	eeb87be6 	vcvt.f64.s32	d7, s13
    b7dc:	e59f3044 	ldr	r3, [pc, #68]	; b828 <g_halBaro_readTemperatureFromI2C_i32+0x14c>
    b7e0:	ed837b00 	vstr	d7, [r3]
		m_temperature_f64=42.5+m_temperature_f64/480;
    b7e4:	e59f303c 	ldr	r3, [pc, #60]	; b828 <g_halBaro_readTemperatureFromI2C_i32+0x14c>
    b7e8:	ed936b00 	vldr	d6, [r3]
    b7ec:	ed9f7b09 	vldr	d7, [pc, #36]	; b818 <g_halBaro_readTemperatureFromI2C_i32+0x13c>
    b7f0:	ee866b07 	vdiv.f64	d6, d6, d7
    b7f4:	ed9f7b09 	vldr	d7, [pc, #36]	; b820 <g_halBaro_readTemperatureFromI2C_i32+0x144>
    b7f8:	ee367b07 	vadd.f64	d7, d6, d7
    b7fc:	e59f3024 	ldr	r3, [pc, #36]	; b828 <g_halBaro_readTemperatureFromI2C_i32+0x14c>
    b800:	ed837b00 	vstr	d7, [r3]
	}

	return 0;
    b804:	e3a03000 	mov	r3, #0
}
    b808:	e1a00003 	mov	r0, r3
    b80c:	e24bd004 	sub	sp, fp, #4
    b810:	e8bd8800 	pop	{fp, pc}
    b814:	e1a00000 	nop			; (mov r0, r0)
    b818:	00000000 	.word	0x00000000
    b81c:	407e0000 	.word	0x407e0000
    b820:	00000000 	.word	0x00000000
    b824:	40454000 	.word	0x40454000
    b828:	00010350 	.word	0x00010350
    b82c:	e1a00000 	nop			; (mov r0, r0)

0000b830 <g_halGyro_initGyro_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGyro_initGyro_i32(void)
{
    b830:	e92d4800 	push	{fp, lr}
    b834:	e28db004 	add	fp, sp, #4

	//Bypass mode -> maybe Dynamic Stream if enough bandwidth on I2C is left

	//CTRL1 (20h)= 0b11101111 ODR=800Hz Cut-Off frequency=not used
	//CTRL2 (21h)= 0b00100000 HPF=normal mode; Cut-Off frequency=56Hz
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_MULTIPLE_READ_FLAG_UI8 | M_HAL_GYRO_CTRL1_UI8;
    b838:	e59f3090 	ldr	r3, [pc, #144]	; b8d0 <g_halGyro_initGyro_i32+0xa0>
    b83c:	e3e0205f 	mvn	r2, #95	; 0x5f
    b840:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]=M_HAL_GYRO_CTRL1_DR0_DR1_UI8 | M_HAL_GYRO_CTRL1_BW1_UI8 | M_HAL_GYRO_CTRL1_NORMAL_UI8;
    b844:	e59f3084 	ldr	r3, [pc, #132]	; b8d0 <g_halGyro_initGyro_i32+0xa0>
    b848:	e3e02010 	mvn	r2, #16
    b84c:	e5c32001 	strb	r2, [r3, #1]
	l_WriteBuffer_ui8[2]=M_HAL_GYRO_CTRL2_HPF_NORMAL_MODE_UI8;
    b850:	e59f3078 	ldr	r3, [pc, #120]	; b8d0 <g_halGyro_initGyro_i32+0xa0>
    b854:	e3a02020 	mov	r2, #32
    b858:	e5c32002 	strb	r2, [r3, #2]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
    b85c:	e3a0006a 	mov	r0, #106	; 0x6a
    b860:	e59f1068 	ldr	r1, [pc, #104]	; b8d0 <g_halGyro_initGyro_i32+0xa0>
    b864:	e3a02003 	mov	r2, #3
    b868:	eb0002ba 	bl	c358 <g_lldI2c_WriteI2c_bl>
    b86c:	e1a03000 	mov	r3, r0
    b870:	e3530000 	cmp	r3, #0
    b874:	0a000001 	beq	b880 <g_halGyro_initGyro_i32+0x50>
	{return -1;}
    b878:	e3e03000 	mvn	r3, #0
    b87c:	ea000011 	b	b8c8 <g_halGyro_initGyro_i32+0x98>

	usleep(100000);
    b880:	e59f004c 	ldr	r0, [pc, #76]	; b8d4 <g_halGyro_initGyro_i32+0xa4>
    b884:	ebfff424 	bl	891c <_init+0x8c>

	//CTRL4 (23h)= 0b00010000
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_SINGLE_READ_FLAG_UI8 | M_HAL_GYRO_CTRL4_UI8;
    b888:	e59f3040 	ldr	r3, [pc, #64]	; b8d0 <g_halGyro_initGyro_i32+0xa0>
    b88c:	e3a02023 	mov	r2, #35	; 0x23
    b890:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]=M_HAL_GYRO_CTRL4_SCALE_500DPS_UI8;
    b894:	e59f3034 	ldr	r3, [pc, #52]	; b8d0 <g_halGyro_initGyro_i32+0xa0>
    b898:	e3a02010 	mov	r2, #16
    b89c:	e5c32001 	strb	r2, [r3, #1]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
    b8a0:	e3a0006a 	mov	r0, #106	; 0x6a
    b8a4:	e59f1024 	ldr	r1, [pc, #36]	; b8d0 <g_halGyro_initGyro_i32+0xa0>
    b8a8:	e3a02002 	mov	r2, #2
    b8ac:	eb0002a9 	bl	c358 <g_lldI2c_WriteI2c_bl>
    b8b0:	e1a03000 	mov	r3, r0
    b8b4:	e3530000 	cmp	r3, #0
    b8b8:	0a000001 	beq	b8c4 <g_halGyro_initGyro_i32+0x94>
	{return -1;}
    b8bc:	e3e03000 	mvn	r3, #0
    b8c0:	ea000000 	b	b8c8 <g_halGyro_initGyro_i32+0x98>

	return 0;
    b8c4:	e3a03000 	mov	r3, #0
}
    b8c8:	e1a00003 	mov	r0, r3
    b8cc:	e8bd8800 	pop	{fp, pc}
    b8d0:	00010388 	.word	0x00010388
    b8d4:	000186a0 	.word	0x000186a0

0000b8d8 <g_halGyro_getGyroscope_st>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
strGyro g_halGyro_getGyroscope_st(void)
{
    b8d8:	e92d4830 	push	{r4, r5, fp, lr}
    b8dc:	e28db00c 	add	fp, sp, #12
    b8e0:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_rotation_str;
    b8e4:	e59f3040 	ldr	r3, [pc, #64]	; b92c <g_halGyro_getGyroscope_st+0x54>
    b8e8:	e24bc024 	sub	ip, fp, #36	; 0x24
    b8ec:	e1a0e003 	mov	lr, r3
    b8f0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    b8f4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    b8f8:	e89e0003 	ldm	lr, {r0, r1}
    b8fc:	e88c0003 	stm	ip, {r0, r1}
    b900:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    b904:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    b908:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    b90c:	ec454b15 	vmov	d5, r4, r5
    b910:	ec410b16 	vmov	d6, r0, r1
    b914:	ec432b17 	vmov	d7, r2, r3
}
    b918:	eeb00b45 	vmov.f64	d0, d5
    b91c:	eeb01b46 	vmov.f64	d1, d6
    b920:	eeb02b47 	vmov.f64	d2, d7
    b924:	e24bd00c 	sub	sp, fp, #12
    b928:	e8bd8830 	pop	{r4, r5, fp, pc}
    b92c:	00010368 	.word	0x00010368

0000b930 <g_halGyro_getTemperature_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGyro_getTemperature_f64(void)
{
    b930:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    b934:	e28db000 	add	fp, sp, #0
	return m_halGyro_temperature_f64;
    b938:	e59f3014 	ldr	r3, [pc, #20]	; b954 <g_halGyro_getTemperature_f64+0x24>
    b93c:	e1c320d0 	ldrd	r2, [r3]
    b940:	ec432b17 	vmov	d7, r2, r3
}
    b944:	eeb00b47 	vmov.f64	d0, d7
    b948:	e24bd000 	sub	sp, fp, #0
    b94c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    b950:	e12fff1e 	bx	lr
    b954:	00010380 	.word	0x00010380

0000b958 <g_halGyro_readGyroscopeFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGyro_readGyroscopeFromI2C_i32(void)
{
    b958:	e92d4800 	push	{fp, lr}
    b95c:	e28db004 	add	fp, sp, #4
    b960:	e24dd040 	sub	sp, sp, #64	; 0x40
	unsigned char l_ReadBuffer_ui8[6]={0,0,0,0,0,0};
    b964:	e3a03000 	mov	r3, #0
    b968:	e54b3034 	strb	r3, [fp, #-52]	; 0x34
    b96c:	e3a03000 	mov	r3, #0
    b970:	e54b3033 	strb	r3, [fp, #-51]	; 0x33
    b974:	e3a03000 	mov	r3, #0
    b978:	e54b3032 	strb	r3, [fp, #-50]	; 0x32
    b97c:	e3a03000 	mov	r3, #0
    b980:	e54b3031 	strb	r3, [fp, #-49]	; 0x31
    b984:	e3a03000 	mov	r3, #0
    b988:	e54b3030 	strb	r3, [fp, #-48]	; 0x30
    b98c:	e3a03000 	mov	r3, #0
    b990:	e54b302f 	strb	r3, [fp, #-47]	; 0x2f
	unsigned char l_xRegister_ui8[2]={0,0};
    b994:	e3a03000 	mov	r3, #0
    b998:	e54b3038 	strb	r3, [fp, #-56]	; 0x38
    b99c:	e3a03000 	mov	r3, #0
    b9a0:	e54b3037 	strb	r3, [fp, #-55]	; 0x37
	unsigned char l_yRegister_ui8[2]={0,0};
    b9a4:	e3a03000 	mov	r3, #0
    b9a8:	e54b303c 	strb	r3, [fp, #-60]	; 0x3c
    b9ac:	e3a03000 	mov	r3, #0
    b9b0:	e54b303b 	strb	r3, [fp, #-59]	; 0x3b
	unsigned char l_zRegister_ui8[2]={0,0};
    b9b4:	e3a03000 	mov	r3, #0
    b9b8:	e54b3040 	strb	r3, [fp, #-64]	; 0x40
    b9bc:	e3a03000 	mov	r3, #0
    b9c0:	e54b303f 	strb	r3, [fp, #-63]	; 0x3f
	double l_xValue_ui8=0;
    b9c4:	e3a02000 	mov	r2, #0
    b9c8:	e3a03000 	mov	r3, #0
    b9cc:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	double l_yValue_ui8=0;
    b9d0:	e3a02000 	mov	r2, #0
    b9d4:	e3a03000 	mov	r3, #0
    b9d8:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	double l_zValue_ui8=0;
    b9dc:	e3a02000 	mov	r2, #0
    b9e0:	e3a03000 	mov	r3, #0
    b9e4:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	unsigned char l_WriteBuffer_ui8[3];
	int l_countVariable_i32=0;
    b9e8:	e3a03000 	mov	r3, #0
    b9ec:	e50b3008 	str	r3, [fp, #-8]
	//500dps in init set
	double l_factorRaw2Out_f64=(double)500.0/32767.0;
    b9f0:	e59f21e0 	ldr	r2, [pc, #480]	; bbd8 <g_halGyro_readGyroscopeFromI2C_i32+0x280>
    b9f4:	e59f31e0 	ldr	r3, [pc, #480]	; bbdc <g_halGyro_readGyroscopeFromI2C_i32+0x284>
    b9f8:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4


	//maybe check if new value is available; STATUS (27h) -->ZYXDA

	//set SUB Address to X register OUT_X_L and activate multiple read
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_MULTIPLE_READ_FLAG_UI8 | M_HAL_GYRO_OUT_X_L_UI8;
    b9fc:	e3e03057 	mvn	r3, #87	; 0x57
    ba00:	e54b3044 	strb	r3, [fp, #-68]	; 0x44
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    ba04:	e24b3044 	sub	r3, fp, #68	; 0x44
    ba08:	e3a0006a 	mov	r0, #106	; 0x6a
    ba0c:	e1a01003 	mov	r1, r3
    ba10:	e3a02001 	mov	r2, #1
    ba14:	eb00024f 	bl	c358 <g_lldI2c_WriteI2c_bl>
    ba18:	e1a03000 	mov	r3, r0
    ba1c:	e3530000 	cmp	r3, #0
    ba20:	0a000001 	beq	ba2c <g_halGyro_readGyroscopeFromI2C_i32+0xd4>
	{return -1;}
    ba24:	e3e03000 	mvn	r3, #0
    ba28:	ea000067 	b	bbcc <g_halGyro_readGyroscopeFromI2C_i32+0x274>

	//Read from OUT_X_L (28h), OUT_X_H (29h), OUT_Y_L (2Ah), OUT_Y_H (2Bh), OUT_Z_L (2Ch), OUT_Z_H (2Dh)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_SIX_UI8)!=0)
    ba2c:	e24b3034 	sub	r3, fp, #52	; 0x34
    ba30:	e3a0006a 	mov	r0, #106	; 0x6a
    ba34:	e1a01003 	mov	r1, r3
    ba38:	e3a02006 	mov	r2, #6
    ba3c:	eb00027d 	bl	c438 <g_lldI2c_ReadI2c_bl>
    ba40:	e1a03000 	mov	r3, r0
    ba44:	e3530000 	cmp	r3, #0
    ba48:	0a000001 	beq	ba54 <g_halGyro_readGyroscopeFromI2C_i32+0xfc>
	{return -1;}
    ba4c:	e3e03000 	mvn	r3, #0
    ba50:	ea00005d 	b	bbcc <g_halGyro_readGyroscopeFromI2C_i32+0x274>
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    ba54:	e3a03000 	mov	r3, #0
    ba58:	e50b3008 	str	r3, [fp, #-8]
    ba5c:	ea000029 	b	bb08 <g_halGyro_readGyroscopeFromI2C_i32+0x1b0>
		{
			l_xRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
    ba60:	e51b3008 	ldr	r3, [fp, #-8]
    ba64:	e2632001 	rsb	r2, r3, #1
    ba68:	e3e0302f 	mvn	r3, #47	; 0x2f
    ba6c:	e24b0004 	sub	r0, fp, #4
    ba70:	e0802002 	add	r2, r0, r2
    ba74:	e0823003 	add	r3, r2, r3
    ba78:	e5d32000 	ldrb	r2, [r3]
    ba7c:	e3e03033 	mvn	r3, #51	; 0x33
    ba80:	e51b1008 	ldr	r1, [fp, #-8]
    ba84:	e24b0004 	sub	r0, fp, #4
    ba88:	e0801001 	add	r1, r0, r1
    ba8c:	e0813003 	add	r3, r1, r3
    ba90:	e5c32000 	strb	r2, [r3]
			l_yRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[3-l_countVariable_i32];
    ba94:	e51b3008 	ldr	r3, [fp, #-8]
    ba98:	e2632003 	rsb	r2, r3, #3
    ba9c:	e3e0302f 	mvn	r3, #47	; 0x2f
    baa0:	e24b1004 	sub	r1, fp, #4
    baa4:	e0812002 	add	r2, r1, r2
    baa8:	e0823003 	add	r3, r2, r3
    baac:	e5d32000 	ldrb	r2, [r3]
    bab0:	e3e03037 	mvn	r3, #55	; 0x37
    bab4:	e51b1008 	ldr	r1, [fp, #-8]
    bab8:	e24b0004 	sub	r0, fp, #4
    babc:	e0801001 	add	r1, r0, r1
    bac0:	e0813003 	add	r3, r1, r3
    bac4:	e5c32000 	strb	r2, [r3]
			l_zRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[5-l_countVariable_i32];
    bac8:	e51b3008 	ldr	r3, [fp, #-8]
    bacc:	e2632005 	rsb	r2, r3, #5
    bad0:	e3e0302f 	mvn	r3, #47	; 0x2f
    bad4:	e24b1004 	sub	r1, fp, #4
    bad8:	e0812002 	add	r2, r1, r2
    badc:	e0823003 	add	r3, r2, r3
    bae0:	e5d32000 	ldrb	r2, [r3]
    bae4:	e3e0303b 	mvn	r3, #59	; 0x3b
    bae8:	e51b1008 	ldr	r1, [fp, #-8]
    baec:	e24b0004 	sub	r0, fp, #4
    baf0:	e0801001 	add	r1, r0, r1
    baf4:	e0813003 	add	r3, r1, r3
    baf8:	e5c32000 	strb	r2, [r3]
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_SIX_UI8)!=0)
	{return -1;}
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    bafc:	e51b3008 	ldr	r3, [fp, #-8]
    bb00:	e2833001 	add	r3, r3, #1
    bb04:	e50b3008 	str	r3, [fp, #-8]
    bb08:	e51b3008 	ldr	r3, [fp, #-8]
    bb0c:	e3530001 	cmp	r3, #1
    bb10:	daffffd2 	ble	ba60 <g_halGyro_readGyroscopeFromI2C_i32+0x108>
			l_xRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
			l_yRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[3-l_countVariable_i32];
			l_zRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[5-l_countVariable_i32];
		}

		l_xValue_ui8=(double)g_halLib_twoComplement2Int(l_xRegister_ui8,2);
    bb14:	e24b3038 	sub	r3, fp, #56	; 0x38
    bb18:	e1a00003 	mov	r0, r3
    bb1c:	e3a01002 	mov	r1, #2
    bb20:	eb000060 	bl	bca8 <g_halLib_twoComplement2Int>
    bb24:	e1a03000 	mov	r3, r0
    bb28:	ee063a90 	vmov	s13, r3
    bb2c:	eeb87be6 	vcvt.f64.s32	d7, s13
    bb30:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
		l_yValue_ui8=(double)g_halLib_twoComplement2Int(l_yRegister_ui8,2);
    bb34:	e24b303c 	sub	r3, fp, #60	; 0x3c
    bb38:	e1a00003 	mov	r0, r3
    bb3c:	e3a01002 	mov	r1, #2
    bb40:	eb000058 	bl	bca8 <g_halLib_twoComplement2Int>
    bb44:	e1a03000 	mov	r3, r0
    bb48:	ee063a90 	vmov	s13, r3
    bb4c:	eeb87be6 	vcvt.f64.s32	d7, s13
    bb50:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4
		l_zValue_ui8=(double)g_halLib_twoComplement2Int(l_zRegister_ui8,2);
    bb54:	e24b3040 	sub	r3, fp, #64	; 0x40
    bb58:	e1a00003 	mov	r0, r3
    bb5c:	e3a01002 	mov	r1, #2
    bb60:	eb000050 	bl	bca8 <g_halLib_twoComplement2Int>
    bb64:	e1a03000 	mov	r3, r0
    bb68:	ee063a90 	vmov	s13, r3
    bb6c:	eeb87be6 	vcvt.f64.s32	d7, s13
    bb70:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc

		l_xValue_ui8=l_xValue_ui8*l_factorRaw2Out_f64;
    bb74:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
    bb78:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    bb7c:	ee267b07 	vmul.f64	d7, d6, d7
    bb80:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
		l_yValue_ui8=l_yValue_ui8*l_factorRaw2Out_f64;
    bb84:	ed1b6b07 	vldr	d6, [fp, #-28]	; 0xffffffe4
    bb88:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    bb8c:	ee267b07 	vmul.f64	d7, d6, d7
    bb90:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4
		l_zValue_ui8=l_zValue_ui8*l_factorRaw2Out_f64;
    bb94:	ed1b6b09 	vldr	d6, [fp, #-36]	; 0xffffffdc
    bb98:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    bb9c:	ee267b07 	vmul.f64	d7, d6, d7
    bba0:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc

		m_rotation_str.l_roll_f64=l_xValue_ui8;
    bba4:	e59f1034 	ldr	r1, [pc, #52]	; bbe0 <g_halGyro_readGyroscopeFromI2C_i32+0x288>
    bba8:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    bbac:	e1c121f0 	strd	r2, [r1, #16]
		m_rotation_str.l_pitch_f64=l_yValue_ui8;
    bbb0:	e59f1028 	ldr	r1, [pc, #40]	; bbe0 <g_halGyro_readGyroscopeFromI2C_i32+0x288>
    bbb4:	e14b21dc 	ldrd	r2, [fp, #-28]	; 0xffffffe4
    bbb8:	e1c120f8 	strd	r2, [r1, #8]
		m_rotation_str.l_yaw_f64=l_zValue_ui8;
    bbbc:	e59f101c 	ldr	r1, [pc, #28]	; bbe0 <g_halGyro_readGyroscopeFromI2C_i32+0x288>
    bbc0:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
    bbc4:	e1c120f0 	strd	r2, [r1]
	}

	return 0;
    bbc8:	e3a03000 	mov	r3, #0
}
    bbcc:	e1a00003 	mov	r0, r3
    bbd0:	e24bd004 	sub	sp, fp, #4
    bbd4:	e8bd8800 	pop	{fp, pc}
    bbd8:	807d00fa 	.word	0x807d00fa
    bbdc:	3f8f403e 	.word	0x3f8f403e
    bbe0:	00010368 	.word	0x00010368

0000bbe4 <g_halGyro_readTemperatureFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGyro_readTemperatureFromI2C_i32(void)
{
    bbe4:	e92d4800 	push	{fp, lr}
    bbe8:	e28db004 	add	fp, sp, #4
    bbec:	e24dd008 	sub	sp, sp, #8
	unsigned char l_ReadBuffer_ui8[2]={0,0};
    bbf0:	e3a03000 	mov	r3, #0
    bbf4:	e54b3008 	strb	r3, [fp, #-8]
    bbf8:	e3a03000 	mov	r3, #0
    bbfc:	e54b3007 	strb	r3, [fp, #-7]
	unsigned char l_WriteBuffer_ui8[3];

	//set SUB Address to OUT_TEMP register and activate single read
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_SINGLE_READ_FLAG_UI8 | M_HAL_GYRO_OUT_TEMP_UI8;
    bc00:	e3a03026 	mov	r3, #38	; 0x26
    bc04:	e54b300c 	strb	r3, [fp, #-12]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    bc08:	e24b300c 	sub	r3, fp, #12
    bc0c:	e3a0006a 	mov	r0, #106	; 0x6a
    bc10:	e1a01003 	mov	r1, r3
    bc14:	e3a02001 	mov	r2, #1
    bc18:	eb0001ce 	bl	c358 <g_lldI2c_WriteI2c_bl>
    bc1c:	e1a03000 	mov	r3, r0
    bc20:	e3530000 	cmp	r3, #0
    bc24:	0a000001 	beq	bc30 <g_halGyro_readTemperatureFromI2C_i32+0x4c>
	{return -1;}
    bc28:	e3e03000 	mvn	r3, #0
    bc2c:	ea000015 	b	bc88 <g_halGyro_readTemperatureFromI2C_i32+0xa4>

	//Read from OUT_TEMP (26h)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    bc30:	e24b3008 	sub	r3, fp, #8
    bc34:	e3a0006a 	mov	r0, #106	; 0x6a
    bc38:	e1a01003 	mov	r1, r3
    bc3c:	e3a02001 	mov	r2, #1
    bc40:	eb0001fc 	bl	c438 <g_lldI2c_ReadI2c_bl>
    bc44:	e1a03000 	mov	r3, r0
    bc48:	e3530000 	cmp	r3, #0
    bc4c:	0a000001 	beq	bc58 <g_halGyro_readTemperatureFromI2C_i32+0x74>
	{return -1;}
    bc50:	e3e03000 	mvn	r3, #0
    bc54:	ea00000b 	b	bc88 <g_halGyro_readTemperatureFromI2C_i32+0xa4>
	else
	{
		m_halGyro_temperature_f64=(double)(M_HAL_GYRO_TEMP_OFFSET_UI8)-(double)(g_halLib_twoComplement2Int(l_ReadBuffer_ui8,1));
    bc58:	e24b3008 	sub	r3, fp, #8
    bc5c:	e1a00003 	mov	r0, r3
    bc60:	e3a01001 	mov	r1, #1
    bc64:	eb00000f 	bl	bca8 <g_halLib_twoComplement2Int>
    bc68:	e1a03000 	mov	r3, r0
    bc6c:	ee063a90 	vmov	s13, r3
    bc70:	eeb87be6 	vcvt.f64.s32	d7, s13
    bc74:	ed9f6b07 	vldr	d6, [pc, #28]	; bc98 <g_halGyro_readTemperatureFromI2C_i32+0xb4>
    bc78:	ee367b47 	vsub.f64	d7, d6, d7
    bc7c:	e59f301c 	ldr	r3, [pc, #28]	; bca0 <g_halGyro_readTemperatureFromI2C_i32+0xbc>
    bc80:	ed837b00 	vstr	d7, [r3]
	}

	return 0;
    bc84:	e3a03000 	mov	r3, #0
}
    bc88:	e1a00003 	mov	r0, r3
    bc8c:	e24bd004 	sub	sp, fp, #4
    bc90:	e8bd8800 	pop	{fp, pc}
    bc94:	e1a00000 	nop			; (mov r0, r0)
    bc98:	00000000 	.word	0x00000000
    bc9c:	403b0000 	.word	0x403b0000
    bca0:	00010380 	.word	0x00010380
    bca4:	e1a00000 	nop			; (mov r0, r0)

0000bca8 <g_halLib_twoComplement2Int>:
 */

#include "Hal_Lib.h"

int g_halLib_twoComplement2Int(unsigned char* f_buffer_ui8,unsigned int f_nrOfBytes_ui32)
{
    bca8:	e92d4830 	push	{r4, r5, fp, lr}
    bcac:	e28db00c 	add	fp, sp, #12
    bcb0:	e24dd020 	sub	sp, sp, #32
    bcb4:	e50b0028 	str	r0, [fp, #-40]	; 0x28
    bcb8:	e50b102c 	str	r1, [fp, #-44]	; 0x2c
    bcbc:	e1a0100d 	mov	r1, sp
    bcc0:	e1a0e001 	mov	lr, r1
	int l_countVariable_i32=0;
    bcc4:	e3a01000 	mov	r1, #0
    bcc8:	e50b1010 	str	r1, [fp, #-16]
	int l_result_i32=0;
    bccc:	e3a01000 	mov	r1, #0
    bcd0:	e50b1014 	str	r1, [fp, #-20]
	unsigned char l_shift_ui8=0;
    bcd4:	e3a01000 	mov	r1, #0
    bcd8:	e54b1015 	strb	r1, [fp, #-21]
	unsigned int l_buffer_ui8[f_nrOfBytes_ui32];
    bcdc:	e51bc02c 	ldr	ip, [fp, #-44]	; 0x2c
    bce0:	e1a0100c 	mov	r1, ip
    bce4:	e2411001 	sub	r1, r1, #1
    bce8:	e50b101c 	str	r1, [fp, #-28]
    bcec:	e1a0000c 	mov	r0, ip
    bcf0:	e3a01000 	mov	r1, #0
    bcf4:	e1a05281 	lsl	r5, r1, #5
    bcf8:	e1855da0 	orr	r5, r5, r0, lsr #27
    bcfc:	e1a04280 	lsl	r4, r0, #5
    bd00:	e1a0000c 	mov	r0, ip
    bd04:	e3a01000 	mov	r1, #0
    bd08:	e1a03281 	lsl	r3, r1, #5
    bd0c:	e1833da0 	orr	r3, r3, r0, lsr #27
    bd10:	e1a02280 	lsl	r2, r0, #5
    bd14:	e1a0310c 	lsl	r3, ip, #2
    bd18:	e2833003 	add	r3, r3, #3
    bd1c:	e2833007 	add	r3, r3, #7
    bd20:	e1a031a3 	lsr	r3, r3, #3
    bd24:	e1a03183 	lsl	r3, r3, #3
    bd28:	e04dd003 	sub	sp, sp, r3
    bd2c:	e1a0300d 	mov	r3, sp
    bd30:	e2833003 	add	r3, r3, #3
    bd34:	e1a03123 	lsr	r3, r3, #2
    bd38:	e1a03103 	lsl	r3, r3, #2
    bd3c:	e50b3020 	str	r3, [fp, #-32]

	//copy Parameter buffer to local buffer
	for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    bd40:	e3a03000 	mov	r3, #0
    bd44:	e50b3010 	str	r3, [fp, #-16]
    bd48:	ea00000a 	b	bd78 <g_halLib_twoComplement2Int+0xd0>
	{
		l_buffer_ui8[l_countVariable_i32]=*(f_buffer_ui8+l_countVariable_i32);
    bd4c:	e51b3010 	ldr	r3, [fp, #-16]
    bd50:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    bd54:	e0823003 	add	r3, r2, r3
    bd58:	e5d33000 	ldrb	r3, [r3]
    bd5c:	e1a01003 	mov	r1, r3
    bd60:	e51b3020 	ldr	r3, [fp, #-32]
    bd64:	e51b2010 	ldr	r2, [fp, #-16]
    bd68:	e7831102 	str	r1, [r3, r2, lsl #2]
	int l_result_i32=0;
	unsigned char l_shift_ui8=0;
	unsigned int l_buffer_ui8[f_nrOfBytes_ui32];

	//copy Parameter buffer to local buffer
	for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    bd6c:	e51b3010 	ldr	r3, [fp, #-16]
    bd70:	e2833001 	add	r3, r3, #1
    bd74:	e50b3010 	str	r3, [fp, #-16]
    bd78:	e51b2010 	ldr	r2, [fp, #-16]
    bd7c:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    bd80:	e2433001 	sub	r3, r3, #1
    bd84:	e1520003 	cmp	r2, r3
    bd88:	9affffef 	bls	bd4c <g_halLib_twoComplement2Int+0xa4>
	{
		l_buffer_ui8[l_countVariable_i32]=*(f_buffer_ui8+l_countVariable_i32);
	}
//
	//if number is negative
	if ((l_buffer_ui8[0]& M_MASK_NEGATIVE_UI8)!=0)
    bd8c:	e51b3020 	ldr	r3, [fp, #-32]
    bd90:	e5933000 	ldr	r3, [r3]
    bd94:	e2033080 	and	r3, r3, #128	; 0x80
    bd98:	e3530000 	cmp	r3, #0
    bd9c:	0a000023 	beq	be30 <g_halLib_twoComplement2Int+0x188>
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    bda0:	e3a03000 	mov	r3, #0
    bda4:	e50b3010 	str	r3, [fp, #-16]
    bda8:	ea000014 	b	be00 <g_halLib_twoComplement2Int+0x158>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
    bdac:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    bdb0:	e6ef2073 	uxtb	r2, r3
    bdb4:	e51b3010 	ldr	r3, [fp, #-16]
    bdb8:	e6ef3073 	uxtb	r3, r3
    bdbc:	e0633002 	rsb	r3, r3, r2
    bdc0:	e6ef3073 	uxtb	r3, r3
    bdc4:	e2433001 	sub	r3, r3, #1
    bdc8:	e54b3015 	strb	r3, [fp, #-21]
			l_result_i32=l_result_i32+(((l_buffer_ui8[l_countVariable_i32])^255)<<(l_shift_ui8*8));
    bdcc:	e51b3020 	ldr	r3, [fp, #-32]
    bdd0:	e51b2010 	ldr	r2, [fp, #-16]
    bdd4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    bdd8:	e22320ff 	eor	r2, r3, #255	; 0xff
    bddc:	e55b3015 	ldrb	r3, [fp, #-21]
    bde0:	e1a03183 	lsl	r3, r3, #3
    bde4:	e1a02312 	lsl	r2, r2, r3
    bde8:	e51b3014 	ldr	r3, [fp, #-20]
    bdec:	e0823003 	add	r3, r2, r3
    bdf0:	e50b3014 	str	r3, [fp, #-20]
	}
//
	//if number is negative
	if ((l_buffer_ui8[0]& M_MASK_NEGATIVE_UI8)!=0)
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    bdf4:	e51b3010 	ldr	r3, [fp, #-16]
    bdf8:	e2833001 	add	r3, r3, #1
    bdfc:	e50b3010 	str	r3, [fp, #-16]
    be00:	e51b2010 	ldr	r2, [fp, #-16]
    be04:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    be08:	e2433001 	sub	r3, r3, #1
    be0c:	e1520003 	cmp	r2, r3
    be10:	9affffe5 	bls	bdac <g_halLib_twoComplement2Int+0x104>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
			l_result_i32=l_result_i32+(((l_buffer_ui8[l_countVariable_i32])^255)<<(l_shift_ui8*8));
		}
		l_result_i32=l_result_i32+1;
    be14:	e51b3014 	ldr	r3, [fp, #-20]
    be18:	e2833001 	add	r3, r3, #1
    be1c:	e50b3014 	str	r3, [fp, #-20]
		l_result_i32=l_result_i32*-1;
    be20:	e51b3014 	ldr	r3, [fp, #-20]
    be24:	e2633000 	rsb	r3, r3, #0
    be28:	e50b3014 	str	r3, [fp, #-20]
    be2c:	ea00001b 	b	bea0 <g_halLib_twoComplement2Int+0x1f8>
	}
	else
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    be30:	e3a03000 	mov	r3, #0
    be34:	e50b3010 	str	r3, [fp, #-16]
    be38:	ea000013 	b	be8c <g_halLib_twoComplement2Int+0x1e4>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
    be3c:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    be40:	e6ef2073 	uxtb	r2, r3
    be44:	e51b3010 	ldr	r3, [fp, #-16]
    be48:	e6ef3073 	uxtb	r3, r3
    be4c:	e0633002 	rsb	r3, r3, r2
    be50:	e6ef3073 	uxtb	r3, r3
    be54:	e2433001 	sub	r3, r3, #1
    be58:	e54b3015 	strb	r3, [fp, #-21]
			l_result_i32=l_result_i32+(l_buffer_ui8[l_countVariable_i32]<<l_shift_ui8*8);
    be5c:	e51b3020 	ldr	r3, [fp, #-32]
    be60:	e51b2010 	ldr	r2, [fp, #-16]
    be64:	e7932102 	ldr	r2, [r3, r2, lsl #2]
    be68:	e55b3015 	ldrb	r3, [fp, #-21]
    be6c:	e1a03183 	lsl	r3, r3, #3
    be70:	e1a02312 	lsl	r2, r2, r3
    be74:	e51b3014 	ldr	r3, [fp, #-20]
    be78:	e0823003 	add	r3, r2, r3
    be7c:	e50b3014 	str	r3, [fp, #-20]
		l_result_i32=l_result_i32+1;
		l_result_i32=l_result_i32*-1;
	}
	else
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    be80:	e51b3010 	ldr	r3, [fp, #-16]
    be84:	e2833001 	add	r3, r3, #1
    be88:	e50b3010 	str	r3, [fp, #-16]
    be8c:	e51b2010 	ldr	r2, [fp, #-16]
    be90:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    be94:	e2433001 	sub	r3, r3, #1
    be98:	e1520003 	cmp	r2, r3
    be9c:	9affffe6 	bls	be3c <g_halLib_twoComplement2Int+0x194>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
			l_result_i32=l_result_i32+(l_buffer_ui8[l_countVariable_i32]<<l_shift_ui8*8);
		}
	}
	return l_result_i32;
    bea0:	e51b3014 	ldr	r3, [fp, #-20]
    bea4:	e1a0d00e 	mov	sp, lr
}
    bea8:	e1a00003 	mov	r0, r3
    beac:	e24bd00c 	sub	sp, fp, #12
    beb0:	e8bd8830 	pop	{r4, r5, fp, pc}

0000beb4 <g_halImu_getImuValues_str>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halImu_orientationValues g_halImu_getImuValues_str(void)
{
    beb4:	e92d4800 	push	{fp, lr}
    beb8:	e28db004 	add	fp, sp, #4
    bebc:	e24dd008 	sub	sp, sp, #8
    bec0:	e50b0008 	str	r0, [fp, #-8]
	return m_halImu_imuValues_st;
    bec4:	e51b2008 	ldr	r2, [fp, #-8]
    bec8:	e59f3024 	ldr	r3, [pc, #36]	; bef4 <g_halImu_getImuValues_str+0x40>
    becc:	e1a01002 	mov	r1, r2
    bed0:	e1a02003 	mov	r2, r3
    bed4:	e3a03058 	mov	r3, #88	; 0x58
    bed8:	e1a00001 	mov	r0, r1
    bedc:	e1a01002 	mov	r1, r2
    bee0:	e1a02003 	mov	r2, r3
    bee4:	ebfff2ad 	bl	89a0 <_init+0x110>
}
    bee8:	e51b0008 	ldr	r0, [fp, #-8]
    beec:	e24bd004 	sub	sp, fp, #4
    bef0:	e8bd8800 	pop	{fp, pc}
    bef4:	00010390 	.word	0x00010390

0000bef8 <g_halImu_initImuSensors_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_initImuSensors_bl(void)
{
    bef8:	e92d4800 	push	{fp, lr}
    befc:	e28db004 	add	fp, sp, #4
	// initialize Acceleration and electrical Compass chip
	if(g_halAccmag_initSensor_bl()!=0)
    bf00:	ebfffce9 	bl	b2ac <g_halAccmag_initSensor_bl>
    bf04:	e1a03000 	mov	r3, r0
    bf08:	e3530000 	cmp	r3, #0
    bf0c:	0a000001 	beq	bf18 <g_halImu_initImuSensors_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    bf10:	e3a03001 	mov	r3, #1
    bf14:	ea00000c 	b	bf4c <g_halImu_initImuSensors_bl+0x54>

	// initialize Barometer chip
	if(g_halBaro_initBaro_i32()!=0)
    bf18:	ebfffd5e 	bl	b498 <g_halBaro_initBaro_i32>
    bf1c:	e1a03000 	mov	r3, r0
    bf20:	e3530000 	cmp	r3, #0
    bf24:	0a000001 	beq	bf30 <g_halImu_initImuSensors_bl+0x38>
	{return M_HAL_IMU_FAILED_BL;}
    bf28:	e3a03001 	mov	r3, #1
    bf2c:	ea000006 	b	bf4c <g_halImu_initImuSensors_bl+0x54>

	// initialize Gyroscope chip
	if(g_halGyro_initGyro_i32()!=0)
    bf30:	ebfffe3e 	bl	b830 <g_halGyro_initGyro_i32>
    bf34:	e1a03000 	mov	r3, r0
    bf38:	e3530000 	cmp	r3, #0
    bf3c:	0a000001 	beq	bf48 <g_halImu_initImuSensors_bl+0x50>
	{return M_HAL_IMU_FAILED_BL;}
    bf40:	e3a03001 	mov	r3, #1
    bf44:	ea000000 	b	bf4c <g_halImu_initImuSensors_bl+0x54>

	return M_HAL_IMU_SUCCESS_BL;
    bf48:	e3a03000 	mov	r3, #0
}
    bf4c:	e1a00003 	mov	r0, r3
    bf50:	e8bd8800 	pop	{fp, pc}

0000bf54 <g_halImu_triggerBaroReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerBaroReading_bl(void)
{
    bf54:	e92d4800 	push	{fp, lr}
    bf58:	e28db004 	add	fp, sp, #4
	if(g_halBaro_readPressureFromI2C_i32()!=0)
    bf5c:	ebfffd8b 	bl	b590 <g_halBaro_readPressureFromI2C_i32>
    bf60:	e1a03000 	mov	r3, r0
    bf64:	e3530000 	cmp	r3, #0
    bf68:	0a000001 	beq	bf74 <g_halImu_triggerBaroReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    bf6c:	e3a03001 	mov	r3, #1
    bf70:	ea00000e 	b	bfb0 <g_halImu_triggerBaroReading_bl+0x5c>

	if(g_halBaro_readTemperatureFromI2C_i32()!=0)
    bf74:	ebfffdd8 	bl	b6dc <g_halBaro_readTemperatureFromI2C_i32>
    bf78:	e1a03000 	mov	r3, r0
    bf7c:	e3530000 	cmp	r3, #0
    bf80:	0a000001 	beq	bf8c <g_halImu_triggerBaroReading_bl+0x38>
	{return M_HAL_IMU_FAILED_BL;}
    bf84:	e3a03001 	mov	r3, #1
    bf88:	ea000008 	b	bfb0 <g_halImu_triggerBaroReading_bl+0x5c>

	m_halImu_imuValues_st.pressure_f64=g_halBaro_getPressure_f64();
    bf8c:	ebfffd6b 	bl	b540 <g_halBaro_getPressure_f64>
    bf90:	eeb07b40 	vmov.f64	d7, d0
    bf94:	e59f301c 	ldr	r3, [pc, #28]	; bfb8 <g_halImu_triggerBaroReading_bl+0x64>
    bf98:	ed837b14 	vstr	d7, [r3, #80]	; 0x50
	m_halImu_imuValues_st.temperature_f64=g_halBaro_getTemperature_f64();
    bf9c:	ebfffd71 	bl	b568 <g_halBaro_getTemperature_f64>
    bfa0:	eeb07b40 	vmov.f64	d7, d0
    bfa4:	e59f300c 	ldr	r3, [pc, #12]	; bfb8 <g_halImu_triggerBaroReading_bl+0x64>
    bfa8:	ed837b12 	vstr	d7, [r3, #72]	; 0x48

	return M_HAL_IMU_SUCCESS_BL;
    bfac:	e3a03000 	mov	r3, #0
}
    bfb0:	e1a00003 	mov	r0, r3
    bfb4:	e8bd8800 	pop	{fp, pc}
    bfb8:	00010390 	.word	0x00010390

0000bfbc <g_halImu_triggerGyroReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerGyroReading_bl(void)
{
    bfbc:	e92d4818 	push	{r3, r4, fp, lr}
    bfc0:	e28db00c 	add	fp, sp, #12
	if(g_halGyro_readGyroscopeFromI2C_i32()!=0)
    bfc4:	ebfffe63 	bl	b958 <g_halGyro_readGyroscopeFromI2C_i32>
    bfc8:	e1a03000 	mov	r3, r0
    bfcc:	e3530000 	cmp	r3, #0
    bfd0:	0a000001 	beq	bfdc <g_halImu_triggerGyroReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    bfd4:	e3a03001 	mov	r3, #1
    bfd8:	ea000008 	b	c000 <g_halImu_triggerGyroReading_bl+0x44>

	m_halImu_imuValues_st.gyro=g_halGyro_getGyroscope_st();
    bfdc:	e59f4024 	ldr	r4, [pc, #36]	; c008 <g_halImu_triggerGyroReading_bl+0x4c>
    bfe0:	ebfffe3c 	bl	b8d8 <g_halGyro_getGyroscope_st>
    bfe4:	eeb05b40 	vmov.f64	d5, d0
    bfe8:	eeb06b41 	vmov.f64	d6, d1
    bfec:	eeb07b42 	vmov.f64	d7, d2
    bff0:	ed845b0c 	vstr	d5, [r4, #48]	; 0x30
    bff4:	ed846b0e 	vstr	d6, [r4, #56]	; 0x38
    bff8:	ed847b10 	vstr	d7, [r4, #64]	; 0x40

	return M_HAL_IMU_SUCCESS_BL;
    bffc:	e3a03000 	mov	r3, #0
}
    c000:	e1a00003 	mov	r0, r3
    c004:	e8bd8818 	pop	{r3, r4, fp, pc}
    c008:	00010390 	.word	0x00010390

0000c00c <g_halImu_triggerAccReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerAccReading_bl(void)
{
    c00c:	e92d4818 	push	{r3, r4, fp, lr}
    c010:	e28db00c 	add	fp, sp, #12
	if(g_halAccmag_triggerAccUpdate_bl()!=0)
    c014:	ebfffccc 	bl	b34c <g_halAccmag_triggerAccUpdate_bl>
    c018:	e1a03000 	mov	r3, r0
    c01c:	e3530000 	cmp	r3, #0
    c020:	0a000001 	beq	c02c <g_halImu_triggerAccReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    c024:	e3a03001 	mov	r3, #1
    c028:	ea000008 	b	c050 <g_halImu_triggerAccReading_bl+0x44>

	m_halImu_imuValues_st.acc=g_halAccmag_getAccVector_st();
    c02c:	e59f4024 	ldr	r4, [pc, #36]	; c058 <g_halImu_triggerAccReading_bl+0x4c>
    c030:	ebfffcda 	bl	b3a0 <g_halAccmag_getAccVector_st>
    c034:	eeb05b40 	vmov.f64	d5, d0
    c038:	eeb06b41 	vmov.f64	d6, d1
    c03c:	eeb07b42 	vmov.f64	d7, d2
    c040:	ed845b00 	vstr	d5, [r4]
    c044:	ed846b02 	vstr	d6, [r4, #8]
    c048:	ed847b04 	vstr	d7, [r4, #16]

	return M_HAL_IMU_SUCCESS_BL;
    c04c:	e3a03000 	mov	r3, #0
}
    c050:	e1a00003 	mov	r0, r3
    c054:	e8bd8818 	pop	{r3, r4, fp, pc}
    c058:	00010390 	.word	0x00010390

0000c05c <g_halImu_triggerMagReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerMagReading_bl(void)
{
    c05c:	e92d4818 	push	{r3, r4, fp, lr}
    c060:	e28db00c 	add	fp, sp, #12
	if(g_halAccmag_triggerMagUpdate_bl()!=0)
    c064:	ebfffcbf 	bl	b368 <g_halAccmag_triggerMagUpdate_bl>
    c068:	e1a03000 	mov	r3, r0
    c06c:	e3530000 	cmp	r3, #0
    c070:	0a000001 	beq	c07c <g_halImu_triggerMagReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    c074:	e3a03001 	mov	r3, #1
    c078:	ea000008 	b	c0a0 <g_halImu_triggerMagReading_bl+0x44>

	m_halImu_imuValues_st.mag=g_halAccmag_getMagVector_st();
    c07c:	e59f4024 	ldr	r4, [pc, #36]	; c0a8 <g_halImu_triggerMagReading_bl+0x4c>
    c080:	ebfffcdc 	bl	b3f8 <g_halAccmag_getMagVector_st>
    c084:	eeb05b40 	vmov.f64	d5, d0
    c088:	eeb06b41 	vmov.f64	d6, d1
    c08c:	eeb07b42 	vmov.f64	d7, d2
    c090:	ed845b06 	vstr	d5, [r4, #24]
    c094:	ed846b08 	vstr	d6, [r4, #32]
    c098:	ed847b0a 	vstr	d7, [r4, #40]	; 0x28

	return M_HAL_IMU_SUCCESS_BL;
    c09c:	e3a03000 	mov	r3, #0
}
    c0a0:	e1a00003 	mov	r0, r3
    c0a4:	e8bd8818 	pop	{r3, r4, fp, pc}
    c0a8:	00010390 	.word	0x00010390

0000c0ac <g_halImu_triggerImuReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerImuReading_bl(void)
{
    c0ac:	e92d4818 	push	{r3, r4, fp, lr}
    c0b0:	e28db00c 	add	fp, sp, #12
	if(g_halBaro_readPressureFromI2C_i32()!=0)
    c0b4:	ebfffd35 	bl	b590 <g_halBaro_readPressureFromI2C_i32>
    c0b8:	e1a03000 	mov	r3, r0
    c0bc:	e3530000 	cmp	r3, #0
    c0c0:	0a000001 	beq	c0cc <g_halImu_triggerImuReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    c0c4:	e3a03001 	mov	r3, #1
    c0c8:	ea000038 	b	c1b0 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halBaro_readTemperatureFromI2C_i32()!=0)
    c0cc:	ebfffd82 	bl	b6dc <g_halBaro_readTemperatureFromI2C_i32>
    c0d0:	e1a03000 	mov	r3, r0
    c0d4:	e3530000 	cmp	r3, #0
    c0d8:	0a000001 	beq	c0e4 <g_halImu_triggerImuReading_bl+0x38>
	{return M_HAL_IMU_FAILED_BL;}
    c0dc:	e3a03001 	mov	r3, #1
    c0e0:	ea000032 	b	c1b0 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halGyro_readGyroscopeFromI2C_i32()!=0)
    c0e4:	ebfffe1b 	bl	b958 <g_halGyro_readGyroscopeFromI2C_i32>
    c0e8:	e1a03000 	mov	r3, r0
    c0ec:	e3530000 	cmp	r3, #0
    c0f0:	0a000001 	beq	c0fc <g_halImu_triggerImuReading_bl+0x50>
	{return M_HAL_IMU_FAILED_BL;}
    c0f4:	e3a03001 	mov	r3, #1
    c0f8:	ea00002c 	b	c1b0 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halAccmag_triggerAccUpdate_bl()!=0)
    c0fc:	ebfffc92 	bl	b34c <g_halAccmag_triggerAccUpdate_bl>
    c100:	e1a03000 	mov	r3, r0
    c104:	e3530000 	cmp	r3, #0
    c108:	0a000001 	beq	c114 <g_halImu_triggerImuReading_bl+0x68>
	{return M_HAL_IMU_FAILED_BL;}
    c10c:	e3a03001 	mov	r3, #1
    c110:	ea000026 	b	c1b0 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halAccmag_triggerMagUpdate_bl()!=0)
    c114:	ebfffc93 	bl	b368 <g_halAccmag_triggerMagUpdate_bl>
    c118:	e1a03000 	mov	r3, r0
    c11c:	e3530000 	cmp	r3, #0
    c120:	0a000001 	beq	c12c <g_halImu_triggerImuReading_bl+0x80>
	{return M_HAL_IMU_FAILED_BL;}
    c124:	e3a03001 	mov	r3, #1
    c128:	ea000020 	b	c1b0 <g_halImu_triggerImuReading_bl+0x104>

	m_halImu_imuValues_st.mag=g_halAccmag_getMagVector_st();
    c12c:	e59f4084 	ldr	r4, [pc, #132]	; c1b8 <g_halImu_triggerImuReading_bl+0x10c>
    c130:	ebfffcb0 	bl	b3f8 <g_halAccmag_getMagVector_st>
    c134:	eeb05b40 	vmov.f64	d5, d0
    c138:	eeb06b41 	vmov.f64	d6, d1
    c13c:	eeb07b42 	vmov.f64	d7, d2
    c140:	ed845b06 	vstr	d5, [r4, #24]
    c144:	ed846b08 	vstr	d6, [r4, #32]
    c148:	ed847b0a 	vstr	d7, [r4, #40]	; 0x28
	m_halImu_imuValues_st.acc=g_halAccmag_getAccVector_st();
    c14c:	e59f4064 	ldr	r4, [pc, #100]	; c1b8 <g_halImu_triggerImuReading_bl+0x10c>
    c150:	ebfffc92 	bl	b3a0 <g_halAccmag_getAccVector_st>
    c154:	eeb05b40 	vmov.f64	d5, d0
    c158:	eeb06b41 	vmov.f64	d6, d1
    c15c:	eeb07b42 	vmov.f64	d7, d2
    c160:	ed845b00 	vstr	d5, [r4]
    c164:	ed846b02 	vstr	d6, [r4, #8]
    c168:	ed847b04 	vstr	d7, [r4, #16]
	m_halImu_imuValues_st.gyro=g_halGyro_getGyroscope_st();
    c16c:	e59f4044 	ldr	r4, [pc, #68]	; c1b8 <g_halImu_triggerImuReading_bl+0x10c>
    c170:	ebfffdd8 	bl	b8d8 <g_halGyro_getGyroscope_st>
    c174:	eeb05b40 	vmov.f64	d5, d0
    c178:	eeb06b41 	vmov.f64	d6, d1
    c17c:	eeb07b42 	vmov.f64	d7, d2
    c180:	ed845b0c 	vstr	d5, [r4, #48]	; 0x30
    c184:	ed846b0e 	vstr	d6, [r4, #56]	; 0x38
    c188:	ed847b10 	vstr	d7, [r4, #64]	; 0x40
	m_halImu_imuValues_st.pressure_f64=g_halBaro_getPressure_f64();
    c18c:	ebfffceb 	bl	b540 <g_halBaro_getPressure_f64>
    c190:	eeb07b40 	vmov.f64	d7, d0
    c194:	e59f301c 	ldr	r3, [pc, #28]	; c1b8 <g_halImu_triggerImuReading_bl+0x10c>
    c198:	ed837b14 	vstr	d7, [r3, #80]	; 0x50
	m_halImu_imuValues_st.temperature_f64=g_halBaro_getTemperature_f64();
    c19c:	ebfffcf1 	bl	b568 <g_halBaro_getTemperature_f64>
    c1a0:	eeb07b40 	vmov.f64	d7, d0
    c1a4:	e59f300c 	ldr	r3, [pc, #12]	; c1b8 <g_halImu_triggerImuReading_bl+0x10c>
    c1a8:	ed837b12 	vstr	d7, [r3, #72]	; 0x48

	return M_HAL_IMU_SUCCESS_BL;
    c1ac:	e3a03000 	mov	r3, #0
}
    c1b0:	e1a00003 	mov	r0, r3
    c1b4:	e8bd8818 	pop	{r3, r4, fp, pc}
    c1b8:	00010390 	.word	0x00010390
    c1bc:	00000000 	.word	0x00000000

0000c1c0 <g_LIDAR_getDistance_f64>:
 *
 * \endinternal
 ********************************************************************** */

double g_LIDAR_getDistance_f64(void)
{
    c1c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    c1c4:	e28db000 	add	fp, sp, #0
	return m_distance_f64;
    c1c8:	e59f3014 	ldr	r3, [pc, #20]	; c1e4 <g_LIDAR_getDistance_f64+0x24>
    c1cc:	e1c320d0 	ldrd	r2, [r3]
    c1d0:	ec432b17 	vmov	d7, r2, r3
}
    c1d4:	eeb00b47 	vmov.f64	d0, d7
    c1d8:	e24bd000 	sub	sp, fp, #0
    c1dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    c1e0:	e12fff1e 	bx	lr
    c1e4:	000103e8 	.word	0x000103e8

0000c1e8 <g_LIDAR_readDistanceFromI2C_i32>:
 *
 * \endinternal
 ********************************************************************** */

int g_LIDAR_readDistanceFromI2C_i32(void)
{
    c1e8:	e92d4800 	push	{fp, lr}
    c1ec:	e28db004 	add	fp, sp, #4
    c1f0:	e24dd010 	sub	sp, sp, #16
unsigned char l_ReadBuffer_ui8[2]={0,0};
    c1f4:	e3a03000 	mov	r3, #0
    c1f8:	e54b300c 	strb	r3, [fp, #-12]
    c1fc:	e3a03000 	mov	r3, #0
    c200:	e54b300b 	strb	r3, [fp, #-11]
unsigned char l_WriteBuffer_ui8[2]={0,0};
    c204:	e3a03000 	mov	r3, #0
    c208:	e54b3010 	strb	r3, [fp, #-16]
    c20c:	e3a03000 	mov	r3, #0
    c210:	e54b300f 	strb	r3, [fp, #-15]
int l_DistInCm_i32 =  0;
    c214:	e3a03000 	mov	r3, #0
    c218:	e50b3008 	str	r3, [fp, #-8]

//Trigger Measurement of Distance (DC stabnilization cycle, Signal Acquisition, DataProcessing)
l_WriteBuffer_ui8[0]=0x00; 								//write Reg 0x00
    c21c:	e3a03000 	mov	r3, #0
    c220:	e54b3010 	strb	r3, [fp, #-16]
l_WriteBuffer_ui8[1]=0x04; 								//with value 0x04
    c224:	e3a03004 	mov	r3, #4
    c228:	e54b300f 	strb	r3, [fp, #-15]
if(g_lldI2c_WriteI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, l_WriteBuffer_ui8, 2)!=0)
    c22c:	e24b3010 	sub	r3, fp, #16
    c230:	e3a00062 	mov	r0, #98	; 0x62
    c234:	e1a01003 	mov	r1, r3
    c238:	e3a02002 	mov	r2, #2
    c23c:	eb0000b5 	bl	c518 <g_lldI2c_WriteI2c0_bl>
    c240:	e1a03000 	mov	r3, r0
    c244:	e3530000 	cmp	r3, #0
    c248:	0a000001 	beq	c254 <g_LIDAR_readDistanceFromI2C_i32+0x6c>
{
return -1;
    c24c:	e3e03000 	mvn	r3, #0
    c250:	ea000038 	b	c338 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Waiting Time for Acquisition
usleep(20*1000);
    c254:	e59f00f4 	ldr	r0, [pc, #244]	; c350 <g_LIDAR_readDistanceFromI2C_i32+0x168>
    c258:	ebfff1af 	bl	891c <_init+0x8c>


//Set Acquisition count cycle to 255
l_WriteBuffer_ui8[0]=0x02;
    c25c:	e3a03002 	mov	r3, #2
    c260:	e54b3010 	strb	r3, [fp, #-16]
l_WriteBuffer_ui8[1]=0xFF;
    c264:	e3e03000 	mvn	r3, #0
    c268:	e54b300f 	strb	r3, [fp, #-15]
if(g_lldI2c_WriteI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, l_WriteBuffer_ui8, 2)!=0)
    c26c:	e24b3010 	sub	r3, fp, #16
    c270:	e3a00062 	mov	r0, #98	; 0x62
    c274:	e1a01003 	mov	r1, r3
    c278:	e3a02002 	mov	r2, #2
    c27c:	eb0000a5 	bl	c518 <g_lldI2c_WriteI2c0_bl>
    c280:	e1a03000 	mov	r3, r0
    c284:	e3530000 	cmp	r3, #0
    c288:	0a000001 	beq	c294 <g_LIDAR_readDistanceFromI2C_i32+0xac>
{
return -1;
    c28c:	e3e03000 	mvn	r3, #0
    c290:	ea000028 	b	c338 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Set Reg 0x8f as Output-Register
l_WriteBuffer_ui8[0]=0x8f;
    c294:	e3e03070 	mvn	r3, #112	; 0x70
    c298:	e54b3010 	strb	r3, [fp, #-16]
if(g_lldI2c_WriteI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, l_WriteBuffer_ui8, 1)!=0)
    c29c:	e24b3010 	sub	r3, fp, #16
    c2a0:	e3a00062 	mov	r0, #98	; 0x62
    c2a4:	e1a01003 	mov	r1, r3
    c2a8:	e3a02001 	mov	r2, #1
    c2ac:	eb000099 	bl	c518 <g_lldI2c_WriteI2c0_bl>
    c2b0:	e1a03000 	mov	r3, r0
    c2b4:	e3530000 	cmp	r3, #0
    c2b8:	0a000001 	beq	c2c4 <g_LIDAR_readDistanceFromI2C_i32+0xdc>
{
return -1;
    c2bc:	e3e03000 	mvn	r3, #0
    c2c0:	ea00001c 	b	c338 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Read 2-Byte Distance in cm from Register 0x8f
if(g_lldI2c_ReadI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, (l_ReadBuffer_ui8), 2)!=0)
    c2c4:	e24b300c 	sub	r3, fp, #12
    c2c8:	e3a00062 	mov	r0, #98	; 0x62
    c2cc:	e1a01003 	mov	r1, r3
    c2d0:	e3a02002 	mov	r2, #2
    c2d4:	eb0000c7 	bl	c5f8 <g_lldI2c_ReadI2c0_bl>
    c2d8:	e1a03000 	mov	r3, r0
    c2dc:	e3530000 	cmp	r3, #0
    c2e0:	0a000001 	beq	c2ec <g_LIDAR_readDistanceFromI2C_i32+0x104>
{
return -1;
    c2e4:	e3e03000 	mvn	r3, #0
    c2e8:	ea000012 	b	c338 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Conversion from int(cm) to double(m)
l_DistInCm_i32 = *l_ReadBuffer_ui8 << 8;
    c2ec:	e55b300c 	ldrb	r3, [fp, #-12]
    c2f0:	e1a03403 	lsl	r3, r3, #8
    c2f4:	e50b3008 	str	r3, [fp, #-8]
l_DistInCm_i32 |= *(l_ReadBuffer_ui8+1);
    c2f8:	e55b300b 	ldrb	r3, [fp, #-11]
    c2fc:	e51b2008 	ldr	r2, [fp, #-8]
    c300:	e1823003 	orr	r3, r2, r3
    c304:	e50b3008 	str	r3, [fp, #-8]
m_distance_f64 = (double)l_DistInCm_i32;
    c308:	e51b3008 	ldr	r3, [fp, #-8]
    c30c:	ee063a90 	vmov	s13, r3
    c310:	eeb87be6 	vcvt.f64.s32	d7, s13
    c314:	e59f3038 	ldr	r3, [pc, #56]	; c354 <g_LIDAR_readDistanceFromI2C_i32+0x16c>
    c318:	ed837b00 	vstr	d7, [r3]
m_distance_f64 = (m_distance_f64/100);
    c31c:	e59f3030 	ldr	r3, [pc, #48]	; c354 <g_LIDAR_readDistanceFromI2C_i32+0x16c>
    c320:	ed936b00 	vldr	d6, [r3]
    c324:	ed9f7b07 	vldr	d7, [pc, #28]	; c348 <g_LIDAR_readDistanceFromI2C_i32+0x160>
    c328:	ee867b07 	vdiv.f64	d7, d6, d7
    c32c:	e59f3020 	ldr	r3, [pc, #32]	; c354 <g_LIDAR_readDistanceFromI2C_i32+0x16c>
    c330:	ed837b00 	vstr	d7, [r3]
//printf("Distance: %d / %.2f\n",l_DistInCm_i32,m_distance_f64);
//usleep(500*1000);


return 0;
    c334:	e3a03000 	mov	r3, #0
}
    c338:	e1a00003 	mov	r0, r3
    c33c:	e24bd004 	sub	sp, fp, #4
    c340:	e8bd8800 	pop	{fp, pc}
    c344:	e1a00000 	nop			; (mov r0, r0)
    c348:	00000000 	.word	0x00000000
    c34c:	40590000 	.word	0x40590000
    c350:	00004e20 	.word	0x00004e20
    c354:	000103e8 	.word	0x000103e8

0000c358 <g_lldI2c_WriteI2c_bl>:
 * 2015/05/06 phwogs00:
 * Changed variable and function names in order to guideline
 * \endinternal
 ***********************************************************************/
unsigned int g_lldI2c_WriteI2c_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_i2cWriteBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    c358:	e92d4800 	push	{fp, lr}
    c35c:	e28db004 	add	fp, sp, #4
    c360:	e24dd018 	sub	sp, sp, #24
    c364:	e1a03000 	mov	r3, r0
    c368:	e50b1014 	str	r1, [fp, #-20]
    c36c:	e50b2018 	str	r2, [fp, #-24]
    c370:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_returnOfWrittenBytes_ui8 	= 0;
    c374:	e3a03000 	mov	r3, #0
    c378:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_WriteRetryCounter_ui8 	= 0;
    c37c:	e3a03000 	mov	r3, #0
    c380:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 				= 0;
    c384:	e3a03000 	mov	r3, #0
    c388:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C_DEV_UI8, O_RDWR);
    c38c:	e59f009c 	ldr	r0, [pc, #156]	; c430 <g_lldI2c_WriteI2c_bl+0xd8>
    c390:	e3a01002 	mov	r1, #2
    c394:	ebfff145 	bl	88b0 <_init+0x20>
    c398:	e1a03000 	mov	r3, r0
    c39c:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    c3a0:	e51b200c 	ldr	r2, [fp, #-12]
    c3a4:	e55b300d 	ldrb	r3, [fp, #-13]
    c3a8:	e1a00002 	mov	r0, r2
    c3ac:	e59f1080 	ldr	r1, [pc, #128]	; c434 <g_lldI2c_WriteI2c_bl+0xdc>
    c3b0:	e1a02003 	mov	r2, r3
    c3b4:	ebfff173 	bl	8988 <_init+0xf8>

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    c3b8:	ea000009 	b	c3e4 <g_lldI2c_WriteI2c_bl+0x8c>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    c3bc:	e51b300c 	ldr	r3, [fp, #-12]
    c3c0:	e1a00003 	mov	r0, r3
    c3c4:	e51b1014 	ldr	r1, [fp, #-20]
    c3c8:	e51b2018 	ldr	r2, [fp, #-24]
    c3cc:	ebfff15b 	bl	8940 <_init+0xb0>
    c3d0:	e1a03000 	mov	r3, r0
    c3d4:	e54b3005 	strb	r3, [fp, #-5]
		l_WriteRetryCounter_ui8++;
    c3d8:	e55b3006 	ldrb	r3, [fp, #-6]
    c3dc:	e2833001 	add	r3, r3, #1
    c3e0:	e54b3006 	strb	r3, [fp, #-6]

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    c3e4:	e55b2005 	ldrb	r2, [fp, #-5]
    c3e8:	e51b3018 	ldr	r3, [fp, #-24]
    c3ec:	e1520003 	cmp	r2, r3
    c3f0:	0a000002 	beq	c400 <g_lldI2c_WriteI2c_bl+0xa8>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    c3f4:	e55b3006 	ldrb	r3, [fp, #-6]
    c3f8:	e3530002 	cmp	r3, #2
    c3fc:	9affffee 	bls	c3bc <g_lldI2c_WriteI2c_bl+0x64>
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_WriteRetryCounter_ui8++;
	}

	if(l_WriteRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    c400:	e55b3006 	ldrb	r3, [fp, #-6]
    c404:	e3530002 	cmp	r3, #2
    c408:	9a000001 	bls	c414 <g_lldI2c_WriteI2c_bl+0xbc>
	{
		return 1;
    c40c:	e3a03001 	mov	r3, #1
    c410:	ea000003 	b	c424 <g_lldI2c_WriteI2c_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    c414:	e51b300c 	ldr	r3, [fp, #-12]
    c418:	e1a00003 	mov	r0, r3
    c41c:	ebfff168 	bl	89c4 <_init+0x134>
	{
		/*ERROR HANDLER*/
		return 1;
	}

	return 0;
    c420:	e3a03000 	mov	r3, #0
}
    c424:	e1a00003 	mov	r0, r3
    c428:	e24bd004 	sub	sp, fp, #4
    c42c:	e8bd8800 	pop	{fp, pc}
    c430:	0000f8f8 	.word	0x0000f8f8
    c434:	00000703 	.word	0x00000703

0000c438 <g_lldI2c_ReadI2c_bl>:
 * Changed variable and function names in order to guideline
 *   *
 * \endinternal
 ***********************************************************************/ 
unsigned int g_lldI2c_ReadI2c_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_lldI2c_i2cReadBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    c438:	e92d4800 	push	{fp, lr}
    c43c:	e28db004 	add	fp, sp, #4
    c440:	e24dd018 	sub	sp, sp, #24
    c444:	e1a03000 	mov	r3, r0
    c448:	e50b1014 	str	r1, [fp, #-20]
    c44c:	e50b2018 	str	r2, [fp, #-24]
    c450:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_ReturnOfReadBytes_ui8 = 0;
    c454:	e3a03000 	mov	r3, #0
    c458:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_ReadRetryCounter_ui8 	= 0;
    c45c:	e3a03000 	mov	r3, #0
    c460:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 			= 0;
    c464:	e3a03000 	mov	r3, #0
    c468:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C_DEV_UI8, O_RDWR);   //Open I2C device
    c46c:	e59f009c 	ldr	r0, [pc, #156]	; c510 <g_lldI2c_ReadI2c_bl+0xd8>
    c470:	e3a01002 	mov	r1, #2
    c474:	ebfff10d 	bl	88b0 <_init+0x20>
    c478:	e1a03000 	mov	r3, r0
    c47c:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    c480:	e51b200c 	ldr	r2, [fp, #-12]
    c484:	e55b300d 	ldrb	r3, [fp, #-13]
    c488:	e1a00002 	mov	r0, r2
    c48c:	e59f1080 	ldr	r1, [pc, #128]	; c514 <g_lldI2c_ReadI2c_bl+0xdc>
    c490:	e1a02003 	mov	r2, r3
    c494:	ebfff13b 	bl	8988 <_init+0xf8>

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    c498:	ea000009 	b	c4c4 <g_lldI2c_ReadI2c_bl+0x8c>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    c49c:	e51b300c 	ldr	r3, [fp, #-12]
    c4a0:	e1a00003 	mov	r0, r3
    c4a4:	e51b1014 	ldr	r1, [fp, #-20]
    c4a8:	e51b2018 	ldr	r2, [fp, #-24]
    c4ac:	ebfff120 	bl	8934 <_init+0xa4>
    c4b0:	e1a03000 	mov	r3, r0
    c4b4:	e54b3005 	strb	r3, [fp, #-5]
		l_ReadRetryCounter_ui8++;
    c4b8:	e55b3006 	ldrb	r3, [fp, #-6]
    c4bc:	e2833001 	add	r3, r3, #1
    c4c0:	e54b3006 	strb	r3, [fp, #-6]
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    c4c4:	e55b2005 	ldrb	r2, [fp, #-5]
    c4c8:	e51b3018 	ldr	r3, [fp, #-24]
    c4cc:	e1520003 	cmp	r2, r3
    c4d0:	0a000002 	beq	c4e0 <g_lldI2c_ReadI2c_bl+0xa8>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    c4d4:	e55b3006 	ldrb	r3, [fp, #-6]
    c4d8:	e3530002 	cmp	r3, #2
    c4dc:	9affffee 	bls	c49c <g_lldI2c_ReadI2c_bl+0x64>
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_ReadRetryCounter_ui8++;
	}

	if(l_ReadRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    c4e0:	e55b3006 	ldrb	r3, [fp, #-6]
    c4e4:	e3530002 	cmp	r3, #2
    c4e8:	9a000001 	bls	c4f4 <g_lldI2c_ReadI2c_bl+0xbc>
	{
		return 1;
    c4ec:	e3a03001 	mov	r3, #1
    c4f0:	ea000003 	b	c504 <g_lldI2c_ReadI2c_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    c4f4:	e51b300c 	ldr	r3, [fp, #-12]
    c4f8:	e1a00003 	mov	r0, r3
    c4fc:	ebfff130 	bl	89c4 <_init+0x134>
	if(l_i2cFile_ui32 < 0)
	{
		/*ERROR HANDLER*/
		return 1;
	}
	return(0);
    c500:	e3a03000 	mov	r3, #0

}
    c504:	e1a00003 	mov	r0, r3
    c508:	e24bd004 	sub	sp, fp, #4
    c50c:	e8bd8800 	pop	{fp, pc}
    c510:	0000f8f8 	.word	0x0000f8f8
    c514:	00000703 	.word	0x00000703

0000c518 <g_lldI2c_WriteI2c0_bl>:
 *
 * 
 * \endinternal
 ***********************************************************************/
unsigned int g_lldI2c_WriteI2c0_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_i2cWriteBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    c518:	e92d4800 	push	{fp, lr}
    c51c:	e28db004 	add	fp, sp, #4
    c520:	e24dd018 	sub	sp, sp, #24
    c524:	e1a03000 	mov	r3, r0
    c528:	e50b1014 	str	r1, [fp, #-20]
    c52c:	e50b2018 	str	r2, [fp, #-24]
    c530:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_returnOfWrittenBytes_ui8 	= 0;
    c534:	e3a03000 	mov	r3, #0
    c538:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_WriteRetryCounter_ui8 	= 0;
    c53c:	e3a03000 	mov	r3, #0
    c540:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 				= 0;
    c544:	e3a03000 	mov	r3, #0
    c548:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C0_DEV_UI8, O_RDWR);
    c54c:	e59f009c 	ldr	r0, [pc, #156]	; c5f0 <g_lldI2c_WriteI2c0_bl+0xd8>
    c550:	e3a01002 	mov	r1, #2
    c554:	ebfff0d5 	bl	88b0 <_init+0x20>
    c558:	e1a03000 	mov	r3, r0
    c55c:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    c560:	e51b200c 	ldr	r2, [fp, #-12]
    c564:	e55b300d 	ldrb	r3, [fp, #-13]
    c568:	e1a00002 	mov	r0, r2
    c56c:	e59f1080 	ldr	r1, [pc, #128]	; c5f4 <g_lldI2c_WriteI2c0_bl+0xdc>
    c570:	e1a02003 	mov	r2, r3
    c574:	ebfff103 	bl	8988 <_init+0xf8>

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    c578:	ea000009 	b	c5a4 <g_lldI2c_WriteI2c0_bl+0x8c>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    c57c:	e51b300c 	ldr	r3, [fp, #-12]
    c580:	e1a00003 	mov	r0, r3
    c584:	e51b1014 	ldr	r1, [fp, #-20]
    c588:	e51b2018 	ldr	r2, [fp, #-24]
    c58c:	ebfff0eb 	bl	8940 <_init+0xb0>
    c590:	e1a03000 	mov	r3, r0
    c594:	e54b3005 	strb	r3, [fp, #-5]
		l_WriteRetryCounter_ui8++;
    c598:	e55b3006 	ldrb	r3, [fp, #-6]
    c59c:	e2833001 	add	r3, r3, #1
    c5a0:	e54b3006 	strb	r3, [fp, #-6]

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    c5a4:	e55b2005 	ldrb	r2, [fp, #-5]
    c5a8:	e51b3018 	ldr	r3, [fp, #-24]
    c5ac:	e1520003 	cmp	r2, r3
    c5b0:	0a000002 	beq	c5c0 <g_lldI2c_WriteI2c0_bl+0xa8>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    c5b4:	e55b3006 	ldrb	r3, [fp, #-6]
    c5b8:	e3530002 	cmp	r3, #2
    c5bc:	9affffee 	bls	c57c <g_lldI2c_WriteI2c0_bl+0x64>
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_WriteRetryCounter_ui8++;
	}

	if(l_WriteRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    c5c0:	e55b3006 	ldrb	r3, [fp, #-6]
    c5c4:	e3530002 	cmp	r3, #2
    c5c8:	9a000001 	bls	c5d4 <g_lldI2c_WriteI2c0_bl+0xbc>
	{
		return 1;
    c5cc:	e3a03001 	mov	r3, #1
    c5d0:	ea000003 	b	c5e4 <g_lldI2c_WriteI2c0_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    c5d4:	e51b300c 	ldr	r3, [fp, #-12]
    c5d8:	e1a00003 	mov	r0, r3
    c5dc:	ebfff0f8 	bl	89c4 <_init+0x134>
	{
		/*ERROR HANDLER*/
		return 1;
	}

	return 0;
    c5e0:	e3a03000 	mov	r3, #0
}
    c5e4:	e1a00003 	mov	r0, r3
    c5e8:	e24bd004 	sub	sp, fp, #4
    c5ec:	e8bd8800 	pop	{fp, pc}
    c5f0:	0000f904 	.word	0x0000f904
    c5f4:	00000703 	.word	0x00000703

0000c5f8 <g_lldI2c_ReadI2c0_bl>:
 * 
 * 
 *  * \endinternal
 ***********************************************************************/ 
unsigned int g_lldI2c_ReadI2c0_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_lldI2c_i2cReadBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    c5f8:	e92d4800 	push	{fp, lr}
    c5fc:	e28db004 	add	fp, sp, #4
    c600:	e24dd018 	sub	sp, sp, #24
    c604:	e1a03000 	mov	r3, r0
    c608:	e50b1014 	str	r1, [fp, #-20]
    c60c:	e50b2018 	str	r2, [fp, #-24]
    c610:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_ReturnOfReadBytes_ui8 = 0;
    c614:	e3a03000 	mov	r3, #0
    c618:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_ReadRetryCounter_ui8 	= 0;
    c61c:	e3a03000 	mov	r3, #0
    c620:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 			= 0;
    c624:	e3a03000 	mov	r3, #0
    c628:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C0_DEV_UI8, O_RDWR);   //Open I2C device
    c62c:	e59f009c 	ldr	r0, [pc, #156]	; c6d0 <g_lldI2c_ReadI2c0_bl+0xd8>
    c630:	e3a01002 	mov	r1, #2
    c634:	ebfff09d 	bl	88b0 <_init+0x20>
    c638:	e1a03000 	mov	r3, r0
    c63c:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    c640:	e51b200c 	ldr	r2, [fp, #-12]
    c644:	e55b300d 	ldrb	r3, [fp, #-13]
    c648:	e1a00002 	mov	r0, r2
    c64c:	e59f1080 	ldr	r1, [pc, #128]	; c6d4 <g_lldI2c_ReadI2c0_bl+0xdc>
    c650:	e1a02003 	mov	r2, r3
    c654:	ebfff0cb 	bl	8988 <_init+0xf8>

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    c658:	ea000009 	b	c684 <g_lldI2c_ReadI2c0_bl+0x8c>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    c65c:	e51b300c 	ldr	r3, [fp, #-12]
    c660:	e1a00003 	mov	r0, r3
    c664:	e51b1014 	ldr	r1, [fp, #-20]
    c668:	e51b2018 	ldr	r2, [fp, #-24]
    c66c:	ebfff0b0 	bl	8934 <_init+0xa4>
    c670:	e1a03000 	mov	r3, r0
    c674:	e54b3005 	strb	r3, [fp, #-5]
		l_ReadRetryCounter_ui8++;
    c678:	e55b3006 	ldrb	r3, [fp, #-6]
    c67c:	e2833001 	add	r3, r3, #1
    c680:	e54b3006 	strb	r3, [fp, #-6]
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    c684:	e55b2005 	ldrb	r2, [fp, #-5]
    c688:	e51b3018 	ldr	r3, [fp, #-24]
    c68c:	e1520003 	cmp	r2, r3
    c690:	0a000002 	beq	c6a0 <g_lldI2c_ReadI2c0_bl+0xa8>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    c694:	e55b3006 	ldrb	r3, [fp, #-6]
    c698:	e3530002 	cmp	r3, #2
    c69c:	9affffee 	bls	c65c <g_lldI2c_ReadI2c0_bl+0x64>
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_ReadRetryCounter_ui8++;
	}

	if(l_ReadRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    c6a0:	e55b3006 	ldrb	r3, [fp, #-6]
    c6a4:	e3530002 	cmp	r3, #2
    c6a8:	9a000001 	bls	c6b4 <g_lldI2c_ReadI2c0_bl+0xbc>
	{
		return 1;
    c6ac:	e3a03001 	mov	r3, #1
    c6b0:	ea000003 	b	c6c4 <g_lldI2c_ReadI2c0_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    c6b4:	e51b300c 	ldr	r3, [fp, #-12]
    c6b8:	e1a00003 	mov	r0, r3
    c6bc:	ebfff0c0 	bl	89c4 <_init+0x134>
	if(l_i2cFile_ui32 < 0)
	{
		/*ERROR HANDLER*/
		return 1;
	}
	return(0);
    c6c0:	e3a03000 	mov	r3, #0

}
    c6c4:	e1a00003 	mov	r0, r3
    c6c8:	e24bd004 	sub	sp, fp, #4
    c6cc:	e8bd8800 	pop	{fp, pc}
    c6d0:	0000f904 	.word	0x0000f904
    c6d4:	00000703 	.word	0x00000703

0000c6d8 <g_lldUart_uartOpen_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_lldUart_uartOpen_i32(void)
{
    c6d8:	e92d4800 	push	{fp, lr}
    c6dc:	e28db004 	add	fp, sp, #4
    c6e0:	e24dd040 	sub	sp, sp, #64	; 0x40
	l_filestream_i32 = open("/dev/ttyAMA0", O_RDWR | O_NOCTTY | O_NDELAY);
    c6e4:	e59f00a8 	ldr	r0, [pc, #168]	; c794 <g_lldUart_uartOpen_i32+0xbc>
    c6e8:	e59f10a8 	ldr	r1, [pc, #168]	; c798 <g_lldUart_uartOpen_i32+0xc0>
    c6ec:	ebfff06f 	bl	88b0 <_init+0x20>
    c6f0:	e1a02000 	mov	r2, r0
    c6f4:	e59f30a0 	ldr	r3, [pc, #160]	; c79c <g_lldUart_uartOpen_i32+0xc4>
    c6f8:	e5832000 	str	r2, [r3]
	if (l_filestream_i32 == -1)
    c6fc:	e59f3098 	ldr	r3, [pc, #152]	; c79c <g_lldUart_uartOpen_i32+0xc4>
    c700:	e5933000 	ldr	r3, [r3]
    c704:	e3730001 	cmn	r3, #1
    c708:	1a000001 	bne	c714 <g_lldUart_uartOpen_i32+0x3c>
	{
		//Error UART can not be opened
		return(-1);
    c70c:	e3e03000 	mvn	r3, #0
    c710:	ea00001c 	b	c788 <g_lldUart_uartOpen_i32+0xb0>
	}
	struct termios l_options_st;
	tcgetattr(l_filestream_i32, &l_options_st);
    c714:	e59f3080 	ldr	r3, [pc, #128]	; c79c <g_lldUart_uartOpen_i32+0xc4>
    c718:	e5932000 	ldr	r2, [r3]
    c71c:	e24b3040 	sub	r3, fp, #64	; 0x40
    c720:	e1a00002 	mov	r0, r2
    c724:	e1a01003 	mov	r1, r3
    c728:	ebfff08d 	bl	8964 <_init+0xd4>
	l_options_st.c_cflag = B9600 | CS8 | CLOCAL | CREAD;
    c72c:	e59f306c 	ldr	r3, [pc, #108]	; c7a0 <g_lldUart_uartOpen_i32+0xc8>
    c730:	e50b3038 	str	r3, [fp, #-56]	; 0x38
	l_options_st.c_iflag = IGNPAR;
    c734:	e3a03004 	mov	r3, #4
    c738:	e50b3040 	str	r3, [fp, #-64]	; 0x40
	l_options_st.c_oflag = 0;
    c73c:	e3a03000 	mov	r3, #0
    c740:	e50b303c 	str	r3, [fp, #-60]	; 0x3c
	l_options_st.c_lflag = 0;
    c744:	e3a03000 	mov	r3, #0
    c748:	e50b3034 	str	r3, [fp, #-52]	; 0x34
	tcflush(l_filestream_i32, TCIFLUSH);
    c74c:	e59f3048 	ldr	r3, [pc, #72]	; c79c <g_lldUart_uartOpen_i32+0xc4>
    c750:	e5933000 	ldr	r3, [r3]
    c754:	e1a00003 	mov	r0, r3
    c758:	e3a01000 	mov	r1, #0
    c75c:	ebfff083 	bl	8970 <_init+0xe0>
	tcsetattr(l_filestream_i32, TCSANOW, &l_options_st);
    c760:	e59f3034 	ldr	r3, [pc, #52]	; c79c <g_lldUart_uartOpen_i32+0xc4>
    c764:	e5932000 	ldr	r2, [r3]
    c768:	e24b3040 	sub	r3, fp, #64	; 0x40
    c76c:	e1a00002 	mov	r0, r2
    c770:	e3a01000 	mov	r1, #0
    c774:	e1a02003 	mov	r2, r3
    c778:	ebfff0a3 	bl	8a0c <_init+0x17c>
	sleep(3);
    c77c:	e3a00003 	mov	r0, #3
    c780:	ebfff095 	bl	89dc <_init+0x14c>
	return(0);
    c784:	e3a03000 	mov	r3, #0
}
    c788:	e1a00003 	mov	r0, r3
    c78c:	e24bd004 	sub	sp, fp, #4
    c790:	e8bd8800 	pop	{fp, pc}
    c794:	0000f910 	.word	0x0000f910
    c798:	00000902 	.word	0x00000902
    c79c:	00010250 	.word	0x00010250
    c7a0:	000008bd 	.word	0x000008bd

0000c7a4 <g_lldUart_readByte_ch>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
char g_lldUart_readByte_ch(void)
{
    c7a4:	e92d4800 	push	{fp, lr}
    c7a8:	e28db004 	add	fp, sp, #4
    c7ac:	e24dd008 	sub	sp, sp, #8
	char l_recChar_ch='0';
    c7b0:	e3a03030 	mov	r3, #48	; 0x30
    c7b4:	e54b3009 	strb	r3, [fp, #-9]
	ssize_t l_nrReadBytes_ssize=0;
    c7b8:	e3a03000 	mov	r3, #0
    c7bc:	e50b3008 	str	r3, [fp, #-8]

	if (l_filestream_i32 == -1)
    c7c0:	e59f3064 	ldr	r3, [pc, #100]	; c82c <g_lldUart_readByte_ch+0x88>
    c7c4:	e5933000 	ldr	r3, [r3]
    c7c8:	e3730001 	cmn	r3, #1
    c7cc:	1a000000 	bne	c7d4 <g_lldUart_readByte_ch+0x30>
	{
		g_lldUart_uartOpen_i32();
    c7d0:	ebffffc0 	bl	c6d8 <g_lldUart_uartOpen_i32>
	}

	//read new values if l_filestream_i32 is opened
	if (l_filestream_i32 != -1)
    c7d4:	e59f3050 	ldr	r3, [pc, #80]	; c82c <g_lldUart_readByte_ch+0x88>
    c7d8:	e5933000 	ldr	r3, [r3]
    c7dc:	e3730001 	cmn	r3, #1
    c7e0:	0a00000d 	beq	c81c <g_lldUart_readByte_ch+0x78>
	{
		while (l_nrReadBytes_ssize!=1)
    c7e4:	ea000007 	b	c808 <g_lldUart_readByte_ch+0x64>
		{ l_nrReadBytes_ssize=read(l_filestream_i32, &l_recChar_ch, 1);}
    c7e8:	e59f303c 	ldr	r3, [pc, #60]	; c82c <g_lldUart_readByte_ch+0x88>
    c7ec:	e5932000 	ldr	r2, [r3]
    c7f0:	e24b3009 	sub	r3, fp, #9
    c7f4:	e1a00002 	mov	r0, r2
    c7f8:	e1a01003 	mov	r1, r3
    c7fc:	e3a02001 	mov	r2, #1
    c800:	ebfff04b 	bl	8934 <_init+0xa4>
    c804:	e50b0008 	str	r0, [fp, #-8]
	}

	//read new values if l_filestream_i32 is opened
	if (l_filestream_i32 != -1)
	{
		while (l_nrReadBytes_ssize!=1)
    c808:	e51b3008 	ldr	r3, [fp, #-8]
    c80c:	e3530001 	cmp	r3, #1
    c810:	1afffff4 	bne	c7e8 <g_lldUart_readByte_ch+0x44>
		{ l_nrReadBytes_ssize=read(l_filestream_i32, &l_recChar_ch, 1);}
		return l_recChar_ch;
    c814:	e55b3009 	ldrb	r3, [fp, #-9]
    c818:	ea000000 	b	c820 <g_lldUart_readByte_ch+0x7c>
	}
	return(-1);
    c81c:	e3a030ff 	mov	r3, #255	; 0xff
}
    c820:	e1a00003 	mov	r0, r3
    c824:	e24bd004 	sub	sp, fp, #4
    c828:	e8bd8800 	pop	{fp, pc}
    c82c:	00010250 	.word	0x00010250

0000c830 <g_lldUart_uartClose_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_lldUart_uartClose_i32(void)
{
    c830:	e92d4800 	push	{fp, lr}
    c834:	e28db004 	add	fp, sp, #4
	close(l_filestream_i32);
    c838:	e59f3014 	ldr	r3, [pc, #20]	; c854 <g_lldUart_uartClose_i32+0x24>
    c83c:	e5933000 	ldr	r3, [r3]
    c840:	e1a00003 	mov	r0, r3
    c844:	ebfff05e 	bl	89c4 <_init+0x134>
	return(0);
    c848:	e3a03000 	mov	r3, #0
}
    c84c:	e1a00003 	mov	r0, r3
    c850:	e8bd8800 	pop	{fp, pc}
    c854:	00010250 	.word	0x00010250

0000c858 <g_halMatlab_sendImuState_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_sendImuState_bl(	int f_socketHandler_i32,
											halImu_orientationValues f_imuState_st) {
    c858:	e24dd008 	sub	sp, sp, #8
    c85c:	e92d4800 	push	{fp, lr}
    c860:	e28db004 	add	fp, sp, #4
    c864:	e24dd070 	sub	sp, sp, #112	; 0x70
    c868:	e50b0070 	str	r0, [fp, #-112]	; 0x70
    c86c:	e28b1004 	add	r1, fp, #4
    c870:	e881000c 	stm	r1, {r2, r3}
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    c874:	e24b306c 	sub	r3, fp, #108	; 0x6c
    c878:	e3a00000 	mov	r0, #0
    c87c:	e1a01003 	mov	r1, r3
    c880:	ebfff010 	bl	88c8 <_init+0x38>
    c884:	e1a03000 	mov	r3, r0
    c888:	e3530000 	cmp	r3, #0
    c88c:	0a000001 	beq	c898 <g_halMatlab_sendImuState_bl+0x40>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    c890:	e3a03001 	mov	r3, #1
    c894:	ea000010 	b	c8dc <g_halMatlab_sendImuState_bl+0x84>
	}

	//assmeble timestamp and
	l_rtImuPayload_st.timestamp_st 	= l_timestamp_st;
    c898:	e24b3064 	sub	r3, fp, #100	; 0x64
    c89c:	e24b206c 	sub	r2, fp, #108	; 0x6c
    c8a0:	e8920003 	ldm	r2, {r0, r1}
    c8a4:	e8830003 	stm	r3, {r0, r1}
	l_rtImuPayload_st.imuState_st	= f_imuState_st;
    c8a8:	e24b105c 	sub	r1, fp, #92	; 0x5c
    c8ac:	e28b2004 	add	r2, fp, #4
    c8b0:	e3a03058 	mov	r3, #88	; 0x58
    c8b4:	e1a00001 	mov	r0, r1
    c8b8:	e1a01002 	mov	r1, r2
    c8bc:	e1a02003 	mov	r2, r3
    c8c0:	ebfff036 	bl	89a0 <_init+0x110>

	return g_halMatlab_sendPacket_bl( 	f_socketHandler_i32,
    c8c4:	e24b3064 	sub	r3, fp, #100	; 0x64
    c8c8:	e51b0070 	ldr	r0, [fp, #-112]	; 0x70
    c8cc:	e1a01003 	mov	r1, r3
    c8d0:	e3a02060 	mov	r2, #96	; 0x60
    c8d4:	eb000135 	bl	cdb0 <g_halMatlab_sendPacket_bl>
    c8d8:	e1a03000 	mov	r3, r0
										(unsigned char*)&l_rtImuPayload_st,
										sizeof( l_rtImuPayload_st ) );
}
    c8dc:	e1a00003 	mov	r0, r3
    c8e0:	e24bd004 	sub	sp, fp, #4
    c8e4:	e8bd4800 	pop	{fp, lr}
    c8e8:	e28dd008 	add	sp, sp, #8
    c8ec:	e12fff1e 	bx	lr

0000c8f0 <g_halMatlab_recvImuState_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halMatlab_rtImuPayload g_halMatlab_recvImuState_bl(int f_socketHandler_i32) {
    c8f0:	e92d4800 	push	{fp, lr}
    c8f4:	e28db004 	add	fp, sp, #4
    c8f8:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
    c8fc:	e50b00d0 	str	r0, [fp, #-208]	; 0xd0
    c900:	e50b10d4 	str	r1, [fp, #-212]	; 0xd4
	halMatlab_rtImuPayload 		l_recvImuState_st;
	unsigned char				l_recvBuffer_rgXui8[ sizeof(halMatlab_rtImuPayload) ];
	unsigned int				l_recvBytesNumber_ui32;

	// zero all values
	l_recvImuState_st.timestamp_st.tv_sec 	= 0;
    c904:	e3a03000 	mov	r3, #0
    c908:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
	l_recvImuState_st.timestamp_st.tv_nsec 	= 0;
    c90c:	e3a03000 	mov	r3, #0
    c910:	e50b3068 	str	r3, [fp, #-104]	; 0x68

	l_recvImuState_st.imuState_st.acc.x_f64 = 0;
    c914:	e3a02000 	mov	r2, #0
    c918:	e3a03000 	mov	r3, #0
    c91c:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
	l_recvImuState_st.imuState_st.acc.y_f64 = 0;
    c920:	e3a02000 	mov	r2, #0
    c924:	e3a03000 	mov	r3, #0
    c928:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	l_recvImuState_st.imuState_st.acc.z_f64 = 0;
    c92c:	e3a02000 	mov	r2, #0
    c930:	e3a03000 	mov	r3, #0
    c934:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac

	l_recvImuState_st.imuState_st.gyro.l_pitch_f64 = 0;
    c938:	e3a02000 	mov	r2, #0
    c93c:	e3a03000 	mov	r3, #0
    c940:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
	l_recvImuState_st.imuState_st.gyro.l_roll_f64 = 0;
    c944:	e3a02000 	mov	r2, #0
    c948:	e3a03000 	mov	r3, #0
    c94c:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	l_recvImuState_st.imuState_st.gyro.l_yaw_f64 = 0;
    c950:	e3a02000 	mov	r2, #0
    c954:	e3a03000 	mov	r3, #0
    c958:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc

	l_recvImuState_st.imuState_st.mag.x_f64 = 0;
    c95c:	e3a02000 	mov	r2, #0
    c960:	e3a03000 	mov	r3, #0
    c964:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
	l_recvImuState_st.imuState_st.mag.y_f64 = 0;
    c968:	e3a02000 	mov	r2, #0
    c96c:	e3a03000 	mov	r3, #0
    c970:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	l_recvImuState_st.imuState_st.mag.z_f64 = 0;
    c974:	e3a02000 	mov	r2, #0
    c978:	e3a03000 	mov	r3, #0
    c97c:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4

	l_recvImuState_st.imuState_st.pressure_f64 = 0;
    c980:	e3a02000 	mov	r2, #0
    c984:	e3a03000 	mov	r3, #0
    c988:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	l_recvImuState_st.imuState_st.temperature_f64 = 0;
    c98c:	e3a02000 	mov	r2, #0
    c990:	e3a03000 	mov	r3, #0
    c994:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    c998:	e24b30cc 	sub	r3, fp, #204	; 0xcc
    c99c:	e51b00d4 	ldr	r0, [fp, #-212]	; 0xd4
    c9a0:	e1a01003 	mov	r1, r3
    c9a4:	e3a02060 	mov	r2, #96	; 0x60
    c9a8:	eb00015f 	bl	cf2c <g_halMatlab_recvPacket_ui32>
    c9ac:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halMatlab_rtImuPayload) );

	if ( l_recvBytesNumber_ui32 == sizeof(halMatlab_rtImuPayload) )
    c9b0:	e51b3008 	ldr	r3, [fp, #-8]
    c9b4:	e3530060 	cmp	r3, #96	; 0x60
    c9b8:	1a000005 	bne	c9d4 <g_halMatlab_recvImuState_bl+0xe4>
	{
		memcpy( &l_recvImuState_st, &l_recvBuffer_rgXui8, sizeof(halMatlab_rtImuPayload));
    c9bc:	e24b206c 	sub	r2, fp, #108	; 0x6c
    c9c0:	e24b30cc 	sub	r3, fp, #204	; 0xcc
    c9c4:	e1a00002 	mov	r0, r2
    c9c8:	e1a01003 	mov	r1, r3
    c9cc:	e3a02060 	mov	r2, #96	; 0x60
    c9d0:	ebffeff2 	bl	89a0 <_init+0x110>
	}

	return l_recvImuState_st;
    c9d4:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xd0
    c9d8:	e1a01003 	mov	r1, r3
    c9dc:	e24b206c 	sub	r2, fp, #108	; 0x6c
    c9e0:	e3a03060 	mov	r3, #96	; 0x60
    c9e4:	e1a00001 	mov	r0, r1
    c9e8:	e1a01002 	mov	r1, r2
    c9ec:	e1a02003 	mov	r2, r3
    c9f0:	ebffefea 	bl	89a0 <_init+0x110>
}
    c9f4:	e51b00d0 	ldr	r0, [fp, #-208]	; 0xd0
    c9f8:	e24bd004 	sub	sp, fp, #4
    c9fc:	e8bd8800 	pop	{fp, pc}

0000ca00 <l_findFreeSocketSlot_i16>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static signed short l_findFreeSocketSlot_i16(void)
{
    ca00:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    ca04:	e28db000 	add	fp, sp, #0
    ca08:	e24dd00c 	sub	sp, sp, #12
	signed short l_socketIndex_i16 = 0;
    ca0c:	e3a03000 	mov	r3, #0
    ca10:	e14b30b6 	strh	r3, [fp, #-6]

	// find empty slot in socket library
	while( 		(m_socketManagementBuffer_rg8st[l_socketIndex_i16].socketHandler_i32 > 0)
    ca14:	ea000002 	b	ca24 <l_findFreeSocketSlot_i16+0x24>
			&& 	(l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8) )
	{
		l_socketIndex_i16++;
    ca18:	e15b30b6 	ldrh	r3, [fp, #-6]
    ca1c:	e2833001 	add	r3, r3, #1
    ca20:	e14b30b6 	strh	r3, [fp, #-6]
static signed short l_findFreeSocketSlot_i16(void)
{
	signed short l_socketIndex_i16 = 0;

	// find empty slot in socket library
	while( 		(m_socketManagementBuffer_rg8st[l_socketIndex_i16].socketHandler_i32 > 0)
    ca24:	e15b20f6 	ldrsh	r2, [fp, #-6]
    ca28:	e59f005c 	ldr	r0, [pc, #92]	; ca8c <l_findFreeSocketSlot_i16+0x8c>
    ca2c:	e3a01020 	mov	r1, #32
    ca30:	e1a03002 	mov	r3, r2
    ca34:	e1a03183 	lsl	r3, r3, #3
    ca38:	e0833002 	add	r3, r3, r2
    ca3c:	e1a03103 	lsl	r3, r3, #2
    ca40:	e0803003 	add	r3, r0, r3
    ca44:	e0833001 	add	r3, r3, r1
    ca48:	e5933000 	ldr	r3, [r3]
    ca4c:	e3530000 	cmp	r3, #0
    ca50:	da000002 	ble	ca60 <l_findFreeSocketSlot_i16+0x60>
			&& 	(l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8) )
    ca54:	e15b30f6 	ldrsh	r3, [fp, #-6]
    ca58:	e3530007 	cmp	r3, #7
    ca5c:	daffffed 	ble	ca18 <l_findFreeSocketSlot_i16+0x18>
	{
		l_socketIndex_i16++;
	}

	// if all slots are occupied, do not open a new one
	if (l_socketIndex_i16 >= M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8)
    ca60:	e15b30f6 	ldrsh	r3, [fp, #-6]
    ca64:	e3530007 	cmp	r3, #7
    ca68:	da000001 	ble	ca74 <l_findFreeSocketSlot_i16+0x74>
	{
		return M_HAL_MATLAB_ERROR_I8;
    ca6c:	e59f301c 	ldr	r3, [pc, #28]	; ca90 <l_findFreeSocketSlot_i16+0x90>
    ca70:	ea000000 	b	ca78 <l_findFreeSocketSlot_i16+0x78>
	}

	return l_socketIndex_i16;
    ca74:	e15b30b6 	ldrh	r3, [fp, #-6]
    ca78:	e6bf3073 	sxth	r3, r3
}
    ca7c:	e1a00003 	mov	r0, r3
    ca80:	e24bd000 	sub	sp, fp, #0
    ca84:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    ca88:	e12fff1e 	bx	lr
    ca8c:	000103f0 	.word	0x000103f0
    ca90:	0000ffff 	.word	0x0000ffff

0000ca94 <l_findSocket_i16>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static signed short l_findSocket_i16(signed int f_socketHandler_i32)
{
    ca94:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    ca98:	e28db000 	add	fp, sp, #0
    ca9c:	e24dd014 	sub	sp, sp, #20
    caa0:	e50b0010 	str	r0, [fp, #-16]
	signed short l_socketIndex_i16 = 0;
    caa4:	e3a03000 	mov	r3, #0
    caa8:	e14b30b6 	strh	r3, [fp, #-6]

	if (f_socketHandler_i32 <= 0 )
    caac:	e51b3010 	ldr	r3, [fp, #-16]
    cab0:	e3530000 	cmp	r3, #0
    cab4:	ca000001 	bgt	cac0 <l_findSocket_i16+0x2c>
	{
		return M_HAL_MATLAB_ERROR_I8;
    cab8:	e59f3088 	ldr	r3, [pc, #136]	; cb48 <l_findSocket_i16+0xb4>
    cabc:	ea00001c 	b	cb34 <l_findSocket_i16+0xa0>
	}

	// find socket handler
	for( l_socketIndex_i16=0; l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8; l_socketIndex_i16++ )
    cac0:	e3a03000 	mov	r3, #0
    cac4:	e14b30b6 	strh	r3, [fp, #-6]
    cac8:	ea000010 	b	cb10 <l_findSocket_i16+0x7c>
	{
		if ( m_socketManagementBuffer_rg8st[l_socketIndex_i16].socketHandler_i32 == f_socketHandler_i32 )
    cacc:	e15b20f6 	ldrsh	r2, [fp, #-6]
    cad0:	e59f0074 	ldr	r0, [pc, #116]	; cb4c <l_findSocket_i16+0xb8>
    cad4:	e3a01020 	mov	r1, #32
    cad8:	e1a03002 	mov	r3, r2
    cadc:	e1a03183 	lsl	r3, r3, #3
    cae0:	e0833002 	add	r3, r3, r2
    cae4:	e1a03103 	lsl	r3, r3, #2
    cae8:	e0803003 	add	r3, r0, r3
    caec:	e0833001 	add	r3, r3, r1
    caf0:	e5932000 	ldr	r2, [r3]
    caf4:	e51b3010 	ldr	r3, [fp, #-16]
    caf8:	e1520003 	cmp	r2, r3
    cafc:	1a000000 	bne	cb04 <l_findSocket_i16+0x70>
		{
			break;
    cb00:	ea000005 	b	cb1c <l_findSocket_i16+0x88>
	{
		return M_HAL_MATLAB_ERROR_I8;
	}

	// find socket handler
	for( l_socketIndex_i16=0; l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8; l_socketIndex_i16++ )
    cb04:	e15b30b6 	ldrh	r3, [fp, #-6]
    cb08:	e2833001 	add	r3, r3, #1
    cb0c:	e14b30b6 	strh	r3, [fp, #-6]
    cb10:	e15b30f6 	ldrsh	r3, [fp, #-6]
    cb14:	e3530007 	cmp	r3, #7
    cb18:	daffffeb 	ble	cacc <l_findSocket_i16+0x38>
			break;
		}
	}

	// if all slots are occupied, do not open a new one
	if (l_socketIndex_i16 >= M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8)
    cb1c:	e15b30f6 	ldrsh	r3, [fp, #-6]
    cb20:	e3530007 	cmp	r3, #7
    cb24:	da000001 	ble	cb30 <l_findSocket_i16+0x9c>
	{
		return M_HAL_MATLAB_ERROR_I8;
    cb28:	e59f3018 	ldr	r3, [pc, #24]	; cb48 <l_findSocket_i16+0xb4>
    cb2c:	ea000000 	b	cb34 <l_findSocket_i16+0xa0>
	}

	return l_socketIndex_i16;
    cb30:	e15b30b6 	ldrh	r3, [fp, #-6]
    cb34:	e6bf3073 	sxth	r3, r3
}
    cb38:	e1a00003 	mov	r0, r3
    cb3c:	e24bd000 	sub	sp, fp, #0
    cb40:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    cb44:	e12fff1e 	bx	lr
    cb48:	0000ffff 	.word	0x0000ffff
    cb4c:	000103f0 	.word	0x000103f0

0000cb50 <g_halMatlab_initSocket_i32>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
int g_halMatlab_initSocket_i32(	unsigned short f_udpListenPort_ui16 )
{
    cb50:	e92d4800 	push	{fp, lr}
    cb54:	e28db004 	add	fp, sp, #4
    cb58:	e24dd010 	sub	sp, sp, #16
    cb5c:	e1a03000 	mov	r3, r0
    cb60:	e14b30be 	strh	r3, [fp, #-14]
	signed short 			l_socketSlotCtr_i16 = 0;
    cb64:	e3a03000 	mov	r3, #0
    cb68:	e14b30b6 	strh	r3, [fp, #-6]
	halMatlab_socketData* 	l_freeSocketSlot_pst;
#ifdef _WIN32
    WSADATA wsa;
#endif
    
	if ( (l_socketSlotCtr_i16 = l_findFreeSocketSlot_i16()) < 0)
    cb6c:	ebffffa3 	bl	ca00 <l_findFreeSocketSlot_i16>
    cb70:	e1a03000 	mov	r3, r0
    cb74:	e14b30b6 	strh	r3, [fp, #-6]
    cb78:	e15b30f6 	ldrsh	r3, [fp, #-6]
    cb7c:	e3530000 	cmp	r3, #0
    cb80:	aa000001 	bge	cb8c <g_halMatlab_initSocket_i32+0x3c>
	{
		return M_HAL_MATLAB_ERROR_I8;
    cb84:	e3e03000 	mvn	r3, #0
    cb88:	ea00003c 	b	cc80 <g_halMatlab_initSocket_i32+0x130>
	}


	l_freeSocketSlot_pst = &m_socketManagementBuffer_rg8st[l_socketSlotCtr_i16];
    cb8c:	e15b20f6 	ldrsh	r2, [fp, #-6]
    cb90:	e1a03002 	mov	r3, r2
    cb94:	e1a03183 	lsl	r3, r3, #3
    cb98:	e0833002 	add	r3, r3, r2
    cb9c:	e1a03103 	lsl	r3, r3, #2
    cba0:	e59f20e4 	ldr	r2, [pc, #228]	; cc8c <g_halMatlab_initSocket_i32+0x13c>
    cba4:	e0833002 	add	r3, r3, r2
    cba8:	e50b300c 	str	r3, [fp, #-12]
	{
		return M_HAL_MATLAB_ERROR_I8;
	}
#endif
	// open socket
	if ( (l_freeSocketSlot_pst->socketHandler_i32 = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1 )
    cbac:	e3a00002 	mov	r0, #2
    cbb0:	e3a01002 	mov	r1, #2
    cbb4:	e3a02011 	mov	r2, #17
    cbb8:	ebffef6f 	bl	897c <_init+0xec>
    cbbc:	e1a02000 	mov	r2, r0
    cbc0:	e51b300c 	ldr	r3, [fp, #-12]
    cbc4:	e5832020 	str	r2, [r3, #32]
    cbc8:	e51b300c 	ldr	r3, [fp, #-12]
    cbcc:	e5933020 	ldr	r3, [r3, #32]
    cbd0:	e3730001 	cmn	r3, #1
    cbd4:	1a000004 	bne	cbec <g_halMatlab_initSocket_i32+0x9c>
	{
		l_freeSocketSlot_pst->socketHandler_i32 = 0;
    cbd8:	e51b300c 	ldr	r3, [fp, #-12]
    cbdc:	e3a02000 	mov	r2, #0
    cbe0:	e5832020 	str	r2, [r3, #32]
		return M_HAL_MATLAB_ERROR_I8;
    cbe4:	e3e03000 	mvn	r3, #0
    cbe8:	ea000024 	b	cc80 <g_halMatlab_initSocket_i32+0x130>
	}

	// bind ip
	// -->zero out the structure
	memset(	(char*)&(l_freeSocketSlot_pst->sockAddrListen_st), 0, sizeof(l_freeSocketSlot_pst->sockAddrListen_st) );
    cbec:	e51b300c 	ldr	r3, [fp, #-12]
    cbf0:	e1a00003 	mov	r0, r3
    cbf4:	e3a01000 	mov	r1, #0
    cbf8:	e3a02010 	mov	r2, #16
    cbfc:	ebffef43 	bl	8910 <_init+0x80>

	l_freeSocketSlot_pst->sockAddrListen_st.sin_family 		= AF_INET;
    cc00:	e51b300c 	ldr	r3, [fp, #-12]
    cc04:	e3a02002 	mov	r2, #2
    cc08:	e1c320b0 	strh	r2, [r3]
	l_freeSocketSlot_pst->sockAddrListen_st.sin_port 		= htons((uint16_t)f_udpListenPort_ui16);
    cc0c:	e15b30be 	ldrh	r3, [fp, #-14]
    cc10:	e1a00003 	mov	r0, r3
    cc14:	ebffef3a 	bl	8904 <_init+0x74>
    cc18:	e1a03000 	mov	r3, r0
    cc1c:	e1a02003 	mov	r2, r3
    cc20:	e51b300c 	ldr	r3, [fp, #-12]
    cc24:	e1c320b2 	strh	r2, [r3, #2]
	l_freeSocketSlot_pst->sockAddrListen_st.sin_addr.s_addr = htonl(INADDR_ANY);
    cc28:	e3a00000 	mov	r0, #0
    cc2c:	ebffef79 	bl	8a18 <_init+0x188>
    cc30:	e1a02000 	mov	r2, r0
    cc34:	e51b300c 	ldr	r3, [fp, #-12]
    cc38:	e5832004 	str	r2, [r3, #4]

	//bind socket to port
	if( bind(	l_freeSocketSlot_pst->socketHandler_i32 ,
    cc3c:	e51b300c 	ldr	r3, [fp, #-12]
    cc40:	e5932020 	ldr	r2, [r3, #32]
				(struct sockaddr*)&(l_freeSocketSlot_pst->sockAddrListen_st),
    cc44:	e51b300c 	ldr	r3, [fp, #-12]
	l_freeSocketSlot_pst->sockAddrListen_st.sin_family 		= AF_INET;
	l_freeSocketSlot_pst->sockAddrListen_st.sin_port 		= htons((uint16_t)f_udpListenPort_ui16);
	l_freeSocketSlot_pst->sockAddrListen_st.sin_addr.s_addr = htonl(INADDR_ANY);

	//bind socket to port
	if( bind(	l_freeSocketSlot_pst->socketHandler_i32 ,
    cc48:	e1a00002 	mov	r0, r2
    cc4c:	e1a01003 	mov	r1, r3
    cc50:	e3a02010 	mov	r2, #16
    cc54:	ebffef57 	bl	89b8 <_init+0x128>
    cc58:	e1a03000 	mov	r3, r0
    cc5c:	e3730001 	cmn	r3, #1
    cc60:	1a000004 	bne	cc78 <g_halMatlab_initSocket_i32+0x128>
				(struct sockaddr*)&(l_freeSocketSlot_pst->sockAddrListen_st),
				sizeof(l_freeSocketSlot_pst->sockAddrListen_st)
				)
		== -1 )
	{
		l_freeSocketSlot_pst->socketHandler_i32 = 0;
    cc64:	e51b300c 	ldr	r3, [fp, #-12]
    cc68:	e3a02000 	mov	r2, #0
    cc6c:	e5832020 	str	r2, [r3, #32]
		return M_HAL_MATLAB_ERROR_I8;
    cc70:	e3e03000 	mvn	r3, #0
    cc74:	ea000001 	b	cc80 <g_halMatlab_initSocket_i32+0x130>
	}

	return l_freeSocketSlot_pst->socketHandler_i32;
    cc78:	e51b300c 	ldr	r3, [fp, #-12]
    cc7c:	e5933020 	ldr	r3, [r3, #32]
}
    cc80:	e1a00003 	mov	r0, r3
    cc84:	e24bd004 	sub	sp, fp, #4
    cc88:	e8bd8800 	pop	{fp, pc}
    cc8c:	000103f0 	.word	0x000103f0

0000cc90 <g_halMatlab_initConnection_i32>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
int 	g_halMatlab_initConnection_i32(const unsigned char* const f_destIpv4_rg4ui8, unsigned short f_udpConnectionPort_ui16 )
{
    cc90:	e92d4800 	push	{fp, lr}
    cc94:	e28db004 	add	fp, sp, #4
    cc98:	e24dd010 	sub	sp, sp, #16
    cc9c:	e50b0010 	str	r0, [fp, #-16]
    cca0:	e1a03001 	mov	r3, r1
    cca4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	int	l_socketHandler_i32;

	// create socket
	if ( ( l_socketHandler_i32 = g_halMatlab_initSocket_i32(f_udpConnectionPort_ui16) ) <= 0 )
    cca8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    ccac:	e1a00003 	mov	r0, r3
    ccb0:	ebffffa6 	bl	cb50 <g_halMatlab_initSocket_i32>
    ccb4:	e50b0008 	str	r0, [fp, #-8]
    ccb8:	e51b3008 	ldr	r3, [fp, #-8]
    ccbc:	e3530000 	cmp	r3, #0
    ccc0:	ca000001 	bgt	cccc <g_halMatlab_initConnection_i32+0x3c>
	{
		// error occurred
		return M_HAL_MATLAB_ERROR_I8;
    ccc4:	e3e03000 	mvn	r3, #0
    ccc8:	ea00000a 	b	ccf8 <g_halMatlab_initConnection_i32+0x68>
	 *                        |  >Local machine>  |
	 *  ----------------------+  >sends to 5000>  +-----------------------
	 *     Local machine                               Remote machine
	 *
	 */
	if ( g_halMatlab_configSocket_bl(l_socketHandler_i32, f_destIpv4_rg4ui8, f_udpConnectionPort_ui16) != M_HAL_MATLAB_SUCCESS_UI8 )
    cccc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    ccd0:	e51b0008 	ldr	r0, [fp, #-8]
    ccd4:	e51b1010 	ldr	r1, [fp, #-16]
    ccd8:	e1a02003 	mov	r2, r3
    ccdc:	eb0000c2 	bl	cfec <g_halMatlab_configSocket_bl>
    cce0:	e1a03000 	mov	r3, r0
    cce4:	e3530000 	cmp	r3, #0
    cce8:	0a000001 	beq	ccf4 <g_halMatlab_initConnection_i32+0x64>
	{
		// error occurred
		return M_HAL_MATLAB_ERROR_I8;
    ccec:	e3e03000 	mvn	r3, #0
    ccf0:	ea000000 	b	ccf8 <g_halMatlab_initConnection_i32+0x68>
	}

	return l_socketHandler_i32;
    ccf4:	e51b3008 	ldr	r3, [fp, #-8]
}
    ccf8:	e1a00003 	mov	r0, r3
    ccfc:	e24bd004 	sub	sp, fp, #4
    cd00:	e8bd8800 	pop	{fp, pc}

0000cd04 <g_halMatlab_closeSocket_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_closeSocket_bl(int f_socketHandler_i32)
{
    cd04:	e92d4800 	push	{fp, lr}
    cd08:	e28db004 	add	fp, sp, #4
    cd0c:	e24dd010 	sub	sp, sp, #16
    cd10:	e50b0010 	str	r0, [fp, #-16]
	signed short l_socketSlotNumber_i16 = 0;
    cd14:	e3a03000 	mov	r3, #0
    cd18:	e14b30b6 	strh	r3, [fp, #-6]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    cd1c:	e51b0010 	ldr	r0, [fp, #-16]
    cd20:	ebffff5b 	bl	ca94 <l_findSocket_i16>
    cd24:	e1a03000 	mov	r3, r0
    cd28:	e14b30b6 	strh	r3, [fp, #-6]
    cd2c:	e15b30f6 	ldrsh	r3, [fp, #-6]
    cd30:	e3530000 	cmp	r3, #0
    cd34:	aa000001 	bge	cd40 <g_halMatlab_closeSocket_bl+0x3c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    cd38:	e3a03001 	mov	r3, #1
    cd3c:	ea000017 	b	cda0 <g_halMatlab_closeSocket_bl+0x9c>
	}

#ifdef __linux__
	/* close socket */
	close( m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16].socketHandler_i32 );
    cd40:	e15b20f6 	ldrsh	r2, [fp, #-6]
    cd44:	e59f0060 	ldr	r0, [pc, #96]	; cdac <g_halMatlab_closeSocket_bl+0xa8>
    cd48:	e3a01020 	mov	r1, #32
    cd4c:	e1a03002 	mov	r3, r2
    cd50:	e1a03183 	lsl	r3, r3, #3
    cd54:	e0833002 	add	r3, r3, r2
    cd58:	e1a03103 	lsl	r3, r3, #2
    cd5c:	e0803003 	add	r3, r0, r3
    cd60:	e0833001 	add	r3, r3, r1
    cd64:	e5933000 	ldr	r3, [r3]
    cd68:	e1a00003 	mov	r0, r3
    cd6c:	ebffef14 	bl	89c4 <_init+0x134>
#elif _WIN32
    closesocket(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16].socketHandler_i32);
    WSACleanup();
#endif
	/* free slot */
	m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16].socketHandler_i32 = 0;
    cd70:	e15b20f6 	ldrsh	r2, [fp, #-6]
    cd74:	e59f0030 	ldr	r0, [pc, #48]	; cdac <g_halMatlab_closeSocket_bl+0xa8>
    cd78:	e3a01020 	mov	r1, #32
    cd7c:	e1a03002 	mov	r3, r2
    cd80:	e1a03183 	lsl	r3, r3, #3
    cd84:	e0833002 	add	r3, r3, r2
    cd88:	e1a03103 	lsl	r3, r3, #2
    cd8c:	e0803003 	add	r3, r0, r3
    cd90:	e0833001 	add	r3, r3, r1
    cd94:	e3a02000 	mov	r2, #0
    cd98:	e5832000 	str	r2, [r3]

	return M_HAL_MATLAB_SUCCESS_UI8;
    cd9c:	e3a03000 	mov	r3, #0
}
    cda0:	e1a00003 	mov	r0, r3
    cda4:	e24bd004 	sub	sp, fp, #4
    cda8:	e8bd8800 	pop	{fp, pc}
    cdac:	000103f0 	.word	0x000103f0

0000cdb0 <g_halMatlab_sendPacket_bl>:
 ***********************************************************************/
unsigned int g_halMatlab_sendPacket_bl(	int f_socketHandler_i32,
										const unsigned char* const f_sendBuffer_pui8,
										unsigned int f_sendBufferSize_ui32
										)
{
    cdb0:	e92d4800 	push	{fp, lr}
    cdb4:	e28db004 	add	fp, sp, #4
    cdb8:	e24dd028 	sub	sp, sp, #40	; 0x28
    cdbc:	e50b0018 	str	r0, [fp, #-24]
    cdc0:	e50b101c 	str	r1, [fp, #-28]
    cdc4:	e50b2020 	str	r2, [fp, #-32]
	int						l_sendSuccess_i32		= -1;
    cdc8:	e3e03000 	mvn	r3, #0
    cdcc:	e50b3008 	str	r3, [fp, #-8]
	signed short 			l_socketSlotNumber_i16 	= 0;
    cdd0:	e3a03000 	mov	r3, #0
    cdd4:	e14b30ba 	strh	r3, [fp, #-10]
	halMatlab_socketData* 	l_socketConfig_pst		= 0;
    cdd8:	e3a03000 	mov	r3, #0
    cddc:	e50b3010 	str	r3, [fp, #-16]
	unsigned int			l_socketStructSize_ui32	= 0;
    cde0:	e3a03000 	mov	r3, #0
    cde4:	e50b3014 	str	r3, [fp, #-20]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    cde8:	e51b0018 	ldr	r0, [fp, #-24]
    cdec:	ebffff28 	bl	ca94 <l_findSocket_i16>
    cdf0:	e1a03000 	mov	r3, r0
    cdf4:	e14b30ba 	strh	r3, [fp, #-10]
    cdf8:	e15b30fa 	ldrsh	r3, [fp, #-10]
    cdfc:	e3530000 	cmp	r3, #0
    ce00:	aa000001 	bge	ce0c <g_halMatlab_sendPacket_bl+0x5c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    ce04:	e3a03001 	mov	r3, #1
    ce08:	ea00001a 	b	ce78 <g_halMatlab_sendPacket_bl+0xc8>
	}

	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);
    ce0c:	e15b20fa 	ldrsh	r2, [fp, #-10]
    ce10:	e1a03002 	mov	r3, r2
    ce14:	e1a03183 	lsl	r3, r3, #3
    ce18:	e0833002 	add	r3, r3, r2
    ce1c:	e1a03103 	lsl	r3, r3, #2
    ce20:	e59f205c 	ldr	r2, [pc, #92]	; ce84 <g_halMatlab_sendPacket_bl+0xd4>
    ce24:	e0833002 	add	r3, r3, r2
    ce28:	e50b3010 	str	r3, [fp, #-16]

	// send telegram
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
    ce2c:	e3a03010 	mov	r3, #16
    ce30:	e50b3014 	str	r3, [fp, #-20]
	l_sendSuccess_i32 = sendto(	f_socketHandler_i32,
								f_sendBuffer_pui8,
								f_sendBufferSize_ui32,
								0 ,
								(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
    ce34:	e51b3010 	ldr	r3, [fp, #-16]
    ce38:	e2833010 	add	r3, r3, #16
	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);

	// send telegram
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
	l_sendSuccess_i32 = sendto(	f_socketHandler_i32,
    ce3c:	e58d3000 	str	r3, [sp]
    ce40:	e51b3014 	ldr	r3, [fp, #-20]
    ce44:	e58d3004 	str	r3, [sp, #4]
    ce48:	e51b0018 	ldr	r0, [fp, #-24]
    ce4c:	e51b101c 	ldr	r1, [fp, #-28]
    ce50:	e51b2020 	ldr	r2, [fp, #-32]
    ce54:	e3a03000 	mov	r3, #0
    ce58:	ebffeea6 	bl	88f8 <_init+0x68>
    ce5c:	e50b0008 	str	r0, [fp, #-8]
								f_sendBufferSize_ui32,
								0 ,
								(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
								l_socketStructSize_ui32 );

	if ( l_sendSuccess_i32 == M_HAL_MATLAB_ERROR_I8 )
    ce60:	e51b3008 	ldr	r3, [fp, #-8]
    ce64:	e3730001 	cmn	r3, #1
    ce68:	1a000001 	bne	ce74 <g_halMatlab_sendPacket_bl+0xc4>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    ce6c:	e3a03001 	mov	r3, #1
    ce70:	ea000000 	b	ce78 <g_halMatlab_sendPacket_bl+0xc8>
	}else{
		return M_HAL_MATLAB_SUCCESS_UI8;
    ce74:	e3a03000 	mov	r3, #0
	}
}
    ce78:	e1a00003 	mov	r0, r3
    ce7c:	e24bd004 	sub	sp, fp, #4
    ce80:	e8bd8800 	pop	{fp, pc}
    ce84:	000103f0 	.word	0x000103f0

0000ce88 <g_halMatlab_sendRtDataPacket_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_sendRtDataPacket_bl(	int f_socketHandler_i32,
												const unsigned char* const f_sendBuffer_pui8,
												unsigned int f_sendBufferSize_ui32)
{
    ce88:	e92d4800 	push	{fp, lr}
    ce8c:	e28db004 	add	fp, sp, #4
    ce90:	e24dde22 	sub	sp, sp, #544	; 0x220
    ce94:	e50b0218 	str	r0, [fp, #-536]	; 0x218
    ce98:	e50b121c 	str	r1, [fp, #-540]	; 0x21c
    ce9c:	e50b2220 	str	r2, [fp, #-544]	; 0x220
	struct timespec			l_timestamp_st;
	unsigned char			l_sendBuffer_rgXi8[M_HAL_MATLAB_SEND_BUFFER_SIZE_UI16];
	unsigned int			l_sizePayload_ui32		= 0;
    cea0:	e3a03000 	mov	r3, #0
    cea4:	e50b3008 	str	r3, [fp, #-8]
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    cea8:	e24b3010 	sub	r3, fp, #16
    ceac:	e3a00000 	mov	r0, #0
    ceb0:	e1a01003 	mov	r1, r3
    ceb4:	ebffee83 	bl	88c8 <_init+0x38>
    ceb8:	e1a03000 	mov	r3, r0
    cebc:	e3530000 	cmp	r3, #0
    cec0:	0a000001 	beq	cecc <g_halMatlab_sendRtDataPacket_bl+0x44>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    cec4:	e3a03001 	mov	r3, #1
    cec8:	ea000014 	b	cf20 <g_halMatlab_sendRtDataPacket_bl+0x98>
	}

	// add timestamp to payload data
	memcpy(	l_sendBuffer_rgXi8,
    cecc:	e24b2e21 	sub	r2, fp, #528	; 0x210
    ced0:	e24b3010 	sub	r3, fp, #16
    ced4:	e1a00002 	mov	r0, r2
    ced8:	e1a01003 	mov	r1, r3
    cedc:	e3a02008 	mov	r2, #8
    cee0:	ebffeeae 	bl	89a0 <_init+0x110>
			&l_timestamp_st,
			sizeof(l_timestamp_st) );
	memcpy(	(l_sendBuffer_rgXi8+sizeof(l_timestamp_st)),
    cee4:	e24b3e21 	sub	r3, fp, #528	; 0x210
    cee8:	e2833008 	add	r3, r3, #8
    ceec:	e1a00003 	mov	r0, r3
    cef0:	e51b121c 	ldr	r1, [fp, #-540]	; 0x21c
    cef4:	e51b2220 	ldr	r2, [fp, #-544]	; 0x220
    cef8:	ebffeea8 	bl	89a0 <_init+0x110>
			f_sendBuffer_pui8,
			f_sendBufferSize_ui32 );

	// adjust size of telegram's payload (due to added timestamp)
	l_sizePayload_ui32 = f_sendBufferSize_ui32 + sizeof(l_timestamp_st);
    cefc:	e51b3220 	ldr	r3, [fp, #-544]	; 0x220
    cf00:	e2833008 	add	r3, r3, #8
    cf04:	e50b3008 	str	r3, [fp, #-8]

	return g_halMatlab_sendPacket_bl(f_socketHandler_i32, l_sendBuffer_rgXi8, l_sizePayload_ui32);
    cf08:	e24b3e21 	sub	r3, fp, #528	; 0x210
    cf0c:	e51b0218 	ldr	r0, [fp, #-536]	; 0x218
    cf10:	e1a01003 	mov	r1, r3
    cf14:	e51b2008 	ldr	r2, [fp, #-8]
    cf18:	ebffffa4 	bl	cdb0 <g_halMatlab_sendPacket_bl>
    cf1c:	e1a03000 	mov	r3, r0
}
    cf20:	e1a00003 	mov	r0, r3
    cf24:	e24bd004 	sub	sp, fp, #4
    cf28:	e8bd8800 	pop	{fp, pc}

0000cf2c <g_halMatlab_recvPacket_ui32>:
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_recvPacket_ui32( int f_socketHandler_i32,
		unsigned char* const f_recvBuffer_pui8,
		unsigned int f_recvBufferSize_ui32)
{
    cf2c:	e92d4800 	push	{fp, lr}
    cf30:	e28db004 	add	fp, sp, #4
    cf34:	e24dd028 	sub	sp, sp, #40	; 0x28
    cf38:	e50b0018 	str	r0, [fp, #-24]
    cf3c:	e50b101c 	str	r1, [fp, #-28]
    cf40:	e50b2020 	str	r2, [fp, #-32]
	signed short 			l_socketSlotNumber_i16 	= 0;
    cf44:	e3a03000 	mov	r3, #0
    cf48:	e14b30b6 	strh	r3, [fp, #-6]
	halMatlab_socketData* 	l_socketConfig_pst		= 0;
    cf4c:	e3a03000 	mov	r3, #0
    cf50:	e50b300c 	str	r3, [fp, #-12]
	int						l_recvFromFlag_i32		= 0;	// blocking behavior (standard)
    cf54:	e3a03000 	mov	r3, #0
    cf58:	e50b3010 	str	r3, [fp, #-16]
	unsigned int			l_socketStructSize_ui32	= 0;
    cf5c:	e3a03000 	mov	r3, #0
    cf60:	e50b3014 	str	r3, [fp, #-20]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    cf64:	e51b0018 	ldr	r0, [fp, #-24]
    cf68:	ebfffec9 	bl	ca94 <l_findSocket_i16>
    cf6c:	e1a03000 	mov	r3, r0
    cf70:	e14b30b6 	strh	r3, [fp, #-6]
    cf74:	e15b30f6 	ldrsh	r3, [fp, #-6]
    cf78:	e3530000 	cmp	r3, #0
    cf7c:	aa000001 	bge	cf88 <g_halMatlab_recvPacket_ui32+0x5c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    cf80:	e3a03001 	mov	r3, #1
    cf84:	ea000014 	b	cfdc <g_halMatlab_recvPacket_ui32+0xb0>
	}

	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);
    cf88:	e15b20f6 	ldrsh	r2, [fp, #-6]
    cf8c:	e1a03002 	mov	r3, r2
    cf90:	e1a03183 	lsl	r3, r3, #3
    cf94:	e0833002 	add	r3, r3, r2
    cf98:	e1a03103 	lsl	r3, r3, #2
    cf9c:	e59f2044 	ldr	r2, [pc, #68]	; cfe8 <g_halMatlab_recvPacket_ui32+0xbc>
    cfa0:	e0833002 	add	r3, r3, r2
    cfa4:	e50b300c 	str	r3, [fp, #-12]
//		// blocking behavior (standard)
//		l_recvFromFlag_i32 = 0;
//	}

	// recv telegram (blocking!)
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
    cfa8:	e3a03010 	mov	r3, #16
    cfac:	e50b3014 	str	r3, [fp, #-20]
	return recvfrom(	f_socketHandler_i32,
						f_recvBuffer_pui8,
						f_recvBufferSize_ui32,
						l_recvFromFlag_i32,
						(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
    cfb0:	e51b300c 	ldr	r3, [fp, #-12]
    cfb4:	e2833010 	add	r3, r3, #16
//		l_recvFromFlag_i32 = 0;
//	}

	// recv telegram (blocking!)
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
	return recvfrom(	f_socketHandler_i32,
    cfb8:	e58d3000 	str	r3, [sp]
    cfbc:	e24b3014 	sub	r3, fp, #20
    cfc0:	e58d3004 	str	r3, [sp, #4]
    cfc4:	e51b0018 	ldr	r0, [fp, #-24]
    cfc8:	e51b101c 	ldr	r1, [fp, #-28]
    cfcc:	e51b2020 	ldr	r2, [fp, #-32]
    cfd0:	e51b3010 	ldr	r3, [fp, #-16]
    cfd4:	ebffee95 	bl	8a30 <_init+0x1a0>
    cfd8:	e1a03000 	mov	r3, r0
						f_recvBuffer_pui8,
						f_recvBufferSize_ui32,
						l_recvFromFlag_i32,
						(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
						&l_socketStructSize_ui32);
}
    cfdc:	e1a00003 	mov	r0, r3
    cfe0:	e24bd004 	sub	sp, fp, #4
    cfe4:	e8bd8800 	pop	{fp, pc}
    cfe8:	000103f0 	.word	0x000103f0

0000cfec <g_halMatlab_configSocket_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_configSocket_bl(	int f_socketHandler_i32,
		const unsigned char* const f_destIpv4_rg4ui8,
		unsigned short f_destPort_ui16)
{
    cfec:	e92d4800 	push	{fp, lr}
    cff0:	e28db004 	add	fp, sp, #4
    cff4:	e24dd020 	sub	sp, sp, #32
    cff8:	e50b0018 	str	r0, [fp, #-24]
    cffc:	e50b101c 	str	r1, [fp, #-28]
    d000:	e1a03002 	mov	r3, r2
    d004:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
	signed short 			l_socketSlotNumber_i16 	= 0;
    d008:	e3a03000 	mov	r3, #0
    d00c:	e14b30b6 	strh	r3, [fp, #-6]
	halMatlab_socketData* 	l_socketConfig_pst		= 0;
    d010:	e3a03000 	mov	r3, #0
    d014:	e50b300c 	str	r3, [fp, #-12]
	unsigned int			l_ipv4Addr_ui32			= 0;
    d018:	e3a03000 	mov	r3, #0
    d01c:	e50b3010 	str	r3, [fp, #-16]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    d020:	e51b0018 	ldr	r0, [fp, #-24]
    d024:	ebfffe9a 	bl	ca94 <l_findSocket_i16>
    d028:	e1a03000 	mov	r3, r0
    d02c:	e14b30b6 	strh	r3, [fp, #-6]
    d030:	e15b30f6 	ldrsh	r3, [fp, #-6]
    d034:	e3530000 	cmp	r3, #0
    d038:	aa000001 	bge	d044 <g_halMatlab_configSocket_bl+0x58>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    d03c:	e3a03001 	mov	r3, #1
    d040:	ea00002f 	b	d104 <g_halMatlab_configSocket_bl+0x118>
	}

	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);
    d044:	e15b20f6 	ldrsh	r2, [fp, #-6]
    d048:	e1a03002 	mov	r3, r2
    d04c:	e1a03183 	lsl	r3, r3, #3
    d050:	e0833002 	add	r3, r3, r2
    d054:	e1a03103 	lsl	r3, r3, #2
    d058:	e59f20b0 	ldr	r2, [pc, #176]	; d110 <g_halMatlab_configSocket_bl+0x124>
    d05c:	e0833002 	add	r3, r3, r2
    d060:	e50b300c 	str	r3, [fp, #-12]

	// set values in l_socketConfig_pst->sockAddrRemote_st
	memset((char*) &l_socketConfig_pst->sockAddrRemote_st, 0, sizeof(l_socketConfig_pst->sockAddrRemote_st));
    d064:	e51b300c 	ldr	r3, [fp, #-12]
    d068:	e2833010 	add	r3, r3, #16
    d06c:	e1a00003 	mov	r0, r3
    d070:	e3a01000 	mov	r1, #0
    d074:	e3a02010 	mov	r2, #16
    d078:	ebffee24 	bl	8910 <_init+0x80>
	l_socketConfig_pst->sockAddrRemote_st.sin_family = AF_INET;
    d07c:	e51b300c 	ldr	r3, [fp, #-12]
    d080:	e3a02002 	mov	r2, #2
    d084:	e1c321b0 	strh	r2, [r3, #16]
	l_socketConfig_pst->sockAddrRemote_st.sin_port = htons(f_destPort_ui16);
    d088:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
    d08c:	e1a00003 	mov	r0, r3
    d090:	ebffee1b 	bl	8904 <_init+0x74>
    d094:	e1a03000 	mov	r3, r0
    d098:	e1a02003 	mov	r2, r3
    d09c:	e51b300c 	ldr	r3, [fp, #-12]
    d0a0:	e1c321b2 	strh	r2, [r3, #18]

	// assemble 4 bytes of IPv4 address into one 32bit value
	l_ipv4Addr_ui32 = 		( f_destIpv4_rg4ui8[0] << 24 )
    d0a4:	e51b301c 	ldr	r3, [fp, #-28]
    d0a8:	e5d33000 	ldrb	r3, [r3]
    d0ac:	e1a02c03 	lsl	r2, r3, #24
						+ 	( f_destIpv4_rg4ui8[1] << 16 )
    d0b0:	e51b301c 	ldr	r3, [fp, #-28]
    d0b4:	e2833001 	add	r3, r3, #1
    d0b8:	e5d33000 	ldrb	r3, [r3]
    d0bc:	e1a03803 	lsl	r3, r3, #16
    d0c0:	e0822003 	add	r2, r2, r3
						+ 	( f_destIpv4_rg4ui8[2] << 8 )
    d0c4:	e51b301c 	ldr	r3, [fp, #-28]
    d0c8:	e2833002 	add	r3, r3, #2
    d0cc:	e5d33000 	ldrb	r3, [r3]
    d0d0:	e1a03403 	lsl	r3, r3, #8
    d0d4:	e0822003 	add	r2, r2, r3
						+ 	( f_destIpv4_rg4ui8[3] );
    d0d8:	e51b301c 	ldr	r3, [fp, #-28]
    d0dc:	e2833003 	add	r3, r3, #3
    d0e0:	e5d33000 	ldrb	r3, [r3]
    d0e4:	e0823003 	add	r3, r2, r3
	memset((char*) &l_socketConfig_pst->sockAddrRemote_st, 0, sizeof(l_socketConfig_pst->sockAddrRemote_st));
	l_socketConfig_pst->sockAddrRemote_st.sin_family = AF_INET;
	l_socketConfig_pst->sockAddrRemote_st.sin_port = htons(f_destPort_ui16);

	// assemble 4 bytes of IPv4 address into one 32bit value
	l_ipv4Addr_ui32 = 		( f_destIpv4_rg4ui8[0] << 24 )
    d0e8:	e50b3010 	str	r3, [fp, #-16]
						+ 	( f_destIpv4_rg4ui8[1] << 16 )
						+ 	( f_destIpv4_rg4ui8[2] << 8 )
						+ 	( f_destIpv4_rg4ui8[3] );

	l_socketConfig_pst->sockAddrRemote_st.sin_addr.s_addr = htonl( l_ipv4Addr_ui32 );
    d0ec:	e51b0010 	ldr	r0, [fp, #-16]
    d0f0:	ebffee48 	bl	8a18 <_init+0x188>
    d0f4:	e1a02000 	mov	r2, r0
    d0f8:	e51b300c 	ldr	r3, [fp, #-12]
    d0fc:	e5832014 	str	r2, [r3, #20]

	return M_HAL_MATLAB_SUCCESS_UI8;
    d100:	e3a03000 	mov	r3, #0
}
    d104:	e1a00003 	mov	r0, r3
    d108:	e24bd004 	sub	sp, fp, #4
    d10c:	e8bd8800 	pop	{fp, pc}
    d110:	000103f0 	.word	0x000103f0

0000d114 <g_halMatlab_sendSigState_bl>:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_sendSigState_bl(	int f_socketHandler_i32,
											sigOri_orientationAngles f_sigState_st )
{
    d114:	e92d4800 	push	{fp, lr}
    d118:	e28db004 	add	fp, sp, #4
    d11c:	e24dd048 	sub	sp, sp, #72	; 0x48
    d120:	e50b0030 	str	r0, [fp, #-48]	; 0x30
    d124:	eeb05b40 	vmov.f64	d5, d0
    d128:	eeb06b41 	vmov.f64	d6, d1
    d12c:	eeb07b42 	vmov.f64	d7, d2
    d130:	ed0b5b13 	vstr	d5, [fp, #-76]	; 0xffffffb4
    d134:	ed0b6b11 	vstr	d6, [fp, #-68]	; 0xffffffbc
    d138:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    d13c:	e24b302c 	sub	r3, fp, #44	; 0x2c
    d140:	e3a00000 	mov	r0, #0
    d144:	e1a01003 	mov	r1, r3
    d148:	ebffedde 	bl	88c8 <_init+0x38>
    d14c:	e1a03000 	mov	r3, r0
    d150:	e3530000 	cmp	r3, #0
    d154:	0a000001 	beq	d160 <g_halMatlab_sendSigState_bl+0x4c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    d158:	e3a03001 	mov	r3, #1
    d15c:	ea00000f 	b	d1a0 <g_halMatlab_sendSigState_bl+0x8c>
	}

	//assmeble timestamp and
	l_rtSigPayload_st.timestamp_st 	= l_timestamp_st;
    d160:	e24b3024 	sub	r3, fp, #36	; 0x24
    d164:	e24b202c 	sub	r2, fp, #44	; 0x2c
    d168:	e8920003 	ldm	r2, {r0, r1}
    d16c:	e8830003 	stm	r3, {r0, r1}
	l_rtSigPayload_st.sigState_st	= f_sigState_st;
    d170:	e24bc01c 	sub	ip, fp, #28
    d174:	e24be04c 	sub	lr, fp, #76	; 0x4c
    d178:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    d17c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    d180:	e89e0003 	ldm	lr, {r0, r1}
    d184:	e88c0003 	stm	ip, {r0, r1}

	return g_halMatlab_sendPacket_bl( 	f_socketHandler_i32,
    d188:	e24b3024 	sub	r3, fp, #36	; 0x24
    d18c:	e51b0030 	ldr	r0, [fp, #-48]	; 0x30
    d190:	e1a01003 	mov	r1, r3
    d194:	e3a02020 	mov	r2, #32
    d198:	ebffff04 	bl	cdb0 <g_halMatlab_sendPacket_bl>
    d19c:	e1a03000 	mov	r3, r0
										(unsigned char*)&l_rtSigPayload_st,
										sizeof( l_rtSigPayload_st ) );
}
    d1a0:	e1a00003 	mov	r0, r3
    d1a4:	e24bd004 	sub	sp, fp, #4
    d1a8:	e8bd8800 	pop	{fp, pc}

0000d1ac <g_halMatlab_sendSigAllStates_bl>:
 ***********************************************************************/
unsigned int g_halMatlab_sendSigAllStates_bl(	int f_socketHandler_i32,
												halImu_orientationValues f_rawImuState_st,
												sigOri_orientationAngles f_sigKalmanState_st,
												sigOri_orientationAngles f_sigComplementaryState_st )
{
    d1ac:	e24dd008 	sub	sp, sp, #8
    d1b0:	e92d4800 	push	{fp, lr}
    d1b4:	e28db004 	add	fp, sp, #4
    d1b8:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
    d1bc:	e50b00a0 	str	r0, [fp, #-160]	; 0xa0
    d1c0:	e28b1004 	add	r1, fp, #4
    d1c4:	e881000c 	stm	r1, {r2, r3}
    d1c8:	eeb06b44 	vmov.f64	d6, d4
    d1cc:	eeb07b45 	vmov.f64	d7, d5
    d1d0:	ed0b0b2f 	vstr	d0, [fp, #-188]	; 0xffffff44
    d1d4:	ed0b1b2d 	vstr	d1, [fp, #-180]	; 0xffffff4c
    d1d8:	ed0b2b2b 	vstr	d2, [fp, #-172]	; 0xffffff54
    d1dc:	ed0b3b35 	vstr	d3, [fp, #-212]	; 0xffffff2c
    d1e0:	ed0b6b33 	vstr	d6, [fp, #-204]	; 0xffffff34
    d1e4:	ed0b7b31 	vstr	d7, [fp, #-196]	; 0xffffff3c
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    d1e8:	e24b309c 	sub	r3, fp, #156	; 0x9c
    d1ec:	e3a00000 	mov	r0, #0
    d1f0:	e1a01003 	mov	r1, r3
    d1f4:	ebffedb3 	bl	88c8 <_init+0x38>
    d1f8:	e1a03000 	mov	r3, r0
    d1fc:	e3530000 	cmp	r3, #0
    d200:	0a000001 	beq	d20c <g_halMatlab_sendSigAllStates_bl+0x60>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    d204:	e3a03001 	mov	r3, #1
    d208:	ea00001c 	b	d280 <g_halMatlab_sendSigAllStates_bl+0xd4>
	}

	//assmeble timestamp and
	l_rtCompleteSigPayload_st.timestamp_st 				= l_timestamp_st;
    d20c:	e24b3094 	sub	r3, fp, #148	; 0x94
    d210:	e24b209c 	sub	r2, fp, #156	; 0x9c
    d214:	e8920003 	ldm	r2, {r0, r1}
    d218:	e8830003 	stm	r3, {r0, r1}
	l_rtCompleteSigPayload_st.imuState_st				= f_rawImuState_st;
    d21c:	e24b108c 	sub	r1, fp, #140	; 0x8c
    d220:	e28b2004 	add	r2, fp, #4
    d224:	e3a03058 	mov	r3, #88	; 0x58
    d228:	e1a00001 	mov	r0, r1
    d22c:	e1a01002 	mov	r1, r2
    d230:	e1a02003 	mov	r2, r3
    d234:	ebffedd9 	bl	89a0 <_init+0x110>
	l_rtCompleteSigPayload_st.kalmanSigState_st 		= f_sigKalmanState_st;
    d238:	e24bc034 	sub	ip, fp, #52	; 0x34
    d23c:	e24be0bc 	sub	lr, fp, #188	; 0xbc
    d240:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    d244:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    d248:	e89e0003 	ldm	lr, {r0, r1}
    d24c:	e88c0003 	stm	ip, {r0, r1}
	l_rtCompleteSigPayload_st.complementarySigState_st	= f_sigComplementaryState_st;
    d250:	e24bc01c 	sub	ip, fp, #28
    d254:	e24be0d4 	sub	lr, fp, #212	; 0xd4
    d258:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    d25c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    d260:	e89e0003 	ldm	lr, {r0, r1}
    d264:	e88c0003 	stm	ip, {r0, r1}

	return g_halMatlab_sendPacket_bl( 	f_socketHandler_i32,
    d268:	e24b3094 	sub	r3, fp, #148	; 0x94
    d26c:	e51b00a0 	ldr	r0, [fp, #-160]	; 0xa0
    d270:	e1a01003 	mov	r1, r3
    d274:	e3a02090 	mov	r2, #144	; 0x90
    d278:	ebfffecc 	bl	cdb0 <g_halMatlab_sendPacket_bl>
    d27c:	e1a03000 	mov	r3, r0
										(unsigned char*)&l_rtCompleteSigPayload_st,
										sizeof( l_rtCompleteSigPayload_st ) );
}
    d280:	e1a00003 	mov	r0, r3
    d284:	e24bd004 	sub	sp, fp, #4
    d288:	e8bd4800 	pop	{fp, lr}
    d28c:	e28dd008 	add	sp, sp, #8
    d290:	e12fff1e 	bx	lr

0000d294 <g_halMatlab_recvSigState_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halMatlab_rtSigPayload g_halMatlab_recvSigState_bl( int f_socketHandler_i32 ) {
    d294:	e92d4800 	push	{fp, lr}
    d298:	e28db004 	add	fp, sp, #4
    d29c:	e24dd050 	sub	sp, sp, #80	; 0x50
    d2a0:	e50b0050 	str	r0, [fp, #-80]	; 0x50
    d2a4:	e50b1054 	str	r1, [fp, #-84]	; 0x54
	halMatlab_rtSigPayload 		l_recvSigState_st;
	unsigned char				l_recvBuffer_rgXui8[ sizeof(halMatlab_rtSigPayload) ];
	unsigned int				l_recvBytesNumber_ui32;

	// zero all values
	l_recvSigState_st.timestamp_st.tv_sec 	= 0;
    d2a8:	e3a03000 	mov	r3, #0
    d2ac:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
	l_recvSigState_st.timestamp_st.tv_nsec 	= 0;
    d2b0:	e3a03000 	mov	r3, #0
    d2b4:	e50b3028 	str	r3, [fp, #-40]	; 0x28

	l_recvSigState_st.sigState_st.pitch_f64 = 0;
    d2b8:	e3a02000 	mov	r2, #0
    d2bc:	e3a03000 	mov	r3, #0
    d2c0:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	l_recvSigState_st.sigState_st.roll_f64 	= 0;
    d2c4:	e3a02000 	mov	r2, #0
    d2c8:	e3a03000 	mov	r3, #0
    d2cc:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	l_recvSigState_st.sigState_st.yaw_f64 	= 0;
    d2d0:	e3a02000 	mov	r2, #0
    d2d4:	e3a03000 	mov	r3, #0
    d2d8:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec


	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    d2dc:	e24b304c 	sub	r3, fp, #76	; 0x4c
    d2e0:	e51b0054 	ldr	r0, [fp, #-84]	; 0x54
    d2e4:	e1a01003 	mov	r1, r3
    d2e8:	e3a02020 	mov	r2, #32
    d2ec:	ebffff0e 	bl	cf2c <g_halMatlab_recvPacket_ui32>
    d2f0:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halMatlab_rtSigPayload) );

	if ( l_recvBytesNumber_ui32 == sizeof(halMatlab_rtSigPayload) )
    d2f4:	e51b3008 	ldr	r3, [fp, #-8]
    d2f8:	e3530020 	cmp	r3, #32
    d2fc:	1a000005 	bne	d318 <g_halMatlab_recvSigState_bl+0x84>
	{
		memcpy( &l_recvSigState_st, &l_recvBuffer_rgXui8, sizeof(halMatlab_rtSigPayload));
    d300:	e24b202c 	sub	r2, fp, #44	; 0x2c
    d304:	e24b304c 	sub	r3, fp, #76	; 0x4c
    d308:	e1a00002 	mov	r0, r2
    d30c:	e1a01003 	mov	r1, r3
    d310:	e3a02020 	mov	r2, #32
    d314:	ebffeda1 	bl	89a0 <_init+0x110>
	}

	return l_recvSigState_st;
    d318:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
    d31c:	e1a0c003 	mov	ip, r3
    d320:	e24be02c 	sub	lr, fp, #44	; 0x2c
    d324:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    d328:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    d32c:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
    d330:	e88c000f 	stm	ip, {r0, r1, r2, r3}
}
    d334:	e51b0050 	ldr	r0, [fp, #-80]	; 0x50
    d338:	e24bd004 	sub	sp, fp, #4
    d33c:	e8bd8800 	pop	{fp, pc}

0000d340 <g_halMatlab_recvSigAllStates_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halMatlab_rtSigAllStatePayload g_halMatlab_recvSigAllStates_bl( int f_socketHandler_i32 ) {
    d340:	e92d4800 	push	{fp, lr}
    d344:	e28db004 	add	fp, sp, #4
    d348:	e24dde13 	sub	sp, sp, #304	; 0x130
    d34c:	e50b0130 	str	r0, [fp, #-304]	; 0x130
    d350:	e50b1134 	str	r1, [fp, #-308]	; 0x134
	halMatlab_rtSigAllStatePayload 		l_recvSigAllStates_st;
	unsigned char				              l_recvBuffer_rgXui8[ sizeof(halMatlab_rtSigAllStatePayload) ];
	unsigned int				              l_recvBytesNumber_ui32;

	// zero all values
	l_recvSigAllStates_st.timestamp_st.tv_sec 	= 0;
    d354:	e3a03000 	mov	r3, #0
    d358:	e50b309c 	str	r3, [fp, #-156]	; 0x9c
	l_recvSigAllStates_st.timestamp_st.tv_nsec 	= 0;
    d35c:	e3a03000 	mov	r3, #0
    d360:	e50b3098 	str	r3, [fp, #-152]	; 0x98

  l_recvSigAllStates_st.imuState_st.acc.x_f64       = 0;
    d364:	e3a02000 	mov	r2, #0
    d368:	e3a03000 	mov	r3, #0
    d36c:	e14b29f4 	strd	r2, [fp, #-148]	; 0xffffff6c
  l_recvSigAllStates_st.imuState_st.acc.y_f64       = 0;
    d370:	e3a02000 	mov	r2, #0
    d374:	e3a03000 	mov	r3, #0
    d378:	e14b28fc 	strd	r2, [fp, #-140]	; 0xffffff74
  l_recvSigAllStates_st.imuState_st.acc.z_f64       = 0;
    d37c:	e3a02000 	mov	r2, #0
    d380:	e3a03000 	mov	r3, #0
    d384:	e14b28f4 	strd	r2, [fp, #-132]	; 0xffffff7c
  
  l_recvSigAllStates_st.imuState_st.mag.x_f64       = 0;
    d388:	e3a02000 	mov	r2, #0
    d38c:	e3a03000 	mov	r3, #0
    d390:	e14b27fc 	strd	r2, [fp, #-124]	; 0xffffff84
  l_recvSigAllStates_st.imuState_st.mag.y_f64       = 0;
    d394:	e3a02000 	mov	r2, #0
    d398:	e3a03000 	mov	r3, #0
    d39c:	e14b27f4 	strd	r2, [fp, #-116]	; 0xffffff8c
  l_recvSigAllStates_st.imuState_st.mag.z_f64       = 0;
    d3a0:	e3a02000 	mov	r2, #0
    d3a4:	e3a03000 	mov	r3, #0
    d3a8:	e14b26fc 	strd	r2, [fp, #-108]	; 0xffffff94
  
  l_recvSigAllStates_st.imuState_st.gyro.l_pitch_f64  = 0;
    d3ac:	e3a02000 	mov	r2, #0
    d3b0:	e3a03000 	mov	r3, #0
    d3b4:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	l_recvSigAllStates_st.imuState_st.gyro.l_roll_f64 	= 0;
    d3b8:	e3a02000 	mov	r2, #0
    d3bc:	e3a03000 	mov	r3, #0
    d3c0:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac
	l_recvSigAllStates_st.imuState_st.gyro.l_yaw_f64 	  = 0;
    d3c4:	e3a02000 	mov	r2, #0
    d3c8:	e3a03000 	mov	r3, #0
    d3cc:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
  
  l_recvSigAllStates_st.imuState_st.temperature_f64 = 0;
    d3d0:	e3a02000 	mov	r2, #0
    d3d4:	e3a03000 	mov	r3, #0
    d3d8:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
  l_recvSigAllStates_st.imuState_st.pressure_f64    = 0;
    d3dc:	e3a02000 	mov	r2, #0
    d3e0:	e3a03000 	mov	r3, #0
    d3e4:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
  
	l_recvSigAllStates_st.kalmanSigState_st.pitch_f64 = 0;
    d3e8:	e3a02000 	mov	r2, #0
    d3ec:	e3a03000 	mov	r3, #0
    d3f0:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	l_recvSigAllStates_st.kalmanSigState_st.roll_f64 	= 0;
    d3f4:	e3a02000 	mov	r2, #0
    d3f8:	e3a03000 	mov	r3, #0
    d3fc:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4
	l_recvSigAllStates_st.kalmanSigState_st.yaw_f64 	= 0;
    d400:	e3a02000 	mov	r2, #0
    d404:	e3a03000 	mov	r3, #0
    d408:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4

  l_recvSigAllStates_st.complementarySigState_st.pitch_f64 = 0;
    d40c:	e3a02000 	mov	r2, #0
    d410:	e3a03000 	mov	r3, #0
    d414:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	l_recvSigAllStates_st.complementarySigState_st.roll_f64 	= 0;
    d418:	e3a02000 	mov	r2, #0
    d41c:	e3a03000 	mov	r3, #0
    d420:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	l_recvSigAllStates_st.complementarySigState_st.yaw_f64 	= 0;
    d424:	e3a02000 	mov	r2, #0
    d428:	e3a03000 	mov	r3, #0
    d42c:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    d430:	e24b3f4b 	sub	r3, fp, #300	; 0x12c
    d434:	e51b0134 	ldr	r0, [fp, #-308]	; 0x134
    d438:	e1a01003 	mov	r1, r3
    d43c:	e3a02090 	mov	r2, #144	; 0x90
    d440:	ebfffeb9 	bl	cf2c <g_halMatlab_recvPacket_ui32>
    d444:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halMatlab_rtSigAllStatePayload) );

	if ( l_recvBytesNumber_ui32 == sizeof(halMatlab_rtSigAllStatePayload) )
    d448:	e51b3008 	ldr	r3, [fp, #-8]
    d44c:	e3530090 	cmp	r3, #144	; 0x90
    d450:	1a000005 	bne	d46c <g_halMatlab_recvSigAllStates_bl+0x12c>
	{
		memcpy( &l_recvSigAllStates_st, &l_recvBuffer_rgXui8, sizeof(halMatlab_rtSigAllStatePayload));
    d454:	e24b209c 	sub	r2, fp, #156	; 0x9c
    d458:	e24b3f4b 	sub	r3, fp, #300	; 0x12c
    d45c:	e1a00002 	mov	r0, r2
    d460:	e1a01003 	mov	r1, r3
    d464:	e3a02090 	mov	r2, #144	; 0x90
    d468:	ebffed4c 	bl	89a0 <_init+0x110>
	}

	return l_recvSigAllStates_st;
    d46c:	e51b3130 	ldr	r3, [fp, #-304]	; 0x130
    d470:	e1a01003 	mov	r1, r3
    d474:	e24b209c 	sub	r2, fp, #156	; 0x9c
    d478:	e3a03090 	mov	r3, #144	; 0x90
    d47c:	e1a00001 	mov	r0, r1
    d480:	e1a01002 	mov	r1, r2
    d484:	e1a02003 	mov	r2, r3
    d488:	ebffed44 	bl	89a0 <_init+0x110>
}
    d48c:	e51b0130 	ldr	r0, [fp, #-304]	; 0x130
    d490:	e24bd004 	sub	sp, fp, #4
    d494:	e8bd8800 	pop	{fp, pc}

0000d498 <m_getIndex_i32>:
#include <math.h>
//memcpy(dest, src, strlen(src)+1);


unsigned int m_getIndex_i32(unsigned int f_maxCol_ui32,unsigned int f_row_ui32,unsigned int f_col_ui32)
{
    d498:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    d49c:	e28db000 	add	fp, sp, #0
    d4a0:	e24dd014 	sub	sp, sp, #20
    d4a4:	e50b0008 	str	r0, [fp, #-8]
    d4a8:	e50b100c 	str	r1, [fp, #-12]
    d4ac:	e50b2010 	str	r2, [fp, #-16]
	return (f_maxCol_ui32*f_row_ui32+f_col_ui32);
    d4b0:	e51b3008 	ldr	r3, [fp, #-8]
    d4b4:	e51b200c 	ldr	r2, [fp, #-12]
    d4b8:	e0020392 	mul	r2, r2, r3
    d4bc:	e51b3010 	ldr	r3, [fp, #-16]
    d4c0:	e0823003 	add	r3, r2, r3
}
    d4c4:	e1a00003 	mov	r0, r3
    d4c8:	e24bd000 	sub	sp, fp, #0
    d4cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    d4d0:	e12fff1e 	bx	lr

0000d4d4 <g_sigMath_matrixMultiplikation_bl>:
unsigned int g_sigMath_matrixMultiplikation_bl(
		double* f_matrixResult_pf64, double* f_matrixA_pf64,
		unsigned int f_nrOfRowsA_ui32, unsigned int f_nrOfColsA_ui32,
		double* f_matrixB_pf64, unsigned int f_nrOfRowsB_ui32,
		unsigned int f_nrOfColsB_ui32)
{
    d4d4:	e92d4800 	push	{fp, lr}
    d4d8:	ed2d8b02 	vpush	{d8}
    d4dc:	e28db00c 	add	fp, sp, #12
    d4e0:	e24dd028 	sub	sp, sp, #40	; 0x28
    d4e4:	e50b0028 	str	r0, [fp, #-40]	; 0x28
    d4e8:	e50b102c 	str	r1, [fp, #-44]	; 0x2c
    d4ec:	e50b2030 	str	r2, [fp, #-48]	; 0x30
    d4f0:	e50b3034 	str	r3, [fp, #-52]	; 0x34
	unsigned int l_rowCounter_ui32=0;
    d4f4:	e3a03000 	mov	r3, #0
    d4f8:	e50b3010 	str	r3, [fp, #-16]
	unsigned int l_colCounter_ui32=0;
    d4fc:	e3a03000 	mov	r3, #0
    d500:	e50b3014 	str	r3, [fp, #-20]
	unsigned int l_innerCounter_ui32=0;
    d504:	e3a03000 	mov	r3, #0
    d508:	e50b3018 	str	r3, [fp, #-24]
	double l_temporalStorage_f64=0;
    d50c:	e3a02000 	mov	r2, #0
    d510:	e3a03000 	mov	r3, #0
    d514:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc

	if(f_nrOfColsA_ui32!=f_nrOfRowsB_ui32)
    d518:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    d51c:	e59b3008 	ldr	r3, [fp, #8]
    d520:	e1520003 	cmp	r2, r3
    d524:	0a000001 	beq	d530 <g_sigMath_matrixMultiplikation_bl+0x5c>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    d528:	e3a03001 	mov	r3, #1
    d52c:	ea000041 	b	d638 <g_sigMath_matrixMultiplikation_bl+0x164>
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    d530:	e3a03000 	mov	r3, #0
    d534:	e50b3010 	str	r3, [fp, #-16]
    d538:	ea000039 	b	d624 <g_sigMath_matrixMultiplikation_bl+0x150>
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
    d53c:	e3a03000 	mov	r3, #0
    d540:	e50b3014 	str	r3, [fp, #-20]
    d544:	ea00002f 	b	d608 <g_sigMath_matrixMultiplikation_bl+0x134>
			{
				for(l_innerCounter_ui32=0;l_innerCounter_ui32<f_nrOfColsA_ui32;l_innerCounter_ui32++)
    d548:	e3a03000 	mov	r3, #0
    d54c:	e50b3018 	str	r3, [fp, #-24]
    d550:	ea000018 	b	d5b8 <g_sigMath_matrixMultiplikation_bl+0xe4>
				{
					l_temporalStorage_f64+=f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_innerCounter_ui32)]*
    d554:	e51b0034 	ldr	r0, [fp, #-52]	; 0x34
    d558:	e51b1010 	ldr	r1, [fp, #-16]
    d55c:	e51b2018 	ldr	r2, [fp, #-24]
    d560:	ebffffcc 	bl	d498 <m_getIndex_i32>
    d564:	e1a03000 	mov	r3, r0
    d568:	e1a03183 	lsl	r3, r3, #3
    d56c:	e51b202c 	ldr	r2, [fp, #-44]	; 0x2c
    d570:	e0823003 	add	r3, r2, r3
    d574:	ed938b00 	vldr	d8, [r3]
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_innerCounter_ui32,l_colCounter_ui32)];
    d578:	e59b000c 	ldr	r0, [fp, #12]
    d57c:	e51b1018 	ldr	r1, [fp, #-24]
    d580:	e51b2014 	ldr	r2, [fp, #-20]
    d584:	ebffffc3 	bl	d498 <m_getIndex_i32>
    d588:	e1a03000 	mov	r3, r0
    d58c:	e1a03183 	lsl	r3, r3, #3
    d590:	e59b2004 	ldr	r2, [fp, #4]
    d594:	e0823003 	add	r3, r2, r3
    d598:	ed937b00 	vldr	d7, [r3]
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
			{
				for(l_innerCounter_ui32=0;l_innerCounter_ui32<f_nrOfColsA_ui32;l_innerCounter_ui32++)
				{
					l_temporalStorage_f64+=f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_innerCounter_ui32)]*
    d59c:	ee287b07 	vmul.f64	d7, d8, d7
    d5a0:	ed1b6b09 	vldr	d6, [fp, #-36]	; 0xffffffdc
    d5a4:	ee367b07 	vadd.f64	d7, d6, d7
    d5a8:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
			{
				for(l_innerCounter_ui32=0;l_innerCounter_ui32<f_nrOfColsA_ui32;l_innerCounter_ui32++)
    d5ac:	e51b3018 	ldr	r3, [fp, #-24]
    d5b0:	e2833001 	add	r3, r3, #1
    d5b4:	e50b3018 	str	r3, [fp, #-24]
    d5b8:	e51b2018 	ldr	r2, [fp, #-24]
    d5bc:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    d5c0:	e1520003 	cmp	r2, r3
    d5c4:	3affffe2 	bcc	d554 <g_sigMath_matrixMultiplikation_bl+0x80>
				{
					l_temporalStorage_f64+=f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_innerCounter_ui32)]*
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_innerCounter_ui32,l_colCounter_ui32)];
				}
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=l_temporalStorage_f64;
    d5c8:	e59b000c 	ldr	r0, [fp, #12]
    d5cc:	e51b1010 	ldr	r1, [fp, #-16]
    d5d0:	e51b2014 	ldr	r2, [fp, #-20]
    d5d4:	ebffffaf 	bl	d498 <m_getIndex_i32>
    d5d8:	e1a03000 	mov	r3, r0
    d5dc:	e1a03183 	lsl	r3, r3, #3
    d5e0:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    d5e4:	e0821003 	add	r1, r2, r3
    d5e8:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
    d5ec:	e1c120f0 	strd	r2, [r1]
				l_temporalStorage_f64=0;
    d5f0:	e3a02000 	mov	r2, #0
    d5f4:	e3a03000 	mov	r3, #0
    d5f8:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
    d5fc:	e51b3014 	ldr	r3, [fp, #-20]
    d600:	e2833001 	add	r3, r3, #1
    d604:	e50b3014 	str	r3, [fp, #-20]
    d608:	e51b2014 	ldr	r2, [fp, #-20]
    d60c:	e59b300c 	ldr	r3, [fp, #12]
    d610:	e1520003 	cmp	r2, r3
    d614:	3affffcb 	bcc	d548 <g_sigMath_matrixMultiplikation_bl+0x74>

	if(f_nrOfColsA_ui32!=f_nrOfRowsB_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    d618:	e51b3010 	ldr	r3, [fp, #-16]
    d61c:	e2833001 	add	r3, r3, #1
    d620:	e50b3010 	str	r3, [fp, #-16]
    d624:	e51b2010 	ldr	r2, [fp, #-16]
    d628:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    d62c:	e1520003 	cmp	r2, r3
    d630:	3affffc1 	bcc	d53c <g_sigMath_matrixMultiplikation_bl+0x68>
				}
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=l_temporalStorage_f64;
				l_temporalStorage_f64=0;
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    d634:	e3a03000 	mov	r3, #0
	}
}
    d638:	e1a00003 	mov	r0, r3
    d63c:	e24bd00c 	sub	sp, fp, #12
    d640:	ecbd8b02 	vpop	{d8}
    d644:	e8bd8800 	pop	{fp, pc}

0000d648 <g_sigMath_matrixAddition_bl>:
 ***********************************************************************/
unsigned int g_sigMath_matrixAddition_bl(double* f_matrixResult_pf64,
		double* f_matrixA_pf64, unsigned int f_nrOfRowsA_ui32,
		unsigned int f_nrOfColsA_ui32, double* f_matrixB_pf64,
		unsigned int f_nrOfRowsB_ui32, unsigned int f_nrOfColsB_ui32)
		{
    d648:	e92d4810 	push	{r4, fp, lr}
    d64c:	ed2d8b02 	vpush	{d8}
    d650:	e28db010 	add	fp, sp, #16
    d654:	e24dd01c 	sub	sp, sp, #28
    d658:	e50b0020 	str	r0, [fp, #-32]
    d65c:	e50b1024 	str	r1, [fp, #-36]	; 0x24
    d660:	e50b2028 	str	r2, [fp, #-40]	; 0x28
    d664:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
	unsigned int l_rowCounter_ui32=0;
    d668:	e3a03000 	mov	r3, #0
    d66c:	e50b3018 	str	r3, [fp, #-24]
	unsigned int l_colCounter_ui32=0;
    d670:	e3a03000 	mov	r3, #0
    d674:	e50b301c 	str	r3, [fp, #-28]

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
    d678:	e51b202c 	ldr	r2, [fp, #-44]	; 0x2c
    d67c:	e59b300c 	ldr	r3, [fp, #12]
    d680:	e1520003 	cmp	r2, r3
    d684:	0a000005 	beq	d6a0 <g_sigMath_matrixAddition_bl+0x58>
    d688:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    d68c:	e59b3008 	ldr	r3, [fp, #8]
    d690:	e1520003 	cmp	r2, r3
    d694:	0a000001 	beq	d6a0 <g_sigMath_matrixAddition_bl+0x58>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    d698:	e3a03001 	mov	r3, #1
    d69c:	ea000030 	b	d764 <g_sigMath_matrixAddition_bl+0x11c>
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    d6a0:	e3a03000 	mov	r3, #0
    d6a4:	e50b3018 	str	r3, [fp, #-24]
    d6a8:	ea000028 	b	d750 <g_sigMath_matrixAddition_bl+0x108>
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    d6ac:	e3a03000 	mov	r3, #0
    d6b0:	e50b301c 	str	r3, [fp, #-28]
    d6b4:	ea00001e 	b	d734 <g_sigMath_matrixAddition_bl+0xec>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    d6b8:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    d6bc:	e51b1018 	ldr	r1, [fp, #-24]
    d6c0:	e51b201c 	ldr	r2, [fp, #-28]
    d6c4:	ebffff73 	bl	d498 <m_getIndex_i32>
    d6c8:	e1a03000 	mov	r3, r0
    d6cc:	e1a03183 	lsl	r3, r3, #3
    d6d0:	e51b2020 	ldr	r2, [fp, #-32]
    d6d4:	e0824003 	add	r4, r2, r3
						f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+
    d6d8:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    d6dc:	e51b1018 	ldr	r1, [fp, #-24]
    d6e0:	e51b201c 	ldr	r2, [fp, #-28]
    d6e4:	ebffff6b 	bl	d498 <m_getIndex_i32>
    d6e8:	e1a03000 	mov	r3, r0
    d6ec:	e1a03183 	lsl	r3, r3, #3
    d6f0:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
    d6f4:	e0823003 	add	r3, r2, r3
    d6f8:	ed938b00 	vldr	d8, [r3]
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
    d6fc:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    d700:	e51b1018 	ldr	r1, [fp, #-24]
    d704:	e51b201c 	ldr	r2, [fp, #-28]
    d708:	ebffff62 	bl	d498 <m_getIndex_i32>
    d70c:	e1a03000 	mov	r3, r0
    d710:	e1a03183 	lsl	r3, r3, #3
    d714:	e59b2004 	ldr	r2, [fp, #4]
    d718:	e0823003 	add	r3, r2, r3
    d71c:	ed937b00 	vldr	d7, [r3]
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+
    d720:	ee387b07 	vadd.f64	d7, d8, d7
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    d724:	ed847b00 	vstr	d7, [r4]
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    d728:	e51b301c 	ldr	r3, [fp, #-28]
    d72c:	e2833001 	add	r3, r3, #1
    d730:	e50b301c 	str	r3, [fp, #-28]
    d734:	e51b201c 	ldr	r2, [fp, #-28]
    d738:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    d73c:	e1520003 	cmp	r2, r3
    d740:	3affffdc 	bcc	d6b8 <g_sigMath_matrixAddition_bl+0x70>

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    d744:	e51b3018 	ldr	r3, [fp, #-24]
    d748:	e2833001 	add	r3, r3, #1
    d74c:	e50b3018 	str	r3, [fp, #-24]
    d750:	e51b2018 	ldr	r2, [fp, #-24]
    d754:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    d758:	e1520003 	cmp	r2, r3
    d75c:	3affffd2 	bcc	d6ac <g_sigMath_matrixAddition_bl+0x64>
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    d760:	e3a03000 	mov	r3, #0
	}
}
    d764:	e1a00003 	mov	r0, r3
    d768:	e24bd010 	sub	sp, fp, #16
    d76c:	ecbd8b02 	vpop	{d8}
    d770:	e8bd8810 	pop	{r4, fp, pc}

0000d774 <g_sigMath_matrixSubtraktion_bl>:
 ***********************************************************************/
unsigned int g_sigMath_matrixSubtraktion_bl(double* f_matrixResult_pf64,
		double* f_matrixA_pf64, unsigned int f_nrOfRowsA_ui32,
		unsigned int f_nrOfColsA_ui32, double* f_matrixB_pf64,
		unsigned int f_nrOfRowsB_ui32, unsigned int f_nrOfColsB_ui32)
{
    d774:	e92d4810 	push	{r4, fp, lr}
    d778:	ed2d8b02 	vpush	{d8}
    d77c:	e28db010 	add	fp, sp, #16
    d780:	e24dd01c 	sub	sp, sp, #28
    d784:	e50b0020 	str	r0, [fp, #-32]
    d788:	e50b1024 	str	r1, [fp, #-36]	; 0x24
    d78c:	e50b2028 	str	r2, [fp, #-40]	; 0x28
    d790:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
	unsigned int l_rowCounter_ui32=0;
    d794:	e3a03000 	mov	r3, #0
    d798:	e50b3018 	str	r3, [fp, #-24]
	unsigned int l_colCounter_ui32=0;
    d79c:	e3a03000 	mov	r3, #0
    d7a0:	e50b301c 	str	r3, [fp, #-28]

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
    d7a4:	e51b202c 	ldr	r2, [fp, #-44]	; 0x2c
    d7a8:	e59b300c 	ldr	r3, [fp, #12]
    d7ac:	e1520003 	cmp	r2, r3
    d7b0:	0a000005 	beq	d7cc <g_sigMath_matrixSubtraktion_bl+0x58>
    d7b4:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    d7b8:	e59b3008 	ldr	r3, [fp, #8]
    d7bc:	e1520003 	cmp	r2, r3
    d7c0:	0a000001 	beq	d7cc <g_sigMath_matrixSubtraktion_bl+0x58>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    d7c4:	e3a03001 	mov	r3, #1
    d7c8:	ea000030 	b	d890 <g_sigMath_matrixSubtraktion_bl+0x11c>
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    d7cc:	e3a03000 	mov	r3, #0
    d7d0:	e50b3018 	str	r3, [fp, #-24]
    d7d4:	ea000028 	b	d87c <g_sigMath_matrixSubtraktion_bl+0x108>
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    d7d8:	e3a03000 	mov	r3, #0
    d7dc:	e50b301c 	str	r3, [fp, #-28]
    d7e0:	ea00001e 	b	d860 <g_sigMath_matrixSubtraktion_bl+0xec>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    d7e4:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    d7e8:	e51b1018 	ldr	r1, [fp, #-24]
    d7ec:	e51b201c 	ldr	r2, [fp, #-28]
    d7f0:	ebffff28 	bl	d498 <m_getIndex_i32>
    d7f4:	e1a03000 	mov	r3, r0
    d7f8:	e1a03183 	lsl	r3, r3, #3
    d7fc:	e51b2020 	ldr	r2, [fp, #-32]
    d800:	e0824003 	add	r4, r2, r3
							f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-
    d804:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    d808:	e51b1018 	ldr	r1, [fp, #-24]
    d80c:	e51b201c 	ldr	r2, [fp, #-28]
    d810:	ebffff20 	bl	d498 <m_getIndex_i32>
    d814:	e1a03000 	mov	r3, r0
    d818:	e1a03183 	lsl	r3, r3, #3
    d81c:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
    d820:	e0823003 	add	r3, r2, r3
    d824:	ed938b00 	vldr	d8, [r3]
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
    d828:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    d82c:	e51b1018 	ldr	r1, [fp, #-24]
    d830:	e51b201c 	ldr	r2, [fp, #-28]
    d834:	ebffff17 	bl	d498 <m_getIndex_i32>
    d838:	e1a03000 	mov	r3, r0
    d83c:	e1a03183 	lsl	r3, r3, #3
    d840:	e59b2004 	ldr	r2, [fp, #4]
    d844:	e0823003 	add	r3, r2, r3
    d848:	ed937b00 	vldr	d7, [r3]
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
							f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-
    d84c:	ee387b47 	vsub.f64	d7, d8, d7
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    d850:	ed847b00 	vstr	d7, [r4]
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    d854:	e51b301c 	ldr	r3, [fp, #-28]
    d858:	e2833001 	add	r3, r3, #1
    d85c:	e50b301c 	str	r3, [fp, #-28]
    d860:	e51b201c 	ldr	r2, [fp, #-28]
    d864:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    d868:	e1520003 	cmp	r2, r3
    d86c:	3affffdc 	bcc	d7e4 <g_sigMath_matrixSubtraktion_bl+0x70>

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    d870:	e51b3018 	ldr	r3, [fp, #-24]
    d874:	e2833001 	add	r3, r3, #1
    d878:	e50b3018 	str	r3, [fp, #-24]
    d87c:	e51b2018 	ldr	r2, [fp, #-24]
    d880:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    d884:	e1520003 	cmp	r2, r3
    d888:	3affffd2 	bcc	d7d8 <g_sigMath_matrixSubtraktion_bl+0x64>
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
							f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    d88c:	e3a03000 	mov	r3, #0
	}
}
    d890:	e1a00003 	mov	r0, r3
    d894:	e24bd010 	sub	sp, fp, #16
    d898:	ecbd8b02 	vpop	{d8}
    d89c:	e8bd8810 	pop	{r4, fp, pc}

0000d8a0 <g_sigMath_matrixTransponiert_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixTransponiert_bl(
		double* f_matrixResult_pf64, double* f_matrix_pf64,
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32)
{
    d8a0:	e92d4810 	push	{r4, fp, lr}
    d8a4:	e28db008 	add	fp, sp, #8
    d8a8:	e24dd01c 	sub	sp, sp, #28
    d8ac:	e50b0018 	str	r0, [fp, #-24]
    d8b0:	e50b101c 	str	r1, [fp, #-28]
    d8b4:	e50b2020 	str	r2, [fp, #-32]
    d8b8:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	unsigned int l_rowCounter_ui32=0;
    d8bc:	e3a03000 	mov	r3, #0
    d8c0:	e50b3010 	str	r3, [fp, #-16]
	unsigned int l_colCounter_ui32=0;
    d8c4:	e3a03000 	mov	r3, #0
    d8c8:	e50b3014 	str	r3, [fp, #-20]

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    d8cc:	e3a03000 	mov	r3, #0
    d8d0:	e50b3010 	str	r3, [fp, #-16]
    d8d4:	ea00001e 	b	d954 <g_sigMath_matrixTransponiert_bl+0xb4>
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    d8d8:	e3a03000 	mov	r3, #0
    d8dc:	e50b3014 	str	r3, [fp, #-20]
    d8e0:	ea000014 	b	d938 <g_sigMath_matrixTransponiert_bl+0x98>
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_colCounter_ui32,l_rowCounter_ui32)]=
    d8e4:	e51b0024 	ldr	r0, [fp, #-36]	; 0x24
    d8e8:	e51b1014 	ldr	r1, [fp, #-20]
    d8ec:	e51b2010 	ldr	r2, [fp, #-16]
    d8f0:	ebfffee8 	bl	d498 <m_getIndex_i32>
    d8f4:	e1a03000 	mov	r3, r0
    d8f8:	e1a03183 	lsl	r3, r3, #3
    d8fc:	e51b2018 	ldr	r2, [fp, #-24]
    d900:	e0824003 	add	r4, r2, r3
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
    d904:	e51b0024 	ldr	r0, [fp, #-36]	; 0x24
    d908:	e51b1010 	ldr	r1, [fp, #-16]
    d90c:	e51b2014 	ldr	r2, [fp, #-20]
    d910:	ebfffee0 	bl	d498 <m_getIndex_i32>
    d914:	e1a03000 	mov	r3, r0
    d918:	e1a03183 	lsl	r3, r3, #3
    d91c:	e51b201c 	ldr	r2, [fp, #-28]
    d920:	e0823003 	add	r3, r2, r3
    d924:	e1c320d0 	ldrd	r2, [r3]

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_colCounter_ui32,l_rowCounter_ui32)]=
    d928:	e1c420f0 	strd	r2, [r4]
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    d92c:	e51b3014 	ldr	r3, [fp, #-20]
    d930:	e2833001 	add	r3, r3, #1
    d934:	e50b3014 	str	r3, [fp, #-20]
    d938:	e51b2014 	ldr	r2, [fp, #-20]
    d93c:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
    d940:	e1520003 	cmp	r2, r3
    d944:	3affffe6 	bcc	d8e4 <g_sigMath_matrixTransponiert_bl+0x44>
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32)
{
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    d948:	e51b3010 	ldr	r3, [fp, #-16]
    d94c:	e2833001 	add	r3, r3, #1
    d950:	e50b3010 	str	r3, [fp, #-16]
    d954:	e51b2010 	ldr	r2, [fp, #-16]
    d958:	e51b3020 	ldr	r3, [fp, #-32]
    d95c:	e1520003 	cmp	r2, r3
    d960:	3affffdc 	bcc	d8d8 <g_sigMath_matrixTransponiert_bl+0x38>
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_colCounter_ui32,l_rowCounter_ui32)]=
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
		}
	}
	return M_SIG_MATRIXLIB_SUCCESS_BL;
    d964:	e3a03000 	mov	r3, #0
}
    d968:	e1a00003 	mov	r0, r3
    d96c:	e24bd008 	sub	sp, fp, #8
    d970:	e8bd8810 	pop	{r4, fp, pc}

0000d974 <g_sigMath_matrixInverse_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixInverse_bl(double* f_matrixResult_pf64,
		double* f_matrixA_pf64, unsigned int f_nrOfRowsA_ui32,
		unsigned int f_nrOfColsA_ui32)
{
    d974:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d978:	ed2d8b02 	vpush	{d8}
    d97c:	e28db028 	add	fp, sp, #40	; 0x28
    d980:	e24dd0a4 	sub	sp, sp, #164	; 0xa4
    d984:	e50b0078 	str	r0, [fp, #-120]	; 0x78
    d988:	e50b107c 	str	r1, [fp, #-124]	; 0x7c
    d98c:	e50b2080 	str	r2, [fp, #-128]	; 0x80
    d990:	e50b3084 	str	r3, [fp, #-132]	; 0x84
    d994:	e1a0300d 	mov	r3, sp
    d998:	e1a0a003 	mov	sl, r3
	int l_rowCounter_ui32=0;
    d99c:	e3a03000 	mov	r3, #0
    d9a0:	e50b3030 	str	r3, [fp, #-48]	; 0x30
	int l_rowCounterInnerLoop_ui32=0;
    d9a4:	e3a03000 	mov	r3, #0
    d9a8:	e50b3034 	str	r3, [fp, #-52]	; 0x34
	int l_colCounter_ui32=0;
    d9ac:	e3a03000 	mov	r3, #0
    d9b0:	e50b3038 	str	r3, [fp, #-56]	; 0x38
	double l_tempValue_f64=0;
    d9b4:	e3a02000 	mov	r2, #0
    d9b8:	e3a03000 	mov	r3, #0
    d9bc:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	//double l_determinant_f64=0;
	//Matrix for building a lower triangular matrix
	double l_lowerTriangularMatrix_f64[f_nrOfRowsA_ui32][f_nrOfColsA_ui32];
    d9c0:	e51b8084 	ldr	r8, [fp, #-132]	; 0x84
    d9c4:	e51b9080 	ldr	r9, [fp, #-128]	; 0x80
    d9c8:	e1a03008 	mov	r3, r8
    d9cc:	e2433001 	sub	r3, r3, #1
    d9d0:	e50b3048 	str	r3, [fp, #-72]	; 0x48
    d9d4:	e1a02008 	mov	r2, r8
    d9d8:	e3a03000 	mov	r3, #0
    d9dc:	e1a05303 	lsl	r5, r3, #6
    d9e0:	e1855d22 	orr	r5, r5, r2, lsr #26
    d9e4:	e1a04302 	lsl	r4, r2, #6
    d9e8:	e1a03009 	mov	r3, r9
    d9ec:	e2433001 	sub	r3, r3, #1
    d9f0:	e50b304c 	str	r3, [fp, #-76]	; 0x4c
    d9f4:	e1a00008 	mov	r0, r8
    d9f8:	e3a01000 	mov	r1, #0
    d9fc:	e1a02009 	mov	r2, r9
    da00:	e3a03000 	mov	r3, #0
    da04:	e00e0192 	mul	lr, r2, r1
    da08:	e00c0390 	mul	ip, r0, r3
    da0c:	e08ec00c 	add	ip, lr, ip
    da10:	e0832290 	umull	r2, r3, r0, r2
    da14:	e08c1003 	add	r1, ip, r3
    da18:	e1a03001 	mov	r3, r1
    da1c:	e1a07303 	lsl	r7, r3, #6
    da20:	e1877d22 	orr	r7, r7, r2, lsr #26
    da24:	e1a06302 	lsl	r6, r2, #6
    da28:	e1a00008 	mov	r0, r8
    da2c:	e3a01000 	mov	r1, #0
    da30:	e1a02009 	mov	r2, r9
    da34:	e3a03000 	mov	r3, #0
    da38:	e00e0192 	mul	lr, r2, r1
    da3c:	e00c0390 	mul	ip, r0, r3
    da40:	e08ec00c 	add	ip, lr, ip
    da44:	e0832290 	umull	r2, r3, r0, r2
    da48:	e08c1003 	add	r1, ip, r3
    da4c:	e1a03001 	mov	r3, r1
    da50:	e1a01303 	lsl	r1, r3, #6
    da54:	e50b1088 	str	r1, [fp, #-136]	; 0x88
    da58:	e51b1088 	ldr	r1, [fp, #-136]	; 0x88
    da5c:	e1811d22 	orr	r1, r1, r2, lsr #26
    da60:	e50b1088 	str	r1, [fp, #-136]	; 0x88
    da64:	e1a01302 	lsl	r1, r2, #6
    da68:	e0030899 	mul	r3, r9, r8
    da6c:	e1a03183 	lsl	r3, r3, #3
    da70:	e2833007 	add	r3, r3, #7
    da74:	e2833007 	add	r3, r3, #7
    da78:	e1a031a3 	lsr	r3, r3, #3
    da7c:	e1a03183 	lsl	r3, r3, #3
    da80:	e04dd003 	sub	sp, sp, r3
    da84:	e28d3010 	add	r3, sp, #16
    da88:	e2833007 	add	r3, r3, #7
    da8c:	e1a031a3 	lsr	r3, r3, #3
    da90:	e1a03183 	lsl	r3, r3, #3
    da94:	e50b3050 	str	r3, [fp, #-80]	; 0x50
	double* l_lowerTriangularMatrix_pf64=(double*)l_lowerTriangularMatrix_f64;
    da98:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
    da9c:	e50b3054 	str	r3, [fp, #-84]	; 0x54
	//Matrix for solving a system
	double l_lowerInverseTriangularMatrix_f64[f_nrOfRowsA_ui32][f_nrOfColsA_ui32];
    daa0:	e51b4084 	ldr	r4, [fp, #-132]	; 0x84
    daa4:	e51b5080 	ldr	r5, [fp, #-128]	; 0x80
    daa8:	e1a03004 	mov	r3, r4
    daac:	e2433001 	sub	r3, r3, #1
    dab0:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    dab4:	e1a02004 	mov	r2, r4
    dab8:	e3a03000 	mov	r3, #0
    dabc:	e1a01303 	lsl	r1, r3, #6
    dac0:	e50b1090 	str	r1, [fp, #-144]	; 0x90
    dac4:	e51b1090 	ldr	r1, [fp, #-144]	; 0x90
    dac8:	e1811d22 	orr	r1, r1, r2, lsr #26
    dacc:	e50b1090 	str	r1, [fp, #-144]	; 0x90
    dad0:	e1a01302 	lsl	r1, r2, #6
    dad4:	e1a03005 	mov	r3, r5
    dad8:	e2433001 	sub	r3, r3, #1
    dadc:	e50b305c 	str	r3, [fp, #-92]	; 0x5c
    dae0:	e1a00004 	mov	r0, r4
    dae4:	e3a01000 	mov	r1, #0
    dae8:	e1a02005 	mov	r2, r5
    daec:	e3a03000 	mov	r3, #0
    daf0:	e00e0192 	mul	lr, r2, r1
    daf4:	e00c0390 	mul	ip, r0, r3
    daf8:	e08ec00c 	add	ip, lr, ip
    dafc:	e0832290 	umull	r2, r3, r0, r2
    db00:	e08c1003 	add	r1, ip, r3
    db04:	e1a03001 	mov	r3, r1
    db08:	e1a01303 	lsl	r1, r3, #6
    db0c:	e50b1098 	str	r1, [fp, #-152]	; 0x98
    db10:	e51b1098 	ldr	r1, [fp, #-152]	; 0x98
    db14:	e1811d22 	orr	r1, r1, r2, lsr #26
    db18:	e50b1098 	str	r1, [fp, #-152]	; 0x98
    db1c:	e1a01302 	lsl	r1, r2, #6
    db20:	e1a02004 	mov	r2, r4
    db24:	e3a03000 	mov	r3, #0
    db28:	e1a00005 	mov	r0, r5
    db2c:	e3a01000 	mov	r1, #0
    db30:	e00e0390 	mul	lr, r0, r3
    db34:	e00c0192 	mul	ip, r2, r1
    db38:	e08ec00c 	add	ip, lr, ip
    db3c:	e0832092 	umull	r2, r3, r2, r0
    db40:	e08c1003 	add	r1, ip, r3
    db44:	e1a03001 	mov	r3, r1
    db48:	e1a01303 	lsl	r1, r3, #6
    db4c:	e50b10a0 	str	r1, [fp, #-160]	; 0xa0
    db50:	e51b10a0 	ldr	r1, [fp, #-160]	; 0xa0
    db54:	e1811d22 	orr	r1, r1, r2, lsr #26
    db58:	e50b10a0 	str	r1, [fp, #-160]	; 0xa0
    db5c:	e1a01302 	lsl	r1, r2, #6
    db60:	e0030495 	mul	r3, r5, r4
    db64:	e1a03183 	lsl	r3, r3, #3
    db68:	e2833007 	add	r3, r3, #7
    db6c:	e2833007 	add	r3, r3, #7
    db70:	e1a031a3 	lsr	r3, r3, #3
    db74:	e1a03183 	lsl	r3, r3, #3
    db78:	e04dd003 	sub	sp, sp, r3
    db7c:	e28d3010 	add	r3, sp, #16
    db80:	e2833007 	add	r3, r3, #7
    db84:	e1a031a3 	lsr	r3, r3, #3
    db88:	e1a03183 	lsl	r3, r3, #3
    db8c:	e50b3060 	str	r3, [fp, #-96]	; 0x60
	double* l_lowerInverseTriangularMatrix_pf64=(double*)l_lowerInverseTriangularMatrix_f64;
    db90:	e51b3060 	ldr	r3, [fp, #-96]	; 0x60
    db94:	e50b3064 	str	r3, [fp, #-100]	; 0x64

	double l_eyeMatrix_f64[f_nrOfRowsA_ui32][f_nrOfColsA_ui32];
    db98:	e51bc084 	ldr	ip, [fp, #-132]	; 0x84
    db9c:	e51be080 	ldr	lr, [fp, #-128]	; 0x80
    dba0:	e1a0300c 	mov	r3, ip
    dba4:	e2433001 	sub	r3, r3, #1
    dba8:	e50b3068 	str	r3, [fp, #-104]	; 0x68
    dbac:	e1a0200c 	mov	r2, ip
    dbb0:	e3a03000 	mov	r3, #0
    dbb4:	e1a01303 	lsl	r1, r3, #6
    dbb8:	e50b10a8 	str	r1, [fp, #-168]	; 0xa8
    dbbc:	e51b10a8 	ldr	r1, [fp, #-168]	; 0xa8
    dbc0:	e1811d22 	orr	r1, r1, r2, lsr #26
    dbc4:	e50b10a8 	str	r1, [fp, #-168]	; 0xa8
    dbc8:	e1a01302 	lsl	r1, r2, #6
    dbcc:	e1a0300e 	mov	r3, lr
    dbd0:	e2433001 	sub	r3, r3, #1
    dbd4:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    dbd8:	e1a0000c 	mov	r0, ip
    dbdc:	e3a01000 	mov	r1, #0
    dbe0:	e1a0200e 	mov	r2, lr
    dbe4:	e3a03000 	mov	r3, #0
    dbe8:	e0050192 	mul	r5, r2, r1
    dbec:	e0040390 	mul	r4, r0, r3
    dbf0:	e0854004 	add	r4, r5, r4
    dbf4:	e0832290 	umull	r2, r3, r0, r2
    dbf8:	e0841003 	add	r1, r4, r3
    dbfc:	e1a03001 	mov	r3, r1
    dc00:	e1a01303 	lsl	r1, r3, #6
    dc04:	e50b10b0 	str	r1, [fp, #-176]	; 0xb0
    dc08:	e51b10b0 	ldr	r1, [fp, #-176]	; 0xb0
    dc0c:	e1811d22 	orr	r1, r1, r2, lsr #26
    dc10:	e50b10b0 	str	r1, [fp, #-176]	; 0xb0
    dc14:	e1a01302 	lsl	r1, r2, #6
    dc18:	e1a0000c 	mov	r0, ip
    dc1c:	e3a01000 	mov	r1, #0
    dc20:	e1a0200e 	mov	r2, lr
    dc24:	e3a03000 	mov	r3, #0
    dc28:	e0050192 	mul	r5, r2, r1
    dc2c:	e0040390 	mul	r4, r0, r3
    dc30:	e0854004 	add	r4, r5, r4
    dc34:	e0832290 	umull	r2, r3, r0, r2
    dc38:	e0841003 	add	r1, r4, r3
    dc3c:	e1a03001 	mov	r3, r1
    dc40:	e1a01303 	lsl	r1, r3, #6
    dc44:	e50b10b8 	str	r1, [fp, #-184]	; 0xb8
    dc48:	e51b10b8 	ldr	r1, [fp, #-184]	; 0xb8
    dc4c:	e1811d22 	orr	r1, r1, r2, lsr #26
    dc50:	e50b10b8 	str	r1, [fp, #-184]	; 0xb8
    dc54:	e1a01302 	lsl	r1, r2, #6
    dc58:	e0030c9e 	mul	r3, lr, ip
    dc5c:	e1a03183 	lsl	r3, r3, #3
    dc60:	e2833007 	add	r3, r3, #7
    dc64:	e2833007 	add	r3, r3, #7
    dc68:	e1a031a3 	lsr	r3, r3, #3
    dc6c:	e1a03183 	lsl	r3, r3, #3
    dc70:	e04dd003 	sub	sp, sp, r3
    dc74:	e28d3010 	add	r3, sp, #16
    dc78:	e2833007 	add	r3, r3, #7
    dc7c:	e1a031a3 	lsr	r3, r3, #3
    dc80:	e1a03183 	lsl	r3, r3, #3
    dc84:	e50b3070 	str	r3, [fp, #-112]	; 0x70
	double* l_eyeMatrix_pf64=(double*)l_eyeMatrix_f64;
    dc88:	e51b3070 	ldr	r3, [fp, #-112]	; 0x70
    dc8c:	e50b3074 	str	r3, [fp, #-116]	; 0x74

	if(f_nrOfRowsA_ui32!=f_nrOfColsA_ui32)
    dc90:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
    dc94:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    dc98:	e1520003 	cmp	r2, r3
    dc9c:	0a000001 	beq	dca8 <g_sigMath_matrixInverse_bl+0x334>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    dca0:	e3a03001 	mov	r3, #1
    dca4:	ea00013b 	b	e198 <g_sigMath_matrixInverse_bl+0x824>


	//Cholesky for building the lower triangular matrix
	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    dca8:	e3a03000 	mov	r3, #0
    dcac:	e50b3038 	str	r3, [fp, #-56]	; 0x38
    dcb0:	ea0000a8 	b	df58 <g_sigMath_matrixInverse_bl+0x5e4>
	{
		for(l_rowCounter_ui32=l_colCounter_ui32;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    dcb4:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    dcb8:	e50b3030 	str	r3, [fp, #-48]	; 0x30
    dcbc:	ea00009e 	b	df3c <g_sigMath_matrixInverse_bl+0x5c8>
		{
			if(l_rowCounter_ui32==l_colCounter_ui32)
    dcc0:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    dcc4:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    dcc8:	e1520003 	cmp	r2, r3
    dccc:	1a00004c 	bne	de04 <g_sigMath_matrixInverse_bl+0x490>
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
    dcd0:	e3a03000 	mov	r3, #0
    dcd4:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    dcd8:	ea000014 	b	dd30 <g_sigMath_matrixInverse_bl+0x3bc>
				{
					l_tempValue_f64+=pow(l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)],2);
    dcdc:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    dce0:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    dce4:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    dce8:	e1a01002 	mov	r1, r2
    dcec:	e1a02003 	mov	r2, r3
    dcf0:	ebfffde8 	bl	d498 <m_getIndex_i32>
    dcf4:	e1a03000 	mov	r3, r0
    dcf8:	e1a03183 	lsl	r3, r3, #3
    dcfc:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    dd00:	e0823003 	add	r3, r2, r3
    dd04:	ed937b00 	vldr	d7, [r3]
    dd08:	eeb00b47 	vmov.f64	d0, d7
    dd0c:	ed9f1bab 	vldr	d1, [pc, #684]	; dfc0 <g_sigMath_matrixInverse_bl+0x64c>
    dd10:	ebffeaf5 	bl	88ec <_init+0x5c>
    dd14:	eeb07b40 	vmov.f64	d7, d0
    dd18:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
    dd1c:	ee367b07 	vadd.f64	d7, d6, d7
    dd20:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc
	{
		for(l_rowCounter_ui32=l_colCounter_ui32;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			if(l_rowCounter_ui32==l_colCounter_ui32)
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
    dd24:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    dd28:	e2833001 	add	r3, r3, #1
    dd2c:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    dd30:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    dd34:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    dd38:	e1520003 	cmp	r2, r3
    dd3c:	baffffe6 	blt	dcdc <g_sigMath_matrixInverse_bl+0x368>
				{
					l_tempValue_f64+=pow(l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)],2);
				}
				if(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64<0)
    dd40:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    dd44:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    dd48:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    dd4c:	e1a01002 	mov	r1, r2
    dd50:	e1a02003 	mov	r2, r3
    dd54:	ebfffdcf 	bl	d498 <m_getIndex_i32>
    dd58:	e1a03000 	mov	r3, r0
    dd5c:	e1a03183 	lsl	r3, r3, #3
    dd60:	e51b207c 	ldr	r2, [fp, #-124]	; 0x7c
    dd64:	e0823003 	add	r3, r2, r3
    dd68:	ed936b00 	vldr	d6, [r3]
    dd6c:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    dd70:	ee367b47 	vsub.f64	d7, d6, d7
    dd74:	eeb57bc0 	vcmpe.f64	d7, #0.0
    dd78:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    dd7c:	5a000001 	bpl	dd88 <g_sigMath_matrixInverse_bl+0x414>
				{return M_SIG_MATRIXLIB_FAILED_BL;}
    dd80:	e3a03001 	mov	r3, #1
    dd84:	ea000103 	b	e198 <g_sigMath_matrixInverse_bl+0x824>

				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    dd88:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    dd8c:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    dd90:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    dd94:	e1a01002 	mov	r1, r2
    dd98:	e1a02003 	mov	r2, r3
    dd9c:	ebfffdbd 	bl	d498 <m_getIndex_i32>
    dda0:	e1a03000 	mov	r3, r0
    dda4:	e1a03183 	lsl	r3, r3, #3
    dda8:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    ddac:	e0824003 	add	r4, r2, r3
						sqrt(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64);
    ddb0:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    ddb4:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    ddb8:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    ddbc:	e1a01002 	mov	r1, r2
    ddc0:	e1a02003 	mov	r2, r3
    ddc4:	ebfffdb3 	bl	d498 <m_getIndex_i32>
    ddc8:	e1a03000 	mov	r3, r0
    ddcc:	e1a03183 	lsl	r3, r3, #3
    ddd0:	e51b207c 	ldr	r2, [fp, #-124]	; 0x7c
    ddd4:	e0823003 	add	r3, r2, r3
    ddd8:	ed936b00 	vldr	d6, [r3]
    dddc:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    dde0:	ee367b47 	vsub.f64	d7, d6, d7
    dde4:	eeb00b47 	vmov.f64	d0, d7
    dde8:	ebffeace 	bl	8928 <_init+0x98>
    ddec:	eeb07b40 	vmov.f64	d7, d0
					l_tempValue_f64+=pow(l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)],2);
				}
				if(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64<0)
				{return M_SIG_MATRIXLIB_FAILED_BL;}

				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    ddf0:	ed847b00 	vstr	d7, [r4]
						sqrt(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64);

				l_tempValue_f64=0;
    ddf4:	e3a02000 	mov	r2, #0
    ddf8:	e3a03000 	mov	r3, #0
    ddfc:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
    de00:	ea00004a 	b	df30 <g_sigMath_matrixInverse_bl+0x5bc>
			}
			else
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
    de04:	e3a03000 	mov	r3, #0
    de08:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    de0c:	ea00001c 	b	de84 <g_sigMath_matrixInverse_bl+0x510>
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
    de10:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    de14:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    de18:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    de1c:	e1a01002 	mov	r1, r2
    de20:	e1a02003 	mov	r2, r3
    de24:	ebfffd9b 	bl	d498 <m_getIndex_i32>
    de28:	e1a03000 	mov	r3, r0
    de2c:	e1a03183 	lsl	r3, r3, #3
    de30:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    de34:	e0823003 	add	r3, r2, r3
    de38:	ed938b00 	vldr	d8, [r3]
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
    de3c:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    de40:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    de44:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    de48:	e1a01002 	mov	r1, r2
    de4c:	e1a02003 	mov	r2, r3
    de50:	ebfffd90 	bl	d498 <m_getIndex_i32>
    de54:	e1a03000 	mov	r3, r0
    de58:	e1a03183 	lsl	r3, r3, #3
    de5c:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    de60:	e0823003 	add	r3, r2, r3
    de64:	ed937b00 	vldr	d7, [r3]
			}
			else
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
    de68:	ee287b07 	vmul.f64	d7, d8, d7
    de6c:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
    de70:	ee367b07 	vadd.f64	d7, d6, d7
    de74:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc

				l_tempValue_f64=0;
			}
			else
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
    de78:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    de7c:	e2833001 	add	r3, r3, #1
    de80:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    de84:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    de88:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    de8c:	e1520003 	cmp	r2, r3
    de90:	baffffde 	blt	de10 <g_sigMath_matrixInverse_bl+0x49c>
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
				}
				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    de94:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    de98:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    de9c:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    dea0:	e1a01002 	mov	r1, r2
    dea4:	e1a02003 	mov	r2, r3
    dea8:	ebfffd7a 	bl	d498 <m_getIndex_i32>
    deac:	e1a03000 	mov	r3, r0
    deb0:	e1a03183 	lsl	r3, r3, #3
    deb4:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    deb8:	e0824003 	add	r4, r2, r3
										(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64)/
    debc:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    dec0:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    dec4:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    dec8:	e1a01002 	mov	r1, r2
    decc:	e1a02003 	mov	r2, r3
    ded0:	ebfffd70 	bl	d498 <m_getIndex_i32>
    ded4:	e1a03000 	mov	r3, r0
    ded8:	e1a03183 	lsl	r3, r3, #3
    dedc:	e51b207c 	ldr	r2, [fp, #-124]	; 0x7c
    dee0:	e0823003 	add	r3, r2, r3
    dee4:	ed936b00 	vldr	d6, [r3]
    dee8:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    deec:	ee368b47 	vsub.f64	d8, d6, d7
										l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)];
    def0:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    def4:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    def8:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    defc:	e1a01002 	mov	r1, r2
    df00:	e1a02003 	mov	r2, r3
    df04:	ebfffd63 	bl	d498 <m_getIndex_i32>
    df08:	e1a03000 	mov	r3, r0
    df0c:	e1a03183 	lsl	r3, r3, #3
    df10:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    df14:	e0823003 	add	r3, r2, r3
    df18:	ed937b00 	vldr	d7, [r3]
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
				}
				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
										(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64)/
    df1c:	ee887b07 	vdiv.f64	d7, d8, d7
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
				}
				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    df20:	ed847b00 	vstr	d7, [r4]
										(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64)/
										l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)];
				l_tempValue_f64=0;
    df24:	e3a02000 	mov	r2, #0
    df28:	e3a03000 	mov	r3, #0
    df2c:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc


	//Cholesky for building the lower triangular matrix
	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=l_colCounter_ui32;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    df30:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    df34:	e2833001 	add	r3, r3, #1
    df38:	e50b3030 	str	r3, [fp, #-48]	; 0x30
    df3c:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    df40:	e51b3080 	ldr	r3, [fp, #-128]	; 0x80
    df44:	e1520003 	cmp	r2, r3
    df48:	3affff5c 	bcc	dcc0 <g_sigMath_matrixInverse_bl+0x34c>
	if(f_nrOfRowsA_ui32!=f_nrOfColsA_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}


	//Cholesky for building the lower triangular matrix
	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    df4c:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    df50:	e2833001 	add	r3, r3, #1
    df54:	e50b3038 	str	r3, [fp, #-56]	; 0x38
    df58:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    df5c:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    df60:	e1520003 	cmp	r2, r3
    df64:	3affff52 	bcc	dcb4 <g_sigMath_matrixInverse_bl+0x340>
//	}
//	l_determinant_f64=pow(l_determinant_f64,2);

//solve linear system

	if(g_sigMath_matrixEye_bl(l_eyeMatrix_f64[0],f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
    df68:	e51b3070 	ldr	r3, [fp, #-112]	; 0x70
    df6c:	e1a00003 	mov	r0, r3
    df70:	e51b1080 	ldr	r1, [fp, #-128]	; 0x80
    df74:	e51b2084 	ldr	r2, [fp, #-132]	; 0x84
    df78:	eb0000f7 	bl	e35c <g_sigMath_matrixEye_bl>
    df7c:	e1a03000 	mov	r3, r0
    df80:	e3530000 	cmp	r3, #0
    df84:	0a000001 	beq	df90 <g_sigMath_matrixInverse_bl+0x61c>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    df88:	e3a03001 	mov	r3, #1
    df8c:	ea000081 	b	e198 <g_sigMath_matrixInverse_bl+0x824>
	l_tempValue_f64=0;
    df90:	e3a02000 	mov	r2, #0
    df94:	e3a03000 	mov	r3, #0
    df98:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    df9c:	e3a03000 	mov	r3, #0
    dfa0:	e50b3038 	str	r3, [fp, #-56]	; 0x38
    dfa4:	ea000059 	b	e110 <g_sigMath_matrixInverse_bl+0x79c>
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    dfa8:	e3a03000 	mov	r3, #0
    dfac:	e50b3030 	str	r3, [fp, #-48]	; 0x30
    dfb0:	ea00004f 	b	e0f4 <g_sigMath_matrixInverse_bl+0x780>
		{
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
    dfb4:	e3a03000 	mov	r3, #0
    dfb8:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    dfbc:	ea00001e 	b	e03c <g_sigMath_matrixInverse_bl+0x6c8>
    dfc0:	00000000 	.word	0x00000000
    dfc4:	40000000 	.word	0x40000000
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
    dfc8:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    dfcc:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    dfd0:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    dfd4:	e1a01002 	mov	r1, r2
    dfd8:	e1a02003 	mov	r2, r3
    dfdc:	ebfffd2d 	bl	d498 <m_getIndex_i32>
    dfe0:	e1a03000 	mov	r3, r0
    dfe4:	e1a03183 	lsl	r3, r3, #3
    dfe8:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    dfec:	e0823003 	add	r3, r2, r3
    dff0:	ed938b00 	vldr	d8, [r3]
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
    dff4:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    dff8:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    dffc:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    e000:	e1a01002 	mov	r1, r2
    e004:	e1a02003 	mov	r2, r3
    e008:	ebfffd22 	bl	d498 <m_getIndex_i32>
    e00c:	e1a03000 	mov	r3, r0
    e010:	e1a03183 	lsl	r3, r3, #3
    e014:	e51b2064 	ldr	r2, [fp, #-100]	; 0x64
    e018:	e0823003 	add	r3, r2, r3
    e01c:	ed937b00 	vldr	d7, [r3]
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
    e020:	ee287b07 	vmul.f64	d7, d8, d7
    e024:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
    e028:	ee367b47 	vsub.f64	d7, d6, d7
    e02c:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
    e030:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    e034:	e2833001 	add	r3, r3, #1
    e038:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    e03c:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    e040:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    e044:	e1520003 	cmp	r2, r3
    e048:	baffffde 	blt	dfc8 <g_sigMath_matrixInverse_bl+0x654>
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
			}
			l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    e04c:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    e050:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e054:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    e058:	e1a01002 	mov	r1, r2
    e05c:	e1a02003 	mov	r2, r3
    e060:	ebfffd0c 	bl	d498 <m_getIndex_i32>
    e064:	e1a03000 	mov	r3, r0
    e068:	e1a03183 	lsl	r3, r3, #3
    e06c:	e51b2064 	ldr	r2, [fp, #-100]	; 0x64
    e070:	e0824003 	add	r4, r2, r3
						(l_eyeMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+l_tempValue_f64)/
    e074:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    e078:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e07c:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    e080:	e1a01002 	mov	r1, r2
    e084:	e1a02003 	mov	r2, r3
    e088:	ebfffd02 	bl	d498 <m_getIndex_i32>
    e08c:	e1a03000 	mov	r3, r0
    e090:	e1a03183 	lsl	r3, r3, #3
    e094:	e51b2074 	ldr	r2, [fp, #-116]	; 0x74
    e098:	e0823003 	add	r3, r2, r3
    e09c:	ed936b00 	vldr	d6, [r3]
    e0a0:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    e0a4:	ee368b07 	vadd.f64	d8, d6, d7
						l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounter_ui32)];
    e0a8:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    e0ac:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    e0b0:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    e0b4:	e1a01002 	mov	r1, r2
    e0b8:	e1a02003 	mov	r2, r3
    e0bc:	ebfffcf5 	bl	d498 <m_getIndex_i32>
    e0c0:	e1a03000 	mov	r3, r0
    e0c4:	e1a03183 	lsl	r3, r3, #3
    e0c8:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    e0cc:	e0823003 	add	r3, r2, r3
    e0d0:	ed937b00 	vldr	d7, [r3]
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
			}
			l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						(l_eyeMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+l_tempValue_f64)/
    e0d4:	ee887b07 	vdiv.f64	d7, d8, d7
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
			}
			l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    e0d8:	ed847b00 	vstr	d7, [r4]
						(l_eyeMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+l_tempValue_f64)/
						l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounter_ui32)];
			l_tempValue_f64=0;
    e0dc:	e3a02000 	mov	r2, #0
    e0e0:	e3a03000 	mov	r3, #0
    e0e4:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	l_tempValue_f64=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    e0e8:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    e0ec:	e2833001 	add	r3, r3, #1
    e0f0:	e50b3030 	str	r3, [fp, #-48]	; 0x30
    e0f4:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    e0f8:	e51b3080 	ldr	r3, [fp, #-128]	; 0x80
    e0fc:	e1520003 	cmp	r2, r3
    e100:	3affffab 	bcc	dfb4 <g_sigMath_matrixInverse_bl+0x640>

	if(g_sigMath_matrixEye_bl(l_eyeMatrix_f64[0],f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	l_tempValue_f64=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    e104:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e108:	e2833001 	add	r3, r3, #1
    e10c:	e50b3038 	str	r3, [fp, #-56]	; 0x38
    e110:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    e114:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    e118:	e1520003 	cmp	r2, r3
    e11c:	3affffa1 	bcc	dfa8 <g_sigMath_matrixInverse_bl+0x634>
						l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounter_ui32)];
			l_tempValue_f64=0;
		}
	}

	if(g_sigMath_matrixTransponiert_bl((double*)l_lowerTriangularMatrix_f64,(double*)l_lowerInverseTriangularMatrix_f64,
    e120:	e51b2050 	ldr	r2, [fp, #-80]	; 0x50
    e124:	e51b3060 	ldr	r3, [fp, #-96]	; 0x60
    e128:	e1a00002 	mov	r0, r2
    e12c:	e1a01003 	mov	r1, r3
    e130:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
    e134:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    e138:	ebfffdd8 	bl	d8a0 <g_sigMath_matrixTransponiert_bl>
    e13c:	e1a03000 	mov	r3, r0
    e140:	e3530000 	cmp	r3, #0
    e144:	0a000001 	beq	e150 <g_sigMath_matrixInverse_bl+0x7dc>
				f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    e148:	e3a03001 	mov	r3, #1
    e14c:	ea000011 	b	e198 <g_sigMath_matrixInverse_bl+0x824>

	if(g_sigMath_matrixMultiplikation_bl((double*)f_matrixResult_pf64,(double*)l_lowerTriangularMatrix_f64 ,
    e150:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
			f_nrOfRowsA_ui32,f_nrOfColsA_ui32,(double*)l_lowerInverseTriangularMatrix_f64,f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
    e154:	e51b2060 	ldr	r2, [fp, #-96]	; 0x60

	if(g_sigMath_matrixTransponiert_bl((double*)l_lowerTriangularMatrix_f64,(double*)l_lowerInverseTriangularMatrix_f64,
				f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}

	if(g_sigMath_matrixMultiplikation_bl((double*)f_matrixResult_pf64,(double*)l_lowerTriangularMatrix_f64 ,
    e158:	e58d2000 	str	r2, [sp]
    e15c:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
    e160:	e58d2004 	str	r2, [sp, #4]
    e164:	e51b2084 	ldr	r2, [fp, #-132]	; 0x84
    e168:	e58d2008 	str	r2, [sp, #8]
    e16c:	e51b0078 	ldr	r0, [fp, #-120]	; 0x78
    e170:	e1a01003 	mov	r1, r3
    e174:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
    e178:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    e17c:	ebfffcd4 	bl	d4d4 <g_sigMath_matrixMultiplikation_bl>
    e180:	e1a03000 	mov	r3, r0
    e184:	e3530000 	cmp	r3, #0
    e188:	0a000001 	beq	e194 <g_sigMath_matrixInverse_bl+0x820>
			f_nrOfRowsA_ui32,f_nrOfColsA_ui32,(double*)l_lowerInverseTriangularMatrix_f64,f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    e18c:	e3a03001 	mov	r3, #1
    e190:	ea000000 	b	e198 <g_sigMath_matrixInverse_bl+0x824>

	return M_SIG_MATRIXLIB_SUCCESS_BL;
    e194:	e3a03000 	mov	r3, #0
    e198:	e1a0d00a 	mov	sp, sl
}
    e19c:	e1a00003 	mov	r0, r3
    e1a0:	e24bd028 	sub	sp, fp, #40	; 0x28
    e1a4:	ecbd8b02 	vpop	{d8}
    e1a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e1ac <g_sigMath_matrixAssignment_bl>:
 ***********************************************************************/
unsigned int g_sigMath_matrixAssignment_bl(double* f_matrixResult_pf64,
		unsigned int f_nrOfRowsResult_ui32,unsigned int f_nrOfColsResult_ui32,
		double* f_matrix_pf64, unsigned int f_nrOfRows_ui32,
		unsigned int f_nrOfCols_ui32)
{
    e1ac:	e92d4810 	push	{r4, fp, lr}
    e1b0:	e28db008 	add	fp, sp, #8
    e1b4:	e24dd01c 	sub	sp, sp, #28
    e1b8:	e50b0018 	str	r0, [fp, #-24]
    e1bc:	e50b101c 	str	r1, [fp, #-28]
    e1c0:	e50b2020 	str	r2, [fp, #-32]
    e1c4:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	unsigned int l_rowCounter_ui32=0;
    e1c8:	e3a03000 	mov	r3, #0
    e1cc:	e50b3010 	str	r3, [fp, #-16]
	unsigned int l_colCounter_ui32=0;
    e1d0:	e3a03000 	mov	r3, #0
    e1d4:	e50b3014 	str	r3, [fp, #-20]

	if(f_nrOfRows_ui32!=f_nrOfRowsResult_ui32 && f_nrOfCols_ui32!=f_nrOfColsResult_ui32)
    e1d8:	e59b2004 	ldr	r2, [fp, #4]
    e1dc:	e51b301c 	ldr	r3, [fp, #-28]
    e1e0:	e1520003 	cmp	r2, r3
    e1e4:	0a000005 	beq	e200 <g_sigMath_matrixAssignment_bl+0x54>
    e1e8:	e59b2008 	ldr	r2, [fp, #8]
    e1ec:	e51b3020 	ldr	r3, [fp, #-32]
    e1f0:	e1520003 	cmp	r2, r3
    e1f4:	0a000001 	beq	e200 <g_sigMath_matrixAssignment_bl+0x54>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
    e1f8:	e3a03001 	mov	r3, #1
    e1fc:	ea000026 	b	e29c <g_sigMath_matrixAssignment_bl+0xf0>
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    e200:	e3a03000 	mov	r3, #0
    e204:	e50b3014 	str	r3, [fp, #-20]
    e208:	ea00001e 	b	e288 <g_sigMath_matrixAssignment_bl+0xdc>
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    e20c:	e3a03000 	mov	r3, #0
    e210:	e50b3010 	str	r3, [fp, #-16]
    e214:	ea000014 	b	e26c <g_sigMath_matrixAssignment_bl+0xc0>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    e218:	e59b0008 	ldr	r0, [fp, #8]
    e21c:	e51b1010 	ldr	r1, [fp, #-16]
    e220:	e51b2014 	ldr	r2, [fp, #-20]
    e224:	ebfffc9b 	bl	d498 <m_getIndex_i32>
    e228:	e1a03000 	mov	r3, r0
    e22c:	e1a03183 	lsl	r3, r3, #3
    e230:	e51b2018 	ldr	r2, [fp, #-24]
    e234:	e0824003 	add	r4, r2, r3
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
    e238:	e59b0008 	ldr	r0, [fp, #8]
    e23c:	e51b1010 	ldr	r1, [fp, #-16]
    e240:	e51b2014 	ldr	r2, [fp, #-20]
    e244:	ebfffc93 	bl	d498 <m_getIndex_i32>
    e248:	e1a03000 	mov	r3, r0
    e24c:	e1a03183 	lsl	r3, r3, #3
    e250:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
    e254:	e0823003 	add	r3, r2, r3
    e258:	e1c320d0 	ldrd	r2, [r3]
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    e25c:	e1c420f0 	strd	r2, [r4]
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    e260:	e51b3010 	ldr	r3, [fp, #-16]
    e264:	e2833001 	add	r3, r3, #1
    e268:	e50b3010 	str	r3, [fp, #-16]
    e26c:	e51b2010 	ldr	r2, [fp, #-16]
    e270:	e59b3004 	ldr	r3, [fp, #4]
    e274:	e1520003 	cmp	r2, r3
    e278:	3affffe6 	bcc	e218 <g_sigMath_matrixAssignment_bl+0x6c>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    e27c:	e51b3014 	ldr	r3, [fp, #-20]
    e280:	e2833001 	add	r3, r3, #1
    e284:	e50b3014 	str	r3, [fp, #-20]
    e288:	e51b2014 	ldr	r2, [fp, #-20]
    e28c:	e59b3008 	ldr	r3, [fp, #8]
    e290:	e1520003 	cmp	r2, r3
    e294:	3affffdc 	bcc	e20c <g_sigMath_matrixAssignment_bl+0x60>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    e298:	e3a03000 	mov	r3, #0
	}
}
    e29c:	e1a00003 	mov	r0, r3
    e2a0:	e24bd008 	sub	sp, fp, #8
    e2a4:	e8bd8810 	pop	{r4, fp, pc}

0000e2a8 <g_sigMath_matrixInitialize_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixInitialize_bl(double* f_matrixResult_pf64,
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32,
		double f_setValue_f64)
{
    e2a8:	e92d4800 	push	{fp, lr}
    e2ac:	e28db004 	add	fp, sp, #4
    e2b0:	e24dd020 	sub	sp, sp, #32
    e2b4:	e50b0010 	str	r0, [fp, #-16]
    e2b8:	e50b1014 	str	r1, [fp, #-20]
    e2bc:	e50b2018 	str	r2, [fp, #-24]
    e2c0:	ed0b0b09 	vstr	d0, [fp, #-36]	; 0xffffffdc
	unsigned int l_rowCounter_ui32=0;
    e2c4:	e3a03000 	mov	r3, #0
    e2c8:	e50b3008 	str	r3, [fp, #-8]
	unsigned int l_colCounter_ui32=0;
    e2cc:	e3a03000 	mov	r3, #0
    e2d0:	e50b300c 	str	r3, [fp, #-12]

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    e2d4:	e3a03000 	mov	r3, #0
    e2d8:	e50b300c 	str	r3, [fp, #-12]
    e2dc:	ea000016 	b	e33c <g_sigMath_matrixInitialize_bl+0x94>
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    e2e0:	e3a03000 	mov	r3, #0
    e2e4:	e50b3008 	str	r3, [fp, #-8]
    e2e8:	ea00000c 	b	e320 <g_sigMath_matrixInitialize_bl+0x78>
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=f_setValue_f64;
    e2ec:	e51b0018 	ldr	r0, [fp, #-24]
    e2f0:	e51b1008 	ldr	r1, [fp, #-8]
    e2f4:	e51b200c 	ldr	r2, [fp, #-12]
    e2f8:	ebfffc66 	bl	d498 <m_getIndex_i32>
    e2fc:	e1a03000 	mov	r3, r0
    e300:	e1a03183 	lsl	r3, r3, #3
    e304:	e51b2010 	ldr	r2, [fp, #-16]
    e308:	e0821003 	add	r1, r2, r3
    e30c:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
    e310:	e1c120f0 	strd	r2, [r1]
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    e314:	e51b3008 	ldr	r3, [fp, #-8]
    e318:	e2833001 	add	r3, r3, #1
    e31c:	e50b3008 	str	r3, [fp, #-8]
    e320:	e51b2008 	ldr	r2, [fp, #-8]
    e324:	e51b3014 	ldr	r3, [fp, #-20]
    e328:	e1520003 	cmp	r2, r3
    e32c:	3affffee 	bcc	e2ec <g_sigMath_matrixInitialize_bl+0x44>
		double f_setValue_f64)
{
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    e330:	e51b300c 	ldr	r3, [fp, #-12]
    e334:	e2833001 	add	r3, r3, #1
    e338:	e50b300c 	str	r3, [fp, #-12]
    e33c:	e51b200c 	ldr	r2, [fp, #-12]
    e340:	e51b3018 	ldr	r3, [fp, #-24]
    e344:	e1520003 	cmp	r2, r3
    e348:	3affffe4 	bcc	e2e0 <g_sigMath_matrixInitialize_bl+0x38>
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=f_setValue_f64;
		}
	}
	return M_SIG_MATRIXLIB_SUCCESS_BL;
    e34c:	e3a03000 	mov	r3, #0

}
    e350:	e1a00003 	mov	r0, r3
    e354:	e24bd004 	sub	sp, fp, #4
    e358:	e8bd8800 	pop	{fp, pc}

0000e35c <g_sigMath_matrixEye_bl>:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixEye_bl(double* f_matrixResult_pf64,
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32)
{
    e35c:	e92d4800 	push	{fp, lr}
    e360:	e28db004 	add	fp, sp, #4
    e364:	e24dd018 	sub	sp, sp, #24
    e368:	e50b0010 	str	r0, [fp, #-16]
    e36c:	e50b1014 	str	r1, [fp, #-20]
    e370:	e50b2018 	str	r2, [fp, #-24]
	unsigned int l_rowCounter_ui32=0;
    e374:	e3a03000 	mov	r3, #0
    e378:	e50b3008 	str	r3, [fp, #-8]
	unsigned int l_colCounter_ui32=0;
    e37c:	e3a03000 	mov	r3, #0
    e380:	e50b300c 	str	r3, [fp, #-12]

	if(f_nrOfRows_ui32!=f_nrOfCols_ui32)
    e384:	e51b2014 	ldr	r2, [fp, #-20]
    e388:	e51b3018 	ldr	r3, [fp, #-24]
    e38c:	e1520003 	cmp	r2, r3
    e390:	0a000001 	beq	e39c <g_sigMath_matrixEye_bl+0x40>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
    e394:	e3a03001 	mov	r3, #1
    e398:	ea00002f 	b	e45c <g_sigMath_matrixEye_bl+0x100>
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    e39c:	e3a03000 	mov	r3, #0
    e3a0:	e50b300c 	str	r3, [fp, #-12]
    e3a4:	ea000027 	b	e448 <g_sigMath_matrixEye_bl+0xec>
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    e3a8:	e3a03000 	mov	r3, #0
    e3ac:	e50b3008 	str	r3, [fp, #-8]
    e3b0:	ea00001d 	b	e42c <g_sigMath_matrixEye_bl+0xd0>
			{
				if(l_rowCounter_ui32==l_colCounter_ui32)
    e3b4:	e51b2008 	ldr	r2, [fp, #-8]
    e3b8:	e51b300c 	ldr	r3, [fp, #-12]
    e3bc:	e1520003 	cmp	r2, r3
    e3c0:	1a00000b 	bne	e3f4 <g_sigMath_matrixEye_bl+0x98>
				{
					f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=1;
    e3c4:	e51b0018 	ldr	r0, [fp, #-24]
    e3c8:	e51b1008 	ldr	r1, [fp, #-8]
    e3cc:	e51b200c 	ldr	r2, [fp, #-12]
    e3d0:	ebfffc30 	bl	d498 <m_getIndex_i32>
    e3d4:	e1a03000 	mov	r3, r0
    e3d8:	e1a03183 	lsl	r3, r3, #3
    e3dc:	e51b2010 	ldr	r2, [fp, #-16]
    e3e0:	e0821003 	add	r1, r2, r3
    e3e4:	e3a02000 	mov	r2, #0
    e3e8:	e59f3078 	ldr	r3, [pc, #120]	; e468 <g_sigMath_matrixEye_bl+0x10c>
    e3ec:	e1c120f0 	strd	r2, [r1]
    e3f0:	ea00000a 	b	e420 <g_sigMath_matrixEye_bl+0xc4>
				}
				else
				{
					f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=0;
    e3f4:	e51b0018 	ldr	r0, [fp, #-24]
    e3f8:	e51b1008 	ldr	r1, [fp, #-8]
    e3fc:	e51b200c 	ldr	r2, [fp, #-12]
    e400:	ebfffc24 	bl	d498 <m_getIndex_i32>
    e404:	e1a03000 	mov	r3, r0
    e408:	e1a03183 	lsl	r3, r3, #3
    e40c:	e51b2010 	ldr	r2, [fp, #-16]
    e410:	e0821003 	add	r1, r2, r3
    e414:	e3a02000 	mov	r2, #0
    e418:	e3a03000 	mov	r3, #0
    e41c:	e1c120f0 	strd	r2, [r1]
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    e420:	e51b3008 	ldr	r3, [fp, #-8]
    e424:	e2833001 	add	r3, r3, #1
    e428:	e50b3008 	str	r3, [fp, #-8]
    e42c:	e51b2008 	ldr	r2, [fp, #-8]
    e430:	e51b3014 	ldr	r3, [fp, #-20]
    e434:	e1520003 	cmp	r2, r3
    e438:	3affffdd 	bcc	e3b4 <g_sigMath_matrixEye_bl+0x58>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    e43c:	e51b300c 	ldr	r3, [fp, #-12]
    e440:	e2833001 	add	r3, r3, #1
    e444:	e50b300c 	str	r3, [fp, #-12]
    e448:	e51b200c 	ldr	r2, [fp, #-12]
    e44c:	e51b3018 	ldr	r3, [fp, #-24]
    e450:	e1520003 	cmp	r2, r3
    e454:	3affffd3 	bcc	e3a8 <g_sigMath_matrixEye_bl+0x4c>
				{
					f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=0;
				}
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    e458:	e3a03000 	mov	r3, #0
	}
}
    e45c:	e1a00003 	mov	r0, r3
    e460:	e24bd004 	sub	sp, fp, #4
    e464:	e8bd8800 	pop	{fp, pc}
    e468:	3ff00000 	.word	0x3ff00000
    e46c:	e1a00000 	nop			; (mov r0, r0)

0000e470 <g_sigOri_getAnglesComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles g_sigOri_getAnglesComplementary_bl()
{
    e470:	e92d4830 	push	{r4, r5, fp, lr}
    e474:	e28db00c 	add	fp, sp, #12
    e478:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_sigOri_arrayOutputAnglesComplementary_st;
    e47c:	e59f3040 	ldr	r3, [pc, #64]	; e4c4 <g_sigOri_getAnglesComplementary_bl+0x54>
    e480:	e24bc024 	sub	ip, fp, #36	; 0x24
    e484:	e1a0e003 	mov	lr, r3
    e488:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    e48c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    e490:	e89e0003 	ldm	lr, {r0, r1}
    e494:	e88c0003 	stm	ip, {r0, r1}
    e498:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    e49c:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    e4a0:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    e4a4:	ec454b15 	vmov	d5, r4, r5
    e4a8:	ec410b16 	vmov	d6, r0, r1
    e4ac:	ec432b17 	vmov	d7, r2, r3
}
    e4b0:	eeb00b45 	vmov.f64	d0, d5
    e4b4:	eeb01b46 	vmov.f64	d1, d6
    e4b8:	eeb02b47 	vmov.f64	d2, d7
    e4bc:	e24bd00c 	sub	sp, fp, #12
    e4c0:	e8bd8830 	pop	{r4, r5, fp, pc}
    e4c4:	00010610 	.word	0x00010610

0000e4c8 <g_sigOri_getPitchComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getPitchComplementary_bl()
{
    e4c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    e4cc:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64;
    e4d0:	e59f3014 	ldr	r3, [pc, #20]	; e4ec <g_sigOri_getPitchComplementary_bl+0x24>
    e4d4:	e1c320d8 	ldrd	r2, [r3, #8]
    e4d8:	ec432b17 	vmov	d7, r2, r3
}
    e4dc:	eeb00b47 	vmov.f64	d0, d7
    e4e0:	e24bd000 	sub	sp, fp, #0
    e4e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    e4e8:	e12fff1e 	bx	lr
    e4ec:	00010610 	.word	0x00010610

0000e4f0 <g_sigOri_getRollComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getRollComplementary_bl()
{
    e4f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    e4f4:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesComplementary_st.roll_f64;
    e4f8:	e59f3014 	ldr	r3, [pc, #20]	; e514 <g_sigOri_getRollComplementary_bl+0x24>
    e4fc:	e1c320d0 	ldrd	r2, [r3]
    e500:	ec432b17 	vmov	d7, r2, r3
}
    e504:	eeb00b47 	vmov.f64	d0, d7
    e508:	e24bd000 	sub	sp, fp, #0
    e50c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    e510:	e12fff1e 	bx	lr
    e514:	00010610 	.word	0x00010610

0000e518 <g_sigOri_getYawComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getYawComplementary_bl()
{
    e518:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    e51c:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64;
    e520:	e59f3014 	ldr	r3, [pc, #20]	; e53c <g_sigOri_getYawComplementary_bl+0x24>
    e524:	e1c321d0 	ldrd	r2, [r3, #16]
    e528:	ec432b17 	vmov	d7, r2, r3
}
    e52c:	eeb00b47 	vmov.f64	d0, d7
    e530:	e24bd000 	sub	sp, fp, #0
    e534:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    e538:	e12fff1e 	bx	lr
    e53c:	00010610 	.word	0x00010610

0000e540 <g_sigOri_getAnglesKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles g_sigOri_getAnglesKalman_bl()
{
    e540:	e92d4830 	push	{r4, r5, fp, lr}
    e544:	e28db00c 	add	fp, sp, #12
    e548:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_sigOri_arrayOutputAnglesKalman_st;
    e54c:	e59f3040 	ldr	r3, [pc, #64]	; e594 <g_sigOri_getAnglesKalman_bl+0x54>
    e550:	e24bc024 	sub	ip, fp, #36	; 0x24
    e554:	e1a0e003 	mov	lr, r3
    e558:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    e55c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    e560:	e89e0003 	ldm	lr, {r0, r1}
    e564:	e88c0003 	stm	ip, {r0, r1}
    e568:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    e56c:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    e570:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    e574:	ec454b15 	vmov	d5, r4, r5
    e578:	ec410b16 	vmov	d6, r0, r1
    e57c:	ec432b17 	vmov	d7, r2, r3
}
    e580:	eeb00b45 	vmov.f64	d0, d5
    e584:	eeb01b46 	vmov.f64	d1, d6
    e588:	eeb02b47 	vmov.f64	d2, d7
    e58c:	e24bd00c 	sub	sp, fp, #12
    e590:	e8bd8830 	pop	{r4, r5, fp, pc}
    e594:	000105c8 	.word	0x000105c8

0000e598 <g_sigOri_getPitchKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getPitchKalman_bl()
{
    e598:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    e59c:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesKalman_st.pitch_f64;
    e5a0:	e59f3014 	ldr	r3, [pc, #20]	; e5bc <g_sigOri_getPitchKalman_bl+0x24>
    e5a4:	e1c320d8 	ldrd	r2, [r3, #8]
    e5a8:	ec432b17 	vmov	d7, r2, r3
}
    e5ac:	eeb00b47 	vmov.f64	d0, d7
    e5b0:	e24bd000 	sub	sp, fp, #0
    e5b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    e5b8:	e12fff1e 	bx	lr
    e5bc:	000105c8 	.word	0x000105c8

0000e5c0 <g_sigOri_getRollKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getRollKalman_bl()
{
    e5c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    e5c4:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesKalman_st.roll_f64;
    e5c8:	e59f3014 	ldr	r3, [pc, #20]	; e5e4 <g_sigOri_getRollKalman_bl+0x24>
    e5cc:	e1c320d0 	ldrd	r2, [r3]
    e5d0:	ec432b17 	vmov	d7, r2, r3
}
    e5d4:	eeb00b47 	vmov.f64	d0, d7
    e5d8:	e24bd000 	sub	sp, fp, #0
    e5dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    e5e0:	e12fff1e 	bx	lr
    e5e4:	000105c8 	.word	0x000105c8

0000e5e8 <g_sigOri_getYawKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getYawKalman_bl()
{
    e5e8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    e5ec:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesKalman_st.yaw_f64;
    e5f0:	e59f3014 	ldr	r3, [pc, #20]	; e60c <g_sigOri_getYawKalman_bl+0x24>
    e5f4:	e1c321d0 	ldrd	r2, [r3, #16]
    e5f8:	ec432b17 	vmov	d7, r2, r3
}
    e5fc:	eeb00b47 	vmov.f64	d0, d7
    e600:	e24bd000 	sub	sp, fp, #0
    e604:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    e608:	e12fff1e 	bx	lr
    e60c:	000105c8 	.word	0x000105c8

0000e610 <g_sigOri_initImuSensors_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_sigOri_initImuSensors_bl()
{
    e610:	e92d4800 	push	{fp, lr}
    e614:	e28db004 	add	fp, sp, #4
	if( g_SigFil_initImuSensors_bl() != 0 )
    e618:	eb000356 	bl	f378 <g_SigFil_initImuSensors_bl>
    e61c:	e1a03000 	mov	r3, r0
    e620:	e3530000 	cmp	r3, #0
    e624:	0a000001 	beq	e630 <g_sigOri_initImuSensors_bl+0x20>
	{return 1;}
    e628:	e3a03001 	mov	r3, #1
    e62c:	ea000000 	b	e634 <g_sigOri_initImuSensors_bl+0x24>
	else
	{return 0;}
    e630:	e3a03000 	mov	r3, #0
}
    e634:	e1a00003 	mov	r0, r3
    e638:	e8bd8800 	pop	{fp, pc}

0000e63c <g_sigOri_initMatrices_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_sigOri_initMatrices_bl()
{
    e63c:	e92d4800 	push	{fp, lr}
    e640:	e28db004 	add	fp, sp, #4
	//initialize Pk Matrix
	if(g_sigMath_matrixEye_bl((double*)m_sigOri_matrixPk_rg9f64,3,3)!=0)
    e644:	e59f00ac 	ldr	r0, [pc, #172]	; e6f8 <g_sigOri_initMatrices_bl+0xbc>
    e648:	e3a01003 	mov	r1, #3
    e64c:	e3a02003 	mov	r2, #3
    e650:	ebffff41 	bl	e35c <g_sigMath_matrixEye_bl>
    e654:	e1a03000 	mov	r3, r0
    e658:	e3530000 	cmp	r3, #0
    e65c:	0a000001 	beq	e668 <g_sigOri_initMatrices_bl+0x2c>
	{return 1;}
    e660:	e3a03001 	mov	r3, #1
    e664:	ea000021 	b	e6f0 <g_sigOri_initMatrices_bl+0xb4>

	//initialize an Identity matrix
	if(g_sigMath_matrixEye_bl((double*)m_sigOri_matrixI_rg9f64,3,3)!=0)
    e668:	e59f008c 	ldr	r0, [pc, #140]	; e6fc <g_sigOri_initMatrices_bl+0xc0>
    e66c:	e3a01003 	mov	r1, #3
    e670:	e3a02003 	mov	r2, #3
    e674:	ebffff38 	bl	e35c <g_sigMath_matrixEye_bl>
    e678:	e1a03000 	mov	r3, r0
    e67c:	e3530000 	cmp	r3, #0
    e680:	0a000001 	beq	e68c <g_sigOri_initMatrices_bl+0x50>
	{return 1;}
    e684:	e3a03001 	mov	r3, #1
    e688:	ea000018 	b	e6f0 <g_sigOri_initMatrices_bl+0xb4>
	m_sigOri_matrixQ_rg9f64[0][0]=0.005;
	m_sigOri_matrixQ_rg9f64[1][1]=0.005;
	m_sigOri_matrixQ_rg9f64[2][2]=0.0001;*/

	//initialize the measurement noise matrix
		m_sigOri_matrixR_rg9f64[0][0]=0.06;
    e68c:	e59f106c 	ldr	r1, [pc, #108]	; e700 <g_sigOri_initMatrices_bl+0xc4>
    e690:	e59f206c 	ldr	r2, [pc, #108]	; e704 <g_sigOri_initMatrices_bl+0xc8>
    e694:	e59f306c 	ldr	r3, [pc, #108]	; e708 <g_sigOri_initMatrices_bl+0xcc>
    e698:	e1c120f0 	strd	r2, [r1]
		m_sigOri_matrixR_rg9f64[1][1]=0.1;
    e69c:	e59f105c 	ldr	r1, [pc, #92]	; e700 <g_sigOri_initMatrices_bl+0xc4>
    e6a0:	e59f2064 	ldr	r2, [pc, #100]	; e70c <g_sigOri_initMatrices_bl+0xd0>
    e6a4:	e59f3064 	ldr	r3, [pc, #100]	; e710 <g_sigOri_initMatrices_bl+0xd4>
    e6a8:	e1c122f0 	strd	r2, [r1, #32]
		m_sigOri_matrixR_rg9f64[2][2]=0.07;
    e6ac:	e59f104c 	ldr	r1, [pc, #76]	; e700 <g_sigOri_initMatrices_bl+0xc4>
    e6b0:	e59f205c 	ldr	r2, [pc, #92]	; e714 <g_sigOri_initMatrices_bl+0xd8>
    e6b4:	e59f305c 	ldr	r3, [pc, #92]	; e718 <g_sigOri_initMatrices_bl+0xdc>
    e6b8:	e1c124f0 	strd	r2, [r1, #64]	; 0x40

		//initialize the process noise matrix
		m_sigOri_matrixQ_rg9f64[0][0]=0.005;
    e6bc:	e59f1058 	ldr	r1, [pc, #88]	; e71c <g_sigOri_initMatrices_bl+0xe0>
    e6c0:	e59f2058 	ldr	r2, [pc, #88]	; e720 <g_sigOri_initMatrices_bl+0xe4>
    e6c4:	e59f3058 	ldr	r3, [pc, #88]	; e724 <g_sigOri_initMatrices_bl+0xe8>
    e6c8:	e1c120f0 	strd	r2, [r1]
		m_sigOri_matrixQ_rg9f64[1][1]=0.005;
    e6cc:	e59f1048 	ldr	r1, [pc, #72]	; e71c <g_sigOri_initMatrices_bl+0xe0>
    e6d0:	e59f2048 	ldr	r2, [pc, #72]	; e720 <g_sigOri_initMatrices_bl+0xe4>
    e6d4:	e59f3048 	ldr	r3, [pc, #72]	; e724 <g_sigOri_initMatrices_bl+0xe8>
    e6d8:	e1c122f0 	strd	r2, [r1, #32]
		m_sigOri_matrixQ_rg9f64[2][2]=0.005;
    e6dc:	e59f1038 	ldr	r1, [pc, #56]	; e71c <g_sigOri_initMatrices_bl+0xe0>
    e6e0:	e59f2038 	ldr	r2, [pc, #56]	; e720 <g_sigOri_initMatrices_bl+0xe4>
    e6e4:	e59f3038 	ldr	r3, [pc, #56]	; e724 <g_sigOri_initMatrices_bl+0xe8>
    e6e8:	e1c124f0 	strd	r2, [r1, #64]	; 0x40


	return 0;
    e6ec:	e3a03000 	mov	r3, #0
}
    e6f0:	e1a00003 	mov	r0, r3
    e6f4:	e8bd8800 	pop	{fp, pc}
    e6f8:	00010748 	.word	0x00010748
    e6fc:	00010700 	.word	0x00010700
    e700:	00010790 	.word	0x00010790
    e704:	eb851eb8 	.word	0xeb851eb8
    e708:	3faeb851 	.word	0x3faeb851
    e70c:	9999999a 	.word	0x9999999a
    e710:	3fb99999 	.word	0x3fb99999
    e714:	1eb851ec 	.word	0x1eb851ec
    e718:	3fb1eb85 	.word	0x3fb1eb85
    e71c:	000107d8 	.word	0x000107d8
    e720:	47ae147b 	.word	0x47ae147b
    e724:	3f747ae1 	.word	0x3f747ae1

0000e728 <g_sigOri_initBuildReferenceValues_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigOri_initBuildReferenceValues_bl()
{
    e728:	e92d4800 	push	{fp, lr}
    e72c:	e28db004 	add	fp, sp, #4
    e730:	e24dd078 	sub	sp, sp, #120	; 0x78
	double l_barometricValue_f64=0;
    e734:	e3a02000 	mov	r2, #0
    e738:	e3a03000 	mov	r3, #0
    e73c:	e14b20fc 	strd	r2, [fp, #-12]
	double l_GravityValue_f64=0;
    e740:	e3a02000 	mov	r2, #0
    e744:	e3a03000 	mov	r3, #0
    e748:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	double l_Temperature_f64=0;
    e74c:	e3a02000 	mov	r2, #0
    e750:	e3a03000 	mov	r3, #0
    e754:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	int l_countVar_i32=0;
    e758:	e3a03000 	mov	r3, #0
    e75c:	e50b3020 	str	r3, [fp, #-32]
	halImu_orientationValues l_imuValues_st;

// create Reference pressure,Gravity and Temperature as mean value over M_NR_OF_VALUES_OFFSET_I32 values
	for(l_countVar_i32=0;l_countVar_i32<M_NR_OF_VALUES_OFFSET_I32;l_countVar_i32++)
    e760:	e3a03000 	mov	r3, #0
    e764:	e50b3020 	str	r3, [fp, #-32]
    e768:	ea000012 	b	e7b8 <g_sigOri_initBuildReferenceValues_bl+0x90>
	{
		g_sigFil_readImuData_bl();
    e76c:	eb000313 	bl	f3c0 <g_sigFil_readImuData_bl>
		l_imuValues_st=g_sigFil_getImuValuesUnfiltered_st();
    e770:	e24b307c 	sub	r3, fp, #124	; 0x7c
    e774:	e1a00003 	mov	r0, r3
    e778:	eb0002a6 	bl	f218 <g_sigFil_getImuValuesUnfiltered_st>
		l_barometricValue_f64+=l_imuValues_st.pressure_f64;
    e77c:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    e780:	ed1b6b03 	vldr	d6, [fp, #-12]
    e784:	ee367b07 	vadd.f64	d7, d6, d7
    e788:	ed0b7b03 	vstr	d7, [fp, #-12]
		l_GravityValue_f64+=l_imuValues_st.acc.z_f64;
    e78c:	ed1b7b1b 	vldr	d7, [fp, #-108]	; 0xffffff94
    e790:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
    e794:	ee367b07 	vadd.f64	d7, d6, d7
    e798:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
		l_Temperature_f64+=l_imuValues_st.temperature_f64;
    e79c:	ed1b7b0d 	vldr	d7, [fp, #-52]	; 0xffffffcc
    e7a0:	ed1b6b07 	vldr	d6, [fp, #-28]	; 0xffffffe4
    e7a4:	ee367b07 	vadd.f64	d7, d6, d7
    e7a8:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4
	double l_Temperature_f64=0;
	int l_countVar_i32=0;
	halImu_orientationValues l_imuValues_st;

// create Reference pressure,Gravity and Temperature as mean value over M_NR_OF_VALUES_OFFSET_I32 values
	for(l_countVar_i32=0;l_countVar_i32<M_NR_OF_VALUES_OFFSET_I32;l_countVar_i32++)
    e7ac:	e51b3020 	ldr	r3, [fp, #-32]
    e7b0:	e2833001 	add	r3, r3, #1
    e7b4:	e50b3020 	str	r3, [fp, #-32]
    e7b8:	e51b3020 	ldr	r3, [fp, #-32]
    e7bc:	e3530ffa 	cmp	r3, #1000	; 0x3e8
    e7c0:	baffffe9 	blt	e76c <g_sigOri_initBuildReferenceValues_bl+0x44>
		l_imuValues_st=g_sigFil_getImuValuesUnfiltered_st();
		l_barometricValue_f64+=l_imuValues_st.pressure_f64;
		l_GravityValue_f64+=l_imuValues_st.acc.z_f64;
		l_Temperature_f64+=l_imuValues_st.temperature_f64;
	}
	m_sigOri_referencePressure_f64 =l_barometricValue_f64/M_NR_OF_VALUES_OFFSET_I32;
    e7c4:	ed1b6b03 	vldr	d6, [fp, #-12]
    e7c8:	ed9f7b0e 	vldr	d7, [pc, #56]	; e808 <g_sigOri_initBuildReferenceValues_bl+0xe0>
    e7cc:	ee867b07 	vdiv.f64	d7, d6, d7
    e7d0:	e59f3038 	ldr	r3, [pc, #56]	; e810 <g_sigOri_initBuildReferenceValues_bl+0xe8>
    e7d4:	ed837b00 	vstr	d7, [r3]
	m_sigOri_referenceGravity_f64=l_GravityValue_f64/M_NR_OF_VALUES_OFFSET_I32;
    e7d8:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
    e7dc:	ed9f7b09 	vldr	d7, [pc, #36]	; e808 <g_sigOri_initBuildReferenceValues_bl+0xe0>
    e7e0:	ee867b07 	vdiv.f64	d7, d6, d7
    e7e4:	e59f3028 	ldr	r3, [pc, #40]	; e814 <g_sigOri_initBuildReferenceValues_bl+0xec>
    e7e8:	ed837b00 	vstr	d7, [r3]
	m_sigOri_referenceTemperature_f64=l_Temperature_f64/M_NR_OF_VALUES_OFFSET_I32;
    e7ec:	ed1b6b07 	vldr	d6, [fp, #-28]	; 0xffffffe4
    e7f0:	ed9f7b04 	vldr	d7, [pc, #16]	; e808 <g_sigOri_initBuildReferenceValues_bl+0xe0>
    e7f4:	ee867b07 	vdiv.f64	d7, d6, d7
    e7f8:	e59f3018 	ldr	r3, [pc, #24]	; e818 <g_sigOri_initBuildReferenceValues_bl+0xf0>
    e7fc:	ed837b00 	vstr	d7, [r3]
}
    e800:	e24bd004 	sub	sp, fp, #4
    e804:	e8bd8800 	pop	{fp, pc}
    e808:	00000000 	.word	0x00000000
    e80c:	408f4000 	.word	0x408f4000
    e810:	00010570 	.word	0x00010570
    e814:	00010578 	.word	0x00010578
    e818:	00010580 	.word	0x00010580

0000e81c <m_sigOri_getImuData_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void m_sigOri_getImuData_bl()
{
    e81c:	e92d4810 	push	{r4, fp, lr}
    e820:	e28db008 	add	fp, sp, #8
    e824:	e24dd05c 	sub	sp, sp, #92	; 0x5c
	g_sigFil_readImuData_bl();
    e828:	eb0002e4 	bl	f3c0 <g_sigFil_readImuData_bl>
	m_sigori_imuValues_st = g_sigFil_getImuValuesUnfiltered_st();
    e82c:	e59f402c 	ldr	r4, [pc, #44]	; e860 <m_sigOri_getImuData_bl+0x44>
    e830:	e24b3064 	sub	r3, fp, #100	; 0x64
    e834:	e1a00003 	mov	r0, r3
    e838:	eb000276 	bl	f218 <g_sigFil_getImuValuesUnfiltered_st>
    e83c:	e1a01004 	mov	r1, r4
    e840:	e24b2064 	sub	r2, fp, #100	; 0x64
    e844:	e3a03058 	mov	r3, #88	; 0x58
    e848:	e1a00001 	mov	r0, r1
    e84c:	e1a01002 	mov	r1, r2
    e850:	e1a02003 	mov	r2, r3
    e854:	ebffe851 	bl	89a0 <_init+0x110>
}
    e858:	e24bd008 	sub	sp, fp, #8
    e85c:	e8bd8810 	pop	{r4, fp, pc}
    e860:	00010510 	.word	0x00010510

0000e864 <m_sigOri_calcAccMagAngle_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles m_sigOri_calcAccMagAngle_st()
{
    e864:	e92d4830 	push	{r4, r5, fp, lr}
    e868:	ed2d8b04 	vpush	{d8-d9}
    e86c:	e28db01c 	add	fp, sp, #28
    e870:	e24dd0b0 	sub	sp, sp, #176	; 0xb0
	sigOri_orientationAngles l_angles_f64;
	double l_roll_f64=0;
    e874:	e3a02000 	mov	r2, #0
    e878:	e3a03000 	mov	r3, #0
    e87c:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	double l_pitch_f64=0;
    e880:	e3a02000 	mov	r2, #0
    e884:	e3a03000 	mov	r3, #0
    e888:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
	double l_yaw_f64=0;
    e88c:	e3a02000 	mov	r2, #0
    e890:	e3a03000 	mov	r3, #0
    e894:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	double l_divider_f64=0;
    e898:	e3a02000 	mov	r2, #0
    e89c:	e3a03000 	mov	r3, #0
    e8a0:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4

	double ll_minX_f64=M_SIGORI_MAG_MINX_F64;
    e8a4:	e59f22cc 	ldr	r2, [pc, #716]	; eb78 <m_sigOri_calcAccMagAngle_st+0x314>
    e8a8:	e59f32cc 	ldr	r3, [pc, #716]	; eb7c <m_sigOri_calcAccMagAngle_st+0x318>
    e8ac:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	double ll_maxX_f64=M_SIGORI_MAG_MAXX_F64;
    e8b0:	e59f22c8 	ldr	r2, [pc, #712]	; eb80 <m_sigOri_calcAccMagAngle_st+0x31c>
    e8b4:	e59f32c8 	ldr	r3, [pc, #712]	; eb84 <m_sigOri_calcAccMagAngle_st+0x320>
    e8b8:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
	double ll_minY_f64=M_SIGORI_MAG_MINY_F64;
    e8bc:	e59f22c4 	ldr	r2, [pc, #708]	; eb88 <m_sigOri_calcAccMagAngle_st+0x324>
    e8c0:	e59f32c4 	ldr	r3, [pc, #708]	; eb8c <m_sigOri_calcAccMagAngle_st+0x328>
    e8c4:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac
	double ll_maxY_f64=M_SIGORI_MAG_MAXY_F64;
    e8c8:	e59f22c0 	ldr	r2, [pc, #704]	; eb90 <m_sigOri_calcAccMagAngle_st+0x32c>
    e8cc:	e59f32c0 	ldr	r3, [pc, #704]	; eb94 <m_sigOri_calcAccMagAngle_st+0x330>
    e8d0:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	double ll_minZ_f64=M_SIGORI_MAG_MINZ_F64;
    e8d4:	e59f22bc 	ldr	r2, [pc, #700]	; eb98 <m_sigOri_calcAccMagAngle_st+0x334>
    e8d8:	e59f32bc 	ldr	r3, [pc, #700]	; eb9c <m_sigOri_calcAccMagAngle_st+0x338>
    e8dc:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
	double ll_maxZ_f64=M_SIGORI_MAG_MAXZ_F64;
    e8e0:	e59f22b8 	ldr	r2, [pc, #696]	; eba0 <m_sigOri_calcAccMagAngle_st+0x33c>
    e8e4:	e59f32b8 	ldr	r3, [pc, #696]	; eba4 <m_sigOri_calcAccMagAngle_st+0x340>
    e8e8:	e14b26fc 	strd	r2, [fp, #-108]	; 0xffffff94

	halAccmag_3dDoubleVector l_mag_st;
	
	l_mag_st.x_f64=(m_sigori_imuValues_st.mag.x_f64-ll_minX_f64)/(ll_maxX_f64-ll_minX_f64)*2-1;
    e8ec:	e59f32b4 	ldr	r3, [pc, #692]	; eba8 <m_sigOri_calcAccMagAngle_st+0x344>
    e8f0:	ed936b06 	vldr	d6, [r3, #24]
    e8f4:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    e8f8:	ee366b47 	vsub.f64	d6, d6, d7
    e8fc:	ed1b5b13 	vldr	d5, [fp, #-76]	; 0xffffffb4
    e900:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    e904:	ee357b47 	vsub.f64	d7, d5, d7
    e908:	ee867b07 	vdiv.f64	d7, d6, d7
    e90c:	ee376b07 	vadd.f64	d6, d7, d7
    e910:	ed9f7b94 	vldr	d7, [pc, #592]	; eb68 <m_sigOri_calcAccMagAngle_st+0x304>
    e914:	ee367b47 	vsub.f64	d7, d6, d7
    e918:	ed0b7b2d 	vstr	d7, [fp, #-180]	; 0xffffff4c
	l_mag_st.y_f64=(m_sigori_imuValues_st.mag.y_f64-ll_minY_f64)/(ll_maxY_f64-ll_minY_f64)*2-1;
    e91c:	e59f3284 	ldr	r3, [pc, #644]	; eba8 <m_sigOri_calcAccMagAngle_st+0x344>
    e920:	ed936b08 	vldr	d6, [r3, #32]
    e924:	ed1b7b15 	vldr	d7, [fp, #-84]	; 0xffffffac
    e928:	ee366b47 	vsub.f64	d6, d6, d7
    e92c:	ed1b5b17 	vldr	d5, [fp, #-92]	; 0xffffffa4
    e930:	ed1b7b15 	vldr	d7, [fp, #-84]	; 0xffffffac
    e934:	ee357b47 	vsub.f64	d7, d5, d7
    e938:	ee867b07 	vdiv.f64	d7, d6, d7
    e93c:	ee376b07 	vadd.f64	d6, d7, d7
    e940:	ed9f7b88 	vldr	d7, [pc, #544]	; eb68 <m_sigOri_calcAccMagAngle_st+0x304>
    e944:	ee367b47 	vsub.f64	d7, d6, d7
    e948:	ed0b7b2b 	vstr	d7, [fp, #-172]	; 0xffffff54
	l_mag_st.z_f64=(m_sigori_imuValues_st.mag.z_f64-ll_minZ_f64)/(ll_maxZ_f64-ll_minZ_f64)*2-1;
    e94c:	e59f3254 	ldr	r3, [pc, #596]	; eba8 <m_sigOri_calcAccMagAngle_st+0x344>
    e950:	ed936b0a 	vldr	d6, [r3, #40]	; 0x28
    e954:	ed1b7b19 	vldr	d7, [fp, #-100]	; 0xffffff9c
    e958:	ee366b47 	vsub.f64	d6, d6, d7
    e95c:	ed1b5b1b 	vldr	d5, [fp, #-108]	; 0xffffff94
    e960:	ed1b7b19 	vldr	d7, [fp, #-100]	; 0xffffff9c
    e964:	ee357b47 	vsub.f64	d7, d5, d7
    e968:	ee867b07 	vdiv.f64	d7, d6, d7
    e96c:	ee376b07 	vadd.f64	d6, d7, d7
    e970:	ed9f7b7c 	vldr	d7, [pc, #496]	; eb68 <m_sigOri_calcAccMagAngle_st+0x304>
    e974:	ee367b47 	vsub.f64	d7, d6, d7
    e978:	ed0b7b29 	vstr	d7, [fp, #-164]	; 0xffffff5c

	//calculate roll with accelerometer values
	if(m_sigori_imuValues_st.acc.z_f64!=0)
    e97c:	e59f3224 	ldr	r3, [pc, #548]	; eba8 <m_sigOri_calcAccMagAngle_st+0x344>
    e980:	ed937b04 	vldr	d7, [r3, #16]
    e984:	eeb57b40 	vcmp.f64	d7, #0.0
    e988:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    e98c:	0a00000c 	beq	e9c4 <m_sigOri_calcAccMagAngle_st+0x160>
	{
		l_roll_f64=atan2(m_sigori_imuValues_st.acc.y_f64,m_sigori_imuValues_st.acc.z_f64);
    e990:	e59f3210 	ldr	r3, [pc, #528]	; eba8 <m_sigOri_calcAccMagAngle_st+0x344>
    e994:	ed936b02 	vldr	d6, [r3, #8]
    e998:	e59f3208 	ldr	r3, [pc, #520]	; eba8 <m_sigOri_calcAccMagAngle_st+0x344>
    e99c:	ed937b04 	vldr	d7, [r3, #16]
    e9a0:	eeb00b46 	vmov.f64	d0, d6
    e9a4:	eeb01b47 	vmov.f64	d1, d7
    e9a8:	ebffe808 	bl	89d0 <_init+0x140>
    e9ac:	ed0b0b09 	vstr	d0, [fp, #-36]	; 0xffffffdc
		l_angles_f64.roll_f64=-l_roll_f64*M_RAD_TO_DEG_F64;
    e9b0:	ed1b7b09 	vldr	d7, [fp, #-36]	; 0xffffffdc
    e9b4:	eeb16b47 	vneg.f64	d6, d7
    e9b8:	ed9f7b6c 	vldr	d7, [pc, #432]	; eb70 <m_sigOri_calcAccMagAngle_st+0x30c>
    e9bc:	ee267b07 	vmul.f64	d7, d6, d7
    e9c0:	ed0b7b27 	vstr	d7, [fp, #-156]	; 0xffffff64
	}
	//calculate pitch with accelerometer values
	l_divider_f64=m_sigori_imuValues_st.acc.y_f64*sin(l_roll_f64)+m_sigori_imuValues_st.acc.z_f64*cos(l_roll_f64);
    e9c4:	e59f31dc 	ldr	r3, [pc, #476]	; eba8 <m_sigOri_calcAccMagAngle_st+0x344>
    e9c8:	ed938b02 	vldr	d8, [r3, #8]
    e9cc:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    e9d0:	ebffe813 	bl	8a24 <_init+0x194>
    e9d4:	eeb07b40 	vmov.f64	d7, d0
    e9d8:	ee288b07 	vmul.f64	d8, d8, d7
    e9dc:	e59f31c4 	ldr	r3, [pc, #452]	; eba8 <m_sigOri_calcAccMagAngle_st+0x344>
    e9e0:	ed939b04 	vldr	d9, [r3, #16]
    e9e4:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    e9e8:	ebffe7e9 	bl	8994 <_init+0x104>
    e9ec:	eeb07b40 	vmov.f64	d7, d0
    e9f0:	ee297b07 	vmul.f64	d7, d9, d7
    e9f4:	ee387b07 	vadd.f64	d7, d8, d7
    e9f8:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	if(l_divider_f64!=0)
    e9fc:	ed1b7b0f 	vldr	d7, [fp, #-60]	; 0xffffffc4
    ea00:	eeb57b40 	vcmp.f64	d7, #0.0
    ea04:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    ea08:	0a00000c 	beq	ea40 <m_sigOri_calcAccMagAngle_st+0x1dc>
	{
		l_pitch_f64=atan(-m_sigori_imuValues_st.acc.x_f64/l_divider_f64);
    ea0c:	e59f3194 	ldr	r3, [pc, #404]	; eba8 <m_sigOri_calcAccMagAngle_st+0x344>
    ea10:	ed937b00 	vldr	d7, [r3]
    ea14:	eeb16b47 	vneg.f64	d6, d7
    ea18:	ed1b7b0f 	vldr	d7, [fp, #-60]	; 0xffffffc4
    ea1c:	ee867b07 	vdiv.f64	d7, d6, d7
    ea20:	eeb00b47 	vmov.f64	d0, d7
    ea24:	ebffe7c8 	bl	894c <_init+0xbc>
    ea28:	ed0b0b0b 	vstr	d0, [fp, #-44]	; 0xffffffd4
		l_angles_f64.pitch_f64=-l_pitch_f64*M_RAD_TO_DEG_F64;
    ea2c:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    ea30:	eeb16b47 	vneg.f64	d6, d7
    ea34:	ed9f7b4d 	vldr	d7, [pc, #308]	; eb70 <m_sigOri_calcAccMagAngle_st+0x30c>
    ea38:	ee267b07 	vmul.f64	d7, d6, d7
    ea3c:	ed0b7b25 	vstr	d7, [fp, #-148]	; 0xffffff6c
	}

	//calculate yaw and make a tilt compensation for the eCompass
	l_divider_f64= m_sigori_imuValues_st.mag.x_f64*cos(l_pitch_f64)+
    ea40:	e59f3160 	ldr	r3, [pc, #352]	; eba8 <m_sigOri_calcAccMagAngle_st+0x344>
    ea44:	ed938b06 	vldr	d8, [r3, #24]
    ea48:	ed1b0b0b 	vldr	d0, [fp, #-44]	; 0xffffffd4
    ea4c:	ebffe7d0 	bl	8994 <_init+0x104>
    ea50:	eeb07b40 	vmov.f64	d7, d0
    ea54:	ee288b07 	vmul.f64	d8, d8, d7
					m_sigori_imuValues_st.mag.y_f64*sin(l_pitch_f64)*sin(l_roll_f64)+
    ea58:	e59f3148 	ldr	r3, [pc, #328]	; eba8 <m_sigOri_calcAccMagAngle_st+0x344>
    ea5c:	ed939b08 	vldr	d9, [r3, #32]
    ea60:	ed1b0b0b 	vldr	d0, [fp, #-44]	; 0xffffffd4
    ea64:	ebffe7ee 	bl	8a24 <_init+0x194>
    ea68:	eeb07b40 	vmov.f64	d7, d0
    ea6c:	ee299b07 	vmul.f64	d9, d9, d7
    ea70:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    ea74:	ebffe7ea 	bl	8a24 <_init+0x194>
    ea78:	eeb07b40 	vmov.f64	d7, d0
    ea7c:	ee297b07 	vmul.f64	d7, d9, d7
		l_pitch_f64=atan(-m_sigori_imuValues_st.acc.x_f64/l_divider_f64);
		l_angles_f64.pitch_f64=-l_pitch_f64*M_RAD_TO_DEG_F64;
	}

	//calculate yaw and make a tilt compensation for the eCompass
	l_divider_f64= m_sigori_imuValues_st.mag.x_f64*cos(l_pitch_f64)+
    ea80:	ee388b07 	vadd.f64	d8, d8, d7
					m_sigori_imuValues_st.mag.y_f64*sin(l_pitch_f64)*sin(l_roll_f64)+
					m_sigori_imuValues_st.mag.z_f64*sin(l_pitch_f64)*cos(l_roll_f64);
    ea84:	e59f311c 	ldr	r3, [pc, #284]	; eba8 <m_sigOri_calcAccMagAngle_st+0x344>
    ea88:	ed939b0a 	vldr	d9, [r3, #40]	; 0x28
    ea8c:	ed1b0b0b 	vldr	d0, [fp, #-44]	; 0xffffffd4
    ea90:	ebffe7e3 	bl	8a24 <_init+0x194>
    ea94:	eeb07b40 	vmov.f64	d7, d0
    ea98:	ee299b07 	vmul.f64	d9, d9, d7
    ea9c:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    eaa0:	ebffe7bb 	bl	8994 <_init+0x104>
    eaa4:	eeb07b40 	vmov.f64	d7, d0
    eaa8:	ee297b07 	vmul.f64	d7, d9, d7
		l_pitch_f64=atan(-m_sigori_imuValues_st.acc.x_f64/l_divider_f64);
		l_angles_f64.pitch_f64=-l_pitch_f64*M_RAD_TO_DEG_F64;
	}

	//calculate yaw and make a tilt compensation for the eCompass
	l_divider_f64= m_sigori_imuValues_st.mag.x_f64*cos(l_pitch_f64)+
    eaac:	ee387b07 	vadd.f64	d7, d8, d7
    eab0:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
					m_sigori_imuValues_st.mag.y_f64*sin(l_pitch_f64)*sin(l_roll_f64)+
					m_sigori_imuValues_st.mag.z_f64*sin(l_pitch_f64)*cos(l_roll_f64);
	if(l_divider_f64!=0)
    eab4:	ed1b7b0f 	vldr	d7, [fp, #-60]	; 0xffffffc4
    eab8:	eeb57b40 	vcmp.f64	d7, #0.0
    eabc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    eac0:	0a000016 	beq	eb20 <m_sigOri_calcAccMagAngle_st+0x2bc>
	{
		l_yaw_f64=atan2(-(-m_sigori_imuValues_st.mag.z_f64*sin(l_roll_f64)+m_sigori_imuValues_st.mag.y_f64*cos(l_roll_f64)),
    eac4:	e59f30dc 	ldr	r3, [pc, #220]	; eba8 <m_sigOri_calcAccMagAngle_st+0x344>
    eac8:	ed937b0a 	vldr	d7, [r3, #40]	; 0x28
    eacc:	eeb18b47 	vneg.f64	d8, d7
    ead0:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    ead4:	ebffe7d2 	bl	8a24 <_init+0x194>
    ead8:	eeb07b40 	vmov.f64	d7, d0
    eadc:	ee288b07 	vmul.f64	d8, d8, d7
    eae0:	e59f30c0 	ldr	r3, [pc, #192]	; eba8 <m_sigOri_calcAccMagAngle_st+0x344>
    eae4:	ed939b08 	vldr	d9, [r3, #32]
    eae8:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    eaec:	ebffe7a8 	bl	8994 <_init+0x104>
    eaf0:	eeb07b40 	vmov.f64	d7, d0
    eaf4:	ee297b07 	vmul.f64	d7, d9, d7
    eaf8:	ee387b07 	vadd.f64	d7, d8, d7
    eafc:	eeb17b47 	vneg.f64	d7, d7
    eb00:	eeb00b47 	vmov.f64	d0, d7
    eb04:	ed1b1b0f 	vldr	d1, [fp, #-60]	; 0xffffffc4
    eb08:	ebffe7b0 	bl	89d0 <_init+0x140>
    eb0c:	ed0b0b0d 	vstr	d0, [fp, #-52]	; 0xffffffcc
					l_divider_f64);
		l_angles_f64.yaw_f64=l_yaw_f64*M_RAD_TO_DEG_F64;	
    eb10:	ed1b6b0d 	vldr	d6, [fp, #-52]	; 0xffffffcc
    eb14:	ed9f7b15 	vldr	d7, [pc, #84]	; eb70 <m_sigOri_calcAccMagAngle_st+0x30c>
    eb18:	ee267b07 	vmul.f64	d7, d6, d7
    eb1c:	ed0b7b23 	vstr	d7, [fp, #-140]	; 0xffffff74
			l_yaw_f64=atan2(l_divider_f64,l_mag_st.z_f64*sin(l_pitch_f64)+l_mag_st.x_f64*cos(l_pitch_f64));
			l_angles_f64.yaw_f64=l_yaw_f64*M_RAD_TO_DEG_F64;

		}*/

	return l_angles_f64;
    eb20:	e24bc084 	sub	ip, fp, #132	; 0x84
    eb24:	e24be09c 	sub	lr, fp, #156	; 0x9c
    eb28:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    eb2c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    eb30:	e89e0003 	ldm	lr, {r0, r1}
    eb34:	e88c0003 	stm	ip, {r0, r1}
    eb38:	e14b48d4 	ldrd	r4, [fp, #-132]	; 0xffffff7c
    eb3c:	e14b07dc 	ldrd	r0, [fp, #-124]	; 0xffffff84
    eb40:	e14b27d4 	ldrd	r2, [fp, #-116]	; 0xffffff8c
    eb44:	ec454b15 	vmov	d5, r4, r5
    eb48:	ec410b16 	vmov	d6, r0, r1
    eb4c:	ec432b17 	vmov	d7, r2, r3
}
    eb50:	eeb00b45 	vmov.f64	d0, d5
    eb54:	eeb01b46 	vmov.f64	d1, d6
    eb58:	eeb02b47 	vmov.f64	d2, d7
    eb5c:	e24bd01c 	sub	sp, fp, #28
    eb60:	ecbd8b04 	vpop	{d8-d9}
    eb64:	e8bd8830 	pop	{r4, r5, fp, pc}
    eb68:	00000000 	.word	0x00000000
    eb6c:	3ff00000 	.word	0x3ff00000
    eb70:	b05cc3e8 	.word	0xb05cc3e8
    eb74:	404ca5dd 	.word	0x404ca5dd
    eb78:	9ba5e354 	.word	0x9ba5e354
    eb7c:	c033b0c4 	.word	0xc033b0c4
    eb80:	eecbfb16 	.word	0xeecbfb16
    eb84:	4034c3c9 	.word	0x4034c3c9
    eb88:	3fe5c91d 	.word	0x3fe5c91d
    eb8c:	c030bfa4 	.word	0xc030bfa4
    eb90:	b98c7e28 	.word	0xb98c7e28
    eb94:	4035696b 	.word	0x4035696b
    eb98:	a0902de0 	.word	0xa0902de0
    eb9c:	c02e71f8 	.word	0xc02e71f8
    eba0:	c5d63886 	.word	0xc5d63886
    eba4:	4035b46d 	.word	0x4035b46d
    eba8:	00010510 	.word	0x00010510

0000ebac <m_sigOri_calcGyroAnglePerStep_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles m_sigOri_calcGyroAnglePerStep_st()
{
    ebac:	e92d4830 	push	{r4, r5, fp, lr}
    ebb0:	e28db00c 	add	fp, sp, #12
    ebb4:	e24dd060 	sub	sp, sp, #96	; 0x60
	sigOri_orientationAngles l_angles_f64;
	
	long int time_difference;
	struct timeval gettime_now;
	double l_timestep_f64=0;
    ebb8:	e3a02000 	mov	r2, #0
    ebbc:	e3a03000 	mov	r3, #0
    ebc0:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	gettimeofday(&gettime_now,(void *)0);
    ebc4:	e24b3054 	sub	r3, fp, #84	; 0x54
    ebc8:	e1a00003 	mov	r0, r3
    ebcc:	e3a01000 	mov	r1, #0
    ebd0:	ebffe760 	bl	8958 <_init+0xc8>

	time_difference=gettime_now.tv_usec-gettime_old.tv_usec;
    ebd4:	e51b2050 	ldr	r2, [fp, #-80]	; 0x50
    ebd8:	e59f30e0 	ldr	r3, [pc, #224]	; ecc0 <m_sigOri_calcGyroAnglePerStep_st+0x114>
    ebdc:	e5933004 	ldr	r3, [r3, #4]
    ebe0:	e0633002 	rsb	r3, r3, r2
    ebe4:	e50b3010 	str	r3, [fp, #-16]
	if(time_difference<0)
    ebe8:	e51b3010 	ldr	r3, [fp, #-16]
    ebec:	e3530000 	cmp	r3, #0
    ebf0:	aa000006 	bge	ec10 <m_sigOri_calcGyroAnglePerStep_st+0x64>
	{
		time_difference=1000000-gettime_old.tv_usec+gettime_now.tv_usec;
    ebf4:	e59f30c4 	ldr	r3, [pc, #196]	; ecc0 <m_sigOri_calcGyroAnglePerStep_st+0x114>
    ebf8:	e5933004 	ldr	r3, [r3, #4]
    ebfc:	e263393d 	rsb	r3, r3, #999424	; 0xf4000
    ec00:	e2833d09 	add	r3, r3, #576	; 0x240
    ec04:	e51b2050 	ldr	r2, [fp, #-80]	; 0x50
    ec08:	e0833002 	add	r3, r3, r2
    ec0c:	e50b3010 	str	r3, [fp, #-16]
	}

	l_timestep_f64=(double)(time_difference)*0.000001;
    ec10:	e51b3010 	ldr	r3, [fp, #-16]
    ec14:	ee073a90 	vmov	s15, r3
    ec18:	eeb86be7 	vcvt.f64.s32	d6, s15
    ec1c:	ed9f7b25 	vldr	d7, [pc, #148]	; ecb8 <m_sigOri_calcGyroAnglePerStep_st+0x10c>
    ec20:	ee267b07 	vmul.f64	d7, d6, d7
    ec24:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4

	l_angles_f64.roll_f64=m_sigori_imuValues_st.gyro.l_roll_f64*l_timestep_f64;
    ec28:	e59f3094 	ldr	r3, [pc, #148]	; ecc4 <m_sigOri_calcGyroAnglePerStep_st+0x118>
    ec2c:	ed936b10 	vldr	d6, [r3, #64]	; 0x40
    ec30:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
    ec34:	ee267b07 	vmul.f64	d7, d6, d7
    ec38:	ed0b7b13 	vstr	d7, [fp, #-76]	; 0xffffffb4
	l_angles_f64.pitch_f64=m_sigori_imuValues_st.gyro.l_pitch_f64*l_timestep_f64;
    ec3c:	e59f3080 	ldr	r3, [pc, #128]	; ecc4 <m_sigOri_calcGyroAnglePerStep_st+0x118>
    ec40:	ed936b0e 	vldr	d6, [r3, #56]	; 0x38
    ec44:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
    ec48:	ee267b07 	vmul.f64	d7, d6, d7
    ec4c:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc
	l_angles_f64.yaw_f64=m_sigori_imuValues_st.gyro.l_yaw_f64*l_timestep_f64;
    ec50:	e59f306c 	ldr	r3, [pc, #108]	; ecc4 <m_sigOri_calcGyroAnglePerStep_st+0x118>
    ec54:	ed936b0c 	vldr	d6, [r3, #48]	; 0x30
    ec58:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
    ec5c:	ee267b07 	vmul.f64	d7, d6, d7
    ec60:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	gettimeofday(&gettime_old,(void *)0);
    ec64:	e59f0054 	ldr	r0, [pc, #84]	; ecc0 <m_sigOri_calcGyroAnglePerStep_st+0x114>
    ec68:	e3a01000 	mov	r1, #0
    ec6c:	ebffe739 	bl	8958 <_init+0xc8>

	return l_angles_f64;
    ec70:	e24bc034 	sub	ip, fp, #52	; 0x34
    ec74:	e24be04c 	sub	lr, fp, #76	; 0x4c
    ec78:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    ec7c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    ec80:	e89e0003 	ldm	lr, {r0, r1}
    ec84:	e88c0003 	stm	ip, {r0, r1}
    ec88:	e14b43d4 	ldrd	r4, [fp, #-52]	; 0xffffffcc
    ec8c:	e14b02dc 	ldrd	r0, [fp, #-44]	; 0xffffffd4
    ec90:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
    ec94:	ec454b15 	vmov	d5, r4, r5
    ec98:	ec410b16 	vmov	d6, r0, r1
    ec9c:	ec432b17 	vmov	d7, r2, r3
}
    eca0:	eeb00b45 	vmov.f64	d0, d5
    eca4:	eeb01b46 	vmov.f64	d1, d6
    eca8:	eeb02b47 	vmov.f64	d2, d7
    ecac:	e24bd00c 	sub	sp, fp, #12
    ecb0:	e8bd8830 	pop	{r4, r5, fp, pc}
    ecb4:	e1a00000 	nop			; (mov r0, r0)
    ecb8:	a0b5ed8d 	.word	0xa0b5ed8d
    ecbc:	3eb0c6f7 	.word	0x3eb0c6f7
    ecc0:	000108b0 	.word	0x000108b0
    ecc4:	00010510 	.word	0x00010510

0000ecc8 <m_sigOri_calcBarometricHeight_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void m_sigOri_calcBarometricHeight_st()
{
    ecc8:	e92d4800 	push	{fp, lr}
    eccc:	ed2d8b02 	vpush	{d8}
    ecd0:	e28db00c 	add	fp, sp, #12
    ecd4:	e24dd010 	sub	sp, sp, #16
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
    ecd8:	e59f2090 	ldr	r2, [pc, #144]	; ed70 <m_sigOri_calcBarometricHeight_st+0xa8>
    ecdc:	e59f3090 	ldr	r3, [pc, #144]	; ed74 <m_sigOri_calcBarometricHeight_st+0xac>
    ece0:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	double l_Deg2Kelvin_f64=273.15;
    ece4:	e59f208c 	ldr	r2, [pc, #140]	; ed78 <m_sigOri_calcBarometricHeight_st+0xb0>
    ece8:	e59f308c 	ldr	r3, [pc, #140]	; ed7c <m_sigOri_calcBarometricHeight_st+0xb4>
    ecec:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
    ecf0:	e59f3088 	ldr	r3, [pc, #136]	; ed80 <m_sigOri_calcBarometricHeight_st+0xb8>
    ecf4:	ed937b00 	vldr	d7, [r3]
    ecf8:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
    ecfc:	ee866b07 	vdiv.f64	d6, d6, d7
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
    ed00:	e59f307c 	ldr	r3, [pc, #124]	; ed84 <m_sigOri_calcBarometricHeight_st+0xbc>
    ed04:	ed935b12 	vldr	d5, [r3, #72]	; 0x48
    ed08:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
    ed0c:	ee355b07 	vadd.f64	d5, d5, d7
    ed10:	e59f3070 	ldr	r3, [pc, #112]	; ed88 <m_sigOri_calcBarometricHeight_st+0xc0>
    ed14:	ed937b00 	vldr	d7, [r3]
    ed18:	ee355b07 	vadd.f64	d5, d5, d7
    ed1c:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
    ed20:	ee355b07 	vadd.f64	d5, d5, d7
    ed24:	ed9f7b0f 	vldr	d7, [pc, #60]	; ed68 <m_sigOri_calcBarometricHeight_st+0xa0>
    ed28:	ee857b07 	vdiv.f64	d7, d5, d7
void m_sigOri_calcBarometricHeight_st()
{
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
	double l_Deg2Kelvin_f64=273.15;

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
    ed2c:	ee268b07 	vmul.f64	d8, d6, d7
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
			log(m_sigOri_referencePressure_f64/m_sigori_imuValues_st.pressure_f64);
    ed30:	e59f3054 	ldr	r3, [pc, #84]	; ed8c <m_sigOri_calcBarometricHeight_st+0xc4>
    ed34:	ed936b00 	vldr	d6, [r3]
    ed38:	e59f3044 	ldr	r3, [pc, #68]	; ed84 <m_sigOri_calcBarometricHeight_st+0xbc>
    ed3c:	ed937b14 	vldr	d7, [r3, #80]	; 0x50
    ed40:	ee867b07 	vdiv.f64	d7, d6, d7
    ed44:	eeb00b47 	vmov.f64	d0, d7
    ed48:	ebffe72c 	bl	8a00 <_init+0x170>
    ed4c:	eeb07b40 	vmov.f64	d7, d0
{
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
	double l_Deg2Kelvin_f64=273.15;

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
    ed50:	ee287b07 	vmul.f64	d7, d8, d7
void m_sigOri_calcBarometricHeight_st()
{
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
	double l_Deg2Kelvin_f64=273.15;

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
    ed54:	e59f3034 	ldr	r3, [pc, #52]	; ed90 <m_sigOri_calcBarometricHeight_st+0xc8>
    ed58:	ed837b00 	vstr	d7, [r3]
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
			log(m_sigOri_referencePressure_f64/m_sigori_imuValues_st.pressure_f64);
}
    ed5c:	e24bd00c 	sub	sp, fp, #12
    ed60:	ecbd8b02 	vpop	{d8}
    ed64:	e8bd8800 	pop	{fp, pc}
    ed68:	00000000 	.word	0x00000000
    ed6c:	40000000 	.word	0x40000000
    ed70:	cccccccd 	.word	0xcccccccd
    ed74:	4071f0cc 	.word	0x4071f0cc
    ed78:	66666666 	.word	0x66666666
    ed7c:	40711266 	.word	0x40711266
    ed80:	00010578 	.word	0x00010578
    ed84:	00010510 	.word	0x00010510
    ed88:	00010580 	.word	0x00010580
    ed8c:	00010570 	.word	0x00010570
    ed90:	00010568 	.word	0x00010568

0000ed94 <g_sigOri_calcKalmanOrientation_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigOri_calcKalmanOrientation_bl()
{
    ed94:	e92d4800 	push	{fp, lr}
    ed98:	e28db004 	add	fp, sp, #4
    ed9c:	e24dd0e8 	sub	sp, sp, #232	; 0xe8
	double l_matrixTemp_rg9f64[M_SIGORI_SIZEOFARRAY_UI8][M_SIGORI_SIZEOFARRAY_UI8];
	double l_matrixTemp2_rg9f64[M_SIGORI_SIZEOFARRAY_UI8][M_SIGORI_SIZEOFARRAY_UI8];
	double l_matrixInnovation_rg9f64[M_SIGORI_SIZEOFARRAY_UI8][M_SIGORI_SIZEOFARRAY_UI8];

	//read new data from the IMU
	m_sigOri_getImuData_bl();
    eda0:	ebfffe9d 	bl	e81c <m_sigOri_getImuData_bl>

	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesKalman_st=m_sigOri_calcAccMagAngle_st();
    eda4:	ebfffeae 	bl	e864 <m_sigOri_calcAccMagAngle_st>
    eda8:	eeb05b40 	vmov.f64	d5, d0
    edac:	eeb06b41 	vmov.f64	d6, d1
    edb0:	eeb07b42 	vmov.f64	d7, d2
    edb4:	e59f3314 	ldr	r3, [pc, #788]	; f0d0 <g_sigOri_calcKalmanOrientation_bl+0x33c>
    edb8:	ed835b00 	vstr	d5, [r3]
    edbc:	ed836b02 	vstr	d6, [r3, #8]
    edc0:	ed837b04 	vstr	d7, [r3, #16]
	m_sigOri_arrayGyroAnglesKalman_st=m_sigOri_calcGyroAnglePerStep_st();
    edc4:	ebffff78 	bl	ebac <m_sigOri_calcGyroAnglePerStep_st>
    edc8:	eeb05b40 	vmov.f64	d5, d0
    edcc:	eeb06b41 	vmov.f64	d6, d1
    edd0:	eeb07b42 	vmov.f64	d7, d2
    edd4:	e59f32f8 	ldr	r3, [pc, #760]	; f0d4 <g_sigOri_calcKalmanOrientation_bl+0x340>
    edd8:	ed835b00 	vstr	d5, [r3]
    eddc:	ed836b02 	vstr	d6, [r3, #8]
    ede0:	ed837b04 	vstr	d7, [r3, #16]

	//set new calculated angles from the sensors in the matrices
	m_sigOri_matrixXnew_rg9f64[0][0]=m_sigOri_arrayAccMagAnglesKalman_st.roll_f64;
    ede4:	e59f32e4 	ldr	r3, [pc, #740]	; f0d0 <g_sigOri_calcKalmanOrientation_bl+0x33c>
    ede8:	e1c320d0 	ldrd	r2, [r3]
    edec:	e59f12e4 	ldr	r1, [pc, #740]	; f0d8 <g_sigOri_calcKalmanOrientation_bl+0x344>
    edf0:	e1c120f0 	strd	r2, [r1]
	m_sigOri_matrixXnew_rg9f64[1][1]=m_sigOri_arrayAccMagAnglesKalman_st.pitch_f64;
    edf4:	e59f32d4 	ldr	r3, [pc, #724]	; f0d0 <g_sigOri_calcKalmanOrientation_bl+0x33c>
    edf8:	e1c320d8 	ldrd	r2, [r3, #8]
    edfc:	e59f12d4 	ldr	r1, [pc, #724]	; f0d8 <g_sigOri_calcKalmanOrientation_bl+0x344>
    ee00:	e1c122f0 	strd	r2, [r1, #32]
	m_sigOri_matrixXnew_rg9f64[2][2]=m_sigOri_arrayAccMagAnglesKalman_st.yaw_f64;
    ee04:	e59f32c4 	ldr	r3, [pc, #708]	; f0d0 <g_sigOri_calcKalmanOrientation_bl+0x33c>
    ee08:	e1c321d0 	ldrd	r2, [r3, #16]
    ee0c:	e59f12c4 	ldr	r1, [pc, #708]	; f0d8 <g_sigOri_calcKalmanOrientation_bl+0x344>
    ee10:	e1c124f0 	strd	r2, [r1, #64]	; 0x40

	m_sigOri_matrixUk_rg9f64[0][0]=m_sigOri_arrayGyroAnglesKalman_st.roll_f64;
    ee14:	e59f32b8 	ldr	r3, [pc, #696]	; f0d4 <g_sigOri_calcKalmanOrientation_bl+0x340>
    ee18:	e1c320d0 	ldrd	r2, [r3]
    ee1c:	e59f12b8 	ldr	r1, [pc, #696]	; f0dc <g_sigOri_calcKalmanOrientation_bl+0x348>
    ee20:	e1c120f0 	strd	r2, [r1]
	m_sigOri_matrixUk_rg9f64[1][1]=m_sigOri_arrayGyroAnglesKalman_st.pitch_f64;
    ee24:	e59f32a8 	ldr	r3, [pc, #680]	; f0d4 <g_sigOri_calcKalmanOrientation_bl+0x340>
    ee28:	e1c320d8 	ldrd	r2, [r3, #8]
    ee2c:	e59f12a8 	ldr	r1, [pc, #680]	; f0dc <g_sigOri_calcKalmanOrientation_bl+0x348>
    ee30:	e1c122f0 	strd	r2, [r1, #32]
	m_sigOri_matrixUk_rg9f64[2][2]=m_sigOri_arrayGyroAnglesKalman_st.yaw_f64;
    ee34:	e59f3298 	ldr	r3, [pc, #664]	; f0d4 <g_sigOri_calcKalmanOrientation_bl+0x340>
    ee38:	e1c321d0 	ldrd	r2, [r3, #16]
    ee3c:	e59f1298 	ldr	r1, [pc, #664]	; f0dc <g_sigOri_calcKalmanOrientation_bl+0x348>
    ee40:	e1c124f0 	strd	r2, [r1, #64]	; 0x40

//PREDICTION
	//state estimation (prediction)
	g_sigMath_matrixAddition_bl((double*) l_matrixTemp_rg9f64,
    ee44:	e24b304c 	sub	r3, fp, #76	; 0x4c
    ee48:	e59f228c 	ldr	r2, [pc, #652]	; f0dc <g_sigOri_calcKalmanOrientation_bl+0x348>
    ee4c:	e58d2000 	str	r2, [sp]
    ee50:	e3a02003 	mov	r2, #3
    ee54:	e58d2004 	str	r2, [sp, #4]
    ee58:	e3a02003 	mov	r2, #3
    ee5c:	e58d2008 	str	r2, [sp, #8]
    ee60:	e1a00003 	mov	r0, r3
    ee64:	e59f1274 	ldr	r1, [pc, #628]	; f0e0 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    ee68:	e3a02003 	mov	r2, #3
    ee6c:	e3a03003 	mov	r3, #3
    ee70:	ebfff9f4 	bl	d648 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixXk_rg9f64, 3,3, 
		(double*) m_sigOri_matrixUk_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixXk_rg9f64,3,3,
    ee74:	e24b304c 	sub	r3, fp, #76	; 0x4c
    ee78:	e3a02003 	mov	r2, #3
    ee7c:	e58d2000 	str	r2, [sp]
    ee80:	e3a02003 	mov	r2, #3
    ee84:	e58d2004 	str	r2, [sp, #4]
    ee88:	e59f0250 	ldr	r0, [pc, #592]	; f0e0 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    ee8c:	e3a01003 	mov	r1, #3
    ee90:	e3a02003 	mov	r2, #3
    ee94:	ebfffcc4 	bl	e1ac <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp_rg9f64,3,3);


	//covariance estimation (prediction)
	g_sigMath_matrixAddition_bl((double*) l_matrixTemp_rg9f64,
    ee98:	e24b304c 	sub	r3, fp, #76	; 0x4c
    ee9c:	e59f2240 	ldr	r2, [pc, #576]	; f0e4 <g_sigOri_calcKalmanOrientation_bl+0x350>
    eea0:	e58d2000 	str	r2, [sp]
    eea4:	e3a02003 	mov	r2, #3
    eea8:	e58d2004 	str	r2, [sp, #4]
    eeac:	e3a02003 	mov	r2, #3
    eeb0:	e58d2008 	str	r2, [sp, #8]
    eeb4:	e1a00003 	mov	r0, r3
    eeb8:	e59f1228 	ldr	r1, [pc, #552]	; f0e8 <g_sigOri_calcKalmanOrientation_bl+0x354>
    eebc:	e3a02003 	mov	r2, #3
    eec0:	e3a03003 	mov	r3, #3
    eec4:	ebfff9df 	bl	d648 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixPk_rg9f64, 3,3, 
		(double*) m_sigOri_matrixQ_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixPk_rg9f64,3,3,
    eec8:	e24b304c 	sub	r3, fp, #76	; 0x4c
    eecc:	e3a02003 	mov	r2, #3
    eed0:	e58d2000 	str	r2, [sp]
    eed4:	e3a02003 	mov	r2, #3
    eed8:	e58d2004 	str	r2, [sp, #4]
    eedc:	e59f0204 	ldr	r0, [pc, #516]	; f0e8 <g_sigOri_calcKalmanOrientation_bl+0x354>
    eee0:	e3a01003 	mov	r1, #3
    eee4:	e3a02003 	mov	r2, #3
    eee8:	ebfffcaf 	bl	e1ac <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp_rg9f64,3,3);

//UPDATE
	//Innovation (update)
	g_sigMath_matrixSubtraktion_bl((double*) l_matrixInnovation_rg9f64,
    eeec:	e24b30dc 	sub	r3, fp, #220	; 0xdc
    eef0:	e59f21e8 	ldr	r2, [pc, #488]	; f0e0 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    eef4:	e58d2000 	str	r2, [sp]
    eef8:	e3a02003 	mov	r2, #3
    eefc:	e58d2004 	str	r2, [sp, #4]
    ef00:	e3a02003 	mov	r2, #3
    ef04:	e58d2008 	str	r2, [sp, #8]
    ef08:	e1a00003 	mov	r0, r3
    ef0c:	e59f11c4 	ldr	r1, [pc, #452]	; f0d8 <g_sigOri_calcKalmanOrientation_bl+0x344>
    ef10:	e3a02003 	mov	r2, #3
    ef14:	e3a03003 	mov	r3, #3
    ef18:	ebfffa15 	bl	d774 <g_sigMath_matrixSubtraktion_bl>
		(double*) m_sigOri_matrixXnew_rg9f64,3,3, 
		(double*) m_sigOri_matrixXk_rg9f64,3,3);

	//Innovation covariance (update)
	g_sigMath_matrixAddition_bl((double*) m_sigOri_matrixS_rg9f64,
    ef1c:	e59f31c8 	ldr	r3, [pc, #456]	; f0ec <g_sigOri_calcKalmanOrientation_bl+0x358>
    ef20:	e58d3000 	str	r3, [sp]
    ef24:	e3a03003 	mov	r3, #3
    ef28:	e58d3004 	str	r3, [sp, #4]
    ef2c:	e3a03003 	mov	r3, #3
    ef30:	e58d3008 	str	r3, [sp, #8]
    ef34:	e59f01b4 	ldr	r0, [pc, #436]	; f0f0 <g_sigOri_calcKalmanOrientation_bl+0x35c>
    ef38:	e59f11a8 	ldr	r1, [pc, #424]	; f0e8 <g_sigOri_calcKalmanOrientation_bl+0x354>
    ef3c:	e3a02003 	mov	r2, #3
    ef40:	e3a03003 	mov	r3, #3
    ef44:	ebfff9bf 	bl	d648 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixPk_rg9f64, 3,3, 
		(double*) m_sigOri_matrixR_rg9f64,3,3);

	//Kalman Gain calculation (update)
	g_sigMath_matrixInverse_bl((double*) l_matrixTemp_rg9f64,
    ef48:	e24b304c 	sub	r3, fp, #76	; 0x4c
    ef4c:	e1a00003 	mov	r0, r3
    ef50:	e59f1198 	ldr	r1, [pc, #408]	; f0f0 <g_sigOri_calcKalmanOrientation_bl+0x35c>
    ef54:	e3a02003 	mov	r2, #3
    ef58:	e3a03003 	mov	r3, #3
    ef5c:	ebfffa84 	bl	d974 <g_sigMath_matrixInverse_bl>
		(double*) m_sigOri_matrixS_rg9f64,3,3);
	g_sigMath_matrixMultiplikation_bl(
    ef60:	e24b304c 	sub	r3, fp, #76	; 0x4c
    ef64:	e58d3000 	str	r3, [sp]
    ef68:	e3a03003 	mov	r3, #3
    ef6c:	e58d3004 	str	r3, [sp, #4]
    ef70:	e3a03003 	mov	r3, #3
    ef74:	e58d3008 	str	r3, [sp, #8]
    ef78:	e59f0174 	ldr	r0, [pc, #372]	; f0f4 <g_sigOri_calcKalmanOrientation_bl+0x360>
    ef7c:	e59f1164 	ldr	r1, [pc, #356]	; f0e8 <g_sigOri_calcKalmanOrientation_bl+0x354>
    ef80:	e3a02003 	mov	r2, #3
    ef84:	e3a03003 	mov	r3, #3
    ef88:	ebfff951 	bl	d4d4 <g_sigMath_matrixMultiplikation_bl>
		(double*) m_sigOri_matrixK_rg9f64, 
		(double*) m_sigOri_matrixPk_rg9f64,3,3,
		(double*) l_matrixTemp_rg9f64,3,3);

	//State estimation (update)
	g_sigMath_matrixMultiplikation_bl(
    ef8c:	e24b304c 	sub	r3, fp, #76	; 0x4c
    ef90:	e24b20dc 	sub	r2, fp, #220	; 0xdc
    ef94:	e58d2000 	str	r2, [sp]
    ef98:	e3a02003 	mov	r2, #3
    ef9c:	e58d2004 	str	r2, [sp, #4]
    efa0:	e3a02003 	mov	r2, #3
    efa4:	e58d2008 	str	r2, [sp, #8]
    efa8:	e1a00003 	mov	r0, r3
    efac:	e59f1140 	ldr	r1, [pc, #320]	; f0f4 <g_sigOri_calcKalmanOrientation_bl+0x360>
    efb0:	e3a02003 	mov	r2, #3
    efb4:	e3a03003 	mov	r3, #3
    efb8:	ebfff945 	bl	d4d4 <g_sigMath_matrixMultiplikation_bl>
		(double*) l_matrixTemp_rg9f64, 
		(double*) m_sigOri_matrixK_rg9f64,3,3,
		(double*) l_matrixInnovation_rg9f64,3,3);
	g_sigMath_matrixAddition_bl((double*) l_matrixTemp2_rg9f64,
    efbc:	e24b3094 	sub	r3, fp, #148	; 0x94
    efc0:	e24b204c 	sub	r2, fp, #76	; 0x4c
    efc4:	e58d2000 	str	r2, [sp]
    efc8:	e3a02003 	mov	r2, #3
    efcc:	e58d2004 	str	r2, [sp, #4]
    efd0:	e3a02003 	mov	r2, #3
    efd4:	e58d2008 	str	r2, [sp, #8]
    efd8:	e1a00003 	mov	r0, r3
    efdc:	e59f10fc 	ldr	r1, [pc, #252]	; f0e0 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    efe0:	e3a02003 	mov	r2, #3
    efe4:	e3a03003 	mov	r3, #3
    efe8:	ebfff996 	bl	d648 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixXk_rg9f64, 3,3, 
		(double*) l_matrixTemp_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixXk_rg9f64,3,3,
    efec:	e24b3094 	sub	r3, fp, #148	; 0x94
    eff0:	e3a02003 	mov	r2, #3
    eff4:	e58d2000 	str	r2, [sp]
    eff8:	e3a02003 	mov	r2, #3
    effc:	e58d2004 	str	r2, [sp, #4]
    f000:	e59f00d8 	ldr	r0, [pc, #216]	; f0e0 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    f004:	e3a01003 	mov	r1, #3
    f008:	e3a02003 	mov	r2, #3
    f00c:	ebfffc66 	bl	e1ac <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp2_rg9f64,3,3);

	//Covariance estimation (update)
	g_sigMath_matrixSubtraktion_bl((double*) l_matrixTemp_rg9f64,
    f010:	e24b304c 	sub	r3, fp, #76	; 0x4c
    f014:	e59f20d8 	ldr	r2, [pc, #216]	; f0f4 <g_sigOri_calcKalmanOrientation_bl+0x360>
    f018:	e58d2000 	str	r2, [sp]
    f01c:	e3a02003 	mov	r2, #3
    f020:	e58d2004 	str	r2, [sp, #4]
    f024:	e3a02003 	mov	r2, #3
    f028:	e58d2008 	str	r2, [sp, #8]
    f02c:	e1a00003 	mov	r0, r3
    f030:	e59f10c0 	ldr	r1, [pc, #192]	; f0f8 <g_sigOri_calcKalmanOrientation_bl+0x364>
    f034:	e3a02003 	mov	r2, #3
    f038:	e3a03003 	mov	r3, #3
    f03c:	ebfff9cc 	bl	d774 <g_sigMath_matrixSubtraktion_bl>
		(double*) m_sigOri_matrixI_rg9f64,3,3, 
		(double*) m_sigOri_matrixK_rg9f64,3,3);
	g_sigMath_matrixMultiplikation_bl(
    f040:	e24b2094 	sub	r2, fp, #148	; 0x94
    f044:	e24b304c 	sub	r3, fp, #76	; 0x4c
    f048:	e59f1098 	ldr	r1, [pc, #152]	; f0e8 <g_sigOri_calcKalmanOrientation_bl+0x354>
    f04c:	e58d1000 	str	r1, [sp]
    f050:	e3a01003 	mov	r1, #3
    f054:	e58d1004 	str	r1, [sp, #4]
    f058:	e3a01003 	mov	r1, #3
    f05c:	e58d1008 	str	r1, [sp, #8]
    f060:	e1a00002 	mov	r0, r2
    f064:	e1a01003 	mov	r1, r3
    f068:	e3a02003 	mov	r2, #3
    f06c:	e3a03003 	mov	r3, #3
    f070:	ebfff917 	bl	d4d4 <g_sigMath_matrixMultiplikation_bl>
		(double*) l_matrixTemp2_rg9f64, 
		(double*) l_matrixTemp_rg9f64,3,3,
		(double*) m_sigOri_matrixPk_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixPk_rg9f64,3,3,
    f074:	e24b3094 	sub	r3, fp, #148	; 0x94
    f078:	e3a02003 	mov	r2, #3
    f07c:	e58d2000 	str	r2, [sp]
    f080:	e3a02003 	mov	r2, #3
    f084:	e58d2004 	str	r2, [sp, #4]
    f088:	e59f0058 	ldr	r0, [pc, #88]	; f0e8 <g_sigOri_calcKalmanOrientation_bl+0x354>
    f08c:	e3a01003 	mov	r1, #3
    f090:	e3a02003 	mov	r2, #3
    f094:	ebfffc44 	bl	e1ac <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp2_rg9f64,3,3);

//set calculate within this module global
	m_sigOri_arrayOutputAnglesKalman_st.roll_f64=m_sigOri_matrixXk_rg9f64[0][0];
    f098:	e59f3040 	ldr	r3, [pc, #64]	; f0e0 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    f09c:	e1c320d0 	ldrd	r2, [r3]
    f0a0:	e59f1054 	ldr	r1, [pc, #84]	; f0fc <g_sigOri_calcKalmanOrientation_bl+0x368>
    f0a4:	e1c120f0 	strd	r2, [r1]
	m_sigOri_arrayOutputAnglesKalman_st.pitch_f64=m_sigOri_matrixXk_rg9f64[1][1];
    f0a8:	e59f3030 	ldr	r3, [pc, #48]	; f0e0 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    f0ac:	e1c322d0 	ldrd	r2, [r3, #32]
    f0b0:	e59f1044 	ldr	r1, [pc, #68]	; f0fc <g_sigOri_calcKalmanOrientation_bl+0x368>
    f0b4:	e1c120f8 	strd	r2, [r1, #8]
	m_sigOri_arrayOutputAnglesKalman_st.yaw_f64=m_sigOri_matrixXk_rg9f64[2][2];
    f0b8:	e59f3020 	ldr	r3, [pc, #32]	; f0e0 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    f0bc:	e1c324d0 	ldrd	r2, [r3, #64]	; 0x40
    f0c0:	e59f1034 	ldr	r1, [pc, #52]	; f0fc <g_sigOri_calcKalmanOrientation_bl+0x368>
    f0c4:	e1c121f0 	strd	r2, [r1, #16]
}
    f0c8:	e24bd004 	sub	sp, fp, #4
    f0cc:	e8bd8800 	pop	{fp, pc}
    f0d0:	00010598 	.word	0x00010598
    f0d4:	000105b0 	.word	0x000105b0
    f0d8:	00010670 	.word	0x00010670
    f0dc:	000106b8 	.word	0x000106b8
    f0e0:	00010628 	.word	0x00010628
    f0e4:	000107d8 	.word	0x000107d8
    f0e8:	00010748 	.word	0x00010748
    f0ec:	00010790 	.word	0x00010790
    f0f0:	00010820 	.word	0x00010820
    f0f4:	00010868 	.word	0x00010868
    f0f8:	00010700 	.word	0x00010700
    f0fc:	000105c8 	.word	0x000105c8

0000f100 <g_sigOri_calcComplementaryOrientation_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigOri_calcComplementaryOrientation_bl()
{
    f100:	e92d4800 	push	{fp, lr}
    f104:	e28db004 	add	fp, sp, #4
	//read new data from the IMU
	m_sigOri_getImuData_bl();
    f108:	ebfffdc3 	bl	e81c <m_sigOri_getImuData_bl>
	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesComplementary_st=m_sigOri_calcAccMagAngle_st();
    f10c:	ebfffdd4 	bl	e864 <m_sigOri_calcAccMagAngle_st>
    f110:	eeb05b40 	vmov.f64	d5, d0
    f114:	eeb06b41 	vmov.f64	d6, d1
    f118:	eeb07b42 	vmov.f64	d7, d2
    f11c:	e59f30e4 	ldr	r3, [pc, #228]	; f208 <g_sigOri_calcComplementaryOrientation_bl+0x108>
    f120:	ed835b00 	vstr	d5, [r3]
    f124:	ed836b02 	vstr	d6, [r3, #8]
    f128:	ed837b04 	vstr	d7, [r3, #16]
	m_sigOri_arrayGyroAnglesComplementary_st=m_sigOri_calcGyroAnglePerStep_st();
    f12c:	ebfffe9e 	bl	ebac <m_sigOri_calcGyroAnglePerStep_st>
    f130:	eeb05b40 	vmov.f64	d5, d0
    f134:	eeb06b41 	vmov.f64	d6, d1
    f138:	eeb07b42 	vmov.f64	d7, d2
    f13c:	e59f30c8 	ldr	r3, [pc, #200]	; f20c <g_sigOri_calcComplementaryOrientation_bl+0x10c>
    f140:	ed835b00 	vstr	d5, [r3]
    f144:	ed836b02 	vstr	d6, [r3, #8]
    f148:	ed837b04 	vstr	d7, [r3, #16]

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
    f14c:	e59f30bc 	ldr	r3, [pc, #188]	; f210 <g_sigOri_calcComplementaryOrientation_bl+0x110>
    f150:	ed936b02 	vldr	d6, [r3, #8]
    f154:	e59f30b0 	ldr	r3, [pc, #176]	; f20c <g_sigOri_calcComplementaryOrientation_bl+0x10c>
    f158:	ed937b02 	vldr	d7, [r3, #8]
    f15c:	ee366b07 	vadd.f64	d6, d6, d7
    f160:	ed9f7b24 	vldr	d7, [pc, #144]	; f1f8 <g_sigOri_calcComplementaryOrientation_bl+0xf8>
    f164:	ee266b07 	vmul.f64	d6, d6, d7
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;
    f168:	e59f3098 	ldr	r3, [pc, #152]	; f208 <g_sigOri_calcComplementaryOrientation_bl+0x108>
    f16c:	ed935b02 	vldr	d5, [r3, #8]
    f170:	ed9f7b22 	vldr	d7, [pc, #136]	; f200 <g_sigOri_calcComplementaryOrientation_bl+0x100>
    f174:	ee257b07 	vmul.f64	d7, d5, d7
	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesComplementary_st=m_sigOri_calcAccMagAngle_st();
	m_sigOri_arrayGyroAnglesComplementary_st=m_sigOri_calcGyroAnglePerStep_st();

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
    f178:	ee367b07 	vadd.f64	d7, d6, d7
	m_sigOri_getImuData_bl();
	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesComplementary_st=m_sigOri_calcAccMagAngle_st();
	m_sigOri_arrayGyroAnglesComplementary_st=m_sigOri_calcGyroAnglePerStep_st();

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
    f17c:	e59f308c 	ldr	r3, [pc, #140]	; f210 <g_sigOri_calcComplementaryOrientation_bl+0x110>
    f180:	ed837b02 	vstr	d7, [r3, #8]
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
    f184:	e59f3084 	ldr	r3, [pc, #132]	; f210 <g_sigOri_calcComplementaryOrientation_bl+0x110>
    f188:	ed936b00 	vldr	d6, [r3]
    f18c:	e59f3078 	ldr	r3, [pc, #120]	; f20c <g_sigOri_calcComplementaryOrientation_bl+0x10c>
    f190:	ed937b00 	vldr	d7, [r3]
    f194:	ee366b07 	vadd.f64	d6, d6, d7
    f198:	ed9f7b16 	vldr	d7, [pc, #88]	; f1f8 <g_sigOri_calcComplementaryOrientation_bl+0xf8>
    f19c:	ee266b07 	vmul.f64	d6, d6, d7
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;
    f1a0:	e59f3060 	ldr	r3, [pc, #96]	; f208 <g_sigOri_calcComplementaryOrientation_bl+0x108>
    f1a4:	ed935b00 	vldr	d5, [r3]
    f1a8:	ed9f7b14 	vldr	d7, [pc, #80]	; f200 <g_sigOri_calcComplementaryOrientation_bl+0x100>
    f1ac:	ee257b07 	vmul.f64	d7, d5, d7
	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
    f1b0:	ee367b07 	vadd.f64	d7, d6, d7

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
    f1b4:	e59f3054 	ldr	r3, [pc, #84]	; f210 <g_sigOri_calcComplementaryOrientation_bl+0x110>
    f1b8:	ed837b00 	vstr	d7, [r3]
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64=
		M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64+m_sigOri_arrayGyroAnglesComplementary_st.yaw_f64) +
    f1bc:	e59f304c 	ldr	r3, [pc, #76]	; f210 <g_sigOri_calcComplementaryOrientation_bl+0x110>
    f1c0:	ed936b04 	vldr	d6, [r3, #16]
    f1c4:	e59f3040 	ldr	r3, [pc, #64]	; f20c <g_sigOri_calcComplementaryOrientation_bl+0x10c>
    f1c8:	ed937b04 	vldr	d7, [r3, #16]
    f1cc:	ee366b07 	vadd.f64	d6, d6, d7
    f1d0:	ed9f7b08 	vldr	d7, [pc, #32]	; f1f8 <g_sigOri_calcComplementaryOrientation_bl+0xf8>
    f1d4:	ee266b07 	vmul.f64	d6, d6, d7
		(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.yaw_f64;
    f1d8:	e59f3028 	ldr	r3, [pc, #40]	; f208 <g_sigOri_calcComplementaryOrientation_bl+0x108>
    f1dc:	ed935b04 	vldr	d5, [r3, #16]
    f1e0:	ed9f7b06 	vldr	d7, [pc, #24]	; f200 <g_sigOri_calcComplementaryOrientation_bl+0x100>
    f1e4:	ee257b07 	vmul.f64	d7, d5, d7
	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64=
		M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64+m_sigOri_arrayGyroAnglesComplementary_st.yaw_f64) +
    f1e8:	ee367b07 	vadd.f64	d7, d6, d7

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64=
    f1ec:	e59f301c 	ldr	r3, [pc, #28]	; f210 <g_sigOri_calcComplementaryOrientation_bl+0x110>
    f1f0:	ed837b04 	vstr	d7, [r3, #16]
		M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64+m_sigOri_arrayGyroAnglesComplementary_st.yaw_f64) +
		(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.yaw_f64;
}
    f1f4:	e8bd8800 	pop	{fp, pc}
    f1f8:	f9db22d1 	.word	0xf9db22d1
    f1fc:	3fec6a7e 	.word	0x3fec6a7e
    f200:	3126e978 	.word	0x3126e978
    f204:	3fbcac08 	.word	0x3fbcac08
    f208:	000105e0 	.word	0x000105e0
    f20c:	000105f8 	.word	0x000105f8
    f210:	00010610 	.word	0x00010610
    f214:	e1a00000 	nop			; (mov r0, r0)

0000f218 <g_sigFil_getImuValuesUnfiltered_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halImu_orientationValues g_sigFil_getImuValuesUnfiltered_st()
{
    f218:	e92d4800 	push	{fp, lr}
    f21c:	e28db004 	add	fp, sp, #4
    f220:	e24dd008 	sub	sp, sp, #8
    f224:	e50b0008 	str	r0, [fp, #-8]
	return m_sigFil_imuValues_st;
    f228:	e51b2008 	ldr	r2, [fp, #-8]
    f22c:	e59f3024 	ldr	r3, [pc, #36]	; f258 <g_sigFil_getImuValuesUnfiltered_st+0x40>
    f230:	e1a01002 	mov	r1, r2
    f234:	e1a02003 	mov	r2, r3
    f238:	e3a03058 	mov	r3, #88	; 0x58
    f23c:	e1a00001 	mov	r0, r1
    f240:	e1a01002 	mov	r1, r2
    f244:	e1a02003 	mov	r2, r3
    f248:	ebffe5d4 	bl	89a0 <_init+0x110>
}
    f24c:	e51b0008 	ldr	r0, [fp, #-8]
    f250:	e24bd004 	sub	sp, fp, #4
    f254:	e8bd8800 	pop	{fp, pc}
    f258:	000108b8 	.word	0x000108b8

0000f25c <m_sigFil_offsetCorrectionGyro_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
strGyro m_sigFil_offsetCorrectionGyro_st()
{
    f25c:	e92d4830 	push	{r4, r5, fp, lr}
    f260:	e28db00c 	add	fp, sp, #12
    f264:	e24dd0a8 	sub	sp, sp, #168	; 0xa8
	int i=0;
    f268:	e3a03000 	mov	r3, #0
    f26c:	e50b3010 	str	r3, [fp, #-16]
	strGyro l_measuredGyroValue_st={0,0,0};
    f270:	e3a02000 	mov	r2, #0
    f274:	e3a03000 	mov	r3, #0
    f278:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
    f27c:	e3a02000 	mov	r2, #0
    f280:	e3a03000 	mov	r3, #0
    f284:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4
    f288:	e3a02000 	mov	r2, #0
    f28c:	e3a03000 	mov	r3, #0
    f290:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	halImu_orientationValues l_sigFil_imuValues_st;

	for(i=0;i<M_NR_OF_VALUES_FOR_OFFSET_UI8;i++)
    f294:	e3a03000 	mov	r3, #0
    f298:	e50b3010 	str	r3, [fp, #-16]
    f29c:	ea000012 	b	f2ec <m_sigFil_offsetCorrectionGyro_st+0x90>
	{
		g_halImu_triggerImuReading_bl();
    f2a0:	ebfff381 	bl	c0ac <g_halImu_triggerImuReading_bl>
		l_sigFil_imuValues_st = g_halImu_getImuValues_str();
    f2a4:	e24b309c 	sub	r3, fp, #156	; 0x9c
    f2a8:	e1a00003 	mov	r0, r3
    f2ac:	ebfff300 	bl	beb4 <g_halImu_getImuValues_str>

		l_measuredGyroValue_st.l_pitch_f64+=l_sigFil_imuValues_st.gyro.l_pitch_f64;
    f2b0:	ed1b6b0f 	vldr	d6, [fp, #-60]	; 0xffffffc4
    f2b4:	ed1b7b19 	vldr	d7, [fp, #-100]	; 0xffffff9c
    f2b8:	ee367b07 	vadd.f64	d7, d6, d7
    f2bc:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
		l_measuredGyroValue_st.l_roll_f64+=l_sigFil_imuValues_st.gyro.l_roll_f64;
    f2c0:	ed1b6b0d 	vldr	d6, [fp, #-52]	; 0xffffffcc
    f2c4:	ed1b7b17 	vldr	d7, [fp, #-92]	; 0xffffffa4
    f2c8:	ee367b07 	vadd.f64	d7, d6, d7
    f2cc:	ed0b7b0d 	vstr	d7, [fp, #-52]	; 0xffffffcc
		l_measuredGyroValue_st.l_yaw_f64+=l_sigFil_imuValues_st.gyro.l_yaw_f64;
    f2d0:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
    f2d4:	ed1b7b1b 	vldr	d7, [fp, #-108]	; 0xffffff94
    f2d8:	ee367b07 	vadd.f64	d7, d6, d7
    f2dc:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc
{
	int i=0;
	strGyro l_measuredGyroValue_st={0,0,0};
	halImu_orientationValues l_sigFil_imuValues_st;

	for(i=0;i<M_NR_OF_VALUES_FOR_OFFSET_UI8;i++)
    f2e0:	e51b3010 	ldr	r3, [fp, #-16]
    f2e4:	e2833001 	add	r3, r3, #1
    f2e8:	e50b3010 	str	r3, [fp, #-16]
    f2ec:	e51b3010 	ldr	r3, [fp, #-16]
    f2f0:	e3530ffa 	cmp	r3, #1000	; 0x3e8
    f2f4:	baffffe9 	blt	f2a0 <m_sigFil_offsetCorrectionGyro_st+0x44>
		l_measuredGyroValue_st.l_pitch_f64+=l_sigFil_imuValues_st.gyro.l_pitch_f64;
		l_measuredGyroValue_st.l_roll_f64+=l_sigFil_imuValues_st.gyro.l_roll_f64;
		l_measuredGyroValue_st.l_yaw_f64+=l_sigFil_imuValues_st.gyro.l_yaw_f64;
	}

	l_measuredGyroValue_st.l_pitch_f64=l_measuredGyroValue_st.l_pitch_f64/M_NR_OF_VALUES_FOR_OFFSET_UI8;
    f2f8:	ed1b6b0f 	vldr	d6, [fp, #-60]	; 0xffffffc4
    f2fc:	ed9f7b1b 	vldr	d7, [pc, #108]	; f370 <m_sigFil_offsetCorrectionGyro_st+0x114>
    f300:	ee867b07 	vdiv.f64	d7, d6, d7
    f304:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	l_measuredGyroValue_st.l_roll_f64=l_measuredGyroValue_st.l_roll_f64/M_NR_OF_VALUES_FOR_OFFSET_UI8;
    f308:	ed1b6b0d 	vldr	d6, [fp, #-52]	; 0xffffffcc
    f30c:	ed9f7b17 	vldr	d7, [pc, #92]	; f370 <m_sigFil_offsetCorrectionGyro_st+0x114>
    f310:	ee867b07 	vdiv.f64	d7, d6, d7
    f314:	ed0b7b0d 	vstr	d7, [fp, #-52]	; 0xffffffcc
	l_measuredGyroValue_st.l_yaw_f64=l_measuredGyroValue_st.l_yaw_f64/M_NR_OF_VALUES_FOR_OFFSET_UI8;
    f318:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
    f31c:	ed9f7b13 	vldr	d7, [pc, #76]	; f370 <m_sigFil_offsetCorrectionGyro_st+0x114>
    f320:	ee867b07 	vdiv.f64	d7, d6, d7
    f324:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc

	return l_measuredGyroValue_st;
    f328:	e24bc02c 	sub	ip, fp, #44	; 0x2c
    f32c:	e24be044 	sub	lr, fp, #68	; 0x44
    f330:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    f334:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    f338:	e89e0003 	ldm	lr, {r0, r1}
    f33c:	e88c0003 	stm	ip, {r0, r1}
    f340:	e14b42dc 	ldrd	r4, [fp, #-44]	; 0xffffffd4
    f344:	e14b02d4 	ldrd	r0, [fp, #-36]	; 0xffffffdc
    f348:	e14b21dc 	ldrd	r2, [fp, #-28]	; 0xffffffe4
    f34c:	ec454b15 	vmov	d5, r4, r5
    f350:	ec410b16 	vmov	d6, r0, r1
    f354:	ec432b17 	vmov	d7, r2, r3
}
    f358:	eeb00b45 	vmov.f64	d0, d5
    f35c:	eeb01b46 	vmov.f64	d1, d6
    f360:	eeb02b47 	vmov.f64	d2, d7
    f364:	e24bd00c 	sub	sp, fp, #12
    f368:	e8bd8830 	pop	{r4, r5, fp, pc}
    f36c:	e1a00000 	nop			; (mov r0, r0)
    f370:	00000000 	.word	0x00000000
    f374:	408f4000 	.word	0x408f4000

0000f378 <g_SigFil_initImuSensors_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_SigFil_initImuSensors_bl()
{
    f378:	e92d4800 	push	{fp, lr}
    f37c:	e28db004 	add	fp, sp, #4
    f380:	e24dd008 	sub	sp, sp, #8
	unsigned int l_initState_bl;

	l_initState_bl = g_halImu_initImuSensors_bl();
    f384:	ebfff2db 	bl	bef8 <g_halImu_initImuSensors_bl>
    f388:	e50b0008 	str	r0, [fp, #-8]
	m_offsetGyro_st=m_sigFil_offsetCorrectionGyro_st();
    f38c:	ebffffb2 	bl	f25c <m_sigFil_offsetCorrectionGyro_st>
    f390:	eeb05b40 	vmov.f64	d5, d0
    f394:	eeb06b41 	vmov.f64	d6, d1
    f398:	eeb07b42 	vmov.f64	d7, d2
    f39c:	e59f3018 	ldr	r3, [pc, #24]	; f3bc <g_SigFil_initImuSensors_bl+0x44>
    f3a0:	ed835b00 	vstr	d5, [r3]
    f3a4:	ed836b02 	vstr	d6, [r3, #8]
    f3a8:	ed837b04 	vstr	d7, [r3, #16]

	return l_initState_bl;
    f3ac:	e51b3008 	ldr	r3, [fp, #-8]
}
    f3b0:	e1a00003 	mov	r0, r3
    f3b4:	e24bd004 	sub	sp, fp, #4
    f3b8:	e8bd8800 	pop	{fp, pc}
    f3bc:	00010910 	.word	0x00010910

0000f3c0 <g_sigFil_readImuData_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigFil_readImuData_bl()
{
    f3c0:	e92d4810 	push	{r4, fp, lr}
    f3c4:	e28db008 	add	fp, sp, #8
    f3c8:	e24dd05c 	sub	sp, sp, #92	; 0x5c
	g_halImu_triggerImuReading_bl();
    f3cc:	ebfff336 	bl	c0ac <g_halImu_triggerImuReading_bl>
	m_sigFil_imuValues_st = g_halImu_getImuValues_str();
    f3d0:	e59f40e8 	ldr	r4, [pc, #232]	; f4c0 <g_sigFil_readImuData_bl+0x100>
    f3d4:	e24b3064 	sub	r3, fp, #100	; 0x64
    f3d8:	e1a00003 	mov	r0, r3
    f3dc:	ebfff2b4 	bl	beb4 <g_halImu_getImuValues_str>
    f3e0:	e1a01004 	mov	r1, r4
    f3e4:	e24b2064 	sub	r2, fp, #100	; 0x64
    f3e8:	e3a03058 	mov	r3, #88	; 0x58
    f3ec:	e1a00001 	mov	r0, r1
    f3f0:	e1a01002 	mov	r1, r2
    f3f4:	e1a02003 	mov	r2, r3
    f3f8:	ebffe568 	bl	89a0 <_init+0x110>

	m_sigFil_imuValues_st.acc.z_f64=-m_sigFil_imuValues_st.acc.z_f64;
    f3fc:	e59f30bc 	ldr	r3, [pc, #188]	; f4c0 <g_sigFil_readImuData_bl+0x100>
    f400:	ed937b04 	vldr	d7, [r3, #16]
    f404:	eeb17b47 	vneg.f64	d7, d7
    f408:	e59f30b0 	ldr	r3, [pc, #176]	; f4c0 <g_sigFil_readImuData_bl+0x100>
    f40c:	ed837b04 	vstr	d7, [r3, #16]
	m_sigFil_imuValues_st.mag.x_f64=m_sigFil_imuValues_st.mag.x_f64*1000000;
    f410:	e59f30a8 	ldr	r3, [pc, #168]	; f4c0 <g_sigFil_readImuData_bl+0x100>
    f414:	ed936b06 	vldr	d6, [r3, #24]
    f418:	ed9f7b26 	vldr	d7, [pc, #152]	; f4b8 <g_sigFil_readImuData_bl+0xf8>
    f41c:	ee267b07 	vmul.f64	d7, d6, d7
    f420:	e59f3098 	ldr	r3, [pc, #152]	; f4c0 <g_sigFil_readImuData_bl+0x100>
    f424:	ed837b06 	vstr	d7, [r3, #24]
	m_sigFil_imuValues_st.mag.y_f64=m_sigFil_imuValues_st.mag.y_f64*1000000;
    f428:	e59f3090 	ldr	r3, [pc, #144]	; f4c0 <g_sigFil_readImuData_bl+0x100>
    f42c:	ed936b08 	vldr	d6, [r3, #32]
    f430:	ed9f7b20 	vldr	d7, [pc, #128]	; f4b8 <g_sigFil_readImuData_bl+0xf8>
    f434:	ee267b07 	vmul.f64	d7, d6, d7
    f438:	e59f3080 	ldr	r3, [pc, #128]	; f4c0 <g_sigFil_readImuData_bl+0x100>
    f43c:	ed837b08 	vstr	d7, [r3, #32]
	m_sigFil_imuValues_st.mag.z_f64=-m_sigFil_imuValues_st.mag.z_f64*1000000;
    f440:	e59f3078 	ldr	r3, [pc, #120]	; f4c0 <g_sigFil_readImuData_bl+0x100>
    f444:	ed937b0a 	vldr	d7, [r3, #40]	; 0x28
    f448:	eeb16b47 	vneg.f64	d6, d7
    f44c:	ed9f7b19 	vldr	d7, [pc, #100]	; f4b8 <g_sigFil_readImuData_bl+0xf8>
    f450:	ee267b07 	vmul.f64	d7, d6, d7
    f454:	e59f3064 	ldr	r3, [pc, #100]	; f4c0 <g_sigFil_readImuData_bl+0x100>
    f458:	ed837b0a 	vstr	d7, [r3, #40]	; 0x28
	m_sigFil_imuValues_st.gyro.l_pitch_f64=m_sigFil_imuValues_st.gyro.l_pitch_f64-m_offsetGyro_st.l_pitch_f64;
    f45c:	e59f305c 	ldr	r3, [pc, #92]	; f4c0 <g_sigFil_readImuData_bl+0x100>
    f460:	ed936b0e 	vldr	d6, [r3, #56]	; 0x38
    f464:	e59f3058 	ldr	r3, [pc, #88]	; f4c4 <g_sigFil_readImuData_bl+0x104>
    f468:	ed937b02 	vldr	d7, [r3, #8]
    f46c:	ee367b47 	vsub.f64	d7, d6, d7
    f470:	e59f3048 	ldr	r3, [pc, #72]	; f4c0 <g_sigFil_readImuData_bl+0x100>
    f474:	ed837b0e 	vstr	d7, [r3, #56]	; 0x38
	m_sigFil_imuValues_st.gyro.l_roll_f64=m_sigFil_imuValues_st.gyro.l_roll_f64-m_offsetGyro_st.l_roll_f64;
    f478:	e59f3040 	ldr	r3, [pc, #64]	; f4c0 <g_sigFil_readImuData_bl+0x100>
    f47c:	ed936b10 	vldr	d6, [r3, #64]	; 0x40
    f480:	e59f303c 	ldr	r3, [pc, #60]	; f4c4 <g_sigFil_readImuData_bl+0x104>
    f484:	ed937b04 	vldr	d7, [r3, #16]
    f488:	ee367b47 	vsub.f64	d7, d6, d7
    f48c:	e59f302c 	ldr	r3, [pc, #44]	; f4c0 <g_sigFil_readImuData_bl+0x100>
    f490:	ed837b10 	vstr	d7, [r3, #64]	; 0x40
	m_sigFil_imuValues_st.gyro.l_yaw_f64=m_sigFil_imuValues_st.gyro.l_yaw_f64-m_offsetGyro_st.l_yaw_f64;
    f494:	e59f3024 	ldr	r3, [pc, #36]	; f4c0 <g_sigFil_readImuData_bl+0x100>
    f498:	ed936b0c 	vldr	d6, [r3, #48]	; 0x30
    f49c:	e59f3020 	ldr	r3, [pc, #32]	; f4c4 <g_sigFil_readImuData_bl+0x104>
    f4a0:	ed937b00 	vldr	d7, [r3]
    f4a4:	ee367b47 	vsub.f64	d7, d6, d7
    f4a8:	e59f3010 	ldr	r3, [pc, #16]	; f4c0 <g_sigFil_readImuData_bl+0x100>
    f4ac:	ed837b0c 	vstr	d7, [r3, #48]	; 0x30

}
    f4b0:	e24bd008 	sub	sp, fp, #8
    f4b4:	e8bd8810 	pop	{r4, fp, pc}
    f4b8:	00000000 	.word	0x00000000
    f4bc:	412e8480 	.word	0x412e8480
    f4c0:	000108b8 	.word	0x000108b8
    f4c4:	00010910 	.word	0x00010910

0000f4c8 <__libc_csu_init>:
    f4c8:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}
    f4cc:	e1a06000 	mov	r6, r0
    f4d0:	e59f5048 	ldr	r5, [pc, #72]	; f520 <__libc_csu_init+0x58>
    f4d4:	e59fa048 	ldr	sl, [pc, #72]	; f524 <__libc_csu_init+0x5c>
    f4d8:	e08f5005 	add	r5, pc, r5
    f4dc:	e08fa00a 	add	sl, pc, sl
    f4e0:	e065a00a 	rsb	sl, r5, sl
    f4e4:	e1a07001 	mov	r7, r1
    f4e8:	e1a08002 	mov	r8, r2
    f4ec:	ebffe4e7 	bl	8890 <_init>
    f4f0:	e1b0a14a 	asrs	sl, sl, #2
    f4f4:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, sl, pc}
    f4f8:	e3a04000 	mov	r4, #0
    f4fc:	e4953004 	ldr	r3, [r5], #4
    f500:	e1a00006 	mov	r0, r6
    f504:	e1a01007 	mov	r1, r7
    f508:	e1a02008 	mov	r2, r8
    f50c:	e2844001 	add	r4, r4, #1
    f510:	e12fff33 	blx	r3
    f514:	e154000a 	cmp	r4, sl
    f518:	1afffff7 	bne	f4fc <__libc_csu_init+0x34>
    f51c:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, sl, pc}
    f520:	00000b20 	.word	0x00000b20
    f524:	00000b20 	.word	0x00000b20

0000f528 <__libc_csu_fini>:
    f528:	e12fff1e 	bx	lr

Disassembly of section .fini:

0000f52c <_fini>:
    f52c:	e92d4008 	push	{r3, lr}
    f530:	e8bd8008 	pop	{r3, pc}
