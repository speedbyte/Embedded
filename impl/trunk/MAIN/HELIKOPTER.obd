
HELIKOPTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .interp       00000019  00008134  00008134  00000134  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.ABI-tag 00000020  00008150  00008150  00000150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  00008170  00008170  00000170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .hash         00000140  00008194  00008194  00000194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dynsym       00000290  000082d4  000082d4  000002d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynstr       000001a9  00008564  00008564  00000564  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .gnu.version  00000052  0000870e  0000870e  0000070e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version_r 00000070  00008760  00008760  00000760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rel.dyn      00000008  000087d0  000087d0  000007d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rel.plt      00000128  000087d8  000087d8  000007d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .init         0000000c  00008900  00008900  00000900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .plt          000001d0  0000890c  0000890c  0000090c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text         0000714c  00008ae0  00008ae0  00000ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .fini         00000008  0000fc2c  0000fc2c  00007c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .rodata       00000584  0000fc34  0000fc34  00007c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .ARM.exidx    00000008  000101b8  000101b8  000081b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame     00000004  000101c0  000101c0  000081c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .init_array   00000004  000181c4  000181c4  000081c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 18 .fini_array   00000004  000181c8  000181c8  000081c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 19 .jcr          00000004  000181cc  000181cc  000081cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 20 .dynamic      00000108  000181d0  000181d0  000081d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .got          000000a4  000182d8  000182d8  000082d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 22 .data         000000a4  00018380  00018380  00008380  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .bss          00000ab8  00018428  00018428  00008424  2**3
                  ALLOC
 24 .comment      0000005b  00000000  00000000  00008424  2**0
                  CONTENTS, READONLY
 25 .ARM.attributes 00000031  00000000  00000000  0000847f  2**0
                  CONTENTS, READONLY
 26 .debug_aranges 00000240  00000000  00000000  000084b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_info   000039a3  00000000  00000000  000086f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_abbrev 00000f8a  00000000  00000000  0000c093  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_line   00004a00  00000000  00000000  0000d01d  2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .debug_frame  00000ec8  00000000  00000000  00011a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 31 .debug_str    000170d4  00000000  00000000  000128e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 32 .debug_macro  00006f93  00000000  00000000  000299bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .init:

00008900 <_init>:
    8900:	e92d4008 	push	{r3, lr}
    8904:	eb000084 	bl	8b1c <call_gmon_start>
    8908:	e8bd8008 	pop	{r3, pc}

Disassembly of section .plt:

0000890c <.plt>:
    890c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8910:	e59fe004 	ldr	lr, [pc, #4]	; 891c <_init+0x1c>
    8914:	e08fe00e 	add	lr, pc, lr
    8918:	e5bef008 	ldr	pc, [lr, #8]!
    891c:	0000f9bc 	.word	0x0000f9bc
    8920:	e28fc600 	add	ip, pc, #0, 12
    8924:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8928:	e5bcf9bc 	ldr	pc, [ip, #2492]!	; 0x9bc
    892c:	e28fc600 	add	ip, pc, #0, 12
    8930:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8934:	e5bcf9b4 	ldr	pc, [ip, #2484]!	; 0x9b4
    8938:	e28fc600 	add	ip, pc, #0, 12
    893c:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8940:	e5bcf9ac 	ldr	pc, [ip, #2476]!	; 0x9ac
    8944:	e28fc600 	add	ip, pc, #0, 12
    8948:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    894c:	e5bcf9a4 	ldr	pc, [ip, #2468]!	; 0x9a4
    8950:	e28fc600 	add	ip, pc, #0, 12
    8954:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8958:	e5bcf99c 	ldr	pc, [ip, #2460]!	; 0x99c
    895c:	e28fc600 	add	ip, pc, #0, 12
    8960:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8964:	e5bcf994 	ldr	pc, [ip, #2452]!	; 0x994
    8968:	e28fc600 	add	ip, pc, #0, 12
    896c:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8970:	e5bcf98c 	ldr	pc, [ip, #2444]!	; 0x98c
    8974:	e28fc600 	add	ip, pc, #0, 12
    8978:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    897c:	e5bcf984 	ldr	pc, [ip, #2436]!	; 0x984
    8980:	e28fc600 	add	ip, pc, #0, 12
    8984:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8988:	e5bcf97c 	ldr	pc, [ip, #2428]!	; 0x97c
    898c:	e28fc600 	add	ip, pc, #0, 12
    8990:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8994:	e5bcf974 	ldr	pc, [ip, #2420]!	; 0x974
    8998:	e28fc600 	add	ip, pc, #0, 12
    899c:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    89a0:	e5bcf96c 	ldr	pc, [ip, #2412]!	; 0x96c
    89a4:	e28fc600 	add	ip, pc, #0, 12
    89a8:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    89ac:	e5bcf964 	ldr	pc, [ip, #2404]!	; 0x964
    89b0:	e28fc600 	add	ip, pc, #0, 12
    89b4:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    89b8:	e5bcf95c 	ldr	pc, [ip, #2396]!	; 0x95c
    89bc:	e28fc600 	add	ip, pc, #0, 12
    89c0:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    89c4:	e5bcf954 	ldr	pc, [ip, #2388]!	; 0x954
    89c8:	e28fc600 	add	ip, pc, #0, 12
    89cc:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    89d0:	e5bcf94c 	ldr	pc, [ip, #2380]!	; 0x94c
    89d4:	e28fc600 	add	ip, pc, #0, 12
    89d8:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    89dc:	e5bcf944 	ldr	pc, [ip, #2372]!	; 0x944
    89e0:	e28fc600 	add	ip, pc, #0, 12
    89e4:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    89e8:	e5bcf93c 	ldr	pc, [ip, #2364]!	; 0x93c
    89ec:	e28fc600 	add	ip, pc, #0, 12
    89f0:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    89f4:	e5bcf934 	ldr	pc, [ip, #2356]!	; 0x934
    89f8:	e28fc600 	add	ip, pc, #0, 12
    89fc:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8a00:	e5bcf92c 	ldr	pc, [ip, #2348]!	; 0x92c
    8a04:	e28fc600 	add	ip, pc, #0, 12
    8a08:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8a0c:	e5bcf924 	ldr	pc, [ip, #2340]!	; 0x924
    8a10:	e28fc600 	add	ip, pc, #0, 12
    8a14:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8a18:	e5bcf91c 	ldr	pc, [ip, #2332]!	; 0x91c
    8a1c:	e28fc600 	add	ip, pc, #0, 12
    8a20:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8a24:	e5bcf914 	ldr	pc, [ip, #2324]!	; 0x914
    8a28:	e28fc600 	add	ip, pc, #0, 12
    8a2c:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8a30:	e5bcf90c 	ldr	pc, [ip, #2316]!	; 0x90c
    8a34:	e28fc600 	add	ip, pc, #0, 12
    8a38:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8a3c:	e5bcf904 	ldr	pc, [ip, #2308]!	; 0x904
    8a40:	e28fc600 	add	ip, pc, #0, 12
    8a44:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8a48:	e5bcf8fc 	ldr	pc, [ip, #2300]!	; 0x8fc
    8a4c:	e28fc600 	add	ip, pc, #0, 12
    8a50:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8a54:	e5bcf8f4 	ldr	pc, [ip, #2292]!	; 0x8f4
    8a58:	e28fc600 	add	ip, pc, #0, 12
    8a5c:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8a60:	e5bcf8ec 	ldr	pc, [ip, #2284]!	; 0x8ec
    8a64:	e28fc600 	add	ip, pc, #0, 12
    8a68:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8a6c:	e5bcf8e4 	ldr	pc, [ip, #2276]!	; 0x8e4
    8a70:	e28fc600 	add	ip, pc, #0, 12
    8a74:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8a78:	e5bcf8dc 	ldr	pc, [ip, #2268]!	; 0x8dc
    8a7c:	e28fc600 	add	ip, pc, #0, 12
    8a80:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8a84:	e5bcf8d4 	ldr	pc, [ip, #2260]!	; 0x8d4
    8a88:	e28fc600 	add	ip, pc, #0, 12
    8a8c:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8a90:	e5bcf8cc 	ldr	pc, [ip, #2252]!	; 0x8cc
    8a94:	e28fc600 	add	ip, pc, #0, 12
    8a98:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8a9c:	e5bcf8c4 	ldr	pc, [ip, #2244]!	; 0x8c4
    8aa0:	e28fc600 	add	ip, pc, #0, 12
    8aa4:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8aa8:	e5bcf8bc 	ldr	pc, [ip, #2236]!	; 0x8bc
    8aac:	e28fc600 	add	ip, pc, #0, 12
    8ab0:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8ab4:	e5bcf8b4 	ldr	pc, [ip, #2228]!	; 0x8b4
    8ab8:	e28fc600 	add	ip, pc, #0, 12
    8abc:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8ac0:	e5bcf8ac 	ldr	pc, [ip, #2220]!	; 0x8ac
    8ac4:	e28fc600 	add	ip, pc, #0, 12
    8ac8:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8acc:	e5bcf8a4 	ldr	pc, [ip, #2212]!	; 0x8a4
    8ad0:	e28fc600 	add	ip, pc, #0, 12
    8ad4:	e28cca0f 	add	ip, ip, #61440	; 0xf000
    8ad8:	e5bcf89c 	ldr	pc, [ip, #2204]!	; 0x89c

Disassembly of section .text:

00008ae0 <_start>:
    8ae0:	e3a0b000 	mov	fp, #0
    8ae4:	e3a0e000 	mov	lr, #0
    8ae8:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    8aec:	e1a0200d 	mov	r2, sp
    8af0:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
    8af4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    8af8:	e59fc010 	ldr	ip, [pc, #16]	; 8b10 <_start+0x30>
    8afc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
    8b00:	e59f000c 	ldr	r0, [pc, #12]	; 8b14 <_start+0x34>
    8b04:	e59f300c 	ldr	r3, [pc, #12]	; 8b18 <_start+0x38>
    8b08:	ebffff8d 	bl	8944 <_init+0x44>
    8b0c:	ebffff86 	bl	892c <_init+0x2c>
    8b10:	0000fc28 	.word	0x0000fc28
    8b14:	00008c08 	.word	0x00008c08
    8b18:	0000fbc8 	.word	0x0000fbc8

00008b1c <call_gmon_start>:
    8b1c:	e59f3014 	ldr	r3, [pc, #20]	; 8b38 <call_gmon_start+0x1c>
    8b20:	e59f2014 	ldr	r2, [pc, #20]	; 8b3c <call_gmon_start+0x20>
    8b24:	e08f3003 	add	r3, pc, r3
    8b28:	e7933002 	ldr	r3, [r3, r2]
    8b2c:	e3530000 	cmp	r3, #0
    8b30:	012fff1e 	bxeq	lr
    8b34:	eaffff85 	b	8950 <_init+0x50>
    8b38:	0000f7ac 	.word	0x0000f7ac
    8b3c:	000000a0 	.word	0x000000a0

00008b40 <deregister_tm_clones>:
    8b40:	e59f301c 	ldr	r3, [pc, #28]	; 8b64 <deregister_tm_clones+0x24>
    8b44:	e59f001c 	ldr	r0, [pc, #28]	; 8b68 <deregister_tm_clones+0x28>
    8b48:	e0603003 	rsb	r3, r0, r3
    8b4c:	e3530006 	cmp	r3, #6
    8b50:	912fff1e 	bxls	lr
    8b54:	e59f3010 	ldr	r3, [pc, #16]	; 8b6c <deregister_tm_clones+0x2c>
    8b58:	e3530000 	cmp	r3, #0
    8b5c:	012fff1e 	bxeq	lr
    8b60:	e12fff13 	bx	r3
    8b64:	00018427 	.word	0x00018427
    8b68:	00018424 	.word	0x00018424
    8b6c:	00000000 	.word	0x00000000

00008b70 <register_tm_clones>:
    8b70:	e59f3024 	ldr	r3, [pc, #36]	; 8b9c <register_tm_clones+0x2c>
    8b74:	e59f0024 	ldr	r0, [pc, #36]	; 8ba0 <register_tm_clones+0x30>
    8b78:	e0603003 	rsb	r3, r0, r3
    8b7c:	e1a03143 	asr	r3, r3, #2
    8b80:	e0833fa3 	add	r3, r3, r3, lsr #31
    8b84:	e1b010c3 	asrs	r1, r3, #1
    8b88:	012fff1e 	bxeq	lr
    8b8c:	e59f2010 	ldr	r2, [pc, #16]	; 8ba4 <register_tm_clones+0x34>
    8b90:	e3520000 	cmp	r2, #0
    8b94:	012fff1e 	bxeq	lr
    8b98:	e12fff12 	bx	r2
    8b9c:	00018424 	.word	0x00018424
    8ba0:	00018424 	.word	0x00018424
    8ba4:	00000000 	.word	0x00000000

00008ba8 <__do_global_dtors_aux>:
    8ba8:	e92d4010 	push	{r4, lr}
    8bac:	e59f4018 	ldr	r4, [pc, #24]	; 8bcc <__do_global_dtors_aux+0x24>
    8bb0:	e5d43000 	ldrb	r3, [r4]
    8bb4:	e3530000 	cmp	r3, #0
    8bb8:	18bd8010 	popne	{r4, pc}
    8bbc:	ebffffdf 	bl	8b40 <deregister_tm_clones>
    8bc0:	e3a03001 	mov	r3, #1
    8bc4:	e5c43000 	strb	r3, [r4]
    8bc8:	e8bd8010 	pop	{r4, pc}
    8bcc:	00018428 	.word	0x00018428

00008bd0 <frame_dummy>:
    8bd0:	e59f0024 	ldr	r0, [pc, #36]	; 8bfc <frame_dummy+0x2c>
    8bd4:	e92d4008 	push	{r3, lr}
    8bd8:	e5903000 	ldr	r3, [r0]
    8bdc:	e3530000 	cmp	r3, #0
    8be0:	0a000003 	beq	8bf4 <frame_dummy+0x24>
    8be4:	e59f3014 	ldr	r3, [pc, #20]	; 8c00 <frame_dummy+0x30>
    8be8:	e3530000 	cmp	r3, #0
    8bec:	0a000000 	beq	8bf4 <frame_dummy+0x24>
    8bf0:	e12fff33 	blx	r3
    8bf4:	e8bd4008 	pop	{r3, lr}
    8bf8:	eaffffdc 	b	8b70 <register_tm_clones>
    8bfc:	000181cc 	.word	0x000181cc
	...

00008c08 <main>:


static char str[500];
static char str2[500];

int main() {
    8c08:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    8c0c:	ed2d8b0c 	vpush	{d8-d13}
    8c10:	e28db04c 	add	fp, sp, #76	; 0x4c
    8c14:	e24ddfba 	sub	sp, sp, #744	; 0x2e8

	enumTestcases runCommand = 0;
    8c18:	e3a03000 	mov	r3, #0
    8c1c:	e50b3050 	str	r3, [fp, #-80]	; 0x50
	char testValue[20];
	scanf("%s", testValue);
    8c20:	e24b30e0 	sub	r3, fp, #224	; 0xe0
    8c24:	e59f0ca4 	ldr	r0, [pc, #3236]	; 98d0 <main+0xcc8>
    8c28:	e1a01003 	mov	r1, r3
    8c2c:	ebffff8f 	bl	8a70 <_init+0x170>
	printf("Received string is %s\n", testValue);
    8c30:	e24b30e0 	sub	r3, fp, #224	; 0xe0
    8c34:	e59f0c98 	ldr	r0, [pc, #3224]	; 98d4 <main+0xccc>
    8c38:	e1a01003 	mov	r1, r3
    8c3c:	ebffff7c 	bl	8a34 <_init+0x134>
	if ( strcmp(testValue,"testadc")  == 0 )
    8c40:	e24b30e0 	sub	r3, fp, #224	; 0xe0
    8c44:	e1a00003 	mov	r0, r3
    8c48:	e59f1c88 	ldr	r1, [pc, #3208]	; 98d8 <main+0xcd0>
    8c4c:	ebffff9c 	bl	8ac4 <_init+0x1c4>
    8c50:	e1a03000 	mov	r3, r0
    8c54:	e3530000 	cmp	r3, #0
    8c58:	1a000002 	bne	8c68 <main+0x60>
		runCommand = TESTADC;
    8c5c:	e3a03001 	mov	r3, #1
    8c60:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8c64:	ea000080 	b	8e6c <main+0x264>
	else if ( strcmp(testValue,"testbattery")  == 0 )
    8c68:	e24b30e0 	sub	r3, fp, #224	; 0xe0
    8c6c:	e1a00003 	mov	r0, r3
    8c70:	e59f1c64 	ldr	r1, [pc, #3172]	; 98dc <main+0xcd4>
    8c74:	ebffff92 	bl	8ac4 <_init+0x1c4>
    8c78:	e1a03000 	mov	r3, r0
    8c7c:	e3530000 	cmp	r3, #0
    8c80:	1a000002 	bne	8c90 <main+0x88>
		runCommand = TESTBATTERY;
    8c84:	e3a03002 	mov	r3, #2
    8c88:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8c8c:	ea000076 	b	8e6c <main+0x264>
	else if ( strcmp(testValue,"testgps")  == 0 )
    8c90:	e24b30e0 	sub	r3, fp, #224	; 0xe0
    8c94:	e1a00003 	mov	r0, r3
    8c98:	e59f1c40 	ldr	r1, [pc, #3136]	; 98e0 <main+0xcd8>
    8c9c:	ebffff88 	bl	8ac4 <_init+0x1c4>
    8ca0:	e1a03000 	mov	r3, r0
    8ca4:	e3530000 	cmp	r3, #0
    8ca8:	1a000002 	bne	8cb8 <main+0xb0>
		runCommand = TESTGPS;
    8cac:	e3a03003 	mov	r3, #3
    8cb0:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8cb4:	ea00006c 	b	8e6c <main+0x264>
	else if ( strcmp(testValue,"testimu")  == 0 )
    8cb8:	e24b30e0 	sub	r3, fp, #224	; 0xe0
    8cbc:	e1a00003 	mov	r0, r3
    8cc0:	e59f1c1c 	ldr	r1, [pc, #3100]	; 98e4 <main+0xcdc>
    8cc4:	ebffff7e 	bl	8ac4 <_init+0x1c4>
    8cc8:	e1a03000 	mov	r3, r0
    8ccc:	e3530000 	cmp	r3, #0
    8cd0:	1a000002 	bne	8ce0 <main+0xd8>
		runCommand = TESTIMU;
    8cd4:	e3a03004 	mov	r3, #4
    8cd8:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8cdc:	ea000062 	b	8e6c <main+0x264>
	else if ( strcmp(testValue,"testlaser")  == 0 )
    8ce0:	e24b30e0 	sub	r3, fp, #224	; 0xe0
    8ce4:	e1a00003 	mov	r0, r3
    8ce8:	e59f1bf8 	ldr	r1, [pc, #3064]	; 98e8 <main+0xce0>
    8cec:	ebffff74 	bl	8ac4 <_init+0x1c4>
    8cf0:	e1a03000 	mov	r3, r0
    8cf4:	e3530000 	cmp	r3, #0
    8cf8:	1a000002 	bne	8d08 <main+0x100>
		runCommand = TESTLASER;
    8cfc:	e3a03005 	mov	r3, #5
    8d00:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8d04:	ea000058 	b	8e6c <main+0x264>
	else if ( strcmp(testValue,"testuart")  == 0 )
    8d08:	e24b30e0 	sub	r3, fp, #224	; 0xe0
    8d0c:	e1a00003 	mov	r0, r3
    8d10:	e59f1bd4 	ldr	r1, [pc, #3028]	; 98ec <main+0xce4>
    8d14:	ebffff6a 	bl	8ac4 <_init+0x1c4>
    8d18:	e1a03000 	mov	r3, r0
    8d1c:	e3530000 	cmp	r3, #0
    8d20:	1a000002 	bne	8d30 <main+0x128>
		runCommand = TESTUART;
    8d24:	e3a03006 	mov	r3, #6
    8d28:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8d2c:	ea00004e 	b	8e6c <main+0x264>
	else if ( strcmp(testValue,"testmatlabimu")  == 0 )
    8d30:	e24b30e0 	sub	r3, fp, #224	; 0xe0
    8d34:	e1a00003 	mov	r0, r3
    8d38:	e59f1bb0 	ldr	r1, [pc, #2992]	; 98f0 <main+0xce8>
    8d3c:	ebffff60 	bl	8ac4 <_init+0x1c4>
    8d40:	e1a03000 	mov	r3, r0
    8d44:	e3530000 	cmp	r3, #0
    8d48:	1a000002 	bne	8d58 <main+0x150>
		runCommand = TESTMATLABIMU;
    8d4c:	e3a03007 	mov	r3, #7
    8d50:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8d54:	ea000044 	b	8e6c <main+0x264>
	else if ( strcmp(testValue,"testmatlabkalman")  == 0 )
    8d58:	e24b30e0 	sub	r3, fp, #224	; 0xe0
    8d5c:	e1a00003 	mov	r0, r3
    8d60:	e59f1b8c 	ldr	r1, [pc, #2956]	; 98f4 <main+0xcec>
    8d64:	ebffff56 	bl	8ac4 <_init+0x1c4>
    8d68:	e1a03000 	mov	r3, r0
    8d6c:	e3530000 	cmp	r3, #0
    8d70:	1a000002 	bne	8d80 <main+0x178>
		runCommand = TESTMATLABKALMAN;
    8d74:	e3a03008 	mov	r3, #8
    8d78:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8d7c:	ea00003a 	b	8e6c <main+0x264>
	else if ( strcmp(testValue,"testaccmag")  == 0 )
    8d80:	e24b30e0 	sub	r3, fp, #224	; 0xe0
    8d84:	e1a00003 	mov	r0, r3
    8d88:	e59f1b68 	ldr	r1, [pc, #2920]	; 98f8 <main+0xcf0>
    8d8c:	ebffff4c 	bl	8ac4 <_init+0x1c4>
    8d90:	e1a03000 	mov	r3, r0
    8d94:	e3530000 	cmp	r3, #0
    8d98:	1a000002 	bne	8da8 <main+0x1a0>
		runCommand = TESTACCMAG;
    8d9c:	e3a03009 	mov	r3, #9
    8da0:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8da4:	ea000030 	b	8e6c <main+0x264>
	else if ( strcmp(testValue,"testgyro")  == 0 )
    8da8:	e24b30e0 	sub	r3, fp, #224	; 0xe0
    8dac:	e1a00003 	mov	r0, r3
    8db0:	e59f1b44 	ldr	r1, [pc, #2884]	; 98fc <main+0xcf4>
    8db4:	ebffff42 	bl	8ac4 <_init+0x1c4>
    8db8:	e1a03000 	mov	r3, r0
    8dbc:	e3530000 	cmp	r3, #0
    8dc0:	1a000002 	bne	8dd0 <main+0x1c8>
		runCommand = TESTGYRO;
    8dc4:	e3a0300a 	mov	r3, #10
    8dc8:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8dcc:	ea000026 	b	8e6c <main+0x264>
	else if ( strcmp(testValue,"testbaro")  == 0 )
    8dd0:	e24b30e0 	sub	r3, fp, #224	; 0xe0
    8dd4:	e1a00003 	mov	r0, r3
    8dd8:	e59f1b20 	ldr	r1, [pc, #2848]	; 9900 <main+0xcf8>
    8ddc:	ebffff38 	bl	8ac4 <_init+0x1c4>
    8de0:	e1a03000 	mov	r3, r0
    8de4:	e3530000 	cmp	r3, #0
    8de8:	1a000002 	bne	8df8 <main+0x1f0>
		runCommand = TESTBARO;
    8dec:	e3a0300b 	mov	r3, #11
    8df0:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8df4:	ea00001c 	b	8e6c <main+0x264>
	else if ( strcmp(testValue,"testmatrixlib")  == 0 )
    8df8:	e24b30e0 	sub	r3, fp, #224	; 0xe0
    8dfc:	e1a00003 	mov	r0, r3
    8e00:	e59f1afc 	ldr	r1, [pc, #2812]	; 9904 <main+0xcfc>
    8e04:	ebffff2e 	bl	8ac4 <_init+0x1c4>
    8e08:	e1a03000 	mov	r3, r0
    8e0c:	e3530000 	cmp	r3, #0
    8e10:	1a000002 	bne	8e20 <main+0x218>
		runCommand = TESTMATRIXLIB;
    8e14:	e3a0300c 	mov	r3, #12
    8e18:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8e1c:	ea000012 	b	8e6c <main+0x264>
	else if ( strcmp(testValue,"testudp")  == 0 )
    8e20:	e24b30e0 	sub	r3, fp, #224	; 0xe0
    8e24:	e1a00003 	mov	r0, r3
    8e28:	e59f1ad8 	ldr	r1, [pc, #2776]	; 9908 <main+0xd00>
    8e2c:	ebffff24 	bl	8ac4 <_init+0x1c4>
    8e30:	e1a03000 	mov	r3, r0
    8e34:	e3530000 	cmp	r3, #0
    8e38:	1a000002 	bne	8e48 <main+0x240>
		runCommand = TESTUDP;
    8e3c:	e3a0300d 	mov	r3, #13
    8e40:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8e44:	ea000008 	b	8e6c <main+0x264>
	else if ( strcmp(testValue,"testudptransfer")  == 0 )
    8e48:	e24b30e0 	sub	r3, fp, #224	; 0xe0
    8e4c:	e1a00003 	mov	r0, r3
    8e50:	e59f1ab4 	ldr	r1, [pc, #2740]	; 990c <main+0xd04>
    8e54:	ebffff1a 	bl	8ac4 <_init+0x1c4>
    8e58:	e1a03000 	mov	r3, r0
    8e5c:	e3530000 	cmp	r3, #0
    8e60:	1a000001 	bne	8e6c <main+0x264>
		runCommand = TESTUDPTRANSFER;
    8e64:	e3a0300e 	mov	r3, #14
    8e68:	e50b3050 	str	r3, [fp, #-80]	; 0x50

	switch (runCommand)
    8e6c:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
    8e70:	e2433001 	sub	r3, r3, #1
    8e74:	e353000d 	cmp	r3, #13
    8e78:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    8e7c:	ea000360 	b	9c04 <main+0xffc>
    8e80:	00008eb8 	.word	0x00008eb8
    8e84:	00008f04 	.word	0x00008f04
    8e88:	00008f3c 	.word	0x00008f3c
    8e8c:	00008f54 	.word	0x00008f54
    8e90:	00009014 	.word	0x00009014
    8e94:	0000904c 	.word	0x0000904c
    8e98:	000090c4 	.word	0x000090c4
    8e9c:	00009180 	.word	0x00009180
    8ea0:	000092b4 	.word	0x000092b4
    8ea4:	00009464 	.word	0x00009464
    8ea8:	0000937c 	.word	0x0000937c
    8eac:	0000951c 	.word	0x0000951c
    8eb0:	0000965c 	.word	0x0000965c
    8eb4:	000097e0 	.word	0x000097e0
	{
		case TESTADC:
		{
			float erg;
			printf("Starting ADC Test\n");
    8eb8:	e59f0a50 	ldr	r0, [pc, #2640]	; 9910 <main+0xd08>
    8ebc:	ebfffeee 	bl	8a7c <_init+0x17c>
			erg = g_halADC_get_ui16(1);
    8ec0:	e3a00001 	mov	r0, #1
    8ec4:	eb000357 	bl	9c28 <g_halADC_get_ui16>
    8ec8:	ed0b0a15 	vstr	s0, [fp, #-84]	; 0xffffffac
			if(erg<0)
    8ecc:	ed5b7a15 	vldr	s15, [fp, #-84]	; 0xffffffac
    8ed0:	eef57ac0 	vcmpe.f32	s15, #0.0
    8ed4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8ed8:	5a000003 	bpl	8eec <main+0x2e4>
			{
				printf("Fehler");
    8edc:	e59f0a30 	ldr	r0, [pc, #2608]	; 9914 <main+0xd0c>
    8ee0:	ebfffed3 	bl	8a34 <_init+0x134>
				return 1;
    8ee4:	e3a03001 	mov	r3, #1
    8ee8:	ea000349 	b	9c14 <main+0x100c>
			}
			else
			{
				printf("Ergebniss: %f\n",erg);
    8eec:	ed5b7a15 	vldr	s15, [fp, #-84]	; 0xffffffac
    8ef0:	eeb77ae7 	vcvt.f64.f32	d7, s15
    8ef4:	e59f0a1c 	ldr	r0, [pc, #2588]	; 9918 <main+0xd10>
    8ef8:	ec532b17 	vmov	r2, r3, d7
    8efc:	ebfffecc 	bl	8a34 <_init+0x134>
			}
			break;
    8f00:	ea000342 	b	9c10 <main+0x1008>
		}
		case TESTBATTERY:
		{
			double l_batterLevel_f64=0;
    8f04:	e3a02000 	mov	r2, #0
    8f08:	e3a03000 	mov	r3, #0
    8f0c:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
			printf("Starting Battery Test\n");
    8f10:	e59f0a04 	ldr	r0, [pc, #2564]	; 991c <main+0xd14>
    8f14:	ebfffed8 	bl	8a7c <_init+0x17c>
			while(1)
			{
				g_halBatCheck_readBatStatusFromI2C_bl();
    8f18:	eb0003c6 	bl	9e38 <g_halBatCheck_readBatStatusFromI2C_bl>
				l_batterLevel_f64=g_halBatCheck_getBatteryStatus_f64();
    8f1c:	eb0003bb 	bl	9e10 <g_halBatCheck_getBatteryStatus_f64>
    8f20:	ed0b0b17 	vstr	d0, [fp, #-92]	; 0xffffffa4
				printf("Measured Voltage: %5.3f\n",l_batterLevel_f64);
    8f24:	e59f09f4 	ldr	r0, [pc, #2548]	; 9920 <main+0xd18>
    8f28:	e14b25dc 	ldrd	r2, [fp, #-92]	; 0xffffffa4
    8f2c:	ebfffec0 	bl	8a34 <_init+0x134>
				sleep(1);
    8f30:	e3a00001 	mov	r0, #1
    8f34:	ebfffeca 	bl	8a64 <_init+0x164>
			}
    8f38:	eafffff6 	b	8f18 <main+0x310>
			break;
		}
		case TESTGPS:
		{
			int i=0;
    8f3c:	e3a03000 	mov	r3, #0
    8f40:	e50b3060 	str	r3, [fp, #-96]	; 0x60
			struct strPosition main_longitude;
			struct strPosition main_latitude;
			printf("Starting GPS Test\n");
    8f44:	e59f09d8 	ldr	r0, [pc, #2520]	; 9924 <main+0xd1c>
    8f48:	ebfffecb 	bl	8a7c <_init+0x17c>
			while(1)
			{
				g_halGps_getData_i32();
    8f4c:	eb000498 	bl	a1b4 <g_halGps_getData_i32>
			}
    8f50:	eafffffd 	b	8f4c <main+0x344>
			break;
		}
		case TESTIMU:
		{
			halImu_orientationValues l_imuMeasurements_st;
			printf("Starting IMU Test\n");
    8f54:	e59f09cc 	ldr	r0, [pc, #2508]	; 9928 <main+0xd20>
    8f58:	ebfffec7 	bl	8a7c <_init+0x17c>
			g_halImu_initImuSensors_bl();
    8f5c:	eb000d65 	bl	c4f8 <g_halImu_initImuSensors_bl>
			while(1)
			{
				g_halImu_triggerImuReading_bl();
    8f60:	eb000dd1 	bl	c6ac <g_halImu_triggerImuReading_bl>
				g_halImu_triggerBaroReading_bl();
    8f64:	eb000d7a 	bl	c554 <g_halImu_triggerBaroReading_bl>
				g_halImu_triggerGyroReading_bl();
    8f68:	eb000d93 	bl	c5bc <g_halImu_triggerGyroReading_bl>
				g_halImu_triggerAccReading_bl();
    8f6c:	eb000da6 	bl	c60c <g_halImu_triggerAccReading_bl>

				l_imuMeasurements_st=g_halImu_getImuValues_str();
    8f70:	e24b3fa3 	sub	r3, fp, #652	; 0x28c
    8f74:	e1a00003 	mov	r0, r3
    8f78:	eb000d4d 	bl	c4b4 <g_halImu_getImuValues_str>

				printf("Pressure: %5.3f    ;    Temperature:  %5.3f\n",l_imuMeasurements_st.pressure_f64,l_imuMeasurements_st.temperature_f64);
    8f7c:	e24b3f8f 	sub	r3, fp, #572	; 0x23c
    8f80:	e1c320d0 	ldrd	r2, [r3]
    8f84:	e24b1f91 	sub	r1, fp, #580	; 0x244
    8f88:	e1c100d0 	ldrd	r0, [r1]
    8f8c:	e1cd00f0 	strd	r0, [sp]
    8f90:	e59f0994 	ldr	r0, [pc, #2452]	; 992c <main+0xd24>
    8f94:	ebfffea6 	bl	8a34 <_init+0x134>
				printf("yaw: %5.3f ; pitch:  %5.3f ; roll:  %5.3f\n",l_imuMeasurements_st.gyro.l_yaw_f64,l_imuMeasurements_st.gyro.l_pitch_f64,l_imuMeasurements_st.gyro.l_roll_f64);
    8f98:	e24b3f97 	sub	r3, fp, #604	; 0x25c
    8f9c:	e1c320d0 	ldrd	r2, [r3]
    8fa0:	e24b5f95 	sub	r5, fp, #596	; 0x254
    8fa4:	e1c540d0 	ldrd	r4, [r5]
    8fa8:	e24b1f93 	sub	r1, fp, #588	; 0x24c
    8fac:	e1c100d0 	ldrd	r0, [r1]
    8fb0:	e1cd40f0 	strd	r4, [sp]
    8fb4:	e1cd00f8 	strd	r0, [sp, #8]
    8fb8:	e59f0970 	ldr	r0, [pc, #2416]	; 9930 <main+0xd28>
    8fbc:	ebfffe9c 	bl	8a34 <_init+0x134>
				printf("X: %5.3f ; Y:  %5.3f ; Z:  %5.3f\n",l_imuMeasurements_st.acc.x_f64,l_imuMeasurements_st.acc.y_f64,l_imuMeasurements_st.acc.z_f64);
    8fc0:	e24b3fa3 	sub	r3, fp, #652	; 0x28c
    8fc4:	e1c320d0 	ldrd	r2, [r3]
    8fc8:	e24b5fa1 	sub	r5, fp, #644	; 0x284
    8fcc:	e1c540d0 	ldrd	r4, [r5]
    8fd0:	e24b1f9f 	sub	r1, fp, #636	; 0x27c
    8fd4:	e1c100d0 	ldrd	r0, [r1]
    8fd8:	e1cd40f0 	strd	r4, [sp]
    8fdc:	e1cd00f8 	strd	r0, [sp, #8]
    8fe0:	e59f094c 	ldr	r0, [pc, #2380]	; 9934 <main+0xd2c>
    8fe4:	ebfffe92 	bl	8a34 <_init+0x134>
				printf("X: %5.10f ; Y:  %5.10f ; Z:  %5.10f\n\n\n\n",l_imuMeasurements_st.mag.x_f64,l_imuMeasurements_st.mag.y_f64,l_imuMeasurements_st.mag.z_f64);
    8fe8:	e24b3f9d 	sub	r3, fp, #628	; 0x274
    8fec:	e1c320d0 	ldrd	r2, [r3]
    8ff0:	e24b5f9b 	sub	r5, fp, #620	; 0x26c
    8ff4:	e1c540d0 	ldrd	r4, [r5]
    8ff8:	e24b1f99 	sub	r1, fp, #612	; 0x264
    8ffc:	e1c100d0 	ldrd	r0, [r1]
    9000:	e1cd40f0 	strd	r4, [sp]
    9004:	e1cd00f8 	strd	r0, [sp, #8]
    9008:	e59f0928 	ldr	r0, [pc, #2344]	; 9938 <main+0xd30>
    900c:	ebfffe88 	bl	8a34 <_init+0x134>
			}
    9010:	eaffffd2 	b	8f60 <main+0x358>
			break;
		}
		case TESTLASER:
		{
			double dist=0;
    9014:	e3a02000 	mov	r2, #0
    9018:	e3a03000 	mov	r3, #0
    901c:	e14b26fc 	strd	r2, [fp, #-108]	; 0xffffff94
			printf("Starting LASER Test\n");
    9020:	e59f0914 	ldr	r0, [pc, #2324]	; 993c <main+0xd34>
    9024:	ebfffe94 	bl	8a7c <_init+0x17c>
			while(1)
			{
				g_LIDAR_readDistanceFromI2C_i32();
    9028:	eb000dee 	bl	c7e8 <g_LIDAR_readDistanceFromI2C_i32>
				//usleep(100000);

				dist=g_LIDAR_getDistance_f64();
    902c:	eb000de3 	bl	c7c0 <g_LIDAR_getDistance_f64>
    9030:	ed0b0b1b 	vstr	d0, [fp, #-108]	; 0xffffff94

				printf("Distance: %4.2f m\n",dist);
    9034:	e59f0904 	ldr	r0, [pc, #2308]	; 9940 <main+0xd38>
    9038:	e14b26dc 	ldrd	r2, [fp, #-108]	; 0xffffff94
    903c:	ebfffe7c 	bl	8a34 <_init+0x134>
				usleep(500*1000);
    9040:	e59f08fc 	ldr	r0, [pc, #2300]	; 9944 <main+0xd3c>
    9044:	ebfffe53 	bl	8998 <_init+0x98>
			}
    9048:	eafffff6 	b	9028 <main+0x420>
			break;
		}
		case TESTUART:
		{
			char rec_char='z';
    904c:	e3a0307a 	mov	r3, #122	; 0x7a
    9050:	e54b3115 	strb	r3, [fp, #-277]	; 0x115
			char *ptr_rec_char=&rec_char;
    9054:	e24b3f45 	sub	r3, fp, #276	; 0x114
    9058:	e2433001 	sub	r3, r3, #1
    905c:	e50b3070 	str	r3, [fp, #-112]	; 0x70
			printf("Starting UART Test\n");
    9060:	e59f08e0 	ldr	r0, [pc, #2272]	; 9948 <main+0xd40>
    9064:	ebfffe84 	bl	8a7c <_init+0x17c>
			FILE *fp=(FILE *)-1;
    9068:	e3e03000 	mvn	r3, #0
    906c:	e50b3074 	str	r3, [fp, #-116]	; 0x74
			//open file to write received data from GPS
			fp = (FILE *)open("GPS_logging.txt",100 | 01,400);
    9070:	e59f08d4 	ldr	r0, [pc, #2260]	; 994c <main+0xd44>
    9074:	e3a01065 	mov	r1, #101	; 0x65
    9078:	e3a02e19 	mov	r2, #400	; 0x190
    907c:	ebfffe27 	bl	8920 <_init+0x20>
    9080:	e1a03000 	mov	r3, r0
    9084:	e50b3074 	str	r3, [fp, #-116]	; 0x74
			sleep(1);
    9088:	e3a00001 	mov	r0, #1
    908c:	ebfffe74 	bl	8a64 <_init+0x164>
			while(1)
			{
				rec_char=g_lldUart_readByte_ch();
    9090:	eb000f43 	bl	cda4 <g_lldUart_readByte_ch>
    9094:	e1a03000 	mov	r3, r0
    9098:	e54b3115 	strb	r3, [fp, #-277]	; 0x115
				//save read values if filestream is opened
				if (fp != (FILE *)-1)
    909c:	e51b3074 	ldr	r3, [fp, #-116]	; 0x74
    90a0:	e3730001 	cmn	r3, #1
    90a4:	0a000005 	beq	90c0 <main+0x4b8>
				{
					write((int)fp,ptr_rec_char,1);
    90a8:	e51b3074 	ldr	r3, [fp, #-116]	; 0x74
    90ac:	e1a00003 	mov	r0, r3
    90b0:	e51b1070 	ldr	r1, [fp, #-112]	; 0x70
    90b4:	e3a02001 	mov	r2, #1
    90b8:	ebfffe3f 	bl	89bc <_init+0xbc>
				}
			}
    90bc:	eafffff3 	b	9090 <main+0x488>
    90c0:	eafffff2 	b	9090 <main+0x488>
			fclose(fp);
			break;
		}
		case TESTMATLABIMU:
		{
			printf("Starting IMU Matlab Test\n");
    90c4:	e59f0884 	ldr	r0, [pc, #2180]	; 9950 <main+0xd48>
    90c8:	ebfffe6b 	bl	8a7c <_init+0x17c>
			unsigned char	l_remoteHostAddr_rg4ui8[4] 	= {192,168,22,160};
    90cc:	e59f2880 	ldr	r2, [pc, #2176]	; 9954 <main+0xd4c>
    90d0:	e24b3f47 	sub	r3, fp, #284	; 0x11c
    90d4:	e5920000 	ldr	r0, [r2]
    90d8:	e5830000 	str	r0, [r3]
			unsigned short	l_remoteHostPort_ui16		= 5000;
    90dc:	e59f3874 	ldr	r3, [pc, #2164]	; 9958 <main+0xd50>
    90e0:	e14b37b6 	strh	r3, [fp, #-118]	; 0xffffff8a
			int				l_udpSocket_i32;
			unsigned int	l_sendState_bl;

			// open udp connection
			l_udpSocket_i32 = g_halMatlab_initConnection_i32( l_remoteHostAddr_rg4ui8, l_remoteHostPort_ui16 );
    90e4:	e24b2f47 	sub	r2, fp, #284	; 0x11c
    90e8:	e15b37b6 	ldrh	r3, [fp, #-118]	; 0xffffff8a
    90ec:	e1a00002 	mov	r0, r2
    90f0:	e1a01003 	mov	r1, r3
    90f4:	eb0010a5 	bl	d390 <g_halMatlab_initConnection_i32>
    90f8:	e50b007c 	str	r0, [fp, #-124]	; 0x7c

			halImu_orientationValues l_imuMeasurements_st;
			g_halImu_initImuSensors_bl();
    90fc:	eb000cfd 	bl	c4f8 <g_halImu_initImuSensors_bl>

			while(1)
			{
				g_halImu_triggerImuReading_bl();
    9100:	eb000d69 	bl	c6ac <g_halImu_triggerImuReading_bl>
				g_halImu_triggerBaroReading_bl();
    9104:	eb000d12 	bl	c554 <g_halImu_triggerBaroReading_bl>
				g_halImu_triggerGyroReading_bl();
    9108:	eb000d2b 	bl	c5bc <g_halImu_triggerGyroReading_bl>
				g_halImu_triggerAccReading_bl();
    910c:	eb000d3e 	bl	c60c <g_halImu_triggerAccReading_bl>

				l_imuMeasurements_st=g_halImu_getImuValues_str();
    9110:	e24b3fa3 	sub	r3, fp, #652	; 0x28c
    9114:	e1a00003 	mov	r0, r3
    9118:	eb000ce5 	bl	c4b4 <g_halImu_getImuValues_str>

				l_sendState_bl = g_halMatlab_sendImuState_bl(l_udpSocket_i32, l_imuMeasurements_st);
    911c:	e1a0100d 	mov	r1, sp
    9120:	e24b2fa1 	sub	r2, fp, #644	; 0x284
    9124:	e3a03050 	mov	r3, #80	; 0x50
    9128:	e1a00001 	mov	r0, r1
    912c:	e1a01002 	mov	r1, r2
    9130:	e1a02003 	mov	r2, r3
    9134:	ebfffe3b 	bl	8a28 <_init+0x128>
    9138:	e24b3fa3 	sub	r3, fp, #652	; 0x28c
    913c:	e893000c 	ldm	r3, {r2, r3}
    9140:	e51b007c 	ldr	r0, [fp, #-124]	; 0x7c
    9144:	eb000f43 	bl	ce58 <g_halMatlab_sendImuState_bl>
    9148:	e1a03000 	mov	r3, r0
    914c:	e50b3080 	str	r3, [fp, #-128]	; 0x80
				printf("Temp %f\n", l_imuMeasurements_st.temperature_f64);
    9150:	e24b3f91 	sub	r3, fp, #580	; 0x244
    9154:	e1c320d0 	ldrd	r2, [r3]
    9158:	e59f07fc 	ldr	r0, [pc, #2044]	; 995c <main+0xd54>
    915c:	ebfffe34 	bl	8a34 <_init+0x134>
				if ( l_sendState_bl != M_HAL_MATLAB_SUCCESS_UI8 )
    9160:	e51b3080 	ldr	r3, [fp, #-128]	; 0x80
    9164:	e3530000 	cmp	r3, #0
    9168:	0a000001 	beq	9174 <main+0x56c>
				{
					printf("UDP-Packet error\n");
    916c:	e59f07ec 	ldr	r0, [pc, #2028]	; 9960 <main+0xd58>
    9170:	ebfffe41 	bl	8a7c <_init+0x17c>
				}
				usleep( 20000 ); //20ms = 50Hz
    9174:	e59f07e8 	ldr	r0, [pc, #2024]	; 9964 <main+0xd5c>
    9178:	ebfffe06 	bl	8998 <_init+0x98>
			}
    917c:	eaffffdf 	b	9100 <main+0x4f8>
			g_halMatlab_closeSocket_bl(l_udpSocket_i32);
			break;
		}
		case TESTMATLABKALMAN:
		{
			printf("Starting Kalman Orientation Matlab Test\n");
    9180:	e59f07e0 	ldr	r0, [pc, #2016]	; 9968 <main+0xd60>
    9184:	ebfffe3c 	bl	8a7c <_init+0x17c>
			unsigned char	l_remoteHostAddr_rg4ui8[4] 	= {192,168,22,160};
    9188:	e59f27c4 	ldr	r2, [pc, #1988]	; 9954 <main+0xd4c>
    918c:	e24b3e12 	sub	r3, fp, #288	; 0x120
    9190:	e5920000 	ldr	r0, [r2]
    9194:	e5830000 	str	r0, [r3]
			unsigned short	l_remoteHostPort_ui16		= 5000;
    9198:	e59f37b8 	ldr	r3, [pc, #1976]	; 9958 <main+0xd50>
    919c:	e14b38b2 	strh	r3, [fp, #-130]	; 0xffffff7e
			sigOri_orientationAngles	l_kalmanAngles_st;
			sigOri_orientationAngles	l_compAngles_st;
			halImu_orientationValues	l_imuStates_st;

			// open udp connection
			l_udpSocket_i32 = g_halMatlab_initConnection_i32( l_remoteHostAddr_rg4ui8, l_remoteHostPort_ui16 );
    91a0:	e24b2e12 	sub	r2, fp, #288	; 0x120
    91a4:	e15b38b2 	ldrh	r3, [fp, #-130]	; 0xffffff7e
    91a8:	e1a00002 	mov	r0, r2
    91ac:	e1a01003 	mov	r1, r3
    91b0:	eb001076 	bl	d390 <g_halMatlab_initConnection_i32>
    91b4:	e50b0088 	str	r0, [fp, #-136]	; 0x88

			g_sigOri_initMatrices_bl();
    91b8:	eb0016df 	bl	ed3c <g_sigOri_initMatrices_bl>
			g_sigOri_initImuSensors_bl();
    91bc:	eb0016d3 	bl	ed10 <g_sigOri_initImuSensors_bl>

			while(1)
			{
				g_sigOri_calcKalmanOrientation_bl();
    91c0:	eb0018b3 	bl	f494 <g_sigOri_calcKalmanOrientation_bl>
				g_sigOri_calcComplementaryOrientation_bl();
    91c4:	eb00198d 	bl	f800 <g_sigOri_calcComplementaryOrientation_bl>

				l_kalmanAngles_st 	= g_sigOri_getAnglesKalman_bl();
    91c8:	eb00169c 	bl	ec40 <g_sigOri_getAnglesKalman_bl>
    91cc:	eeb05b40 	vmov.f64	d5, d0
    91d0:	eeb06b41 	vmov.f64	d6, d1
    91d4:	eeb07b42 	vmov.f64	d7, d2
    91d8:	ed0b5b4f 	vstr	d5, [fp, #-316]	; 0xfffffec4
    91dc:	ed0b6b4d 	vstr	d6, [fp, #-308]	; 0xfffffecc
    91e0:	ed0b7b4b 	vstr	d7, [fp, #-300]	; 0xfffffed4
				l_compAngles_st		= g_sigOri_getAnglesComplementary_bl();
    91e4:	eb001661 	bl	eb70 <g_sigOri_getAnglesComplementary_bl>
    91e8:	eeb05b40 	vmov.f64	d5, d0
    91ec:	eeb06b41 	vmov.f64	d6, d1
    91f0:	eeb07b42 	vmov.f64	d7, d2
    91f4:	ed0b5b55 	vstr	d5, [fp, #-340]	; 0xfffffeac
    91f8:	ed0b6b53 	vstr	d6, [fp, #-332]	; 0xfffffeb4
    91fc:	ed0b7b51 	vstr	d7, [fp, #-324]	; 0xfffffebc
				l_imuStates_st 		= g_halImu_getImuValues_str();
    9200:	e24b3fa3 	sub	r3, fp, #652	; 0x28c
    9204:	e1a00003 	mov	r0, r3
    9208:	eb000ca9 	bl	c4b4 <g_halImu_getImuValues_str>

				printf("Temp%f\nMag%f",l_imuStates_st.temperature_f64, l_imuStates_st.mag.x_f64);
    920c:	e24b3f91 	sub	r3, fp, #580	; 0x244
    9210:	e1c320d0 	ldrd	r2, [r3]
    9214:	e24b1f9d 	sub	r1, fp, #628	; 0x274
    9218:	e1c100d0 	ldrd	r0, [r1]
    921c:	e1cd00f0 	strd	r0, [sp]
    9220:	e59f0744 	ldr	r0, [pc, #1860]	; 996c <main+0xd64>
    9224:	ebfffe02 	bl	8a34 <_init+0x134>
				l_sendState_bl = g_halMatlab_sendSigAllStates_bl(	l_udpSocket_i32,
    9228:	ed1bdb4f 	vldr	d13, [fp, #-316]	; 0xfffffec4
    922c:	ed1bcb4d 	vldr	d12, [fp, #-308]	; 0xfffffecc
    9230:	ed1bbb4b 	vldr	d11, [fp, #-300]	; 0xfffffed4
    9234:	ed1bab55 	vldr	d10, [fp, #-340]	; 0xfffffeac
    9238:	ed1b9b53 	vldr	d9, [fp, #-332]	; 0xfffffeb4
    923c:	ed1b8b51 	vldr	d8, [fp, #-324]	; 0xfffffebc
    9240:	e1a0100d 	mov	r1, sp
    9244:	e24b2fa1 	sub	r2, fp, #644	; 0x284
    9248:	e3a03050 	mov	r3, #80	; 0x50
    924c:	e1a00001 	mov	r0, r1
    9250:	e1a01002 	mov	r1, r2
    9254:	e1a02003 	mov	r2, r3
    9258:	ebfffdf2 	bl	8a28 <_init+0x128>
    925c:	e24b3fa3 	sub	r3, fp, #652	; 0x28c
    9260:	e893000c 	ldm	r3, {r2, r3}
    9264:	e51b0088 	ldr	r0, [fp, #-136]	; 0x88
    9268:	eeb00b4d 	vmov.f64	d0, d13
    926c:	eeb01b4c 	vmov.f64	d1, d12
    9270:	eeb02b4b 	vmov.f64	d2, d11
    9274:	eeb03b4a 	vmov.f64	d3, d10
    9278:	eeb04b49 	vmov.f64	d4, d9
    927c:	eeb05b48 	vmov.f64	d5, d8
    9280:	eb001189 	bl	d8ac <g_halMatlab_sendSigAllStates_bl>
    9284:	e50b008c 	str	r0, [fp, #-140]	; 0x8c
																	l_imuStates_st,
																	l_kalmanAngles_st,
																	l_compAngles_st);
				if ( l_sendState_bl != M_HAL_MATLAB_SUCCESS_UI8 )
    9288:	e51b308c 	ldr	r3, [fp, #-140]	; 0x8c
    928c:	e3530000 	cmp	r3, #0
    9290:	0a000002 	beq	92a0 <main+0x698>
				{
					printf("UDP-Packet error\n");
    9294:	e59f06c4 	ldr	r0, [pc, #1732]	; 9960 <main+0xd58>
    9298:	ebfffdf7 	bl	8a7c <_init+0x17c>
    929c:	ea000001 	b	92a8 <main+0x6a0>
				}
				else
				{
					printf("Sent packet\n");
    92a0:	e59f06c8 	ldr	r0, [pc, #1736]	; 9970 <main+0xd68>
    92a4:	ebfffdf4 	bl	8a7c <_init+0x17c>
				}
				usleep( 20000 ); //20ms = 50Hz
    92a8:	e59f06b4 	ldr	r0, [pc, #1716]	; 9964 <main+0xd5c>
    92ac:	ebfffdb9 	bl	8998 <_init+0x98>
			}
    92b0:	eaffffc2 	b	91c0 <main+0x5b8>
			break;
		}
		case TESTACCMAG:
		{
			halAccmag_dataContainer l_sensorData_st;
			printf("IMU Acceleration and Compass Test\n");
    92b4:	e59f06b8 	ldr	r0, [pc, #1720]	; 9974 <main+0xd6c>
    92b8:	ebfffdef 	bl	8a7c <_init+0x17c>
			if ( g_halAccmag_initSensor_bl() != M_HAL_ACCMAG_SUCCESS_BL )
    92bc:	eb00097a 	bl	b8ac <g_halAccmag_initSensor_bl>
    92c0:	e1a03000 	mov	r3, r0
    92c4:	e3530000 	cmp	r3, #0
    92c8:	0a000003 	beq	92dc <main+0x6d4>
			{
				printf( "Init failed!\n" );
    92cc:	e59f06a4 	ldr	r0, [pc, #1700]	; 9978 <main+0xd70>
    92d0:	ebfffde9 	bl	8a7c <_init+0x17c>
				return 1;
    92d4:	e3a03001 	mov	r3, #1
    92d8:	ea00024d 	b	9c14 <main+0x100c>
			}

			while (1)
			{
				if ( g_halAccmag_triggerAccUpdate_bl() != M_HAL_ACCMAG_SUCCESS_BL )
    92dc:	eb00099a 	bl	b94c <g_halAccmag_triggerAccUpdate_bl>
    92e0:	e1a03000 	mov	r3, r0
    92e4:	e3530000 	cmp	r3, #0
    92e8:	0a000003 	beq	92fc <main+0x6f4>
				{
					printf( "ACC update failed!\n" );
    92ec:	e59f0688 	ldr	r0, [pc, #1672]	; 997c <main+0xd74>
    92f0:	ebfffde1 	bl	8a7c <_init+0x17c>
					return 1;
    92f4:	e3a03001 	mov	r3, #1
    92f8:	ea000245 	b	9c14 <main+0x100c>
				}
				if ( g_halAccmag_triggerMagUpdate_bl() != M_HAL_ACCMAG_SUCCESS_BL )
    92fc:	eb000999 	bl	b968 <g_halAccmag_triggerMagUpdate_bl>
    9300:	e1a03000 	mov	r3, r0
    9304:	e3530000 	cmp	r3, #0
    9308:	0a000003 	beq	931c <main+0x714>
				{
					printf( "MAG update failed!\n" );
    930c:	e59f066c 	ldr	r0, [pc, #1644]	; 9980 <main+0xd78>
    9310:	ebfffdd9 	bl	8a7c <_init+0x17c>
					return 1;
    9314:	e3a03001 	mov	r3, #1
    9318:	ea00023d 	b	9c14 <main+0x100c>
				}

				l_sensorData_st = g_halAccmag_getAccMagContainer_st();
    931c:	e24b3fa3 	sub	r3, fp, #652	; 0x28c
    9320:	e1a00003 	mov	r0, r3
    9324:	eb0009c9 	bl	ba50 <g_halAccmag_getAccMagContainer_st>

				printf("Acc - x:%f y:%lf z:%f | Mag - x:%.10f y:%.10f z:%.10f\n",
    9328:	e24b3fa3 	sub	r3, fp, #652	; 0x28c
    932c:	e1c320d0 	ldrd	r2, [r3]
    9330:	ed1b7ba1 	vldr	d7, [fp, #-644]	; 0xfffffd7c
    9334:	e24b9f9f 	sub	r9, fp, #636	; 0x27c
    9338:	e1c980d0 	ldrd	r8, [r9]
    933c:	e24b7f9d 	sub	r7, fp, #628	; 0x274
    9340:	e1c760d0 	ldrd	r6, [r7]
    9344:	e24b5f9b 	sub	r5, fp, #620	; 0x26c
    9348:	e1c540d0 	ldrd	r4, [r5]
    934c:	e24b1f99 	sub	r1, fp, #612	; 0x264
    9350:	e1c100d0 	ldrd	r0, [r1]
    9354:	ed8d7b00 	vstr	d7, [sp]
    9358:	e1cd80f8 	strd	r8, [sp, #8]
    935c:	e1cd61f0 	strd	r6, [sp, #16]
    9360:	e1cd41f8 	strd	r4, [sp, #24]
    9364:	e1cd02f0 	strd	r0, [sp, #32]
    9368:	e59f0614 	ldr	r0, [pc, #1556]	; 9984 <main+0xd7c>
    936c:	ebfffdb0 	bl	8a34 <_init+0x134>
						l_sensorData_st.mag.x_f64,
						l_sensorData_st.mag.y_f64,
						l_sensorData_st.mag.z_f64
						);

				usleep( 250000 );
    9370:	e59f0610 	ldr	r0, [pc, #1552]	; 9988 <main+0xd80>
    9374:	ebfffd87 	bl	8998 <_init+0x98>
			}
    9378:	eaffffd7 	b	92dc <main+0x6d4>
			break;
		}
		case TESTBARO:
		{
			double pressure=0;
    937c:	e3a02000 	mov	r2, #0
    9380:	e3a03000 	mov	r3, #0
    9384:	e14b29f4 	strd	r2, [fp, #-148]	; 0xffffff6c
			double temp=0;
    9388:	e3a02000 	mov	r2, #0
    938c:	e3a03000 	mov	r3, #0
    9390:	e14b29fc 	strd	r2, [fp, #-156]	; 0xffffff64
			strGyro GyroValues;
			double Gyrotemp=0;
    9394:	e3a02000 	mov	r2, #0
    9398:	e3a03000 	mov	r3, #0
    939c:	e14b2af4 	strd	r2, [fp, #-164]	; 0xffffff5c
			g_halBaro_initBaro_i32();
    93a0:	eb0009bc 	bl	ba98 <g_halBaro_initBaro_i32>
			g_halGyro_initGyro_i32();
    93a4:	eb000aa1 	bl	be30 <g_halGyro_initGyro_i32>
			printf("IMU Barometer pressure test");
    93a8:	e59f05dc 	ldr	r0, [pc, #1500]	; 998c <main+0xd84>
    93ac:	ebfffda0 	bl	8a34 <_init+0x134>
			while(1)
			{
				g_halBaro_readPressureFromI2C_i32();
    93b0:	eb0009f6 	bl	bb90 <g_halBaro_readPressureFromI2C_i32>
				usleep(100000);
    93b4:	e59f05d4 	ldr	r0, [pc, #1492]	; 9990 <main+0xd88>
    93b8:	ebfffd76 	bl	8998 <_init+0x98>
				g_halBaro_readTemperatureFromI2C_i32();
    93bc:	eb000a46 	bl	bcdc <g_halBaro_readTemperatureFromI2C_i32>
				usleep(100000);
    93c0:	e59f05c8 	ldr	r0, [pc, #1480]	; 9990 <main+0xd88>
    93c4:	ebfffd73 	bl	8998 <_init+0x98>
				pressure=g_halBaro_getPressure_f64();
    93c8:	eb0009dc 	bl	bb40 <g_halBaro_getPressure_f64>
    93cc:	ed0b0b25 	vstr	d0, [fp, #-148]	; 0xffffff6c
				temp=g_halBaro_getTemperature_f64();
    93d0:	eb0009e4 	bl	bb68 <g_halBaro_getTemperature_f64>
    93d4:	ed0b0b27 	vstr	d0, [fp, #-156]	; 0xffffff64
				printf("Pressure: %5.3f    ;    Temperature:  %5.3f\n",pressure,temp);
    93d8:	e14b29dc 	ldrd	r2, [fp, #-156]	; 0xffffff64
    93dc:	e1cd20f0 	strd	r2, [sp]
    93e0:	e59f0544 	ldr	r0, [pc, #1348]	; 992c <main+0xd24>
    93e4:	e14b29d4 	ldrd	r2, [fp, #-148]	; 0xffffff6c
    93e8:	ebfffd91 	bl	8a34 <_init+0x134>
				usleep(100000);
    93ec:	e59f059c 	ldr	r0, [pc, #1436]	; 9990 <main+0xd88>
    93f0:	ebfffd68 	bl	8998 <_init+0x98>


				g_halGyro_readGyroscopeFromI2C_i32();
    93f4:	eb000ad7 	bl	bf58 <g_halGyro_readGyroscopeFromI2C_i32>
				usleep(100000);
    93f8:	e59f0590 	ldr	r0, [pc, #1424]	; 9990 <main+0xd88>
    93fc:	ebfffd65 	bl	8998 <_init+0x98>
				g_halGyro_readTemperatureFromI2C_i32();
    9400:	eb000b77 	bl	c1e4 <g_halGyro_readTemperatureFromI2C_i32>
				usleep(100000);
    9404:	e59f0584 	ldr	r0, [pc, #1412]	; 9990 <main+0xd88>
    9408:	ebfffd62 	bl	8998 <_init+0x98>
				GyroValues=g_halGyro_getGyroscope_st();
    940c:	eb000ab1 	bl	bed8 <g_halGyro_getGyroscope_st>
    9410:	eeb05b40 	vmov.f64	d5, d0
    9414:	eeb06b41 	vmov.f64	d6, d1
    9418:	eeb07b42 	vmov.f64	d7, d2
    941c:	ed0b5b5b 	vstr	d5, [fp, #-364]	; 0xfffffe94
    9420:	ed0b6b59 	vstr	d6, [fp, #-356]	; 0xfffffe9c
    9424:	ed0b7b57 	vstr	d7, [fp, #-348]	; 0xfffffea4
				Gyrotemp=g_halGyro_getTemperature_f64();
    9428:	eb000ac0 	bl	bf30 <g_halGyro_getTemperature_f64>
    942c:	ed0b0b29 	vstr	d0, [fp, #-164]	; 0xffffff5c
				printf("yaw: %5.3f    ;    pitch:  %5.3f    ;    roll:  %5.3f\n",GyroValues.l_yaw_f64,GyroValues.l_pitch_f64,GyroValues.l_roll_f64);
    9430:	e24b3f5b 	sub	r3, fp, #364	; 0x16c
    9434:	e1c320d0 	ldrd	r2, [r3]
    9438:	e24b5f59 	sub	r5, fp, #356	; 0x164
    943c:	e1c540d0 	ldrd	r4, [r5]
    9440:	e24b1f57 	sub	r1, fp, #348	; 0x15c
    9444:	e1c100d0 	ldrd	r0, [r1]
    9448:	e1cd40f0 	strd	r4, [sp]
    944c:	e1cd00f8 	strd	r0, [sp, #8]
    9450:	e59f053c 	ldr	r0, [pc, #1340]	; 9994 <main+0xd8c>
    9454:	ebfffd76 	bl	8a34 <_init+0x134>
				usleep(100000);
    9458:	e59f0530 	ldr	r0, [pc, #1328]	; 9990 <main+0xd88>
    945c:	ebfffd4d 	bl	8998 <_init+0x98>
			}
    9460:	eaffffd2 	b	93b0 <main+0x7a8>
			break;
		}
		case TESTGYRO:
		{
			double pressure=0;
    9464:	e3a02000 	mov	r2, #0
    9468:	e3a03000 	mov	r3, #0
    946c:	e14b2afc 	strd	r2, [fp, #-172]	; 0xffffff54
			double temp=0;
    9470:	e3a02000 	mov	r2, #0
    9474:	e3a03000 	mov	r3, #0
    9478:	e14b2bf4 	strd	r2, [fp, #-180]	; 0xffffff4c
			strGyro GyroValues;
			double Gyrotemp=0;
    947c:	e3a02000 	mov	r2, #0
    9480:	e3a03000 	mov	r3, #0
    9484:	e14b2bfc 	strd	r2, [fp, #-188]	; 0xffffff44
			printf("IMU Gyroscope test\n");
    9488:	e59f0508 	ldr	r0, [pc, #1288]	; 9998 <main+0xd90>
    948c:	ebfffd7a 	bl	8a7c <_init+0x17c>
			g_halBaro_initBaro_i32();
    9490:	eb000980 	bl	ba98 <g_halBaro_initBaro_i32>
			g_halGyro_initGyro_i32();
    9494:	eb000a65 	bl	be30 <g_halGyro_initGyro_i32>
			while(1)
			{
				g_halBaro_readPressureFromI2C_i32();
    9498:	eb0009bc 	bl	bb90 <g_halBaro_readPressureFromI2C_i32>
				//usleep(100000);
				g_halBaro_readTemperatureFromI2C_i32();
    949c:	eb000a0e 	bl	bcdc <g_halBaro_readTemperatureFromI2C_i32>
				//usleep(100000);
				pressure=g_halBaro_getPressure_f64();
    94a0:	eb0009a6 	bl	bb40 <g_halBaro_getPressure_f64>
    94a4:	ed0b0b2b 	vstr	d0, [fp, #-172]	; 0xffffff54
				temp=g_halBaro_getTemperature_f64();
    94a8:	eb0009ae 	bl	bb68 <g_halBaro_getTemperature_f64>
    94ac:	ed0b0b2d 	vstr	d0, [fp, #-180]	; 0xffffff4c
				printf("Pressure: %5.3f    ;    Temperature:  %5.3f\n",pressure,temp);
    94b0:	e14b2bd4 	ldrd	r2, [fp, #-180]	; 0xffffff4c
    94b4:	e1cd20f0 	strd	r2, [sp]
    94b8:	e59f046c 	ldr	r0, [pc, #1132]	; 992c <main+0xd24>
    94bc:	e14b2adc 	ldrd	r2, [fp, #-172]	; 0xffffff54
    94c0:	ebfffd5b 	bl	8a34 <_init+0x134>
				//usleep(100000);
				g_halGyro_readGyroscopeFromI2C_i32();
    94c4:	eb000aa3 	bl	bf58 <g_halGyro_readGyroscopeFromI2C_i32>
				//usleep(100000);
				g_halGyro_readTemperatureFromI2C_i32();
    94c8:	eb000b45 	bl	c1e4 <g_halGyro_readTemperatureFromI2C_i32>
				//usleep(100000);
				GyroValues=g_halGyro_getGyroscope_st();
    94cc:	eb000a81 	bl	bed8 <g_halGyro_getGyroscope_st>
    94d0:	eeb05b40 	vmov.f64	d5, d0
    94d4:	eeb06b41 	vmov.f64	d6, d1
    94d8:	eeb07b42 	vmov.f64	d7, d2
    94dc:	ed0b5b61 	vstr	d5, [fp, #-388]	; 0xfffffe7c
    94e0:	ed0b6b5f 	vstr	d6, [fp, #-380]	; 0xfffffe84
    94e4:	ed0b7b5d 	vstr	d7, [fp, #-372]	; 0xfffffe8c
				Gyrotemp=g_halGyro_getTemperature_f64();
    94e8:	eb000a90 	bl	bf30 <g_halGyro_getTemperature_f64>
    94ec:	ed0b0b2f 	vstr	d0, [fp, #-188]	; 0xffffff44
				printf("yaw: %5.3f    ;    pitch:  %5.3f    ;    roll:  %5.3f\n",GyroValues.l_yaw_f64,GyroValues.l_pitch_f64,GyroValues.l_roll_f64);
    94f0:	e24b3f61 	sub	r3, fp, #388	; 0x184
    94f4:	e1c320d0 	ldrd	r2, [r3]
    94f8:	e24b5f5f 	sub	r5, fp, #380	; 0x17c
    94fc:	e1c540d0 	ldrd	r4, [r5]
    9500:	e24b1f5d 	sub	r1, fp, #372	; 0x174
    9504:	e1c100d0 	ldrd	r0, [r1]
    9508:	e1cd40f0 	strd	r4, [sp]
    950c:	e1cd00f8 	strd	r0, [sp, #8]
    9510:	e59f047c 	ldr	r0, [pc, #1148]	; 9994 <main+0xd8c>
    9514:	ebfffd46 	bl	8a34 <_init+0x134>
				//usleep(100000);
			}
    9518:	eaffffde 	b	9498 <main+0x890>
			//static	double l_MatrixA_f64[1][3]={{1,2,9}};
			static	double l_MatrixB_f64[3][3]={{3,6,7},{2,5,9},{4,6,8}};
			//static	double l_MatrixB_f64[3][2]={{3,6},{2,5},{4,6}};
			static	double l_outputMatrix_f64[3][3]={{0,0,0},{0,0,0},{0,0,0}};
			//static	double l_outputMatrix_f64[3][2]={{0,0},{0,0},{0,0}};
			printf("matrix lib function test\n");
    951c:	e59f0478 	ldr	r0, [pc, #1144]	; 999c <main+0xd94>
    9520:	ebfffd55 	bl	8a7c <_init+0x17c>
			while(1)
			{
				g_sigMath_matrixEye_bl((double*)l_outputMatrix_f64,3,3);
    9524:	e59f0474 	ldr	r0, [pc, #1140]	; 99a0 <main+0xd98>
    9528:	e3a01003 	mov	r1, #3
    952c:	e3a02003 	mov	r2, #3
    9530:	eb001549 	bl	ea5c <g_sigMath_matrixEye_bl>
				sleep(1);
    9534:	e3a00001 	mov	r0, #1
    9538:	ebfffd49 	bl	8a64 <_init+0x164>
				g_sigMath_matrixInitialize_bl((double*)l_outputMatrix_f64,3,3,1);
    953c:	e59f045c 	ldr	r0, [pc, #1116]	; 99a0 <main+0xd98>
    9540:	e3a01003 	mov	r1, #3
    9544:	e3a02003 	mov	r2, #3
    9548:	ed9f0bde 	vldr	d0, [pc, #888]	; 98c8 <main+0xcc0>
    954c:	eb001515 	bl	e9a8 <g_sigMath_matrixInitialize_bl>
				sleep(1);
    9550:	e3a00001 	mov	r0, #1
    9554:	ebfffd42 	bl	8a64 <_init+0x164>
				g_sigMath_matrixMultiplikation_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3,(double*)l_MatrixB_f64,3,3);
    9558:	e59f3444 	ldr	r3, [pc, #1092]	; 99a4 <main+0xd9c>
    955c:	e58d3000 	str	r3, [sp]
    9560:	e3a03003 	mov	r3, #3
    9564:	e58d3004 	str	r3, [sp, #4]
    9568:	e3a03003 	mov	r3, #3
    956c:	e58d3008 	str	r3, [sp, #8]
    9570:	e59f0428 	ldr	r0, [pc, #1064]	; 99a0 <main+0xd98>
    9574:	e59f142c 	ldr	r1, [pc, #1068]	; 99a8 <main+0xda0>
    9578:	e3a02003 	mov	r2, #3
    957c:	e3a03003 	mov	r3, #3
    9580:	eb001193 	bl	dbd4 <g_sigMath_matrixMultiplikation_bl>
				sleep(1);
    9584:	e3a00001 	mov	r0, #1
    9588:	ebfffd35 	bl	8a64 <_init+0x164>
				g_sigMath_matrixAddition_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3,(double*)l_MatrixB_f64,3,3);
    958c:	e59f3410 	ldr	r3, [pc, #1040]	; 99a4 <main+0xd9c>
    9590:	e58d3000 	str	r3, [sp]
    9594:	e3a03003 	mov	r3, #3
    9598:	e58d3004 	str	r3, [sp, #4]
    959c:	e3a03003 	mov	r3, #3
    95a0:	e58d3008 	str	r3, [sp, #8]
    95a4:	e59f03f4 	ldr	r0, [pc, #1012]	; 99a0 <main+0xd98>
    95a8:	e59f13f8 	ldr	r1, [pc, #1016]	; 99a8 <main+0xda0>
    95ac:	e3a02003 	mov	r2, #3
    95b0:	e3a03003 	mov	r3, #3
    95b4:	eb0011e3 	bl	dd48 <g_sigMath_matrixAddition_bl>
				sleep(1);
    95b8:	e3a00001 	mov	r0, #1
    95bc:	ebfffd28 	bl	8a64 <_init+0x164>
				g_sigMath_matrixSubtraktion_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3,(double*)l_MatrixB_f64,3,3);
    95c0:	e59f33dc 	ldr	r3, [pc, #988]	; 99a4 <main+0xd9c>
    95c4:	e58d3000 	str	r3, [sp]
    95c8:	e3a03003 	mov	r3, #3
    95cc:	e58d3004 	str	r3, [sp, #4]
    95d0:	e3a03003 	mov	r3, #3
    95d4:	e58d3008 	str	r3, [sp, #8]
    95d8:	e59f03c0 	ldr	r0, [pc, #960]	; 99a0 <main+0xd98>
    95dc:	e59f13c4 	ldr	r1, [pc, #964]	; 99a8 <main+0xda0>
    95e0:	e3a02003 	mov	r2, #3
    95e4:	e3a03003 	mov	r3, #3
    95e8:	eb001221 	bl	de74 <g_sigMath_matrixSubtraktion_bl>
				sleep(1);
    95ec:	e3a00001 	mov	r0, #1
    95f0:	ebfffd1b 	bl	8a64 <_init+0x164>
				g_sigMath_matrixAssignment_bl((double*)l_outputMatrix_f64,3,3,(double*)l_MatrixA_f64,3,3);
    95f4:	e3a03003 	mov	r3, #3
    95f8:	e58d3000 	str	r3, [sp]
    95fc:	e3a03003 	mov	r3, #3
    9600:	e58d3004 	str	r3, [sp, #4]
    9604:	e59f0394 	ldr	r0, [pc, #916]	; 99a0 <main+0xd98>
    9608:	e3a01003 	mov	r1, #3
    960c:	e3a02003 	mov	r2, #3
    9610:	e59f3390 	ldr	r3, [pc, #912]	; 99a8 <main+0xda0>
    9614:	eb0014a4 	bl	e8ac <g_sigMath_matrixAssignment_bl>
				sleep(1);
    9618:	e3a00001 	mov	r0, #1
    961c:	ebfffd10 	bl	8a64 <_init+0x164>
				g_sigMath_matrixTransponiert_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3);
    9620:	e59f0378 	ldr	r0, [pc, #888]	; 99a0 <main+0xd98>
    9624:	e59f137c 	ldr	r1, [pc, #892]	; 99a8 <main+0xda0>
    9628:	e3a02003 	mov	r2, #3
    962c:	e3a03003 	mov	r3, #3
    9630:	eb00125a 	bl	dfa0 <g_sigMath_matrixTransponiert_bl>
				sleep(1);
    9634:	e3a00001 	mov	r0, #1
    9638:	ebfffd09 	bl	8a64 <_init+0x164>
				g_sigMath_matrixInverse_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3);
    963c:	e59f035c 	ldr	r0, [pc, #860]	; 99a0 <main+0xd98>
    9640:	e59f1360 	ldr	r1, [pc, #864]	; 99a8 <main+0xda0>
    9644:	e3a02003 	mov	r2, #3
    9648:	e3a03003 	mov	r3, #3
    964c:	eb001288 	bl	e074 <g_sigMath_matrixInverse_bl>
				sleep(1);
    9650:	e3a00001 	mov	r0, #1
    9654:	ebfffd02 	bl	8a64 <_init+0x164>
			}
    9658:	eaffffb1 	b	9524 <main+0x91c>
			break;
		}
		case TESTUDP:
		{
			printf("simple send udp test...");
    965c:	e59f0348 	ldr	r0, [pc, #840]	; 99ac <main+0xda4>
    9660:	ebfffcf3 	bl	8a34 <_init+0x134>
			int clientSocket;
			char message[20] = "Hello\n";
    9664:	e59f2344 	ldr	r2, [pc, #836]	; 99b0 <main+0xda8>
    9668:	e24b3f66 	sub	r3, fp, #408	; 0x198
    966c:	e8920003 	ldm	r2, {r0, r1}
    9670:	e5830000 	str	r0, [r3]
    9674:	e2833004 	add	r3, r3, #4
    9678:	e1c310b0 	strh	r1, [r3]
    967c:	e2833002 	add	r3, r3, #2
    9680:	e1a02821 	lsr	r2, r1, #16
    9684:	e5c32000 	strb	r2, [r3]
    9688:	e24b3e19 	sub	r3, fp, #400	; 0x190
    968c:	e2433001 	sub	r3, r3, #1
    9690:	e3a02000 	mov	r2, #0
    9694:	e5c32000 	strb	r2, [r3]
    9698:	e2833001 	add	r3, r3, #1
    969c:	e3a02000 	mov	r2, #0
    96a0:	e5c32000 	strb	r2, [r3]
    96a4:	e2833001 	add	r3, r3, #1
    96a8:	e3a02000 	mov	r2, #0
    96ac:	e5c32000 	strb	r2, [r3]
    96b0:	e2833001 	add	r3, r3, #1
    96b4:	e3a02000 	mov	r2, #0
    96b8:	e5c32000 	strb	r2, [r3]
    96bc:	e2833001 	add	r3, r3, #1
    96c0:	e3a02000 	mov	r2, #0
    96c4:	e5c32000 	strb	r2, [r3]
    96c8:	e2833001 	add	r3, r3, #1
    96cc:	e3a02000 	mov	r2, #0
    96d0:	e5c32000 	strb	r2, [r3]
    96d4:	e2833001 	add	r3, r3, #1
    96d8:	e3a02000 	mov	r2, #0
    96dc:	e5c32000 	strb	r2, [r3]
    96e0:	e2833001 	add	r3, r3, #1
    96e4:	e3a02000 	mov	r2, #0
    96e8:	e5c32000 	strb	r2, [r3]
    96ec:	e2833001 	add	r3, r3, #1
    96f0:	e3a02000 	mov	r2, #0
    96f4:	e5c32000 	strb	r2, [r3]
    96f8:	e2833001 	add	r3, r3, #1
    96fc:	e3a02000 	mov	r2, #0
    9700:	e5c32000 	strb	r2, [r3]
    9704:	e2833001 	add	r3, r3, #1
    9708:	e3a02000 	mov	r2, #0
    970c:	e5c32000 	strb	r2, [r3]
    9710:	e2833001 	add	r3, r3, #1
    9714:	e3a02000 	mov	r2, #0
    9718:	e5c32000 	strb	r2, [r3]
    971c:	e2833001 	add	r3, r3, #1
    9720:	e3a02000 	mov	r2, #0
    9724:	e5c32000 	strb	r2, [r3]
    9728:	e2833001 	add	r3, r3, #1
			struct sockaddr_in serverAddress;
			socklen_t addressSize;

			/*Create UDP socket*/
			clientSocket = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);
    972c:	e3a00002 	mov	r0, #2
    9730:	e3a01002 	mov	r1, #2
    9734:	e3a02011 	mov	r2, #17
    9738:	ebfffcae 	bl	89f8 <_init+0xf8>
    973c:	e50b00c0 	str	r0, [fp, #-192]	; 0xc0

			serverAddress.sin_family = PF_INET;
    9740:	e59f326c 	ldr	r3, [pc, #620]	; 99b4 <main+0xdac>
    9744:	e3a02002 	mov	r2, #2
    9748:	e24b104c 	sub	r1, fp, #76	; 0x4c
    974c:	e18120b3 	strh	r2, [r1, r3]
			serverAddress.sin_port = htons(REMOTE_PORT);
    9750:	e59f0200 	ldr	r0, [pc, #512]	; 9958 <main+0xd50>
    9754:	ebfffc89 	bl	8980 <_init+0x80>
    9758:	e1a03000 	mov	r3, r0
    975c:	e1a02003 	mov	r2, r3
    9760:	e59f3250 	ldr	r3, [pc, #592]	; 99b8 <main+0xdb0>
    9764:	e24b104c 	sub	r1, fp, #76	; 0x4c
    9768:	e18120b3 	strh	r2, [r1, r3]
			serverAddress.sin_addr.s_addr = inet_addr(REMOTE_ADDR);
    976c:	e59f0248 	ldr	r0, [pc, #584]	; 99bc <main+0xdb4>
    9770:	ebfffc79 	bl	895c <_init+0x5c>
    9774:	e1a03000 	mov	r3, r0
    9778:	e50b31a4 	str	r3, [fp, #-420]	; 0x1a4

			memset(serverAddress.sin_zero, '\0', sizeof(serverAddress.sin_zero));
    977c:	e24b3f6a 	sub	r3, fp, #424	; 0x1a8
    9780:	e2833008 	add	r3, r3, #8
    9784:	e1a00003 	mov	r0, r3
    9788:	e3a01000 	mov	r1, #0
    978c:	e3a02008 	mov	r2, #8
    9790:	ebfffc7d 	bl	898c <_init+0x8c>

			/*Initialize size variable to be used later on*/
			addressSize = sizeof(serverAddress);
    9794:	e3a03010 	mov	r3, #16
    9798:	e50b30c4 	str	r3, [fp, #-196]	; 0xc4

			printf("Start Sending Messages\n");
    979c:	e59f021c 	ldr	r0, [pc, #540]	; 99c0 <main+0xdb8>
    97a0:	ebfffcb5 	bl	8a7c <_init+0x17c>

			while(1)
			{
				sleep(1);
    97a4:	e3a00001 	mov	r0, #1
    97a8:	ebfffcad 	bl	8a64 <_init+0x164>
				/* Send N bytes of BUF on socket FD to peer at address ADDR (which is
				   ADDR_LEN bytes long).  Returns the number sent, or -1 for errors.

				   This function is a cancellation point and therefore not marked with
				   __THROW.  */
				sendto(clientSocket, message, sizeof(message), 0,
    97ac:	e24b3f66 	sub	r3, fp, #408	; 0x198
    97b0:	e24b2f6a 	sub	r2, fp, #424	; 0x1a8
    97b4:	e58d2000 	str	r2, [sp]
    97b8:	e51b20c4 	ldr	r2, [fp, #-196]	; 0xc4
    97bc:	e58d2004 	str	r2, [sp, #4]
    97c0:	e51b00c0 	ldr	r0, [fp, #-192]	; 0xc0
    97c4:	e1a01003 	mov	r1, r3
    97c8:	e3a02014 	mov	r2, #20
    97cc:	e3a03000 	mov	r3, #0
    97d0:	ebfffc67 	bl	8974 <_init+0x74>
						(struct sockaddr *)&serverAddress,addressSize);
				printf("And send again....\n");
    97d4:	e59f01e8 	ldr	r0, [pc, #488]	; 99c4 <main+0xdbc>
    97d8:	ebfffca7 	bl	8a7c <_init+0x17c>
			}
    97dc:	eafffff0 	b	97a4 <main+0xb9c>
			halImu_orientationValues	l_imuStates_st;
			halMatlab_rtSigAllStatePayload	l_rtCompleteSigPayload_st;
			struct timespec					l_timestamp_st;


			printf("Starting Transfer matlab data on udp test\n");
    97e0:	e59f01e0 	ldr	r0, [pc, #480]	; 99c8 <main+0xdc0>
    97e4:	ebfffca4 	bl	8a7c <_init+0x17c>

			int val=0;
    97e8:	e3a03000 	mov	r3, #0
    97ec:	e50b30c8 	str	r3, [fp, #-200]	; 0xc8
			int socketclient = 0;
    97f0:	e3a03000 	mov	r3, #0
    97f4:	e50b30cc 	str	r3, [fp, #-204]	; 0xcc
			struct sockaddr_in remoteaddress;

			remoteaddress.sin_family = PF_INET;
    97f8:	e59f31cc 	ldr	r3, [pc, #460]	; 99cc <main+0xdc4>
    97fc:	e3a02002 	mov	r2, #2
    9800:	e24b104c 	sub	r1, fp, #76	; 0x4c
    9804:	e18120b3 	strh	r2, [r1, r3]
			remoteaddress.sin_port = htons(REMOTE_PORT);
    9808:	e59f0148 	ldr	r0, [pc, #328]	; 9958 <main+0xd50>
    980c:	ebfffc5b 	bl	8980 <_init+0x80>
    9810:	e1a03000 	mov	r3, r0
    9814:	e1a02003 	mov	r2, r3
    9818:	e59f31b0 	ldr	r3, [pc, #432]	; 99d0 <main+0xdc8>
    981c:	e24b104c 	sub	r1, fp, #76	; 0x4c
    9820:	e18120b3 	strh	r2, [r1, r3]

			(void)inet_aton(REMOTE_ADDR, &remoteaddress.sin_addr); //dot to integer and then host to network byte order
    9824:	e24b3f7d 	sub	r3, fp, #500	; 0x1f4
    9828:	e2833004 	add	r3, r3, #4
    982c:	e59f0188 	ldr	r0, [pc, #392]	; 99bc <main+0xdb4>
    9830:	e1a01003 	mov	r1, r3
    9834:	ebfffc72 	bl	8a04 <_init+0x104>

			socketclient = socket(PF_INET, SOCK_DGRAM, 0);
    9838:	e3a00002 	mov	r0, #2
    983c:	e3a01002 	mov	r1, #2
    9840:	e3a02000 	mov	r2, #0
    9844:	ebfffc6b 	bl	89f8 <_init+0xf8>
    9848:	e50b00cc 	str	r0, [fp, #-204]	; 0xcc


			g_sigOri_initMatrices_bl();
    984c:	eb00153a 	bl	ed3c <g_sigOri_initMatrices_bl>
			g_sigOri_initImuSensors_bl();
    9850:	eb00152e 	bl	ed10 <g_sigOri_initImuSensors_bl>

			while(1)
			{
				g_sigOri_calcKalmanOrientation_bl();
    9854:	eb00170e 	bl	f494 <g_sigOri_calcKalmanOrientation_bl>
				g_sigOri_calcComplementaryOrientation_bl();
    9858:	eb0017e8 	bl	f800 <g_sigOri_calcComplementaryOrientation_bl>

				l_kalmanAngles_st 	= g_sigOri_getAnglesKalman_bl();
    985c:	eb0014f7 	bl	ec40 <g_sigOri_getAnglesKalman_bl>
    9860:	eeb05b40 	vmov.f64	d5, d0
    9864:	eeb06b41 	vmov.f64	d6, d1
    9868:	eeb07b42 	vmov.f64	d7, d2
    986c:	ed0b5b71 	vstr	d5, [fp, #-452]	; 0xfffffe3c
    9870:	ed0b6b6f 	vstr	d6, [fp, #-444]	; 0xfffffe44
    9874:	ed0b7b6d 	vstr	d7, [fp, #-436]	; 0xfffffe4c
				l_compAngles_st		= g_sigOri_getAnglesComplementary_bl();
    9878:	eb0014bc 	bl	eb70 <g_sigOri_getAnglesComplementary_bl>
    987c:	eeb05b40 	vmov.f64	d5, d0
    9880:	eeb06b41 	vmov.f64	d6, d1
    9884:	eeb07b42 	vmov.f64	d7, d2
    9888:	ed0b5b77 	vstr	d5, [fp, #-476]	; 0xfffffe24
    988c:	ed0b6b75 	vstr	d6, [fp, #-468]	; 0xfffffe2c
    9890:	ed0b7b73 	vstr	d7, [fp, #-460]	; 0xfffffe34
				l_imuStates_st 		= g_halImu_getImuValues_str();
    9894:	e24b3fb9 	sub	r3, fp, #740	; 0x2e4
    9898:	e1a00003 	mov	r0, r3
    989c:	eb000b04 	bl	c4b4 <g_halImu_getImuValues_str>
				 *                Select 'Cross G++ Linker'->Libraries
				 *                and add the entry 'rt' to 'Libraries (-l)'
				 *
				 *       GCC on the commandline: simply add '-lrt' to your gcc options
				 */
				if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    98a0:	e24b3f79 	sub	r3, fp, #484	; 0x1e4
    98a4:	e3a00000 	mov	r0, #0
    98a8:	e1a01003 	mov	r1, r3
    98ac:	ebfffc21 	bl	8938 <_init+0x38>
    98b0:	e1a03000 	mov	r3, r0
    98b4:	e3530000 	cmp	r3, #0
    98b8:	0a000051 	beq	9a04 <main+0xdfc>
				{
					return M_HAL_MATLAB_FAILED_UI8;
    98bc:	e3a03001 	mov	r3, #1
    98c0:	ea0000d3 	b	9c14 <main+0x100c>
    98c4:	e1a00000 	nop			; (mov r0, r0)
    98c8:	00000000 	.word	0x00000000
    98cc:	3ff00000 	.word	0x3ff00000
    98d0:	0000fc38 	.word	0x0000fc38
    98d4:	0000fc3c 	.word	0x0000fc3c
    98d8:	0000fc54 	.word	0x0000fc54
    98dc:	0000fc5c 	.word	0x0000fc5c
    98e0:	0000fc68 	.word	0x0000fc68
    98e4:	0000fc70 	.word	0x0000fc70
    98e8:	0000fc78 	.word	0x0000fc78
    98ec:	0000fc84 	.word	0x0000fc84
    98f0:	0000fc90 	.word	0x0000fc90
    98f4:	0000fca0 	.word	0x0000fca0
    98f8:	0000fcb4 	.word	0x0000fcb4
    98fc:	0000fcc0 	.word	0x0000fcc0
    9900:	0000fccc 	.word	0x0000fccc
    9904:	0000fcd8 	.word	0x0000fcd8
    9908:	0000fce8 	.word	0x0000fce8
    990c:	0000fcf0 	.word	0x0000fcf0
    9910:	0000fd00 	.word	0x0000fd00
    9914:	0000fd14 	.word	0x0000fd14
    9918:	0000fd1c 	.word	0x0000fd1c
    991c:	0000fd2c 	.word	0x0000fd2c
    9920:	0000fd44 	.word	0x0000fd44
    9924:	0000fd60 	.word	0x0000fd60
    9928:	0000fd74 	.word	0x0000fd74
    992c:	0000fd88 	.word	0x0000fd88
    9930:	0000fdb8 	.word	0x0000fdb8
    9934:	0000fde4 	.word	0x0000fde4
    9938:	0000fe08 	.word	0x0000fe08
    993c:	0000fe30 	.word	0x0000fe30
    9940:	0000fe44 	.word	0x0000fe44
    9944:	0007a120 	.word	0x0007a120
    9948:	0000fe58 	.word	0x0000fe58
    994c:	0000fe6c 	.word	0x0000fe6c
    9950:	0000fe7c 	.word	0x0000fe7c
    9954:	00010178 	.word	0x00010178
    9958:	00001388 	.word	0x00001388
    995c:	0000fe98 	.word	0x0000fe98
    9960:	0000fea4 	.word	0x0000fea4
    9964:	00004e20 	.word	0x00004e20
    9968:	0000feb8 	.word	0x0000feb8
    996c:	0000fee0 	.word	0x0000fee0
    9970:	0000fef0 	.word	0x0000fef0
    9974:	0000fefc 	.word	0x0000fefc
    9978:	0000ff20 	.word	0x0000ff20
    997c:	0000ff30 	.word	0x0000ff30
    9980:	0000ff44 	.word	0x0000ff44
    9984:	0000ff58 	.word	0x0000ff58
    9988:	0003d090 	.word	0x0003d090
    998c:	0000ff90 	.word	0x0000ff90
    9990:	000186a0 	.word	0x000186a0
    9994:	0000ffac 	.word	0x0000ffac
    9998:	0000ffe4 	.word	0x0000ffe4
    999c:	0000fff8 	.word	0x0000fff8
    99a0:	00018818 	.word	0x00018818
    99a4:	000183d0 	.word	0x000183d0
    99a8:	00018388 	.word	0x00018388
    99ac:	00010014 	.word	0x00010014
    99b0:	0001017c 	.word	0x0001017c
    99b4:	fffffea4 	.word	0xfffffea4
    99b8:	fffffea6 	.word	0xfffffea6
    99bc:	0001002c 	.word	0x0001002c
    99c0:	0001003c 	.word	0x0001003c
    99c4:	00010054 	.word	0x00010054
    99c8:	00010068 	.word	0x00010068
    99cc:	fffffe58 	.word	0xfffffe58
    99d0:	fffffe5a 	.word	0xfffffe5a
    99d4:	00010094 	.word	0x00010094
    99d8:	000100a8 	.word	0x000100a8
    99dc:	000100c0 	.word	0x000100c0
    99e0:	000100d0 	.word	0x000100d0
    99e4:	000100e0 	.word	0x000100e0
    99e8:	000100fc 	.word	0x000100fc
    99ec:	00010110 	.word	0x00010110
    99f0:	00010120 	.word	0x00010120
    99f4:	00010140 	.word	0x00010140
    99f8:	00018430 	.word	0x00018430
    99fc:	001e8480 	.word	0x001e8480
    9a00:	00010168 	.word	0x00010168
				}

				clock_gettime(CLOCK_REALTIME, &l_timestamp_st);
    9a04:	e24b3f79 	sub	r3, fp, #484	; 0x1e4
    9a08:	e3a00000 	mov	r0, #0
    9a0c:	e1a01003 	mov	r1, r3
    9a10:	ebfffbc8 	bl	8938 <_init+0x38>

				//assmeble timestamp and
				l_rtCompleteSigPayload_st.timestamp_st 				= l_timestamp_st;
    9a14:	e24b3fa3 	sub	r3, fp, #652	; 0x28c
    9a18:	e24b2f79 	sub	r2, fp, #484	; 0x1e4
    9a1c:	e8920003 	ldm	r2, {r0, r1}
    9a20:	e8830003 	stm	r3, {r0, r1}
				l_rtCompleteSigPayload_st.imuState_st				= l_imuStates_st;
    9a24:	e24b1f9f 	sub	r1, fp, #636	; 0x27c
    9a28:	e24b2fb9 	sub	r2, fp, #740	; 0x2e4
    9a2c:	e3a03058 	mov	r3, #88	; 0x58
    9a30:	e1a00001 	mov	r0, r1
    9a34:	e1a01002 	mov	r1, r2
    9a38:	e1a02003 	mov	r2, r3
    9a3c:	ebfffbf9 	bl	8a28 <_init+0x128>
				l_rtCompleteSigPayload_st.kalmanSigState_st 		= l_kalmanAngles_st;
    9a40:	e24bcf89 	sub	ip, fp, #548	; 0x224
    9a44:	e24bef71 	sub	lr, fp, #452	; 0x1c4
    9a48:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9a4c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    9a50:	e89e0003 	ldm	lr, {r0, r1}
    9a54:	e88c0003 	stm	ip, {r0, r1}
				l_rtCompleteSigPayload_st.complementarySigState_st	= l_compAngles_st;
    9a58:	e24bcf83 	sub	ip, fp, #524	; 0x20c
    9a5c:	e24bef77 	sub	lr, fp, #476	; 0x1dc
    9a60:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9a64:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    9a68:	e89e0003 	ldm	lr, {r0, r1}
    9a6c:	e88c0003 	stm	ip, {r0, r1}

				printf("START MEASUREMENT\n");
    9a70:	e51f00a4 	ldr	r0, [pc, #-164]	; 99d4 <main+0xdcc>
    9a74:	ebfffc00 	bl	8a7c <_init+0x17c>
				sprintf(str, "sec =  %d, nano = %d",
    9a78:	e51b228c 	ldr	r2, [fp, #-652]	; 0x28c
    9a7c:	e51b3288 	ldr	r3, [fp, #-648]	; 0x288
    9a80:	e51f0090 	ldr	r0, [pc, #-144]	; 99f8 <main+0xdf0>
    9a84:	e51f10b4 	ldr	r1, [pc, #-180]	; 99d8 <main+0xdd0>
    9a88:	ebfffc10 	bl	8ad0 <_init+0x1d0>
						l_rtCompleteSigPayload_st.timestamp_st.tv_sec, l_rtCompleteSigPayload_st.timestamp_st.tv_nsec);
				puts(str);
    9a8c:	e51f009c 	ldr	r0, [pc, #-156]	; 99f8 <main+0xdf0>
    9a90:	ebfffbf9 	bl	8a7c <_init+0x17c>
				sprintf(str, "acc = %f %f %f",
    9a94:	e24b3f9f 	sub	r3, fp, #636	; 0x27c
    9a98:	e1c320d0 	ldrd	r2, [r3]
    9a9c:	e24b5f9d 	sub	r5, fp, #628	; 0x274
    9aa0:	e1c540d0 	ldrd	r4, [r5]
    9aa4:	e24b1f9b 	sub	r1, fp, #620	; 0x26c
    9aa8:	e1c100d0 	ldrd	r0, [r1]
    9aac:	e1cd40f0 	strd	r4, [sp]
    9ab0:	e1cd00f8 	strd	r0, [sp, #8]
    9ab4:	e51f00c4 	ldr	r0, [pc, #-196]	; 99f8 <main+0xdf0>
    9ab8:	e51f10e4 	ldr	r1, [pc, #-228]	; 99dc <main+0xdd4>
    9abc:	ebfffc03 	bl	8ad0 <_init+0x1d0>
						l_rtCompleteSigPayload_st.imuState_st.acc.x_f64, l_rtCompleteSigPayload_st.imuState_st.acc.y_f64, l_rtCompleteSigPayload_st.imuState_st.acc.z_f64);
				puts(str);
    9ac0:	e51f00d0 	ldr	r0, [pc, #-208]	; 99f8 <main+0xdf0>
    9ac4:	ebfffbec 	bl	8a7c <_init+0x17c>
				sprintf(str, "mag = %f %f %f",
    9ac8:	e24b3f99 	sub	r3, fp, #612	; 0x264
    9acc:	e1c320d0 	ldrd	r2, [r3]
    9ad0:	e24b5f97 	sub	r5, fp, #604	; 0x25c
    9ad4:	e1c540d0 	ldrd	r4, [r5]
    9ad8:	e24b1f95 	sub	r1, fp, #596	; 0x254
    9adc:	e1c100d0 	ldrd	r0, [r1]
    9ae0:	e1cd40f0 	strd	r4, [sp]
    9ae4:	e1cd00f8 	strd	r0, [sp, #8]
    9ae8:	e51f00f8 	ldr	r0, [pc, #-248]	; 99f8 <main+0xdf0>
    9aec:	e51f1114 	ldr	r1, [pc, #-276]	; 99e0 <main+0xdd8>
    9af0:	ebfffbf6 	bl	8ad0 <_init+0x1d0>
						l_rtCompleteSigPayload_st.imuState_st.mag.x_f64, l_rtCompleteSigPayload_st.imuState_st.mag.y_f64, l_rtCompleteSigPayload_st.imuState_st.mag.z_f64);
				puts(str);
    9af4:	e51f0104 	ldr	r0, [pc, #-260]	; 99f8 <main+0xdf0>
    9af8:	ebfffbdf 	bl	8a7c <_init+0x17c>
				sprintf(str, "yaw %f, pitch %f roll %f",
    9afc:	e24b3f93 	sub	r3, fp, #588	; 0x24c
    9b00:	e1c320d0 	ldrd	r2, [r3]
    9b04:	e24b5f91 	sub	r5, fp, #580	; 0x244
    9b08:	e1c540d0 	ldrd	r4, [r5]
    9b0c:	e24b1f8f 	sub	r1, fp, #572	; 0x23c
    9b10:	e1c100d0 	ldrd	r0, [r1]
    9b14:	e1cd40f0 	strd	r4, [sp]
    9b18:	e1cd00f8 	strd	r0, [sp, #8]
    9b1c:	e51f012c 	ldr	r0, [pc, #-300]	; 99f8 <main+0xdf0>
    9b20:	e51f1144 	ldr	r1, [pc, #-324]	; 99e4 <main+0xddc>
    9b24:	ebfffbe9 	bl	8ad0 <_init+0x1d0>
						l_rtCompleteSigPayload_st.imuState_st.gyro.l_yaw_f64, l_rtCompleteSigPayload_st.imuState_st.gyro.l_pitch_f64, l_rtCompleteSigPayload_st.imuState_st.gyro.l_roll_f64);
				puts(str);
    9b28:	e51f0138 	ldr	r0, [pc, #-312]	; 99f8 <main+0xdf0>
    9b2c:	ebfffbd2 	bl	8a7c <_init+0x17c>
				sprintf(str, "temperature = %f",
    9b30:	e24b3f8d 	sub	r3, fp, #564	; 0x234
    9b34:	e1c320d0 	ldrd	r2, [r3]
    9b38:	e51f0148 	ldr	r0, [pc, #-328]	; 99f8 <main+0xdf0>
    9b3c:	e51f115c 	ldr	r1, [pc, #-348]	; 99e8 <main+0xde0>
    9b40:	ebfffbe2 	bl	8ad0 <_init+0x1d0>
						l_rtCompleteSigPayload_st.imuState_st.temperature_f64);
				puts(str);
    9b44:	e51f0154 	ldr	r0, [pc, #-340]	; 99f8 <main+0xdf0>
    9b48:	ebfffbcb 	bl	8a7c <_init+0x17c>
				sprintf(str, "pressure = %f",
    9b4c:	e24b3f8b 	sub	r3, fp, #556	; 0x22c
    9b50:	e1c320d0 	ldrd	r2, [r3]
    9b54:	e51f0164 	ldr	r0, [pc, #-356]	; 99f8 <main+0xdf0>
    9b58:	e51f1174 	ldr	r1, [pc, #-372]	; 99ec <main+0xde4>
    9b5c:	ebfffbdb 	bl	8ad0 <_init+0x1d0>
						l_rtCompleteSigPayload_st.imuState_st.pressure_f64);
				puts(str);
    9b60:	e51f0170 	ldr	r0, [pc, #-368]	; 99f8 <main+0xdf0>
    9b64:	ebfffbc4 	bl	8a7c <_init+0x17c>
				sprintf(str, "KALMAN yaw %f, pitch %f roll %f",
    9b68:	e24b3f85 	sub	r3, fp, #532	; 0x214
    9b6c:	e1c320d0 	ldrd	r2, [r3]
    9b70:	e24b5f87 	sub	r5, fp, #540	; 0x21c
    9b74:	e1c540d0 	ldrd	r4, [r5]
    9b78:	e24b1f89 	sub	r1, fp, #548	; 0x224
    9b7c:	e1c100d0 	ldrd	r0, [r1]
    9b80:	e1cd40f0 	strd	r4, [sp]
    9b84:	e1cd00f8 	strd	r0, [sp, #8]
    9b88:	e51f0198 	ldr	r0, [pc, #-408]	; 99f8 <main+0xdf0>
    9b8c:	e51f11a4 	ldr	r1, [pc, #-420]	; 99f0 <main+0xde8>
    9b90:	ebfffbce 	bl	8ad0 <_init+0x1d0>
						l_rtCompleteSigPayload_st.kalmanSigState_st.yaw_f64, l_rtCompleteSigPayload_st.kalmanSigState_st.pitch_f64, l_rtCompleteSigPayload_st.kalmanSigState_st.roll_f64);
				puts(str);
    9b94:	e51f01a4 	ldr	r0, [pc, #-420]	; 99f8 <main+0xdf0>
    9b98:	ebfffbb7 	bl	8a7c <_init+0x17c>
				sprintf(str, "COMPLEMENTARY yaw %f, pitch %f roll %f",
    9b9c:	e24b3f7f 	sub	r3, fp, #508	; 0x1fc
    9ba0:	e1c320d0 	ldrd	r2, [r3]
    9ba4:	e24b5f81 	sub	r5, fp, #516	; 0x204
    9ba8:	e1c540d0 	ldrd	r4, [r5]
    9bac:	e24b1f83 	sub	r1, fp, #524	; 0x20c
    9bb0:	e1c100d0 	ldrd	r0, [r1]
    9bb4:	e1cd40f0 	strd	r4, [sp]
    9bb8:	e1cd00f8 	strd	r0, [sp, #8]
    9bbc:	e51f01cc 	ldr	r0, [pc, #-460]	; 99f8 <main+0xdf0>
    9bc0:	e51f11d4 	ldr	r1, [pc, #-468]	; 99f4 <main+0xdec>
    9bc4:	ebfffbc1 	bl	8ad0 <_init+0x1d0>
						l_rtCompleteSigPayload_st.complementarySigState_st.yaw_f64, l_rtCompleteSigPayload_st.complementarySigState_st.pitch_f64, l_rtCompleteSigPayload_st.complementarySigState_st.roll_f64);
				puts(str);
    9bc8:	e51f01d8 	ldr	r0, [pc, #-472]	; 99f8 <main+0xdf0>
    9bcc:	ebfffbaa 	bl	8a7c <_init+0x17c>

				//printf("Sending time %d and Temperature %f\n", l_rtCompleteSigPayload_st.timestamp_st.tv_sec, l_rtCompleteSigPayload_st.imuState_st.temperature_f64);
				sendto(socketclient, (unsigned char *)&l_rtCompleteSigPayload_st , (size_t)sizeof( l_rtCompleteSigPayload_st ),  0, (struct sockaddr *)&remoteaddress, sizeof(remoteaddress));
    9bd0:	e24b3fa3 	sub	r3, fp, #652	; 0x28c
    9bd4:	e24b2f7d 	sub	r2, fp, #500	; 0x1f4
    9bd8:	e58d2000 	str	r2, [sp]
    9bdc:	e3a02010 	mov	r2, #16
    9be0:	e58d2004 	str	r2, [sp, #4]
    9be4:	e51b00cc 	ldr	r0, [fp, #-204]	; 0xcc
    9be8:	e1a01003 	mov	r1, r3
    9bec:	e3a02098 	mov	r2, #152	; 0x98
    9bf0:	e3a03000 	mov	r3, #0
    9bf4:	ebfffb5e 	bl	8974 <_init+0x74>

				usleep( 2000000 ); //20ms = 50Hz
    9bf8:	e51f0204 	ldr	r0, [pc, #-516]	; 99fc <main+0xdf4>
    9bfc:	ebfffb65 	bl	8998 <_init+0x98>
			}
    9c00:	eaffff13 	b	9854 <main+0xc4c>
		}

		default:
		case TESTEND:
		{
			printf("Nothing found");
    9c04:	e51f020c 	ldr	r0, [pc, #-524]	; 9a00 <main+0xdf8>
    9c08:	ebfffb89 	bl	8a34 <_init+0x134>
			break;
    9c0c:	e1a00000 	nop			; (mov r0, r0)
		}
	}
	return 0;
    9c10:	e3a03000 	mov	r3, #0
}
    9c14:	e1a00003 	mov	r0, r3
    9c18:	e24bd04c 	sub	sp, fp, #76	; 0x4c
    9c1c:	ecbd8b0c 	vpop	{d8-d13}
    9c20:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    9c24:	e1a00000 	nop			; (mov r0, r0)

00009c28 <g_halADC_get_ui16>:
 * 2015/05/08 mabrgs00:
 *  Error handling from I2C included
 *
 * \endinternal
 ***********************************************************************/
float g_halADC_get_ui16(unsigned char l_input_ui8){
    9c28:	e92d4800 	push	{fp, lr}
    9c2c:	e28db004 	add	fp, sp, #4
    9c30:	e24dd018 	sub	sp, sp, #24
    9c34:	e1a03000 	mov	r3, r0
    9c38:	e54b3015 	strb	r3, [fp, #-21]

  unsigned char l_address_ui8 = 0x49;		// Address of our device on the I2C bus
    9c3c:	e3a03049 	mov	r3, #73	; 0x49
    9c40:	e54b3006 	strb	r3, [fp, #-6]
  unsigned char l_mux_ui8;			// Config value depening on input
  unsigned short l_val_ui16;			// (Converted) result of ADC
  unsigned char l_checkerror_bl;			// Variable to store return value

  // Setting Config according to select Input
  switch(l_input_ui8){			   	// Standard: 1100 0011  (Bit 15-8) Input A0
    9c44:	e55b3015 	ldrb	r3, [fp, #-21]
    9c48:	e2433001 	sub	r3, r3, #1
    9c4c:	e3530003 	cmp	r3, #3
    9c50:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9c54:	ea00000f 	b	9c98 <g_halADC_get_ui16+0x70>
    9c58:	00009c68 	.word	0x00009c68
    9c5c:	00009c74 	.word	0x00009c74
    9c60:	00009c80 	.word	0x00009c80
    9c64:	00009c8c 	.word	0x00009c8c
	case 1: l_mux_ui8 = 0xC2; break;	// Input: A0	
    9c68:	e3e0303d 	mvn	r3, #61	; 0x3d
    9c6c:	e54b3005 	strb	r3, [fp, #-5]
    9c70:	ea00000a 	b	9ca0 <g_halADC_get_ui16+0x78>
	case 2: l_mux_ui8 = 0xD2; break;	
    9c74:	e3e0302d 	mvn	r3, #45	; 0x2d
    9c78:	e54b3005 	strb	r3, [fp, #-5]
    9c7c:	ea000007 	b	9ca0 <g_halADC_get_ui16+0x78>
	case 3: l_mux_ui8 = 0xE2; break;	
    9c80:	e3e0301d 	mvn	r3, #29
    9c84:	e54b3005 	strb	r3, [fp, #-5]
    9c88:	ea000004 	b	9ca0 <g_halADC_get_ui16+0x78>
	case 4: l_mux_ui8 = 0xF2; break;	// Input: A3
    9c8c:	e3e0300d 	mvn	r3, #13
    9c90:	e54b3005 	strb	r3, [fp, #-5]
    9c94:	ea000001 	b	9ca0 <g_halADC_get_ui16+0x78>
	default: l_mux_ui8 = 0xC2; 			
    9c98:	e3e0303d 	mvn	r3, #61	; 0x3d
    9c9c:	e54b3005 	strb	r3, [fp, #-5]
  // First Hex depends on Starting Conversion + the Input, which Pin to read A0-3
  // Second Value is PGA (001)=+-4,099V and continuous Mode (0)


  // These three bytes are written to the ADS1015 to set the config register and start the conversion 
  l_writeBuf_rg24[0] = 1;		// This sets the pointer register to write two bytes to the config register
    9ca0:	e3a03001 	mov	r3, #1
    9ca4:	e54b3010 	strb	r3, [fp, #-16]
  l_writeBuf_rg24[1] = l_mux_ui8;   	// This sets the 8 MSBs of the config register (bits 15-8) to 11000011
    9ca8:	e55b3005 	ldrb	r3, [fp, #-5]
    9cac:	e54b300f 	strb	r3, [fp, #-15]
  l_writeBuf_rg24[2] = 0x23;  		// This sets the 8 LSBs of the config register (bits  7-0) to 00100011   
    9cb0:	e3a03023 	mov	r3, #35	; 0x23
    9cb4:	e54b300e 	strb	r3, [fp, #-14]
  // First Hex is sample Rate. (001) sets to 250SPS + Comp Mode (0)
  // Second Hex is Comp. config. (0011) disable the comparator


  // Initialize the buffer used to read data from the ADS1015 to 0
  l_readBuf_rg16[0]= 0;		
    9cb8:	e3a03000 	mov	r3, #0
    9cbc:	e54b3014 	strb	r3, [fp, #-20]
  l_readBuf_rg16[1]= 0;
    9cc0:	e3a03000 	mov	r3, #0
    9cc4:	e54b3013 	strb	r3, [fp, #-19]
  
  // Write l_writeBuf_rg24 to the ADS1015, the 3 specifies the number of bytes we are writing,
  // this begins a continuous conversion
  l_checkerror_bl = g_lldI2c_WriteI2c_bl(l_address_ui8,l_writeBuf_rg24,3);
    9cc8:	e55b2006 	ldrb	r2, [fp, #-6]
    9ccc:	e24b3010 	sub	r3, fp, #16
    9cd0:	e1a00002 	mov	r0, r2
    9cd4:	e1a01003 	mov	r1, r3
    9cd8:	e3a02003 	mov	r2, #3
    9cdc:	eb000b1d 	bl	c958 <g_lldI2c_WriteI2c_bl>
    9ce0:	e1a03000 	mov	r3, r0
    9ce4:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    9ce8:	e55b3007 	ldrb	r3, [fp, #-7]
    9cec:	e3530001 	cmp	r3, #1
    9cf0:	1a000001 	bne	9cfc <g_halADC_get_ui16+0xd4>
	{
	return -1;
    9cf4:	eddf7a43 	vldr	s15, [pc, #268]	; 9e08 <g_halADC_get_ui16+0x1e0>
    9cf8:	ea00003b 	b	9dec <g_halADC_get_ui16+0x1c4>
	}

  // Read the config register into readBuf
  l_checkerror_bl = g_lldI2c_ReadI2c_bl(l_address_ui8,l_readBuf_rg16,2);
    9cfc:	e55b2006 	ldrb	r2, [fp, #-6]
    9d00:	e24b3014 	sub	r3, fp, #20
    9d04:	e1a00002 	mov	r0, r2
    9d08:	e1a01003 	mov	r1, r3
    9d0c:	e3a02002 	mov	r2, #2
    9d10:	eb000b48 	bl	ca38 <g_lldI2c_ReadI2c_bl>
    9d14:	e1a03000 	mov	r3, r0
    9d18:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    9d1c:	e55b3007 	ldrb	r3, [fp, #-7]
    9d20:	e3530001 	cmp	r3, #1
    9d24:	1a000001 	bne	9d30 <g_halADC_get_ui16+0x108>
	{
	return -1;
    9d28:	eddf7a36 	vldr	s15, [pc, #216]	; 9e08 <g_halADC_get_ui16+0x1e0>
    9d2c:	ea00002e 	b	9dec <g_halADC_get_ui16+0x1c4>
	}	
	
  // Set pointer register to 0 to read from the conversion register
  l_writeBuf_rg24[0] = 0;			
    9d30:	e3a03000 	mov	r3, #0
    9d34:	e54b3010 	strb	r3, [fp, #-16]
  l_checkerror_bl = g_lldI2c_WriteI2c_bl(l_address_ui8, l_writeBuf_rg24,1);
    9d38:	e55b2006 	ldrb	r2, [fp, #-6]
    9d3c:	e24b3010 	sub	r3, fp, #16
    9d40:	e1a00002 	mov	r0, r2
    9d44:	e1a01003 	mov	r1, r3
    9d48:	e3a02001 	mov	r2, #1
    9d4c:	eb000b01 	bl	c958 <g_lldI2c_WriteI2c_bl>
    9d50:	e1a03000 	mov	r3, r0
    9d54:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    9d58:	e55b3007 	ldrb	r3, [fp, #-7]
    9d5c:	e3530001 	cmp	r3, #1
    9d60:	1a000001 	bne	9d6c <g_halADC_get_ui16+0x144>
	{
	return -1;
    9d64:	eddf7a27 	vldr	s15, [pc, #156]	; 9e08 <g_halADC_get_ui16+0x1e0>
    9d68:	ea00001f 	b	9dec <g_halADC_get_ui16+0x1c4>
	}

  // Read the contents of the conversion register into readBuf		
  l_checkerror_bl = g_lldI2c_ReadI2c_bl(l_address_ui8,l_readBuf_rg16,2);	
    9d6c:	e55b2006 	ldrb	r2, [fp, #-6]
    9d70:	e24b3014 	sub	r3, fp, #20
    9d74:	e1a00002 	mov	r0, r2
    9d78:	e1a01003 	mov	r1, r3
    9d7c:	e3a02002 	mov	r2, #2
    9d80:	eb000b2c 	bl	ca38 <g_lldI2c_ReadI2c_bl>
    9d84:	e1a03000 	mov	r3, r0
    9d88:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    9d8c:	e55b3007 	ldrb	r3, [fp, #-7]
    9d90:	e3530001 	cmp	r3, #1
    9d94:	1a000001 	bne	9da0 <g_halADC_get_ui16+0x178>
	{
	return -1;
    9d98:	eddf7a1a 	vldr	s15, [pc, #104]	; 9e08 <g_halADC_get_ui16+0x1e0>
    9d9c:	ea000012 	b	9dec <g_halADC_get_ui16+0x1c4>
	}

  // Combine the two bytes of readBuf into a single 16 bit result 
  l_val_ui16 = l_readBuf_rg16[0] << 8 | l_readBuf_rg16[1];	
    9da0:	e55b3014 	ldrb	r3, [fp, #-20]
    9da4:	e1a03403 	lsl	r3, r3, #8
    9da8:	e6ff2073 	uxth	r2, r3
    9dac:	e55b3013 	ldrb	r3, [fp, #-19]
    9db0:	e1823003 	orr	r3, r2, r3
    9db4:	e6ff3073 	uxth	r3, r3
    9db8:	e14b30ba 	strh	r3, [fp, #-10]
  l_val_ui16 = l_val_ui16 >> 4; 
    9dbc:	e15b30ba 	ldrh	r3, [fp, #-10]
    9dc0:	e1a03223 	lsr	r3, r3, #4
    9dc4:	e14b30ba 	strh	r3, [fp, #-10]

  return((float)l_val_ui16*4.096/2047.0);
    9dc8:	e15b30ba 	ldrh	r3, [fp, #-10]
    9dcc:	ee073a10 	vmov	s14, r3
    9dd0:	eef87a47 	vcvt.f32.u32	s15, s14
    9dd4:	eeb76ae7 	vcvt.f64.f32	d6, s15
    9dd8:	ed9f7b06 	vldr	d7, [pc, #24]	; 9df8 <g_halADC_get_ui16+0x1d0>
    9ddc:	ee266b07 	vmul.f64	d6, d6, d7
    9de0:	ed9f7b06 	vldr	d7, [pc, #24]	; 9e00 <g_halADC_get_ui16+0x1d8>
    9de4:	ee867b07 	vdiv.f64	d7, d6, d7
    9de8:	eef77bc7 	vcvt.f32.f64	s15, d7

}
    9dec:	eeb00a67 	vmov.f32	s0, s15
    9df0:	e24bd004 	sub	sp, fp, #4
    9df4:	e8bd8800 	pop	{fp, pc}
    9df8:	d2f1a9fc 	.word	0xd2f1a9fc
    9dfc:	4010624d 	.word	0x4010624d
    9e00:	00000000 	.word	0x00000000
    9e04:	409ffc00 	.word	0x409ffc00
    9e08:	bf800000 	.word	0xbf800000
    9e0c:	e1a00000 	nop			; (mov r0, r0)

00009e10 <g_halBatCheck_getBatteryStatus_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halBatCheck_getBatteryStatus_f64(void)
{
    9e10:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9e14:	e28db000 	add	fp, sp, #0
	return m_batteryLevel_f64;
    9e18:	e59f3014 	ldr	r3, [pc, #20]	; 9e34 <g_halBatCheck_getBatteryStatus_f64+0x24>
    9e1c:	e1c320d0 	ldrd	r2, [r3]
    9e20:	ec432b17 	vmov	d7, r2, r3
}
    9e24:	eeb00b47 	vmov.f64	d0, d7
    9e28:	e24bd000 	sub	sp, fp, #0
    9e2c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    9e30:	e12fff1e 	bx	lr
    9e34:	00018860 	.word	0x00018860

00009e38 <g_halBatCheck_readBatStatusFromI2C_bl>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
unsigned int  g_halBatCheck_readBatStatusFromI2C_bl(void)
{
    9e38:	e92d4800 	push	{fp, lr}
    9e3c:	e28db004 	add	fp, sp, #4
    9e40:	e24dd008 	sub	sp, sp, #8
	double l_batteryLevel_f64;

	l_batteryLevel_f64=g_halADC_get_ui16(M_HAL_BATCHECK_ADC_INPUT_PORT_UI8);
    9e44:	e3a00001 	mov	r0, #1
    9e48:	ebffff76 	bl	9c28 <g_halADC_get_ui16>
    9e4c:	eef07a40 	vmov.f32	s15, s0
    9e50:	eeb77ae7 	vcvt.f64.f32	d7, s15
    9e54:	ed0b7b03 	vstr	d7, [fp, #-12]

	if(l_batteryLevel_f64<=0)
    9e58:	ed1b7b03 	vldr	d7, [fp, #-12]
    9e5c:	eeb57bc0 	vcmpe.f64	d7, #0.0
    9e60:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    9e64:	8a000001 	bhi	9e70 <g_halBatCheck_readBatStatusFromI2C_bl+0x38>
	{return M_HAL_BATCHECK_FAILED_BL;}
    9e68:	e3a03001 	mov	r3, #1
    9e6c:	ea000003 	b	9e80 <g_halBatCheck_readBatStatusFromI2C_bl+0x48>

	m_batteryLevel_f64=l_batteryLevel_f64;
    9e70:	e59f1014 	ldr	r1, [pc, #20]	; 9e8c <g_halBatCheck_readBatStatusFromI2C_bl+0x54>
    9e74:	e14b20dc 	ldrd	r2, [fp, #-12]
    9e78:	e1c120f0 	strd	r2, [r1]

	return M_HAL_BATCHECK_SUCCESS_BL;
    9e7c:	e3a03000 	mov	r3, #0
}
    9e80:	e1a00003 	mov	r0, r3
    9e84:	e24bd004 	sub	sp, fp, #4
    9e88:	e8bd8800 	pop	{fp, pc}
    9e8c:	00018860 	.word	0x00018860

00009e90 <g_halGps_getTime_ui32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
unsigned int g_halGps_getTime_ui32(void)
{
    9e90:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9e94:	e28db000 	add	fp, sp, #0
	return l_time_ui32;
    9e98:	e59f3010 	ldr	r3, [pc, #16]	; 9eb0 <g_halGps_getTime_ui32+0x20>
    9e9c:	e5933000 	ldr	r3, [r3]
}
    9ea0:	e1a00003 	mov	r0, r3
    9ea4:	e24bd000 	sub	sp, fp, #0
    9ea8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    9eac:	e12fff1e 	bx	lr
    9eb0:	00018898 	.word	0x00018898

00009eb4 <g_halGps_getLongitude_st>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
struct strPosition g_halGps_getLongitude_st(void)
{
    9eb4:	e92d4800 	push	{fp, lr}
    9eb8:	e28db004 	add	fp, sp, #4
    9ebc:	e24dd008 	sub	sp, sp, #8
    9ec0:	e50b0008 	str	r0, [fp, #-8]
	return l_gps_longitude_st;
    9ec4:	e51b2008 	ldr	r2, [fp, #-8]
    9ec8:	e59f3020 	ldr	r3, [pc, #32]	; 9ef0 <g_halGps_getLongitude_st+0x3c>
    9ecc:	e1a0c002 	mov	ip, r2
    9ed0:	e1a0e003 	mov	lr, r3
    9ed4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9ed8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    9edc:	e89e0003 	ldm	lr, {r0, r1}
    9ee0:	e88c0003 	stm	ip, {r0, r1}
}
    9ee4:	e51b0008 	ldr	r0, [fp, #-8]
    9ee8:	e24bd004 	sub	sp, fp, #4
    9eec:	e8bd8800 	pop	{fp, pc}
    9ef0:	00018868 	.word	0x00018868

00009ef4 <g_halGps_getLatitude_st>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
struct strPosition g_halGps_getLatitude_st(void)
{
    9ef4:	e92d4800 	push	{fp, lr}
    9ef8:	e28db004 	add	fp, sp, #4
    9efc:	e24dd008 	sub	sp, sp, #8
    9f00:	e50b0008 	str	r0, [fp, #-8]
	return l_gps_latitude_st;
    9f04:	e51b2008 	ldr	r2, [fp, #-8]
    9f08:	e59f3020 	ldr	r3, [pc, #32]	; 9f30 <g_halGps_getLatitude_st+0x3c>
    9f0c:	e1a0c002 	mov	ip, r2
    9f10:	e1a0e003 	mov	lr, r3
    9f14:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9f18:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    9f1c:	e89e0003 	ldm	lr, {r0, r1}
    9f20:	e88c0003 	stm	ip, {r0, r1}
}
    9f24:	e51b0008 	ldr	r0, [fp, #-8]
    9f28:	e24bd004 	sub	sp, fp, #4
    9f2c:	e8bd8800 	pop	{fp, pc}
    9f30:	00018880 	.word	0x00018880

00009f34 <g_halGps_getFix_ch>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
char g_halGps_getFix_ch(void)
{
    9f34:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9f38:	e28db000 	add	fp, sp, #0
	return l_fix_ch;
    9f3c:	e59f3010 	ldr	r3, [pc, #16]	; 9f54 <g_halGps_getFix_ch+0x20>
    9f40:	e5d33000 	ldrb	r3, [r3]
}
    9f44:	e1a00003 	mov	r0, r3
    9f48:	e24bd000 	sub	sp, fp, #0
    9f4c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    9f50:	e12fff1e 	bx	lr
    9f54:	0001889c 	.word	0x0001889c

00009f58 <g_halGps_getVelocity_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getVelocity_f64(void)
{
    9f58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9f5c:	e28db000 	add	fp, sp, #0
	return l_velocity_f64;
    9f60:	e59f3014 	ldr	r3, [pc, #20]	; 9f7c <g_halGps_getVelocity_f64+0x24>
    9f64:	e1c320d0 	ldrd	r2, [r3]
    9f68:	ec432b17 	vmov	d7, r2, r3
}
    9f6c:	eeb00b47 	vmov.f64	d0, d7
    9f70:	e24bd000 	sub	sp, fp, #0
    9f74:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    9f78:	e12fff1e 	bx	lr
    9f7c:	000188a0 	.word	0x000188a0

00009f80 <g_halGps_getDirection_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getDirection_f64(void)
{
    9f80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9f84:	e28db000 	add	fp, sp, #0
	return l_direction_f64;
    9f88:	e59f3014 	ldr	r3, [pc, #20]	; 9fa4 <g_halGps_getDirection_f64+0x24>
    9f8c:	e1c320d0 	ldrd	r2, [r3]
    9f90:	ec432b17 	vmov	d7, r2, r3
}
    9f94:	eeb00b47 	vmov.f64	d0, d7
    9f98:	e24bd000 	sub	sp, fp, #0
    9f9c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    9fa0:	e12fff1e 	bx	lr
    9fa4:	000188a8 	.word	0x000188a8

00009fa8 <g_halGps_getDate_ui32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
unsigned int g_halGps_getDate_ui32(void)
{
    9fa8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9fac:	e28db000 	add	fp, sp, #0
	return l_date_ui32;
    9fb0:	e59f3010 	ldr	r3, [pc, #16]	; 9fc8 <g_halGps_getDate_ui32+0x20>
    9fb4:	e5933000 	ldr	r3, [r3]
}
    9fb8:	e1a00003 	mov	r0, r3
    9fbc:	e24bd000 	sub	sp, fp, #0
    9fc0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    9fc4:	e12fff1e 	bx	lr
    9fc8:	000188b0 	.word	0x000188b0

00009fcc <g_halGps_getHeight_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getHeight_f64(void)
{
    9fcc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9fd0:	e28db000 	add	fp, sp, #0
	return l_height_f64;
    9fd4:	e59f3014 	ldr	r3, [pc, #20]	; 9ff0 <g_halGps_getHeight_f64+0x24>
    9fd8:	e1c320d0 	ldrd	r2, [r3]
    9fdc:	ec432b17 	vmov	d7, r2, r3
}
    9fe0:	eeb00b47 	vmov.f64	d0, d7
    9fe4:	e24bd000 	sub	sp, fp, #0
    9fe8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    9fec:	e12fff1e 	bx	lr
    9ff0:	000188b8 	.word	0x000188b8

00009ff4 <g_halGps_getGeoid_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getGeoid_f64(void)
{
    9ff4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    9ff8:	e28db000 	add	fp, sp, #0
	return l_geoid_f64;
    9ffc:	e59f3014 	ldr	r3, [pc, #20]	; a018 <g_halGps_getGeoid_f64+0x24>
    a000:	e1c320d0 	ldrd	r2, [r3]
    a004:	ec432b17 	vmov	d7, r2, r3
}
    a008:	eeb00b47 	vmov.f64	d0, d7
    a00c:	e24bd000 	sub	sp, fp, #0
    a010:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a014:	e12fff1e 	bx	lr
    a018:	000188c0 	.word	0x000188c0

0000a01c <l_resetMessage1Values_vd>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void l_resetMessage1Values_vd(void)
{
    a01c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a020:	e28db000 	add	fp, sp, #0
	l_time_ui32=0;
    a024:	e59f3098 	ldr	r3, [pc, #152]	; a0c4 <l_resetMessage1Values_vd+0xa8>
    a028:	e3a02000 	mov	r2, #0
    a02c:	e5832000 	str	r2, [r3]
	l_gps_longitude_st.l_degree_ui32=0;
    a030:	e59f3090 	ldr	r3, [pc, #144]	; a0c8 <l_resetMessage1Values_vd+0xac>
    a034:	e3a02000 	mov	r2, #0
    a038:	e5832000 	str	r2, [r3]
	l_gps_longitude_st.l_minutes_ui32=0;
    a03c:	e59f3084 	ldr	r3, [pc, #132]	; a0c8 <l_resetMessage1Values_vd+0xac>
    a040:	e3a02000 	mov	r2, #0
    a044:	e5832004 	str	r2, [r3, #4]
	l_gps_longitude_st.l_seconds_f64=0;
    a048:	e59f1078 	ldr	r1, [pc, #120]	; a0c8 <l_resetMessage1Values_vd+0xac>
    a04c:	e3a02000 	mov	r2, #0
    a050:	e3a03000 	mov	r3, #0
    a054:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_longitude_st.l_cardinalDirection_ch=' ';
    a058:	e59f3068 	ldr	r3, [pc, #104]	; a0c8 <l_resetMessage1Values_vd+0xac>
    a05c:	e3a02020 	mov	r2, #32
    a060:	e5c32010 	strb	r2, [r3, #16]
	l_gps_latitude_st.l_degree_ui32=0;
    a064:	e59f3060 	ldr	r3, [pc, #96]	; a0cc <l_resetMessage1Values_vd+0xb0>
    a068:	e3a02000 	mov	r2, #0
    a06c:	e5832000 	str	r2, [r3]
	l_gps_latitude_st.l_minutes_ui32=0;
    a070:	e59f3054 	ldr	r3, [pc, #84]	; a0cc <l_resetMessage1Values_vd+0xb0>
    a074:	e3a02000 	mov	r2, #0
    a078:	e5832004 	str	r2, [r3, #4]
	l_gps_latitude_st.l_seconds_f64=0;
    a07c:	e59f1048 	ldr	r1, [pc, #72]	; a0cc <l_resetMessage1Values_vd+0xb0>
    a080:	e3a02000 	mov	r2, #0
    a084:	e3a03000 	mov	r3, #0
    a088:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_latitude_st.l_cardinalDirection_ch=' ';
    a08c:	e59f3038 	ldr	r3, [pc, #56]	; a0cc <l_resetMessage1Values_vd+0xb0>
    a090:	e3a02020 	mov	r2, #32
    a094:	e5c32010 	strb	r2, [r3, #16]
	l_height_f64=0;
    a098:	e59f1030 	ldr	r1, [pc, #48]	; a0d0 <l_resetMessage1Values_vd+0xb4>
    a09c:	e3a02000 	mov	r2, #0
    a0a0:	e3a03000 	mov	r3, #0
    a0a4:	e1c120f0 	strd	r2, [r1]
	l_geoid_f64=0;
    a0a8:	e59f1024 	ldr	r1, [pc, #36]	; a0d4 <l_resetMessage1Values_vd+0xb8>
    a0ac:	e3a02000 	mov	r2, #0
    a0b0:	e3a03000 	mov	r3, #0
    a0b4:	e1c120f0 	strd	r2, [r1]
}
    a0b8:	e24bd000 	sub	sp, fp, #0
    a0bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a0c0:	e12fff1e 	bx	lr
    a0c4:	00018898 	.word	0x00018898
    a0c8:	00018868 	.word	0x00018868
    a0cc:	00018880 	.word	0x00018880
    a0d0:	000188b8 	.word	0x000188b8
    a0d4:	000188c0 	.word	0x000188c0

0000a0d8 <l_resetMessage2Values_vd>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void l_resetMessage2Values_vd(void)
{
    a0d8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a0dc:	e28db000 	add	fp, sp, #0
	l_time_ui32=0;
    a0e0:	e59f30b0 	ldr	r3, [pc, #176]	; a198 <l_resetMessage2Values_vd+0xc0>
    a0e4:	e3a02000 	mov	r2, #0
    a0e8:	e5832000 	str	r2, [r3]
	l_fix_ch=' ';
    a0ec:	e59f30a8 	ldr	r3, [pc, #168]	; a19c <l_resetMessage2Values_vd+0xc4>
    a0f0:	e3a02020 	mov	r2, #32
    a0f4:	e5c32000 	strb	r2, [r3]
	l_gps_longitude_st.l_degree_ui32=0;
    a0f8:	e59f30a0 	ldr	r3, [pc, #160]	; a1a0 <l_resetMessage2Values_vd+0xc8>
    a0fc:	e3a02000 	mov	r2, #0
    a100:	e5832000 	str	r2, [r3]
	l_gps_longitude_st.l_minutes_ui32=0;
    a104:	e59f3094 	ldr	r3, [pc, #148]	; a1a0 <l_resetMessage2Values_vd+0xc8>
    a108:	e3a02000 	mov	r2, #0
    a10c:	e5832004 	str	r2, [r3, #4]
	l_gps_longitude_st.l_seconds_f64=0;
    a110:	e59f1088 	ldr	r1, [pc, #136]	; a1a0 <l_resetMessage2Values_vd+0xc8>
    a114:	e3a02000 	mov	r2, #0
    a118:	e3a03000 	mov	r3, #0
    a11c:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_longitude_st.l_cardinalDirection_ch=' ';
    a120:	e59f3078 	ldr	r3, [pc, #120]	; a1a0 <l_resetMessage2Values_vd+0xc8>
    a124:	e3a02020 	mov	r2, #32
    a128:	e5c32010 	strb	r2, [r3, #16]
	l_gps_latitude_st.l_degree_ui32=0;
    a12c:	e59f3070 	ldr	r3, [pc, #112]	; a1a4 <l_resetMessage2Values_vd+0xcc>
    a130:	e3a02000 	mov	r2, #0
    a134:	e5832000 	str	r2, [r3]
	l_gps_latitude_st.l_minutes_ui32=0;
    a138:	e59f3064 	ldr	r3, [pc, #100]	; a1a4 <l_resetMessage2Values_vd+0xcc>
    a13c:	e3a02000 	mov	r2, #0
    a140:	e5832004 	str	r2, [r3, #4]
	l_gps_latitude_st.l_seconds_f64=0;
    a144:	e59f1058 	ldr	r1, [pc, #88]	; a1a4 <l_resetMessage2Values_vd+0xcc>
    a148:	e3a02000 	mov	r2, #0
    a14c:	e3a03000 	mov	r3, #0
    a150:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_latitude_st.l_cardinalDirection_ch=' ';
    a154:	e59f3048 	ldr	r3, [pc, #72]	; a1a4 <l_resetMessage2Values_vd+0xcc>
    a158:	e3a02020 	mov	r2, #32
    a15c:	e5c32010 	strb	r2, [r3, #16]
	l_velocity_f64=0;
    a160:	e59f1040 	ldr	r1, [pc, #64]	; a1a8 <l_resetMessage2Values_vd+0xd0>
    a164:	e3a02000 	mov	r2, #0
    a168:	e3a03000 	mov	r3, #0
    a16c:	e1c120f0 	strd	r2, [r1]
	l_direction_f64=0;
    a170:	e59f1034 	ldr	r1, [pc, #52]	; a1ac <l_resetMessage2Values_vd+0xd4>
    a174:	e3a02000 	mov	r2, #0
    a178:	e3a03000 	mov	r3, #0
    a17c:	e1c120f0 	strd	r2, [r1]
	l_date_ui32=0;
    a180:	e59f3028 	ldr	r3, [pc, #40]	; a1b0 <l_resetMessage2Values_vd+0xd8>
    a184:	e3a02000 	mov	r2, #0
    a188:	e5832000 	str	r2, [r3]
}
    a18c:	e24bd000 	sub	sp, fp, #0
    a190:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a194:	e12fff1e 	bx	lr
    a198:	00018898 	.word	0x00018898
    a19c:	0001889c 	.word	0x0001889c
    a1a0:	00018868 	.word	0x00018868
    a1a4:	00018880 	.word	0x00018880
    a1a8:	000188a0 	.word	0x000188a0
    a1ac:	000188a8 	.word	0x000188a8
    a1b0:	000188b0 	.word	0x000188b0

0000a1b4 <g_halGps_getData_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGps_getData_i32(void)
{
    a1b4:	e92d4800 	push	{fp, lr}
    a1b8:	e28db004 	add	fp, sp, #4

	l_rec_Data_ch=g_lldUart_readByte_ch();
    a1bc:	eb000af8 	bl	cda4 <g_lldUart_readByte_ch>
    a1c0:	e1a03000 	mov	r3, r0
    a1c4:	e1a02003 	mov	r2, r3
    a1c8:	e59f38e0 	ldr	r3, [pc, #2272]	; aab0 <g_halGps_getData_i32+0x8fc>
    a1cc:	e5c32000 	strb	r2, [r3]

	if(!l_message_position_ch)//check which message is received
    a1d0:	e59f38c4 	ldr	r3, [pc, #2244]	; aa9c <g_halGps_getData_i32+0x8e8>
    a1d4:	e5d33000 	ldrb	r3, [r3]
    a1d8:	e3530000 	cmp	r3, #0
    a1dc:	1a0000a6 	bne	a47c <g_halGps_getData_i32+0x2c8>
	{
		if(l_rec_Data_ch=='$')
    a1e0:	e59f38c8 	ldr	r3, [pc, #2248]	; aab0 <g_halGps_getData_i32+0x8fc>
    a1e4:	e5d33000 	ldrb	r3, [r3]
    a1e8:	e3530024 	cmp	r3, #36	; 0x24
    a1ec:	1a00000b 	bne	a220 <g_halGps_getData_i32+0x6c>
		{l_header_position_ch=1;l_succeded_i32=0;l_succeded_i32++;}
    a1f0:	e59f38a8 	ldr	r3, [pc, #2216]	; aaa0 <g_halGps_getData_i32+0x8ec>
    a1f4:	e3a02001 	mov	r2, #1
    a1f8:	e5c32000 	strb	r2, [r3]
    a1fc:	e59f38b0 	ldr	r3, [pc, #2224]	; aab4 <g_halGps_getData_i32+0x900>
    a200:	e3a02000 	mov	r2, #0
    a204:	e5832000 	str	r2, [r3]
    a208:	e59f38a4 	ldr	r3, [pc, #2212]	; aab4 <g_halGps_getData_i32+0x900>
    a20c:	e5933000 	ldr	r3, [r3]
    a210:	e2832001 	add	r2, r3, #1
    a214:	e59f3898 	ldr	r3, [pc, #2200]	; aab4 <g_halGps_getData_i32+0x900>
    a218:	e5832000 	str	r2, [r3]
    a21c:	ea000413 	b	b270 <g_halGps_getData_i32+0x10bc>
		else if (l_header_position_ch==1 && l_rec_Data_ch=='G')
    a220:	e59f3878 	ldr	r3, [pc, #2168]	; aaa0 <g_halGps_getData_i32+0x8ec>
    a224:	e5d33000 	ldrb	r3, [r3]
    a228:	e3530001 	cmp	r3, #1
    a22c:	1a00000c 	bne	a264 <g_halGps_getData_i32+0xb0>
    a230:	e59f3878 	ldr	r3, [pc, #2168]	; aab0 <g_halGps_getData_i32+0x8fc>
    a234:	e5d33000 	ldrb	r3, [r3]
    a238:	e3530047 	cmp	r3, #71	; 0x47
    a23c:	1a000008 	bne	a264 <g_halGps_getData_i32+0xb0>
		{l_header_position_ch=2;l_succeded_i32++;}
    a240:	e59f3858 	ldr	r3, [pc, #2136]	; aaa0 <g_halGps_getData_i32+0x8ec>
    a244:	e3a02002 	mov	r2, #2
    a248:	e5c32000 	strb	r2, [r3]
    a24c:	e59f3860 	ldr	r3, [pc, #2144]	; aab4 <g_halGps_getData_i32+0x900>
    a250:	e5933000 	ldr	r3, [r3]
    a254:	e2832001 	add	r2, r3, #1
    a258:	e59f3854 	ldr	r3, [pc, #2132]	; aab4 <g_halGps_getData_i32+0x900>
    a25c:	e5832000 	str	r2, [r3]
    a260:	ea000084 	b	a478 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==2 && l_rec_Data_ch=='P')
    a264:	e59f3834 	ldr	r3, [pc, #2100]	; aaa0 <g_halGps_getData_i32+0x8ec>
    a268:	e5d33000 	ldrb	r3, [r3]
    a26c:	e3530002 	cmp	r3, #2
    a270:	1a00000c 	bne	a2a8 <g_halGps_getData_i32+0xf4>
    a274:	e59f3834 	ldr	r3, [pc, #2100]	; aab0 <g_halGps_getData_i32+0x8fc>
    a278:	e5d33000 	ldrb	r3, [r3]
    a27c:	e3530050 	cmp	r3, #80	; 0x50
    a280:	1a000008 	bne	a2a8 <g_halGps_getData_i32+0xf4>
		{l_header_position_ch=3;l_succeded_i32++;}
    a284:	e59f3814 	ldr	r3, [pc, #2068]	; aaa0 <g_halGps_getData_i32+0x8ec>
    a288:	e3a02003 	mov	r2, #3
    a28c:	e5c32000 	strb	r2, [r3]
    a290:	e59f381c 	ldr	r3, [pc, #2076]	; aab4 <g_halGps_getData_i32+0x900>
    a294:	e5933000 	ldr	r3, [r3]
    a298:	e2832001 	add	r2, r3, #1
    a29c:	e59f3810 	ldr	r3, [pc, #2064]	; aab4 <g_halGps_getData_i32+0x900>
    a2a0:	e5832000 	str	r2, [r3]
    a2a4:	ea000073 	b	a478 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==3 && l_rec_Data_ch=='G')
    a2a8:	e59f37f0 	ldr	r3, [pc, #2032]	; aaa0 <g_halGps_getData_i32+0x8ec>
    a2ac:	e5d33000 	ldrb	r3, [r3]
    a2b0:	e3530003 	cmp	r3, #3
    a2b4:	1a00000c 	bne	a2ec <g_halGps_getData_i32+0x138>
    a2b8:	e59f37f0 	ldr	r3, [pc, #2032]	; aab0 <g_halGps_getData_i32+0x8fc>
    a2bc:	e5d33000 	ldrb	r3, [r3]
    a2c0:	e3530047 	cmp	r3, #71	; 0x47
    a2c4:	1a000008 	bne	a2ec <g_halGps_getData_i32+0x138>
		{l_header_position_ch=14;l_succeded_i32++;}
    a2c8:	e59f37d0 	ldr	r3, [pc, #2000]	; aaa0 <g_halGps_getData_i32+0x8ec>
    a2cc:	e3a0200e 	mov	r2, #14
    a2d0:	e5c32000 	strb	r2, [r3]
    a2d4:	e59f37d8 	ldr	r3, [pc, #2008]	; aab4 <g_halGps_getData_i32+0x900>
    a2d8:	e5933000 	ldr	r3, [r3]
    a2dc:	e2832001 	add	r2, r3, #1
    a2e0:	e59f37cc 	ldr	r3, [pc, #1996]	; aab4 <g_halGps_getData_i32+0x900>
    a2e4:	e5832000 	str	r2, [r3]
    a2e8:	ea000062 	b	a478 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==3 && l_rec_Data_ch=='R')
    a2ec:	e59f37ac 	ldr	r3, [pc, #1964]	; aaa0 <g_halGps_getData_i32+0x8ec>
    a2f0:	e5d33000 	ldrb	r3, [r3]
    a2f4:	e3530003 	cmp	r3, #3
    a2f8:	1a00000c 	bne	a330 <g_halGps_getData_i32+0x17c>
    a2fc:	e59f37ac 	ldr	r3, [pc, #1964]	; aab0 <g_halGps_getData_i32+0x8fc>
    a300:	e5d33000 	ldrb	r3, [r3]
    a304:	e3530052 	cmp	r3, #82	; 0x52
    a308:	1a000008 	bne	a330 <g_halGps_getData_i32+0x17c>
		{l_header_position_ch=24;l_succeded_i32++;}
    a30c:	e59f378c 	ldr	r3, [pc, #1932]	; aaa0 <g_halGps_getData_i32+0x8ec>
    a310:	e3a02018 	mov	r2, #24
    a314:	e5c32000 	strb	r2, [r3]
    a318:	e59f3794 	ldr	r3, [pc, #1940]	; aab4 <g_halGps_getData_i32+0x900>
    a31c:	e5933000 	ldr	r3, [r3]
    a320:	e2832001 	add	r2, r3, #1
    a324:	e59f3788 	ldr	r3, [pc, #1928]	; aab4 <g_halGps_getData_i32+0x900>
    a328:	e5832000 	str	r2, [r3]
    a32c:	ea000051 	b	a478 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==14 && l_rec_Data_ch=='G')
    a330:	e59f3768 	ldr	r3, [pc, #1896]	; aaa0 <g_halGps_getData_i32+0x8ec>
    a334:	e5d33000 	ldrb	r3, [r3]
    a338:	e353000e 	cmp	r3, #14
    a33c:	1a00000c 	bne	a374 <g_halGps_getData_i32+0x1c0>
    a340:	e59f3768 	ldr	r3, [pc, #1896]	; aab0 <g_halGps_getData_i32+0x8fc>
    a344:	e5d33000 	ldrb	r3, [r3]
    a348:	e3530047 	cmp	r3, #71	; 0x47
    a34c:	1a000008 	bne	a374 <g_halGps_getData_i32+0x1c0>
		{l_header_position_ch=15;l_succeded_i32++;}
    a350:	e59f3748 	ldr	r3, [pc, #1864]	; aaa0 <g_halGps_getData_i32+0x8ec>
    a354:	e3a0200f 	mov	r2, #15
    a358:	e5c32000 	strb	r2, [r3]
    a35c:	e59f3750 	ldr	r3, [pc, #1872]	; aab4 <g_halGps_getData_i32+0x900>
    a360:	e5933000 	ldr	r3, [r3]
    a364:	e2832001 	add	r2, r3, #1
    a368:	e59f3744 	ldr	r3, [pc, #1860]	; aab4 <g_halGps_getData_i32+0x900>
    a36c:	e5832000 	str	r2, [r3]
    a370:	ea000040 	b	a478 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==24 && l_rec_Data_ch=='M')
    a374:	e59f3724 	ldr	r3, [pc, #1828]	; aaa0 <g_halGps_getData_i32+0x8ec>
    a378:	e5d33000 	ldrb	r3, [r3]
    a37c:	e3530018 	cmp	r3, #24
    a380:	1a00000c 	bne	a3b8 <g_halGps_getData_i32+0x204>
    a384:	e59f3724 	ldr	r3, [pc, #1828]	; aab0 <g_halGps_getData_i32+0x8fc>
    a388:	e5d33000 	ldrb	r3, [r3]
    a38c:	e353004d 	cmp	r3, #77	; 0x4d
    a390:	1a000008 	bne	a3b8 <g_halGps_getData_i32+0x204>
		{l_header_position_ch=25;l_succeded_i32++;}
    a394:	e59f3704 	ldr	r3, [pc, #1796]	; aaa0 <g_halGps_getData_i32+0x8ec>
    a398:	e3a02019 	mov	r2, #25
    a39c:	e5c32000 	strb	r2, [r3]
    a3a0:	e59f370c 	ldr	r3, [pc, #1804]	; aab4 <g_halGps_getData_i32+0x900>
    a3a4:	e5933000 	ldr	r3, [r3]
    a3a8:	e2832001 	add	r2, r3, #1
    a3ac:	e59f3700 	ldr	r3, [pc, #1792]	; aab4 <g_halGps_getData_i32+0x900>
    a3b0:	e5832000 	str	r2, [r3]
    a3b4:	ea00002f 	b	a478 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==15 && l_rec_Data_ch=='A')
    a3b8:	e59f36e0 	ldr	r3, [pc, #1760]	; aaa0 <g_halGps_getData_i32+0x8ec>
    a3bc:	e5d33000 	ldrb	r3, [r3]
    a3c0:	e353000f 	cmp	r3, #15
    a3c4:	1a000013 	bne	a418 <g_halGps_getData_i32+0x264>
    a3c8:	e59f36e0 	ldr	r3, [pc, #1760]	; aab0 <g_halGps_getData_i32+0x8fc>
    a3cc:	e5d33000 	ldrb	r3, [r3]
    a3d0:	e3530041 	cmp	r3, #65	; 0x41
    a3d4:	1a00000f 	bne	a418 <g_halGps_getData_i32+0x264>
		{	l_message_ch=1;l_resetMessage1Values_vd();l_data_position_ch=0;l_message_position_ch=1; l_succeded_i32++;}
    a3d8:	e59f36a8 	ldr	r3, [pc, #1704]	; aa88 <g_halGps_getData_i32+0x8d4>
    a3dc:	e3a02001 	mov	r2, #1
    a3e0:	e5c32000 	strb	r2, [r3]
    a3e4:	ebffff0c 	bl	a01c <l_resetMessage1Values_vd>
    a3e8:	e59f36b4 	ldr	r3, [pc, #1716]	; aaa4 <g_halGps_getData_i32+0x8f0>
    a3ec:	e3a02000 	mov	r2, #0
    a3f0:	e5c32000 	strb	r2, [r3]
    a3f4:	e59f36a0 	ldr	r3, [pc, #1696]	; aa9c <g_halGps_getData_i32+0x8e8>
    a3f8:	e3a02001 	mov	r2, #1
    a3fc:	e5c32000 	strb	r2, [r3]
    a400:	e59f36ac 	ldr	r3, [pc, #1708]	; aab4 <g_halGps_getData_i32+0x900>
    a404:	e5933000 	ldr	r3, [r3]
    a408:	e2832001 	add	r2, r3, #1
    a40c:	e59f36a0 	ldr	r3, [pc, #1696]	; aab4 <g_halGps_getData_i32+0x900>
    a410:	e5832000 	str	r2, [r3]
    a414:	ea000017 	b	a478 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==25 && l_rec_Data_ch=='C')
    a418:	e59f3680 	ldr	r3, [pc, #1664]	; aaa0 <g_halGps_getData_i32+0x8ec>
    a41c:	e5d33000 	ldrb	r3, [r3]
    a420:	e3530019 	cmp	r3, #25
    a424:	1a000391 	bne	b270 <g_halGps_getData_i32+0x10bc>
    a428:	e59f3680 	ldr	r3, [pc, #1664]	; aab0 <g_halGps_getData_i32+0x8fc>
    a42c:	e5d33000 	ldrb	r3, [r3]
    a430:	e3530043 	cmp	r3, #67	; 0x43
    a434:	1a00038d 	bne	b270 <g_halGps_getData_i32+0x10bc>
		{	l_message_ch=2;l_resetMessage2Values_vd();l_data_position_ch=0; l_message_position_ch=1; l_succeded_i32++;}
    a438:	e59f3648 	ldr	r3, [pc, #1608]	; aa88 <g_halGps_getData_i32+0x8d4>
    a43c:	e3a02002 	mov	r2, #2
    a440:	e5c32000 	strb	r2, [r3]
    a444:	ebffff23 	bl	a0d8 <l_resetMessage2Values_vd>
    a448:	e59f3654 	ldr	r3, [pc, #1620]	; aaa4 <g_halGps_getData_i32+0x8f0>
    a44c:	e3a02000 	mov	r2, #0
    a450:	e5c32000 	strb	r2, [r3]
    a454:	e59f3640 	ldr	r3, [pc, #1600]	; aa9c <g_halGps_getData_i32+0x8e8>
    a458:	e3a02001 	mov	r2, #1
    a45c:	e5c32000 	strb	r2, [r3]
    a460:	e59f364c 	ldr	r3, [pc, #1612]	; aab4 <g_halGps_getData_i32+0x900>
    a464:	e5933000 	ldr	r3, [r3]
    a468:	e2832001 	add	r2, r3, #1
    a46c:	e59f3640 	ldr	r3, [pc, #1600]	; aab4 <g_halGps_getData_i32+0x900>
    a470:	e5832000 	str	r2, [r3]
    a474:	ea00037d 	b	b270 <g_halGps_getData_i32+0x10bc>
    a478:	ea00037c 	b	b270 <g_halGps_getData_i32+0x10bc>
	}
	else
	{
		switch (l_message_ch)//check data within the two important messages
    a47c:	e59f3604 	ldr	r3, [pc, #1540]	; aa88 <g_halGps_getData_i32+0x8d4>
    a480:	e5d33000 	ldrb	r3, [r3]
    a484:	e3530001 	cmp	r3, #1
    a488:	0a000002 	beq	a498 <g_halGps_getData_i32+0x2e4>
    a48c:	e3530002 	cmp	r3, #2
    a490:	0a0001ab 	beq	ab44 <g_halGps_getData_i32+0x990>
    a494:	ea000375 	b	b270 <g_halGps_getData_i32+0x10bc>
		{
		case 1://$GPGGA ,205003.000 ,4841.9261 ,N ,00918.7276 ,E ,1 ,06 ,1.12 ,283.5 ,M ,48.0 ,M , ,*6D        38
			switch (l_rec_Data_ch)
    a498:	e59f3610 	ldr	r3, [pc, #1552]	; aab0 <g_halGps_getData_i32+0x8fc>
    a49c:	e5d33000 	ldrb	r3, [r3]
    a4a0:	e353000a 	cmp	r3, #10
    a4a4:	0a00000e 	beq	a4e4 <g_halGps_getData_i32+0x330>
    a4a8:	e353002c 	cmp	r3, #44	; 0x2c
    a4ac:	1a000018 	bne	a514 <g_halGps_getData_i32+0x360>
			{
			case ',':
				l_data_position_ch++;
    a4b0:	e59f35ec 	ldr	r3, [pc, #1516]	; aaa4 <g_halGps_getData_i32+0x8f0>
    a4b4:	e5d33000 	ldrb	r3, [r3]
    a4b8:	e2833001 	add	r3, r3, #1
    a4bc:	e6ef2073 	uxtb	r2, r3
    a4c0:	e59f35dc 	ldr	r3, [pc, #1500]	; aaa4 <g_halGps_getData_i32+0x8f0>
    a4c4:	e5c32000 	strb	r2, [r3]
				l_fieldpointer_i32=0;
    a4c8:	e59f35e8 	ldr	r3, [pc, #1512]	; aab8 <g_halGps_getData_i32+0x904>
    a4cc:	e3a02000 	mov	r2, #0
    a4d0:	e5832000 	str	r2, [r3]
				l_decimal_place_factor_i32=10;
    a4d4:	e59f35bc 	ldr	r3, [pc, #1468]	; aa98 <g_halGps_getData_i32+0x8e4>
    a4d8:	e3a0200a 	mov	r2, #10
    a4dc:	e5832000 	str	r2, [r3]
				break;
    a4e0:	ea000196 	b	ab40 <g_halGps_getData_i32+0x98c>
			case 10://LF found
				l_succeded_i32=l_succeded_i32+100;	//short comment
    a4e4:	e59f35c8 	ldr	r3, [pc, #1480]	; aab4 <g_halGps_getData_i32+0x900>
    a4e8:	e5933000 	ldr	r3, [r3]
    a4ec:	e2832064 	add	r2, r3, #100	; 0x64
    a4f0:	e59f35bc 	ldr	r3, [pc, #1468]	; aab4 <g_halGps_getData_i32+0x900>
    a4f4:	e5832000 	str	r2, [r3]
				l_message_position_ch=0;
    a4f8:	e59f359c 	ldr	r3, [pc, #1436]	; aa9c <g_halGps_getData_i32+0x8e8>
    a4fc:	e3a02000 	mov	r2, #0
    a500:	e5c32000 	strb	r2, [r3]
				l_header_position_ch=0;
    a504:	e59f3594 	ldr	r3, [pc, #1428]	; aaa0 <g_halGps_getData_i32+0x8ec>
    a508:	e3a02000 	mov	r2, #0
    a50c:	e5c32000 	strb	r2, [r3]
				break;
    a510:	ea00018a 	b	ab40 <g_halGps_getData_i32+0x98c>
			default:
				switch (l_data_position_ch)
    a514:	e59f3588 	ldr	r3, [pc, #1416]	; aaa4 <g_halGps_getData_i32+0x8f0>
    a518:	e5d33000 	ldrb	r3, [r3]
    a51c:	e2433001 	sub	r3, r3, #1
    a520:	e353000a 	cmp	r3, #10
    a524:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    a528:	ea000183 	b	ab3c <g_halGps_getData_i32+0x988>
    a52c:	0000a558 	.word	0x0000a558
    a530:	0000a5c8 	.word	0x0000a5c8
    a534:	0000a704 	.word	0x0000a704
    a538:	0000a750 	.word	0x0000a750
    a53c:	0000a88c 	.word	0x0000a88c
    a540:	0000ab3c 	.word	0x0000ab3c
    a544:	0000ab3c 	.word	0x0000ab3c
    a548:	0000ab3c 	.word	0x0000ab3c
    a54c:	0000a8d8 	.word	0x0000a8d8
    a550:	0000ab3c 	.word	0x0000ab3c
    a554:	0000a9e4 	.word	0x0000a9e4
				{
				case 1://Time
					if(l_fieldpointer_i32<6)
    a558:	e59f3558 	ldr	r3, [pc, #1368]	; aab8 <g_halGps_getData_i32+0x904>
    a55c:	e5933000 	ldr	r3, [r3]
    a560:	e3530005 	cmp	r3, #5
    a564:	ca000011 	bgt	a5b0 <g_halGps_getData_i32+0x3fc>
					{
						l_time_ui32=l_time_ui32*10+(l_rec_Data_ch-48);
    a568:	e59f3538 	ldr	r3, [pc, #1336]	; aaa8 <g_halGps_getData_i32+0x8f4>
    a56c:	e5932000 	ldr	r2, [r3]
    a570:	e1a03002 	mov	r3, r2
    a574:	e1a03103 	lsl	r3, r3, #2
    a578:	e0833002 	add	r3, r3, r2
    a57c:	e1a03083 	lsl	r3, r3, #1
    a580:	e1a02003 	mov	r2, r3
    a584:	e59f3524 	ldr	r3, [pc, #1316]	; aab0 <g_halGps_getData_i32+0x8fc>
    a588:	e5d33000 	ldrb	r3, [r3]
    a58c:	e0823003 	add	r3, r2, r3
    a590:	e2432030 	sub	r2, r3, #48	; 0x30
    a594:	e59f350c 	ldr	r3, [pc, #1292]	; aaa8 <g_halGps_getData_i32+0x8f4>
    a598:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    a59c:	e59f3510 	ldr	r3, [pc, #1296]	; aab4 <g_halGps_getData_i32+0x900>
    a5a0:	e5933000 	ldr	r3, [r3]
    a5a4:	e2832001 	add	r2, r3, #1
    a5a8:	e59f3504 	ldr	r3, [pc, #1284]	; aab4 <g_halGps_getData_i32+0x900>
    a5ac:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    a5b0:	e59f3500 	ldr	r3, [pc, #1280]	; aab8 <g_halGps_getData_i32+0x904>
    a5b4:	e5933000 	ldr	r3, [r3]
    a5b8:	e2832001 	add	r2, r3, #1
    a5bc:	e59f34f4 	ldr	r3, [pc, #1268]	; aab8 <g_halGps_getData_i32+0x904>
    a5c0:	e5832000 	str	r2, [r3]
					break;
    a5c4:	ea00015c 	b	ab3c <g_halGps_getData_i32+0x988>
				case 2://Latitude
					if(l_fieldpointer_i32<2)
    a5c8:	e59f34e8 	ldr	r3, [pc, #1256]	; aab8 <g_halGps_getData_i32+0x904>
    a5cc:	e5933000 	ldr	r3, [r3]
    a5d0:	e3530001 	cmp	r3, #1
    a5d4:	ca000012 	bgt	a624 <g_halGps_getData_i32+0x470>
					{
						l_gps_latitude_st.l_degree_ui32=l_gps_latitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    a5d8:	e59f34dc 	ldr	r3, [pc, #1244]	; aabc <g_halGps_getData_i32+0x908>
    a5dc:	e5932000 	ldr	r2, [r3]
    a5e0:	e1a03002 	mov	r3, r2
    a5e4:	e1a03103 	lsl	r3, r3, #2
    a5e8:	e0833002 	add	r3, r3, r2
    a5ec:	e1a03083 	lsl	r3, r3, #1
    a5f0:	e1a02003 	mov	r2, r3
    a5f4:	e59f34b4 	ldr	r3, [pc, #1204]	; aab0 <g_halGps_getData_i32+0x8fc>
    a5f8:	e5d33000 	ldrb	r3, [r3]
    a5fc:	e0823003 	add	r3, r2, r3
    a600:	e2432030 	sub	r2, r3, #48	; 0x30
    a604:	e59f34b0 	ldr	r3, [pc, #1200]	; aabc <g_halGps_getData_i32+0x908>
    a608:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    a60c:	e59f34a0 	ldr	r3, [pc, #1184]	; aab4 <g_halGps_getData_i32+0x900>
    a610:	e5933000 	ldr	r3, [r3]
    a614:	e2832001 	add	r2, r3, #1
    a618:	e59f3494 	ldr	r3, [pc, #1172]	; aab4 <g_halGps_getData_i32+0x900>
    a61c:	e5832000 	str	r2, [r3]
    a620:	ea000031 	b	a6ec <g_halGps_getData_i32+0x538>
					}
					else if(l_fieldpointer_i32<4)
    a624:	e59f348c 	ldr	r3, [pc, #1164]	; aab8 <g_halGps_getData_i32+0x904>
    a628:	e5933000 	ldr	r3, [r3]
    a62c:	e3530003 	cmp	r3, #3
    a630:	ca000012 	bgt	a680 <g_halGps_getData_i32+0x4cc>
					{
						l_gps_latitude_st.l_minutes_ui32=l_gps_latitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    a634:	e59f3480 	ldr	r3, [pc, #1152]	; aabc <g_halGps_getData_i32+0x908>
    a638:	e5932004 	ldr	r2, [r3, #4]
    a63c:	e1a03002 	mov	r3, r2
    a640:	e1a03103 	lsl	r3, r3, #2
    a644:	e0833002 	add	r3, r3, r2
    a648:	e1a03083 	lsl	r3, r3, #1
    a64c:	e1a02003 	mov	r2, r3
    a650:	e59f3458 	ldr	r3, [pc, #1112]	; aab0 <g_halGps_getData_i32+0x8fc>
    a654:	e5d33000 	ldrb	r3, [r3]
    a658:	e0823003 	add	r3, r2, r3
    a65c:	e2432030 	sub	r2, r3, #48	; 0x30
    a660:	e59f3454 	ldr	r3, [pc, #1108]	; aabc <g_halGps_getData_i32+0x908>
    a664:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    a668:	e59f3444 	ldr	r3, [pc, #1092]	; aab4 <g_halGps_getData_i32+0x900>
    a66c:	e5933000 	ldr	r3, [r3]
    a670:	e2832001 	add	r2, r3, #1
    a674:	e59f3438 	ldr	r3, [pc, #1080]	; aab4 <g_halGps_getData_i32+0x900>
    a678:	e5832000 	str	r2, [r3]
    a67c:	ea00001a 	b	a6ec <g_halGps_getData_i32+0x538>
					}
					else if(l_fieldpointer_i32>=5 && l_fieldpointer_i32<9)
    a680:	e59f3430 	ldr	r3, [pc, #1072]	; aab8 <g_halGps_getData_i32+0x904>
    a684:	e5933000 	ldr	r3, [r3]
    a688:	e3530004 	cmp	r3, #4
    a68c:	da000016 	ble	a6ec <g_halGps_getData_i32+0x538>
    a690:	e59f3420 	ldr	r3, [pc, #1056]	; aab8 <g_halGps_getData_i32+0x904>
    a694:	e5933000 	ldr	r3, [r3]
    a698:	e3530008 	cmp	r3, #8
    a69c:	ca000012 	bgt	a6ec <g_halGps_getData_i32+0x538>
					{
						l_gps_latitude_st.l_seconds_f64=l_gps_latitude_st.l_seconds_f64*10+(l_rec_Data_ch-48)*0.006;
    a6a0:	e59f3414 	ldr	r3, [pc, #1044]	; aabc <g_halGps_getData_i32+0x908>
    a6a4:	ed936b02 	vldr	d6, [r3, #8]
    a6a8:	ed9f7bf2 	vldr	d7, [pc, #968]	; aa78 <g_halGps_getData_i32+0x8c4>
    a6ac:	ee266b07 	vmul.f64	d6, d6, d7
    a6b0:	e59f33f8 	ldr	r3, [pc, #1016]	; aab0 <g_halGps_getData_i32+0x8fc>
    a6b4:	e5d33000 	ldrb	r3, [r3]
    a6b8:	e2433030 	sub	r3, r3, #48	; 0x30
    a6bc:	ee073a90 	vmov	s15, r3
    a6c0:	eeb85be7 	vcvt.f64.s32	d5, s15
    a6c4:	ed9f7bed 	vldr	d7, [pc, #948]	; aa80 <g_halGps_getData_i32+0x8cc>
    a6c8:	ee257b07 	vmul.f64	d7, d5, d7
    a6cc:	ee367b07 	vadd.f64	d7, d6, d7
    a6d0:	e59f33e4 	ldr	r3, [pc, #996]	; aabc <g_halGps_getData_i32+0x908>
    a6d4:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    a6d8:	e59f33d4 	ldr	r3, [pc, #980]	; aab4 <g_halGps_getData_i32+0x900>
    a6dc:	e5933000 	ldr	r3, [r3]
    a6e0:	e2832001 	add	r2, r3, #1
    a6e4:	e59f33c8 	ldr	r3, [pc, #968]	; aab4 <g_halGps_getData_i32+0x900>
    a6e8:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    a6ec:	e59f33c4 	ldr	r3, [pc, #964]	; aab8 <g_halGps_getData_i32+0x904>
    a6f0:	e5933000 	ldr	r3, [r3]
    a6f4:	e2832001 	add	r2, r3, #1
    a6f8:	e59f33b8 	ldr	r3, [pc, #952]	; aab8 <g_halGps_getData_i32+0x904>
    a6fc:	e5832000 	str	r2, [r3]
					break;
    a700:	ea00010d 	b	ab3c <g_halGps_getData_i32+0x988>
				case 3://cardinal direction
					if(l_fieldpointer_i32<1)
    a704:	e59f33ac 	ldr	r3, [pc, #940]	; aab8 <g_halGps_getData_i32+0x904>
    a708:	e5933000 	ldr	r3, [r3]
    a70c:	e3530000 	cmp	r3, #0
    a710:	ca000008 	bgt	a738 <g_halGps_getData_i32+0x584>
					{
						l_gps_latitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    a714:	e59f3394 	ldr	r3, [pc, #916]	; aab0 <g_halGps_getData_i32+0x8fc>
    a718:	e5d32000 	ldrb	r2, [r3]
    a71c:	e59f3398 	ldr	r3, [pc, #920]	; aabc <g_halGps_getData_i32+0x908>
    a720:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    a724:	e59f3388 	ldr	r3, [pc, #904]	; aab4 <g_halGps_getData_i32+0x900>
    a728:	e5933000 	ldr	r3, [r3]
    a72c:	e2832001 	add	r2, r3, #1
    a730:	e59f337c 	ldr	r3, [pc, #892]	; aab4 <g_halGps_getData_i32+0x900>
    a734:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    a738:	e59f3378 	ldr	r3, [pc, #888]	; aab8 <g_halGps_getData_i32+0x904>
    a73c:	e5933000 	ldr	r3, [r3]
    a740:	e2832001 	add	r2, r3, #1
    a744:	e59f336c 	ldr	r3, [pc, #876]	; aab8 <g_halGps_getData_i32+0x904>
    a748:	e5832000 	str	r2, [r3]
					break;
    a74c:	ea0000fa 	b	ab3c <g_halGps_getData_i32+0x988>
				case 4://Longitude
					if(l_fieldpointer_i32<3)
    a750:	e59f3360 	ldr	r3, [pc, #864]	; aab8 <g_halGps_getData_i32+0x904>
    a754:	e5933000 	ldr	r3, [r3]
    a758:	e3530002 	cmp	r3, #2
    a75c:	ca000012 	bgt	a7ac <g_halGps_getData_i32+0x5f8>
					{
						l_gps_longitude_st.l_degree_ui32=l_gps_longitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    a760:	e59f3324 	ldr	r3, [pc, #804]	; aa8c <g_halGps_getData_i32+0x8d8>
    a764:	e5932000 	ldr	r2, [r3]
    a768:	e1a03002 	mov	r3, r2
    a76c:	e1a03103 	lsl	r3, r3, #2
    a770:	e0833002 	add	r3, r3, r2
    a774:	e1a03083 	lsl	r3, r3, #1
    a778:	e1a02003 	mov	r2, r3
    a77c:	e59f332c 	ldr	r3, [pc, #812]	; aab0 <g_halGps_getData_i32+0x8fc>
    a780:	e5d33000 	ldrb	r3, [r3]
    a784:	e0823003 	add	r3, r2, r3
    a788:	e2432030 	sub	r2, r3, #48	; 0x30
    a78c:	e59f32f8 	ldr	r3, [pc, #760]	; aa8c <g_halGps_getData_i32+0x8d8>
    a790:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    a794:	e59f3318 	ldr	r3, [pc, #792]	; aab4 <g_halGps_getData_i32+0x900>
    a798:	e5933000 	ldr	r3, [r3]
    a79c:	e2832001 	add	r2, r3, #1
    a7a0:	e59f330c 	ldr	r3, [pc, #780]	; aab4 <g_halGps_getData_i32+0x900>
    a7a4:	e5832000 	str	r2, [r3]
    a7a8:	ea000031 	b	a874 <g_halGps_getData_i32+0x6c0>
					}
					else if(l_fieldpointer_i32<5)
    a7ac:	e59f3304 	ldr	r3, [pc, #772]	; aab8 <g_halGps_getData_i32+0x904>
    a7b0:	e5933000 	ldr	r3, [r3]
    a7b4:	e3530004 	cmp	r3, #4
    a7b8:	ca000012 	bgt	a808 <g_halGps_getData_i32+0x654>
					{
						l_gps_longitude_st.l_minutes_ui32=l_gps_longitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    a7bc:	e59f32c8 	ldr	r3, [pc, #712]	; aa8c <g_halGps_getData_i32+0x8d8>
    a7c0:	e5932004 	ldr	r2, [r3, #4]
    a7c4:	e1a03002 	mov	r3, r2
    a7c8:	e1a03103 	lsl	r3, r3, #2
    a7cc:	e0833002 	add	r3, r3, r2
    a7d0:	e1a03083 	lsl	r3, r3, #1
    a7d4:	e1a02003 	mov	r2, r3
    a7d8:	e59f32d0 	ldr	r3, [pc, #720]	; aab0 <g_halGps_getData_i32+0x8fc>
    a7dc:	e5d33000 	ldrb	r3, [r3]
    a7e0:	e0823003 	add	r3, r2, r3
    a7e4:	e2432030 	sub	r2, r3, #48	; 0x30
    a7e8:	e59f329c 	ldr	r3, [pc, #668]	; aa8c <g_halGps_getData_i32+0x8d8>
    a7ec:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    a7f0:	e59f32bc 	ldr	r3, [pc, #700]	; aab4 <g_halGps_getData_i32+0x900>
    a7f4:	e5933000 	ldr	r3, [r3]
    a7f8:	e2832001 	add	r2, r3, #1
    a7fc:	e59f32b0 	ldr	r3, [pc, #688]	; aab4 <g_halGps_getData_i32+0x900>
    a800:	e5832000 	str	r2, [r3]
    a804:	ea00001a 	b	a874 <g_halGps_getData_i32+0x6c0>
					}
					else if(l_fieldpointer_i32>=6 && l_fieldpointer_i32<10)
    a808:	e59f32a8 	ldr	r3, [pc, #680]	; aab8 <g_halGps_getData_i32+0x904>
    a80c:	e5933000 	ldr	r3, [r3]
    a810:	e3530005 	cmp	r3, #5
    a814:	da000016 	ble	a874 <g_halGps_getData_i32+0x6c0>
    a818:	e59f3298 	ldr	r3, [pc, #664]	; aab8 <g_halGps_getData_i32+0x904>
    a81c:	e5933000 	ldr	r3, [r3]
    a820:	e3530009 	cmp	r3, #9
    a824:	ca000012 	bgt	a874 <g_halGps_getData_i32+0x6c0>
					{
						l_gps_longitude_st.l_seconds_f64=l_gps_longitude_st.l_seconds_f64*10+(l_rec_Data_ch-48)*0.006;
    a828:	e59f325c 	ldr	r3, [pc, #604]	; aa8c <g_halGps_getData_i32+0x8d8>
    a82c:	ed936b02 	vldr	d6, [r3, #8]
    a830:	ed9f7b90 	vldr	d7, [pc, #576]	; aa78 <g_halGps_getData_i32+0x8c4>
    a834:	ee266b07 	vmul.f64	d6, d6, d7
    a838:	e59f3270 	ldr	r3, [pc, #624]	; aab0 <g_halGps_getData_i32+0x8fc>
    a83c:	e5d33000 	ldrb	r3, [r3]
    a840:	e2433030 	sub	r3, r3, #48	; 0x30
    a844:	ee073a90 	vmov	s15, r3
    a848:	eeb85be7 	vcvt.f64.s32	d5, s15
    a84c:	ed9f7b8b 	vldr	d7, [pc, #556]	; aa80 <g_halGps_getData_i32+0x8cc>
    a850:	ee257b07 	vmul.f64	d7, d5, d7
    a854:	ee367b07 	vadd.f64	d7, d6, d7
    a858:	e59f322c 	ldr	r3, [pc, #556]	; aa8c <g_halGps_getData_i32+0x8d8>
    a85c:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    a860:	e59f324c 	ldr	r3, [pc, #588]	; aab4 <g_halGps_getData_i32+0x900>
    a864:	e5933000 	ldr	r3, [r3]
    a868:	e2832001 	add	r2, r3, #1
    a86c:	e59f3240 	ldr	r3, [pc, #576]	; aab4 <g_halGps_getData_i32+0x900>
    a870:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    a874:	e59f323c 	ldr	r3, [pc, #572]	; aab8 <g_halGps_getData_i32+0x904>
    a878:	e5933000 	ldr	r3, [r3]
    a87c:	e2832001 	add	r2, r3, #1
    a880:	e59f3230 	ldr	r3, [pc, #560]	; aab8 <g_halGps_getData_i32+0x904>
    a884:	e5832000 	str	r2, [r3]
					break;
    a888:	ea0000ab 	b	ab3c <g_halGps_getData_i32+0x988>
				case 5://cardinal direction
					if(l_fieldpointer_i32<1)
    a88c:	e59f3224 	ldr	r3, [pc, #548]	; aab8 <g_halGps_getData_i32+0x904>
    a890:	e5933000 	ldr	r3, [r3]
    a894:	e3530000 	cmp	r3, #0
    a898:	ca000008 	bgt	a8c0 <g_halGps_getData_i32+0x70c>
					{
						l_gps_longitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    a89c:	e59f320c 	ldr	r3, [pc, #524]	; aab0 <g_halGps_getData_i32+0x8fc>
    a8a0:	e5d32000 	ldrb	r2, [r3]
    a8a4:	e59f31e0 	ldr	r3, [pc, #480]	; aa8c <g_halGps_getData_i32+0x8d8>
    a8a8:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    a8ac:	e59f3200 	ldr	r3, [pc, #512]	; aab4 <g_halGps_getData_i32+0x900>
    a8b0:	e5933000 	ldr	r3, [r3]
    a8b4:	e2832001 	add	r2, r3, #1
    a8b8:	e59f31f4 	ldr	r3, [pc, #500]	; aab4 <g_halGps_getData_i32+0x900>
    a8bc:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    a8c0:	e59f31f0 	ldr	r3, [pc, #496]	; aab8 <g_halGps_getData_i32+0x904>
    a8c4:	e5933000 	ldr	r3, [r3]
    a8c8:	e2832001 	add	r2, r3, #1
    a8cc:	e59f31e4 	ldr	r3, [pc, #484]	; aab8 <g_halGps_getData_i32+0x904>
    a8d0:	e5832000 	str	r2, [r3]
					break;
    a8d4:	ea000098 	b	ab3c <g_halGps_getData_i32+0x988>
				case 9://Height
					if(l_rec_Data_ch!='.' && l_fieldpointer_i32==0)
    a8d8:	e59f31d0 	ldr	r3, [pc, #464]	; aab0 <g_halGps_getData_i32+0x8fc>
    a8dc:	e5d33000 	ldrb	r3, [r3]
    a8e0:	e353002e 	cmp	r3, #46	; 0x2e
    a8e4:	0a000015 	beq	a940 <g_halGps_getData_i32+0x78c>
    a8e8:	e59f31c8 	ldr	r3, [pc, #456]	; aab8 <g_halGps_getData_i32+0x904>
    a8ec:	e5933000 	ldr	r3, [r3]
    a8f0:	e3530000 	cmp	r3, #0
    a8f4:	1a000011 	bne	a940 <g_halGps_getData_i32+0x78c>
					{
						l_height_f64=l_height_f64*10+(double)(l_rec_Data_ch-48);
    a8f8:	e59f3190 	ldr	r3, [pc, #400]	; aa90 <g_halGps_getData_i32+0x8dc>
    a8fc:	ed936b00 	vldr	d6, [r3]
    a900:	ed9f7b5c 	vldr	d7, [pc, #368]	; aa78 <g_halGps_getData_i32+0x8c4>
    a904:	ee266b07 	vmul.f64	d6, d6, d7
    a908:	e59f31a0 	ldr	r3, [pc, #416]	; aab0 <g_halGps_getData_i32+0x8fc>
    a90c:	e5d33000 	ldrb	r3, [r3]
    a910:	e2433030 	sub	r3, r3, #48	; 0x30
    a914:	ee053a90 	vmov	s11, r3
    a918:	eeb87be5 	vcvt.f64.s32	d7, s11
    a91c:	ee367b07 	vadd.f64	d7, d6, d7
    a920:	e59f3168 	ldr	r3, [pc, #360]	; aa90 <g_halGps_getData_i32+0x8dc>
    a924:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    a928:	e59f3184 	ldr	r3, [pc, #388]	; aab4 <g_halGps_getData_i32+0x900>
    a92c:	e5933000 	ldr	r3, [r3]
    a930:	e2832001 	add	r2, r3, #1
    a934:	e59f3178 	ldr	r3, [pc, #376]	; aab4 <g_halGps_getData_i32+0x900>
    a938:	e5832000 	str	r2, [r3]
    a93c:	ea000027 	b	a9e0 <g_halGps_getData_i32+0x82c>

					}
					else if (l_rec_Data_ch=='.')
    a940:	e59f3168 	ldr	r3, [pc, #360]	; aab0 <g_halGps_getData_i32+0x8fc>
    a944:	e5d33000 	ldrb	r3, [r3]
    a948:	e353002e 	cmp	r3, #46	; 0x2e
    a94c:	1a000005 	bne	a968 <g_halGps_getData_i32+0x7b4>
					{
						l_fieldpointer_i32++;
    a950:	e59f3160 	ldr	r3, [pc, #352]	; aab8 <g_halGps_getData_i32+0x904>
    a954:	e5933000 	ldr	r3, [r3]
    a958:	e2832001 	add	r2, r3, #1
    a95c:	e59f3154 	ldr	r3, [pc, #340]	; aab8 <g_halGps_getData_i32+0x904>
    a960:	e5832000 	str	r2, [r3]
    a964:	ea00001d 	b	a9e0 <g_halGps_getData_i32+0x82c>
					}
					else
					{
						l_height_f64=l_height_f64+(double)(l_rec_Data_ch-48)/l_decimal_place_factor_i32;
    a968:	e59f3140 	ldr	r3, [pc, #320]	; aab0 <g_halGps_getData_i32+0x8fc>
    a96c:	e5d33000 	ldrb	r3, [r3]
    a970:	e2433030 	sub	r3, r3, #48	; 0x30
    a974:	ee073a90 	vmov	s15, r3
    a978:	eeb86be7 	vcvt.f64.s32	d6, s15
    a97c:	e59f3114 	ldr	r3, [pc, #276]	; aa98 <g_halGps_getData_i32+0x8e4>
    a980:	e5933000 	ldr	r3, [r3]
    a984:	ee053a90 	vmov	s11, r3
    a988:	eeb87be5 	vcvt.f64.s32	d7, s11
    a98c:	ee866b07 	vdiv.f64	d6, d6, d7
    a990:	e59f30f8 	ldr	r3, [pc, #248]	; aa90 <g_halGps_getData_i32+0x8dc>
    a994:	ed937b00 	vldr	d7, [r3]
    a998:	ee367b07 	vadd.f64	d7, d6, d7
    a99c:	e59f30ec 	ldr	r3, [pc, #236]	; aa90 <g_halGps_getData_i32+0x8dc>
    a9a0:	ed837b00 	vstr	d7, [r3]
						l_decimal_place_factor_i32=l_decimal_place_factor_i32*10;
    a9a4:	e59f30ec 	ldr	r3, [pc, #236]	; aa98 <g_halGps_getData_i32+0x8e4>
    a9a8:	e5932000 	ldr	r2, [r3]
    a9ac:	e1a03002 	mov	r3, r2
    a9b0:	e1a03103 	lsl	r3, r3, #2
    a9b4:	e0833002 	add	r3, r3, r2
    a9b8:	e1a03083 	lsl	r3, r3, #1
    a9bc:	e1a02003 	mov	r2, r3
    a9c0:	e59f30d0 	ldr	r3, [pc, #208]	; aa98 <g_halGps_getData_i32+0x8e4>
    a9c4:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    a9c8:	e59f30e4 	ldr	r3, [pc, #228]	; aab4 <g_halGps_getData_i32+0x900>
    a9cc:	e5933000 	ldr	r3, [r3]
    a9d0:	e2832001 	add	r2, r3, #1
    a9d4:	e59f30d8 	ldr	r3, [pc, #216]	; aab4 <g_halGps_getData_i32+0x900>
    a9d8:	e5832000 	str	r2, [r3]
					}
					break;
    a9dc:	ea000056 	b	ab3c <g_halGps_getData_i32+0x988>
    a9e0:	ea000055 	b	ab3c <g_halGps_getData_i32+0x988>
				case 11://Geoid
					if(l_rec_Data_ch!='.' && l_fieldpointer_i32==0)
    a9e4:	e59f30c4 	ldr	r3, [pc, #196]	; aab0 <g_halGps_getData_i32+0x8fc>
    a9e8:	e5d33000 	ldrb	r3, [r3]
    a9ec:	e353002e 	cmp	r3, #46	; 0x2e
    a9f0:	0a000015 	beq	aa4c <g_halGps_getData_i32+0x898>
    a9f4:	e59f30bc 	ldr	r3, [pc, #188]	; aab8 <g_halGps_getData_i32+0x904>
    a9f8:	e5933000 	ldr	r3, [r3]
    a9fc:	e3530000 	cmp	r3, #0
    aa00:	1a000011 	bne	aa4c <g_halGps_getData_i32+0x898>
					{
						l_geoid_f64=l_geoid_f64*10+(double)(l_rec_Data_ch-48);
    aa04:	e59f3088 	ldr	r3, [pc, #136]	; aa94 <g_halGps_getData_i32+0x8e0>
    aa08:	ed936b00 	vldr	d6, [r3]
    aa0c:	ed9f7b19 	vldr	d7, [pc, #100]	; aa78 <g_halGps_getData_i32+0x8c4>
    aa10:	ee266b07 	vmul.f64	d6, d6, d7
    aa14:	e59f3094 	ldr	r3, [pc, #148]	; aab0 <g_halGps_getData_i32+0x8fc>
    aa18:	e5d33000 	ldrb	r3, [r3]
    aa1c:	e2433030 	sub	r3, r3, #48	; 0x30
    aa20:	ee053a90 	vmov	s11, r3
    aa24:	eeb87be5 	vcvt.f64.s32	d7, s11
    aa28:	ee367b07 	vadd.f64	d7, d6, d7
    aa2c:	e59f3060 	ldr	r3, [pc, #96]	; aa94 <g_halGps_getData_i32+0x8e0>
    aa30:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    aa34:	e59f3078 	ldr	r3, [pc, #120]	; aab4 <g_halGps_getData_i32+0x900>
    aa38:	e5933000 	ldr	r3, [r3]
    aa3c:	e2832001 	add	r2, r3, #1
    aa40:	e59f306c 	ldr	r3, [pc, #108]	; aab4 <g_halGps_getData_i32+0x900>
    aa44:	e5832000 	str	r2, [r3]
    aa48:	ea00003a 	b	ab38 <g_halGps_getData_i32+0x984>

					}
					else if (l_rec_Data_ch=='.')
    aa4c:	e59f305c 	ldr	r3, [pc, #92]	; aab0 <g_halGps_getData_i32+0x8fc>
    aa50:	e5d33000 	ldrb	r3, [r3]
    aa54:	e353002e 	cmp	r3, #46	; 0x2e
    aa58:	1a000018 	bne	aac0 <g_halGps_getData_i32+0x90c>
					{
						l_fieldpointer_i32++;
    aa5c:	e59f3054 	ldr	r3, [pc, #84]	; aab8 <g_halGps_getData_i32+0x904>
    aa60:	e5933000 	ldr	r3, [r3]
    aa64:	e2832001 	add	r2, r3, #1
    aa68:	e59f3048 	ldr	r3, [pc, #72]	; aab8 <g_halGps_getData_i32+0x904>
    aa6c:	e5832000 	str	r2, [r3]
    aa70:	ea000030 	b	ab38 <g_halGps_getData_i32+0x984>
    aa74:	e1a00000 	nop			; (mov r0, r0)
    aa78:	00000000 	.word	0x00000000
    aa7c:	40240000 	.word	0x40240000
    aa80:	bc6a7efa 	.word	0xbc6a7efa
    aa84:	3f789374 	.word	0x3f789374
    aa88:	000188c9 	.word	0x000188c9
    aa8c:	00018868 	.word	0x00018868
    aa90:	000188b8 	.word	0x000188b8
    aa94:	000188c0 	.word	0x000188c0
    aa98:	0001841c 	.word	0x0001841c
    aa9c:	000188cb 	.word	0x000188cb
    aaa0:	000188c8 	.word	0x000188c8
    aaa4:	000188ca 	.word	0x000188ca
    aaa8:	00018898 	.word	0x00018898
    aaac:	0001889c 	.word	0x0001889c
    aab0:	00018418 	.word	0x00018418
    aab4:	000188d0 	.word	0x000188d0
    aab8:	000188cc 	.word	0x000188cc
    aabc:	00018880 	.word	0x00018880
					}
					else
					{
						l_geoid_f64=l_geoid_f64+(double)(l_rec_Data_ch-48)/l_decimal_place_factor_i32;
    aac0:	e51f3018 	ldr	r3, [pc, #-24]	; aab0 <g_halGps_getData_i32+0x8fc>
    aac4:	e5d33000 	ldrb	r3, [r3]
    aac8:	e2433030 	sub	r3, r3, #48	; 0x30
    aacc:	ee073a90 	vmov	s15, r3
    aad0:	eeb86be7 	vcvt.f64.s32	d6, s15
    aad4:	e51f3044 	ldr	r3, [pc, #-68]	; aa98 <g_halGps_getData_i32+0x8e4>
    aad8:	e5933000 	ldr	r3, [r3]
    aadc:	ee053a90 	vmov	s11, r3
    aae0:	eeb87be5 	vcvt.f64.s32	d7, s11
    aae4:	ee866b07 	vdiv.f64	d6, d6, d7
    aae8:	e51f305c 	ldr	r3, [pc, #-92]	; aa94 <g_halGps_getData_i32+0x8e0>
    aaec:	ed937b00 	vldr	d7, [r3]
    aaf0:	ee367b07 	vadd.f64	d7, d6, d7
    aaf4:	e51f3068 	ldr	r3, [pc, #-104]	; aa94 <g_halGps_getData_i32+0x8e0>
    aaf8:	ed837b00 	vstr	d7, [r3]
						l_decimal_place_factor_i32=l_decimal_place_factor_i32*10;
    aafc:	e51f306c 	ldr	r3, [pc, #-108]	; aa98 <g_halGps_getData_i32+0x8e4>
    ab00:	e5932000 	ldr	r2, [r3]
    ab04:	e1a03002 	mov	r3, r2
    ab08:	e1a03103 	lsl	r3, r3, #2
    ab0c:	e0833002 	add	r3, r3, r2
    ab10:	e1a03083 	lsl	r3, r3, #1
    ab14:	e1a02003 	mov	r2, r3
    ab18:	e51f3088 	ldr	r3, [pc, #-136]	; aa98 <g_halGps_getData_i32+0x8e4>
    ab1c:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    ab20:	e51f3074 	ldr	r3, [pc, #-116]	; aab4 <g_halGps_getData_i32+0x900>
    ab24:	e5933000 	ldr	r3, [r3]
    ab28:	e2832001 	add	r2, r3, #1
    ab2c:	e51f3080 	ldr	r3, [pc, #-128]	; aab4 <g_halGps_getData_i32+0x900>
    ab30:	e5832000 	str	r2, [r3]
					}
					break;
    ab34:	eaffffff 	b	ab38 <g_halGps_getData_i32+0x984>
    ab38:	e1a00000 	nop			; (mov r0, r0)
				}
				break;
    ab3c:	e1a00000 	nop			; (mov r0, r0)
			}
			break;
    ab40:	ea0001ca 	b	b270 <g_halGps_getData_i32+0x10bc>


		case 2://$GPRMC ,205003.000 ,A ,4841.9261 ,N ,00918.7276 ,E ,0.33 ,184.26 ,100415 , , , A*63      44- 46
			switch (l_rec_Data_ch)
    ab44:	e51f309c 	ldr	r3, [pc, #-156]	; aab0 <g_halGps_getData_i32+0x8fc>
    ab48:	e5d33000 	ldrb	r3, [r3]
    ab4c:	e353000a 	cmp	r3, #10
    ab50:	0a00000e 	beq	ab90 <g_halGps_getData_i32+0x9dc>
    ab54:	e353002c 	cmp	r3, #44	; 0x2c
    ab58:	1a000018 	bne	abc0 <g_halGps_getData_i32+0xa0c>
			{
			case ',':
				l_data_position_ch++;
    ab5c:	e51f30c0 	ldr	r3, [pc, #-192]	; aaa4 <g_halGps_getData_i32+0x8f0>
    ab60:	e5d33000 	ldrb	r3, [r3]
    ab64:	e2833001 	add	r3, r3, #1
    ab68:	e6ef2073 	uxtb	r2, r3
    ab6c:	e51f30d0 	ldr	r3, [pc, #-208]	; aaa4 <g_halGps_getData_i32+0x8f0>
    ab70:	e5c32000 	strb	r2, [r3]
				l_fieldpointer_i32=0;
    ab74:	e51f30c4 	ldr	r3, [pc, #-196]	; aab8 <g_halGps_getData_i32+0x904>
    ab78:	e3a02000 	mov	r2, #0
    ab7c:	e5832000 	str	r2, [r3]
				l_decimal_place_factor_i32=10;
    ab80:	e51f30f0 	ldr	r3, [pc, #-240]	; aa98 <g_halGps_getData_i32+0x8e4>
    ab84:	e3a0200a 	mov	r2, #10
    ab88:	e5832000 	str	r2, [r3]
				break;
    ab8c:	ea0001b6 	b	b26c <g_halGps_getData_i32+0x10b8>
			case 10://LF found
				l_succeded_i32=l_succeded_i32+200;
    ab90:	e51f30e4 	ldr	r3, [pc, #-228]	; aab4 <g_halGps_getData_i32+0x900>
    ab94:	e5933000 	ldr	r3, [r3]
    ab98:	e28320c8 	add	r2, r3, #200	; 0xc8
    ab9c:	e51f30f0 	ldr	r3, [pc, #-240]	; aab4 <g_halGps_getData_i32+0x900>
    aba0:	e5832000 	str	r2, [r3]
				l_message_position_ch=0;
    aba4:	e51f3110 	ldr	r3, [pc, #-272]	; aa9c <g_halGps_getData_i32+0x8e8>
    aba8:	e3a02000 	mov	r2, #0
    abac:	e5c32000 	strb	r2, [r3]
				l_header_position_ch=0;
    abb0:	e51f3118 	ldr	r3, [pc, #-280]	; aaa0 <g_halGps_getData_i32+0x8ec>
    abb4:	e3a02000 	mov	r2, #0
    abb8:	e5c32000 	strb	r2, [r3]
				break;
    abbc:	ea0001aa 	b	b26c <g_halGps_getData_i32+0x10b8>
			default:
				switch (l_data_position_ch)
    abc0:	e51f3124 	ldr	r3, [pc, #-292]	; aaa4 <g_halGps_getData_i32+0x8f0>
    abc4:	e5d33000 	ldrb	r3, [r3]
    abc8:	e2433001 	sub	r3, r3, #1
    abcc:	e3530008 	cmp	r3, #8
    abd0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    abd4:	ea0001a3 	b	b268 <g_halGps_getData_i32+0x10b4>
    abd8:	0000abfc 	.word	0x0000abfc
    abdc:	0000ac6c 	.word	0x0000ac6c
    abe0:	0000acb8 	.word	0x0000acb8
    abe4:	0000adf4 	.word	0x0000adf4
    abe8:	0000ae40 	.word	0x0000ae40
    abec:	0000af7c 	.word	0x0000af7c
    abf0:	0000afc8 	.word	0x0000afc8
    abf4:	0000b0ac 	.word	0x0000b0ac
    abf8:	0000b1f8 	.word	0x0000b1f8
				{
				case 1://Time
					if(l_fieldpointer_i32<6)
    abfc:	e51f314c 	ldr	r3, [pc, #-332]	; aab8 <g_halGps_getData_i32+0x904>
    ac00:	e5933000 	ldr	r3, [r3]
    ac04:	e3530005 	cmp	r3, #5
    ac08:	ca000011 	bgt	ac54 <g_halGps_getData_i32+0xaa0>
					{
						l_time_ui32=l_time_ui32*10+(l_rec_Data_ch-48);
    ac0c:	e51f316c 	ldr	r3, [pc, #-364]	; aaa8 <g_halGps_getData_i32+0x8f4>
    ac10:	e5932000 	ldr	r2, [r3]
    ac14:	e1a03002 	mov	r3, r2
    ac18:	e1a03103 	lsl	r3, r3, #2
    ac1c:	e0833002 	add	r3, r3, r2
    ac20:	e1a03083 	lsl	r3, r3, #1
    ac24:	e1a02003 	mov	r2, r3
    ac28:	e51f3180 	ldr	r3, [pc, #-384]	; aab0 <g_halGps_getData_i32+0x8fc>
    ac2c:	e5d33000 	ldrb	r3, [r3]
    ac30:	e0823003 	add	r3, r2, r3
    ac34:	e2432030 	sub	r2, r3, #48	; 0x30
    ac38:	e51f3198 	ldr	r3, [pc, #-408]	; aaa8 <g_halGps_getData_i32+0x8f4>
    ac3c:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    ac40:	e51f3194 	ldr	r3, [pc, #-404]	; aab4 <g_halGps_getData_i32+0x900>
    ac44:	e5933000 	ldr	r3, [r3]
    ac48:	e2832001 	add	r2, r3, #1
    ac4c:	e51f31a0 	ldr	r3, [pc, #-416]	; aab4 <g_halGps_getData_i32+0x900>
    ac50:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    ac54:	e51f31a4 	ldr	r3, [pc, #-420]	; aab8 <g_halGps_getData_i32+0x904>
    ac58:	e5933000 	ldr	r3, [r3]
    ac5c:	e2832001 	add	r2, r3, #1
    ac60:	e51f31b0 	ldr	r3, [pc, #-432]	; aab8 <g_halGps_getData_i32+0x904>
    ac64:	e5832000 	str	r2, [r3]
					break;
    ac68:	ea00017e 	b	b268 <g_halGps_getData_i32+0x10b4>
				case 2://Fix
					if(l_fieldpointer_i32<2)
    ac6c:	e51f31bc 	ldr	r3, [pc, #-444]	; aab8 <g_halGps_getData_i32+0x904>
    ac70:	e5933000 	ldr	r3, [r3]
    ac74:	e3530001 	cmp	r3, #1
    ac78:	ca000008 	bgt	aca0 <g_halGps_getData_i32+0xaec>
					{
						l_fix_ch=l_rec_Data_ch;
    ac7c:	e51f31d4 	ldr	r3, [pc, #-468]	; aab0 <g_halGps_getData_i32+0x8fc>
    ac80:	e5d32000 	ldrb	r2, [r3]
    ac84:	e51f31e0 	ldr	r3, [pc, #-480]	; aaac <g_halGps_getData_i32+0x8f8>
    ac88:	e5c32000 	strb	r2, [r3]
						l_succeded_i32++;
    ac8c:	e51f31e0 	ldr	r3, [pc, #-480]	; aab4 <g_halGps_getData_i32+0x900>
    ac90:	e5933000 	ldr	r3, [r3]
    ac94:	e2832001 	add	r2, r3, #1
    ac98:	e51f31ec 	ldr	r3, [pc, #-492]	; aab4 <g_halGps_getData_i32+0x900>
    ac9c:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    aca0:	e51f31f0 	ldr	r3, [pc, #-496]	; aab8 <g_halGps_getData_i32+0x904>
    aca4:	e5933000 	ldr	r3, [r3]
    aca8:	e2832001 	add	r2, r3, #1
    acac:	e51f31fc 	ldr	r3, [pc, #-508]	; aab8 <g_halGps_getData_i32+0x904>
    acb0:	e5832000 	str	r2, [r3]
					break;
    acb4:	ea00016b 	b	b268 <g_halGps_getData_i32+0x10b4>
				case 3://Latitude
					if(l_fieldpointer_i32<2)
    acb8:	e51f3208 	ldr	r3, [pc, #-520]	; aab8 <g_halGps_getData_i32+0x904>
    acbc:	e5933000 	ldr	r3, [r3]
    acc0:	e3530001 	cmp	r3, #1
    acc4:	ca000012 	bgt	ad14 <g_halGps_getData_i32+0xb60>
					{
						l_gps_latitude_st.l_degree_ui32=l_gps_latitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    acc8:	e51f3214 	ldr	r3, [pc, #-532]	; aabc <g_halGps_getData_i32+0x908>
    accc:	e5932000 	ldr	r2, [r3]
    acd0:	e1a03002 	mov	r3, r2
    acd4:	e1a03103 	lsl	r3, r3, #2
    acd8:	e0833002 	add	r3, r3, r2
    acdc:	e1a03083 	lsl	r3, r3, #1
    ace0:	e1a02003 	mov	r2, r3
    ace4:	e51f323c 	ldr	r3, [pc, #-572]	; aab0 <g_halGps_getData_i32+0x8fc>
    ace8:	e5d33000 	ldrb	r3, [r3]
    acec:	e0823003 	add	r3, r2, r3
    acf0:	e2432030 	sub	r2, r3, #48	; 0x30
    acf4:	e51f3240 	ldr	r3, [pc, #-576]	; aabc <g_halGps_getData_i32+0x908>
    acf8:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    acfc:	e51f3250 	ldr	r3, [pc, #-592]	; aab4 <g_halGps_getData_i32+0x900>
    ad00:	e5933000 	ldr	r3, [r3]
    ad04:	e2832001 	add	r2, r3, #1
    ad08:	e51f325c 	ldr	r3, [pc, #-604]	; aab4 <g_halGps_getData_i32+0x900>
    ad0c:	e5832000 	str	r2, [r3]
    ad10:	ea000031 	b	addc <g_halGps_getData_i32+0xc28>
					}
					else if(l_fieldpointer_i32<4)
    ad14:	e51f3264 	ldr	r3, [pc, #-612]	; aab8 <g_halGps_getData_i32+0x904>
    ad18:	e5933000 	ldr	r3, [r3]
    ad1c:	e3530003 	cmp	r3, #3
    ad20:	ca000012 	bgt	ad70 <g_halGps_getData_i32+0xbbc>
					{
						l_gps_latitude_st.l_minutes_ui32=l_gps_latitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    ad24:	e51f3270 	ldr	r3, [pc, #-624]	; aabc <g_halGps_getData_i32+0x908>
    ad28:	e5932004 	ldr	r2, [r3, #4]
    ad2c:	e1a03002 	mov	r3, r2
    ad30:	e1a03103 	lsl	r3, r3, #2
    ad34:	e0833002 	add	r3, r3, r2
    ad38:	e1a03083 	lsl	r3, r3, #1
    ad3c:	e1a02003 	mov	r2, r3
    ad40:	e51f3298 	ldr	r3, [pc, #-664]	; aab0 <g_halGps_getData_i32+0x8fc>
    ad44:	e5d33000 	ldrb	r3, [r3]
    ad48:	e0823003 	add	r3, r2, r3
    ad4c:	e2432030 	sub	r2, r3, #48	; 0x30
    ad50:	e51f329c 	ldr	r3, [pc, #-668]	; aabc <g_halGps_getData_i32+0x908>
    ad54:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    ad58:	e51f32ac 	ldr	r3, [pc, #-684]	; aab4 <g_halGps_getData_i32+0x900>
    ad5c:	e5933000 	ldr	r3, [r3]
    ad60:	e2832001 	add	r2, r3, #1
    ad64:	e51f32b8 	ldr	r3, [pc, #-696]	; aab4 <g_halGps_getData_i32+0x900>
    ad68:	e5832000 	str	r2, [r3]
    ad6c:	ea00001a 	b	addc <g_halGps_getData_i32+0xc28>
					}
					else if(l_fieldpointer_i32>=5 && l_fieldpointer_i32<9)
    ad70:	e51f32c0 	ldr	r3, [pc, #-704]	; aab8 <g_halGps_getData_i32+0x904>
    ad74:	e5933000 	ldr	r3, [r3]
    ad78:	e3530004 	cmp	r3, #4
    ad7c:	da000016 	ble	addc <g_halGps_getData_i32+0xc28>
    ad80:	e51f32d0 	ldr	r3, [pc, #-720]	; aab8 <g_halGps_getData_i32+0x904>
    ad84:	e5933000 	ldr	r3, [r3]
    ad88:	e3530008 	cmp	r3, #8
    ad8c:	ca000012 	bgt	addc <g_halGps_getData_i32+0xc28>
					{
						l_gps_latitude_st.l_seconds_f64=l_gps_latitude_st.l_seconds_f64*10+(double)(l_rec_Data_ch-48)*0.006;
    ad90:	e51f32dc 	ldr	r3, [pc, #-732]	; aabc <g_halGps_getData_i32+0x908>
    ad94:	ed936b02 	vldr	d6, [r3, #8]
    ad98:	ed9f7be8 	vldr	d7, [pc, #928]	; b140 <g_halGps_getData_i32+0xf8c>
    ad9c:	ee266b07 	vmul.f64	d6, d6, d7
    ada0:	e59f33c4 	ldr	r3, [pc, #964]	; b16c <g_halGps_getData_i32+0xfb8>
    ada4:	e5d33000 	ldrb	r3, [r3]
    ada8:	e2433030 	sub	r3, r3, #48	; 0x30
    adac:	ee073a90 	vmov	s15, r3
    adb0:	eeb85be7 	vcvt.f64.s32	d5, s15
    adb4:	ed9f7be3 	vldr	d7, [pc, #908]	; b148 <g_halGps_getData_i32+0xf94>
    adb8:	ee257b07 	vmul.f64	d7, d5, d7
    adbc:	ee367b07 	vadd.f64	d7, d6, d7
    adc0:	e59f3390 	ldr	r3, [pc, #912]	; b158 <g_halGps_getData_i32+0xfa4>
    adc4:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    adc8:	e59f33a8 	ldr	r3, [pc, #936]	; b178 <g_halGps_getData_i32+0xfc4>
    adcc:	e5933000 	ldr	r3, [r3]
    add0:	e2832001 	add	r2, r3, #1
    add4:	e59f339c 	ldr	r3, [pc, #924]	; b178 <g_halGps_getData_i32+0xfc4>
    add8:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    addc:	e59f3390 	ldr	r3, [pc, #912]	; b174 <g_halGps_getData_i32+0xfc0>
    ade0:	e5933000 	ldr	r3, [r3]
    ade4:	e2832001 	add	r2, r3, #1
    ade8:	e59f3384 	ldr	r3, [pc, #900]	; b174 <g_halGps_getData_i32+0xfc0>
    adec:	e5832000 	str	r2, [r3]
					break;
    adf0:	ea00011c 	b	b268 <g_halGps_getData_i32+0x10b4>
				case 4://cardinal direction
					if(l_fieldpointer_i32<1)
    adf4:	e59f3378 	ldr	r3, [pc, #888]	; b174 <g_halGps_getData_i32+0xfc0>
    adf8:	e5933000 	ldr	r3, [r3]
    adfc:	e3530000 	cmp	r3, #0
    ae00:	ca000008 	bgt	ae28 <g_halGps_getData_i32+0xc74>
					{
						l_gps_latitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    ae04:	e59f3360 	ldr	r3, [pc, #864]	; b16c <g_halGps_getData_i32+0xfb8>
    ae08:	e5d32000 	ldrb	r2, [r3]
    ae0c:	e59f3344 	ldr	r3, [pc, #836]	; b158 <g_halGps_getData_i32+0xfa4>
    ae10:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    ae14:	e59f335c 	ldr	r3, [pc, #860]	; b178 <g_halGps_getData_i32+0xfc4>
    ae18:	e5933000 	ldr	r3, [r3]
    ae1c:	e2832001 	add	r2, r3, #1
    ae20:	e59f3350 	ldr	r3, [pc, #848]	; b178 <g_halGps_getData_i32+0xfc4>
    ae24:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    ae28:	e59f3344 	ldr	r3, [pc, #836]	; b174 <g_halGps_getData_i32+0xfc0>
    ae2c:	e5933000 	ldr	r3, [r3]
    ae30:	e2832001 	add	r2, r3, #1
    ae34:	e59f3338 	ldr	r3, [pc, #824]	; b174 <g_halGps_getData_i32+0xfc0>
    ae38:	e5832000 	str	r2, [r3]
					break;
    ae3c:	ea000109 	b	b268 <g_halGps_getData_i32+0x10b4>
				case 5://Longitude
					if(l_fieldpointer_i32<3)
    ae40:	e59f332c 	ldr	r3, [pc, #812]	; b174 <g_halGps_getData_i32+0xfc0>
    ae44:	e5933000 	ldr	r3, [r3]
    ae48:	e3530002 	cmp	r3, #2
    ae4c:	ca000012 	bgt	ae9c <g_halGps_getData_i32+0xce8>
					{
						l_gps_longitude_st.l_degree_ui32=l_gps_longitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    ae50:	e59f3304 	ldr	r3, [pc, #772]	; b15c <g_halGps_getData_i32+0xfa8>
    ae54:	e5932000 	ldr	r2, [r3]
    ae58:	e1a03002 	mov	r3, r2
    ae5c:	e1a03103 	lsl	r3, r3, #2
    ae60:	e0833002 	add	r3, r3, r2
    ae64:	e1a03083 	lsl	r3, r3, #1
    ae68:	e1a02003 	mov	r2, r3
    ae6c:	e59f32f8 	ldr	r3, [pc, #760]	; b16c <g_halGps_getData_i32+0xfb8>
    ae70:	e5d33000 	ldrb	r3, [r3]
    ae74:	e0823003 	add	r3, r2, r3
    ae78:	e2432030 	sub	r2, r3, #48	; 0x30
    ae7c:	e59f32d8 	ldr	r3, [pc, #728]	; b15c <g_halGps_getData_i32+0xfa8>
    ae80:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    ae84:	e59f32ec 	ldr	r3, [pc, #748]	; b178 <g_halGps_getData_i32+0xfc4>
    ae88:	e5933000 	ldr	r3, [r3]
    ae8c:	e2832001 	add	r2, r3, #1
    ae90:	e59f32e0 	ldr	r3, [pc, #736]	; b178 <g_halGps_getData_i32+0xfc4>
    ae94:	e5832000 	str	r2, [r3]
    ae98:	ea000031 	b	af64 <g_halGps_getData_i32+0xdb0>
					}
					else if(l_fieldpointer_i32<5)
    ae9c:	e59f32d0 	ldr	r3, [pc, #720]	; b174 <g_halGps_getData_i32+0xfc0>
    aea0:	e5933000 	ldr	r3, [r3]
    aea4:	e3530004 	cmp	r3, #4
    aea8:	ca000012 	bgt	aef8 <g_halGps_getData_i32+0xd44>
					{
						l_gps_longitude_st.l_minutes_ui32=l_gps_longitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    aeac:	e59f32a8 	ldr	r3, [pc, #680]	; b15c <g_halGps_getData_i32+0xfa8>
    aeb0:	e5932004 	ldr	r2, [r3, #4]
    aeb4:	e1a03002 	mov	r3, r2
    aeb8:	e1a03103 	lsl	r3, r3, #2
    aebc:	e0833002 	add	r3, r3, r2
    aec0:	e1a03083 	lsl	r3, r3, #1
    aec4:	e1a02003 	mov	r2, r3
    aec8:	e59f329c 	ldr	r3, [pc, #668]	; b16c <g_halGps_getData_i32+0xfb8>
    aecc:	e5d33000 	ldrb	r3, [r3]
    aed0:	e0823003 	add	r3, r2, r3
    aed4:	e2432030 	sub	r2, r3, #48	; 0x30
    aed8:	e59f327c 	ldr	r3, [pc, #636]	; b15c <g_halGps_getData_i32+0xfa8>
    aedc:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    aee0:	e59f3290 	ldr	r3, [pc, #656]	; b178 <g_halGps_getData_i32+0xfc4>
    aee4:	e5933000 	ldr	r3, [r3]
    aee8:	e2832001 	add	r2, r3, #1
    aeec:	e59f3284 	ldr	r3, [pc, #644]	; b178 <g_halGps_getData_i32+0xfc4>
    aef0:	e5832000 	str	r2, [r3]
    aef4:	ea00001a 	b	af64 <g_halGps_getData_i32+0xdb0>
					}
					else if(l_fieldpointer_i32>=6 && l_fieldpointer_i32<10)
    aef8:	e59f3274 	ldr	r3, [pc, #628]	; b174 <g_halGps_getData_i32+0xfc0>
    aefc:	e5933000 	ldr	r3, [r3]
    af00:	e3530005 	cmp	r3, #5
    af04:	da000016 	ble	af64 <g_halGps_getData_i32+0xdb0>
    af08:	e59f3264 	ldr	r3, [pc, #612]	; b174 <g_halGps_getData_i32+0xfc0>
    af0c:	e5933000 	ldr	r3, [r3]
    af10:	e3530009 	cmp	r3, #9
    af14:	ca000012 	bgt	af64 <g_halGps_getData_i32+0xdb0>
					{
						l_gps_longitude_st.l_seconds_f64=l_gps_longitude_st.l_seconds_f64*10+(double)(l_rec_Data_ch-48)*0.006;
    af18:	e59f323c 	ldr	r3, [pc, #572]	; b15c <g_halGps_getData_i32+0xfa8>
    af1c:	ed936b02 	vldr	d6, [r3, #8]
    af20:	ed9f7b86 	vldr	d7, [pc, #536]	; b140 <g_halGps_getData_i32+0xf8c>
    af24:	ee266b07 	vmul.f64	d6, d6, d7
    af28:	e59f323c 	ldr	r3, [pc, #572]	; b16c <g_halGps_getData_i32+0xfb8>
    af2c:	e5d33000 	ldrb	r3, [r3]
    af30:	e2433030 	sub	r3, r3, #48	; 0x30
    af34:	ee073a90 	vmov	s15, r3
    af38:	eeb85be7 	vcvt.f64.s32	d5, s15
    af3c:	ed9f7b81 	vldr	d7, [pc, #516]	; b148 <g_halGps_getData_i32+0xf94>
    af40:	ee257b07 	vmul.f64	d7, d5, d7
    af44:	ee367b07 	vadd.f64	d7, d6, d7
    af48:	e59f320c 	ldr	r3, [pc, #524]	; b15c <g_halGps_getData_i32+0xfa8>
    af4c:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    af50:	e59f3220 	ldr	r3, [pc, #544]	; b178 <g_halGps_getData_i32+0xfc4>
    af54:	e5933000 	ldr	r3, [r3]
    af58:	e2832001 	add	r2, r3, #1
    af5c:	e59f3214 	ldr	r3, [pc, #532]	; b178 <g_halGps_getData_i32+0xfc4>
    af60:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    af64:	e59f3208 	ldr	r3, [pc, #520]	; b174 <g_halGps_getData_i32+0xfc0>
    af68:	e5933000 	ldr	r3, [r3]
    af6c:	e2832001 	add	r2, r3, #1
    af70:	e59f31fc 	ldr	r3, [pc, #508]	; b174 <g_halGps_getData_i32+0xfc0>
    af74:	e5832000 	str	r2, [r3]
					break;
    af78:	ea0000ba 	b	b268 <g_halGps_getData_i32+0x10b4>
				case 6://cardinal direction
					if(l_fieldpointer_i32<1)
    af7c:	e59f31f0 	ldr	r3, [pc, #496]	; b174 <g_halGps_getData_i32+0xfc0>
    af80:	e5933000 	ldr	r3, [r3]
    af84:	e3530000 	cmp	r3, #0
    af88:	ca000008 	bgt	afb0 <g_halGps_getData_i32+0xdfc>
					{
						l_gps_longitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    af8c:	e59f31d8 	ldr	r3, [pc, #472]	; b16c <g_halGps_getData_i32+0xfb8>
    af90:	e5d32000 	ldrb	r2, [r3]
    af94:	e59f31c0 	ldr	r3, [pc, #448]	; b15c <g_halGps_getData_i32+0xfa8>
    af98:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    af9c:	e59f31d4 	ldr	r3, [pc, #468]	; b178 <g_halGps_getData_i32+0xfc4>
    afa0:	e5933000 	ldr	r3, [r3]
    afa4:	e2832001 	add	r2, r3, #1
    afa8:	e59f31c8 	ldr	r3, [pc, #456]	; b178 <g_halGps_getData_i32+0xfc4>
    afac:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    afb0:	e59f31bc 	ldr	r3, [pc, #444]	; b174 <g_halGps_getData_i32+0xfc0>
    afb4:	e5933000 	ldr	r3, [r3]
    afb8:	e2832001 	add	r2, r3, #1
    afbc:	e59f31b0 	ldr	r3, [pc, #432]	; b174 <g_halGps_getData_i32+0xfc0>
    afc0:	e5832000 	str	r2, [r3]
					break;
    afc4:	ea0000a7 	b	b268 <g_halGps_getData_i32+0x10b4>
				case 7://Velocity
					if(l_fieldpointer_i32<1)
    afc8:	e59f31a4 	ldr	r3, [pc, #420]	; b174 <g_halGps_getData_i32+0xfc0>
    afcc:	e5933000 	ldr	r3, [r3]
    afd0:	e3530000 	cmp	r3, #0
    afd4:	ca000013 	bgt	b028 <g_halGps_getData_i32+0xe74>
					{
						l_velocity_f64=l_velocity_f64*10+(double)(l_rec_Data_ch-48)*0.01;
    afd8:	e59f3180 	ldr	r3, [pc, #384]	; b160 <g_halGps_getData_i32+0xfac>
    afdc:	ed936b00 	vldr	d6, [r3]
    afe0:	ed9f7b56 	vldr	d7, [pc, #344]	; b140 <g_halGps_getData_i32+0xf8c>
    afe4:	ee266b07 	vmul.f64	d6, d6, d7
    afe8:	e59f317c 	ldr	r3, [pc, #380]	; b16c <g_halGps_getData_i32+0xfb8>
    afec:	e5d33000 	ldrb	r3, [r3]
    aff0:	e2433030 	sub	r3, r3, #48	; 0x30
    aff4:	ee073a90 	vmov	s15, r3
    aff8:	eeb85be7 	vcvt.f64.s32	d5, s15
    affc:	ed9f7b53 	vldr	d7, [pc, #332]	; b150 <g_halGps_getData_i32+0xf9c>
    b000:	ee257b07 	vmul.f64	d7, d5, d7
    b004:	ee367b07 	vadd.f64	d7, d6, d7
    b008:	e59f3150 	ldr	r3, [pc, #336]	; b160 <g_halGps_getData_i32+0xfac>
    b00c:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    b010:	e59f3160 	ldr	r3, [pc, #352]	; b178 <g_halGps_getData_i32+0xfc4>
    b014:	e5933000 	ldr	r3, [r3]
    b018:	e2832001 	add	r2, r3, #1
    b01c:	e59f3154 	ldr	r3, [pc, #340]	; b178 <g_halGps_getData_i32+0xfc4>
    b020:	e5832000 	str	r2, [r3]
    b024:	ea00001a 	b	b094 <g_halGps_getData_i32+0xee0>
					}
					else if(l_fieldpointer_i32>=2 && l_fieldpointer_i32<4)
    b028:	e59f3144 	ldr	r3, [pc, #324]	; b174 <g_halGps_getData_i32+0xfc0>
    b02c:	e5933000 	ldr	r3, [r3]
    b030:	e3530001 	cmp	r3, #1
    b034:	da000016 	ble	b094 <g_halGps_getData_i32+0xee0>
    b038:	e59f3134 	ldr	r3, [pc, #308]	; b174 <g_halGps_getData_i32+0xfc0>
    b03c:	e5933000 	ldr	r3, [r3]
    b040:	e3530003 	cmp	r3, #3
    b044:	ca000012 	bgt	b094 <g_halGps_getData_i32+0xee0>
					{
						l_velocity_f64=l_velocity_f64*10+(double)(l_rec_Data_ch-48)*0.01;
    b048:	e59f3110 	ldr	r3, [pc, #272]	; b160 <g_halGps_getData_i32+0xfac>
    b04c:	ed936b00 	vldr	d6, [r3]
    b050:	ed9f7b3a 	vldr	d7, [pc, #232]	; b140 <g_halGps_getData_i32+0xf8c>
    b054:	ee266b07 	vmul.f64	d6, d6, d7
    b058:	e59f310c 	ldr	r3, [pc, #268]	; b16c <g_halGps_getData_i32+0xfb8>
    b05c:	e5d33000 	ldrb	r3, [r3]
    b060:	e2433030 	sub	r3, r3, #48	; 0x30
    b064:	ee073a90 	vmov	s15, r3
    b068:	eeb85be7 	vcvt.f64.s32	d5, s15
    b06c:	ed9f7b37 	vldr	d7, [pc, #220]	; b150 <g_halGps_getData_i32+0xf9c>
    b070:	ee257b07 	vmul.f64	d7, d5, d7
    b074:	ee367b07 	vadd.f64	d7, d6, d7
    b078:	e59f30e0 	ldr	r3, [pc, #224]	; b160 <g_halGps_getData_i32+0xfac>
    b07c:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    b080:	e59f30f0 	ldr	r3, [pc, #240]	; b178 <g_halGps_getData_i32+0xfc4>
    b084:	e5933000 	ldr	r3, [r3]
    b088:	e2832001 	add	r2, r3, #1
    b08c:	e59f30e4 	ldr	r3, [pc, #228]	; b178 <g_halGps_getData_i32+0xfc4>
    b090:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b094:	e59f30d8 	ldr	r3, [pc, #216]	; b174 <g_halGps_getData_i32+0xfc0>
    b098:	e5933000 	ldr	r3, [r3]
    b09c:	e2832001 	add	r2, r3, #1
    b0a0:	e59f30cc 	ldr	r3, [pc, #204]	; b174 <g_halGps_getData_i32+0xfc0>
    b0a4:	e5832000 	str	r2, [r3]
					break;
    b0a8:	ea00006e 	b	b268 <g_halGps_getData_i32+0x10b4>
				case 8://Direction
					if(l_rec_Data_ch!='.' && l_fieldpointer_i32==0)
    b0ac:	e59f30b8 	ldr	r3, [pc, #184]	; b16c <g_halGps_getData_i32+0xfb8>
    b0b0:	e5d33000 	ldrb	r3, [r3]
    b0b4:	e353002e 	cmp	r3, #46	; 0x2e
    b0b8:	0a000015 	beq	b114 <g_halGps_getData_i32+0xf60>
    b0bc:	e59f30b0 	ldr	r3, [pc, #176]	; b174 <g_halGps_getData_i32+0xfc0>
    b0c0:	e5933000 	ldr	r3, [r3]
    b0c4:	e3530000 	cmp	r3, #0
    b0c8:	1a000011 	bne	b114 <g_halGps_getData_i32+0xf60>
					{
						l_direction_f64=l_direction_f64*10+(double)(l_rec_Data_ch-48);
    b0cc:	e59f3090 	ldr	r3, [pc, #144]	; b164 <g_halGps_getData_i32+0xfb0>
    b0d0:	ed936b00 	vldr	d6, [r3]
    b0d4:	ed9f7b19 	vldr	d7, [pc, #100]	; b140 <g_halGps_getData_i32+0xf8c>
    b0d8:	ee266b07 	vmul.f64	d6, d6, d7
    b0dc:	e59f3088 	ldr	r3, [pc, #136]	; b16c <g_halGps_getData_i32+0xfb8>
    b0e0:	e5d33000 	ldrb	r3, [r3]
    b0e4:	e2433030 	sub	r3, r3, #48	; 0x30
    b0e8:	ee053a90 	vmov	s11, r3
    b0ec:	eeb87be5 	vcvt.f64.s32	d7, s11
    b0f0:	ee367b07 	vadd.f64	d7, d6, d7
    b0f4:	e59f3068 	ldr	r3, [pc, #104]	; b164 <g_halGps_getData_i32+0xfb0>
    b0f8:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    b0fc:	e59f3074 	ldr	r3, [pc, #116]	; b178 <g_halGps_getData_i32+0xfc4>
    b100:	e5933000 	ldr	r3, [r3]
    b104:	e2832001 	add	r2, r3, #1
    b108:	e59f3068 	ldr	r3, [pc, #104]	; b178 <g_halGps_getData_i32+0xfc4>
    b10c:	e5832000 	str	r2, [r3]
    b110:	ea000037 	b	b1f4 <g_halGps_getData_i32+0x1040>

					}
					else if (l_rec_Data_ch=='.')
    b114:	e59f3050 	ldr	r3, [pc, #80]	; b16c <g_halGps_getData_i32+0xfb8>
    b118:	e5d33000 	ldrb	r3, [r3]
    b11c:	e353002e 	cmp	r3, #46	; 0x2e
    b120:	1a000015 	bne	b17c <g_halGps_getData_i32+0xfc8>
					{
						l_fieldpointer_i32++;
    b124:	e59f3048 	ldr	r3, [pc, #72]	; b174 <g_halGps_getData_i32+0xfc0>
    b128:	e5933000 	ldr	r3, [r3]
    b12c:	e2832001 	add	r2, r3, #1
    b130:	e59f303c 	ldr	r3, [pc, #60]	; b174 <g_halGps_getData_i32+0xfc0>
    b134:	e5832000 	str	r2, [r3]
    b138:	ea00002d 	b	b1f4 <g_halGps_getData_i32+0x1040>
    b13c:	e1a00000 	nop			; (mov r0, r0)
    b140:	00000000 	.word	0x00000000
    b144:	40240000 	.word	0x40240000
    b148:	bc6a7efa 	.word	0xbc6a7efa
    b14c:	3f789374 	.word	0x3f789374
    b150:	47ae147b 	.word	0x47ae147b
    b154:	3f847ae1 	.word	0x3f847ae1
    b158:	00018880 	.word	0x00018880
    b15c:	00018868 	.word	0x00018868
    b160:	000188a0 	.word	0x000188a0
    b164:	000188a8 	.word	0x000188a8
    b168:	0001841c 	.word	0x0001841c
    b16c:	00018418 	.word	0x00018418
    b170:	000188b0 	.word	0x000188b0
    b174:	000188cc 	.word	0x000188cc
    b178:	000188d0 	.word	0x000188d0
					}
					else
					{
						l_direction_f64=l_direction_f64+(double)(l_rec_Data_ch-48)/l_decimal_place_factor_i32;
    b17c:	e51f3018 	ldr	r3, [pc, #-24]	; b16c <g_halGps_getData_i32+0xfb8>
    b180:	e5d33000 	ldrb	r3, [r3]
    b184:	e2433030 	sub	r3, r3, #48	; 0x30
    b188:	ee073a90 	vmov	s15, r3
    b18c:	eeb86be7 	vcvt.f64.s32	d6, s15
    b190:	e51f3030 	ldr	r3, [pc, #-48]	; b168 <g_halGps_getData_i32+0xfb4>
    b194:	e5933000 	ldr	r3, [r3]
    b198:	ee053a90 	vmov	s11, r3
    b19c:	eeb87be5 	vcvt.f64.s32	d7, s11
    b1a0:	ee866b07 	vdiv.f64	d6, d6, d7
    b1a4:	e51f3048 	ldr	r3, [pc, #-72]	; b164 <g_halGps_getData_i32+0xfb0>
    b1a8:	ed937b00 	vldr	d7, [r3]
    b1ac:	ee367b07 	vadd.f64	d7, d6, d7
    b1b0:	e51f3054 	ldr	r3, [pc, #-84]	; b164 <g_halGps_getData_i32+0xfb0>
    b1b4:	ed837b00 	vstr	d7, [r3]
						l_decimal_place_factor_i32=l_decimal_place_factor_i32*10;
    b1b8:	e51f3058 	ldr	r3, [pc, #-88]	; b168 <g_halGps_getData_i32+0xfb4>
    b1bc:	e5932000 	ldr	r2, [r3]
    b1c0:	e1a03002 	mov	r3, r2
    b1c4:	e1a03103 	lsl	r3, r3, #2
    b1c8:	e0833002 	add	r3, r3, r2
    b1cc:	e1a03083 	lsl	r3, r3, #1
    b1d0:	e1a02003 	mov	r2, r3
    b1d4:	e51f3074 	ldr	r3, [pc, #-116]	; b168 <g_halGps_getData_i32+0xfb4>
    b1d8:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    b1dc:	e51f306c 	ldr	r3, [pc, #-108]	; b178 <g_halGps_getData_i32+0xfc4>
    b1e0:	e5933000 	ldr	r3, [r3]
    b1e4:	e2832001 	add	r2, r3, #1
    b1e8:	e51f3078 	ldr	r3, [pc, #-120]	; b178 <g_halGps_getData_i32+0xfc4>
    b1ec:	e5832000 	str	r2, [r3]
					}
					break;
    b1f0:	ea00001c 	b	b268 <g_halGps_getData_i32+0x10b4>
    b1f4:	ea00001b 	b	b268 <g_halGps_getData_i32+0x10b4>
				case 9://Date
					if(l_fieldpointer_i32<6)
    b1f8:	e51f308c 	ldr	r3, [pc, #-140]	; b174 <g_halGps_getData_i32+0xfc0>
    b1fc:	e5933000 	ldr	r3, [r3]
    b200:	e3530005 	cmp	r3, #5
    b204:	ca000011 	bgt	b250 <g_halGps_getData_i32+0x109c>
					{
						l_date_ui32=l_date_ui32*10+(l_rec_Data_ch-48);
    b208:	e51f30a0 	ldr	r3, [pc, #-160]	; b170 <g_halGps_getData_i32+0xfbc>
    b20c:	e5932000 	ldr	r2, [r3]
    b210:	e1a03002 	mov	r3, r2
    b214:	e1a03103 	lsl	r3, r3, #2
    b218:	e0833002 	add	r3, r3, r2
    b21c:	e1a03083 	lsl	r3, r3, #1
    b220:	e1a02003 	mov	r2, r3
    b224:	e51f30c0 	ldr	r3, [pc, #-192]	; b16c <g_halGps_getData_i32+0xfb8>
    b228:	e5d33000 	ldrb	r3, [r3]
    b22c:	e0823003 	add	r3, r2, r3
    b230:	e2432030 	sub	r2, r3, #48	; 0x30
    b234:	e51f30cc 	ldr	r3, [pc, #-204]	; b170 <g_halGps_getData_i32+0xfbc>
    b238:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    b23c:	e51f30cc 	ldr	r3, [pc, #-204]	; b178 <g_halGps_getData_i32+0xfc4>
    b240:	e5933000 	ldr	r3, [r3]
    b244:	e2832001 	add	r2, r3, #1
    b248:	e51f30d8 	ldr	r3, [pc, #-216]	; b178 <g_halGps_getData_i32+0xfc4>
    b24c:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b250:	e51f30e4 	ldr	r3, [pc, #-228]	; b174 <g_halGps_getData_i32+0xfc0>
    b254:	e5933000 	ldr	r3, [r3]
    b258:	e2832001 	add	r2, r3, #1
    b25c:	e51f30f0 	ldr	r3, [pc, #-240]	; b174 <g_halGps_getData_i32+0xfc0>
    b260:	e5832000 	str	r2, [r3]
					break;
    b264:	e1a00000 	nop			; (mov r0, r0)
				}
				break;
    b268:	e1a00000 	nop			; (mov r0, r0)
			}
			break;
    b26c:	e1a00000 	nop			; (mov r0, r0)
		}
	}
	return(l_succeded_i32);
    b270:	e51f3100 	ldr	r3, [pc, #-256]	; b178 <g_halGps_getData_i32+0xfc4>
    b274:	e5933000 	ldr	r3, [r3]
}
    b278:	e1a00003 	mov	r0, r3
    b27c:	e8bd8800 	pop	{fp, pc}

0000b280 <l_readI2cByte_ui8>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline unsigned char l_readI2cByte_ui8( unsigned char f_registerAddr_ui8 )
{
    b280:	e92d4800 	push	{fp, lr}
    b284:	e28db004 	add	fp, sp, #4
    b288:	e24dd010 	sub	sp, sp, #16
    b28c:	e1a03000 	mov	r3, r0
    b290:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char	l_registerAddr_ui8 = 0;
    b294:	e3a03000 	mov	r3, #0
    b298:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char	l_recvDataByte_ui8 = 0;
    b29c:	e3a03000 	mov	r3, #0
    b2a0:	e54b3006 	strb	r3, [fp, #-6]

	/*
	 * ensure single byte read (MSB of register address shall be 0)
	 * -> Mask MSB to zero!
	 */
	l_registerAddr_ui8 = f_registerAddr_ui8 & 0b01111111;
    b2a4:	e55b300d 	ldrb	r3, [fp, #-13]
    b2a8:	e203307f 	and	r3, r3, #127	; 0x7f
    b2ac:	e6ef3073 	uxtb	r3, r3
    b2b0:	e54b3005 	strb	r3, [fp, #-5]

	//write register request to I2C
	if ( g_lldI2c_WriteI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, &l_registerAddr_ui8, 1) != M_HAL_ACCMAG_SUCCESS_BL )
    b2b4:	e24b3005 	sub	r3, fp, #5
    b2b8:	e3a0001e 	mov	r0, #30
    b2bc:	e1a01003 	mov	r1, r3
    b2c0:	e3a02001 	mov	r2, #1
    b2c4:	eb0005a3 	bl	c958 <g_lldI2c_WriteI2c_bl>
    b2c8:	e1a03000 	mov	r3, r0
    b2cc:	e3530000 	cmp	r3, #0
    b2d0:	0a000001 	beq	b2dc <l_readI2cByte_ui8+0x5c>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    b2d4:	e3a03001 	mov	r3, #1
    b2d8:	ea00000a 	b	b308 <l_readI2cByte_ui8+0x88>
	}

	//read requested register data
	if ( g_lldI2c_ReadI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, &l_recvDataByte_ui8, 1) != M_HAL_ACCMAG_SUCCESS_BL )
    b2dc:	e24b3006 	sub	r3, fp, #6
    b2e0:	e3a0001e 	mov	r0, #30
    b2e4:	e1a01003 	mov	r1, r3
    b2e8:	e3a02001 	mov	r2, #1
    b2ec:	eb0005d1 	bl	ca38 <g_lldI2c_ReadI2c_bl>
    b2f0:	e1a03000 	mov	r3, r0
    b2f4:	e3530000 	cmp	r3, #0
    b2f8:	0a000001 	beq	b304 <l_readI2cByte_ui8+0x84>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    b2fc:	e3a03001 	mov	r3, #1
    b300:	ea000000 	b	b308 <l_readI2cByte_ui8+0x88>
	}

	return l_recvDataByte_ui8;
    b304:	e55b3006 	ldrb	r3, [fp, #-6]
}
    b308:	e1a00003 	mov	r0, r3
    b30c:	e24bd004 	sub	sp, fp, #4
    b310:	e8bd8800 	pop	{fp, pc}

0000b314 <l_readI2cByteStream_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline unsigned int l_readI2cByteStream_bl( unsigned char f_startRegisterAddr_ui8, const unsigned char* f_readDestinationBuffer_pui8, unsigned int f_numOfBytesToRead_ui32 )
{
    b314:	e92d4800 	push	{fp, lr}
    b318:	e28db004 	add	fp, sp, #4
    b31c:	e24dd018 	sub	sp, sp, #24
    b320:	e1a03000 	mov	r3, r0
    b324:	e50b1014 	str	r1, [fp, #-20]
    b328:	e50b2018 	str	r2, [fp, #-24]
    b32c:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char	l_registerAddr_ui8 	= 0;
    b330:	e3a03000 	mov	r3, #0
    b334:	e54b3005 	strb	r3, [fp, #-5]

	// ensure at least one data byte to read
	if (f_numOfBytesToRead_ui32 < 1)
    b338:	e51b3018 	ldr	r3, [fp, #-24]
    b33c:	e3530000 	cmp	r3, #0
    b340:	1a000001 	bne	b34c <l_readI2cByteStream_bl+0x38>
	{
		return M_HAL_ACCMAG_FAILED_BL;
    b344:	e3a03001 	mov	r3, #1
    b348:	ea000018 	b	b3b0 <l_readI2cByteStream_bl+0x9c>
	 * ensure byte stream reading (MSB of register address shall be 1)
	 *   -> Mask MSB to one!
	 *   -> LSM303D will auto-increment the register address for each byte
	 *      of data
	 */
	l_registerAddr_ui8 = f_startRegisterAddr_ui8 | 0b10000000;
    b34c:	e55b300d 	ldrb	r3, [fp, #-13]
    b350:	e1e03c83 	mvn	r3, r3, lsl #25
    b354:	e1e03ca3 	mvn	r3, r3, lsr #25
    b358:	e6ef3073 	uxtb	r3, r3
    b35c:	e54b3005 	strb	r3, [fp, #-5]

	//write register request to I2C
	if ( g_lldI2c_WriteI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, &l_registerAddr_ui8, 1) != M_HAL_ACCMAG_SUCCESS_BL )
    b360:	e24b3005 	sub	r3, fp, #5
    b364:	e3a0001e 	mov	r0, #30
    b368:	e1a01003 	mov	r1, r3
    b36c:	e3a02001 	mov	r2, #1
    b370:	eb000578 	bl	c958 <g_lldI2c_WriteI2c_bl>
    b374:	e1a03000 	mov	r3, r0
    b378:	e3530000 	cmp	r3, #0
    b37c:	0a000001 	beq	b388 <l_readI2cByteStream_bl+0x74>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    b380:	e3a03001 	mov	r3, #1
    b384:	ea000009 	b	b3b0 <l_readI2cByteStream_bl+0x9c>
	}

	//read requested registers to I2C
	if ( g_lldI2c_ReadI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, f_readDestinationBuffer_pui8, f_numOfBytesToRead_ui32) != M_HAL_ACCMAG_SUCCESS_BL )
    b388:	e3a0001e 	mov	r0, #30
    b38c:	e51b1014 	ldr	r1, [fp, #-20]
    b390:	e51b2018 	ldr	r2, [fp, #-24]
    b394:	eb0005a7 	bl	ca38 <g_lldI2c_ReadI2c_bl>
    b398:	e1a03000 	mov	r3, r0
    b39c:	e3530000 	cmp	r3, #0
    b3a0:	0a000001 	beq	b3ac <l_readI2cByteStream_bl+0x98>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    b3a4:	e3a03001 	mov	r3, #1
    b3a8:	ea000000 	b	b3b0 <l_readI2cByteStream_bl+0x9c>
	}

	return M_HAL_ACCMAG_SUCCESS_BL;
    b3ac:	e3a03000 	mov	r3, #0
}
    b3b0:	e1a00003 	mov	r0, r3
    b3b4:	e24bd004 	sub	sp, fp, #4
    b3b8:	e8bd8800 	pop	{fp, pc}

0000b3bc <l_writeI2cByteStream_bl>:
 * - changed malloc/free approach to fixed size array (with define to set
 *   size of array in header)
 * \endinternal
 ***********************************************************************/
static inline unsigned int l_writeI2cByteStream_bl( unsigned char f_startRegisterAddr_ui8, const unsigned char* const f_byteStreamToWrite_pui8, unsigned int f_numOfBytes_ui32 )
{
    b3bc:	e92d4800 	push	{fp, lr}
    b3c0:	e28db004 	add	fp, sp, #4
    b3c4:	e24dd028 	sub	sp, sp, #40	; 0x28
    b3c8:	e1a03000 	mov	r3, r0
    b3cc:	e50b1024 	str	r1, [fp, #-36]	; 0x24
    b3d0:	e50b2028 	str	r2, [fp, #-40]	; 0x28
    b3d4:	e54b301d 	strb	r3, [fp, #-29]
	unsigned int	l_writeSucceeded_bl 	= M_HAL_ACCMAG_SUCCESS_BL; 	// success state as default
    b3d8:	e3a03000 	mov	r3, #0
    b3dc:	e50b3008 	str	r3, [fp, #-8]
	unsigned char 	l_bufCtr_ui8			= 0;						// loop counter to assemble payload and register address
    b3e0:	e3a03000 	mov	r3, #0
    b3e4:	e54b3009 	strb	r3, [fp, #-9]
	/*
	 * - ensure at least one data byte to write
	 * - prevent a buffer overflow of l_byteStreamBuffer_rgXui8
	 *   --> payload data bytes + register address (subaddress)
	 */
	if ( 		(f_numOfBytes_ui32 < 1)
    b3e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    b3ec:	e3530000 	cmp	r3, #0
    b3f0:	0a000002 	beq	b400 <l_writeI2cByteStream_bl+0x44>
			||  (f_numOfBytes_ui32 > M_HAL_ACCMAG_WRITE_BYTESTREAM_BUFFER_SIZE_UI8-1) )
    b3f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    b3f8:	e353000b 	cmp	r3, #11
    b3fc:	9a000001 	bls	b408 <l_writeI2cByteStream_bl+0x4c>
	{
		return M_HAL_ACCMAG_FAILED_BL;
    b400:	e3a03001 	mov	r3, #1
    b404:	ea000026 	b	b4a4 <l_writeI2cByteStream_bl+0xe8>
	 *     -> LSM303D will auto-increment the register address for each byte
	 *        of data
	 * (2) copy data to write to local buffer, start at second byte position
	 *     (first byte position is the register address)
	 */
	l_byteStreamBuffer_rgXui8[0] = f_startRegisterAddr_ui8 | 0b10000000;
    b408:	e55b301d 	ldrb	r3, [fp, #-29]
    b40c:	e1e03c83 	mvn	r3, r3, lsl #25
    b410:	e1e03ca3 	mvn	r3, r3, lsr #25
    b414:	e6ef3073 	uxtb	r3, r3
    b418:	e54b3018 	strb	r3, [fp, #-24]
	for(l_bufCtr_ui8=0; l_bufCtr_ui8 < f_numOfBytes_ui32; l_bufCtr_ui8++)
    b41c:	e3a03000 	mov	r3, #0
    b420:	e54b3009 	strb	r3, [fp, #-9]
    b424:	ea00000d 	b	b460 <l_writeI2cByteStream_bl+0xa4>
	{
		l_byteStreamBuffer_rgXui8[l_bufCtr_ui8+1] = f_byteStreamToWrite_pui8[l_bufCtr_ui8];
    b428:	e55b3009 	ldrb	r3, [fp, #-9]
    b42c:	e2831001 	add	r1, r3, #1
    b430:	e55b3009 	ldrb	r3, [fp, #-9]
    b434:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
    b438:	e0823003 	add	r3, r2, r3
    b43c:	e5d32000 	ldrb	r2, [r3]
    b440:	e3e03013 	mvn	r3, #19
    b444:	e24b0004 	sub	r0, fp, #4
    b448:	e0801001 	add	r1, r0, r1
    b44c:	e0813003 	add	r3, r1, r3
    b450:	e5c32000 	strb	r2, [r3]
	 *        of data
	 * (2) copy data to write to local buffer, start at second byte position
	 *     (first byte position is the register address)
	 */
	l_byteStreamBuffer_rgXui8[0] = f_startRegisterAddr_ui8 | 0b10000000;
	for(l_bufCtr_ui8=0; l_bufCtr_ui8 < f_numOfBytes_ui32; l_bufCtr_ui8++)
    b454:	e55b3009 	ldrb	r3, [fp, #-9]
    b458:	e2833001 	add	r3, r3, #1
    b45c:	e54b3009 	strb	r3, [fp, #-9]
    b460:	e55b2009 	ldrb	r2, [fp, #-9]
    b464:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    b468:	e1520003 	cmp	r2, r3
    b46c:	3affffed 	bcc	b428 <l_writeI2cByteStream_bl+0x6c>
	{
		l_byteStreamBuffer_rgXui8[l_bufCtr_ui8+1] = f_byteStreamToWrite_pui8[l_bufCtr_ui8];
	}

	//write register to I2C
	if ( g_lldI2c_WriteI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, l_byteStreamBuffer_rgXui8, f_numOfBytes_ui32 + 1) != M_HAL_ACCMAG_SUCCESS_BL )
    b470:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    b474:	e2833001 	add	r3, r3, #1
    b478:	e24b2018 	sub	r2, fp, #24
    b47c:	e3a0001e 	mov	r0, #30
    b480:	e1a01002 	mov	r1, r2
    b484:	e1a02003 	mov	r2, r3
    b488:	eb000532 	bl	c958 <g_lldI2c_WriteI2c_bl>
    b48c:	e1a03000 	mov	r3, r0
    b490:	e3530000 	cmp	r3, #0
    b494:	0a000001 	beq	b4a0 <l_writeI2cByteStream_bl+0xe4>
	{
		// error in I2C access
		l_writeSucceeded_bl = M_HAL_ACCMAG_FAILED_BL;
    b498:	e3a03001 	mov	r3, #1
    b49c:	e50b3008 	str	r3, [fp, #-8]
	}

	return l_writeSucceeded_bl;
    b4a0:	e51b3008 	ldr	r3, [fp, #-8]
}
    b4a4:	e1a00003 	mov	r0, r3
    b4a8:	e24bd004 	sub	sp, fp, #4
    b4ac:	e8bd8800 	pop	{fp, pc}

0000b4b0 <l_twoCompOf16Bit_ui16>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline signed short l_twoCompOf16Bit_ui16( unsigned char f_lsb_ui8, unsigned char f_msb_ui8 )
{
    b4b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    b4b4:	e28db000 	add	fp, sp, #0
    b4b8:	e24dd014 	sub	sp, sp, #20
    b4bc:	e1a02000 	mov	r2, r0
    b4c0:	e1a03001 	mov	r3, r1
    b4c4:	e54b200d 	strb	r2, [fp, #-13]
    b4c8:	e54b300e 	strb	r3, [fp, #-14]
	signed short	l_compOfTwo_ui16 = 0; //init variable with zeros
    b4cc:	e3a03000 	mov	r3, #0
    b4d0:	e14b30b6 	strh	r3, [fp, #-6]
	 * 2. invert 16bit
	 * 3. add 1 to 16bit value
	 * 4. mask only 16bit range (to avoid overflows)
	 * --> conversion of two's complement
	 */
	l_compOfTwo_ui16 = (signed short)( ( ~((int)(f_msb_ui8 << 8) + (int)(f_lsb_ui8)) + (int)1 ) & (int)0xFFFF );
    b4d4:	e55b300e 	ldrb	r3, [fp, #-14]
    b4d8:	e6ff3073 	uxth	r3, r3
    b4dc:	e1a03403 	lsl	r3, r3, #8
    b4e0:	e6ff2073 	uxth	r2, r3
    b4e4:	e55b300d 	ldrb	r3, [fp, #-13]
    b4e8:	e6ff3073 	uxth	r3, r3
    b4ec:	e0823003 	add	r3, r2, r3
    b4f0:	e6ff3073 	uxth	r3, r3
    b4f4:	e2633000 	rsb	r3, r3, #0
    b4f8:	e6ff3073 	uxth	r3, r3
    b4fc:	e14b30b6 	strh	r3, [fp, #-6]

	return l_compOfTwo_ui16;
    b500:	e15b30b6 	ldrh	r3, [fp, #-6]
    b504:	e6bf3073 	sxth	r3, r3
}
    b508:	e1a00003 	mov	r0, r3
    b50c:	e24bd000 	sub	sp, fp, #0
    b510:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    b514:	e12fff1e 	bx	lr

0000b518 <l_convertMagRawToSIUnit_f64>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline double l_convertMagRawToSIUnit_f64( signed short f_rawMagVal_i16, unsigned char f_scalingValueGauss_ui8 )
{
    b518:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    b51c:	e28db000 	add	fp, sp, #0
    b520:	e24dd01c 	sub	sp, sp, #28
    b524:	e1a02000 	mov	r2, r0
    b528:	e1a03001 	mov	r3, r1
    b52c:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
    b530:	e54b3017 	strb	r3, [fp, #-23]
	double			l_outputValue_f64 = 0;
    b534:	e3a02000 	mov	r2, #0
    b538:	e3a03000 	mov	r3, #0
    b53c:	e14b20fc 	strd	r2, [fp, #-12]
	const double	l_gaussToSI_f64 = 0.1E-3;	//1Gauss = 0.1mT = 0.1*10^(-3)T
    b540:	e59f2060 	ldr	r2, [pc, #96]	; b5a8 <l_convertMagRawToSIUnit_f64+0x90>
    b544:	e59f3060 	ldr	r3, [pc, #96]	; b5ac <l_convertMagRawToSIUnit_f64+0x94>
    b548:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

	// unitless [-1,1]
	l_outputValue_f64 = (double)f_rawMagVal_i16 / (double)SHRT_MAX;
    b54c:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
    b550:	ee053a90 	vmov	s11, r3
    b554:	eeb86be5 	vcvt.f64.s32	d6, s11
    b558:	ed9f7b10 	vldr	d7, [pc, #64]	; b5a0 <l_convertMagRawToSIUnit_f64+0x88>
    b55c:	ee867b07 	vdiv.f64	d7, d6, d7
    b560:	ed0b7b03 	vstr	d7, [fp, #-12]

	// Units: 1 * T*Gauss^(-1) * Gauss = m*s^(-2)
	l_outputValue_f64 = l_outputValue_f64 * l_gaussToSI_f64 * (double)f_scalingValueGauss_ui8;
    b564:	ed1b6b03 	vldr	d6, [fp, #-12]
    b568:	ed1b7b05 	vldr	d7, [fp, #-20]	; 0xffffffec
    b56c:	ee266b07 	vmul.f64	d6, d6, d7
    b570:	e55b3017 	ldrb	r3, [fp, #-23]
    b574:	ee053a90 	vmov	s11, r3
    b578:	eeb87b65 	vcvt.f64.u32	d7, s11
    b57c:	ee267b07 	vmul.f64	d7, d6, d7
    b580:	ed0b7b03 	vstr	d7, [fp, #-12]

	return l_outputValue_f64;	//Tesla
    b584:	e14b20dc 	ldrd	r2, [fp, #-12]
    b588:	ec432b17 	vmov	d7, r2, r3
}
    b58c:	eeb00b47 	vmov.f64	d0, d7
    b590:	e24bd000 	sub	sp, fp, #0
    b594:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    b598:	e12fff1e 	bx	lr
    b59c:	e1a00000 	nop			; (mov r0, r0)
    b5a0:	00000000 	.word	0x00000000
    b5a4:	40dfffc0 	.word	0x40dfffc0
    b5a8:	eb1c432d 	.word	0xeb1c432d
    b5ac:	3f1a36e2 	.word	0x3f1a36e2

0000b5b0 <l_convertAccRawToSIUnit_f64>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline double l_convertAccRawToSIUnit_f64( signed short f_rawAccVal_i16, unsigned char f_scalingValueG_ui8 )
{
    b5b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    b5b4:	e28db000 	add	fp, sp, #0
    b5b8:	e24dd01c 	sub	sp, sp, #28
    b5bc:	e1a02000 	mov	r2, r0
    b5c0:	e1a03001 	mov	r3, r1
    b5c4:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
    b5c8:	e54b3017 	strb	r3, [fp, #-23]
	double			l_outputValue_f64 	= 0;
    b5cc:	e3a02000 	mov	r2, #0
    b5d0:	e3a03000 	mov	r3, #0
    b5d4:	e14b20fc 	strd	r2, [fp, #-12]
	const double	l_gravityConst_f64 	= 9.81; // m*(s^-2) per G
    b5d8:	e59f2060 	ldr	r2, [pc, #96]	; b640 <l_convertAccRawToSIUnit_f64+0x90>
    b5dc:	e59f3060 	ldr	r3, [pc, #96]	; b644 <l_convertAccRawToSIUnit_f64+0x94>
    b5e0:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

	// unitless [-1,1]
	l_outputValue_f64 = (double)f_scalingValueG_ui8 * (double)f_rawAccVal_i16 / (double)SHRT_MAX;
    b5e4:	e55b3017 	ldrb	r3, [fp, #-23]
    b5e8:	ee053a90 	vmov	s11, r3
    b5ec:	eeb86b65 	vcvt.f64.u32	d6, s11
    b5f0:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
    b5f4:	ee053a90 	vmov	s11, r3
    b5f8:	eeb87be5 	vcvt.f64.s32	d7, s11
    b5fc:	ee266b07 	vmul.f64	d6, d6, d7
    b600:	ed9f7b0c 	vldr	d7, [pc, #48]	; b638 <l_convertAccRawToSIUnit_f64+0x88>
    b604:	ee867b07 	vdiv.f64	d7, d6, d7
    b608:	ed0b7b03 	vstr	d7, [fp, #-12]

	// Units: 1 * m*s^(-2)*G^(-1) * G = m*s^(-2)
	l_outputValue_f64 = l_outputValue_f64 * l_gravityConst_f64;
    b60c:	ed1b6b03 	vldr	d6, [fp, #-12]
    b610:	ed1b7b05 	vldr	d7, [fp, #-20]	; 0xffffffec
    b614:	ee267b07 	vmul.f64	d7, d6, d7
    b618:	ed0b7b03 	vstr	d7, [fp, #-12]

	return l_outputValue_f64;  // m*(s^-2)
    b61c:	e14b20dc 	ldrd	r2, [fp, #-12]
    b620:	ec432b17 	vmov	d7, r2, r3
}
    b624:	eeb00b47 	vmov.f64	d0, d7
    b628:	e24bd000 	sub	sp, fp, #0
    b62c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    b630:	e12fff1e 	bx	lr
    b634:	e1a00000 	nop			; (mov r0, r0)
    b638:	00000000 	.word	0x00000000
    b63c:	40dfffc0 	.word	0x40dfffc0
    b640:	51eb851f 	.word	0x51eb851f
    b644:	40239eb8 	.word	0x40239eb8

0000b648 <l_updateSensorState_vd>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline unsigned int l_updateSensorState_vd( halAccmag_sensorSelect f_sensor_en )
{
    b648:	e92d4800 	push	{fp, lr}
    b64c:	e28db004 	add	fp, sp, #4
    b650:	e24dd048 	sub	sp, sp, #72	; 0x48
    b654:	e50b0048 	str	r0, [fp, #-72]	; 0x48
	halAccmag_3dDoubleVector	l_accBuffer_st;
	halAccmag_3dDoubleVector	l_magBuffer_st;
	unsigned char				l_readBuffer_rg6ui8[6];
	signed short				l_tempComponent_i16 = 0;
    b658:	e3a03000 	mov	r3, #0
    b65c:	e14b30ba 	strh	r3, [fp, #-10]
	unsigned int				l_successState_bl = M_HAL_ACCMAG_SUCCESS_BL;
    b660:	e3a03000 	mov	r3, #0
    b664:	e50b3008 	str	r3, [fp, #-8]

	//init local data buffers with current values
	l_accBuffer_st = m_halAccmag_sensorState_st.acc;
    b668:	e59f3238 	ldr	r3, [pc, #568]	; b8a8 <l_updateSensorState_vd+0x260>
    b66c:	e24bc024 	sub	ip, fp, #36	; 0x24
    b670:	e1a0e003 	mov	lr, r3
    b674:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    b678:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    b67c:	e89e0003 	ldm	lr, {r0, r1}
    b680:	e88c0003 	stm	ip, {r0, r1}
	l_magBuffer_st = m_halAccmag_sensorState_st.mag;
    b684:	e59f321c 	ldr	r3, [pc, #540]	; b8a8 <l_updateSensorState_vd+0x260>
    b688:	e24bc03c 	sub	ip, fp, #60	; 0x3c
    b68c:	e283e018 	add	lr, r3, #24
    b690:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    b694:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    b698:	e89e0003 	ldm	lr, {r0, r1}
    b69c:	e88c0003 	stm	ip, {r0, r1}
	 *   (Byte 3) Y-Component, LSB
	 *   (Byte 4) Y-Component, MSB
	 *   (Byte 5) Z-Component, LSB
	 *   (Byte 6) Z-Component, MSB
	 */
	if ( (f_sensor_en == SENSOR_ACC_EN) || (f_sensor_en == SENSOR_BOTH_EN) )
    b6a0:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    b6a4:	e3530000 	cmp	r3, #0
    b6a8:	0a000002 	beq	b6b8 <l_updateSensorState_vd+0x70>
    b6ac:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    b6b0:	e3530002 	cmp	r3, #2
    b6b4:	1a000031 	bne	b780 <l_updateSensorState_vd+0x138>
	{
		if ( l_readI2cByteStream_bl(M_HAL_ACCMAG_OUT_X_L_A_UI8,l_readBuffer_rg6ui8, 6) == M_HAL_ACCMAG_SUCCESS_BL )
    b6b8:	e24b3044 	sub	r3, fp, #68	; 0x44
    b6bc:	e3a00028 	mov	r0, #40	; 0x28
    b6c0:	e1a01003 	mov	r1, r3
    b6c4:	e3a02006 	mov	r2, #6
    b6c8:	ebffff11 	bl	b314 <l_readI2cByteStream_bl>
    b6cc:	e1a03000 	mov	r3, r0
    b6d0:	e3530000 	cmp	r3, #0
    b6d4:	1a000027 	bne	b778 <l_updateSensorState_vd+0x130>
		{
			// x-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[0], l_readBuffer_rg6ui8[1]);
    b6d8:	e55b2044 	ldrb	r2, [fp, #-68]	; 0x44
    b6dc:	e55b3043 	ldrb	r3, [fp, #-67]	; 0x43
    b6e0:	e1a00002 	mov	r0, r2
    b6e4:	e1a01003 	mov	r1, r3
    b6e8:	ebffff70 	bl	b4b0 <l_twoCompOf16Bit_ui16>
    b6ec:	e1a03000 	mov	r3, r0
    b6f0:	e14b30ba 	strh	r3, [fp, #-10]
			l_accBuffer_st.x_f64 = l_convertAccRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_ACCSCALE_UI8 );
    b6f4:	e15b30fa 	ldrsh	r3, [fp, #-10]
    b6f8:	e1a00003 	mov	r0, r3
    b6fc:	e3a01008 	mov	r1, #8
    b700:	ebffffaa 	bl	b5b0 <l_convertAccRawToSIUnit_f64>
    b704:	eeb07b40 	vmov.f64	d7, d0
    b708:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc

			// y-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[2], l_readBuffer_rg6ui8[3]);
    b70c:	e55b2042 	ldrb	r2, [fp, #-66]	; 0x42
    b710:	e55b3041 	ldrb	r3, [fp, #-65]	; 0x41
    b714:	e1a00002 	mov	r0, r2
    b718:	e1a01003 	mov	r1, r3
    b71c:	ebffff63 	bl	b4b0 <l_twoCompOf16Bit_ui16>
    b720:	e1a03000 	mov	r3, r0
    b724:	e14b30ba 	strh	r3, [fp, #-10]
			l_accBuffer_st.y_f64 = l_convertAccRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_ACCSCALE_UI8 );
    b728:	e15b30fa 	ldrsh	r3, [fp, #-10]
    b72c:	e1a00003 	mov	r0, r3
    b730:	e3a01008 	mov	r1, #8
    b734:	ebffff9d 	bl	b5b0 <l_convertAccRawToSIUnit_f64>
    b738:	eeb07b40 	vmov.f64	d7, d0
    b73c:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4

			// z-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[4], l_readBuffer_rg6ui8[5]);
    b740:	e55b2040 	ldrb	r2, [fp, #-64]	; 0x40
    b744:	e55b303f 	ldrb	r3, [fp, #-63]	; 0x3f
    b748:	e1a00002 	mov	r0, r2
    b74c:	e1a01003 	mov	r1, r3
    b750:	ebffff56 	bl	b4b0 <l_twoCompOf16Bit_ui16>
    b754:	e1a03000 	mov	r3, r0
    b758:	e14b30ba 	strh	r3, [fp, #-10]
			l_accBuffer_st.z_f64 = l_convertAccRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_ACCSCALE_UI8 );
    b75c:	e15b30fa 	ldrsh	r3, [fp, #-10]
    b760:	e1a00003 	mov	r0, r3
    b764:	e3a01008 	mov	r1, #8
    b768:	ebffff90 	bl	b5b0 <l_convertAccRawToSIUnit_f64>
    b76c:	eeb07b40 	vmov.f64	d7, d0
    b770:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
    b774:	ea000001 	b	b780 <l_updateSensorState_vd+0x138>
		}else{
			l_successState_bl = M_HAL_ACCMAG_FAILED_BL;
    b778:	e3a03001 	mov	r3, #1
    b77c:	e50b3008 	str	r3, [fp, #-8]
	 *   (Byte 3) Y-Component, LSB
	 *   (Byte 4) Y-Component, MSB
	 *   (Byte 5) Z-Component, LSB
	 *   (Byte 6) Z-Component, MSB
	 */
	if ( (f_sensor_en == SENSOR_MAG_EN) || (f_sensor_en == SENSOR_BOTH_EN) )
    b780:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    b784:	e3530001 	cmp	r3, #1
    b788:	0a000002 	beq	b798 <l_updateSensorState_vd+0x150>
    b78c:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    b790:	e3530002 	cmp	r3, #2
    b794:	1a000031 	bne	b860 <l_updateSensorState_vd+0x218>
	{
		if ( l_readI2cByteStream_bl(M_HAL_ACCMAG_OUT_X_L_M_UI8,l_readBuffer_rg6ui8, 6) == M_HAL_ACCMAG_SUCCESS_BL )
    b798:	e24b3044 	sub	r3, fp, #68	; 0x44
    b79c:	e3a00008 	mov	r0, #8
    b7a0:	e1a01003 	mov	r1, r3
    b7a4:	e3a02006 	mov	r2, #6
    b7a8:	ebfffed9 	bl	b314 <l_readI2cByteStream_bl>
    b7ac:	e1a03000 	mov	r3, r0
    b7b0:	e3530000 	cmp	r3, #0
    b7b4:	1a000027 	bne	b858 <l_updateSensorState_vd+0x210>
		{
			// x-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[0], l_readBuffer_rg6ui8[1]);
    b7b8:	e55b2044 	ldrb	r2, [fp, #-68]	; 0x44
    b7bc:	e55b3043 	ldrb	r3, [fp, #-67]	; 0x43
    b7c0:	e1a00002 	mov	r0, r2
    b7c4:	e1a01003 	mov	r1, r3
    b7c8:	ebffff38 	bl	b4b0 <l_twoCompOf16Bit_ui16>
    b7cc:	e1a03000 	mov	r3, r0
    b7d0:	e14b30ba 	strh	r3, [fp, #-10]
			l_magBuffer_st.x_f64 = l_convertMagRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_MAGSCALE_UI8 );
    b7d4:	e15b30fa 	ldrsh	r3, [fp, #-10]
    b7d8:	e1a00003 	mov	r0, r3
    b7dc:	e3a01004 	mov	r1, #4
    b7e0:	ebffff4c 	bl	b518 <l_convertMagRawToSIUnit_f64>
    b7e4:	eeb07b40 	vmov.f64	d7, d0
    b7e8:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4

			// y-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[2], l_readBuffer_rg6ui8[3]);
    b7ec:	e55b2042 	ldrb	r2, [fp, #-66]	; 0x42
    b7f0:	e55b3041 	ldrb	r3, [fp, #-65]	; 0x41
    b7f4:	e1a00002 	mov	r0, r2
    b7f8:	e1a01003 	mov	r1, r3
    b7fc:	ebffff2b 	bl	b4b0 <l_twoCompOf16Bit_ui16>
    b800:	e1a03000 	mov	r3, r0
    b804:	e14b30ba 	strh	r3, [fp, #-10]
			l_magBuffer_st.y_f64 = l_convertMagRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_MAGSCALE_UI8 );
    b808:	e15b30fa 	ldrsh	r3, [fp, #-10]
    b80c:	e1a00003 	mov	r0, r3
    b810:	e3a01004 	mov	r1, #4
    b814:	ebffff3f 	bl	b518 <l_convertMagRawToSIUnit_f64>
    b818:	eeb07b40 	vmov.f64	d7, d0
    b81c:	ed0b7b0d 	vstr	d7, [fp, #-52]	; 0xffffffcc

			// z-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[4], l_readBuffer_rg6ui8[5]);
    b820:	e55b2040 	ldrb	r2, [fp, #-64]	; 0x40
    b824:	e55b303f 	ldrb	r3, [fp, #-63]	; 0x3f
    b828:	e1a00002 	mov	r0, r2
    b82c:	e1a01003 	mov	r1, r3
    b830:	ebffff1e 	bl	b4b0 <l_twoCompOf16Bit_ui16>
    b834:	e1a03000 	mov	r3, r0
    b838:	e14b30ba 	strh	r3, [fp, #-10]
			l_magBuffer_st.z_f64 = l_convertMagRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_MAGSCALE_UI8 );
    b83c:	e15b30fa 	ldrsh	r3, [fp, #-10]
    b840:	e1a00003 	mov	r0, r3
    b844:	e3a01004 	mov	r1, #4
    b848:	ebffff32 	bl	b518 <l_convertMagRawToSIUnit_f64>
    b84c:	eeb07b40 	vmov.f64	d7, d0
    b850:	ed0b7b0b 	vstr	d7, [fp, #-44]	; 0xffffffd4
    b854:	ea000001 	b	b860 <l_updateSensorState_vd+0x218>
		}else{
			l_successState_bl = M_HAL_ACCMAG_FAILED_BL;
    b858:	e3a03001 	mov	r3, #1
    b85c:	e50b3008 	str	r3, [fp, #-8]
		}
	}

	// update sensor state storage values
	m_halAccmag_sensorState_st.acc = l_accBuffer_st;
    b860:	e59f3040 	ldr	r3, [pc, #64]	; b8a8 <l_updateSensorState_vd+0x260>
    b864:	e1a0c003 	mov	ip, r3
    b868:	e24be024 	sub	lr, fp, #36	; 0x24
    b86c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    b870:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    b874:	e89e0003 	ldm	lr, {r0, r1}
    b878:	e88c0003 	stm	ip, {r0, r1}
	m_halAccmag_sensorState_st.mag = l_magBuffer_st;
    b87c:	e59f3024 	ldr	r3, [pc, #36]	; b8a8 <l_updateSensorState_vd+0x260>
    b880:	e283c018 	add	ip, r3, #24
    b884:	e24be03c 	sub	lr, fp, #60	; 0x3c
    b888:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    b88c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    b890:	e89e0003 	ldm	lr, {r0, r1}
    b894:	e88c0003 	stm	ip, {r0, r1}

	return l_successState_bl;
    b898:	e51b3008 	ldr	r3, [fp, #-8]
}
    b89c:	e1a00003 	mov	r0, r3
    b8a0:	e24bd004 	sub	sp, fp, #4
    b8a4:	e8bd8800 	pop	{fp, pc}
    b8a8:	000188d8 	.word	0x000188d8

0000b8ac <g_halAccmag_initSensor_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_initSensor_bl(void)
{
    b8ac:	e92d4800 	push	{fp, lr}
    b8b0:	e28db004 	add	fp, sp, #4
    b8b4:	e24dd008 	sub	sp, sp, #8
	unsigned char l_configRegisters_rg8ui8[8];	//buffer for 8 control register bytes

	//Identify sensor
	if ( l_readI2cByte_ui8( M_HAL_ACCMAG_WHO_AM_I_UI8 ) != M_HAL_ACCMAG_WHO_AM_I_PATTERN_UI8 )
    b8b8:	e3a0000f 	mov	r0, #15
    b8bc:	ebfffe6f 	bl	b280 <l_readI2cByte_ui8>
    b8c0:	e1a03000 	mov	r3, r0
    b8c4:	e3530049 	cmp	r3, #73	; 0x49
    b8c8:	0a000001 	beq	b8d4 <g_halAccmag_initSensor_bl+0x28>
	{
		// sensor could not be identified --> abort initialization
		return M_HAL_ACCMAG_FAILED_BL;
    b8cc:	e3a03001 	mov	r3, #1
    b8d0:	ea00001a 	b	b940 <g_halAccmag_initSensor_bl+0x94>

	/*
	 * ACCELEROMETER
	 */
	// CTRL0: no FIFO (default values)
	l_configRegisters_rg8ui8[0] = 0b00000000;
    b8d4:	e3a03000 	mov	r3, #0
    b8d8:	e54b300c 	strb	r3, [fp, #-12]

	// CTRL1: Enable accelerometer, 800Hz sampling
	l_configRegisters_rg8ui8[1] = (		M_HAL_ACCMAG_CTRL1_MASK_AXEN_UI8
    b8dc:	e3e03068 	mvn	r3, #104	; 0x68
    b8e0:	e54b300b 	strb	r3, [fp, #-11]
			| 	M_HAL_ACCMAG_CTRL1_MASK_AYEN_UI8
			|	M_HAL_ACCMAG_CTRL1_MASK_AZEN_UI8
			| 	M_HAL_ACCMAG_CTRL1_MASK_ACC_RATE_800HZ_UI8);

	// CTRL2 register (default values): Set scale +/-8G (accelerometer) & Anti-Alias-Filter ~200Hz
	l_configRegisters_rg8ui8[2] = ( 	M_HAL_ACCMAG_CTRL2_MASK_ACC_SCALE_8G_UI8
    b8e4:	e3a03058 	mov	r3, #88	; 0x58
    b8e8:	e54b300a 	strb	r3, [fp, #-10]
									| 	M_HAL_ACCMAG_CTRL2_MASK_ACC_BANDWIDTH_194HZ_UI8 );

	// CTRL3 register (default values): Disable all interrupts
	l_configRegisters_rg8ui8[3] = 0b00000000;
    b8ec:	e3a03000 	mov	r3, #0
    b8f0:	e54b3009 	strb	r3, [fp, #-9]

	//CTRL4 register (default values)
	l_configRegisters_rg8ui8[4] = 0b00000000;
    b8f4:	e3a03000 	mov	r3, #0
    b8f8:	e54b3008 	strb	r3, [fp, #-8]

	/*
	 * MAGNETOMETER
	 */
	// CTRL5 register: Disable Temp.-sensor, set high-resolution, set 100Hz data rate
	l_configRegisters_rg8ui8[5] = (		M_HAL_ACCMAG_CTRL5_MASK_MAG_RES_HIGH_UI8
    b8fc:	e3a03074 	mov	r3, #116	; 0x74
    b900:	e54b3007 	strb	r3, [fp, #-7]
			| 	M_HAL_ACCMAG_CTRL5_MASK_MAG_RATE_100HZ_UI8 );

	// CTRL6 register: set scale +/-0.4mT
	l_configRegisters_rg8ui8[6] = M_HAL_ACCMAG_CTRL6_MASK_MAG_SCALE_4GAUSS_UI8;
    b904:	e3a03040 	mov	r3, #64	; 0x40
    b908:	e54b3006 	strb	r3, [fp, #-6]

	// CTRL7 register (default values): set continuous-conversion mode (magnetometer)
	l_configRegisters_rg8ui8[7] = M_HAL_ACCMAG_CTRL7_MASK_MAG_SENSMODE_CONTINOUS_UI8;
    b90c:	e3a03000 	mov	r3, #0
    b910:	e54b3005 	strb	r3, [fp, #-5]


	// send config
	if ( l_writeI2cByteStream_bl(M_HAL_ACCMAG_CTRL0_UI8, l_configRegisters_rg8ui8, sizeof(l_configRegisters_rg8ui8) ) == M_HAL_ACCMAG_FAILED_BL )
    b914:	e24b300c 	sub	r3, fp, #12
    b918:	e3a0001f 	mov	r0, #31
    b91c:	e1a01003 	mov	r1, r3
    b920:	e3a02008 	mov	r2, #8
    b924:	ebfffea4 	bl	b3bc <l_writeI2cByteStream_bl>
    b928:	e1a03000 	mov	r3, r0
    b92c:	e3530001 	cmp	r3, #1
    b930:	1a000001 	bne	b93c <g_halAccmag_initSensor_bl+0x90>
	{
		// setting register CTRL1 failed
		return M_HAL_ACCMAG_FAILED_BL;
    b934:	e3a03001 	mov	r3, #1
    b938:	ea000000 	b	b940 <g_halAccmag_initSensor_bl+0x94>
	}

	return M_HAL_ACCMAG_SUCCESS_BL;
    b93c:	e3a03000 	mov	r3, #0
}
    b940:	e1a00003 	mov	r0, r3
    b944:	e24bd004 	sub	sp, fp, #4
    b948:	e8bd8800 	pop	{fp, pc}

0000b94c <g_halAccmag_triggerAccUpdate_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_triggerAccUpdate_bl( void )
{
    b94c:	e92d4800 	push	{fp, lr}
    b950:	e28db004 	add	fp, sp, #4
	return l_updateSensorState_vd(SENSOR_ACC_EN);
    b954:	e3a00000 	mov	r0, #0
    b958:	ebffff3a 	bl	b648 <l_updateSensorState_vd>
    b95c:	e1a03000 	mov	r3, r0
}
    b960:	e1a00003 	mov	r0, r3
    b964:	e8bd8800 	pop	{fp, pc}

0000b968 <g_halAccmag_triggerMagUpdate_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_triggerMagUpdate_bl( void )
{
    b968:	e92d4800 	push	{fp, lr}
    b96c:	e28db004 	add	fp, sp, #4
	return l_updateSensorState_vd(SENSOR_MAG_EN);
    b970:	e3a00001 	mov	r0, #1
    b974:	ebffff33 	bl	b648 <l_updateSensorState_vd>
    b978:	e1a03000 	mov	r3, r0
}
    b97c:	e1a00003 	mov	r0, r3
    b980:	e8bd8800 	pop	{fp, pc}

0000b984 <g_halAccmag_triggerFullUpdate_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_triggerFullUpdate_bl( void )
{
    b984:	e92d4800 	push	{fp, lr}
    b988:	e28db004 	add	fp, sp, #4
	return l_updateSensorState_vd(SENSOR_BOTH_EN);
    b98c:	e3a00002 	mov	r0, #2
    b990:	ebffff2c 	bl	b648 <l_updateSensorState_vd>
    b994:	e1a03000 	mov	r3, r0
}
    b998:	e1a00003 	mov	r0, r3
    b99c:	e8bd8800 	pop	{fp, pc}

0000b9a0 <g_halAccmag_getAccVector_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halAccmag_3dDoubleVector g_halAccmag_getAccVector_st( void )
{
    b9a0:	e92d4830 	push	{r4, r5, fp, lr}
    b9a4:	e28db00c 	add	fp, sp, #12
    b9a8:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_halAccmag_sensorState_st.acc;
    b9ac:	e59f3040 	ldr	r3, [pc, #64]	; b9f4 <g_halAccmag_getAccVector_st+0x54>
    b9b0:	e24bc024 	sub	ip, fp, #36	; 0x24
    b9b4:	e1a0e003 	mov	lr, r3
    b9b8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    b9bc:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    b9c0:	e89e0003 	ldm	lr, {r0, r1}
    b9c4:	e88c0003 	stm	ip, {r0, r1}
    b9c8:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    b9cc:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    b9d0:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    b9d4:	ec454b15 	vmov	d5, r4, r5
    b9d8:	ec410b16 	vmov	d6, r0, r1
    b9dc:	ec432b17 	vmov	d7, r2, r3
}
    b9e0:	eeb00b45 	vmov.f64	d0, d5
    b9e4:	eeb01b46 	vmov.f64	d1, d6
    b9e8:	eeb02b47 	vmov.f64	d2, d7
    b9ec:	e24bd00c 	sub	sp, fp, #12
    b9f0:	e8bd8830 	pop	{r4, r5, fp, pc}
    b9f4:	000188d8 	.word	0x000188d8

0000b9f8 <g_halAccmag_getMagVector_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halAccmag_3dDoubleVector g_halAccmag_getMagVector_st( void )
{
    b9f8:	e92d4830 	push	{r4, r5, fp, lr}
    b9fc:	e28db00c 	add	fp, sp, #12
    ba00:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_halAccmag_sensorState_st.mag;
    ba04:	e59f3040 	ldr	r3, [pc, #64]	; ba4c <g_halAccmag_getMagVector_st+0x54>
    ba08:	e24bc024 	sub	ip, fp, #36	; 0x24
    ba0c:	e283e018 	add	lr, r3, #24
    ba10:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    ba14:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    ba18:	e89e0003 	ldm	lr, {r0, r1}
    ba1c:	e88c0003 	stm	ip, {r0, r1}
    ba20:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    ba24:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    ba28:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    ba2c:	ec454b15 	vmov	d5, r4, r5
    ba30:	ec410b16 	vmov	d6, r0, r1
    ba34:	ec432b17 	vmov	d7, r2, r3
}
    ba38:	eeb00b45 	vmov.f64	d0, d5
    ba3c:	eeb01b46 	vmov.f64	d1, d6
    ba40:	eeb02b47 	vmov.f64	d2, d7
    ba44:	e24bd00c 	sub	sp, fp, #12
    ba48:	e8bd8830 	pop	{r4, r5, fp, pc}
    ba4c:	000188d8 	.word	0x000188d8

0000ba50 <g_halAccmag_getAccMagContainer_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halAccmag_dataContainer	g_halAccmag_getAccMagContainer_st( void )
{
    ba50:	e92d4800 	push	{fp, lr}
    ba54:	e28db004 	add	fp, sp, #4
    ba58:	e24dd008 	sub	sp, sp, #8
    ba5c:	e50b0008 	str	r0, [fp, #-8]
	return m_halAccmag_sensorState_st;
    ba60:	e51b2008 	ldr	r2, [fp, #-8]
    ba64:	e59f3028 	ldr	r3, [pc, #40]	; ba94 <g_halAccmag_getAccMagContainer_st+0x44>
    ba68:	e1a0c002 	mov	ip, r2
    ba6c:	e1a0e003 	mov	lr, r3
    ba70:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    ba74:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    ba78:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    ba7c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    ba80:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
    ba84:	e88c000f 	stm	ip, {r0, r1, r2, r3}
}
    ba88:	e51b0008 	ldr	r0, [fp, #-8]
    ba8c:	e24bd004 	sub	sp, fp, #4
    ba90:	e8bd8800 	pop	{fp, pc}
    ba94:	000188d8 	.word	0x000188d8

0000ba98 <g_halBaro_initBaro_i32>:
 * 2015/05/19 juscgs00:
 * - removed unused local variable 'l_ReadBuffer_ui8' (compiler warning)
 * \endinternal
 ********************************************************************** */
int g_halBaro_initBaro_i32(void)
{
    ba98:	e92d4800 	push	{fp, lr}
    ba9c:	e28db004 	add	fp, sp, #4
	static unsigned char l_WriteBuffer_ui8[3];

	//RES_CONF(0x10)
	l_WriteBuffer_ui8[0]=M_HAL_BARO_SINGLE_FLAG_UI8 | M_HAL_BARO_RES_CONF_UI8;
    baa0:	e59f3090 	ldr	r3, [pc, #144]	; bb38 <g_halBaro_initBaro_i32+0xa0>
    baa4:	e3a02010 	mov	r2, #16
    baa8:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]= M_HAL_BARO_TEMP_RES_CONF_128_UI8 | M_HAL_BARO_PRES_RES_CONF_512_UI8;
    baac:	e59f3084 	ldr	r3, [pc, #132]	; bb38 <g_halBaro_initBaro_i32+0xa0>
    bab0:	e3a0207a 	mov	r2, #122	; 0x7a
    bab4:	e5c32001 	strb	r2, [r3, #1]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
    bab8:	e3a0005c 	mov	r0, #92	; 0x5c
    babc:	e59f1074 	ldr	r1, [pc, #116]	; bb38 <g_halBaro_initBaro_i32+0xa0>
    bac0:	e3a02002 	mov	r2, #2
    bac4:	eb0003a3 	bl	c958 <g_lldI2c_WriteI2c_bl>
    bac8:	e1a03000 	mov	r3, r0
    bacc:	e3530000 	cmp	r3, #0
    bad0:	0a000001 	beq	badc <g_halBaro_initBaro_i32+0x44>
	{return -1;}
    bad4:	e3e03000 	mvn	r3, #0
    bad8:	ea000014 	b	bb30 <g_halBaro_initBaro_i32+0x98>

	usleep(100000);
    badc:	e59f0058 	ldr	r0, [pc, #88]	; bb3c <g_halBaro_initBaro_i32+0xa4>
    bae0:	ebfff3ac 	bl	8998 <_init+0x98>

	//CTRL_REG1(0x20) = 0b11000100		setting Speed of Pressure to 25Hz and Temperature to 1Hz
										//REMARK: setting both Sensors to the same value did not work!!!
	//CTRL_REG2(0x21) = 0b10000000
	l_WriteBuffer_ui8[0]=M_HAL_BARO_MULTIPLE_FLAG_UI8 | M_HAL_BARO_CTRL_REG1_UI8;
    bae4:	e59f304c 	ldr	r3, [pc, #76]	; bb38 <g_halBaro_initBaro_i32+0xa0>
    bae8:	e3e0205f 	mvn	r2, #95	; 0x5f
    baec:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]=M_HAL_BARO_CTRL_REG1_PD_UI8|M_HAL_BARO_CTRL_REG1_DATARATE_P25HZ_T1HZ_UI8;
    baf0:	e59f3040 	ldr	r3, [pc, #64]	; bb38 <g_halBaro_initBaro_i32+0xa0>
    baf4:	e3e0203f 	mvn	r2, #63	; 0x3f
    baf8:	e5c32001 	strb	r2, [r3, #1]
	l_WriteBuffer_ui8[2]=M_HAL_BARO_CTRL_REG2_BOOT_UI8;
    bafc:	e59f3034 	ldr	r3, [pc, #52]	; bb38 <g_halBaro_initBaro_i32+0xa0>
    bb00:	e3e0207f 	mvn	r2, #127	; 0x7f
    bb04:	e5c32002 	strb	r2, [r3, #2]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
    bb08:	e3a0005c 	mov	r0, #92	; 0x5c
    bb0c:	e59f1024 	ldr	r1, [pc, #36]	; bb38 <g_halBaro_initBaro_i32+0xa0>
    bb10:	e3a02003 	mov	r2, #3
    bb14:	eb00038f 	bl	c958 <g_lldI2c_WriteI2c_bl>
    bb18:	e1a03000 	mov	r3, r0
    bb1c:	e3530000 	cmp	r3, #0
    bb20:	0a000001 	beq	bb2c <g_halBaro_initBaro_i32+0x94>
	{return -1;}
    bb24:	e3e03000 	mvn	r3, #0
    bb28:	ea000000 	b	bb30 <g_halBaro_initBaro_i32+0x98>

	return 0;
    bb2c:	e3a03000 	mov	r3, #0
}
    bb30:	e1a00003 	mov	r0, r3
    bb34:	e8bd8800 	pop	{fp, pc}
    bb38:	00018918 	.word	0x00018918
    bb3c:	000186a0 	.word	0x000186a0

0000bb40 <g_halBaro_getPressure_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halBaro_getPressure_f64(void)
{
    bb40:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    bb44:	e28db000 	add	fp, sp, #0
	return m_pressure_f64;
    bb48:	e59f3014 	ldr	r3, [pc, #20]	; bb64 <g_halBaro_getPressure_f64+0x24>
    bb4c:	e1c320d0 	ldrd	r2, [r3]
    bb50:	ec432b17 	vmov	d7, r2, r3
}
    bb54:	eeb00b47 	vmov.f64	d0, d7
    bb58:	e24bd000 	sub	sp, fp, #0
    bb5c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    bb60:	e12fff1e 	bx	lr
    bb64:	00018910 	.word	0x00018910

0000bb68 <g_halBaro_getTemperature_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halBaro_getTemperature_f64(void)
{
    bb68:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    bb6c:	e28db000 	add	fp, sp, #0
	return m_temperature_f64;
    bb70:	e59f3014 	ldr	r3, [pc, #20]	; bb8c <g_halBaro_getTemperature_f64+0x24>
    bb74:	e1c320d0 	ldrd	r2, [r3]
    bb78:	ec432b17 	vmov	d7, r2, r3
}
    bb7c:	eeb00b47 	vmov.f64	d0, d7
    bb80:	e24bd000 	sub	sp, fp, #0
    bb84:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    bb88:	e12fff1e 	bx	lr
    bb8c:	00018908 	.word	0x00018908

0000bb90 <g_halBaro_readPressureFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halBaro_readPressureFromI2C_i32(void)
{
    bb90:	e92d4800 	push	{fp, lr}
    bb94:	e28db004 	add	fp, sp, #4
    bb98:	e24dd010 	sub	sp, sp, #16
	unsigned char l_ReadBuffer_ui8[3]={0,0,0};
    bb9c:	e3a03000 	mov	r3, #0
    bba0:	e54b300c 	strb	r3, [fp, #-12]
    bba4:	e3a03000 	mov	r3, #0
    bba8:	e54b300b 	strb	r3, [fp, #-11]
    bbac:	e3a03000 	mov	r3, #0
    bbb0:	e54b300a 	strb	r3, [fp, #-10]
	unsigned char l_rotatedReadBuffer_ui8[3]={0,0,0};
    bbb4:	e3a03000 	mov	r3, #0
    bbb8:	e54b3010 	strb	r3, [fp, #-16]
    bbbc:	e3a03000 	mov	r3, #0
    bbc0:	e54b300f 	strb	r3, [fp, #-15]
    bbc4:	e3a03000 	mov	r3, #0
    bbc8:	e54b300e 	strb	r3, [fp, #-14]
	unsigned char l_WriteBuffer_ui8[3];
	int l_countVariable_i32=0;
    bbcc:	e3a03000 	mov	r3, #0
    bbd0:	e50b3008 	str	r3, [fp, #-8]

	//maybe check STATUS_REG if new value is available

	//set SUB Address to Pressure register PRESS_OUT_XL and activate multiple read
	l_WriteBuffer_ui8[0]=M_HAL_BARO_MULTIPLE_FLAG_UI8 | M_HAL_BARO_PRESS_OUT_XL_UI8;
    bbd4:	e3e03057 	mvn	r3, #87	; 0x57
    bbd8:	e54b3014 	strb	r3, [fp, #-20]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    bbdc:	e24b3014 	sub	r3, fp, #20
    bbe0:	e3a0005c 	mov	r0, #92	; 0x5c
    bbe4:	e1a01003 	mov	r1, r3
    bbe8:	e3a02001 	mov	r2, #1
    bbec:	eb000359 	bl	c958 <g_lldI2c_WriteI2c_bl>
    bbf0:	e1a03000 	mov	r3, r0
    bbf4:	e3530000 	cmp	r3, #0
    bbf8:	0a000001 	beq	bc04 <g_halBaro_readPressureFromI2C_i32+0x74>
	{return -1;}
    bbfc:	e3e03000 	mvn	r3, #0
    bc00:	ea00002f 	b	bcc4 <g_halBaro_readPressureFromI2C_i32+0x134>


	//Read from PRESS_OUT_XL(0x28),PRESS_OUT_L(0x29),PRESS_OUT_H(0x2A)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
    bc04:	e24b300c 	sub	r3, fp, #12
    bc08:	e3a0005c 	mov	r0, #92	; 0x5c
    bc0c:	e1a01003 	mov	r1, r3
    bc10:	e3a02003 	mov	r2, #3
    bc14:	eb000387 	bl	ca38 <g_lldI2c_ReadI2c_bl>
    bc18:	e1a03000 	mov	r3, r0
    bc1c:	e3530000 	cmp	r3, #0
    bc20:	0a000001 	beq	bc2c <g_halBaro_readPressureFromI2C_i32+0x9c>
	{return -1;}
    bc24:	e3e03000 	mvn	r3, #0
    bc28:	ea000025 	b	bcc4 <g_halBaro_readPressureFromI2C_i32+0x134>
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<3;l_countVariable_i32++)
    bc2c:	e3a03000 	mov	r3, #0
    bc30:	e50b3008 	str	r3, [fp, #-8]
    bc34:	ea00000f 	b	bc78 <g_halBaro_readPressureFromI2C_i32+0xe8>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[2-l_countVariable_i32];
    bc38:	e51b3008 	ldr	r3, [fp, #-8]
    bc3c:	e2632002 	rsb	r2, r3, #2
    bc40:	e3e03007 	mvn	r3, #7
    bc44:	e24b0004 	sub	r0, fp, #4
    bc48:	e0802002 	add	r2, r0, r2
    bc4c:	e0823003 	add	r3, r2, r3
    bc50:	e5d32000 	ldrb	r2, [r3]
    bc54:	e3e0300b 	mvn	r3, #11
    bc58:	e51b1008 	ldr	r1, [fp, #-8]
    bc5c:	e24b0004 	sub	r0, fp, #4
    bc60:	e0801001 	add	r1, r0, r1
    bc64:	e0813003 	add	r3, r1, r3
    bc68:	e5c32000 	strb	r2, [r3]
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
	{return -1;}
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<3;l_countVariable_i32++)
    bc6c:	e51b3008 	ldr	r3, [fp, #-8]
    bc70:	e2833001 	add	r3, r3, #1
    bc74:	e50b3008 	str	r3, [fp, #-8]
    bc78:	e51b3008 	ldr	r3, [fp, #-8]
    bc7c:	e3530002 	cmp	r3, #2
    bc80:	daffffec 	ble	bc38 <g_halBaro_readPressureFromI2C_i32+0xa8>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[2-l_countVariable_i32];
		}

		m_pressure_f64=(double)g_halLib_twoComplement2Int(l_rotatedReadBuffer_ui8,3);
    bc84:	e24b3010 	sub	r3, fp, #16
    bc88:	e1a00003 	mov	r0, r3
    bc8c:	e3a01003 	mov	r1, #3
    bc90:	eb000184 	bl	c2a8 <g_halLib_twoComplement2Int>
    bc94:	e1a03000 	mov	r3, r0
    bc98:	ee063a90 	vmov	s13, r3
    bc9c:	eeb87be6 	vcvt.f64.s32	d7, s13
    bca0:	e59f3030 	ldr	r3, [pc, #48]	; bcd8 <g_halBaro_readPressureFromI2C_i32+0x148>
    bca4:	ed837b00 	vstr	d7, [r3]
		m_pressure_f64=m_pressure_f64/4096;
    bca8:	e59f3028 	ldr	r3, [pc, #40]	; bcd8 <g_halBaro_readPressureFromI2C_i32+0x148>
    bcac:	ed936b00 	vldr	d6, [r3]
    bcb0:	ed9f7b06 	vldr	d7, [pc, #24]	; bcd0 <g_halBaro_readPressureFromI2C_i32+0x140>
    bcb4:	ee867b07 	vdiv.f64	d7, d6, d7
    bcb8:	e59f3018 	ldr	r3, [pc, #24]	; bcd8 <g_halBaro_readPressureFromI2C_i32+0x148>
    bcbc:	ed837b00 	vstr	d7, [r3]
	}

	return 0;
    bcc0:	e3a03000 	mov	r3, #0
}
    bcc4:	e1a00003 	mov	r0, r3
    bcc8:	e24bd004 	sub	sp, fp, #4
    bccc:	e8bd8800 	pop	{fp, pc}
    bcd0:	00000000 	.word	0x00000000
    bcd4:	40b00000 	.word	0x40b00000
    bcd8:	00018910 	.word	0x00018910

0000bcdc <g_halBaro_readTemperatureFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halBaro_readTemperatureFromI2C_i32(void)
{
    bcdc:	e92d4800 	push	{fp, lr}
    bce0:	e28db004 	add	fp, sp, #4
    bce4:	e24dd010 	sub	sp, sp, #16
	unsigned char l_ReadBuffer_ui8[2]={0,0};
    bce8:	e3a03000 	mov	r3, #0
    bcec:	e54b300c 	strb	r3, [fp, #-12]
    bcf0:	e3a03000 	mov	r3, #0
    bcf4:	e54b300b 	strb	r3, [fp, #-11]
	unsigned char l_rotatedReadBuffer_ui8[2]={0,0};
    bcf8:	e3a03000 	mov	r3, #0
    bcfc:	e54b3010 	strb	r3, [fp, #-16]
    bd00:	e3a03000 	mov	r3, #0
    bd04:	e54b300f 	strb	r3, [fp, #-15]
	unsigned char l_WriteBuffer_ui8[3];
	int l_countVariable_i32=0;
    bd08:	e3a03000 	mov	r3, #0
    bd0c:	e50b3008 	str	r3, [fp, #-8]

	//maybe check STATUS_REG if new value is available

	//set SUB Address to Temperature register PRESS_OUT_XL and activate multiple read
	l_WriteBuffer_ui8[0]=M_HAL_BARO_MULTIPLE_FLAG_UI8 | M_HAL_BARO_TEMP_OUT_L_UI8;
    bd10:	e3e03054 	mvn	r3, #84	; 0x54
    bd14:	e54b3014 	strb	r3, [fp, #-20]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    bd18:	e24b3014 	sub	r3, fp, #20
    bd1c:	e3a0005c 	mov	r0, #92	; 0x5c
    bd20:	e1a01003 	mov	r1, r3
    bd24:	e3a02001 	mov	r2, #1
    bd28:	eb00030a 	bl	c958 <g_lldI2c_WriteI2c_bl>
    bd2c:	e1a03000 	mov	r3, r0
    bd30:	e3530000 	cmp	r3, #0
    bd34:	0a000001 	beq	bd40 <g_halBaro_readTemperatureFromI2C_i32+0x64>
	{return -1;}
    bd38:	e3e03000 	mvn	r3, #0
    bd3c:	ea000031 	b	be08 <g_halBaro_readTemperatureFromI2C_i32+0x12c>


	//Read from TEMP_OUT_L (2Bh), TEMP_OUT_H (2Ch)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
    bd40:	e24b300c 	sub	r3, fp, #12
    bd44:	e3a0005c 	mov	r0, #92	; 0x5c
    bd48:	e1a01003 	mov	r1, r3
    bd4c:	e3a02002 	mov	r2, #2
    bd50:	eb000338 	bl	ca38 <g_lldI2c_ReadI2c_bl>
    bd54:	e1a03000 	mov	r3, r0
    bd58:	e3530000 	cmp	r3, #0
    bd5c:	0a000001 	beq	bd68 <g_halBaro_readTemperatureFromI2C_i32+0x8c>
	{return -1;}
    bd60:	e3e03000 	mvn	r3, #0
    bd64:	ea000027 	b	be08 <g_halBaro_readTemperatureFromI2C_i32+0x12c>
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    bd68:	e3a03000 	mov	r3, #0
    bd6c:	e50b3008 	str	r3, [fp, #-8]
    bd70:	ea00000f 	b	bdb4 <g_halBaro_readTemperatureFromI2C_i32+0xd8>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
    bd74:	e51b3008 	ldr	r3, [fp, #-8]
    bd78:	e2632001 	rsb	r2, r3, #1
    bd7c:	e3e03007 	mvn	r3, #7
    bd80:	e24b0004 	sub	r0, fp, #4
    bd84:	e0802002 	add	r2, r0, r2
    bd88:	e0823003 	add	r3, r2, r3
    bd8c:	e5d32000 	ldrb	r2, [r3]
    bd90:	e3e0300b 	mvn	r3, #11
    bd94:	e51b1008 	ldr	r1, [fp, #-8]
    bd98:	e24b0004 	sub	r0, fp, #4
    bd9c:	e0801001 	add	r1, r0, r1
    bda0:	e0813003 	add	r3, r1, r3
    bda4:	e5c32000 	strb	r2, [r3]
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
	{return -1;}
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    bda8:	e51b3008 	ldr	r3, [fp, #-8]
    bdac:	e2833001 	add	r3, r3, #1
    bdb0:	e50b3008 	str	r3, [fp, #-8]
    bdb4:	e51b3008 	ldr	r3, [fp, #-8]
    bdb8:	e3530001 	cmp	r3, #1
    bdbc:	daffffec 	ble	bd74 <g_halBaro_readTemperatureFromI2C_i32+0x98>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
		}

		m_temperature_f64=(double)g_halLib_twoComplement2Int(l_rotatedReadBuffer_ui8,2);
    bdc0:	e24b3010 	sub	r3, fp, #16
    bdc4:	e1a00003 	mov	r0, r3
    bdc8:	e3a01002 	mov	r1, #2
    bdcc:	eb000135 	bl	c2a8 <g_halLib_twoComplement2Int>
    bdd0:	e1a03000 	mov	r3, r0
    bdd4:	ee063a90 	vmov	s13, r3
    bdd8:	eeb87be6 	vcvt.f64.s32	d7, s13
    bddc:	e59f3044 	ldr	r3, [pc, #68]	; be28 <g_halBaro_readTemperatureFromI2C_i32+0x14c>
    bde0:	ed837b00 	vstr	d7, [r3]
		m_temperature_f64=42.5+m_temperature_f64/480;
    bde4:	e59f303c 	ldr	r3, [pc, #60]	; be28 <g_halBaro_readTemperatureFromI2C_i32+0x14c>
    bde8:	ed936b00 	vldr	d6, [r3]
    bdec:	ed9f7b09 	vldr	d7, [pc, #36]	; be18 <g_halBaro_readTemperatureFromI2C_i32+0x13c>
    bdf0:	ee866b07 	vdiv.f64	d6, d6, d7
    bdf4:	ed9f7b09 	vldr	d7, [pc, #36]	; be20 <g_halBaro_readTemperatureFromI2C_i32+0x144>
    bdf8:	ee367b07 	vadd.f64	d7, d6, d7
    bdfc:	e59f3024 	ldr	r3, [pc, #36]	; be28 <g_halBaro_readTemperatureFromI2C_i32+0x14c>
    be00:	ed837b00 	vstr	d7, [r3]
	}

	return 0;
    be04:	e3a03000 	mov	r3, #0
}
    be08:	e1a00003 	mov	r0, r3
    be0c:	e24bd004 	sub	sp, fp, #4
    be10:	e8bd8800 	pop	{fp, pc}
    be14:	e1a00000 	nop			; (mov r0, r0)
    be18:	00000000 	.word	0x00000000
    be1c:	407e0000 	.word	0x407e0000
    be20:	00000000 	.word	0x00000000
    be24:	40454000 	.word	0x40454000
    be28:	00018908 	.word	0x00018908
    be2c:	e1a00000 	nop			; (mov r0, r0)

0000be30 <g_halGyro_initGyro_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGyro_initGyro_i32(void)
{
    be30:	e92d4800 	push	{fp, lr}
    be34:	e28db004 	add	fp, sp, #4

	//Bypass mode -> maybe Dynamic Stream if enough bandwidth on I2C is left

	//CTRL1 (20h)= 0b11101111 ODR=800Hz Cut-Off frequency=not used
	//CTRL2 (21h)= 0b00100000 HPF=normal mode; Cut-Off frequency=56Hz
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_MULTIPLE_READ_FLAG_UI8 | M_HAL_GYRO_CTRL1_UI8;
    be38:	e59f3090 	ldr	r3, [pc, #144]	; bed0 <g_halGyro_initGyro_i32+0xa0>
    be3c:	e3e0205f 	mvn	r2, #95	; 0x5f
    be40:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]=M_HAL_GYRO_CTRL1_DR0_DR1_UI8 | M_HAL_GYRO_CTRL1_BW1_UI8 | M_HAL_GYRO_CTRL1_NORMAL_UI8;
    be44:	e59f3084 	ldr	r3, [pc, #132]	; bed0 <g_halGyro_initGyro_i32+0xa0>
    be48:	e3e02010 	mvn	r2, #16
    be4c:	e5c32001 	strb	r2, [r3, #1]
	l_WriteBuffer_ui8[2]=M_HAL_GYRO_CTRL2_HPF_NORMAL_MODE_UI8;
    be50:	e59f3078 	ldr	r3, [pc, #120]	; bed0 <g_halGyro_initGyro_i32+0xa0>
    be54:	e3a02020 	mov	r2, #32
    be58:	e5c32002 	strb	r2, [r3, #2]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
    be5c:	e3a0006a 	mov	r0, #106	; 0x6a
    be60:	e59f1068 	ldr	r1, [pc, #104]	; bed0 <g_halGyro_initGyro_i32+0xa0>
    be64:	e3a02003 	mov	r2, #3
    be68:	eb0002ba 	bl	c958 <g_lldI2c_WriteI2c_bl>
    be6c:	e1a03000 	mov	r3, r0
    be70:	e3530000 	cmp	r3, #0
    be74:	0a000001 	beq	be80 <g_halGyro_initGyro_i32+0x50>
	{return -1;}
    be78:	e3e03000 	mvn	r3, #0
    be7c:	ea000011 	b	bec8 <g_halGyro_initGyro_i32+0x98>

	usleep(100000);
    be80:	e59f004c 	ldr	r0, [pc, #76]	; bed4 <g_halGyro_initGyro_i32+0xa4>
    be84:	ebfff2c3 	bl	8998 <_init+0x98>

	//CTRL4 (23h)= 0b00010000
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_SINGLE_READ_FLAG_UI8 | M_HAL_GYRO_CTRL4_UI8;
    be88:	e59f3040 	ldr	r3, [pc, #64]	; bed0 <g_halGyro_initGyro_i32+0xa0>
    be8c:	e3a02023 	mov	r2, #35	; 0x23
    be90:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]=M_HAL_GYRO_CTRL4_SCALE_500DPS_UI8;
    be94:	e59f3034 	ldr	r3, [pc, #52]	; bed0 <g_halGyro_initGyro_i32+0xa0>
    be98:	e3a02010 	mov	r2, #16
    be9c:	e5c32001 	strb	r2, [r3, #1]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
    bea0:	e3a0006a 	mov	r0, #106	; 0x6a
    bea4:	e59f1024 	ldr	r1, [pc, #36]	; bed0 <g_halGyro_initGyro_i32+0xa0>
    bea8:	e3a02002 	mov	r2, #2
    beac:	eb0002a9 	bl	c958 <g_lldI2c_WriteI2c_bl>
    beb0:	e1a03000 	mov	r3, r0
    beb4:	e3530000 	cmp	r3, #0
    beb8:	0a000001 	beq	bec4 <g_halGyro_initGyro_i32+0x94>
	{return -1;}
    bebc:	e3e03000 	mvn	r3, #0
    bec0:	ea000000 	b	bec8 <g_halGyro_initGyro_i32+0x98>

	return 0;
    bec4:	e3a03000 	mov	r3, #0
}
    bec8:	e1a00003 	mov	r0, r3
    becc:	e8bd8800 	pop	{fp, pc}
    bed0:	00018940 	.word	0x00018940
    bed4:	000186a0 	.word	0x000186a0

0000bed8 <g_halGyro_getGyroscope_st>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
strGyro g_halGyro_getGyroscope_st(void)
{
    bed8:	e92d4830 	push	{r4, r5, fp, lr}
    bedc:	e28db00c 	add	fp, sp, #12
    bee0:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_rotation_str;
    bee4:	e59f3040 	ldr	r3, [pc, #64]	; bf2c <g_halGyro_getGyroscope_st+0x54>
    bee8:	e24bc024 	sub	ip, fp, #36	; 0x24
    beec:	e1a0e003 	mov	lr, r3
    bef0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    bef4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    bef8:	e89e0003 	ldm	lr, {r0, r1}
    befc:	e88c0003 	stm	ip, {r0, r1}
    bf00:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    bf04:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    bf08:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    bf0c:	ec454b15 	vmov	d5, r4, r5
    bf10:	ec410b16 	vmov	d6, r0, r1
    bf14:	ec432b17 	vmov	d7, r2, r3
}
    bf18:	eeb00b45 	vmov.f64	d0, d5
    bf1c:	eeb01b46 	vmov.f64	d1, d6
    bf20:	eeb02b47 	vmov.f64	d2, d7
    bf24:	e24bd00c 	sub	sp, fp, #12
    bf28:	e8bd8830 	pop	{r4, r5, fp, pc}
    bf2c:	00018920 	.word	0x00018920

0000bf30 <g_halGyro_getTemperature_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGyro_getTemperature_f64(void)
{
    bf30:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    bf34:	e28db000 	add	fp, sp, #0
	return m_halGyro_temperature_f64;
    bf38:	e59f3014 	ldr	r3, [pc, #20]	; bf54 <g_halGyro_getTemperature_f64+0x24>
    bf3c:	e1c320d0 	ldrd	r2, [r3]
    bf40:	ec432b17 	vmov	d7, r2, r3
}
    bf44:	eeb00b47 	vmov.f64	d0, d7
    bf48:	e24bd000 	sub	sp, fp, #0
    bf4c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    bf50:	e12fff1e 	bx	lr
    bf54:	00018938 	.word	0x00018938

0000bf58 <g_halGyro_readGyroscopeFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGyro_readGyroscopeFromI2C_i32(void)
{
    bf58:	e92d4800 	push	{fp, lr}
    bf5c:	e28db004 	add	fp, sp, #4
    bf60:	e24dd040 	sub	sp, sp, #64	; 0x40
	unsigned char l_ReadBuffer_ui8[6]={0,0,0,0,0,0};
    bf64:	e3a03000 	mov	r3, #0
    bf68:	e54b3034 	strb	r3, [fp, #-52]	; 0x34
    bf6c:	e3a03000 	mov	r3, #0
    bf70:	e54b3033 	strb	r3, [fp, #-51]	; 0x33
    bf74:	e3a03000 	mov	r3, #0
    bf78:	e54b3032 	strb	r3, [fp, #-50]	; 0x32
    bf7c:	e3a03000 	mov	r3, #0
    bf80:	e54b3031 	strb	r3, [fp, #-49]	; 0x31
    bf84:	e3a03000 	mov	r3, #0
    bf88:	e54b3030 	strb	r3, [fp, #-48]	; 0x30
    bf8c:	e3a03000 	mov	r3, #0
    bf90:	e54b302f 	strb	r3, [fp, #-47]	; 0x2f
	unsigned char l_xRegister_ui8[2]={0,0};
    bf94:	e3a03000 	mov	r3, #0
    bf98:	e54b3038 	strb	r3, [fp, #-56]	; 0x38
    bf9c:	e3a03000 	mov	r3, #0
    bfa0:	e54b3037 	strb	r3, [fp, #-55]	; 0x37
	unsigned char l_yRegister_ui8[2]={0,0};
    bfa4:	e3a03000 	mov	r3, #0
    bfa8:	e54b303c 	strb	r3, [fp, #-60]	; 0x3c
    bfac:	e3a03000 	mov	r3, #0
    bfb0:	e54b303b 	strb	r3, [fp, #-59]	; 0x3b
	unsigned char l_zRegister_ui8[2]={0,0};
    bfb4:	e3a03000 	mov	r3, #0
    bfb8:	e54b3040 	strb	r3, [fp, #-64]	; 0x40
    bfbc:	e3a03000 	mov	r3, #0
    bfc0:	e54b303f 	strb	r3, [fp, #-63]	; 0x3f
	double l_xValue_ui8=0;
    bfc4:	e3a02000 	mov	r2, #0
    bfc8:	e3a03000 	mov	r3, #0
    bfcc:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	double l_yValue_ui8=0;
    bfd0:	e3a02000 	mov	r2, #0
    bfd4:	e3a03000 	mov	r3, #0
    bfd8:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	double l_zValue_ui8=0;
    bfdc:	e3a02000 	mov	r2, #0
    bfe0:	e3a03000 	mov	r3, #0
    bfe4:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	unsigned char l_WriteBuffer_ui8[3];
	int l_countVariable_i32=0;
    bfe8:	e3a03000 	mov	r3, #0
    bfec:	e50b3008 	str	r3, [fp, #-8]
	//500dps in init set
	double l_factorRaw2Out_f64=(double)500.0/32767.0;
    bff0:	e59f21e0 	ldr	r2, [pc, #480]	; c1d8 <g_halGyro_readGyroscopeFromI2C_i32+0x280>
    bff4:	e59f31e0 	ldr	r3, [pc, #480]	; c1dc <g_halGyro_readGyroscopeFromI2C_i32+0x284>
    bff8:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4


	//maybe check if new value is available; STATUS (27h) -->ZYXDA

	//set SUB Address to X register OUT_X_L and activate multiple read
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_MULTIPLE_READ_FLAG_UI8 | M_HAL_GYRO_OUT_X_L_UI8;
    bffc:	e3e03057 	mvn	r3, #87	; 0x57
    c000:	e54b3044 	strb	r3, [fp, #-68]	; 0x44
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    c004:	e24b3044 	sub	r3, fp, #68	; 0x44
    c008:	e3a0006a 	mov	r0, #106	; 0x6a
    c00c:	e1a01003 	mov	r1, r3
    c010:	e3a02001 	mov	r2, #1
    c014:	eb00024f 	bl	c958 <g_lldI2c_WriteI2c_bl>
    c018:	e1a03000 	mov	r3, r0
    c01c:	e3530000 	cmp	r3, #0
    c020:	0a000001 	beq	c02c <g_halGyro_readGyroscopeFromI2C_i32+0xd4>
	{return -1;}
    c024:	e3e03000 	mvn	r3, #0
    c028:	ea000067 	b	c1cc <g_halGyro_readGyroscopeFromI2C_i32+0x274>

	//Read from OUT_X_L (28h), OUT_X_H (29h), OUT_Y_L (2Ah), OUT_Y_H (2Bh), OUT_Z_L (2Ch), OUT_Z_H (2Dh)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_SIX_UI8)!=0)
    c02c:	e24b3034 	sub	r3, fp, #52	; 0x34
    c030:	e3a0006a 	mov	r0, #106	; 0x6a
    c034:	e1a01003 	mov	r1, r3
    c038:	e3a02006 	mov	r2, #6
    c03c:	eb00027d 	bl	ca38 <g_lldI2c_ReadI2c_bl>
    c040:	e1a03000 	mov	r3, r0
    c044:	e3530000 	cmp	r3, #0
    c048:	0a000001 	beq	c054 <g_halGyro_readGyroscopeFromI2C_i32+0xfc>
	{return -1;}
    c04c:	e3e03000 	mvn	r3, #0
    c050:	ea00005d 	b	c1cc <g_halGyro_readGyroscopeFromI2C_i32+0x274>
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    c054:	e3a03000 	mov	r3, #0
    c058:	e50b3008 	str	r3, [fp, #-8]
    c05c:	ea000029 	b	c108 <g_halGyro_readGyroscopeFromI2C_i32+0x1b0>
		{
			l_xRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
    c060:	e51b3008 	ldr	r3, [fp, #-8]
    c064:	e2632001 	rsb	r2, r3, #1
    c068:	e3e0302f 	mvn	r3, #47	; 0x2f
    c06c:	e24b0004 	sub	r0, fp, #4
    c070:	e0802002 	add	r2, r0, r2
    c074:	e0823003 	add	r3, r2, r3
    c078:	e5d32000 	ldrb	r2, [r3]
    c07c:	e3e03033 	mvn	r3, #51	; 0x33
    c080:	e51b1008 	ldr	r1, [fp, #-8]
    c084:	e24b0004 	sub	r0, fp, #4
    c088:	e0801001 	add	r1, r0, r1
    c08c:	e0813003 	add	r3, r1, r3
    c090:	e5c32000 	strb	r2, [r3]
			l_yRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[3-l_countVariable_i32];
    c094:	e51b3008 	ldr	r3, [fp, #-8]
    c098:	e2632003 	rsb	r2, r3, #3
    c09c:	e3e0302f 	mvn	r3, #47	; 0x2f
    c0a0:	e24b1004 	sub	r1, fp, #4
    c0a4:	e0812002 	add	r2, r1, r2
    c0a8:	e0823003 	add	r3, r2, r3
    c0ac:	e5d32000 	ldrb	r2, [r3]
    c0b0:	e3e03037 	mvn	r3, #55	; 0x37
    c0b4:	e51b1008 	ldr	r1, [fp, #-8]
    c0b8:	e24b0004 	sub	r0, fp, #4
    c0bc:	e0801001 	add	r1, r0, r1
    c0c0:	e0813003 	add	r3, r1, r3
    c0c4:	e5c32000 	strb	r2, [r3]
			l_zRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[5-l_countVariable_i32];
    c0c8:	e51b3008 	ldr	r3, [fp, #-8]
    c0cc:	e2632005 	rsb	r2, r3, #5
    c0d0:	e3e0302f 	mvn	r3, #47	; 0x2f
    c0d4:	e24b1004 	sub	r1, fp, #4
    c0d8:	e0812002 	add	r2, r1, r2
    c0dc:	e0823003 	add	r3, r2, r3
    c0e0:	e5d32000 	ldrb	r2, [r3]
    c0e4:	e3e0303b 	mvn	r3, #59	; 0x3b
    c0e8:	e51b1008 	ldr	r1, [fp, #-8]
    c0ec:	e24b0004 	sub	r0, fp, #4
    c0f0:	e0801001 	add	r1, r0, r1
    c0f4:	e0813003 	add	r3, r1, r3
    c0f8:	e5c32000 	strb	r2, [r3]
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_SIX_UI8)!=0)
	{return -1;}
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    c0fc:	e51b3008 	ldr	r3, [fp, #-8]
    c100:	e2833001 	add	r3, r3, #1
    c104:	e50b3008 	str	r3, [fp, #-8]
    c108:	e51b3008 	ldr	r3, [fp, #-8]
    c10c:	e3530001 	cmp	r3, #1
    c110:	daffffd2 	ble	c060 <g_halGyro_readGyroscopeFromI2C_i32+0x108>
			l_xRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
			l_yRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[3-l_countVariable_i32];
			l_zRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[5-l_countVariable_i32];
		}

		l_xValue_ui8=(double)g_halLib_twoComplement2Int(l_xRegister_ui8,2);
    c114:	e24b3038 	sub	r3, fp, #56	; 0x38
    c118:	e1a00003 	mov	r0, r3
    c11c:	e3a01002 	mov	r1, #2
    c120:	eb000060 	bl	c2a8 <g_halLib_twoComplement2Int>
    c124:	e1a03000 	mov	r3, r0
    c128:	ee063a90 	vmov	s13, r3
    c12c:	eeb87be6 	vcvt.f64.s32	d7, s13
    c130:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
		l_yValue_ui8=(double)g_halLib_twoComplement2Int(l_yRegister_ui8,2);
    c134:	e24b303c 	sub	r3, fp, #60	; 0x3c
    c138:	e1a00003 	mov	r0, r3
    c13c:	e3a01002 	mov	r1, #2
    c140:	eb000058 	bl	c2a8 <g_halLib_twoComplement2Int>
    c144:	e1a03000 	mov	r3, r0
    c148:	ee063a90 	vmov	s13, r3
    c14c:	eeb87be6 	vcvt.f64.s32	d7, s13
    c150:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4
		l_zValue_ui8=(double)g_halLib_twoComplement2Int(l_zRegister_ui8,2);
    c154:	e24b3040 	sub	r3, fp, #64	; 0x40
    c158:	e1a00003 	mov	r0, r3
    c15c:	e3a01002 	mov	r1, #2
    c160:	eb000050 	bl	c2a8 <g_halLib_twoComplement2Int>
    c164:	e1a03000 	mov	r3, r0
    c168:	ee063a90 	vmov	s13, r3
    c16c:	eeb87be6 	vcvt.f64.s32	d7, s13
    c170:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc

		l_xValue_ui8=l_xValue_ui8*l_factorRaw2Out_f64;
    c174:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
    c178:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    c17c:	ee267b07 	vmul.f64	d7, d6, d7
    c180:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
		l_yValue_ui8=l_yValue_ui8*l_factorRaw2Out_f64;
    c184:	ed1b6b07 	vldr	d6, [fp, #-28]	; 0xffffffe4
    c188:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    c18c:	ee267b07 	vmul.f64	d7, d6, d7
    c190:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4
		l_zValue_ui8=l_zValue_ui8*l_factorRaw2Out_f64;
    c194:	ed1b6b09 	vldr	d6, [fp, #-36]	; 0xffffffdc
    c198:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    c19c:	ee267b07 	vmul.f64	d7, d6, d7
    c1a0:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc

		m_rotation_str.l_roll_f64=l_xValue_ui8;
    c1a4:	e59f1034 	ldr	r1, [pc, #52]	; c1e0 <g_halGyro_readGyroscopeFromI2C_i32+0x288>
    c1a8:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    c1ac:	e1c121f0 	strd	r2, [r1, #16]
		m_rotation_str.l_pitch_f64=l_yValue_ui8;
    c1b0:	e59f1028 	ldr	r1, [pc, #40]	; c1e0 <g_halGyro_readGyroscopeFromI2C_i32+0x288>
    c1b4:	e14b21dc 	ldrd	r2, [fp, #-28]	; 0xffffffe4
    c1b8:	e1c120f8 	strd	r2, [r1, #8]
		m_rotation_str.l_yaw_f64=l_zValue_ui8;
    c1bc:	e59f101c 	ldr	r1, [pc, #28]	; c1e0 <g_halGyro_readGyroscopeFromI2C_i32+0x288>
    c1c0:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
    c1c4:	e1c120f0 	strd	r2, [r1]
	}

	return 0;
    c1c8:	e3a03000 	mov	r3, #0
}
    c1cc:	e1a00003 	mov	r0, r3
    c1d0:	e24bd004 	sub	sp, fp, #4
    c1d4:	e8bd8800 	pop	{fp, pc}
    c1d8:	807d00fa 	.word	0x807d00fa
    c1dc:	3f8f403e 	.word	0x3f8f403e
    c1e0:	00018920 	.word	0x00018920

0000c1e4 <g_halGyro_readTemperatureFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGyro_readTemperatureFromI2C_i32(void)
{
    c1e4:	e92d4800 	push	{fp, lr}
    c1e8:	e28db004 	add	fp, sp, #4
    c1ec:	e24dd008 	sub	sp, sp, #8
	unsigned char l_ReadBuffer_ui8[2]={0,0};
    c1f0:	e3a03000 	mov	r3, #0
    c1f4:	e54b3008 	strb	r3, [fp, #-8]
    c1f8:	e3a03000 	mov	r3, #0
    c1fc:	e54b3007 	strb	r3, [fp, #-7]
	unsigned char l_WriteBuffer_ui8[3];

	//set SUB Address to OUT_TEMP register and activate single read
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_SINGLE_READ_FLAG_UI8 | M_HAL_GYRO_OUT_TEMP_UI8;
    c200:	e3a03026 	mov	r3, #38	; 0x26
    c204:	e54b300c 	strb	r3, [fp, #-12]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    c208:	e24b300c 	sub	r3, fp, #12
    c20c:	e3a0006a 	mov	r0, #106	; 0x6a
    c210:	e1a01003 	mov	r1, r3
    c214:	e3a02001 	mov	r2, #1
    c218:	eb0001ce 	bl	c958 <g_lldI2c_WriteI2c_bl>
    c21c:	e1a03000 	mov	r3, r0
    c220:	e3530000 	cmp	r3, #0
    c224:	0a000001 	beq	c230 <g_halGyro_readTemperatureFromI2C_i32+0x4c>
	{return -1;}
    c228:	e3e03000 	mvn	r3, #0
    c22c:	ea000015 	b	c288 <g_halGyro_readTemperatureFromI2C_i32+0xa4>

	//Read from OUT_TEMP (26h)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    c230:	e24b3008 	sub	r3, fp, #8
    c234:	e3a0006a 	mov	r0, #106	; 0x6a
    c238:	e1a01003 	mov	r1, r3
    c23c:	e3a02001 	mov	r2, #1
    c240:	eb0001fc 	bl	ca38 <g_lldI2c_ReadI2c_bl>
    c244:	e1a03000 	mov	r3, r0
    c248:	e3530000 	cmp	r3, #0
    c24c:	0a000001 	beq	c258 <g_halGyro_readTemperatureFromI2C_i32+0x74>
	{return -1;}
    c250:	e3e03000 	mvn	r3, #0
    c254:	ea00000b 	b	c288 <g_halGyro_readTemperatureFromI2C_i32+0xa4>
	else
	{
		m_halGyro_temperature_f64=(double)(M_HAL_GYRO_TEMP_OFFSET_UI8)-(double)(g_halLib_twoComplement2Int(l_ReadBuffer_ui8,1));
    c258:	e24b3008 	sub	r3, fp, #8
    c25c:	e1a00003 	mov	r0, r3
    c260:	e3a01001 	mov	r1, #1
    c264:	eb00000f 	bl	c2a8 <g_halLib_twoComplement2Int>
    c268:	e1a03000 	mov	r3, r0
    c26c:	ee063a90 	vmov	s13, r3
    c270:	eeb87be6 	vcvt.f64.s32	d7, s13
    c274:	ed9f6b07 	vldr	d6, [pc, #28]	; c298 <g_halGyro_readTemperatureFromI2C_i32+0xb4>
    c278:	ee367b47 	vsub.f64	d7, d6, d7
    c27c:	e59f301c 	ldr	r3, [pc, #28]	; c2a0 <g_halGyro_readTemperatureFromI2C_i32+0xbc>
    c280:	ed837b00 	vstr	d7, [r3]
	}

	return 0;
    c284:	e3a03000 	mov	r3, #0
}
    c288:	e1a00003 	mov	r0, r3
    c28c:	e24bd004 	sub	sp, fp, #4
    c290:	e8bd8800 	pop	{fp, pc}
    c294:	e1a00000 	nop			; (mov r0, r0)
    c298:	00000000 	.word	0x00000000
    c29c:	403b0000 	.word	0x403b0000
    c2a0:	00018938 	.word	0x00018938
    c2a4:	e1a00000 	nop			; (mov r0, r0)

0000c2a8 <g_halLib_twoComplement2Int>:
 */

#include "Hal_Lib.h"

int g_halLib_twoComplement2Int(unsigned char* f_buffer_ui8,unsigned int f_nrOfBytes_ui32)
{
    c2a8:	e92d4830 	push	{r4, r5, fp, lr}
    c2ac:	e28db00c 	add	fp, sp, #12
    c2b0:	e24dd020 	sub	sp, sp, #32
    c2b4:	e50b0028 	str	r0, [fp, #-40]	; 0x28
    c2b8:	e50b102c 	str	r1, [fp, #-44]	; 0x2c
    c2bc:	e1a0100d 	mov	r1, sp
    c2c0:	e1a0e001 	mov	lr, r1
	int l_countVariable_i32=0;
    c2c4:	e3a01000 	mov	r1, #0
    c2c8:	e50b1010 	str	r1, [fp, #-16]
	int l_result_i32=0;
    c2cc:	e3a01000 	mov	r1, #0
    c2d0:	e50b1014 	str	r1, [fp, #-20]
	unsigned char l_shift_ui8=0;
    c2d4:	e3a01000 	mov	r1, #0
    c2d8:	e54b1015 	strb	r1, [fp, #-21]
	unsigned int l_buffer_ui8[f_nrOfBytes_ui32];
    c2dc:	e51bc02c 	ldr	ip, [fp, #-44]	; 0x2c
    c2e0:	e1a0100c 	mov	r1, ip
    c2e4:	e2411001 	sub	r1, r1, #1
    c2e8:	e50b101c 	str	r1, [fp, #-28]
    c2ec:	e1a0000c 	mov	r0, ip
    c2f0:	e3a01000 	mov	r1, #0
    c2f4:	e1a05281 	lsl	r5, r1, #5
    c2f8:	e1855da0 	orr	r5, r5, r0, lsr #27
    c2fc:	e1a04280 	lsl	r4, r0, #5
    c300:	e1a0000c 	mov	r0, ip
    c304:	e3a01000 	mov	r1, #0
    c308:	e1a03281 	lsl	r3, r1, #5
    c30c:	e1833da0 	orr	r3, r3, r0, lsr #27
    c310:	e1a02280 	lsl	r2, r0, #5
    c314:	e1a0310c 	lsl	r3, ip, #2
    c318:	e2833003 	add	r3, r3, #3
    c31c:	e2833007 	add	r3, r3, #7
    c320:	e1a031a3 	lsr	r3, r3, #3
    c324:	e1a03183 	lsl	r3, r3, #3
    c328:	e04dd003 	sub	sp, sp, r3
    c32c:	e1a0300d 	mov	r3, sp
    c330:	e2833003 	add	r3, r3, #3
    c334:	e1a03123 	lsr	r3, r3, #2
    c338:	e1a03103 	lsl	r3, r3, #2
    c33c:	e50b3020 	str	r3, [fp, #-32]

	//copy Parameter buffer to local buffer
	for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    c340:	e3a03000 	mov	r3, #0
    c344:	e50b3010 	str	r3, [fp, #-16]
    c348:	ea00000a 	b	c378 <g_halLib_twoComplement2Int+0xd0>
	{
		l_buffer_ui8[l_countVariable_i32]=*(f_buffer_ui8+l_countVariable_i32);
    c34c:	e51b3010 	ldr	r3, [fp, #-16]
    c350:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    c354:	e0823003 	add	r3, r2, r3
    c358:	e5d33000 	ldrb	r3, [r3]
    c35c:	e1a01003 	mov	r1, r3
    c360:	e51b3020 	ldr	r3, [fp, #-32]
    c364:	e51b2010 	ldr	r2, [fp, #-16]
    c368:	e7831102 	str	r1, [r3, r2, lsl #2]
	int l_result_i32=0;
	unsigned char l_shift_ui8=0;
	unsigned int l_buffer_ui8[f_nrOfBytes_ui32];

	//copy Parameter buffer to local buffer
	for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    c36c:	e51b3010 	ldr	r3, [fp, #-16]
    c370:	e2833001 	add	r3, r3, #1
    c374:	e50b3010 	str	r3, [fp, #-16]
    c378:	e51b2010 	ldr	r2, [fp, #-16]
    c37c:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    c380:	e2433001 	sub	r3, r3, #1
    c384:	e1520003 	cmp	r2, r3
    c388:	9affffef 	bls	c34c <g_halLib_twoComplement2Int+0xa4>
	{
		l_buffer_ui8[l_countVariable_i32]=*(f_buffer_ui8+l_countVariable_i32);
	}
//
	//if number is negative
	if ((l_buffer_ui8[0]& M_MASK_NEGATIVE_UI8)!=0)
    c38c:	e51b3020 	ldr	r3, [fp, #-32]
    c390:	e5933000 	ldr	r3, [r3]
    c394:	e2033080 	and	r3, r3, #128	; 0x80
    c398:	e3530000 	cmp	r3, #0
    c39c:	0a000023 	beq	c430 <g_halLib_twoComplement2Int+0x188>
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    c3a0:	e3a03000 	mov	r3, #0
    c3a4:	e50b3010 	str	r3, [fp, #-16]
    c3a8:	ea000014 	b	c400 <g_halLib_twoComplement2Int+0x158>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
    c3ac:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    c3b0:	e6ef2073 	uxtb	r2, r3
    c3b4:	e51b3010 	ldr	r3, [fp, #-16]
    c3b8:	e6ef3073 	uxtb	r3, r3
    c3bc:	e0633002 	rsb	r3, r3, r2
    c3c0:	e6ef3073 	uxtb	r3, r3
    c3c4:	e2433001 	sub	r3, r3, #1
    c3c8:	e54b3015 	strb	r3, [fp, #-21]
			l_result_i32=l_result_i32+(((l_buffer_ui8[l_countVariable_i32])^255)<<(l_shift_ui8*8));
    c3cc:	e51b3020 	ldr	r3, [fp, #-32]
    c3d0:	e51b2010 	ldr	r2, [fp, #-16]
    c3d4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    c3d8:	e22320ff 	eor	r2, r3, #255	; 0xff
    c3dc:	e55b3015 	ldrb	r3, [fp, #-21]
    c3e0:	e1a03183 	lsl	r3, r3, #3
    c3e4:	e1a02312 	lsl	r2, r2, r3
    c3e8:	e51b3014 	ldr	r3, [fp, #-20]
    c3ec:	e0823003 	add	r3, r2, r3
    c3f0:	e50b3014 	str	r3, [fp, #-20]
	}
//
	//if number is negative
	if ((l_buffer_ui8[0]& M_MASK_NEGATIVE_UI8)!=0)
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    c3f4:	e51b3010 	ldr	r3, [fp, #-16]
    c3f8:	e2833001 	add	r3, r3, #1
    c3fc:	e50b3010 	str	r3, [fp, #-16]
    c400:	e51b2010 	ldr	r2, [fp, #-16]
    c404:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    c408:	e2433001 	sub	r3, r3, #1
    c40c:	e1520003 	cmp	r2, r3
    c410:	9affffe5 	bls	c3ac <g_halLib_twoComplement2Int+0x104>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
			l_result_i32=l_result_i32+(((l_buffer_ui8[l_countVariable_i32])^255)<<(l_shift_ui8*8));
		}
		l_result_i32=l_result_i32+1;
    c414:	e51b3014 	ldr	r3, [fp, #-20]
    c418:	e2833001 	add	r3, r3, #1
    c41c:	e50b3014 	str	r3, [fp, #-20]
		l_result_i32=l_result_i32*-1;
    c420:	e51b3014 	ldr	r3, [fp, #-20]
    c424:	e2633000 	rsb	r3, r3, #0
    c428:	e50b3014 	str	r3, [fp, #-20]
    c42c:	ea00001b 	b	c4a0 <g_halLib_twoComplement2Int+0x1f8>
	}
	else
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    c430:	e3a03000 	mov	r3, #0
    c434:	e50b3010 	str	r3, [fp, #-16]
    c438:	ea000013 	b	c48c <g_halLib_twoComplement2Int+0x1e4>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
    c43c:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    c440:	e6ef2073 	uxtb	r2, r3
    c444:	e51b3010 	ldr	r3, [fp, #-16]
    c448:	e6ef3073 	uxtb	r3, r3
    c44c:	e0633002 	rsb	r3, r3, r2
    c450:	e6ef3073 	uxtb	r3, r3
    c454:	e2433001 	sub	r3, r3, #1
    c458:	e54b3015 	strb	r3, [fp, #-21]
			l_result_i32=l_result_i32+(l_buffer_ui8[l_countVariable_i32]<<l_shift_ui8*8);
    c45c:	e51b3020 	ldr	r3, [fp, #-32]
    c460:	e51b2010 	ldr	r2, [fp, #-16]
    c464:	e7932102 	ldr	r2, [r3, r2, lsl #2]
    c468:	e55b3015 	ldrb	r3, [fp, #-21]
    c46c:	e1a03183 	lsl	r3, r3, #3
    c470:	e1a02312 	lsl	r2, r2, r3
    c474:	e51b3014 	ldr	r3, [fp, #-20]
    c478:	e0823003 	add	r3, r2, r3
    c47c:	e50b3014 	str	r3, [fp, #-20]
		l_result_i32=l_result_i32+1;
		l_result_i32=l_result_i32*-1;
	}
	else
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    c480:	e51b3010 	ldr	r3, [fp, #-16]
    c484:	e2833001 	add	r3, r3, #1
    c488:	e50b3010 	str	r3, [fp, #-16]
    c48c:	e51b2010 	ldr	r2, [fp, #-16]
    c490:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    c494:	e2433001 	sub	r3, r3, #1
    c498:	e1520003 	cmp	r2, r3
    c49c:	9affffe6 	bls	c43c <g_halLib_twoComplement2Int+0x194>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
			l_result_i32=l_result_i32+(l_buffer_ui8[l_countVariable_i32]<<l_shift_ui8*8);
		}
	}
	return l_result_i32;
    c4a0:	e51b3014 	ldr	r3, [fp, #-20]
    c4a4:	e1a0d00e 	mov	sp, lr
}
    c4a8:	e1a00003 	mov	r0, r3
    c4ac:	e24bd00c 	sub	sp, fp, #12
    c4b0:	e8bd8830 	pop	{r4, r5, fp, pc}

0000c4b4 <g_halImu_getImuValues_str>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halImu_orientationValues g_halImu_getImuValues_str(void)
{
    c4b4:	e92d4800 	push	{fp, lr}
    c4b8:	e28db004 	add	fp, sp, #4
    c4bc:	e24dd008 	sub	sp, sp, #8
    c4c0:	e50b0008 	str	r0, [fp, #-8]
	return m_halImu_imuValues_st;
    c4c4:	e51b2008 	ldr	r2, [fp, #-8]
    c4c8:	e59f3024 	ldr	r3, [pc, #36]	; c4f4 <g_halImu_getImuValues_str+0x40>
    c4cc:	e1a01002 	mov	r1, r2
    c4d0:	e1a02003 	mov	r2, r3
    c4d4:	e3a03058 	mov	r3, #88	; 0x58
    c4d8:	e1a00001 	mov	r0, r1
    c4dc:	e1a01002 	mov	r1, r2
    c4e0:	e1a02003 	mov	r2, r3
    c4e4:	ebfff14f 	bl	8a28 <_init+0x128>
}
    c4e8:	e51b0008 	ldr	r0, [fp, #-8]
    c4ec:	e24bd004 	sub	sp, fp, #4
    c4f0:	e8bd8800 	pop	{fp, pc}
    c4f4:	00018948 	.word	0x00018948

0000c4f8 <g_halImu_initImuSensors_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_initImuSensors_bl(void)
{
    c4f8:	e92d4800 	push	{fp, lr}
    c4fc:	e28db004 	add	fp, sp, #4
	// initialize Acceleration and electrical Compass chip
	if(g_halAccmag_initSensor_bl()!=0)
    c500:	ebfffce9 	bl	b8ac <g_halAccmag_initSensor_bl>
    c504:	e1a03000 	mov	r3, r0
    c508:	e3530000 	cmp	r3, #0
    c50c:	0a000001 	beq	c518 <g_halImu_initImuSensors_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    c510:	e3a03001 	mov	r3, #1
    c514:	ea00000c 	b	c54c <g_halImu_initImuSensors_bl+0x54>

	// initialize Barometer chip
	if(g_halBaro_initBaro_i32()!=0)
    c518:	ebfffd5e 	bl	ba98 <g_halBaro_initBaro_i32>
    c51c:	e1a03000 	mov	r3, r0
    c520:	e3530000 	cmp	r3, #0
    c524:	0a000001 	beq	c530 <g_halImu_initImuSensors_bl+0x38>
	{return M_HAL_IMU_FAILED_BL;}
    c528:	e3a03001 	mov	r3, #1
    c52c:	ea000006 	b	c54c <g_halImu_initImuSensors_bl+0x54>

	// initialize Gyroscope chip
	if(g_halGyro_initGyro_i32()!=0)
    c530:	ebfffe3e 	bl	be30 <g_halGyro_initGyro_i32>
    c534:	e1a03000 	mov	r3, r0
    c538:	e3530000 	cmp	r3, #0
    c53c:	0a000001 	beq	c548 <g_halImu_initImuSensors_bl+0x50>
	{return M_HAL_IMU_FAILED_BL;}
    c540:	e3a03001 	mov	r3, #1
    c544:	ea000000 	b	c54c <g_halImu_initImuSensors_bl+0x54>

	return M_HAL_IMU_SUCCESS_BL;
    c548:	e3a03000 	mov	r3, #0
}
    c54c:	e1a00003 	mov	r0, r3
    c550:	e8bd8800 	pop	{fp, pc}

0000c554 <g_halImu_triggerBaroReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerBaroReading_bl(void)
{
    c554:	e92d4800 	push	{fp, lr}
    c558:	e28db004 	add	fp, sp, #4
	if(g_halBaro_readPressureFromI2C_i32()!=0)
    c55c:	ebfffd8b 	bl	bb90 <g_halBaro_readPressureFromI2C_i32>
    c560:	e1a03000 	mov	r3, r0
    c564:	e3530000 	cmp	r3, #0
    c568:	0a000001 	beq	c574 <g_halImu_triggerBaroReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    c56c:	e3a03001 	mov	r3, #1
    c570:	ea00000e 	b	c5b0 <g_halImu_triggerBaroReading_bl+0x5c>

	if(g_halBaro_readTemperatureFromI2C_i32()!=0)
    c574:	ebfffdd8 	bl	bcdc <g_halBaro_readTemperatureFromI2C_i32>
    c578:	e1a03000 	mov	r3, r0
    c57c:	e3530000 	cmp	r3, #0
    c580:	0a000001 	beq	c58c <g_halImu_triggerBaroReading_bl+0x38>
	{return M_HAL_IMU_FAILED_BL;}
    c584:	e3a03001 	mov	r3, #1
    c588:	ea000008 	b	c5b0 <g_halImu_triggerBaroReading_bl+0x5c>

	m_halImu_imuValues_st.pressure_f64=g_halBaro_getPressure_f64();
    c58c:	ebfffd6b 	bl	bb40 <g_halBaro_getPressure_f64>
    c590:	eeb07b40 	vmov.f64	d7, d0
    c594:	e59f301c 	ldr	r3, [pc, #28]	; c5b8 <g_halImu_triggerBaroReading_bl+0x64>
    c598:	ed837b14 	vstr	d7, [r3, #80]	; 0x50
	m_halImu_imuValues_st.temperature_f64=g_halBaro_getTemperature_f64();
    c59c:	ebfffd71 	bl	bb68 <g_halBaro_getTemperature_f64>
    c5a0:	eeb07b40 	vmov.f64	d7, d0
    c5a4:	e59f300c 	ldr	r3, [pc, #12]	; c5b8 <g_halImu_triggerBaroReading_bl+0x64>
    c5a8:	ed837b12 	vstr	d7, [r3, #72]	; 0x48

	return M_HAL_IMU_SUCCESS_BL;
    c5ac:	e3a03000 	mov	r3, #0
}
    c5b0:	e1a00003 	mov	r0, r3
    c5b4:	e8bd8800 	pop	{fp, pc}
    c5b8:	00018948 	.word	0x00018948

0000c5bc <g_halImu_triggerGyroReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerGyroReading_bl(void)
{
    c5bc:	e92d4818 	push	{r3, r4, fp, lr}
    c5c0:	e28db00c 	add	fp, sp, #12
	if(g_halGyro_readGyroscopeFromI2C_i32()!=0)
    c5c4:	ebfffe63 	bl	bf58 <g_halGyro_readGyroscopeFromI2C_i32>
    c5c8:	e1a03000 	mov	r3, r0
    c5cc:	e3530000 	cmp	r3, #0
    c5d0:	0a000001 	beq	c5dc <g_halImu_triggerGyroReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    c5d4:	e3a03001 	mov	r3, #1
    c5d8:	ea000008 	b	c600 <g_halImu_triggerGyroReading_bl+0x44>

	m_halImu_imuValues_st.gyro=g_halGyro_getGyroscope_st();
    c5dc:	e59f4024 	ldr	r4, [pc, #36]	; c608 <g_halImu_triggerGyroReading_bl+0x4c>
    c5e0:	ebfffe3c 	bl	bed8 <g_halGyro_getGyroscope_st>
    c5e4:	eeb05b40 	vmov.f64	d5, d0
    c5e8:	eeb06b41 	vmov.f64	d6, d1
    c5ec:	eeb07b42 	vmov.f64	d7, d2
    c5f0:	ed845b0c 	vstr	d5, [r4, #48]	; 0x30
    c5f4:	ed846b0e 	vstr	d6, [r4, #56]	; 0x38
    c5f8:	ed847b10 	vstr	d7, [r4, #64]	; 0x40

	return M_HAL_IMU_SUCCESS_BL;
    c5fc:	e3a03000 	mov	r3, #0
}
    c600:	e1a00003 	mov	r0, r3
    c604:	e8bd8818 	pop	{r3, r4, fp, pc}
    c608:	00018948 	.word	0x00018948

0000c60c <g_halImu_triggerAccReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerAccReading_bl(void)
{
    c60c:	e92d4818 	push	{r3, r4, fp, lr}
    c610:	e28db00c 	add	fp, sp, #12
	if(g_halAccmag_triggerAccUpdate_bl()!=0)
    c614:	ebfffccc 	bl	b94c <g_halAccmag_triggerAccUpdate_bl>
    c618:	e1a03000 	mov	r3, r0
    c61c:	e3530000 	cmp	r3, #0
    c620:	0a000001 	beq	c62c <g_halImu_triggerAccReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    c624:	e3a03001 	mov	r3, #1
    c628:	ea000008 	b	c650 <g_halImu_triggerAccReading_bl+0x44>

	m_halImu_imuValues_st.acc=g_halAccmag_getAccVector_st();
    c62c:	e59f4024 	ldr	r4, [pc, #36]	; c658 <g_halImu_triggerAccReading_bl+0x4c>
    c630:	ebfffcda 	bl	b9a0 <g_halAccmag_getAccVector_st>
    c634:	eeb05b40 	vmov.f64	d5, d0
    c638:	eeb06b41 	vmov.f64	d6, d1
    c63c:	eeb07b42 	vmov.f64	d7, d2
    c640:	ed845b00 	vstr	d5, [r4]
    c644:	ed846b02 	vstr	d6, [r4, #8]
    c648:	ed847b04 	vstr	d7, [r4, #16]

	return M_HAL_IMU_SUCCESS_BL;
    c64c:	e3a03000 	mov	r3, #0
}
    c650:	e1a00003 	mov	r0, r3
    c654:	e8bd8818 	pop	{r3, r4, fp, pc}
    c658:	00018948 	.word	0x00018948

0000c65c <g_halImu_triggerMagReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerMagReading_bl(void)
{
    c65c:	e92d4818 	push	{r3, r4, fp, lr}
    c660:	e28db00c 	add	fp, sp, #12
	if(g_halAccmag_triggerMagUpdate_bl()!=0)
    c664:	ebfffcbf 	bl	b968 <g_halAccmag_triggerMagUpdate_bl>
    c668:	e1a03000 	mov	r3, r0
    c66c:	e3530000 	cmp	r3, #0
    c670:	0a000001 	beq	c67c <g_halImu_triggerMagReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    c674:	e3a03001 	mov	r3, #1
    c678:	ea000008 	b	c6a0 <g_halImu_triggerMagReading_bl+0x44>

	m_halImu_imuValues_st.mag=g_halAccmag_getMagVector_st();
    c67c:	e59f4024 	ldr	r4, [pc, #36]	; c6a8 <g_halImu_triggerMagReading_bl+0x4c>
    c680:	ebfffcdc 	bl	b9f8 <g_halAccmag_getMagVector_st>
    c684:	eeb05b40 	vmov.f64	d5, d0
    c688:	eeb06b41 	vmov.f64	d6, d1
    c68c:	eeb07b42 	vmov.f64	d7, d2
    c690:	ed845b06 	vstr	d5, [r4, #24]
    c694:	ed846b08 	vstr	d6, [r4, #32]
    c698:	ed847b0a 	vstr	d7, [r4, #40]	; 0x28

	return M_HAL_IMU_SUCCESS_BL;
    c69c:	e3a03000 	mov	r3, #0
}
    c6a0:	e1a00003 	mov	r0, r3
    c6a4:	e8bd8818 	pop	{r3, r4, fp, pc}
    c6a8:	00018948 	.word	0x00018948

0000c6ac <g_halImu_triggerImuReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerImuReading_bl(void)
{
    c6ac:	e92d4818 	push	{r3, r4, fp, lr}
    c6b0:	e28db00c 	add	fp, sp, #12
	if(g_halBaro_readPressureFromI2C_i32()!=0)
    c6b4:	ebfffd35 	bl	bb90 <g_halBaro_readPressureFromI2C_i32>
    c6b8:	e1a03000 	mov	r3, r0
    c6bc:	e3530000 	cmp	r3, #0
    c6c0:	0a000001 	beq	c6cc <g_halImu_triggerImuReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    c6c4:	e3a03001 	mov	r3, #1
    c6c8:	ea000038 	b	c7b0 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halBaro_readTemperatureFromI2C_i32()!=0)
    c6cc:	ebfffd82 	bl	bcdc <g_halBaro_readTemperatureFromI2C_i32>
    c6d0:	e1a03000 	mov	r3, r0
    c6d4:	e3530000 	cmp	r3, #0
    c6d8:	0a000001 	beq	c6e4 <g_halImu_triggerImuReading_bl+0x38>
	{return M_HAL_IMU_FAILED_BL;}
    c6dc:	e3a03001 	mov	r3, #1
    c6e0:	ea000032 	b	c7b0 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halGyro_readGyroscopeFromI2C_i32()!=0)
    c6e4:	ebfffe1b 	bl	bf58 <g_halGyro_readGyroscopeFromI2C_i32>
    c6e8:	e1a03000 	mov	r3, r0
    c6ec:	e3530000 	cmp	r3, #0
    c6f0:	0a000001 	beq	c6fc <g_halImu_triggerImuReading_bl+0x50>
	{return M_HAL_IMU_FAILED_BL;}
    c6f4:	e3a03001 	mov	r3, #1
    c6f8:	ea00002c 	b	c7b0 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halAccmag_triggerAccUpdate_bl()!=0)
    c6fc:	ebfffc92 	bl	b94c <g_halAccmag_triggerAccUpdate_bl>
    c700:	e1a03000 	mov	r3, r0
    c704:	e3530000 	cmp	r3, #0
    c708:	0a000001 	beq	c714 <g_halImu_triggerImuReading_bl+0x68>
	{return M_HAL_IMU_FAILED_BL;}
    c70c:	e3a03001 	mov	r3, #1
    c710:	ea000026 	b	c7b0 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halAccmag_triggerMagUpdate_bl()!=0)
    c714:	ebfffc93 	bl	b968 <g_halAccmag_triggerMagUpdate_bl>
    c718:	e1a03000 	mov	r3, r0
    c71c:	e3530000 	cmp	r3, #0
    c720:	0a000001 	beq	c72c <g_halImu_triggerImuReading_bl+0x80>
	{return M_HAL_IMU_FAILED_BL;}
    c724:	e3a03001 	mov	r3, #1
    c728:	ea000020 	b	c7b0 <g_halImu_triggerImuReading_bl+0x104>

	m_halImu_imuValues_st.mag=g_halAccmag_getMagVector_st();
    c72c:	e59f4084 	ldr	r4, [pc, #132]	; c7b8 <g_halImu_triggerImuReading_bl+0x10c>
    c730:	ebfffcb0 	bl	b9f8 <g_halAccmag_getMagVector_st>
    c734:	eeb05b40 	vmov.f64	d5, d0
    c738:	eeb06b41 	vmov.f64	d6, d1
    c73c:	eeb07b42 	vmov.f64	d7, d2
    c740:	ed845b06 	vstr	d5, [r4, #24]
    c744:	ed846b08 	vstr	d6, [r4, #32]
    c748:	ed847b0a 	vstr	d7, [r4, #40]	; 0x28
	m_halImu_imuValues_st.acc=g_halAccmag_getAccVector_st();
    c74c:	e59f4064 	ldr	r4, [pc, #100]	; c7b8 <g_halImu_triggerImuReading_bl+0x10c>
    c750:	ebfffc92 	bl	b9a0 <g_halAccmag_getAccVector_st>
    c754:	eeb05b40 	vmov.f64	d5, d0
    c758:	eeb06b41 	vmov.f64	d6, d1
    c75c:	eeb07b42 	vmov.f64	d7, d2
    c760:	ed845b00 	vstr	d5, [r4]
    c764:	ed846b02 	vstr	d6, [r4, #8]
    c768:	ed847b04 	vstr	d7, [r4, #16]
	m_halImu_imuValues_st.gyro=g_halGyro_getGyroscope_st();
    c76c:	e59f4044 	ldr	r4, [pc, #68]	; c7b8 <g_halImu_triggerImuReading_bl+0x10c>
    c770:	ebfffdd8 	bl	bed8 <g_halGyro_getGyroscope_st>
    c774:	eeb05b40 	vmov.f64	d5, d0
    c778:	eeb06b41 	vmov.f64	d6, d1
    c77c:	eeb07b42 	vmov.f64	d7, d2
    c780:	ed845b0c 	vstr	d5, [r4, #48]	; 0x30
    c784:	ed846b0e 	vstr	d6, [r4, #56]	; 0x38
    c788:	ed847b10 	vstr	d7, [r4, #64]	; 0x40
	m_halImu_imuValues_st.pressure_f64=g_halBaro_getPressure_f64();
    c78c:	ebfffceb 	bl	bb40 <g_halBaro_getPressure_f64>
    c790:	eeb07b40 	vmov.f64	d7, d0
    c794:	e59f301c 	ldr	r3, [pc, #28]	; c7b8 <g_halImu_triggerImuReading_bl+0x10c>
    c798:	ed837b14 	vstr	d7, [r3, #80]	; 0x50
	m_halImu_imuValues_st.temperature_f64=g_halBaro_getTemperature_f64();
    c79c:	ebfffcf1 	bl	bb68 <g_halBaro_getTemperature_f64>
    c7a0:	eeb07b40 	vmov.f64	d7, d0
    c7a4:	e59f300c 	ldr	r3, [pc, #12]	; c7b8 <g_halImu_triggerImuReading_bl+0x10c>
    c7a8:	ed837b12 	vstr	d7, [r3, #72]	; 0x48

	return M_HAL_IMU_SUCCESS_BL;
    c7ac:	e3a03000 	mov	r3, #0
}
    c7b0:	e1a00003 	mov	r0, r3
    c7b4:	e8bd8818 	pop	{r3, r4, fp, pc}
    c7b8:	00018948 	.word	0x00018948
    c7bc:	00000000 	.word	0x00000000

0000c7c0 <g_LIDAR_getDistance_f64>:
 *
 * \endinternal
 ********************************************************************** */

double g_LIDAR_getDistance_f64(void)
{
    c7c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    c7c4:	e28db000 	add	fp, sp, #0
	return m_distance_f64;
    c7c8:	e59f3014 	ldr	r3, [pc, #20]	; c7e4 <g_LIDAR_getDistance_f64+0x24>
    c7cc:	e1c320d0 	ldrd	r2, [r3]
    c7d0:	ec432b17 	vmov	d7, r2, r3
}
    c7d4:	eeb00b47 	vmov.f64	d0, d7
    c7d8:	e24bd000 	sub	sp, fp, #0
    c7dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    c7e0:	e12fff1e 	bx	lr
    c7e4:	000189a0 	.word	0x000189a0

0000c7e8 <g_LIDAR_readDistanceFromI2C_i32>:
 *
 * \endinternal
 ********************************************************************** */

int g_LIDAR_readDistanceFromI2C_i32(void)
{
    c7e8:	e92d4800 	push	{fp, lr}
    c7ec:	e28db004 	add	fp, sp, #4
    c7f0:	e24dd010 	sub	sp, sp, #16
unsigned char l_ReadBuffer_ui8[2]={0,0};
    c7f4:	e3a03000 	mov	r3, #0
    c7f8:	e54b300c 	strb	r3, [fp, #-12]
    c7fc:	e3a03000 	mov	r3, #0
    c800:	e54b300b 	strb	r3, [fp, #-11]
unsigned char l_WriteBuffer_ui8[2]={0,0};
    c804:	e3a03000 	mov	r3, #0
    c808:	e54b3010 	strb	r3, [fp, #-16]
    c80c:	e3a03000 	mov	r3, #0
    c810:	e54b300f 	strb	r3, [fp, #-15]
int l_DistInCm_i32 =  0;
    c814:	e3a03000 	mov	r3, #0
    c818:	e50b3008 	str	r3, [fp, #-8]

//Trigger Measurement of Distance (DC stabnilization cycle, Signal Acquisition, DataProcessing)
l_WriteBuffer_ui8[0]=0x00; 								//write Reg 0x00
    c81c:	e3a03000 	mov	r3, #0
    c820:	e54b3010 	strb	r3, [fp, #-16]
l_WriteBuffer_ui8[1]=0x04; 								//with value 0x04
    c824:	e3a03004 	mov	r3, #4
    c828:	e54b300f 	strb	r3, [fp, #-15]
if(g_lldI2c_WriteI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, l_WriteBuffer_ui8, 2)!=0)
    c82c:	e24b3010 	sub	r3, fp, #16
    c830:	e3a00062 	mov	r0, #98	; 0x62
    c834:	e1a01003 	mov	r1, r3
    c838:	e3a02002 	mov	r2, #2
    c83c:	eb0000b5 	bl	cb18 <g_lldI2c_WriteI2c0_bl>
    c840:	e1a03000 	mov	r3, r0
    c844:	e3530000 	cmp	r3, #0
    c848:	0a000001 	beq	c854 <g_LIDAR_readDistanceFromI2C_i32+0x6c>
{
return -1;
    c84c:	e3e03000 	mvn	r3, #0
    c850:	ea000038 	b	c938 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Waiting Time for Acquisition
usleep(20*1000);
    c854:	e59f00f4 	ldr	r0, [pc, #244]	; c950 <g_LIDAR_readDistanceFromI2C_i32+0x168>
    c858:	ebfff04e 	bl	8998 <_init+0x98>


//Set Acquisition count cycle to 255
l_WriteBuffer_ui8[0]=0x02;
    c85c:	e3a03002 	mov	r3, #2
    c860:	e54b3010 	strb	r3, [fp, #-16]
l_WriteBuffer_ui8[1]=0xFF;
    c864:	e3e03000 	mvn	r3, #0
    c868:	e54b300f 	strb	r3, [fp, #-15]
if(g_lldI2c_WriteI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, l_WriteBuffer_ui8, 2)!=0)
    c86c:	e24b3010 	sub	r3, fp, #16
    c870:	e3a00062 	mov	r0, #98	; 0x62
    c874:	e1a01003 	mov	r1, r3
    c878:	e3a02002 	mov	r2, #2
    c87c:	eb0000a5 	bl	cb18 <g_lldI2c_WriteI2c0_bl>
    c880:	e1a03000 	mov	r3, r0
    c884:	e3530000 	cmp	r3, #0
    c888:	0a000001 	beq	c894 <g_LIDAR_readDistanceFromI2C_i32+0xac>
{
return -1;
    c88c:	e3e03000 	mvn	r3, #0
    c890:	ea000028 	b	c938 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Set Reg 0x8f as Output-Register
l_WriteBuffer_ui8[0]=0x8f;
    c894:	e3e03070 	mvn	r3, #112	; 0x70
    c898:	e54b3010 	strb	r3, [fp, #-16]
if(g_lldI2c_WriteI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, l_WriteBuffer_ui8, 1)!=0)
    c89c:	e24b3010 	sub	r3, fp, #16
    c8a0:	e3a00062 	mov	r0, #98	; 0x62
    c8a4:	e1a01003 	mov	r1, r3
    c8a8:	e3a02001 	mov	r2, #1
    c8ac:	eb000099 	bl	cb18 <g_lldI2c_WriteI2c0_bl>
    c8b0:	e1a03000 	mov	r3, r0
    c8b4:	e3530000 	cmp	r3, #0
    c8b8:	0a000001 	beq	c8c4 <g_LIDAR_readDistanceFromI2C_i32+0xdc>
{
return -1;
    c8bc:	e3e03000 	mvn	r3, #0
    c8c0:	ea00001c 	b	c938 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Read 2-Byte Distance in cm from Register 0x8f
if(g_lldI2c_ReadI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, (l_ReadBuffer_ui8), 2)!=0)
    c8c4:	e24b300c 	sub	r3, fp, #12
    c8c8:	e3a00062 	mov	r0, #98	; 0x62
    c8cc:	e1a01003 	mov	r1, r3
    c8d0:	e3a02002 	mov	r2, #2
    c8d4:	eb0000c7 	bl	cbf8 <g_lldI2c_ReadI2c0_bl>
    c8d8:	e1a03000 	mov	r3, r0
    c8dc:	e3530000 	cmp	r3, #0
    c8e0:	0a000001 	beq	c8ec <g_LIDAR_readDistanceFromI2C_i32+0x104>
{
return -1;
    c8e4:	e3e03000 	mvn	r3, #0
    c8e8:	ea000012 	b	c938 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Conversion from int(cm) to double(m)
l_DistInCm_i32 = *l_ReadBuffer_ui8 << 8;
    c8ec:	e55b300c 	ldrb	r3, [fp, #-12]
    c8f0:	e1a03403 	lsl	r3, r3, #8
    c8f4:	e50b3008 	str	r3, [fp, #-8]
l_DistInCm_i32 |= *(l_ReadBuffer_ui8+1);
    c8f8:	e55b300b 	ldrb	r3, [fp, #-11]
    c8fc:	e51b2008 	ldr	r2, [fp, #-8]
    c900:	e1823003 	orr	r3, r2, r3
    c904:	e50b3008 	str	r3, [fp, #-8]
m_distance_f64 = (double)l_DistInCm_i32;
    c908:	e51b3008 	ldr	r3, [fp, #-8]
    c90c:	ee063a90 	vmov	s13, r3
    c910:	eeb87be6 	vcvt.f64.s32	d7, s13
    c914:	e59f3038 	ldr	r3, [pc, #56]	; c954 <g_LIDAR_readDistanceFromI2C_i32+0x16c>
    c918:	ed837b00 	vstr	d7, [r3]
m_distance_f64 = (m_distance_f64/100);
    c91c:	e59f3030 	ldr	r3, [pc, #48]	; c954 <g_LIDAR_readDistanceFromI2C_i32+0x16c>
    c920:	ed936b00 	vldr	d6, [r3]
    c924:	ed9f7b07 	vldr	d7, [pc, #28]	; c948 <g_LIDAR_readDistanceFromI2C_i32+0x160>
    c928:	ee867b07 	vdiv.f64	d7, d6, d7
    c92c:	e59f3020 	ldr	r3, [pc, #32]	; c954 <g_LIDAR_readDistanceFromI2C_i32+0x16c>
    c930:	ed837b00 	vstr	d7, [r3]
//printf("Distance: %d / %.2f\n",l_DistInCm_i32,m_distance_f64);
//usleep(500*1000);


return 0;
    c934:	e3a03000 	mov	r3, #0
}
    c938:	e1a00003 	mov	r0, r3
    c93c:	e24bd004 	sub	sp, fp, #4
    c940:	e8bd8800 	pop	{fp, pc}
    c944:	e1a00000 	nop			; (mov r0, r0)
    c948:	00000000 	.word	0x00000000
    c94c:	40590000 	.word	0x40590000
    c950:	00004e20 	.word	0x00004e20
    c954:	000189a0 	.word	0x000189a0

0000c958 <g_lldI2c_WriteI2c_bl>:
 * 2015/05/06 phwogs00:
 * Changed variable and function names in order to guideline
 * \endinternal
 ***********************************************************************/
unsigned int g_lldI2c_WriteI2c_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_i2cWriteBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    c958:	e92d4800 	push	{fp, lr}
    c95c:	e28db004 	add	fp, sp, #4
    c960:	e24dd018 	sub	sp, sp, #24
    c964:	e1a03000 	mov	r3, r0
    c968:	e50b1014 	str	r1, [fp, #-20]
    c96c:	e50b2018 	str	r2, [fp, #-24]
    c970:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_returnOfWrittenBytes_ui8 	= 0;
    c974:	e3a03000 	mov	r3, #0
    c978:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_WriteRetryCounter_ui8 	= 0;
    c97c:	e3a03000 	mov	r3, #0
    c980:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 				= 0;
    c984:	e3a03000 	mov	r3, #0
    c988:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C_DEV_UI8, O_RDWR);
    c98c:	e59f009c 	ldr	r0, [pc, #156]	; ca30 <g_lldI2c_WriteI2c_bl+0xd8>
    c990:	e3a01002 	mov	r1, #2
    c994:	ebffefe1 	bl	8920 <_init+0x20>
    c998:	e1a03000 	mov	r3, r0
    c99c:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    c9a0:	e51b200c 	ldr	r2, [fp, #-12]
    c9a4:	e55b300d 	ldrb	r3, [fp, #-13]
    c9a8:	e1a00002 	mov	r0, r2
    c9ac:	e59f1080 	ldr	r1, [pc, #128]	; ca34 <g_lldI2c_WriteI2c_bl+0xdc>
    c9b0:	e1a02003 	mov	r2, r3
    c9b4:	ebfff015 	bl	8a10 <_init+0x110>

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    c9b8:	ea000009 	b	c9e4 <g_lldI2c_WriteI2c_bl+0x8c>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    c9bc:	e51b300c 	ldr	r3, [fp, #-12]
    c9c0:	e1a00003 	mov	r0, r3
    c9c4:	e51b1014 	ldr	r1, [fp, #-20]
    c9c8:	e51b2018 	ldr	r2, [fp, #-24]
    c9cc:	ebffeffa 	bl	89bc <_init+0xbc>
    c9d0:	e1a03000 	mov	r3, r0
    c9d4:	e54b3005 	strb	r3, [fp, #-5]
		l_WriteRetryCounter_ui8++;
    c9d8:	e55b3006 	ldrb	r3, [fp, #-6]
    c9dc:	e2833001 	add	r3, r3, #1
    c9e0:	e54b3006 	strb	r3, [fp, #-6]

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    c9e4:	e55b2005 	ldrb	r2, [fp, #-5]
    c9e8:	e51b3018 	ldr	r3, [fp, #-24]
    c9ec:	e1520003 	cmp	r2, r3
    c9f0:	0a000002 	beq	ca00 <g_lldI2c_WriteI2c_bl+0xa8>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    c9f4:	e55b3006 	ldrb	r3, [fp, #-6]
    c9f8:	e3530002 	cmp	r3, #2
    c9fc:	9affffee 	bls	c9bc <g_lldI2c_WriteI2c_bl+0x64>
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_WriteRetryCounter_ui8++;
	}

	if(l_WriteRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    ca00:	e55b3006 	ldrb	r3, [fp, #-6]
    ca04:	e3530002 	cmp	r3, #2
    ca08:	9a000001 	bls	ca14 <g_lldI2c_WriteI2c_bl+0xbc>
	{
		return 1;
    ca0c:	e3a03001 	mov	r3, #1
    ca10:	ea000003 	b	ca24 <g_lldI2c_WriteI2c_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    ca14:	e51b300c 	ldr	r3, [fp, #-12]
    ca18:	e1a00003 	mov	r0, r3
    ca1c:	ebfff00a 	bl	8a4c <_init+0x14c>
	{
		/*ERROR HANDLER*/
		return 1;
	}

	return 0;
    ca20:	e3a03000 	mov	r3, #0
}
    ca24:	e1a00003 	mov	r0, r3
    ca28:	e24bd004 	sub	sp, fp, #4
    ca2c:	e8bd8800 	pop	{fp, pc}
    ca30:	00010190 	.word	0x00010190
    ca34:	00000703 	.word	0x00000703

0000ca38 <g_lldI2c_ReadI2c_bl>:
 * Changed variable and function names in order to guideline
 *   *
 * \endinternal
 ***********************************************************************/ 
unsigned int g_lldI2c_ReadI2c_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_lldI2c_i2cReadBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    ca38:	e92d4800 	push	{fp, lr}
    ca3c:	e28db004 	add	fp, sp, #4
    ca40:	e24dd018 	sub	sp, sp, #24
    ca44:	e1a03000 	mov	r3, r0
    ca48:	e50b1014 	str	r1, [fp, #-20]
    ca4c:	e50b2018 	str	r2, [fp, #-24]
    ca50:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_ReturnOfReadBytes_ui8 = 0;
    ca54:	e3a03000 	mov	r3, #0
    ca58:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_ReadRetryCounter_ui8 	= 0;
    ca5c:	e3a03000 	mov	r3, #0
    ca60:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 			= 0;
    ca64:	e3a03000 	mov	r3, #0
    ca68:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C_DEV_UI8, O_RDWR);   //Open I2C device
    ca6c:	e59f009c 	ldr	r0, [pc, #156]	; cb10 <g_lldI2c_ReadI2c_bl+0xd8>
    ca70:	e3a01002 	mov	r1, #2
    ca74:	ebffefa9 	bl	8920 <_init+0x20>
    ca78:	e1a03000 	mov	r3, r0
    ca7c:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    ca80:	e51b200c 	ldr	r2, [fp, #-12]
    ca84:	e55b300d 	ldrb	r3, [fp, #-13]
    ca88:	e1a00002 	mov	r0, r2
    ca8c:	e59f1080 	ldr	r1, [pc, #128]	; cb14 <g_lldI2c_ReadI2c_bl+0xdc>
    ca90:	e1a02003 	mov	r2, r3
    ca94:	ebffefdd 	bl	8a10 <_init+0x110>

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    ca98:	ea000009 	b	cac4 <g_lldI2c_ReadI2c_bl+0x8c>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    ca9c:	e51b300c 	ldr	r3, [fp, #-12]
    caa0:	e1a00003 	mov	r0, r3
    caa4:	e51b1014 	ldr	r1, [fp, #-20]
    caa8:	e51b2018 	ldr	r2, [fp, #-24]
    caac:	ebffefbf 	bl	89b0 <_init+0xb0>
    cab0:	e1a03000 	mov	r3, r0
    cab4:	e54b3005 	strb	r3, [fp, #-5]
		l_ReadRetryCounter_ui8++;
    cab8:	e55b3006 	ldrb	r3, [fp, #-6]
    cabc:	e2833001 	add	r3, r3, #1
    cac0:	e54b3006 	strb	r3, [fp, #-6]
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    cac4:	e55b2005 	ldrb	r2, [fp, #-5]
    cac8:	e51b3018 	ldr	r3, [fp, #-24]
    cacc:	e1520003 	cmp	r2, r3
    cad0:	0a000002 	beq	cae0 <g_lldI2c_ReadI2c_bl+0xa8>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    cad4:	e55b3006 	ldrb	r3, [fp, #-6]
    cad8:	e3530002 	cmp	r3, #2
    cadc:	9affffee 	bls	ca9c <g_lldI2c_ReadI2c_bl+0x64>
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_ReadRetryCounter_ui8++;
	}

	if(l_ReadRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    cae0:	e55b3006 	ldrb	r3, [fp, #-6]
    cae4:	e3530002 	cmp	r3, #2
    cae8:	9a000001 	bls	caf4 <g_lldI2c_ReadI2c_bl+0xbc>
	{
		return 1;
    caec:	e3a03001 	mov	r3, #1
    caf0:	ea000003 	b	cb04 <g_lldI2c_ReadI2c_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    caf4:	e51b300c 	ldr	r3, [fp, #-12]
    caf8:	e1a00003 	mov	r0, r3
    cafc:	ebffefd2 	bl	8a4c <_init+0x14c>
	if(l_i2cFile_ui32 < 0)
	{
		/*ERROR HANDLER*/
		return 1;
	}
	return(0);
    cb00:	e3a03000 	mov	r3, #0

}
    cb04:	e1a00003 	mov	r0, r3
    cb08:	e24bd004 	sub	sp, fp, #4
    cb0c:	e8bd8800 	pop	{fp, pc}
    cb10:	00010190 	.word	0x00010190
    cb14:	00000703 	.word	0x00000703

0000cb18 <g_lldI2c_WriteI2c0_bl>:
 *
 * 
 * \endinternal
 ***********************************************************************/
unsigned int g_lldI2c_WriteI2c0_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_i2cWriteBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    cb18:	e92d4800 	push	{fp, lr}
    cb1c:	e28db004 	add	fp, sp, #4
    cb20:	e24dd018 	sub	sp, sp, #24
    cb24:	e1a03000 	mov	r3, r0
    cb28:	e50b1014 	str	r1, [fp, #-20]
    cb2c:	e50b2018 	str	r2, [fp, #-24]
    cb30:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_returnOfWrittenBytes_ui8 	= 0;
    cb34:	e3a03000 	mov	r3, #0
    cb38:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_WriteRetryCounter_ui8 	= 0;
    cb3c:	e3a03000 	mov	r3, #0
    cb40:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 				= 0;
    cb44:	e3a03000 	mov	r3, #0
    cb48:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C0_DEV_UI8, O_RDWR);
    cb4c:	e59f009c 	ldr	r0, [pc, #156]	; cbf0 <g_lldI2c_WriteI2c0_bl+0xd8>
    cb50:	e3a01002 	mov	r1, #2
    cb54:	ebffef71 	bl	8920 <_init+0x20>
    cb58:	e1a03000 	mov	r3, r0
    cb5c:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    cb60:	e51b200c 	ldr	r2, [fp, #-12]
    cb64:	e55b300d 	ldrb	r3, [fp, #-13]
    cb68:	e1a00002 	mov	r0, r2
    cb6c:	e59f1080 	ldr	r1, [pc, #128]	; cbf4 <g_lldI2c_WriteI2c0_bl+0xdc>
    cb70:	e1a02003 	mov	r2, r3
    cb74:	ebffefa5 	bl	8a10 <_init+0x110>

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    cb78:	ea000009 	b	cba4 <g_lldI2c_WriteI2c0_bl+0x8c>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    cb7c:	e51b300c 	ldr	r3, [fp, #-12]
    cb80:	e1a00003 	mov	r0, r3
    cb84:	e51b1014 	ldr	r1, [fp, #-20]
    cb88:	e51b2018 	ldr	r2, [fp, #-24]
    cb8c:	ebffef8a 	bl	89bc <_init+0xbc>
    cb90:	e1a03000 	mov	r3, r0
    cb94:	e54b3005 	strb	r3, [fp, #-5]
		l_WriteRetryCounter_ui8++;
    cb98:	e55b3006 	ldrb	r3, [fp, #-6]
    cb9c:	e2833001 	add	r3, r3, #1
    cba0:	e54b3006 	strb	r3, [fp, #-6]

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    cba4:	e55b2005 	ldrb	r2, [fp, #-5]
    cba8:	e51b3018 	ldr	r3, [fp, #-24]
    cbac:	e1520003 	cmp	r2, r3
    cbb0:	0a000002 	beq	cbc0 <g_lldI2c_WriteI2c0_bl+0xa8>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    cbb4:	e55b3006 	ldrb	r3, [fp, #-6]
    cbb8:	e3530002 	cmp	r3, #2
    cbbc:	9affffee 	bls	cb7c <g_lldI2c_WriteI2c0_bl+0x64>
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_WriteRetryCounter_ui8++;
	}

	if(l_WriteRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    cbc0:	e55b3006 	ldrb	r3, [fp, #-6]
    cbc4:	e3530002 	cmp	r3, #2
    cbc8:	9a000001 	bls	cbd4 <g_lldI2c_WriteI2c0_bl+0xbc>
	{
		return 1;
    cbcc:	e3a03001 	mov	r3, #1
    cbd0:	ea000003 	b	cbe4 <g_lldI2c_WriteI2c0_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    cbd4:	e51b300c 	ldr	r3, [fp, #-12]
    cbd8:	e1a00003 	mov	r0, r3
    cbdc:	ebffef9a 	bl	8a4c <_init+0x14c>
	{
		/*ERROR HANDLER*/
		return 1;
	}

	return 0;
    cbe0:	e3a03000 	mov	r3, #0
}
    cbe4:	e1a00003 	mov	r0, r3
    cbe8:	e24bd004 	sub	sp, fp, #4
    cbec:	e8bd8800 	pop	{fp, pc}
    cbf0:	0001019c 	.word	0x0001019c
    cbf4:	00000703 	.word	0x00000703

0000cbf8 <g_lldI2c_ReadI2c0_bl>:
 * 
 * 
 *  * \endinternal
 ***********************************************************************/ 
unsigned int g_lldI2c_ReadI2c0_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_lldI2c_i2cReadBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    cbf8:	e92d4800 	push	{fp, lr}
    cbfc:	e28db004 	add	fp, sp, #4
    cc00:	e24dd018 	sub	sp, sp, #24
    cc04:	e1a03000 	mov	r3, r0
    cc08:	e50b1014 	str	r1, [fp, #-20]
    cc0c:	e50b2018 	str	r2, [fp, #-24]
    cc10:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_ReturnOfReadBytes_ui8 = 0;
    cc14:	e3a03000 	mov	r3, #0
    cc18:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_ReadRetryCounter_ui8 	= 0;
    cc1c:	e3a03000 	mov	r3, #0
    cc20:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 			= 0;
    cc24:	e3a03000 	mov	r3, #0
    cc28:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C0_DEV_UI8, O_RDWR);   //Open I2C device
    cc2c:	e59f009c 	ldr	r0, [pc, #156]	; ccd0 <g_lldI2c_ReadI2c0_bl+0xd8>
    cc30:	e3a01002 	mov	r1, #2
    cc34:	ebffef39 	bl	8920 <_init+0x20>
    cc38:	e1a03000 	mov	r3, r0
    cc3c:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    cc40:	e51b200c 	ldr	r2, [fp, #-12]
    cc44:	e55b300d 	ldrb	r3, [fp, #-13]
    cc48:	e1a00002 	mov	r0, r2
    cc4c:	e59f1080 	ldr	r1, [pc, #128]	; ccd4 <g_lldI2c_ReadI2c0_bl+0xdc>
    cc50:	e1a02003 	mov	r2, r3
    cc54:	ebffef6d 	bl	8a10 <_init+0x110>

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    cc58:	ea000009 	b	cc84 <g_lldI2c_ReadI2c0_bl+0x8c>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    cc5c:	e51b300c 	ldr	r3, [fp, #-12]
    cc60:	e1a00003 	mov	r0, r3
    cc64:	e51b1014 	ldr	r1, [fp, #-20]
    cc68:	e51b2018 	ldr	r2, [fp, #-24]
    cc6c:	ebffef4f 	bl	89b0 <_init+0xb0>
    cc70:	e1a03000 	mov	r3, r0
    cc74:	e54b3005 	strb	r3, [fp, #-5]
		l_ReadRetryCounter_ui8++;
    cc78:	e55b3006 	ldrb	r3, [fp, #-6]
    cc7c:	e2833001 	add	r3, r3, #1
    cc80:	e54b3006 	strb	r3, [fp, #-6]
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    cc84:	e55b2005 	ldrb	r2, [fp, #-5]
    cc88:	e51b3018 	ldr	r3, [fp, #-24]
    cc8c:	e1520003 	cmp	r2, r3
    cc90:	0a000002 	beq	cca0 <g_lldI2c_ReadI2c0_bl+0xa8>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    cc94:	e55b3006 	ldrb	r3, [fp, #-6]
    cc98:	e3530002 	cmp	r3, #2
    cc9c:	9affffee 	bls	cc5c <g_lldI2c_ReadI2c0_bl+0x64>
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_ReadRetryCounter_ui8++;
	}

	if(l_ReadRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    cca0:	e55b3006 	ldrb	r3, [fp, #-6]
    cca4:	e3530002 	cmp	r3, #2
    cca8:	9a000001 	bls	ccb4 <g_lldI2c_ReadI2c0_bl+0xbc>
	{
		return 1;
    ccac:	e3a03001 	mov	r3, #1
    ccb0:	ea000003 	b	ccc4 <g_lldI2c_ReadI2c0_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    ccb4:	e51b300c 	ldr	r3, [fp, #-12]
    ccb8:	e1a00003 	mov	r0, r3
    ccbc:	ebffef62 	bl	8a4c <_init+0x14c>
	if(l_i2cFile_ui32 < 0)
	{
		/*ERROR HANDLER*/
		return 1;
	}
	return(0);
    ccc0:	e3a03000 	mov	r3, #0

}
    ccc4:	e1a00003 	mov	r0, r3
    ccc8:	e24bd004 	sub	sp, fp, #4
    cccc:	e8bd8800 	pop	{fp, pc}
    ccd0:	0001019c 	.word	0x0001019c
    ccd4:	00000703 	.word	0x00000703

0000ccd8 <g_lldUart_uartOpen_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_lldUart_uartOpen_i32(void)
{
    ccd8:	e92d4800 	push	{fp, lr}
    ccdc:	e28db004 	add	fp, sp, #4
    cce0:	e24dd040 	sub	sp, sp, #64	; 0x40
	l_filestream_i32 = open("/dev/ttyAMA0", O_RDWR | O_NOCTTY | O_NDELAY);
    cce4:	e59f00a8 	ldr	r0, [pc, #168]	; cd94 <g_lldUart_uartOpen_i32+0xbc>
    cce8:	e59f10a8 	ldr	r1, [pc, #168]	; cd98 <g_lldUart_uartOpen_i32+0xc0>
    ccec:	ebffef0b 	bl	8920 <_init+0x20>
    ccf0:	e1a02000 	mov	r2, r0
    ccf4:	e59f30a0 	ldr	r3, [pc, #160]	; cd9c <g_lldUart_uartOpen_i32+0xc4>
    ccf8:	e5832000 	str	r2, [r3]
	if (l_filestream_i32 == -1)
    ccfc:	e59f3098 	ldr	r3, [pc, #152]	; cd9c <g_lldUart_uartOpen_i32+0xc4>
    cd00:	e5933000 	ldr	r3, [r3]
    cd04:	e3730001 	cmn	r3, #1
    cd08:	1a000001 	bne	cd14 <g_lldUart_uartOpen_i32+0x3c>
	{
		//Error UART can not be opened
		return(-1);
    cd0c:	e3e03000 	mvn	r3, #0
    cd10:	ea00001c 	b	cd88 <g_lldUart_uartOpen_i32+0xb0>
	}
	struct termios l_options_st;
	tcgetattr(l_filestream_i32, &l_options_st);
    cd14:	e59f3080 	ldr	r3, [pc, #128]	; cd9c <g_lldUart_uartOpen_i32+0xc4>
    cd18:	e5932000 	ldr	r2, [r3]
    cd1c:	e24b3040 	sub	r3, fp, #64	; 0x40
    cd20:	e1a00002 	mov	r0, r2
    cd24:	e1a01003 	mov	r1, r3
    cd28:	ebffef2c 	bl	89e0 <_init+0xe0>
	l_options_st.c_cflag = B9600 | CS8 | CLOCAL | CREAD;
    cd2c:	e59f306c 	ldr	r3, [pc, #108]	; cda0 <g_lldUart_uartOpen_i32+0xc8>
    cd30:	e50b3038 	str	r3, [fp, #-56]	; 0x38
	l_options_st.c_iflag = IGNPAR;
    cd34:	e3a03004 	mov	r3, #4
    cd38:	e50b3040 	str	r3, [fp, #-64]	; 0x40
	l_options_st.c_oflag = 0;
    cd3c:	e3a03000 	mov	r3, #0
    cd40:	e50b303c 	str	r3, [fp, #-60]	; 0x3c
	l_options_st.c_lflag = 0;
    cd44:	e3a03000 	mov	r3, #0
    cd48:	e50b3034 	str	r3, [fp, #-52]	; 0x34
	tcflush(l_filestream_i32, TCIFLUSH);
    cd4c:	e59f3048 	ldr	r3, [pc, #72]	; cd9c <g_lldUart_uartOpen_i32+0xc4>
    cd50:	e5933000 	ldr	r3, [r3]
    cd54:	e1a00003 	mov	r0, r3
    cd58:	e3a01000 	mov	r1, #0
    cd5c:	ebffef22 	bl	89ec <_init+0xec>
	tcsetattr(l_filestream_i32, TCSANOW, &l_options_st);
    cd60:	e59f3034 	ldr	r3, [pc, #52]	; cd9c <g_lldUart_uartOpen_i32+0xc4>
    cd64:	e5932000 	ldr	r2, [r3]
    cd68:	e24b3040 	sub	r3, fp, #64	; 0x40
    cd6c:	e1a00002 	mov	r0, r2
    cd70:	e3a01000 	mov	r1, #0
    cd74:	e1a02003 	mov	r2, r3
    cd78:	ebffef45 	bl	8a94 <_init+0x194>
	sleep(3);
    cd7c:	e3a00003 	mov	r0, #3
    cd80:	ebffef37 	bl	8a64 <_init+0x164>
	return(0);
    cd84:	e3a03000 	mov	r3, #0
}
    cd88:	e1a00003 	mov	r0, r3
    cd8c:	e24bd004 	sub	sp, fp, #4
    cd90:	e8bd8800 	pop	{fp, pc}
    cd94:	000101a8 	.word	0x000101a8
    cd98:	00000902 	.word	0x00000902
    cd9c:	00018420 	.word	0x00018420
    cda0:	000008bd 	.word	0x000008bd

0000cda4 <g_lldUart_readByte_ch>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
char g_lldUart_readByte_ch(void)
{
    cda4:	e92d4800 	push	{fp, lr}
    cda8:	e28db004 	add	fp, sp, #4
    cdac:	e24dd008 	sub	sp, sp, #8
	char l_recChar_ch='0';
    cdb0:	e3a03030 	mov	r3, #48	; 0x30
    cdb4:	e54b3009 	strb	r3, [fp, #-9]
	ssize_t l_nrReadBytes_ssize=0;
    cdb8:	e3a03000 	mov	r3, #0
    cdbc:	e50b3008 	str	r3, [fp, #-8]

	if (l_filestream_i32 == -1)
    cdc0:	e59f3064 	ldr	r3, [pc, #100]	; ce2c <g_lldUart_readByte_ch+0x88>
    cdc4:	e5933000 	ldr	r3, [r3]
    cdc8:	e3730001 	cmn	r3, #1
    cdcc:	1a000000 	bne	cdd4 <g_lldUart_readByte_ch+0x30>
	{
		g_lldUart_uartOpen_i32();
    cdd0:	ebffffc0 	bl	ccd8 <g_lldUart_uartOpen_i32>
	}

	//read new values if l_filestream_i32 is opened
	if (l_filestream_i32 != -1)
    cdd4:	e59f3050 	ldr	r3, [pc, #80]	; ce2c <g_lldUart_readByte_ch+0x88>
    cdd8:	e5933000 	ldr	r3, [r3]
    cddc:	e3730001 	cmn	r3, #1
    cde0:	0a00000d 	beq	ce1c <g_lldUart_readByte_ch+0x78>
	{
		while (l_nrReadBytes_ssize!=1)
    cde4:	ea000007 	b	ce08 <g_lldUart_readByte_ch+0x64>
		{ l_nrReadBytes_ssize=read(l_filestream_i32, &l_recChar_ch, 1);}
    cde8:	e59f303c 	ldr	r3, [pc, #60]	; ce2c <g_lldUart_readByte_ch+0x88>
    cdec:	e5932000 	ldr	r2, [r3]
    cdf0:	e24b3009 	sub	r3, fp, #9
    cdf4:	e1a00002 	mov	r0, r2
    cdf8:	e1a01003 	mov	r1, r3
    cdfc:	e3a02001 	mov	r2, #1
    ce00:	ebffeeea 	bl	89b0 <_init+0xb0>
    ce04:	e50b0008 	str	r0, [fp, #-8]
	}

	//read new values if l_filestream_i32 is opened
	if (l_filestream_i32 != -1)
	{
		while (l_nrReadBytes_ssize!=1)
    ce08:	e51b3008 	ldr	r3, [fp, #-8]
    ce0c:	e3530001 	cmp	r3, #1
    ce10:	1afffff4 	bne	cde8 <g_lldUart_readByte_ch+0x44>
		{ l_nrReadBytes_ssize=read(l_filestream_i32, &l_recChar_ch, 1);}
		return l_recChar_ch;
    ce14:	e55b3009 	ldrb	r3, [fp, #-9]
    ce18:	ea000000 	b	ce20 <g_lldUart_readByte_ch+0x7c>
	}
	return(-1);
    ce1c:	e3a030ff 	mov	r3, #255	; 0xff
}
    ce20:	e1a00003 	mov	r0, r3
    ce24:	e24bd004 	sub	sp, fp, #4
    ce28:	e8bd8800 	pop	{fp, pc}
    ce2c:	00018420 	.word	0x00018420

0000ce30 <g_lldUart_uartClose_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_lldUart_uartClose_i32(void)
{
    ce30:	e92d4800 	push	{fp, lr}
    ce34:	e28db004 	add	fp, sp, #4
	close(l_filestream_i32);
    ce38:	e59f3014 	ldr	r3, [pc, #20]	; ce54 <g_lldUart_uartClose_i32+0x24>
    ce3c:	e5933000 	ldr	r3, [r3]
    ce40:	e1a00003 	mov	r0, r3
    ce44:	ebffef00 	bl	8a4c <_init+0x14c>
	return(0);
    ce48:	e3a03000 	mov	r3, #0
}
    ce4c:	e1a00003 	mov	r0, r3
    ce50:	e8bd8800 	pop	{fp, pc}
    ce54:	00018420 	.word	0x00018420

0000ce58 <g_halMatlab_sendImuState_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_sendImuState_bl(	int f_socketHandler_i32,
											halImu_orientationValues f_imuState_st) {
    ce58:	e24dd008 	sub	sp, sp, #8
    ce5c:	e92d4800 	push	{fp, lr}
    ce60:	e28db004 	add	fp, sp, #4
    ce64:	e24dd070 	sub	sp, sp, #112	; 0x70
    ce68:	e50b0070 	str	r0, [fp, #-112]	; 0x70
    ce6c:	e28b1004 	add	r1, fp, #4
    ce70:	e881000c 	stm	r1, {r2, r3}
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    ce74:	e24b306c 	sub	r3, fp, #108	; 0x6c
    ce78:	e3a00000 	mov	r0, #0
    ce7c:	e1a01003 	mov	r1, r3
    ce80:	ebffeeac 	bl	8938 <_init+0x38>
    ce84:	e1a03000 	mov	r3, r0
    ce88:	e3530000 	cmp	r3, #0
    ce8c:	0a000001 	beq	ce98 <g_halMatlab_sendImuState_bl+0x40>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    ce90:	e3a03001 	mov	r3, #1
    ce94:	ea000010 	b	cedc <g_halMatlab_sendImuState_bl+0x84>
	}

	//assmeble timestamp and
	l_rtImuPayload_st.timestamp_st 	= l_timestamp_st;
    ce98:	e24b3064 	sub	r3, fp, #100	; 0x64
    ce9c:	e24b206c 	sub	r2, fp, #108	; 0x6c
    cea0:	e8920003 	ldm	r2, {r0, r1}
    cea4:	e8830003 	stm	r3, {r0, r1}
	l_rtImuPayload_st.imuState_st	= f_imuState_st;
    cea8:	e24b105c 	sub	r1, fp, #92	; 0x5c
    ceac:	e28b2004 	add	r2, fp, #4
    ceb0:	e3a03058 	mov	r3, #88	; 0x58
    ceb4:	e1a00001 	mov	r0, r1
    ceb8:	e1a01002 	mov	r1, r2
    cebc:	e1a02003 	mov	r2, r3
    cec0:	ebffeed8 	bl	8a28 <_init+0x128>

	return g_halMatlab_sendPacket_bl( 	f_socketHandler_i32,
    cec4:	e24b3064 	sub	r3, fp, #100	; 0x64
    cec8:	e51b0070 	ldr	r0, [fp, #-112]	; 0x70
    cecc:	e1a01003 	mov	r1, r3
    ced0:	e3a02060 	mov	r2, #96	; 0x60
    ced4:	eb000175 	bl	d4b0 <g_halMatlab_sendPacket_bl>
    ced8:	e1a03000 	mov	r3, r0
										(unsigned char*)&l_rtImuPayload_st,
										sizeof( l_rtImuPayload_st ) );
}
    cedc:	e1a00003 	mov	r0, r3
    cee0:	e24bd004 	sub	sp, fp, #4
    cee4:	e8bd4800 	pop	{fp, lr}
    cee8:	e28dd008 	add	sp, sp, #8
    ceec:	e12fff1e 	bx	lr

0000cef0 <g_halMatlab_recvImuStateAndTime_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halMatlab_rtImuPayload g_halMatlab_recvImuStateAndTime_bl(int f_socketHandler_i32) {
    cef0:	e92d4800 	push	{fp, lr}
    cef4:	e28db004 	add	fp, sp, #4
    cef8:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
    cefc:	e50b00d0 	str	r0, [fp, #-208]	; 0xd0
    cf00:	e50b10d4 	str	r1, [fp, #-212]	; 0xd4
	halMatlab_rtImuPayload 		l_recvImuState_st;
	unsigned char				l_recvBuffer_rgXui8[ sizeof(halMatlab_rtImuPayload) ];
	unsigned int				l_recvBytesNumber_ui32;

	// zero all values
	l_recvImuState_st.timestamp_st.tv_sec 	= 0;
    cf04:	e3a03000 	mov	r3, #0
    cf08:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
	l_recvImuState_st.timestamp_st.tv_nsec 	= 0;
    cf0c:	e3a03000 	mov	r3, #0
    cf10:	e50b3068 	str	r3, [fp, #-104]	; 0x68

	l_recvImuState_st.imuState_st.acc.x_f64 = 0;
    cf14:	e3a02000 	mov	r2, #0
    cf18:	e3a03000 	mov	r3, #0
    cf1c:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
	l_recvImuState_st.imuState_st.acc.y_f64 = 0;
    cf20:	e3a02000 	mov	r2, #0
    cf24:	e3a03000 	mov	r3, #0
    cf28:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	l_recvImuState_st.imuState_st.acc.z_f64 = 0;
    cf2c:	e3a02000 	mov	r2, #0
    cf30:	e3a03000 	mov	r3, #0
    cf34:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac

	l_recvImuState_st.imuState_st.gyro.l_pitch_f64 = 0;
    cf38:	e3a02000 	mov	r2, #0
    cf3c:	e3a03000 	mov	r3, #0
    cf40:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
	l_recvImuState_st.imuState_st.gyro.l_roll_f64 = 0;
    cf44:	e3a02000 	mov	r2, #0
    cf48:	e3a03000 	mov	r3, #0
    cf4c:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	l_recvImuState_st.imuState_st.gyro.l_yaw_f64 = 0;
    cf50:	e3a02000 	mov	r2, #0
    cf54:	e3a03000 	mov	r3, #0
    cf58:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc

	l_recvImuState_st.imuState_st.mag.x_f64 = 0;
    cf5c:	e3a02000 	mov	r2, #0
    cf60:	e3a03000 	mov	r3, #0
    cf64:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
	l_recvImuState_st.imuState_st.mag.y_f64 = 0;
    cf68:	e3a02000 	mov	r2, #0
    cf6c:	e3a03000 	mov	r3, #0
    cf70:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	l_recvImuState_st.imuState_st.mag.z_f64 = 0;
    cf74:	e3a02000 	mov	r2, #0
    cf78:	e3a03000 	mov	r3, #0
    cf7c:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4

	l_recvImuState_st.imuState_st.pressure_f64 = 0;
    cf80:	e3a02000 	mov	r2, #0
    cf84:	e3a03000 	mov	r3, #0
    cf88:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	l_recvImuState_st.imuState_st.temperature_f64 = 0;
    cf8c:	e3a02000 	mov	r2, #0
    cf90:	e3a03000 	mov	r3, #0
    cf94:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    cf98:	e24b30cc 	sub	r3, fp, #204	; 0xcc
    cf9c:	e51b00d4 	ldr	r0, [fp, #-212]	; 0xd4
    cfa0:	e1a01003 	mov	r1, r3
    cfa4:	e3a02060 	mov	r2, #96	; 0x60
    cfa8:	eb00019f 	bl	d62c <g_halMatlab_recvPacket_ui32>
    cfac:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halMatlab_rtImuPayload) );

	if ( l_recvBytesNumber_ui32 == sizeof(halMatlab_rtImuPayload) )
    cfb0:	e51b3008 	ldr	r3, [fp, #-8]
    cfb4:	e3530060 	cmp	r3, #96	; 0x60
    cfb8:	1a000005 	bne	cfd4 <g_halMatlab_recvImuStateAndTime_bl+0xe4>
	{
		memcpy( &l_recvImuState_st, &l_recvBuffer_rgXui8, sizeof(halMatlab_rtImuPayload));
    cfbc:	e24b206c 	sub	r2, fp, #108	; 0x6c
    cfc0:	e24b30cc 	sub	r3, fp, #204	; 0xcc
    cfc4:	e1a00002 	mov	r0, r2
    cfc8:	e1a01003 	mov	r1, r3
    cfcc:	e3a02060 	mov	r2, #96	; 0x60
    cfd0:	ebffee94 	bl	8a28 <_init+0x128>
	}

	return l_recvImuState_st;
    cfd4:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xd0
    cfd8:	e1a01003 	mov	r1, r3
    cfdc:	e24b206c 	sub	r2, fp, #108	; 0x6c
    cfe0:	e3a03060 	mov	r3, #96	; 0x60
    cfe4:	e1a00001 	mov	r0, r1
    cfe8:	e1a01002 	mov	r1, r2
    cfec:	e1a02003 	mov	r2, r3
    cff0:	ebffee8c 	bl	8a28 <_init+0x128>
}
    cff4:	e51b00d0 	ldr	r0, [fp, #-208]	; 0xd0
    cff8:	e24bd004 	sub	sp, fp, #4
    cffc:	e8bd8800 	pop	{fp, pc}

0000d000 <g_halMatlab_recvImuState_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halImu_orientationValues g_halMatlab_recvImuState_bl(int f_socketHandler_i32) {
    d000:	e92d4800 	push	{fp, lr}
    d004:	e28db004 	add	fp, sp, #4
    d008:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
    d00c:	e50b00c8 	str	r0, [fp, #-200]	; 0xc8
    d010:	e50b10cc 	str	r1, [fp, #-204]	; 0xcc
	halImu_orientationValues 		l_recvImuState_st;
	unsigned char				l_recvBuffer_rgXui8[ sizeof(halMatlab_rtImuPayload) ];
	unsigned int				l_recvBytesNumber_ui32;

	l_recvImuState_st.acc.x_f64 = 0;
    d014:	e3a02000 	mov	r2, #0
    d018:	e3a03000 	mov	r3, #0
    d01c:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
	l_recvImuState_st.acc.y_f64 = 0;
    d020:	e3a02000 	mov	r2, #0
    d024:	e3a03000 	mov	r3, #0
    d028:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	l_recvImuState_st.acc.z_f64 = 0;
    d02c:	e3a02000 	mov	r2, #0
    d030:	e3a03000 	mov	r3, #0
    d034:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac

	l_recvImuState_st.gyro.l_pitch_f64 = 0;
    d038:	e3a02000 	mov	r2, #0
    d03c:	e3a03000 	mov	r3, #0
    d040:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
	l_recvImuState_st.gyro.l_roll_f64 = 0;
    d044:	e3a02000 	mov	r2, #0
    d048:	e3a03000 	mov	r3, #0
    d04c:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	l_recvImuState_st.gyro.l_yaw_f64 = 0;
    d050:	e3a02000 	mov	r2, #0
    d054:	e3a03000 	mov	r3, #0
    d058:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc

	l_recvImuState_st.mag.x_f64 = 0;
    d05c:	e3a02000 	mov	r2, #0
    d060:	e3a03000 	mov	r3, #0
    d064:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
	l_recvImuState_st.mag.y_f64 = 0;
    d068:	e3a02000 	mov	r2, #0
    d06c:	e3a03000 	mov	r3, #0
    d070:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	l_recvImuState_st.mag.z_f64 = 0;
    d074:	e3a02000 	mov	r2, #0
    d078:	e3a03000 	mov	r3, #0
    d07c:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4

	l_recvImuState_st.pressure_f64 = 0;
    d080:	e3a02000 	mov	r2, #0
    d084:	e3a03000 	mov	r3, #0
    d088:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	l_recvImuState_st.temperature_f64 = 0;
    d08c:	e3a02000 	mov	r2, #0
    d090:	e3a03000 	mov	r3, #0
    d094:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    d098:	e24b30c4 	sub	r3, fp, #196	; 0xc4
    d09c:	e51b00cc 	ldr	r0, [fp, #-204]	; 0xcc
    d0a0:	e1a01003 	mov	r1, r3
    d0a4:	e3a02058 	mov	r2, #88	; 0x58
    d0a8:	eb00015f 	bl	d62c <g_halMatlab_recvPacket_ui32>
    d0ac:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halImu_orientationValues) );

	if ( l_recvBytesNumber_ui32 == sizeof(halImu_orientationValues) )
    d0b0:	e51b3008 	ldr	r3, [fp, #-8]
    d0b4:	e3530058 	cmp	r3, #88	; 0x58
    d0b8:	1a000005 	bne	d0d4 <g_halMatlab_recvImuState_bl+0xd4>
	{
		memcpy( &l_recvImuState_st, &l_recvBuffer_rgXui8, sizeof(halImu_orientationValues));
    d0bc:	e24b2064 	sub	r2, fp, #100	; 0x64
    d0c0:	e24b30c4 	sub	r3, fp, #196	; 0xc4
    d0c4:	e1a00002 	mov	r0, r2
    d0c8:	e1a01003 	mov	r1, r3
    d0cc:	e3a02058 	mov	r2, #88	; 0x58
    d0d0:	ebffee54 	bl	8a28 <_init+0x128>
	}

	return l_recvImuState_st;
    d0d4:	e51b30c8 	ldr	r3, [fp, #-200]	; 0xc8
    d0d8:	e1a01003 	mov	r1, r3
    d0dc:	e24b2064 	sub	r2, fp, #100	; 0x64
    d0e0:	e3a03058 	mov	r3, #88	; 0x58
    d0e4:	e1a00001 	mov	r0, r1
    d0e8:	e1a01002 	mov	r1, r2
    d0ec:	e1a02003 	mov	r2, r3
    d0f0:	ebffee4c 	bl	8a28 <_init+0x128>
}
    d0f4:	e51b00c8 	ldr	r0, [fp, #-200]	; 0xc8
    d0f8:	e24bd004 	sub	sp, fp, #4
    d0fc:	e8bd8800 	pop	{fp, pc}

0000d100 <l_findFreeSocketSlot_i16>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static signed short l_findFreeSocketSlot_i16(void)
{
    d100:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    d104:	e28db000 	add	fp, sp, #0
    d108:	e24dd00c 	sub	sp, sp, #12
	signed short l_socketIndex_i16 = 0;
    d10c:	e3a03000 	mov	r3, #0
    d110:	e14b30b6 	strh	r3, [fp, #-6]

	// find empty slot in socket library
	while( 		(m_socketManagementBuffer_rg8st[l_socketIndex_i16].socketHandler_i32 > 0)
    d114:	ea000002 	b	d124 <l_findFreeSocketSlot_i16+0x24>
			&& 	(l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8) )
	{
		l_socketIndex_i16++;
    d118:	e15b30b6 	ldrh	r3, [fp, #-6]
    d11c:	e2833001 	add	r3, r3, #1
    d120:	e14b30b6 	strh	r3, [fp, #-6]
static signed short l_findFreeSocketSlot_i16(void)
{
	signed short l_socketIndex_i16 = 0;

	// find empty slot in socket library
	while( 		(m_socketManagementBuffer_rg8st[l_socketIndex_i16].socketHandler_i32 > 0)
    d124:	e15b20f6 	ldrsh	r2, [fp, #-6]
    d128:	e59f005c 	ldr	r0, [pc, #92]	; d18c <l_findFreeSocketSlot_i16+0x8c>
    d12c:	e3a01020 	mov	r1, #32
    d130:	e1a03002 	mov	r3, r2
    d134:	e1a03183 	lsl	r3, r3, #3
    d138:	e0833002 	add	r3, r3, r2
    d13c:	e1a03103 	lsl	r3, r3, #2
    d140:	e0803003 	add	r3, r0, r3
    d144:	e0833001 	add	r3, r3, r1
    d148:	e5933000 	ldr	r3, [r3]
    d14c:	e3530000 	cmp	r3, #0
    d150:	da000002 	ble	d160 <l_findFreeSocketSlot_i16+0x60>
			&& 	(l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8) )
    d154:	e15b30f6 	ldrsh	r3, [fp, #-6]
    d158:	e3530007 	cmp	r3, #7
    d15c:	daffffed 	ble	d118 <l_findFreeSocketSlot_i16+0x18>
	{
		l_socketIndex_i16++;
	}

	// if all slots are occupied, do not open a new one
	if (l_socketIndex_i16 >= M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8)
    d160:	e15b30f6 	ldrsh	r3, [fp, #-6]
    d164:	e3530007 	cmp	r3, #7
    d168:	da000001 	ble	d174 <l_findFreeSocketSlot_i16+0x74>
	{
		return M_HAL_MATLAB_ERROR_I8;
    d16c:	e59f301c 	ldr	r3, [pc, #28]	; d190 <l_findFreeSocketSlot_i16+0x90>
    d170:	ea000000 	b	d178 <l_findFreeSocketSlot_i16+0x78>
	}

	return l_socketIndex_i16;
    d174:	e15b30b6 	ldrh	r3, [fp, #-6]
    d178:	e6bf3073 	sxth	r3, r3
}
    d17c:	e1a00003 	mov	r0, r3
    d180:	e24bd000 	sub	sp, fp, #0
    d184:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    d188:	e12fff1e 	bx	lr
    d18c:	000189a8 	.word	0x000189a8
    d190:	0000ffff 	.word	0x0000ffff

0000d194 <l_findSocket_i16>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static signed short l_findSocket_i16(signed int f_socketHandler_i32)
{
    d194:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    d198:	e28db000 	add	fp, sp, #0
    d19c:	e24dd014 	sub	sp, sp, #20
    d1a0:	e50b0010 	str	r0, [fp, #-16]
	signed short l_socketIndex_i16 = 0;
    d1a4:	e3a03000 	mov	r3, #0
    d1a8:	e14b30b6 	strh	r3, [fp, #-6]

	if (f_socketHandler_i32 <= 0 )
    d1ac:	e51b3010 	ldr	r3, [fp, #-16]
    d1b0:	e3530000 	cmp	r3, #0
    d1b4:	ca000001 	bgt	d1c0 <l_findSocket_i16+0x2c>
	{
		return M_HAL_MATLAB_ERROR_I8;
    d1b8:	e59f3088 	ldr	r3, [pc, #136]	; d248 <l_findSocket_i16+0xb4>
    d1bc:	ea00001c 	b	d234 <l_findSocket_i16+0xa0>
	}

	// find socket handler
	for( l_socketIndex_i16=0; l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8; l_socketIndex_i16++ )
    d1c0:	e3a03000 	mov	r3, #0
    d1c4:	e14b30b6 	strh	r3, [fp, #-6]
    d1c8:	ea000010 	b	d210 <l_findSocket_i16+0x7c>
	{
		if ( m_socketManagementBuffer_rg8st[l_socketIndex_i16].socketHandler_i32 == f_socketHandler_i32 )
    d1cc:	e15b20f6 	ldrsh	r2, [fp, #-6]
    d1d0:	e59f0074 	ldr	r0, [pc, #116]	; d24c <l_findSocket_i16+0xb8>
    d1d4:	e3a01020 	mov	r1, #32
    d1d8:	e1a03002 	mov	r3, r2
    d1dc:	e1a03183 	lsl	r3, r3, #3
    d1e0:	e0833002 	add	r3, r3, r2
    d1e4:	e1a03103 	lsl	r3, r3, #2
    d1e8:	e0803003 	add	r3, r0, r3
    d1ec:	e0833001 	add	r3, r3, r1
    d1f0:	e5932000 	ldr	r2, [r3]
    d1f4:	e51b3010 	ldr	r3, [fp, #-16]
    d1f8:	e1520003 	cmp	r2, r3
    d1fc:	1a000000 	bne	d204 <l_findSocket_i16+0x70>
		{
			break;
    d200:	ea000005 	b	d21c <l_findSocket_i16+0x88>
	{
		return M_HAL_MATLAB_ERROR_I8;
	}

	// find socket handler
	for( l_socketIndex_i16=0; l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8; l_socketIndex_i16++ )
    d204:	e15b30b6 	ldrh	r3, [fp, #-6]
    d208:	e2833001 	add	r3, r3, #1
    d20c:	e14b30b6 	strh	r3, [fp, #-6]
    d210:	e15b30f6 	ldrsh	r3, [fp, #-6]
    d214:	e3530007 	cmp	r3, #7
    d218:	daffffeb 	ble	d1cc <l_findSocket_i16+0x38>
			break;
		}
	}

	// if all slots are occupied, do not open a new one
	if (l_socketIndex_i16 >= M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8)
    d21c:	e15b30f6 	ldrsh	r3, [fp, #-6]
    d220:	e3530007 	cmp	r3, #7
    d224:	da000001 	ble	d230 <l_findSocket_i16+0x9c>
	{
		return M_HAL_MATLAB_ERROR_I8;
    d228:	e59f3018 	ldr	r3, [pc, #24]	; d248 <l_findSocket_i16+0xb4>
    d22c:	ea000000 	b	d234 <l_findSocket_i16+0xa0>
	}

	return l_socketIndex_i16;
    d230:	e15b30b6 	ldrh	r3, [fp, #-6]
    d234:	e6bf3073 	sxth	r3, r3
}
    d238:	e1a00003 	mov	r0, r3
    d23c:	e24bd000 	sub	sp, fp, #0
    d240:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    d244:	e12fff1e 	bx	lr
    d248:	0000ffff 	.word	0x0000ffff
    d24c:	000189a8 	.word	0x000189a8

0000d250 <g_halMatlab_initSocket_i32>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
int g_halMatlab_initSocket_i32(	unsigned short f_udpListenPort_ui16 )
{
    d250:	e92d4800 	push	{fp, lr}
    d254:	e28db004 	add	fp, sp, #4
    d258:	e24dd010 	sub	sp, sp, #16
    d25c:	e1a03000 	mov	r3, r0
    d260:	e14b30be 	strh	r3, [fp, #-14]
	signed short 			l_socketSlotCtr_i16 = 0;
    d264:	e3a03000 	mov	r3, #0
    d268:	e14b30b6 	strh	r3, [fp, #-6]
	halMatlab_socketData* 	l_freeSocketSlot_pst;
#ifdef _WIN32
    WSADATA wsa;
#endif
    
	if ( (l_socketSlotCtr_i16 = l_findFreeSocketSlot_i16()) < 0)
    d26c:	ebffffa3 	bl	d100 <l_findFreeSocketSlot_i16>
    d270:	e1a03000 	mov	r3, r0
    d274:	e14b30b6 	strh	r3, [fp, #-6]
    d278:	e15b30f6 	ldrsh	r3, [fp, #-6]
    d27c:	e3530000 	cmp	r3, #0
    d280:	aa000001 	bge	d28c <g_halMatlab_initSocket_i32+0x3c>
	{
		return M_HAL_MATLAB_ERROR_I8;
    d284:	e3e03000 	mvn	r3, #0
    d288:	ea00003c 	b	d380 <g_halMatlab_initSocket_i32+0x130>
	}


	l_freeSocketSlot_pst = &m_socketManagementBuffer_rg8st[l_socketSlotCtr_i16];
    d28c:	e15b20f6 	ldrsh	r2, [fp, #-6]
    d290:	e1a03002 	mov	r3, r2
    d294:	e1a03183 	lsl	r3, r3, #3
    d298:	e0833002 	add	r3, r3, r2
    d29c:	e1a03103 	lsl	r3, r3, #2
    d2a0:	e59f20e4 	ldr	r2, [pc, #228]	; d38c <g_halMatlab_initSocket_i32+0x13c>
    d2a4:	e0833002 	add	r3, r3, r2
    d2a8:	e50b300c 	str	r3, [fp, #-12]
	{
		return M_HAL_MATLAB_ERROR_I8;
	}
#endif
	// open socket
	if ( (l_freeSocketSlot_pst->socketHandler_i32 = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1 )
    d2ac:	e3a00002 	mov	r0, #2
    d2b0:	e3a01002 	mov	r1, #2
    d2b4:	e3a02011 	mov	r2, #17
    d2b8:	ebffedce 	bl	89f8 <_init+0xf8>
    d2bc:	e1a02000 	mov	r2, r0
    d2c0:	e51b300c 	ldr	r3, [fp, #-12]
    d2c4:	e5832020 	str	r2, [r3, #32]
    d2c8:	e51b300c 	ldr	r3, [fp, #-12]
    d2cc:	e5933020 	ldr	r3, [r3, #32]
    d2d0:	e3730001 	cmn	r3, #1
    d2d4:	1a000004 	bne	d2ec <g_halMatlab_initSocket_i32+0x9c>
	{
		l_freeSocketSlot_pst->socketHandler_i32 = 0;
    d2d8:	e51b300c 	ldr	r3, [fp, #-12]
    d2dc:	e3a02000 	mov	r2, #0
    d2e0:	e5832020 	str	r2, [r3, #32]
		return M_HAL_MATLAB_ERROR_I8;
    d2e4:	e3e03000 	mvn	r3, #0
    d2e8:	ea000024 	b	d380 <g_halMatlab_initSocket_i32+0x130>
	}

	// bind ip
	// -->zero out the structure
	memset(	(char*)&(l_freeSocketSlot_pst->sockAddrListen_st), 0, sizeof(l_freeSocketSlot_pst->sockAddrListen_st) );
    d2ec:	e51b300c 	ldr	r3, [fp, #-12]
    d2f0:	e1a00003 	mov	r0, r3
    d2f4:	e3a01000 	mov	r1, #0
    d2f8:	e3a02010 	mov	r2, #16
    d2fc:	ebffeda2 	bl	898c <_init+0x8c>

	l_freeSocketSlot_pst->sockAddrListen_st.sin_family 		= AF_INET;
    d300:	e51b300c 	ldr	r3, [fp, #-12]
    d304:	e3a02002 	mov	r2, #2
    d308:	e1c320b0 	strh	r2, [r3]
	l_freeSocketSlot_pst->sockAddrListen_st.sin_port 		= htons((uint16_t)f_udpListenPort_ui16);
    d30c:	e15b30be 	ldrh	r3, [fp, #-14]
    d310:	e1a00003 	mov	r0, r3
    d314:	ebffed99 	bl	8980 <_init+0x80>
    d318:	e1a03000 	mov	r3, r0
    d31c:	e1a02003 	mov	r2, r3
    d320:	e51b300c 	ldr	r3, [fp, #-12]
    d324:	e1c320b2 	strh	r2, [r3, #2]
	l_freeSocketSlot_pst->sockAddrListen_st.sin_addr.s_addr = htonl(INADDR_ANY);
    d328:	e3a00000 	mov	r0, #0
    d32c:	ebffeddb 	bl	8aa0 <_init+0x1a0>
    d330:	e1a02000 	mov	r2, r0
    d334:	e51b300c 	ldr	r3, [fp, #-12]
    d338:	e5832004 	str	r2, [r3, #4]

	//bind socket to port
	if( bind(	l_freeSocketSlot_pst->socketHandler_i32 ,
    d33c:	e51b300c 	ldr	r3, [fp, #-12]
    d340:	e5932020 	ldr	r2, [r3, #32]
				(struct sockaddr*)&(l_freeSocketSlot_pst->sockAddrListen_st),
    d344:	e51b300c 	ldr	r3, [fp, #-12]
	l_freeSocketSlot_pst->sockAddrListen_st.sin_family 		= AF_INET;
	l_freeSocketSlot_pst->sockAddrListen_st.sin_port 		= htons((uint16_t)f_udpListenPort_ui16);
	l_freeSocketSlot_pst->sockAddrListen_st.sin_addr.s_addr = htonl(INADDR_ANY);

	//bind socket to port
	if( bind(	l_freeSocketSlot_pst->socketHandler_i32 ,
    d348:	e1a00002 	mov	r0, r2
    d34c:	e1a01003 	mov	r1, r3
    d350:	e3a02010 	mov	r2, #16
    d354:	ebffedb9 	bl	8a40 <_init+0x140>
    d358:	e1a03000 	mov	r3, r0
    d35c:	e3730001 	cmn	r3, #1
    d360:	1a000004 	bne	d378 <g_halMatlab_initSocket_i32+0x128>
				(struct sockaddr*)&(l_freeSocketSlot_pst->sockAddrListen_st),
				sizeof(l_freeSocketSlot_pst->sockAddrListen_st)
				)
		== -1 )
	{
		l_freeSocketSlot_pst->socketHandler_i32 = 0;
    d364:	e51b300c 	ldr	r3, [fp, #-12]
    d368:	e3a02000 	mov	r2, #0
    d36c:	e5832020 	str	r2, [r3, #32]
		return M_HAL_MATLAB_ERROR_I8;
    d370:	e3e03000 	mvn	r3, #0
    d374:	ea000001 	b	d380 <g_halMatlab_initSocket_i32+0x130>
	}

	return l_freeSocketSlot_pst->socketHandler_i32;
    d378:	e51b300c 	ldr	r3, [fp, #-12]
    d37c:	e5933020 	ldr	r3, [r3, #32]
}
    d380:	e1a00003 	mov	r0, r3
    d384:	e24bd004 	sub	sp, fp, #4
    d388:	e8bd8800 	pop	{fp, pc}
    d38c:	000189a8 	.word	0x000189a8

0000d390 <g_halMatlab_initConnection_i32>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
int 	g_halMatlab_initConnection_i32(const unsigned char* const f_destIpv4_rg4ui8, unsigned short f_udpConnectionPort_ui16 )
{
    d390:	e92d4800 	push	{fp, lr}
    d394:	e28db004 	add	fp, sp, #4
    d398:	e24dd010 	sub	sp, sp, #16
    d39c:	e50b0010 	str	r0, [fp, #-16]
    d3a0:	e1a03001 	mov	r3, r1
    d3a4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	int	l_socketHandler_i32;

	// create socket
	if ( ( l_socketHandler_i32 = g_halMatlab_initSocket_i32(f_udpConnectionPort_ui16) ) <= 0 )
    d3a8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    d3ac:	e1a00003 	mov	r0, r3
    d3b0:	ebffffa6 	bl	d250 <g_halMatlab_initSocket_i32>
    d3b4:	e50b0008 	str	r0, [fp, #-8]
    d3b8:	e51b3008 	ldr	r3, [fp, #-8]
    d3bc:	e3530000 	cmp	r3, #0
    d3c0:	ca000001 	bgt	d3cc <g_halMatlab_initConnection_i32+0x3c>
	{
		// error occurred
		return M_HAL_MATLAB_ERROR_I8;
    d3c4:	e3e03000 	mvn	r3, #0
    d3c8:	ea00000a 	b	d3f8 <g_halMatlab_initConnection_i32+0x68>
	 *                        |  >Local machine>  |
	 *  ----------------------+  >sends to 5000>  +-----------------------
	 *     Local machine                               Remote machine
	 *
	 */
	if ( g_halMatlab_configSocket_bl(l_socketHandler_i32, f_destIpv4_rg4ui8, f_udpConnectionPort_ui16) != M_HAL_MATLAB_SUCCESS_UI8 )
    d3cc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    d3d0:	e51b0008 	ldr	r0, [fp, #-8]
    d3d4:	e51b1010 	ldr	r1, [fp, #-16]
    d3d8:	e1a02003 	mov	r2, r3
    d3dc:	eb0000c2 	bl	d6ec <g_halMatlab_configSocket_bl>
    d3e0:	e1a03000 	mov	r3, r0
    d3e4:	e3530000 	cmp	r3, #0
    d3e8:	0a000001 	beq	d3f4 <g_halMatlab_initConnection_i32+0x64>
	{
		// error occurred
		return M_HAL_MATLAB_ERROR_I8;
    d3ec:	e3e03000 	mvn	r3, #0
    d3f0:	ea000000 	b	d3f8 <g_halMatlab_initConnection_i32+0x68>
	}

	return l_socketHandler_i32;
    d3f4:	e51b3008 	ldr	r3, [fp, #-8]
}
    d3f8:	e1a00003 	mov	r0, r3
    d3fc:	e24bd004 	sub	sp, fp, #4
    d400:	e8bd8800 	pop	{fp, pc}

0000d404 <g_halMatlab_closeSocket_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_closeSocket_bl(int f_socketHandler_i32)
{
    d404:	e92d4800 	push	{fp, lr}
    d408:	e28db004 	add	fp, sp, #4
    d40c:	e24dd010 	sub	sp, sp, #16
    d410:	e50b0010 	str	r0, [fp, #-16]
	signed short l_socketSlotNumber_i16 = 0;
    d414:	e3a03000 	mov	r3, #0
    d418:	e14b30b6 	strh	r3, [fp, #-6]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    d41c:	e51b0010 	ldr	r0, [fp, #-16]
    d420:	ebffff5b 	bl	d194 <l_findSocket_i16>
    d424:	e1a03000 	mov	r3, r0
    d428:	e14b30b6 	strh	r3, [fp, #-6]
    d42c:	e15b30f6 	ldrsh	r3, [fp, #-6]
    d430:	e3530000 	cmp	r3, #0
    d434:	aa000001 	bge	d440 <g_halMatlab_closeSocket_bl+0x3c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    d438:	e3a03001 	mov	r3, #1
    d43c:	ea000017 	b	d4a0 <g_halMatlab_closeSocket_bl+0x9c>
	}

#ifdef __linux__
	/* close socket */
	close( m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16].socketHandler_i32 );
    d440:	e15b20f6 	ldrsh	r2, [fp, #-6]
    d444:	e59f0060 	ldr	r0, [pc, #96]	; d4ac <g_halMatlab_closeSocket_bl+0xa8>
    d448:	e3a01020 	mov	r1, #32
    d44c:	e1a03002 	mov	r3, r2
    d450:	e1a03183 	lsl	r3, r3, #3
    d454:	e0833002 	add	r3, r3, r2
    d458:	e1a03103 	lsl	r3, r3, #2
    d45c:	e0803003 	add	r3, r0, r3
    d460:	e0833001 	add	r3, r3, r1
    d464:	e5933000 	ldr	r3, [r3]
    d468:	e1a00003 	mov	r0, r3
    d46c:	ebffed76 	bl	8a4c <_init+0x14c>
#elif _WIN32
    closesocket(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16].socketHandler_i32);
    WSACleanup();
#endif
	/* free slot */
	m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16].socketHandler_i32 = 0;
    d470:	e15b20f6 	ldrsh	r2, [fp, #-6]
    d474:	e59f0030 	ldr	r0, [pc, #48]	; d4ac <g_halMatlab_closeSocket_bl+0xa8>
    d478:	e3a01020 	mov	r1, #32
    d47c:	e1a03002 	mov	r3, r2
    d480:	e1a03183 	lsl	r3, r3, #3
    d484:	e0833002 	add	r3, r3, r2
    d488:	e1a03103 	lsl	r3, r3, #2
    d48c:	e0803003 	add	r3, r0, r3
    d490:	e0833001 	add	r3, r3, r1
    d494:	e3a02000 	mov	r2, #0
    d498:	e5832000 	str	r2, [r3]

	return M_HAL_MATLAB_SUCCESS_UI8;
    d49c:	e3a03000 	mov	r3, #0
}
    d4a0:	e1a00003 	mov	r0, r3
    d4a4:	e24bd004 	sub	sp, fp, #4
    d4a8:	e8bd8800 	pop	{fp, pc}
    d4ac:	000189a8 	.word	0x000189a8

0000d4b0 <g_halMatlab_sendPacket_bl>:
 ***********************************************************************/
unsigned int g_halMatlab_sendPacket_bl(	int f_socketHandler_i32,
										const unsigned char* const f_sendBuffer_pui8,
										unsigned int f_sendBufferSize_ui32
										)
{
    d4b0:	e92d4800 	push	{fp, lr}
    d4b4:	e28db004 	add	fp, sp, #4
    d4b8:	e24dd028 	sub	sp, sp, #40	; 0x28
    d4bc:	e50b0018 	str	r0, [fp, #-24]
    d4c0:	e50b101c 	str	r1, [fp, #-28]
    d4c4:	e50b2020 	str	r2, [fp, #-32]
	int						l_sendSuccess_i32		= -1;
    d4c8:	e3e03000 	mvn	r3, #0
    d4cc:	e50b3008 	str	r3, [fp, #-8]
	signed short 			l_socketSlotNumber_i16 	= 0;
    d4d0:	e3a03000 	mov	r3, #0
    d4d4:	e14b30ba 	strh	r3, [fp, #-10]
	halMatlab_socketData* 	l_socketConfig_pst		= 0;
    d4d8:	e3a03000 	mov	r3, #0
    d4dc:	e50b3010 	str	r3, [fp, #-16]
	unsigned int			l_socketStructSize_ui32	= 0;
    d4e0:	e3a03000 	mov	r3, #0
    d4e4:	e50b3014 	str	r3, [fp, #-20]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    d4e8:	e51b0018 	ldr	r0, [fp, #-24]
    d4ec:	ebffff28 	bl	d194 <l_findSocket_i16>
    d4f0:	e1a03000 	mov	r3, r0
    d4f4:	e14b30ba 	strh	r3, [fp, #-10]
    d4f8:	e15b30fa 	ldrsh	r3, [fp, #-10]
    d4fc:	e3530000 	cmp	r3, #0
    d500:	aa000001 	bge	d50c <g_halMatlab_sendPacket_bl+0x5c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    d504:	e3a03001 	mov	r3, #1
    d508:	ea00001a 	b	d578 <g_halMatlab_sendPacket_bl+0xc8>
	}

	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);
    d50c:	e15b20fa 	ldrsh	r2, [fp, #-10]
    d510:	e1a03002 	mov	r3, r2
    d514:	e1a03183 	lsl	r3, r3, #3
    d518:	e0833002 	add	r3, r3, r2
    d51c:	e1a03103 	lsl	r3, r3, #2
    d520:	e59f205c 	ldr	r2, [pc, #92]	; d584 <g_halMatlab_sendPacket_bl+0xd4>
    d524:	e0833002 	add	r3, r3, r2
    d528:	e50b3010 	str	r3, [fp, #-16]

	// send telegram
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
    d52c:	e3a03010 	mov	r3, #16
    d530:	e50b3014 	str	r3, [fp, #-20]
	l_sendSuccess_i32 = sendto(	f_socketHandler_i32,
								f_sendBuffer_pui8,
								f_sendBufferSize_ui32,
								0 ,
								(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
    d534:	e51b3010 	ldr	r3, [fp, #-16]
    d538:	e2833010 	add	r3, r3, #16
	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);

	// send telegram
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
	l_sendSuccess_i32 = sendto(	f_socketHandler_i32,
    d53c:	e58d3000 	str	r3, [sp]
    d540:	e51b3014 	ldr	r3, [fp, #-20]
    d544:	e58d3004 	str	r3, [sp, #4]
    d548:	e51b0018 	ldr	r0, [fp, #-24]
    d54c:	e51b101c 	ldr	r1, [fp, #-28]
    d550:	e51b2020 	ldr	r2, [fp, #-32]
    d554:	e3a03000 	mov	r3, #0
    d558:	ebffed05 	bl	8974 <_init+0x74>
    d55c:	e50b0008 	str	r0, [fp, #-8]
								f_sendBufferSize_ui32,
								0 ,
								(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
								l_socketStructSize_ui32 );

	if ( l_sendSuccess_i32 == M_HAL_MATLAB_ERROR_I8 )
    d560:	e51b3008 	ldr	r3, [fp, #-8]
    d564:	e3730001 	cmn	r3, #1
    d568:	1a000001 	bne	d574 <g_halMatlab_sendPacket_bl+0xc4>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    d56c:	e3a03001 	mov	r3, #1
    d570:	ea000000 	b	d578 <g_halMatlab_sendPacket_bl+0xc8>
	}else{
		return M_HAL_MATLAB_SUCCESS_UI8;
    d574:	e3a03000 	mov	r3, #0
	}
}
    d578:	e1a00003 	mov	r0, r3
    d57c:	e24bd004 	sub	sp, fp, #4
    d580:	e8bd8800 	pop	{fp, pc}
    d584:	000189a8 	.word	0x000189a8

0000d588 <g_halMatlab_sendRtDataPacket_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_sendRtDataPacket_bl(	int f_socketHandler_i32,
												const unsigned char* const f_sendBuffer_pui8,
												unsigned int f_sendBufferSize_ui32)
{
    d588:	e92d4800 	push	{fp, lr}
    d58c:	e28db004 	add	fp, sp, #4
    d590:	e24dde22 	sub	sp, sp, #544	; 0x220
    d594:	e50b0218 	str	r0, [fp, #-536]	; 0x218
    d598:	e50b121c 	str	r1, [fp, #-540]	; 0x21c
    d59c:	e50b2220 	str	r2, [fp, #-544]	; 0x220
	struct timespec			l_timestamp_st;
	unsigned char			l_sendBuffer_rgXi8[M_HAL_MATLAB_SEND_BUFFER_SIZE_UI16];
	unsigned int			l_sizePayload_ui32		= 0;
    d5a0:	e3a03000 	mov	r3, #0
    d5a4:	e50b3008 	str	r3, [fp, #-8]
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    d5a8:	e24b3010 	sub	r3, fp, #16
    d5ac:	e3a00000 	mov	r0, #0
    d5b0:	e1a01003 	mov	r1, r3
    d5b4:	ebffecdf 	bl	8938 <_init+0x38>
    d5b8:	e1a03000 	mov	r3, r0
    d5bc:	e3530000 	cmp	r3, #0
    d5c0:	0a000001 	beq	d5cc <g_halMatlab_sendRtDataPacket_bl+0x44>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    d5c4:	e3a03001 	mov	r3, #1
    d5c8:	ea000014 	b	d620 <g_halMatlab_sendRtDataPacket_bl+0x98>
	}

	// add timestamp to payload data
	memcpy(	l_sendBuffer_rgXi8,
    d5cc:	e24b2e21 	sub	r2, fp, #528	; 0x210
    d5d0:	e24b3010 	sub	r3, fp, #16
    d5d4:	e1a00002 	mov	r0, r2
    d5d8:	e1a01003 	mov	r1, r3
    d5dc:	e3a02008 	mov	r2, #8
    d5e0:	ebffed10 	bl	8a28 <_init+0x128>
			&l_timestamp_st,
			sizeof(l_timestamp_st) );
	memcpy(	(l_sendBuffer_rgXi8+sizeof(l_timestamp_st)),
    d5e4:	e24b3e21 	sub	r3, fp, #528	; 0x210
    d5e8:	e2833008 	add	r3, r3, #8
    d5ec:	e1a00003 	mov	r0, r3
    d5f0:	e51b121c 	ldr	r1, [fp, #-540]	; 0x21c
    d5f4:	e51b2220 	ldr	r2, [fp, #-544]	; 0x220
    d5f8:	ebffed0a 	bl	8a28 <_init+0x128>
			f_sendBuffer_pui8,
			f_sendBufferSize_ui32 );

	// adjust size of telegram's payload (due to added timestamp)
	l_sizePayload_ui32 = f_sendBufferSize_ui32 + sizeof(l_timestamp_st);
    d5fc:	e51b3220 	ldr	r3, [fp, #-544]	; 0x220
    d600:	e2833008 	add	r3, r3, #8
    d604:	e50b3008 	str	r3, [fp, #-8]

	return g_halMatlab_sendPacket_bl(f_socketHandler_i32, l_sendBuffer_rgXi8, l_sizePayload_ui32);
    d608:	e24b3e21 	sub	r3, fp, #528	; 0x210
    d60c:	e51b0218 	ldr	r0, [fp, #-536]	; 0x218
    d610:	e1a01003 	mov	r1, r3
    d614:	e51b2008 	ldr	r2, [fp, #-8]
    d618:	ebffffa4 	bl	d4b0 <g_halMatlab_sendPacket_bl>
    d61c:	e1a03000 	mov	r3, r0
}
    d620:	e1a00003 	mov	r0, r3
    d624:	e24bd004 	sub	sp, fp, #4
    d628:	e8bd8800 	pop	{fp, pc}

0000d62c <g_halMatlab_recvPacket_ui32>:
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_recvPacket_ui32( int f_socketHandler_i32,
		unsigned char* const f_recvBuffer_pui8,
		unsigned int f_recvBufferSize_ui32)
{
    d62c:	e92d4800 	push	{fp, lr}
    d630:	e28db004 	add	fp, sp, #4
    d634:	e24dd028 	sub	sp, sp, #40	; 0x28
    d638:	e50b0018 	str	r0, [fp, #-24]
    d63c:	e50b101c 	str	r1, [fp, #-28]
    d640:	e50b2020 	str	r2, [fp, #-32]
	signed short 			l_socketSlotNumber_i16 	= 0;
    d644:	e3a03000 	mov	r3, #0
    d648:	e14b30b6 	strh	r3, [fp, #-6]
	halMatlab_socketData* 	l_socketConfig_pst		= 0;
    d64c:	e3a03000 	mov	r3, #0
    d650:	e50b300c 	str	r3, [fp, #-12]
	int						l_recvFromFlag_i32		= 0;	// blocking behavior (standard)
    d654:	e3a03000 	mov	r3, #0
    d658:	e50b3010 	str	r3, [fp, #-16]
	unsigned int			l_socketStructSize_ui32	= 0;
    d65c:	e3a03000 	mov	r3, #0
    d660:	e50b3014 	str	r3, [fp, #-20]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    d664:	e51b0018 	ldr	r0, [fp, #-24]
    d668:	ebfffec9 	bl	d194 <l_findSocket_i16>
    d66c:	e1a03000 	mov	r3, r0
    d670:	e14b30b6 	strh	r3, [fp, #-6]
    d674:	e15b30f6 	ldrsh	r3, [fp, #-6]
    d678:	e3530000 	cmp	r3, #0
    d67c:	aa000001 	bge	d688 <g_halMatlab_recvPacket_ui32+0x5c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    d680:	e3a03001 	mov	r3, #1
    d684:	ea000014 	b	d6dc <g_halMatlab_recvPacket_ui32+0xb0>
	}

	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);
    d688:	e15b20f6 	ldrsh	r2, [fp, #-6]
    d68c:	e1a03002 	mov	r3, r2
    d690:	e1a03183 	lsl	r3, r3, #3
    d694:	e0833002 	add	r3, r3, r2
    d698:	e1a03103 	lsl	r3, r3, #2
    d69c:	e59f2044 	ldr	r2, [pc, #68]	; d6e8 <g_halMatlab_recvPacket_ui32+0xbc>
    d6a0:	e0833002 	add	r3, r3, r2
    d6a4:	e50b300c 	str	r3, [fp, #-12]
//		// blocking behavior (standard)
//		l_recvFromFlag_i32 = 0;
//	}

	// recv telegram (blocking!)
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
    d6a8:	e3a03010 	mov	r3, #16
    d6ac:	e50b3014 	str	r3, [fp, #-20]
	return recvfrom(	f_socketHandler_i32,
						f_recvBuffer_pui8,
						f_recvBufferSize_ui32,
						l_recvFromFlag_i32,
						(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
    d6b0:	e51b300c 	ldr	r3, [fp, #-12]
    d6b4:	e2833010 	add	r3, r3, #16
//		l_recvFromFlag_i32 = 0;
//	}

	// recv telegram (blocking!)
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
	return recvfrom(	f_socketHandler_i32,
    d6b8:	e58d3000 	str	r3, [sp]
    d6bc:	e24b3014 	sub	r3, fp, #20
    d6c0:	e58d3004 	str	r3, [sp, #4]
    d6c4:	e51b0018 	ldr	r0, [fp, #-24]
    d6c8:	e51b101c 	ldr	r1, [fp, #-28]
    d6cc:	e51b2020 	ldr	r2, [fp, #-32]
    d6d0:	e51b3010 	ldr	r3, [fp, #-16]
    d6d4:	ebffecf7 	bl	8ab8 <_init+0x1b8>
    d6d8:	e1a03000 	mov	r3, r0
						f_recvBuffer_pui8,
						f_recvBufferSize_ui32,
						l_recvFromFlag_i32,
						(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
						&l_socketStructSize_ui32);
}
    d6dc:	e1a00003 	mov	r0, r3
    d6e0:	e24bd004 	sub	sp, fp, #4
    d6e4:	e8bd8800 	pop	{fp, pc}
    d6e8:	000189a8 	.word	0x000189a8

0000d6ec <g_halMatlab_configSocket_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_configSocket_bl(	int f_socketHandler_i32,
		const unsigned char* const f_destIpv4_rg4ui8,
		unsigned short f_destPort_ui16)
{
    d6ec:	e92d4800 	push	{fp, lr}
    d6f0:	e28db004 	add	fp, sp, #4
    d6f4:	e24dd020 	sub	sp, sp, #32
    d6f8:	e50b0018 	str	r0, [fp, #-24]
    d6fc:	e50b101c 	str	r1, [fp, #-28]
    d700:	e1a03002 	mov	r3, r2
    d704:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
	signed short 			l_socketSlotNumber_i16 	= 0;
    d708:	e3a03000 	mov	r3, #0
    d70c:	e14b30b6 	strh	r3, [fp, #-6]
	halMatlab_socketData* 	l_socketConfig_pst		= 0;
    d710:	e3a03000 	mov	r3, #0
    d714:	e50b300c 	str	r3, [fp, #-12]
	unsigned int			l_ipv4Addr_ui32			= 0;
    d718:	e3a03000 	mov	r3, #0
    d71c:	e50b3010 	str	r3, [fp, #-16]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    d720:	e51b0018 	ldr	r0, [fp, #-24]
    d724:	ebfffe9a 	bl	d194 <l_findSocket_i16>
    d728:	e1a03000 	mov	r3, r0
    d72c:	e14b30b6 	strh	r3, [fp, #-6]
    d730:	e15b30f6 	ldrsh	r3, [fp, #-6]
    d734:	e3530000 	cmp	r3, #0
    d738:	aa000001 	bge	d744 <g_halMatlab_configSocket_bl+0x58>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    d73c:	e3a03001 	mov	r3, #1
    d740:	ea00002f 	b	d804 <g_halMatlab_configSocket_bl+0x118>
	}

	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);
    d744:	e15b20f6 	ldrsh	r2, [fp, #-6]
    d748:	e1a03002 	mov	r3, r2
    d74c:	e1a03183 	lsl	r3, r3, #3
    d750:	e0833002 	add	r3, r3, r2
    d754:	e1a03103 	lsl	r3, r3, #2
    d758:	e59f20b0 	ldr	r2, [pc, #176]	; d810 <g_halMatlab_configSocket_bl+0x124>
    d75c:	e0833002 	add	r3, r3, r2
    d760:	e50b300c 	str	r3, [fp, #-12]

	// set values in l_socketConfig_pst->sockAddrRemote_st
	memset((char*) &l_socketConfig_pst->sockAddrRemote_st, 0, sizeof(l_socketConfig_pst->sockAddrRemote_st));
    d764:	e51b300c 	ldr	r3, [fp, #-12]
    d768:	e2833010 	add	r3, r3, #16
    d76c:	e1a00003 	mov	r0, r3
    d770:	e3a01000 	mov	r1, #0
    d774:	e3a02010 	mov	r2, #16
    d778:	ebffec83 	bl	898c <_init+0x8c>
	l_socketConfig_pst->sockAddrRemote_st.sin_family = AF_INET;
    d77c:	e51b300c 	ldr	r3, [fp, #-12]
    d780:	e3a02002 	mov	r2, #2
    d784:	e1c321b0 	strh	r2, [r3, #16]
	l_socketConfig_pst->sockAddrRemote_st.sin_port = htons(f_destPort_ui16);
    d788:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
    d78c:	e1a00003 	mov	r0, r3
    d790:	ebffec7a 	bl	8980 <_init+0x80>
    d794:	e1a03000 	mov	r3, r0
    d798:	e1a02003 	mov	r2, r3
    d79c:	e51b300c 	ldr	r3, [fp, #-12]
    d7a0:	e1c321b2 	strh	r2, [r3, #18]

	// assemble 4 bytes of IPv4 address into one 32bit value
	l_ipv4Addr_ui32 = 		( f_destIpv4_rg4ui8[0] << 24 )
    d7a4:	e51b301c 	ldr	r3, [fp, #-28]
    d7a8:	e5d33000 	ldrb	r3, [r3]
    d7ac:	e1a02c03 	lsl	r2, r3, #24
						+ 	( f_destIpv4_rg4ui8[1] << 16 )
    d7b0:	e51b301c 	ldr	r3, [fp, #-28]
    d7b4:	e2833001 	add	r3, r3, #1
    d7b8:	e5d33000 	ldrb	r3, [r3]
    d7bc:	e1a03803 	lsl	r3, r3, #16
    d7c0:	e0822003 	add	r2, r2, r3
						+ 	( f_destIpv4_rg4ui8[2] << 8 )
    d7c4:	e51b301c 	ldr	r3, [fp, #-28]
    d7c8:	e2833002 	add	r3, r3, #2
    d7cc:	e5d33000 	ldrb	r3, [r3]
    d7d0:	e1a03403 	lsl	r3, r3, #8
    d7d4:	e0822003 	add	r2, r2, r3
						+ 	( f_destIpv4_rg4ui8[3] );
    d7d8:	e51b301c 	ldr	r3, [fp, #-28]
    d7dc:	e2833003 	add	r3, r3, #3
    d7e0:	e5d33000 	ldrb	r3, [r3]
    d7e4:	e0823003 	add	r3, r2, r3
	memset((char*) &l_socketConfig_pst->sockAddrRemote_st, 0, sizeof(l_socketConfig_pst->sockAddrRemote_st));
	l_socketConfig_pst->sockAddrRemote_st.sin_family = AF_INET;
	l_socketConfig_pst->sockAddrRemote_st.sin_port = htons(f_destPort_ui16);

	// assemble 4 bytes of IPv4 address into one 32bit value
	l_ipv4Addr_ui32 = 		( f_destIpv4_rg4ui8[0] << 24 )
    d7e8:	e50b3010 	str	r3, [fp, #-16]
						+ 	( f_destIpv4_rg4ui8[1] << 16 )
						+ 	( f_destIpv4_rg4ui8[2] << 8 )
						+ 	( f_destIpv4_rg4ui8[3] );

	l_socketConfig_pst->sockAddrRemote_st.sin_addr.s_addr = htonl( l_ipv4Addr_ui32 );
    d7ec:	e51b0010 	ldr	r0, [fp, #-16]
    d7f0:	ebffecaa 	bl	8aa0 <_init+0x1a0>
    d7f4:	e1a02000 	mov	r2, r0
    d7f8:	e51b300c 	ldr	r3, [fp, #-12]
    d7fc:	e5832014 	str	r2, [r3, #20]

	return M_HAL_MATLAB_SUCCESS_UI8;
    d800:	e3a03000 	mov	r3, #0
}
    d804:	e1a00003 	mov	r0, r3
    d808:	e24bd004 	sub	sp, fp, #4
    d80c:	e8bd8800 	pop	{fp, pc}
    d810:	000189a8 	.word	0x000189a8

0000d814 <g_halMatlab_sendSigState_bl>:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_sendSigState_bl(	int f_socketHandler_i32,
											sigOri_orientationAngles f_sigState_st )
{
    d814:	e92d4800 	push	{fp, lr}
    d818:	e28db004 	add	fp, sp, #4
    d81c:	e24dd048 	sub	sp, sp, #72	; 0x48
    d820:	e50b0030 	str	r0, [fp, #-48]	; 0x30
    d824:	eeb05b40 	vmov.f64	d5, d0
    d828:	eeb06b41 	vmov.f64	d6, d1
    d82c:	eeb07b42 	vmov.f64	d7, d2
    d830:	ed0b5b13 	vstr	d5, [fp, #-76]	; 0xffffffb4
    d834:	ed0b6b11 	vstr	d6, [fp, #-68]	; 0xffffffbc
    d838:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    d83c:	e24b302c 	sub	r3, fp, #44	; 0x2c
    d840:	e3a00000 	mov	r0, #0
    d844:	e1a01003 	mov	r1, r3
    d848:	ebffec3a 	bl	8938 <_init+0x38>
    d84c:	e1a03000 	mov	r3, r0
    d850:	e3530000 	cmp	r3, #0
    d854:	0a000001 	beq	d860 <g_halMatlab_sendSigState_bl+0x4c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    d858:	e3a03001 	mov	r3, #1
    d85c:	ea00000f 	b	d8a0 <g_halMatlab_sendSigState_bl+0x8c>
	}

	//assmeble timestamp and
	l_rtSigPayload_st.timestamp_st 	= l_timestamp_st;
    d860:	e24b3024 	sub	r3, fp, #36	; 0x24
    d864:	e24b202c 	sub	r2, fp, #44	; 0x2c
    d868:	e8920003 	ldm	r2, {r0, r1}
    d86c:	e8830003 	stm	r3, {r0, r1}
	l_rtSigPayload_st.sigState_st	= f_sigState_st;
    d870:	e24bc01c 	sub	ip, fp, #28
    d874:	e24be04c 	sub	lr, fp, #76	; 0x4c
    d878:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    d87c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    d880:	e89e0003 	ldm	lr, {r0, r1}
    d884:	e88c0003 	stm	ip, {r0, r1}

	return g_halMatlab_sendPacket_bl( 	f_socketHandler_i32,
    d888:	e24b3024 	sub	r3, fp, #36	; 0x24
    d88c:	e51b0030 	ldr	r0, [fp, #-48]	; 0x30
    d890:	e1a01003 	mov	r1, r3
    d894:	e3a02020 	mov	r2, #32
    d898:	ebffff04 	bl	d4b0 <g_halMatlab_sendPacket_bl>
    d89c:	e1a03000 	mov	r3, r0
										(unsigned char*)&l_rtSigPayload_st,
										sizeof( l_rtSigPayload_st ) );
}
    d8a0:	e1a00003 	mov	r0, r3
    d8a4:	e24bd004 	sub	sp, fp, #4
    d8a8:	e8bd8800 	pop	{fp, pc}

0000d8ac <g_halMatlab_sendSigAllStates_bl>:
 ***********************************************************************/
unsigned int g_halMatlab_sendSigAllStates_bl(	int f_socketHandler_i32,
												halImu_orientationValues f_rawImuState_st,
												sigOri_orientationAngles f_sigKalmanState_st,
												sigOri_orientationAngles f_sigComplementaryState_st )
{
    d8ac:	e24dd008 	sub	sp, sp, #8
    d8b0:	e92d4800 	push	{fp, lr}
    d8b4:	e28db004 	add	fp, sp, #4
    d8b8:	e24dd0d8 	sub	sp, sp, #216	; 0xd8
    d8bc:	e50b00a8 	str	r0, [fp, #-168]	; 0xa8
    d8c0:	e28b1004 	add	r1, fp, #4
    d8c4:	e881000c 	stm	r1, {r2, r3}
    d8c8:	eeb06b44 	vmov.f64	d6, d4
    d8cc:	eeb07b45 	vmov.f64	d7, d5
    d8d0:	ed0b0b31 	vstr	d0, [fp, #-196]	; 0xffffff3c
    d8d4:	ed0b1b2f 	vstr	d1, [fp, #-188]	; 0xffffff44
    d8d8:	ed0b2b2d 	vstr	d2, [fp, #-180]	; 0xffffff4c
    d8dc:	ed0b3b37 	vstr	d3, [fp, #-220]	; 0xffffff24
    d8e0:	ed0b6b35 	vstr	d6, [fp, #-212]	; 0xffffff2c
    d8e4:	ed0b7b33 	vstr	d7, [fp, #-204]	; 0xffffff34
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    d8e8:	e24b30a4 	sub	r3, fp, #164	; 0xa4
    d8ec:	e3a00000 	mov	r0, #0
    d8f0:	e1a01003 	mov	r1, r3
    d8f4:	ebffec0f 	bl	8938 <_init+0x38>
    d8f8:	e1a03000 	mov	r3, r0
    d8fc:	e3530000 	cmp	r3, #0
    d900:	0a000001 	beq	d90c <g_halMatlab_sendSigAllStates_bl+0x60>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    d904:	e3a03001 	mov	r3, #1
    d908:	ea00001c 	b	d980 <g_halMatlab_sendSigAllStates_bl+0xd4>
	}

	//assmeble timestamp and
	l_rtCompleteSigPayload_st.timestamp_st 				= l_timestamp_st;
    d90c:	e24b309c 	sub	r3, fp, #156	; 0x9c
    d910:	e24b20a4 	sub	r2, fp, #164	; 0xa4
    d914:	e8920003 	ldm	r2, {r0, r1}
    d918:	e8830003 	stm	r3, {r0, r1}
	l_rtCompleteSigPayload_st.imuState_st				= f_rawImuState_st;
    d91c:	e24b108c 	sub	r1, fp, #140	; 0x8c
    d920:	e28b2004 	add	r2, fp, #4
    d924:	e3a03058 	mov	r3, #88	; 0x58
    d928:	e1a00001 	mov	r0, r1
    d92c:	e1a01002 	mov	r1, r2
    d930:	e1a02003 	mov	r2, r3
    d934:	ebffec3b 	bl	8a28 <_init+0x128>
	l_rtCompleteSigPayload_st.kalmanSigState_st 		= f_sigKalmanState_st;
    d938:	e24bc034 	sub	ip, fp, #52	; 0x34
    d93c:	e24be0c4 	sub	lr, fp, #196	; 0xc4
    d940:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    d944:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    d948:	e89e0003 	ldm	lr, {r0, r1}
    d94c:	e88c0003 	stm	ip, {r0, r1}
	l_rtCompleteSigPayload_st.complementarySigState_st	= f_sigComplementaryState_st;
    d950:	e24bc01c 	sub	ip, fp, #28
    d954:	e24be0dc 	sub	lr, fp, #220	; 0xdc
    d958:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    d95c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    d960:	e89e0003 	ldm	lr, {r0, r1}
    d964:	e88c0003 	stm	ip, {r0, r1}

	return g_halMatlab_sendPacket_bl( 	f_socketHandler_i32,
    d968:	e24b309c 	sub	r3, fp, #156	; 0x9c
    d96c:	e51b00a8 	ldr	r0, [fp, #-168]	; 0xa8
    d970:	e1a01003 	mov	r1, r3
    d974:	e3a02098 	mov	r2, #152	; 0x98
    d978:	ebfffecc 	bl	d4b0 <g_halMatlab_sendPacket_bl>
    d97c:	e1a03000 	mov	r3, r0
										(unsigned char*)&l_rtCompleteSigPayload_st,
										sizeof( l_rtCompleteSigPayload_st ) );
}
    d980:	e1a00003 	mov	r0, r3
    d984:	e24bd004 	sub	sp, fp, #4
    d988:	e8bd4800 	pop	{fp, lr}
    d98c:	e28dd008 	add	sp, sp, #8
    d990:	e12fff1e 	bx	lr

0000d994 <g_halMatlab_recvSigState_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halMatlab_rtSigPayload g_halMatlab_recvSigState_bl( int f_socketHandler_i32 ) {
    d994:	e92d4800 	push	{fp, lr}
    d998:	e28db004 	add	fp, sp, #4
    d99c:	e24dd050 	sub	sp, sp, #80	; 0x50
    d9a0:	e50b0050 	str	r0, [fp, #-80]	; 0x50
    d9a4:	e50b1054 	str	r1, [fp, #-84]	; 0x54
	halMatlab_rtSigPayload 		l_recvSigState_st;
	unsigned char				l_recvBuffer_rgXui8[ sizeof(halMatlab_rtSigPayload) ];
	unsigned int				l_recvBytesNumber_ui32;

	// zero all values
	l_recvSigState_st.timestamp_st.tv_sec 	= 0;
    d9a8:	e3a03000 	mov	r3, #0
    d9ac:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
	l_recvSigState_st.timestamp_st.tv_nsec 	= 0;
    d9b0:	e3a03000 	mov	r3, #0
    d9b4:	e50b3028 	str	r3, [fp, #-40]	; 0x28

	l_recvSigState_st.sigState_st.pitch_f64 = 0;
    d9b8:	e3a02000 	mov	r2, #0
    d9bc:	e3a03000 	mov	r3, #0
    d9c0:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	l_recvSigState_st.sigState_st.roll_f64 	= 0;
    d9c4:	e3a02000 	mov	r2, #0
    d9c8:	e3a03000 	mov	r3, #0
    d9cc:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	l_recvSigState_st.sigState_st.yaw_f64 	= 0;
    d9d0:	e3a02000 	mov	r2, #0
    d9d4:	e3a03000 	mov	r3, #0
    d9d8:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec


	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    d9dc:	e24b304c 	sub	r3, fp, #76	; 0x4c
    d9e0:	e51b0054 	ldr	r0, [fp, #-84]	; 0x54
    d9e4:	e1a01003 	mov	r1, r3
    d9e8:	e3a02020 	mov	r2, #32
    d9ec:	ebffff0e 	bl	d62c <g_halMatlab_recvPacket_ui32>
    d9f0:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halMatlab_rtSigPayload) );

	if ( l_recvBytesNumber_ui32 == sizeof(halMatlab_rtSigPayload) )
    d9f4:	e51b3008 	ldr	r3, [fp, #-8]
    d9f8:	e3530020 	cmp	r3, #32
    d9fc:	1a000005 	bne	da18 <g_halMatlab_recvSigState_bl+0x84>
	{
		memcpy( &l_recvSigState_st, &l_recvBuffer_rgXui8, sizeof(halMatlab_rtSigPayload));
    da00:	e24b202c 	sub	r2, fp, #44	; 0x2c
    da04:	e24b304c 	sub	r3, fp, #76	; 0x4c
    da08:	e1a00002 	mov	r0, r2
    da0c:	e1a01003 	mov	r1, r3
    da10:	e3a02020 	mov	r2, #32
    da14:	ebffec03 	bl	8a28 <_init+0x128>
	}

	return l_recvSigState_st;
    da18:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
    da1c:	e1a0c003 	mov	ip, r3
    da20:	e24be02c 	sub	lr, fp, #44	; 0x2c
    da24:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    da28:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    da2c:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
    da30:	e88c000f 	stm	ip, {r0, r1, r2, r3}
}
    da34:	e51b0050 	ldr	r0, [fp, #-80]	; 0x50
    da38:	e24bd004 	sub	sp, fp, #4
    da3c:	e8bd8800 	pop	{fp, pc}

0000da40 <g_halMatlab_recvSigAllStates_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halMatlab_rtSigAllStatePayload g_halMatlab_recvSigAllStates_bl( int f_socketHandler_i32 ) {
    da40:	e92d4800 	push	{fp, lr}
    da44:	e28db004 	add	fp, sp, #4
    da48:	e24ddd05 	sub	sp, sp, #320	; 0x140
    da4c:	e50b0140 	str	r0, [fp, #-320]	; 0x140
    da50:	e50b1144 	str	r1, [fp, #-324]	; 0x144
	halMatlab_rtSigAllStatePayload 		l_recvSigAllStates_st;
	unsigned char				              l_recvBuffer_rgXui8[ sizeof(halMatlab_rtSigAllStatePayload) ];
	unsigned int				              l_recvBytesNumber_ui32;

	// zero all values
	l_recvSigAllStates_st.timestamp_st.tv_sec 	= 0;
    da54:	e3a03000 	mov	r3, #0
    da58:	e50b30a4 	str	r3, [fp, #-164]	; 0xa4
	l_recvSigAllStates_st.timestamp_st.tv_nsec 	= 0;
    da5c:	e3a03000 	mov	r3, #0
    da60:	e50b30a0 	str	r3, [fp, #-160]	; 0xa0

  l_recvSigAllStates_st.imuState_st.acc.x_f64       = 0;
    da64:	e3a02000 	mov	r2, #0
    da68:	e3a03000 	mov	r3, #0
    da6c:	e14b29f4 	strd	r2, [fp, #-148]	; 0xffffff6c
  l_recvSigAllStates_st.imuState_st.acc.y_f64       = 0;
    da70:	e3a02000 	mov	r2, #0
    da74:	e3a03000 	mov	r3, #0
    da78:	e14b28fc 	strd	r2, [fp, #-140]	; 0xffffff74
  l_recvSigAllStates_st.imuState_st.acc.z_f64       = 0;
    da7c:	e3a02000 	mov	r2, #0
    da80:	e3a03000 	mov	r3, #0
    da84:	e14b28f4 	strd	r2, [fp, #-132]	; 0xffffff7c
  
  l_recvSigAllStates_st.imuState_st.mag.x_f64       = 0;
    da88:	e3a02000 	mov	r2, #0
    da8c:	e3a03000 	mov	r3, #0
    da90:	e14b27fc 	strd	r2, [fp, #-124]	; 0xffffff84
  l_recvSigAllStates_st.imuState_st.mag.y_f64       = 0;
    da94:	e3a02000 	mov	r2, #0
    da98:	e3a03000 	mov	r3, #0
    da9c:	e14b27f4 	strd	r2, [fp, #-116]	; 0xffffff8c
  l_recvSigAllStates_st.imuState_st.mag.z_f64       = 0;
    daa0:	e3a02000 	mov	r2, #0
    daa4:	e3a03000 	mov	r3, #0
    daa8:	e14b26fc 	strd	r2, [fp, #-108]	; 0xffffff94
  
  l_recvSigAllStates_st.imuState_st.gyro.l_pitch_f64  = 0;
    daac:	e3a02000 	mov	r2, #0
    dab0:	e3a03000 	mov	r3, #0
    dab4:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	l_recvSigAllStates_st.imuState_st.gyro.l_roll_f64 	= 0;
    dab8:	e3a02000 	mov	r2, #0
    dabc:	e3a03000 	mov	r3, #0
    dac0:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac
	l_recvSigAllStates_st.imuState_st.gyro.l_yaw_f64 	  = 0;
    dac4:	e3a02000 	mov	r2, #0
    dac8:	e3a03000 	mov	r3, #0
    dacc:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
  
  l_recvSigAllStates_st.imuState_st.temperature_f64 = 0;
    dad0:	e3a02000 	mov	r2, #0
    dad4:	e3a03000 	mov	r3, #0
    dad8:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
  l_recvSigAllStates_st.imuState_st.pressure_f64    = 0;
    dadc:	e3a02000 	mov	r2, #0
    dae0:	e3a03000 	mov	r3, #0
    dae4:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
  
	l_recvSigAllStates_st.kalmanSigState_st.pitch_f64 = 0;
    dae8:	e3a02000 	mov	r2, #0
    daec:	e3a03000 	mov	r3, #0
    daf0:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	l_recvSigAllStates_st.kalmanSigState_st.roll_f64 	= 0;
    daf4:	e3a02000 	mov	r2, #0
    daf8:	e3a03000 	mov	r3, #0
    dafc:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4
	l_recvSigAllStates_st.kalmanSigState_st.yaw_f64 	= 0;
    db00:	e3a02000 	mov	r2, #0
    db04:	e3a03000 	mov	r3, #0
    db08:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4

  l_recvSigAllStates_st.complementarySigState_st.pitch_f64 = 0;
    db0c:	e3a02000 	mov	r2, #0
    db10:	e3a03000 	mov	r3, #0
    db14:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	l_recvSigAllStates_st.complementarySigState_st.roll_f64 	= 0;
    db18:	e3a02000 	mov	r2, #0
    db1c:	e3a03000 	mov	r3, #0
    db20:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	l_recvSigAllStates_st.complementarySigState_st.yaw_f64 	= 0;
    db24:	e3a02000 	mov	r2, #0
    db28:	e3a03000 	mov	r3, #0
    db2c:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    db30:	e24b3f4f 	sub	r3, fp, #316	; 0x13c
    db34:	e51b0144 	ldr	r0, [fp, #-324]	; 0x144
    db38:	e1a01003 	mov	r1, r3
    db3c:	e3a02098 	mov	r2, #152	; 0x98
    db40:	ebfffeb9 	bl	d62c <g_halMatlab_recvPacket_ui32>
    db44:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halMatlab_rtSigAllStatePayload) );

	if ( l_recvBytesNumber_ui32 == sizeof(halMatlab_rtSigAllStatePayload) )
    db48:	e51b3008 	ldr	r3, [fp, #-8]
    db4c:	e3530098 	cmp	r3, #152	; 0x98
    db50:	1a000005 	bne	db6c <g_halMatlab_recvSigAllStates_bl+0x12c>
	{
		memcpy( &l_recvSigAllStates_st, &l_recvBuffer_rgXui8, sizeof(halMatlab_rtSigAllStatePayload));
    db54:	e24b20a4 	sub	r2, fp, #164	; 0xa4
    db58:	e24b3f4f 	sub	r3, fp, #316	; 0x13c
    db5c:	e1a00002 	mov	r0, r2
    db60:	e1a01003 	mov	r1, r3
    db64:	e3a02098 	mov	r2, #152	; 0x98
    db68:	ebffebae 	bl	8a28 <_init+0x128>
	}

	return l_recvSigAllStates_st;
    db6c:	e51b3140 	ldr	r3, [fp, #-320]	; 0x140
    db70:	e1a01003 	mov	r1, r3
    db74:	e24b20a4 	sub	r2, fp, #164	; 0xa4
    db78:	e3a03098 	mov	r3, #152	; 0x98
    db7c:	e1a00001 	mov	r0, r1
    db80:	e1a01002 	mov	r1, r2
    db84:	e1a02003 	mov	r2, r3
    db88:	ebffeba6 	bl	8a28 <_init+0x128>
}
    db8c:	e51b0140 	ldr	r0, [fp, #-320]	; 0x140
    db90:	e24bd004 	sub	sp, fp, #4
    db94:	e8bd8800 	pop	{fp, pc}

0000db98 <m_getIndex_i32>:
#include <math.h>
//memcpy(dest, src, strlen(src)+1);


unsigned int m_getIndex_i32(unsigned int f_maxCol_ui32,unsigned int f_row_ui32,unsigned int f_col_ui32)
{
    db98:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    db9c:	e28db000 	add	fp, sp, #0
    dba0:	e24dd014 	sub	sp, sp, #20
    dba4:	e50b0008 	str	r0, [fp, #-8]
    dba8:	e50b100c 	str	r1, [fp, #-12]
    dbac:	e50b2010 	str	r2, [fp, #-16]
	return (f_maxCol_ui32*f_row_ui32+f_col_ui32);
    dbb0:	e51b3008 	ldr	r3, [fp, #-8]
    dbb4:	e51b200c 	ldr	r2, [fp, #-12]
    dbb8:	e0020392 	mul	r2, r2, r3
    dbbc:	e51b3010 	ldr	r3, [fp, #-16]
    dbc0:	e0823003 	add	r3, r2, r3
}
    dbc4:	e1a00003 	mov	r0, r3
    dbc8:	e24bd000 	sub	sp, fp, #0
    dbcc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    dbd0:	e12fff1e 	bx	lr

0000dbd4 <g_sigMath_matrixMultiplikation_bl>:
unsigned int g_sigMath_matrixMultiplikation_bl(
		double* f_matrixResult_pf64, double* f_matrixA_pf64,
		unsigned int f_nrOfRowsA_ui32, unsigned int f_nrOfColsA_ui32,
		double* f_matrixB_pf64, unsigned int f_nrOfRowsB_ui32,
		unsigned int f_nrOfColsB_ui32)
{
    dbd4:	e92d4800 	push	{fp, lr}
    dbd8:	ed2d8b02 	vpush	{d8}
    dbdc:	e28db00c 	add	fp, sp, #12
    dbe0:	e24dd028 	sub	sp, sp, #40	; 0x28
    dbe4:	e50b0028 	str	r0, [fp, #-40]	; 0x28
    dbe8:	e50b102c 	str	r1, [fp, #-44]	; 0x2c
    dbec:	e50b2030 	str	r2, [fp, #-48]	; 0x30
    dbf0:	e50b3034 	str	r3, [fp, #-52]	; 0x34
	unsigned int l_rowCounter_ui32=0;
    dbf4:	e3a03000 	mov	r3, #0
    dbf8:	e50b3010 	str	r3, [fp, #-16]
	unsigned int l_colCounter_ui32=0;
    dbfc:	e3a03000 	mov	r3, #0
    dc00:	e50b3014 	str	r3, [fp, #-20]
	unsigned int l_innerCounter_ui32=0;
    dc04:	e3a03000 	mov	r3, #0
    dc08:	e50b3018 	str	r3, [fp, #-24]
	double l_temporalStorage_f64=0;
    dc0c:	e3a02000 	mov	r2, #0
    dc10:	e3a03000 	mov	r3, #0
    dc14:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc

	if(f_nrOfColsA_ui32!=f_nrOfRowsB_ui32)
    dc18:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    dc1c:	e59b3008 	ldr	r3, [fp, #8]
    dc20:	e1520003 	cmp	r2, r3
    dc24:	0a000001 	beq	dc30 <g_sigMath_matrixMultiplikation_bl+0x5c>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    dc28:	e3a03001 	mov	r3, #1
    dc2c:	ea000041 	b	dd38 <g_sigMath_matrixMultiplikation_bl+0x164>
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    dc30:	e3a03000 	mov	r3, #0
    dc34:	e50b3010 	str	r3, [fp, #-16]
    dc38:	ea000039 	b	dd24 <g_sigMath_matrixMultiplikation_bl+0x150>
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
    dc3c:	e3a03000 	mov	r3, #0
    dc40:	e50b3014 	str	r3, [fp, #-20]
    dc44:	ea00002f 	b	dd08 <g_sigMath_matrixMultiplikation_bl+0x134>
			{
				for(l_innerCounter_ui32=0;l_innerCounter_ui32<f_nrOfColsA_ui32;l_innerCounter_ui32++)
    dc48:	e3a03000 	mov	r3, #0
    dc4c:	e50b3018 	str	r3, [fp, #-24]
    dc50:	ea000018 	b	dcb8 <g_sigMath_matrixMultiplikation_bl+0xe4>
				{
					l_temporalStorage_f64+=f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_innerCounter_ui32)]*
    dc54:	e51b0034 	ldr	r0, [fp, #-52]	; 0x34
    dc58:	e51b1010 	ldr	r1, [fp, #-16]
    dc5c:	e51b2018 	ldr	r2, [fp, #-24]
    dc60:	ebffffcc 	bl	db98 <m_getIndex_i32>
    dc64:	e1a03000 	mov	r3, r0
    dc68:	e1a03183 	lsl	r3, r3, #3
    dc6c:	e51b202c 	ldr	r2, [fp, #-44]	; 0x2c
    dc70:	e0823003 	add	r3, r2, r3
    dc74:	ed938b00 	vldr	d8, [r3]
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_innerCounter_ui32,l_colCounter_ui32)];
    dc78:	e59b000c 	ldr	r0, [fp, #12]
    dc7c:	e51b1018 	ldr	r1, [fp, #-24]
    dc80:	e51b2014 	ldr	r2, [fp, #-20]
    dc84:	ebffffc3 	bl	db98 <m_getIndex_i32>
    dc88:	e1a03000 	mov	r3, r0
    dc8c:	e1a03183 	lsl	r3, r3, #3
    dc90:	e59b2004 	ldr	r2, [fp, #4]
    dc94:	e0823003 	add	r3, r2, r3
    dc98:	ed937b00 	vldr	d7, [r3]
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
			{
				for(l_innerCounter_ui32=0;l_innerCounter_ui32<f_nrOfColsA_ui32;l_innerCounter_ui32++)
				{
					l_temporalStorage_f64+=f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_innerCounter_ui32)]*
    dc9c:	ee287b07 	vmul.f64	d7, d8, d7
    dca0:	ed1b6b09 	vldr	d6, [fp, #-36]	; 0xffffffdc
    dca4:	ee367b07 	vadd.f64	d7, d6, d7
    dca8:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
			{
				for(l_innerCounter_ui32=0;l_innerCounter_ui32<f_nrOfColsA_ui32;l_innerCounter_ui32++)
    dcac:	e51b3018 	ldr	r3, [fp, #-24]
    dcb0:	e2833001 	add	r3, r3, #1
    dcb4:	e50b3018 	str	r3, [fp, #-24]
    dcb8:	e51b2018 	ldr	r2, [fp, #-24]
    dcbc:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    dcc0:	e1520003 	cmp	r2, r3
    dcc4:	3affffe2 	bcc	dc54 <g_sigMath_matrixMultiplikation_bl+0x80>
				{
					l_temporalStorage_f64+=f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_innerCounter_ui32)]*
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_innerCounter_ui32,l_colCounter_ui32)];
				}
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=l_temporalStorage_f64;
    dcc8:	e59b000c 	ldr	r0, [fp, #12]
    dccc:	e51b1010 	ldr	r1, [fp, #-16]
    dcd0:	e51b2014 	ldr	r2, [fp, #-20]
    dcd4:	ebffffaf 	bl	db98 <m_getIndex_i32>
    dcd8:	e1a03000 	mov	r3, r0
    dcdc:	e1a03183 	lsl	r3, r3, #3
    dce0:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    dce4:	e0821003 	add	r1, r2, r3
    dce8:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
    dcec:	e1c120f0 	strd	r2, [r1]
				l_temporalStorage_f64=0;
    dcf0:	e3a02000 	mov	r2, #0
    dcf4:	e3a03000 	mov	r3, #0
    dcf8:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
    dcfc:	e51b3014 	ldr	r3, [fp, #-20]
    dd00:	e2833001 	add	r3, r3, #1
    dd04:	e50b3014 	str	r3, [fp, #-20]
    dd08:	e51b2014 	ldr	r2, [fp, #-20]
    dd0c:	e59b300c 	ldr	r3, [fp, #12]
    dd10:	e1520003 	cmp	r2, r3
    dd14:	3affffcb 	bcc	dc48 <g_sigMath_matrixMultiplikation_bl+0x74>

	if(f_nrOfColsA_ui32!=f_nrOfRowsB_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    dd18:	e51b3010 	ldr	r3, [fp, #-16]
    dd1c:	e2833001 	add	r3, r3, #1
    dd20:	e50b3010 	str	r3, [fp, #-16]
    dd24:	e51b2010 	ldr	r2, [fp, #-16]
    dd28:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    dd2c:	e1520003 	cmp	r2, r3
    dd30:	3affffc1 	bcc	dc3c <g_sigMath_matrixMultiplikation_bl+0x68>
				}
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=l_temporalStorage_f64;
				l_temporalStorage_f64=0;
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    dd34:	e3a03000 	mov	r3, #0
	}
}
    dd38:	e1a00003 	mov	r0, r3
    dd3c:	e24bd00c 	sub	sp, fp, #12
    dd40:	ecbd8b02 	vpop	{d8}
    dd44:	e8bd8800 	pop	{fp, pc}

0000dd48 <g_sigMath_matrixAddition_bl>:
 ***********************************************************************/
unsigned int g_sigMath_matrixAddition_bl(double* f_matrixResult_pf64,
		double* f_matrixA_pf64, unsigned int f_nrOfRowsA_ui32,
		unsigned int f_nrOfColsA_ui32, double* f_matrixB_pf64,
		unsigned int f_nrOfRowsB_ui32, unsigned int f_nrOfColsB_ui32)
		{
    dd48:	e92d4810 	push	{r4, fp, lr}
    dd4c:	ed2d8b02 	vpush	{d8}
    dd50:	e28db010 	add	fp, sp, #16
    dd54:	e24dd01c 	sub	sp, sp, #28
    dd58:	e50b0020 	str	r0, [fp, #-32]
    dd5c:	e50b1024 	str	r1, [fp, #-36]	; 0x24
    dd60:	e50b2028 	str	r2, [fp, #-40]	; 0x28
    dd64:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
	unsigned int l_rowCounter_ui32=0;
    dd68:	e3a03000 	mov	r3, #0
    dd6c:	e50b3018 	str	r3, [fp, #-24]
	unsigned int l_colCounter_ui32=0;
    dd70:	e3a03000 	mov	r3, #0
    dd74:	e50b301c 	str	r3, [fp, #-28]

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
    dd78:	e51b202c 	ldr	r2, [fp, #-44]	; 0x2c
    dd7c:	e59b300c 	ldr	r3, [fp, #12]
    dd80:	e1520003 	cmp	r2, r3
    dd84:	0a000005 	beq	dda0 <g_sigMath_matrixAddition_bl+0x58>
    dd88:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    dd8c:	e59b3008 	ldr	r3, [fp, #8]
    dd90:	e1520003 	cmp	r2, r3
    dd94:	0a000001 	beq	dda0 <g_sigMath_matrixAddition_bl+0x58>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    dd98:	e3a03001 	mov	r3, #1
    dd9c:	ea000030 	b	de64 <g_sigMath_matrixAddition_bl+0x11c>
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    dda0:	e3a03000 	mov	r3, #0
    dda4:	e50b3018 	str	r3, [fp, #-24]
    dda8:	ea000028 	b	de50 <g_sigMath_matrixAddition_bl+0x108>
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    ddac:	e3a03000 	mov	r3, #0
    ddb0:	e50b301c 	str	r3, [fp, #-28]
    ddb4:	ea00001e 	b	de34 <g_sigMath_matrixAddition_bl+0xec>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    ddb8:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    ddbc:	e51b1018 	ldr	r1, [fp, #-24]
    ddc0:	e51b201c 	ldr	r2, [fp, #-28]
    ddc4:	ebffff73 	bl	db98 <m_getIndex_i32>
    ddc8:	e1a03000 	mov	r3, r0
    ddcc:	e1a03183 	lsl	r3, r3, #3
    ddd0:	e51b2020 	ldr	r2, [fp, #-32]
    ddd4:	e0824003 	add	r4, r2, r3
						f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+
    ddd8:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    dddc:	e51b1018 	ldr	r1, [fp, #-24]
    dde0:	e51b201c 	ldr	r2, [fp, #-28]
    dde4:	ebffff6b 	bl	db98 <m_getIndex_i32>
    dde8:	e1a03000 	mov	r3, r0
    ddec:	e1a03183 	lsl	r3, r3, #3
    ddf0:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
    ddf4:	e0823003 	add	r3, r2, r3
    ddf8:	ed938b00 	vldr	d8, [r3]
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
    ddfc:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    de00:	e51b1018 	ldr	r1, [fp, #-24]
    de04:	e51b201c 	ldr	r2, [fp, #-28]
    de08:	ebffff62 	bl	db98 <m_getIndex_i32>
    de0c:	e1a03000 	mov	r3, r0
    de10:	e1a03183 	lsl	r3, r3, #3
    de14:	e59b2004 	ldr	r2, [fp, #4]
    de18:	e0823003 	add	r3, r2, r3
    de1c:	ed937b00 	vldr	d7, [r3]
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+
    de20:	ee387b07 	vadd.f64	d7, d8, d7
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    de24:	ed847b00 	vstr	d7, [r4]
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    de28:	e51b301c 	ldr	r3, [fp, #-28]
    de2c:	e2833001 	add	r3, r3, #1
    de30:	e50b301c 	str	r3, [fp, #-28]
    de34:	e51b201c 	ldr	r2, [fp, #-28]
    de38:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    de3c:	e1520003 	cmp	r2, r3
    de40:	3affffdc 	bcc	ddb8 <g_sigMath_matrixAddition_bl+0x70>

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    de44:	e51b3018 	ldr	r3, [fp, #-24]
    de48:	e2833001 	add	r3, r3, #1
    de4c:	e50b3018 	str	r3, [fp, #-24]
    de50:	e51b2018 	ldr	r2, [fp, #-24]
    de54:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    de58:	e1520003 	cmp	r2, r3
    de5c:	3affffd2 	bcc	ddac <g_sigMath_matrixAddition_bl+0x64>
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    de60:	e3a03000 	mov	r3, #0
	}
}
    de64:	e1a00003 	mov	r0, r3
    de68:	e24bd010 	sub	sp, fp, #16
    de6c:	ecbd8b02 	vpop	{d8}
    de70:	e8bd8810 	pop	{r4, fp, pc}

0000de74 <g_sigMath_matrixSubtraktion_bl>:
 ***********************************************************************/
unsigned int g_sigMath_matrixSubtraktion_bl(double* f_matrixResult_pf64,
		double* f_matrixA_pf64, unsigned int f_nrOfRowsA_ui32,
		unsigned int f_nrOfColsA_ui32, double* f_matrixB_pf64,
		unsigned int f_nrOfRowsB_ui32, unsigned int f_nrOfColsB_ui32)
{
    de74:	e92d4810 	push	{r4, fp, lr}
    de78:	ed2d8b02 	vpush	{d8}
    de7c:	e28db010 	add	fp, sp, #16
    de80:	e24dd01c 	sub	sp, sp, #28
    de84:	e50b0020 	str	r0, [fp, #-32]
    de88:	e50b1024 	str	r1, [fp, #-36]	; 0x24
    de8c:	e50b2028 	str	r2, [fp, #-40]	; 0x28
    de90:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
	unsigned int l_rowCounter_ui32=0;
    de94:	e3a03000 	mov	r3, #0
    de98:	e50b3018 	str	r3, [fp, #-24]
	unsigned int l_colCounter_ui32=0;
    de9c:	e3a03000 	mov	r3, #0
    dea0:	e50b301c 	str	r3, [fp, #-28]

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
    dea4:	e51b202c 	ldr	r2, [fp, #-44]	; 0x2c
    dea8:	e59b300c 	ldr	r3, [fp, #12]
    deac:	e1520003 	cmp	r2, r3
    deb0:	0a000005 	beq	decc <g_sigMath_matrixSubtraktion_bl+0x58>
    deb4:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    deb8:	e59b3008 	ldr	r3, [fp, #8]
    debc:	e1520003 	cmp	r2, r3
    dec0:	0a000001 	beq	decc <g_sigMath_matrixSubtraktion_bl+0x58>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    dec4:	e3a03001 	mov	r3, #1
    dec8:	ea000030 	b	df90 <g_sigMath_matrixSubtraktion_bl+0x11c>
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    decc:	e3a03000 	mov	r3, #0
    ded0:	e50b3018 	str	r3, [fp, #-24]
    ded4:	ea000028 	b	df7c <g_sigMath_matrixSubtraktion_bl+0x108>
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    ded8:	e3a03000 	mov	r3, #0
    dedc:	e50b301c 	str	r3, [fp, #-28]
    dee0:	ea00001e 	b	df60 <g_sigMath_matrixSubtraktion_bl+0xec>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    dee4:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    dee8:	e51b1018 	ldr	r1, [fp, #-24]
    deec:	e51b201c 	ldr	r2, [fp, #-28]
    def0:	ebffff28 	bl	db98 <m_getIndex_i32>
    def4:	e1a03000 	mov	r3, r0
    def8:	e1a03183 	lsl	r3, r3, #3
    defc:	e51b2020 	ldr	r2, [fp, #-32]
    df00:	e0824003 	add	r4, r2, r3
							f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-
    df04:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    df08:	e51b1018 	ldr	r1, [fp, #-24]
    df0c:	e51b201c 	ldr	r2, [fp, #-28]
    df10:	ebffff20 	bl	db98 <m_getIndex_i32>
    df14:	e1a03000 	mov	r3, r0
    df18:	e1a03183 	lsl	r3, r3, #3
    df1c:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
    df20:	e0823003 	add	r3, r2, r3
    df24:	ed938b00 	vldr	d8, [r3]
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
    df28:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    df2c:	e51b1018 	ldr	r1, [fp, #-24]
    df30:	e51b201c 	ldr	r2, [fp, #-28]
    df34:	ebffff17 	bl	db98 <m_getIndex_i32>
    df38:	e1a03000 	mov	r3, r0
    df3c:	e1a03183 	lsl	r3, r3, #3
    df40:	e59b2004 	ldr	r2, [fp, #4]
    df44:	e0823003 	add	r3, r2, r3
    df48:	ed937b00 	vldr	d7, [r3]
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
							f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-
    df4c:	ee387b47 	vsub.f64	d7, d8, d7
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    df50:	ed847b00 	vstr	d7, [r4]
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    df54:	e51b301c 	ldr	r3, [fp, #-28]
    df58:	e2833001 	add	r3, r3, #1
    df5c:	e50b301c 	str	r3, [fp, #-28]
    df60:	e51b201c 	ldr	r2, [fp, #-28]
    df64:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    df68:	e1520003 	cmp	r2, r3
    df6c:	3affffdc 	bcc	dee4 <g_sigMath_matrixSubtraktion_bl+0x70>

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    df70:	e51b3018 	ldr	r3, [fp, #-24]
    df74:	e2833001 	add	r3, r3, #1
    df78:	e50b3018 	str	r3, [fp, #-24]
    df7c:	e51b2018 	ldr	r2, [fp, #-24]
    df80:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    df84:	e1520003 	cmp	r2, r3
    df88:	3affffd2 	bcc	ded8 <g_sigMath_matrixSubtraktion_bl+0x64>
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
							f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    df8c:	e3a03000 	mov	r3, #0
	}
}
    df90:	e1a00003 	mov	r0, r3
    df94:	e24bd010 	sub	sp, fp, #16
    df98:	ecbd8b02 	vpop	{d8}
    df9c:	e8bd8810 	pop	{r4, fp, pc}

0000dfa0 <g_sigMath_matrixTransponiert_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixTransponiert_bl(
		double* f_matrixResult_pf64, double* f_matrix_pf64,
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32)
{
    dfa0:	e92d4810 	push	{r4, fp, lr}
    dfa4:	e28db008 	add	fp, sp, #8
    dfa8:	e24dd01c 	sub	sp, sp, #28
    dfac:	e50b0018 	str	r0, [fp, #-24]
    dfb0:	e50b101c 	str	r1, [fp, #-28]
    dfb4:	e50b2020 	str	r2, [fp, #-32]
    dfb8:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	unsigned int l_rowCounter_ui32=0;
    dfbc:	e3a03000 	mov	r3, #0
    dfc0:	e50b3010 	str	r3, [fp, #-16]
	unsigned int l_colCounter_ui32=0;
    dfc4:	e3a03000 	mov	r3, #0
    dfc8:	e50b3014 	str	r3, [fp, #-20]

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    dfcc:	e3a03000 	mov	r3, #0
    dfd0:	e50b3010 	str	r3, [fp, #-16]
    dfd4:	ea00001e 	b	e054 <g_sigMath_matrixTransponiert_bl+0xb4>
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    dfd8:	e3a03000 	mov	r3, #0
    dfdc:	e50b3014 	str	r3, [fp, #-20]
    dfe0:	ea000014 	b	e038 <g_sigMath_matrixTransponiert_bl+0x98>
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_colCounter_ui32,l_rowCounter_ui32)]=
    dfe4:	e51b0024 	ldr	r0, [fp, #-36]	; 0x24
    dfe8:	e51b1014 	ldr	r1, [fp, #-20]
    dfec:	e51b2010 	ldr	r2, [fp, #-16]
    dff0:	ebfffee8 	bl	db98 <m_getIndex_i32>
    dff4:	e1a03000 	mov	r3, r0
    dff8:	e1a03183 	lsl	r3, r3, #3
    dffc:	e51b2018 	ldr	r2, [fp, #-24]
    e000:	e0824003 	add	r4, r2, r3
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
    e004:	e51b0024 	ldr	r0, [fp, #-36]	; 0x24
    e008:	e51b1010 	ldr	r1, [fp, #-16]
    e00c:	e51b2014 	ldr	r2, [fp, #-20]
    e010:	ebfffee0 	bl	db98 <m_getIndex_i32>
    e014:	e1a03000 	mov	r3, r0
    e018:	e1a03183 	lsl	r3, r3, #3
    e01c:	e51b201c 	ldr	r2, [fp, #-28]
    e020:	e0823003 	add	r3, r2, r3
    e024:	e1c320d0 	ldrd	r2, [r3]

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_colCounter_ui32,l_rowCounter_ui32)]=
    e028:	e1c420f0 	strd	r2, [r4]
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    e02c:	e51b3014 	ldr	r3, [fp, #-20]
    e030:	e2833001 	add	r3, r3, #1
    e034:	e50b3014 	str	r3, [fp, #-20]
    e038:	e51b2014 	ldr	r2, [fp, #-20]
    e03c:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
    e040:	e1520003 	cmp	r2, r3
    e044:	3affffe6 	bcc	dfe4 <g_sigMath_matrixTransponiert_bl+0x44>
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32)
{
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    e048:	e51b3010 	ldr	r3, [fp, #-16]
    e04c:	e2833001 	add	r3, r3, #1
    e050:	e50b3010 	str	r3, [fp, #-16]
    e054:	e51b2010 	ldr	r2, [fp, #-16]
    e058:	e51b3020 	ldr	r3, [fp, #-32]
    e05c:	e1520003 	cmp	r2, r3
    e060:	3affffdc 	bcc	dfd8 <g_sigMath_matrixTransponiert_bl+0x38>
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_colCounter_ui32,l_rowCounter_ui32)]=
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
		}
	}
	return M_SIG_MATRIXLIB_SUCCESS_BL;
    e064:	e3a03000 	mov	r3, #0
}
    e068:	e1a00003 	mov	r0, r3
    e06c:	e24bd008 	sub	sp, fp, #8
    e070:	e8bd8810 	pop	{r4, fp, pc}

0000e074 <g_sigMath_matrixInverse_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixInverse_bl(double* f_matrixResult_pf64,
		double* f_matrixA_pf64, unsigned int f_nrOfRowsA_ui32,
		unsigned int f_nrOfColsA_ui32)
{
    e074:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e078:	ed2d8b02 	vpush	{d8}
    e07c:	e28db028 	add	fp, sp, #40	; 0x28
    e080:	e24dd0a4 	sub	sp, sp, #164	; 0xa4
    e084:	e50b0078 	str	r0, [fp, #-120]	; 0x78
    e088:	e50b107c 	str	r1, [fp, #-124]	; 0x7c
    e08c:	e50b2080 	str	r2, [fp, #-128]	; 0x80
    e090:	e50b3084 	str	r3, [fp, #-132]	; 0x84
    e094:	e1a0300d 	mov	r3, sp
    e098:	e1a0a003 	mov	sl, r3
	int l_rowCounter_ui32=0;
    e09c:	e3a03000 	mov	r3, #0
    e0a0:	e50b3030 	str	r3, [fp, #-48]	; 0x30
	int l_rowCounterInnerLoop_ui32=0;
    e0a4:	e3a03000 	mov	r3, #0
    e0a8:	e50b3034 	str	r3, [fp, #-52]	; 0x34
	int l_colCounter_ui32=0;
    e0ac:	e3a03000 	mov	r3, #0
    e0b0:	e50b3038 	str	r3, [fp, #-56]	; 0x38
	double l_tempValue_f64=0;
    e0b4:	e3a02000 	mov	r2, #0
    e0b8:	e3a03000 	mov	r3, #0
    e0bc:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	//double l_determinant_f64=0;
	//Matrix for building a lower triangular matrix
	double l_lowerTriangularMatrix_f64[f_nrOfRowsA_ui32][f_nrOfColsA_ui32];
    e0c0:	e51b8084 	ldr	r8, [fp, #-132]	; 0x84
    e0c4:	e51b9080 	ldr	r9, [fp, #-128]	; 0x80
    e0c8:	e1a03008 	mov	r3, r8
    e0cc:	e2433001 	sub	r3, r3, #1
    e0d0:	e50b3048 	str	r3, [fp, #-72]	; 0x48
    e0d4:	e1a02008 	mov	r2, r8
    e0d8:	e3a03000 	mov	r3, #0
    e0dc:	e1a05303 	lsl	r5, r3, #6
    e0e0:	e1855d22 	orr	r5, r5, r2, lsr #26
    e0e4:	e1a04302 	lsl	r4, r2, #6
    e0e8:	e1a03009 	mov	r3, r9
    e0ec:	e2433001 	sub	r3, r3, #1
    e0f0:	e50b304c 	str	r3, [fp, #-76]	; 0x4c
    e0f4:	e1a00008 	mov	r0, r8
    e0f8:	e3a01000 	mov	r1, #0
    e0fc:	e1a02009 	mov	r2, r9
    e100:	e3a03000 	mov	r3, #0
    e104:	e00e0192 	mul	lr, r2, r1
    e108:	e00c0390 	mul	ip, r0, r3
    e10c:	e08ec00c 	add	ip, lr, ip
    e110:	e0832290 	umull	r2, r3, r0, r2
    e114:	e08c1003 	add	r1, ip, r3
    e118:	e1a03001 	mov	r3, r1
    e11c:	e1a07303 	lsl	r7, r3, #6
    e120:	e1877d22 	orr	r7, r7, r2, lsr #26
    e124:	e1a06302 	lsl	r6, r2, #6
    e128:	e1a00008 	mov	r0, r8
    e12c:	e3a01000 	mov	r1, #0
    e130:	e1a02009 	mov	r2, r9
    e134:	e3a03000 	mov	r3, #0
    e138:	e00e0192 	mul	lr, r2, r1
    e13c:	e00c0390 	mul	ip, r0, r3
    e140:	e08ec00c 	add	ip, lr, ip
    e144:	e0832290 	umull	r2, r3, r0, r2
    e148:	e08c1003 	add	r1, ip, r3
    e14c:	e1a03001 	mov	r3, r1
    e150:	e1a01303 	lsl	r1, r3, #6
    e154:	e50b1088 	str	r1, [fp, #-136]	; 0x88
    e158:	e51b1088 	ldr	r1, [fp, #-136]	; 0x88
    e15c:	e1811d22 	orr	r1, r1, r2, lsr #26
    e160:	e50b1088 	str	r1, [fp, #-136]	; 0x88
    e164:	e1a01302 	lsl	r1, r2, #6
    e168:	e0030899 	mul	r3, r9, r8
    e16c:	e1a03183 	lsl	r3, r3, #3
    e170:	e2833007 	add	r3, r3, #7
    e174:	e2833007 	add	r3, r3, #7
    e178:	e1a031a3 	lsr	r3, r3, #3
    e17c:	e1a03183 	lsl	r3, r3, #3
    e180:	e04dd003 	sub	sp, sp, r3
    e184:	e28d3010 	add	r3, sp, #16
    e188:	e2833007 	add	r3, r3, #7
    e18c:	e1a031a3 	lsr	r3, r3, #3
    e190:	e1a03183 	lsl	r3, r3, #3
    e194:	e50b3050 	str	r3, [fp, #-80]	; 0x50
	double* l_lowerTriangularMatrix_pf64=(double*)l_lowerTriangularMatrix_f64;
    e198:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
    e19c:	e50b3054 	str	r3, [fp, #-84]	; 0x54
	//Matrix for solving a system
	double l_lowerInverseTriangularMatrix_f64[f_nrOfRowsA_ui32][f_nrOfColsA_ui32];
    e1a0:	e51b4084 	ldr	r4, [fp, #-132]	; 0x84
    e1a4:	e51b5080 	ldr	r5, [fp, #-128]	; 0x80
    e1a8:	e1a03004 	mov	r3, r4
    e1ac:	e2433001 	sub	r3, r3, #1
    e1b0:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    e1b4:	e1a02004 	mov	r2, r4
    e1b8:	e3a03000 	mov	r3, #0
    e1bc:	e1a01303 	lsl	r1, r3, #6
    e1c0:	e50b1090 	str	r1, [fp, #-144]	; 0x90
    e1c4:	e51b1090 	ldr	r1, [fp, #-144]	; 0x90
    e1c8:	e1811d22 	orr	r1, r1, r2, lsr #26
    e1cc:	e50b1090 	str	r1, [fp, #-144]	; 0x90
    e1d0:	e1a01302 	lsl	r1, r2, #6
    e1d4:	e1a03005 	mov	r3, r5
    e1d8:	e2433001 	sub	r3, r3, #1
    e1dc:	e50b305c 	str	r3, [fp, #-92]	; 0x5c
    e1e0:	e1a00004 	mov	r0, r4
    e1e4:	e3a01000 	mov	r1, #0
    e1e8:	e1a02005 	mov	r2, r5
    e1ec:	e3a03000 	mov	r3, #0
    e1f0:	e00e0192 	mul	lr, r2, r1
    e1f4:	e00c0390 	mul	ip, r0, r3
    e1f8:	e08ec00c 	add	ip, lr, ip
    e1fc:	e0832290 	umull	r2, r3, r0, r2
    e200:	e08c1003 	add	r1, ip, r3
    e204:	e1a03001 	mov	r3, r1
    e208:	e1a01303 	lsl	r1, r3, #6
    e20c:	e50b1098 	str	r1, [fp, #-152]	; 0x98
    e210:	e51b1098 	ldr	r1, [fp, #-152]	; 0x98
    e214:	e1811d22 	orr	r1, r1, r2, lsr #26
    e218:	e50b1098 	str	r1, [fp, #-152]	; 0x98
    e21c:	e1a01302 	lsl	r1, r2, #6
    e220:	e1a02004 	mov	r2, r4
    e224:	e3a03000 	mov	r3, #0
    e228:	e1a00005 	mov	r0, r5
    e22c:	e3a01000 	mov	r1, #0
    e230:	e00e0390 	mul	lr, r0, r3
    e234:	e00c0192 	mul	ip, r2, r1
    e238:	e08ec00c 	add	ip, lr, ip
    e23c:	e0832092 	umull	r2, r3, r2, r0
    e240:	e08c1003 	add	r1, ip, r3
    e244:	e1a03001 	mov	r3, r1
    e248:	e1a01303 	lsl	r1, r3, #6
    e24c:	e50b10a0 	str	r1, [fp, #-160]	; 0xa0
    e250:	e51b10a0 	ldr	r1, [fp, #-160]	; 0xa0
    e254:	e1811d22 	orr	r1, r1, r2, lsr #26
    e258:	e50b10a0 	str	r1, [fp, #-160]	; 0xa0
    e25c:	e1a01302 	lsl	r1, r2, #6
    e260:	e0030495 	mul	r3, r5, r4
    e264:	e1a03183 	lsl	r3, r3, #3
    e268:	e2833007 	add	r3, r3, #7
    e26c:	e2833007 	add	r3, r3, #7
    e270:	e1a031a3 	lsr	r3, r3, #3
    e274:	e1a03183 	lsl	r3, r3, #3
    e278:	e04dd003 	sub	sp, sp, r3
    e27c:	e28d3010 	add	r3, sp, #16
    e280:	e2833007 	add	r3, r3, #7
    e284:	e1a031a3 	lsr	r3, r3, #3
    e288:	e1a03183 	lsl	r3, r3, #3
    e28c:	e50b3060 	str	r3, [fp, #-96]	; 0x60
	double* l_lowerInverseTriangularMatrix_pf64=(double*)l_lowerInverseTriangularMatrix_f64;
    e290:	e51b3060 	ldr	r3, [fp, #-96]	; 0x60
    e294:	e50b3064 	str	r3, [fp, #-100]	; 0x64

	double l_eyeMatrix_f64[f_nrOfRowsA_ui32][f_nrOfColsA_ui32];
    e298:	e51bc084 	ldr	ip, [fp, #-132]	; 0x84
    e29c:	e51be080 	ldr	lr, [fp, #-128]	; 0x80
    e2a0:	e1a0300c 	mov	r3, ip
    e2a4:	e2433001 	sub	r3, r3, #1
    e2a8:	e50b3068 	str	r3, [fp, #-104]	; 0x68
    e2ac:	e1a0200c 	mov	r2, ip
    e2b0:	e3a03000 	mov	r3, #0
    e2b4:	e1a01303 	lsl	r1, r3, #6
    e2b8:	e50b10a8 	str	r1, [fp, #-168]	; 0xa8
    e2bc:	e51b10a8 	ldr	r1, [fp, #-168]	; 0xa8
    e2c0:	e1811d22 	orr	r1, r1, r2, lsr #26
    e2c4:	e50b10a8 	str	r1, [fp, #-168]	; 0xa8
    e2c8:	e1a01302 	lsl	r1, r2, #6
    e2cc:	e1a0300e 	mov	r3, lr
    e2d0:	e2433001 	sub	r3, r3, #1
    e2d4:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    e2d8:	e1a0000c 	mov	r0, ip
    e2dc:	e3a01000 	mov	r1, #0
    e2e0:	e1a0200e 	mov	r2, lr
    e2e4:	e3a03000 	mov	r3, #0
    e2e8:	e0050192 	mul	r5, r2, r1
    e2ec:	e0040390 	mul	r4, r0, r3
    e2f0:	e0854004 	add	r4, r5, r4
    e2f4:	e0832290 	umull	r2, r3, r0, r2
    e2f8:	e0841003 	add	r1, r4, r3
    e2fc:	e1a03001 	mov	r3, r1
    e300:	e1a01303 	lsl	r1, r3, #6
    e304:	e50b10b0 	str	r1, [fp, #-176]	; 0xb0
    e308:	e51b10b0 	ldr	r1, [fp, #-176]	; 0xb0
    e30c:	e1811d22 	orr	r1, r1, r2, lsr #26
    e310:	e50b10b0 	str	r1, [fp, #-176]	; 0xb0
    e314:	e1a01302 	lsl	r1, r2, #6
    e318:	e1a0000c 	mov	r0, ip
    e31c:	e3a01000 	mov	r1, #0
    e320:	e1a0200e 	mov	r2, lr
    e324:	e3a03000 	mov	r3, #0
    e328:	e0050192 	mul	r5, r2, r1
    e32c:	e0040390 	mul	r4, r0, r3
    e330:	e0854004 	add	r4, r5, r4
    e334:	e0832290 	umull	r2, r3, r0, r2
    e338:	e0841003 	add	r1, r4, r3
    e33c:	e1a03001 	mov	r3, r1
    e340:	e1a01303 	lsl	r1, r3, #6
    e344:	e50b10b8 	str	r1, [fp, #-184]	; 0xb8
    e348:	e51b10b8 	ldr	r1, [fp, #-184]	; 0xb8
    e34c:	e1811d22 	orr	r1, r1, r2, lsr #26
    e350:	e50b10b8 	str	r1, [fp, #-184]	; 0xb8
    e354:	e1a01302 	lsl	r1, r2, #6
    e358:	e0030c9e 	mul	r3, lr, ip
    e35c:	e1a03183 	lsl	r3, r3, #3
    e360:	e2833007 	add	r3, r3, #7
    e364:	e2833007 	add	r3, r3, #7
    e368:	e1a031a3 	lsr	r3, r3, #3
    e36c:	e1a03183 	lsl	r3, r3, #3
    e370:	e04dd003 	sub	sp, sp, r3
    e374:	e28d3010 	add	r3, sp, #16
    e378:	e2833007 	add	r3, r3, #7
    e37c:	e1a031a3 	lsr	r3, r3, #3
    e380:	e1a03183 	lsl	r3, r3, #3
    e384:	e50b3070 	str	r3, [fp, #-112]	; 0x70
	double* l_eyeMatrix_pf64=(double*)l_eyeMatrix_f64;
    e388:	e51b3070 	ldr	r3, [fp, #-112]	; 0x70
    e38c:	e50b3074 	str	r3, [fp, #-116]	; 0x74

	if(f_nrOfRowsA_ui32!=f_nrOfColsA_ui32)
    e390:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
    e394:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    e398:	e1520003 	cmp	r2, r3
    e39c:	0a000001 	beq	e3a8 <g_sigMath_matrixInverse_bl+0x334>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    e3a0:	e3a03001 	mov	r3, #1
    e3a4:	ea00013b 	b	e898 <g_sigMath_matrixInverse_bl+0x824>


	//Cholesky for building the lower triangular matrix
	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    e3a8:	e3a03000 	mov	r3, #0
    e3ac:	e50b3038 	str	r3, [fp, #-56]	; 0x38
    e3b0:	ea0000a8 	b	e658 <g_sigMath_matrixInverse_bl+0x5e4>
	{
		for(l_rowCounter_ui32=l_colCounter_ui32;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    e3b4:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e3b8:	e50b3030 	str	r3, [fp, #-48]	; 0x30
    e3bc:	ea00009e 	b	e63c <g_sigMath_matrixInverse_bl+0x5c8>
		{
			if(l_rowCounter_ui32==l_colCounter_ui32)
    e3c0:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    e3c4:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e3c8:	e1520003 	cmp	r2, r3
    e3cc:	1a00004c 	bne	e504 <g_sigMath_matrixInverse_bl+0x490>
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
    e3d0:	e3a03000 	mov	r3, #0
    e3d4:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    e3d8:	ea000014 	b	e430 <g_sigMath_matrixInverse_bl+0x3bc>
				{
					l_tempValue_f64+=pow(l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)],2);
    e3dc:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    e3e0:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    e3e4:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    e3e8:	e1a01002 	mov	r1, r2
    e3ec:	e1a02003 	mov	r2, r3
    e3f0:	ebfffde8 	bl	db98 <m_getIndex_i32>
    e3f4:	e1a03000 	mov	r3, r0
    e3f8:	e1a03183 	lsl	r3, r3, #3
    e3fc:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    e400:	e0823003 	add	r3, r2, r3
    e404:	ed937b00 	vldr	d7, [r3]
    e408:	eeb00b47 	vmov.f64	d0, d7
    e40c:	ed9f1bab 	vldr	d1, [pc, #684]	; e6c0 <g_sigMath_matrixInverse_bl+0x64c>
    e410:	ebffe954 	bl	8968 <_init+0x68>
    e414:	eeb07b40 	vmov.f64	d7, d0
    e418:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
    e41c:	ee367b07 	vadd.f64	d7, d6, d7
    e420:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc
	{
		for(l_rowCounter_ui32=l_colCounter_ui32;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			if(l_rowCounter_ui32==l_colCounter_ui32)
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
    e424:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    e428:	e2833001 	add	r3, r3, #1
    e42c:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    e430:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    e434:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e438:	e1520003 	cmp	r2, r3
    e43c:	baffffe6 	blt	e3dc <g_sigMath_matrixInverse_bl+0x368>
				{
					l_tempValue_f64+=pow(l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)],2);
				}
				if(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64<0)
    e440:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    e444:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e448:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    e44c:	e1a01002 	mov	r1, r2
    e450:	e1a02003 	mov	r2, r3
    e454:	ebfffdcf 	bl	db98 <m_getIndex_i32>
    e458:	e1a03000 	mov	r3, r0
    e45c:	e1a03183 	lsl	r3, r3, #3
    e460:	e51b207c 	ldr	r2, [fp, #-124]	; 0x7c
    e464:	e0823003 	add	r3, r2, r3
    e468:	ed936b00 	vldr	d6, [r3]
    e46c:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    e470:	ee367b47 	vsub.f64	d7, d6, d7
    e474:	eeb57bc0 	vcmpe.f64	d7, #0.0
    e478:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    e47c:	5a000001 	bpl	e488 <g_sigMath_matrixInverse_bl+0x414>
				{return M_SIG_MATRIXLIB_FAILED_BL;}
    e480:	e3a03001 	mov	r3, #1
    e484:	ea000103 	b	e898 <g_sigMath_matrixInverse_bl+0x824>

				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    e488:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    e48c:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e490:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    e494:	e1a01002 	mov	r1, r2
    e498:	e1a02003 	mov	r2, r3
    e49c:	ebfffdbd 	bl	db98 <m_getIndex_i32>
    e4a0:	e1a03000 	mov	r3, r0
    e4a4:	e1a03183 	lsl	r3, r3, #3
    e4a8:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    e4ac:	e0824003 	add	r4, r2, r3
						sqrt(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64);
    e4b0:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    e4b4:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e4b8:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    e4bc:	e1a01002 	mov	r1, r2
    e4c0:	e1a02003 	mov	r2, r3
    e4c4:	ebfffdb3 	bl	db98 <m_getIndex_i32>
    e4c8:	e1a03000 	mov	r3, r0
    e4cc:	e1a03183 	lsl	r3, r3, #3
    e4d0:	e51b207c 	ldr	r2, [fp, #-124]	; 0x7c
    e4d4:	e0823003 	add	r3, r2, r3
    e4d8:	ed936b00 	vldr	d6, [r3]
    e4dc:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    e4e0:	ee367b47 	vsub.f64	d7, d6, d7
    e4e4:	eeb00b47 	vmov.f64	d0, d7
    e4e8:	ebffe92d 	bl	89a4 <_init+0xa4>
    e4ec:	eeb07b40 	vmov.f64	d7, d0
					l_tempValue_f64+=pow(l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)],2);
				}
				if(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64<0)
				{return M_SIG_MATRIXLIB_FAILED_BL;}

				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    e4f0:	ed847b00 	vstr	d7, [r4]
						sqrt(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64);

				l_tempValue_f64=0;
    e4f4:	e3a02000 	mov	r2, #0
    e4f8:	e3a03000 	mov	r3, #0
    e4fc:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
    e500:	ea00004a 	b	e630 <g_sigMath_matrixInverse_bl+0x5bc>
			}
			else
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
    e504:	e3a03000 	mov	r3, #0
    e508:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    e50c:	ea00001c 	b	e584 <g_sigMath_matrixInverse_bl+0x510>
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
    e510:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    e514:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    e518:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    e51c:	e1a01002 	mov	r1, r2
    e520:	e1a02003 	mov	r2, r3
    e524:	ebfffd9b 	bl	db98 <m_getIndex_i32>
    e528:	e1a03000 	mov	r3, r0
    e52c:	e1a03183 	lsl	r3, r3, #3
    e530:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    e534:	e0823003 	add	r3, r2, r3
    e538:	ed938b00 	vldr	d8, [r3]
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
    e53c:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    e540:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    e544:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    e548:	e1a01002 	mov	r1, r2
    e54c:	e1a02003 	mov	r2, r3
    e550:	ebfffd90 	bl	db98 <m_getIndex_i32>
    e554:	e1a03000 	mov	r3, r0
    e558:	e1a03183 	lsl	r3, r3, #3
    e55c:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    e560:	e0823003 	add	r3, r2, r3
    e564:	ed937b00 	vldr	d7, [r3]
			}
			else
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
    e568:	ee287b07 	vmul.f64	d7, d8, d7
    e56c:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
    e570:	ee367b07 	vadd.f64	d7, d6, d7
    e574:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc

				l_tempValue_f64=0;
			}
			else
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
    e578:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    e57c:	e2833001 	add	r3, r3, #1
    e580:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    e584:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    e588:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e58c:	e1520003 	cmp	r2, r3
    e590:	baffffde 	blt	e510 <g_sigMath_matrixInverse_bl+0x49c>
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
				}
				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    e594:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    e598:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e59c:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    e5a0:	e1a01002 	mov	r1, r2
    e5a4:	e1a02003 	mov	r2, r3
    e5a8:	ebfffd7a 	bl	db98 <m_getIndex_i32>
    e5ac:	e1a03000 	mov	r3, r0
    e5b0:	e1a03183 	lsl	r3, r3, #3
    e5b4:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    e5b8:	e0824003 	add	r4, r2, r3
										(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64)/
    e5bc:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    e5c0:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e5c4:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    e5c8:	e1a01002 	mov	r1, r2
    e5cc:	e1a02003 	mov	r2, r3
    e5d0:	ebfffd70 	bl	db98 <m_getIndex_i32>
    e5d4:	e1a03000 	mov	r3, r0
    e5d8:	e1a03183 	lsl	r3, r3, #3
    e5dc:	e51b207c 	ldr	r2, [fp, #-124]	; 0x7c
    e5e0:	e0823003 	add	r3, r2, r3
    e5e4:	ed936b00 	vldr	d6, [r3]
    e5e8:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    e5ec:	ee368b47 	vsub.f64	d8, d6, d7
										l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)];
    e5f0:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    e5f4:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e5f8:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    e5fc:	e1a01002 	mov	r1, r2
    e600:	e1a02003 	mov	r2, r3
    e604:	ebfffd63 	bl	db98 <m_getIndex_i32>
    e608:	e1a03000 	mov	r3, r0
    e60c:	e1a03183 	lsl	r3, r3, #3
    e610:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    e614:	e0823003 	add	r3, r2, r3
    e618:	ed937b00 	vldr	d7, [r3]
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
				}
				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
										(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64)/
    e61c:	ee887b07 	vdiv.f64	d7, d8, d7
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
				}
				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    e620:	ed847b00 	vstr	d7, [r4]
										(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64)/
										l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)];
				l_tempValue_f64=0;
    e624:	e3a02000 	mov	r2, #0
    e628:	e3a03000 	mov	r3, #0
    e62c:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc


	//Cholesky for building the lower triangular matrix
	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=l_colCounter_ui32;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    e630:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    e634:	e2833001 	add	r3, r3, #1
    e638:	e50b3030 	str	r3, [fp, #-48]	; 0x30
    e63c:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    e640:	e51b3080 	ldr	r3, [fp, #-128]	; 0x80
    e644:	e1520003 	cmp	r2, r3
    e648:	3affff5c 	bcc	e3c0 <g_sigMath_matrixInverse_bl+0x34c>
	if(f_nrOfRowsA_ui32!=f_nrOfColsA_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}


	//Cholesky for building the lower triangular matrix
	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    e64c:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e650:	e2833001 	add	r3, r3, #1
    e654:	e50b3038 	str	r3, [fp, #-56]	; 0x38
    e658:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    e65c:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    e660:	e1520003 	cmp	r2, r3
    e664:	3affff52 	bcc	e3b4 <g_sigMath_matrixInverse_bl+0x340>
//	}
//	l_determinant_f64=pow(l_determinant_f64,2);

//solve linear system

	if(g_sigMath_matrixEye_bl(l_eyeMatrix_f64[0],f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
    e668:	e51b3070 	ldr	r3, [fp, #-112]	; 0x70
    e66c:	e1a00003 	mov	r0, r3
    e670:	e51b1080 	ldr	r1, [fp, #-128]	; 0x80
    e674:	e51b2084 	ldr	r2, [fp, #-132]	; 0x84
    e678:	eb0000f7 	bl	ea5c <g_sigMath_matrixEye_bl>
    e67c:	e1a03000 	mov	r3, r0
    e680:	e3530000 	cmp	r3, #0
    e684:	0a000001 	beq	e690 <g_sigMath_matrixInverse_bl+0x61c>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    e688:	e3a03001 	mov	r3, #1
    e68c:	ea000081 	b	e898 <g_sigMath_matrixInverse_bl+0x824>
	l_tempValue_f64=0;
    e690:	e3a02000 	mov	r2, #0
    e694:	e3a03000 	mov	r3, #0
    e698:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    e69c:	e3a03000 	mov	r3, #0
    e6a0:	e50b3038 	str	r3, [fp, #-56]	; 0x38
    e6a4:	ea000059 	b	e810 <g_sigMath_matrixInverse_bl+0x79c>
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    e6a8:	e3a03000 	mov	r3, #0
    e6ac:	e50b3030 	str	r3, [fp, #-48]	; 0x30
    e6b0:	ea00004f 	b	e7f4 <g_sigMath_matrixInverse_bl+0x780>
		{
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
    e6b4:	e3a03000 	mov	r3, #0
    e6b8:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    e6bc:	ea00001e 	b	e73c <g_sigMath_matrixInverse_bl+0x6c8>
    e6c0:	00000000 	.word	0x00000000
    e6c4:	40000000 	.word	0x40000000
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
    e6c8:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    e6cc:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    e6d0:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    e6d4:	e1a01002 	mov	r1, r2
    e6d8:	e1a02003 	mov	r2, r3
    e6dc:	ebfffd2d 	bl	db98 <m_getIndex_i32>
    e6e0:	e1a03000 	mov	r3, r0
    e6e4:	e1a03183 	lsl	r3, r3, #3
    e6e8:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    e6ec:	e0823003 	add	r3, r2, r3
    e6f0:	ed938b00 	vldr	d8, [r3]
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
    e6f4:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    e6f8:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e6fc:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    e700:	e1a01002 	mov	r1, r2
    e704:	e1a02003 	mov	r2, r3
    e708:	ebfffd22 	bl	db98 <m_getIndex_i32>
    e70c:	e1a03000 	mov	r3, r0
    e710:	e1a03183 	lsl	r3, r3, #3
    e714:	e51b2064 	ldr	r2, [fp, #-100]	; 0x64
    e718:	e0823003 	add	r3, r2, r3
    e71c:	ed937b00 	vldr	d7, [r3]
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
    e720:	ee287b07 	vmul.f64	d7, d8, d7
    e724:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
    e728:	ee367b47 	vsub.f64	d7, d6, d7
    e72c:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
    e730:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    e734:	e2833001 	add	r3, r3, #1
    e738:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    e73c:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    e740:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    e744:	e1520003 	cmp	r2, r3
    e748:	baffffde 	blt	e6c8 <g_sigMath_matrixInverse_bl+0x654>
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
			}
			l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    e74c:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    e750:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e754:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    e758:	e1a01002 	mov	r1, r2
    e75c:	e1a02003 	mov	r2, r3
    e760:	ebfffd0c 	bl	db98 <m_getIndex_i32>
    e764:	e1a03000 	mov	r3, r0
    e768:	e1a03183 	lsl	r3, r3, #3
    e76c:	e51b2064 	ldr	r2, [fp, #-100]	; 0x64
    e770:	e0824003 	add	r4, r2, r3
						(l_eyeMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+l_tempValue_f64)/
    e774:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    e778:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e77c:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    e780:	e1a01002 	mov	r1, r2
    e784:	e1a02003 	mov	r2, r3
    e788:	ebfffd02 	bl	db98 <m_getIndex_i32>
    e78c:	e1a03000 	mov	r3, r0
    e790:	e1a03183 	lsl	r3, r3, #3
    e794:	e51b2074 	ldr	r2, [fp, #-116]	; 0x74
    e798:	e0823003 	add	r3, r2, r3
    e79c:	ed936b00 	vldr	d6, [r3]
    e7a0:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    e7a4:	ee368b07 	vadd.f64	d8, d6, d7
						l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounter_ui32)];
    e7a8:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    e7ac:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    e7b0:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    e7b4:	e1a01002 	mov	r1, r2
    e7b8:	e1a02003 	mov	r2, r3
    e7bc:	ebfffcf5 	bl	db98 <m_getIndex_i32>
    e7c0:	e1a03000 	mov	r3, r0
    e7c4:	e1a03183 	lsl	r3, r3, #3
    e7c8:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    e7cc:	e0823003 	add	r3, r2, r3
    e7d0:	ed937b00 	vldr	d7, [r3]
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
			}
			l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						(l_eyeMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+l_tempValue_f64)/
    e7d4:	ee887b07 	vdiv.f64	d7, d8, d7
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
			}
			l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    e7d8:	ed847b00 	vstr	d7, [r4]
						(l_eyeMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+l_tempValue_f64)/
						l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounter_ui32)];
			l_tempValue_f64=0;
    e7dc:	e3a02000 	mov	r2, #0
    e7e0:	e3a03000 	mov	r3, #0
    e7e4:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	l_tempValue_f64=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    e7e8:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    e7ec:	e2833001 	add	r3, r3, #1
    e7f0:	e50b3030 	str	r3, [fp, #-48]	; 0x30
    e7f4:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    e7f8:	e51b3080 	ldr	r3, [fp, #-128]	; 0x80
    e7fc:	e1520003 	cmp	r2, r3
    e800:	3affffab 	bcc	e6b4 <g_sigMath_matrixInverse_bl+0x640>

	if(g_sigMath_matrixEye_bl(l_eyeMatrix_f64[0],f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	l_tempValue_f64=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    e804:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e808:	e2833001 	add	r3, r3, #1
    e80c:	e50b3038 	str	r3, [fp, #-56]	; 0x38
    e810:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    e814:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    e818:	e1520003 	cmp	r2, r3
    e81c:	3affffa1 	bcc	e6a8 <g_sigMath_matrixInverse_bl+0x634>
						l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounter_ui32)];
			l_tempValue_f64=0;
		}
	}

	if(g_sigMath_matrixTransponiert_bl((double*)l_lowerTriangularMatrix_f64,(double*)l_lowerInverseTriangularMatrix_f64,
    e820:	e51b2050 	ldr	r2, [fp, #-80]	; 0x50
    e824:	e51b3060 	ldr	r3, [fp, #-96]	; 0x60
    e828:	e1a00002 	mov	r0, r2
    e82c:	e1a01003 	mov	r1, r3
    e830:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
    e834:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    e838:	ebfffdd8 	bl	dfa0 <g_sigMath_matrixTransponiert_bl>
    e83c:	e1a03000 	mov	r3, r0
    e840:	e3530000 	cmp	r3, #0
    e844:	0a000001 	beq	e850 <g_sigMath_matrixInverse_bl+0x7dc>
				f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    e848:	e3a03001 	mov	r3, #1
    e84c:	ea000011 	b	e898 <g_sigMath_matrixInverse_bl+0x824>

	if(g_sigMath_matrixMultiplikation_bl((double*)f_matrixResult_pf64,(double*)l_lowerTriangularMatrix_f64 ,
    e850:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
			f_nrOfRowsA_ui32,f_nrOfColsA_ui32,(double*)l_lowerInverseTriangularMatrix_f64,f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
    e854:	e51b2060 	ldr	r2, [fp, #-96]	; 0x60

	if(g_sigMath_matrixTransponiert_bl((double*)l_lowerTriangularMatrix_f64,(double*)l_lowerInverseTriangularMatrix_f64,
				f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}

	if(g_sigMath_matrixMultiplikation_bl((double*)f_matrixResult_pf64,(double*)l_lowerTriangularMatrix_f64 ,
    e858:	e58d2000 	str	r2, [sp]
    e85c:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
    e860:	e58d2004 	str	r2, [sp, #4]
    e864:	e51b2084 	ldr	r2, [fp, #-132]	; 0x84
    e868:	e58d2008 	str	r2, [sp, #8]
    e86c:	e51b0078 	ldr	r0, [fp, #-120]	; 0x78
    e870:	e1a01003 	mov	r1, r3
    e874:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
    e878:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    e87c:	ebfffcd4 	bl	dbd4 <g_sigMath_matrixMultiplikation_bl>
    e880:	e1a03000 	mov	r3, r0
    e884:	e3530000 	cmp	r3, #0
    e888:	0a000001 	beq	e894 <g_sigMath_matrixInverse_bl+0x820>
			f_nrOfRowsA_ui32,f_nrOfColsA_ui32,(double*)l_lowerInverseTriangularMatrix_f64,f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    e88c:	e3a03001 	mov	r3, #1
    e890:	ea000000 	b	e898 <g_sigMath_matrixInverse_bl+0x824>

	return M_SIG_MATRIXLIB_SUCCESS_BL;
    e894:	e3a03000 	mov	r3, #0
    e898:	e1a0d00a 	mov	sp, sl
}
    e89c:	e1a00003 	mov	r0, r3
    e8a0:	e24bd028 	sub	sp, fp, #40	; 0x28
    e8a4:	ecbd8b02 	vpop	{d8}
    e8a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e8ac <g_sigMath_matrixAssignment_bl>:
 ***********************************************************************/
unsigned int g_sigMath_matrixAssignment_bl(double* f_matrixResult_pf64,
		unsigned int f_nrOfRowsResult_ui32,unsigned int f_nrOfColsResult_ui32,
		double* f_matrix_pf64, unsigned int f_nrOfRows_ui32,
		unsigned int f_nrOfCols_ui32)
{
    e8ac:	e92d4810 	push	{r4, fp, lr}
    e8b0:	e28db008 	add	fp, sp, #8
    e8b4:	e24dd01c 	sub	sp, sp, #28
    e8b8:	e50b0018 	str	r0, [fp, #-24]
    e8bc:	e50b101c 	str	r1, [fp, #-28]
    e8c0:	e50b2020 	str	r2, [fp, #-32]
    e8c4:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	unsigned int l_rowCounter_ui32=0;
    e8c8:	e3a03000 	mov	r3, #0
    e8cc:	e50b3010 	str	r3, [fp, #-16]
	unsigned int l_colCounter_ui32=0;
    e8d0:	e3a03000 	mov	r3, #0
    e8d4:	e50b3014 	str	r3, [fp, #-20]

	if(f_nrOfRows_ui32!=f_nrOfRowsResult_ui32 && f_nrOfCols_ui32!=f_nrOfColsResult_ui32)
    e8d8:	e59b2004 	ldr	r2, [fp, #4]
    e8dc:	e51b301c 	ldr	r3, [fp, #-28]
    e8e0:	e1520003 	cmp	r2, r3
    e8e4:	0a000005 	beq	e900 <g_sigMath_matrixAssignment_bl+0x54>
    e8e8:	e59b2008 	ldr	r2, [fp, #8]
    e8ec:	e51b3020 	ldr	r3, [fp, #-32]
    e8f0:	e1520003 	cmp	r2, r3
    e8f4:	0a000001 	beq	e900 <g_sigMath_matrixAssignment_bl+0x54>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
    e8f8:	e3a03001 	mov	r3, #1
    e8fc:	ea000026 	b	e99c <g_sigMath_matrixAssignment_bl+0xf0>
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    e900:	e3a03000 	mov	r3, #0
    e904:	e50b3014 	str	r3, [fp, #-20]
    e908:	ea00001e 	b	e988 <g_sigMath_matrixAssignment_bl+0xdc>
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    e90c:	e3a03000 	mov	r3, #0
    e910:	e50b3010 	str	r3, [fp, #-16]
    e914:	ea000014 	b	e96c <g_sigMath_matrixAssignment_bl+0xc0>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    e918:	e59b0008 	ldr	r0, [fp, #8]
    e91c:	e51b1010 	ldr	r1, [fp, #-16]
    e920:	e51b2014 	ldr	r2, [fp, #-20]
    e924:	ebfffc9b 	bl	db98 <m_getIndex_i32>
    e928:	e1a03000 	mov	r3, r0
    e92c:	e1a03183 	lsl	r3, r3, #3
    e930:	e51b2018 	ldr	r2, [fp, #-24]
    e934:	e0824003 	add	r4, r2, r3
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
    e938:	e59b0008 	ldr	r0, [fp, #8]
    e93c:	e51b1010 	ldr	r1, [fp, #-16]
    e940:	e51b2014 	ldr	r2, [fp, #-20]
    e944:	ebfffc93 	bl	db98 <m_getIndex_i32>
    e948:	e1a03000 	mov	r3, r0
    e94c:	e1a03183 	lsl	r3, r3, #3
    e950:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
    e954:	e0823003 	add	r3, r2, r3
    e958:	e1c320d0 	ldrd	r2, [r3]
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    e95c:	e1c420f0 	strd	r2, [r4]
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    e960:	e51b3010 	ldr	r3, [fp, #-16]
    e964:	e2833001 	add	r3, r3, #1
    e968:	e50b3010 	str	r3, [fp, #-16]
    e96c:	e51b2010 	ldr	r2, [fp, #-16]
    e970:	e59b3004 	ldr	r3, [fp, #4]
    e974:	e1520003 	cmp	r2, r3
    e978:	3affffe6 	bcc	e918 <g_sigMath_matrixAssignment_bl+0x6c>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    e97c:	e51b3014 	ldr	r3, [fp, #-20]
    e980:	e2833001 	add	r3, r3, #1
    e984:	e50b3014 	str	r3, [fp, #-20]
    e988:	e51b2014 	ldr	r2, [fp, #-20]
    e98c:	e59b3008 	ldr	r3, [fp, #8]
    e990:	e1520003 	cmp	r2, r3
    e994:	3affffdc 	bcc	e90c <g_sigMath_matrixAssignment_bl+0x60>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    e998:	e3a03000 	mov	r3, #0
	}
}
    e99c:	e1a00003 	mov	r0, r3
    e9a0:	e24bd008 	sub	sp, fp, #8
    e9a4:	e8bd8810 	pop	{r4, fp, pc}

0000e9a8 <g_sigMath_matrixInitialize_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixInitialize_bl(double* f_matrixResult_pf64,
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32,
		double f_setValue_f64)
{
    e9a8:	e92d4800 	push	{fp, lr}
    e9ac:	e28db004 	add	fp, sp, #4
    e9b0:	e24dd020 	sub	sp, sp, #32
    e9b4:	e50b0010 	str	r0, [fp, #-16]
    e9b8:	e50b1014 	str	r1, [fp, #-20]
    e9bc:	e50b2018 	str	r2, [fp, #-24]
    e9c0:	ed0b0b09 	vstr	d0, [fp, #-36]	; 0xffffffdc
	unsigned int l_rowCounter_ui32=0;
    e9c4:	e3a03000 	mov	r3, #0
    e9c8:	e50b3008 	str	r3, [fp, #-8]
	unsigned int l_colCounter_ui32=0;
    e9cc:	e3a03000 	mov	r3, #0
    e9d0:	e50b300c 	str	r3, [fp, #-12]

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    e9d4:	e3a03000 	mov	r3, #0
    e9d8:	e50b300c 	str	r3, [fp, #-12]
    e9dc:	ea000016 	b	ea3c <g_sigMath_matrixInitialize_bl+0x94>
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    e9e0:	e3a03000 	mov	r3, #0
    e9e4:	e50b3008 	str	r3, [fp, #-8]
    e9e8:	ea00000c 	b	ea20 <g_sigMath_matrixInitialize_bl+0x78>
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=f_setValue_f64;
    e9ec:	e51b0018 	ldr	r0, [fp, #-24]
    e9f0:	e51b1008 	ldr	r1, [fp, #-8]
    e9f4:	e51b200c 	ldr	r2, [fp, #-12]
    e9f8:	ebfffc66 	bl	db98 <m_getIndex_i32>
    e9fc:	e1a03000 	mov	r3, r0
    ea00:	e1a03183 	lsl	r3, r3, #3
    ea04:	e51b2010 	ldr	r2, [fp, #-16]
    ea08:	e0821003 	add	r1, r2, r3
    ea0c:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
    ea10:	e1c120f0 	strd	r2, [r1]
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    ea14:	e51b3008 	ldr	r3, [fp, #-8]
    ea18:	e2833001 	add	r3, r3, #1
    ea1c:	e50b3008 	str	r3, [fp, #-8]
    ea20:	e51b2008 	ldr	r2, [fp, #-8]
    ea24:	e51b3014 	ldr	r3, [fp, #-20]
    ea28:	e1520003 	cmp	r2, r3
    ea2c:	3affffee 	bcc	e9ec <g_sigMath_matrixInitialize_bl+0x44>
		double f_setValue_f64)
{
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    ea30:	e51b300c 	ldr	r3, [fp, #-12]
    ea34:	e2833001 	add	r3, r3, #1
    ea38:	e50b300c 	str	r3, [fp, #-12]
    ea3c:	e51b200c 	ldr	r2, [fp, #-12]
    ea40:	e51b3018 	ldr	r3, [fp, #-24]
    ea44:	e1520003 	cmp	r2, r3
    ea48:	3affffe4 	bcc	e9e0 <g_sigMath_matrixInitialize_bl+0x38>
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=f_setValue_f64;
		}
	}
	return M_SIG_MATRIXLIB_SUCCESS_BL;
    ea4c:	e3a03000 	mov	r3, #0

}
    ea50:	e1a00003 	mov	r0, r3
    ea54:	e24bd004 	sub	sp, fp, #4
    ea58:	e8bd8800 	pop	{fp, pc}

0000ea5c <g_sigMath_matrixEye_bl>:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixEye_bl(double* f_matrixResult_pf64,
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32)
{
    ea5c:	e92d4800 	push	{fp, lr}
    ea60:	e28db004 	add	fp, sp, #4
    ea64:	e24dd018 	sub	sp, sp, #24
    ea68:	e50b0010 	str	r0, [fp, #-16]
    ea6c:	e50b1014 	str	r1, [fp, #-20]
    ea70:	e50b2018 	str	r2, [fp, #-24]
	unsigned int l_rowCounter_ui32=0;
    ea74:	e3a03000 	mov	r3, #0
    ea78:	e50b3008 	str	r3, [fp, #-8]
	unsigned int l_colCounter_ui32=0;
    ea7c:	e3a03000 	mov	r3, #0
    ea80:	e50b300c 	str	r3, [fp, #-12]

	if(f_nrOfRows_ui32!=f_nrOfCols_ui32)
    ea84:	e51b2014 	ldr	r2, [fp, #-20]
    ea88:	e51b3018 	ldr	r3, [fp, #-24]
    ea8c:	e1520003 	cmp	r2, r3
    ea90:	0a000001 	beq	ea9c <g_sigMath_matrixEye_bl+0x40>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
    ea94:	e3a03001 	mov	r3, #1
    ea98:	ea00002f 	b	eb5c <g_sigMath_matrixEye_bl+0x100>
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    ea9c:	e3a03000 	mov	r3, #0
    eaa0:	e50b300c 	str	r3, [fp, #-12]
    eaa4:	ea000027 	b	eb48 <g_sigMath_matrixEye_bl+0xec>
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    eaa8:	e3a03000 	mov	r3, #0
    eaac:	e50b3008 	str	r3, [fp, #-8]
    eab0:	ea00001d 	b	eb2c <g_sigMath_matrixEye_bl+0xd0>
			{
				if(l_rowCounter_ui32==l_colCounter_ui32)
    eab4:	e51b2008 	ldr	r2, [fp, #-8]
    eab8:	e51b300c 	ldr	r3, [fp, #-12]
    eabc:	e1520003 	cmp	r2, r3
    eac0:	1a00000b 	bne	eaf4 <g_sigMath_matrixEye_bl+0x98>
				{
					f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=1;
    eac4:	e51b0018 	ldr	r0, [fp, #-24]
    eac8:	e51b1008 	ldr	r1, [fp, #-8]
    eacc:	e51b200c 	ldr	r2, [fp, #-12]
    ead0:	ebfffc30 	bl	db98 <m_getIndex_i32>
    ead4:	e1a03000 	mov	r3, r0
    ead8:	e1a03183 	lsl	r3, r3, #3
    eadc:	e51b2010 	ldr	r2, [fp, #-16]
    eae0:	e0821003 	add	r1, r2, r3
    eae4:	e3a02000 	mov	r2, #0
    eae8:	e59f3078 	ldr	r3, [pc, #120]	; eb68 <g_sigMath_matrixEye_bl+0x10c>
    eaec:	e1c120f0 	strd	r2, [r1]
    eaf0:	ea00000a 	b	eb20 <g_sigMath_matrixEye_bl+0xc4>
				}
				else
				{
					f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=0;
    eaf4:	e51b0018 	ldr	r0, [fp, #-24]
    eaf8:	e51b1008 	ldr	r1, [fp, #-8]
    eafc:	e51b200c 	ldr	r2, [fp, #-12]
    eb00:	ebfffc24 	bl	db98 <m_getIndex_i32>
    eb04:	e1a03000 	mov	r3, r0
    eb08:	e1a03183 	lsl	r3, r3, #3
    eb0c:	e51b2010 	ldr	r2, [fp, #-16]
    eb10:	e0821003 	add	r1, r2, r3
    eb14:	e3a02000 	mov	r2, #0
    eb18:	e3a03000 	mov	r3, #0
    eb1c:	e1c120f0 	strd	r2, [r1]
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    eb20:	e51b3008 	ldr	r3, [fp, #-8]
    eb24:	e2833001 	add	r3, r3, #1
    eb28:	e50b3008 	str	r3, [fp, #-8]
    eb2c:	e51b2008 	ldr	r2, [fp, #-8]
    eb30:	e51b3014 	ldr	r3, [fp, #-20]
    eb34:	e1520003 	cmp	r2, r3
    eb38:	3affffdd 	bcc	eab4 <g_sigMath_matrixEye_bl+0x58>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    eb3c:	e51b300c 	ldr	r3, [fp, #-12]
    eb40:	e2833001 	add	r3, r3, #1
    eb44:	e50b300c 	str	r3, [fp, #-12]
    eb48:	e51b200c 	ldr	r2, [fp, #-12]
    eb4c:	e51b3018 	ldr	r3, [fp, #-24]
    eb50:	e1520003 	cmp	r2, r3
    eb54:	3affffd3 	bcc	eaa8 <g_sigMath_matrixEye_bl+0x4c>
				{
					f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=0;
				}
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    eb58:	e3a03000 	mov	r3, #0
	}
}
    eb5c:	e1a00003 	mov	r0, r3
    eb60:	e24bd004 	sub	sp, fp, #4
    eb64:	e8bd8800 	pop	{fp, pc}
    eb68:	3ff00000 	.word	0x3ff00000
    eb6c:	e1a00000 	nop			; (mov r0, r0)

0000eb70 <g_sigOri_getAnglesComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles g_sigOri_getAnglesComplementary_bl()
{
    eb70:	e92d4830 	push	{r4, r5, fp, lr}
    eb74:	e28db00c 	add	fp, sp, #12
    eb78:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_sigOri_arrayOutputAnglesComplementary_st;
    eb7c:	e59f3040 	ldr	r3, [pc, #64]	; ebc4 <g_sigOri_getAnglesComplementary_bl+0x54>
    eb80:	e24bc024 	sub	ip, fp, #36	; 0x24
    eb84:	e1a0e003 	mov	lr, r3
    eb88:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    eb8c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    eb90:	e89e0003 	ldm	lr, {r0, r1}
    eb94:	e88c0003 	stm	ip, {r0, r1}
    eb98:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    eb9c:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    eba0:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    eba4:	ec454b15 	vmov	d5, r4, r5
    eba8:	ec410b16 	vmov	d6, r0, r1
    ebac:	ec432b17 	vmov	d7, r2, r3
}
    ebb0:	eeb00b45 	vmov.f64	d0, d5
    ebb4:	eeb01b46 	vmov.f64	d1, d6
    ebb8:	eeb02b47 	vmov.f64	d2, d7
    ebbc:	e24bd00c 	sub	sp, fp, #12
    ebc0:	e8bd8830 	pop	{r4, r5, fp, pc}
    ebc4:	00018bc8 	.word	0x00018bc8

0000ebc8 <g_sigOri_getPitchComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getPitchComplementary_bl()
{
    ebc8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    ebcc:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64;
    ebd0:	e59f3014 	ldr	r3, [pc, #20]	; ebec <g_sigOri_getPitchComplementary_bl+0x24>
    ebd4:	e1c320d8 	ldrd	r2, [r3, #8]
    ebd8:	ec432b17 	vmov	d7, r2, r3
}
    ebdc:	eeb00b47 	vmov.f64	d0, d7
    ebe0:	e24bd000 	sub	sp, fp, #0
    ebe4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    ebe8:	e12fff1e 	bx	lr
    ebec:	00018bc8 	.word	0x00018bc8

0000ebf0 <g_sigOri_getRollComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getRollComplementary_bl()
{
    ebf0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    ebf4:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesComplementary_st.roll_f64;
    ebf8:	e59f3014 	ldr	r3, [pc, #20]	; ec14 <g_sigOri_getRollComplementary_bl+0x24>
    ebfc:	e1c320d0 	ldrd	r2, [r3]
    ec00:	ec432b17 	vmov	d7, r2, r3
}
    ec04:	eeb00b47 	vmov.f64	d0, d7
    ec08:	e24bd000 	sub	sp, fp, #0
    ec0c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    ec10:	e12fff1e 	bx	lr
    ec14:	00018bc8 	.word	0x00018bc8

0000ec18 <g_sigOri_getYawComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getYawComplementary_bl()
{
    ec18:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    ec1c:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64;
    ec20:	e59f3014 	ldr	r3, [pc, #20]	; ec3c <g_sigOri_getYawComplementary_bl+0x24>
    ec24:	e1c321d0 	ldrd	r2, [r3, #16]
    ec28:	ec432b17 	vmov	d7, r2, r3
}
    ec2c:	eeb00b47 	vmov.f64	d0, d7
    ec30:	e24bd000 	sub	sp, fp, #0
    ec34:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    ec38:	e12fff1e 	bx	lr
    ec3c:	00018bc8 	.word	0x00018bc8

0000ec40 <g_sigOri_getAnglesKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles g_sigOri_getAnglesKalman_bl()
{
    ec40:	e92d4830 	push	{r4, r5, fp, lr}
    ec44:	e28db00c 	add	fp, sp, #12
    ec48:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_sigOri_arrayOutputAnglesKalman_st;
    ec4c:	e59f3040 	ldr	r3, [pc, #64]	; ec94 <g_sigOri_getAnglesKalman_bl+0x54>
    ec50:	e24bc024 	sub	ip, fp, #36	; 0x24
    ec54:	e1a0e003 	mov	lr, r3
    ec58:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    ec5c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    ec60:	e89e0003 	ldm	lr, {r0, r1}
    ec64:	e88c0003 	stm	ip, {r0, r1}
    ec68:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    ec6c:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    ec70:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    ec74:	ec454b15 	vmov	d5, r4, r5
    ec78:	ec410b16 	vmov	d6, r0, r1
    ec7c:	ec432b17 	vmov	d7, r2, r3
}
    ec80:	eeb00b45 	vmov.f64	d0, d5
    ec84:	eeb01b46 	vmov.f64	d1, d6
    ec88:	eeb02b47 	vmov.f64	d2, d7
    ec8c:	e24bd00c 	sub	sp, fp, #12
    ec90:	e8bd8830 	pop	{r4, r5, fp, pc}
    ec94:	00018b80 	.word	0x00018b80

0000ec98 <g_sigOri_getPitchKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getPitchKalman_bl()
{
    ec98:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    ec9c:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesKalman_st.pitch_f64;
    eca0:	e59f3014 	ldr	r3, [pc, #20]	; ecbc <g_sigOri_getPitchKalman_bl+0x24>
    eca4:	e1c320d8 	ldrd	r2, [r3, #8]
    eca8:	ec432b17 	vmov	d7, r2, r3
}
    ecac:	eeb00b47 	vmov.f64	d0, d7
    ecb0:	e24bd000 	sub	sp, fp, #0
    ecb4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    ecb8:	e12fff1e 	bx	lr
    ecbc:	00018b80 	.word	0x00018b80

0000ecc0 <g_sigOri_getRollKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getRollKalman_bl()
{
    ecc0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    ecc4:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesKalman_st.roll_f64;
    ecc8:	e59f3014 	ldr	r3, [pc, #20]	; ece4 <g_sigOri_getRollKalman_bl+0x24>
    eccc:	e1c320d0 	ldrd	r2, [r3]
    ecd0:	ec432b17 	vmov	d7, r2, r3
}
    ecd4:	eeb00b47 	vmov.f64	d0, d7
    ecd8:	e24bd000 	sub	sp, fp, #0
    ecdc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    ece0:	e12fff1e 	bx	lr
    ece4:	00018b80 	.word	0x00018b80

0000ece8 <g_sigOri_getYawKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getYawKalman_bl()
{
    ece8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    ecec:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesKalman_st.yaw_f64;
    ecf0:	e59f3014 	ldr	r3, [pc, #20]	; ed0c <g_sigOri_getYawKalman_bl+0x24>
    ecf4:	e1c321d0 	ldrd	r2, [r3, #16]
    ecf8:	ec432b17 	vmov	d7, r2, r3
}
    ecfc:	eeb00b47 	vmov.f64	d0, d7
    ed00:	e24bd000 	sub	sp, fp, #0
    ed04:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    ed08:	e12fff1e 	bx	lr
    ed0c:	00018b80 	.word	0x00018b80

0000ed10 <g_sigOri_initImuSensors_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_sigOri_initImuSensors_bl()
{
    ed10:	e92d4800 	push	{fp, lr}
    ed14:	e28db004 	add	fp, sp, #4
	if( g_SigFil_initImuSensors_bl() != 0 )
    ed18:	eb000356 	bl	fa78 <g_SigFil_initImuSensors_bl>
    ed1c:	e1a03000 	mov	r3, r0
    ed20:	e3530000 	cmp	r3, #0
    ed24:	0a000001 	beq	ed30 <g_sigOri_initImuSensors_bl+0x20>
	{return 1;}
    ed28:	e3a03001 	mov	r3, #1
    ed2c:	ea000000 	b	ed34 <g_sigOri_initImuSensors_bl+0x24>
	else
	{return 0;}
    ed30:	e3a03000 	mov	r3, #0
}
    ed34:	e1a00003 	mov	r0, r3
    ed38:	e8bd8800 	pop	{fp, pc}

0000ed3c <g_sigOri_initMatrices_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_sigOri_initMatrices_bl()
{
    ed3c:	e92d4800 	push	{fp, lr}
    ed40:	e28db004 	add	fp, sp, #4
	//initialize Pk Matrix
	if(g_sigMath_matrixEye_bl((double*)m_sigOri_matrixPk_rg9f64,3,3)!=0)
    ed44:	e59f00ac 	ldr	r0, [pc, #172]	; edf8 <g_sigOri_initMatrices_bl+0xbc>
    ed48:	e3a01003 	mov	r1, #3
    ed4c:	e3a02003 	mov	r2, #3
    ed50:	ebffff41 	bl	ea5c <g_sigMath_matrixEye_bl>
    ed54:	e1a03000 	mov	r3, r0
    ed58:	e3530000 	cmp	r3, #0
    ed5c:	0a000001 	beq	ed68 <g_sigOri_initMatrices_bl+0x2c>
	{return 1;}
    ed60:	e3a03001 	mov	r3, #1
    ed64:	ea000021 	b	edf0 <g_sigOri_initMatrices_bl+0xb4>

	//initialize an Identity matrix
	if(g_sigMath_matrixEye_bl((double*)m_sigOri_matrixI_rg9f64,3,3)!=0)
    ed68:	e59f008c 	ldr	r0, [pc, #140]	; edfc <g_sigOri_initMatrices_bl+0xc0>
    ed6c:	e3a01003 	mov	r1, #3
    ed70:	e3a02003 	mov	r2, #3
    ed74:	ebffff38 	bl	ea5c <g_sigMath_matrixEye_bl>
    ed78:	e1a03000 	mov	r3, r0
    ed7c:	e3530000 	cmp	r3, #0
    ed80:	0a000001 	beq	ed8c <g_sigOri_initMatrices_bl+0x50>
	{return 1;}
    ed84:	e3a03001 	mov	r3, #1
    ed88:	ea000018 	b	edf0 <g_sigOri_initMatrices_bl+0xb4>
	m_sigOri_matrixQ_rg9f64[0][0]=0.005;
	m_sigOri_matrixQ_rg9f64[1][1]=0.005;
	m_sigOri_matrixQ_rg9f64[2][2]=0.0001;*/

	//initialize the measurement noise matrix
		m_sigOri_matrixR_rg9f64[0][0]=0.06;
    ed8c:	e59f106c 	ldr	r1, [pc, #108]	; ee00 <g_sigOri_initMatrices_bl+0xc4>
    ed90:	e59f206c 	ldr	r2, [pc, #108]	; ee04 <g_sigOri_initMatrices_bl+0xc8>
    ed94:	e59f306c 	ldr	r3, [pc, #108]	; ee08 <g_sigOri_initMatrices_bl+0xcc>
    ed98:	e1c120f0 	strd	r2, [r1]
		m_sigOri_matrixR_rg9f64[1][1]=0.1;
    ed9c:	e59f105c 	ldr	r1, [pc, #92]	; ee00 <g_sigOri_initMatrices_bl+0xc4>
    eda0:	e59f2064 	ldr	r2, [pc, #100]	; ee0c <g_sigOri_initMatrices_bl+0xd0>
    eda4:	e59f3064 	ldr	r3, [pc, #100]	; ee10 <g_sigOri_initMatrices_bl+0xd4>
    eda8:	e1c122f0 	strd	r2, [r1, #32]
		m_sigOri_matrixR_rg9f64[2][2]=0.07;
    edac:	e59f104c 	ldr	r1, [pc, #76]	; ee00 <g_sigOri_initMatrices_bl+0xc4>
    edb0:	e59f205c 	ldr	r2, [pc, #92]	; ee14 <g_sigOri_initMatrices_bl+0xd8>
    edb4:	e59f305c 	ldr	r3, [pc, #92]	; ee18 <g_sigOri_initMatrices_bl+0xdc>
    edb8:	e1c124f0 	strd	r2, [r1, #64]	; 0x40

		//initialize the process noise matrix
		m_sigOri_matrixQ_rg9f64[0][0]=0.005;
    edbc:	e59f1058 	ldr	r1, [pc, #88]	; ee1c <g_sigOri_initMatrices_bl+0xe0>
    edc0:	e59f2058 	ldr	r2, [pc, #88]	; ee20 <g_sigOri_initMatrices_bl+0xe4>
    edc4:	e59f3058 	ldr	r3, [pc, #88]	; ee24 <g_sigOri_initMatrices_bl+0xe8>
    edc8:	e1c120f0 	strd	r2, [r1]
		m_sigOri_matrixQ_rg9f64[1][1]=0.005;
    edcc:	e59f1048 	ldr	r1, [pc, #72]	; ee1c <g_sigOri_initMatrices_bl+0xe0>
    edd0:	e59f2048 	ldr	r2, [pc, #72]	; ee20 <g_sigOri_initMatrices_bl+0xe4>
    edd4:	e59f3048 	ldr	r3, [pc, #72]	; ee24 <g_sigOri_initMatrices_bl+0xe8>
    edd8:	e1c122f0 	strd	r2, [r1, #32]
		m_sigOri_matrixQ_rg9f64[2][2]=0.005;
    eddc:	e59f1038 	ldr	r1, [pc, #56]	; ee1c <g_sigOri_initMatrices_bl+0xe0>
    ede0:	e59f2038 	ldr	r2, [pc, #56]	; ee20 <g_sigOri_initMatrices_bl+0xe4>
    ede4:	e59f3038 	ldr	r3, [pc, #56]	; ee24 <g_sigOri_initMatrices_bl+0xe8>
    ede8:	e1c124f0 	strd	r2, [r1, #64]	; 0x40


	return 0;
    edec:	e3a03000 	mov	r3, #0
}
    edf0:	e1a00003 	mov	r0, r3
    edf4:	e8bd8800 	pop	{fp, pc}
    edf8:	00018d00 	.word	0x00018d00
    edfc:	00018cb8 	.word	0x00018cb8
    ee00:	00018d48 	.word	0x00018d48
    ee04:	eb851eb8 	.word	0xeb851eb8
    ee08:	3faeb851 	.word	0x3faeb851
    ee0c:	9999999a 	.word	0x9999999a
    ee10:	3fb99999 	.word	0x3fb99999
    ee14:	1eb851ec 	.word	0x1eb851ec
    ee18:	3fb1eb85 	.word	0x3fb1eb85
    ee1c:	00018d90 	.word	0x00018d90
    ee20:	47ae147b 	.word	0x47ae147b
    ee24:	3f747ae1 	.word	0x3f747ae1

0000ee28 <g_sigOri_initBuildReferenceValues_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigOri_initBuildReferenceValues_bl()
{
    ee28:	e92d4800 	push	{fp, lr}
    ee2c:	e28db004 	add	fp, sp, #4
    ee30:	e24dd078 	sub	sp, sp, #120	; 0x78
	double l_barometricValue_f64=0;
    ee34:	e3a02000 	mov	r2, #0
    ee38:	e3a03000 	mov	r3, #0
    ee3c:	e14b20fc 	strd	r2, [fp, #-12]
	double l_GravityValue_f64=0;
    ee40:	e3a02000 	mov	r2, #0
    ee44:	e3a03000 	mov	r3, #0
    ee48:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	double l_Temperature_f64=0;
    ee4c:	e3a02000 	mov	r2, #0
    ee50:	e3a03000 	mov	r3, #0
    ee54:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	int l_countVar_i32=0;
    ee58:	e3a03000 	mov	r3, #0
    ee5c:	e50b3020 	str	r3, [fp, #-32]
	halImu_orientationValues l_imuValues_st;

// create Reference pressure,Gravity and Temperature as mean value over M_NR_OF_VALUES_OFFSET_I32 values
	for(l_countVar_i32=0;l_countVar_i32<M_NR_OF_VALUES_OFFSET_I32;l_countVar_i32++)
    ee60:	e3a03000 	mov	r3, #0
    ee64:	e50b3020 	str	r3, [fp, #-32]
    ee68:	ea000012 	b	eeb8 <g_sigOri_initBuildReferenceValues_bl+0x90>
	{
		g_sigFil_readImuData_bl();
    ee6c:	eb000313 	bl	fac0 <g_sigFil_readImuData_bl>
		l_imuValues_st=g_sigFil_getImuValuesUnfiltered_st();
    ee70:	e24b307c 	sub	r3, fp, #124	; 0x7c
    ee74:	e1a00003 	mov	r0, r3
    ee78:	eb0002a6 	bl	f918 <g_sigFil_getImuValuesUnfiltered_st>
		l_barometricValue_f64+=l_imuValues_st.pressure_f64;
    ee7c:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    ee80:	ed1b6b03 	vldr	d6, [fp, #-12]
    ee84:	ee367b07 	vadd.f64	d7, d6, d7
    ee88:	ed0b7b03 	vstr	d7, [fp, #-12]
		l_GravityValue_f64+=l_imuValues_st.acc.z_f64;
    ee8c:	ed1b7b1b 	vldr	d7, [fp, #-108]	; 0xffffff94
    ee90:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
    ee94:	ee367b07 	vadd.f64	d7, d6, d7
    ee98:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
		l_Temperature_f64+=l_imuValues_st.temperature_f64;
    ee9c:	ed1b7b0d 	vldr	d7, [fp, #-52]	; 0xffffffcc
    eea0:	ed1b6b07 	vldr	d6, [fp, #-28]	; 0xffffffe4
    eea4:	ee367b07 	vadd.f64	d7, d6, d7
    eea8:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4
	double l_Temperature_f64=0;
	int l_countVar_i32=0;
	halImu_orientationValues l_imuValues_st;

// create Reference pressure,Gravity and Temperature as mean value over M_NR_OF_VALUES_OFFSET_I32 values
	for(l_countVar_i32=0;l_countVar_i32<M_NR_OF_VALUES_OFFSET_I32;l_countVar_i32++)
    eeac:	e51b3020 	ldr	r3, [fp, #-32]
    eeb0:	e2833001 	add	r3, r3, #1
    eeb4:	e50b3020 	str	r3, [fp, #-32]
    eeb8:	e51b3020 	ldr	r3, [fp, #-32]
    eebc:	e3530ffa 	cmp	r3, #1000	; 0x3e8
    eec0:	baffffe9 	blt	ee6c <g_sigOri_initBuildReferenceValues_bl+0x44>
		l_imuValues_st=g_sigFil_getImuValuesUnfiltered_st();
		l_barometricValue_f64+=l_imuValues_st.pressure_f64;
		l_GravityValue_f64+=l_imuValues_st.acc.z_f64;
		l_Temperature_f64+=l_imuValues_st.temperature_f64;
	}
	m_sigOri_referencePressure_f64 =l_barometricValue_f64/M_NR_OF_VALUES_OFFSET_I32;
    eec4:	ed1b6b03 	vldr	d6, [fp, #-12]
    eec8:	ed9f7b0e 	vldr	d7, [pc, #56]	; ef08 <g_sigOri_initBuildReferenceValues_bl+0xe0>
    eecc:	ee867b07 	vdiv.f64	d7, d6, d7
    eed0:	e59f3038 	ldr	r3, [pc, #56]	; ef10 <g_sigOri_initBuildReferenceValues_bl+0xe8>
    eed4:	ed837b00 	vstr	d7, [r3]
	m_sigOri_referenceGravity_f64=l_GravityValue_f64/M_NR_OF_VALUES_OFFSET_I32;
    eed8:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
    eedc:	ed9f7b09 	vldr	d7, [pc, #36]	; ef08 <g_sigOri_initBuildReferenceValues_bl+0xe0>
    eee0:	ee867b07 	vdiv.f64	d7, d6, d7
    eee4:	e59f3028 	ldr	r3, [pc, #40]	; ef14 <g_sigOri_initBuildReferenceValues_bl+0xec>
    eee8:	ed837b00 	vstr	d7, [r3]
	m_sigOri_referenceTemperature_f64=l_Temperature_f64/M_NR_OF_VALUES_OFFSET_I32;
    eeec:	ed1b6b07 	vldr	d6, [fp, #-28]	; 0xffffffe4
    eef0:	ed9f7b04 	vldr	d7, [pc, #16]	; ef08 <g_sigOri_initBuildReferenceValues_bl+0xe0>
    eef4:	ee867b07 	vdiv.f64	d7, d6, d7
    eef8:	e59f3018 	ldr	r3, [pc, #24]	; ef18 <g_sigOri_initBuildReferenceValues_bl+0xf0>
    eefc:	ed837b00 	vstr	d7, [r3]
}
    ef00:	e24bd004 	sub	sp, fp, #4
    ef04:	e8bd8800 	pop	{fp, pc}
    ef08:	00000000 	.word	0x00000000
    ef0c:	408f4000 	.word	0x408f4000
    ef10:	00018b28 	.word	0x00018b28
    ef14:	00018b30 	.word	0x00018b30
    ef18:	00018b38 	.word	0x00018b38

0000ef1c <m_sigOri_getImuData_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void m_sigOri_getImuData_bl()
{
    ef1c:	e92d4810 	push	{r4, fp, lr}
    ef20:	e28db008 	add	fp, sp, #8
    ef24:	e24dd05c 	sub	sp, sp, #92	; 0x5c
	g_sigFil_readImuData_bl();
    ef28:	eb0002e4 	bl	fac0 <g_sigFil_readImuData_bl>
	m_sigori_imuValues_st = g_sigFil_getImuValuesUnfiltered_st();
    ef2c:	e59f402c 	ldr	r4, [pc, #44]	; ef60 <m_sigOri_getImuData_bl+0x44>
    ef30:	e24b3064 	sub	r3, fp, #100	; 0x64
    ef34:	e1a00003 	mov	r0, r3
    ef38:	eb000276 	bl	f918 <g_sigFil_getImuValuesUnfiltered_st>
    ef3c:	e1a01004 	mov	r1, r4
    ef40:	e24b2064 	sub	r2, fp, #100	; 0x64
    ef44:	e3a03058 	mov	r3, #88	; 0x58
    ef48:	e1a00001 	mov	r0, r1
    ef4c:	e1a01002 	mov	r1, r2
    ef50:	e1a02003 	mov	r2, r3
    ef54:	ebffe6b3 	bl	8a28 <_init+0x128>
}
    ef58:	e24bd008 	sub	sp, fp, #8
    ef5c:	e8bd8810 	pop	{r4, fp, pc}
    ef60:	00018ac8 	.word	0x00018ac8

0000ef64 <m_sigOri_calcAccMagAngle_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles m_sigOri_calcAccMagAngle_st()
{
    ef64:	e92d4830 	push	{r4, r5, fp, lr}
    ef68:	ed2d8b04 	vpush	{d8-d9}
    ef6c:	e28db01c 	add	fp, sp, #28
    ef70:	e24dd0b0 	sub	sp, sp, #176	; 0xb0
	sigOri_orientationAngles l_angles_f64;
	double l_roll_f64=0;
    ef74:	e3a02000 	mov	r2, #0
    ef78:	e3a03000 	mov	r3, #0
    ef7c:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	double l_pitch_f64=0;
    ef80:	e3a02000 	mov	r2, #0
    ef84:	e3a03000 	mov	r3, #0
    ef88:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
	double l_yaw_f64=0;
    ef8c:	e3a02000 	mov	r2, #0
    ef90:	e3a03000 	mov	r3, #0
    ef94:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	double l_divider_f64=0;
    ef98:	e3a02000 	mov	r2, #0
    ef9c:	e3a03000 	mov	r3, #0
    efa0:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4

	double ll_minX_f64=M_SIGORI_MAG_MINX_F64;
    efa4:	e59f22cc 	ldr	r2, [pc, #716]	; f278 <m_sigOri_calcAccMagAngle_st+0x314>
    efa8:	e59f32cc 	ldr	r3, [pc, #716]	; f27c <m_sigOri_calcAccMagAngle_st+0x318>
    efac:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	double ll_maxX_f64=M_SIGORI_MAG_MAXX_F64;
    efb0:	e59f22c8 	ldr	r2, [pc, #712]	; f280 <m_sigOri_calcAccMagAngle_st+0x31c>
    efb4:	e59f32c8 	ldr	r3, [pc, #712]	; f284 <m_sigOri_calcAccMagAngle_st+0x320>
    efb8:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
	double ll_minY_f64=M_SIGORI_MAG_MINY_F64;
    efbc:	e59f22c4 	ldr	r2, [pc, #708]	; f288 <m_sigOri_calcAccMagAngle_st+0x324>
    efc0:	e59f32c4 	ldr	r3, [pc, #708]	; f28c <m_sigOri_calcAccMagAngle_st+0x328>
    efc4:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac
	double ll_maxY_f64=M_SIGORI_MAG_MAXY_F64;
    efc8:	e59f22c0 	ldr	r2, [pc, #704]	; f290 <m_sigOri_calcAccMagAngle_st+0x32c>
    efcc:	e59f32c0 	ldr	r3, [pc, #704]	; f294 <m_sigOri_calcAccMagAngle_st+0x330>
    efd0:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	double ll_minZ_f64=M_SIGORI_MAG_MINZ_F64;
    efd4:	e59f22bc 	ldr	r2, [pc, #700]	; f298 <m_sigOri_calcAccMagAngle_st+0x334>
    efd8:	e59f32bc 	ldr	r3, [pc, #700]	; f29c <m_sigOri_calcAccMagAngle_st+0x338>
    efdc:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
	double ll_maxZ_f64=M_SIGORI_MAG_MAXZ_F64;
    efe0:	e59f22b8 	ldr	r2, [pc, #696]	; f2a0 <m_sigOri_calcAccMagAngle_st+0x33c>
    efe4:	e59f32b8 	ldr	r3, [pc, #696]	; f2a4 <m_sigOri_calcAccMagAngle_st+0x340>
    efe8:	e14b26fc 	strd	r2, [fp, #-108]	; 0xffffff94

	halAccmag_3dDoubleVector l_mag_st;
	
	l_mag_st.x_f64=(m_sigori_imuValues_st.mag.x_f64-ll_minX_f64)/(ll_maxX_f64-ll_minX_f64)*2-1;
    efec:	e59f32b4 	ldr	r3, [pc, #692]	; f2a8 <m_sigOri_calcAccMagAngle_st+0x344>
    eff0:	ed936b06 	vldr	d6, [r3, #24]
    eff4:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    eff8:	ee366b47 	vsub.f64	d6, d6, d7
    effc:	ed1b5b13 	vldr	d5, [fp, #-76]	; 0xffffffb4
    f000:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    f004:	ee357b47 	vsub.f64	d7, d5, d7
    f008:	ee867b07 	vdiv.f64	d7, d6, d7
    f00c:	ee376b07 	vadd.f64	d6, d7, d7
    f010:	ed9f7b94 	vldr	d7, [pc, #592]	; f268 <m_sigOri_calcAccMagAngle_st+0x304>
    f014:	ee367b47 	vsub.f64	d7, d6, d7
    f018:	ed0b7b2d 	vstr	d7, [fp, #-180]	; 0xffffff4c
	l_mag_st.y_f64=(m_sigori_imuValues_st.mag.y_f64-ll_minY_f64)/(ll_maxY_f64-ll_minY_f64)*2-1;
    f01c:	e59f3284 	ldr	r3, [pc, #644]	; f2a8 <m_sigOri_calcAccMagAngle_st+0x344>
    f020:	ed936b08 	vldr	d6, [r3, #32]
    f024:	ed1b7b15 	vldr	d7, [fp, #-84]	; 0xffffffac
    f028:	ee366b47 	vsub.f64	d6, d6, d7
    f02c:	ed1b5b17 	vldr	d5, [fp, #-92]	; 0xffffffa4
    f030:	ed1b7b15 	vldr	d7, [fp, #-84]	; 0xffffffac
    f034:	ee357b47 	vsub.f64	d7, d5, d7
    f038:	ee867b07 	vdiv.f64	d7, d6, d7
    f03c:	ee376b07 	vadd.f64	d6, d7, d7
    f040:	ed9f7b88 	vldr	d7, [pc, #544]	; f268 <m_sigOri_calcAccMagAngle_st+0x304>
    f044:	ee367b47 	vsub.f64	d7, d6, d7
    f048:	ed0b7b2b 	vstr	d7, [fp, #-172]	; 0xffffff54
	l_mag_st.z_f64=(m_sigori_imuValues_st.mag.z_f64-ll_minZ_f64)/(ll_maxZ_f64-ll_minZ_f64)*2-1;
    f04c:	e59f3254 	ldr	r3, [pc, #596]	; f2a8 <m_sigOri_calcAccMagAngle_st+0x344>
    f050:	ed936b0a 	vldr	d6, [r3, #40]	; 0x28
    f054:	ed1b7b19 	vldr	d7, [fp, #-100]	; 0xffffff9c
    f058:	ee366b47 	vsub.f64	d6, d6, d7
    f05c:	ed1b5b1b 	vldr	d5, [fp, #-108]	; 0xffffff94
    f060:	ed1b7b19 	vldr	d7, [fp, #-100]	; 0xffffff9c
    f064:	ee357b47 	vsub.f64	d7, d5, d7
    f068:	ee867b07 	vdiv.f64	d7, d6, d7
    f06c:	ee376b07 	vadd.f64	d6, d7, d7
    f070:	ed9f7b7c 	vldr	d7, [pc, #496]	; f268 <m_sigOri_calcAccMagAngle_st+0x304>
    f074:	ee367b47 	vsub.f64	d7, d6, d7
    f078:	ed0b7b29 	vstr	d7, [fp, #-164]	; 0xffffff5c

	//calculate roll with accelerometer values
	if(m_sigori_imuValues_st.acc.z_f64!=0)
    f07c:	e59f3224 	ldr	r3, [pc, #548]	; f2a8 <m_sigOri_calcAccMagAngle_st+0x344>
    f080:	ed937b04 	vldr	d7, [r3, #16]
    f084:	eeb57b40 	vcmp.f64	d7, #0.0
    f088:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    f08c:	0a00000c 	beq	f0c4 <m_sigOri_calcAccMagAngle_st+0x160>
	{
		l_roll_f64=atan2(m_sigori_imuValues_st.acc.y_f64,m_sigori_imuValues_st.acc.z_f64);
    f090:	e59f3210 	ldr	r3, [pc, #528]	; f2a8 <m_sigOri_calcAccMagAngle_st+0x344>
    f094:	ed936b02 	vldr	d6, [r3, #8]
    f098:	e59f3208 	ldr	r3, [pc, #520]	; f2a8 <m_sigOri_calcAccMagAngle_st+0x344>
    f09c:	ed937b04 	vldr	d7, [r3, #16]
    f0a0:	eeb00b46 	vmov.f64	d0, d6
    f0a4:	eeb01b47 	vmov.f64	d1, d7
    f0a8:	ebffe66a 	bl	8a58 <_init+0x158>
    f0ac:	ed0b0b09 	vstr	d0, [fp, #-36]	; 0xffffffdc
		l_angles_f64.roll_f64=-l_roll_f64*M_RAD_TO_DEG_F64;
    f0b0:	ed1b7b09 	vldr	d7, [fp, #-36]	; 0xffffffdc
    f0b4:	eeb16b47 	vneg.f64	d6, d7
    f0b8:	ed9f7b6c 	vldr	d7, [pc, #432]	; f270 <m_sigOri_calcAccMagAngle_st+0x30c>
    f0bc:	ee267b07 	vmul.f64	d7, d6, d7
    f0c0:	ed0b7b27 	vstr	d7, [fp, #-156]	; 0xffffff64
	}
	//calculate pitch with accelerometer values
	l_divider_f64=m_sigori_imuValues_st.acc.y_f64*sin(l_roll_f64)+m_sigori_imuValues_st.acc.z_f64*cos(l_roll_f64);
    f0c4:	e59f31dc 	ldr	r3, [pc, #476]	; f2a8 <m_sigOri_calcAccMagAngle_st+0x344>
    f0c8:	ed938b02 	vldr	d8, [r3, #8]
    f0cc:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    f0d0:	ebffe675 	bl	8aac <_init+0x1ac>
    f0d4:	eeb07b40 	vmov.f64	d7, d0
    f0d8:	ee288b07 	vmul.f64	d8, d8, d7
    f0dc:	e59f31c4 	ldr	r3, [pc, #452]	; f2a8 <m_sigOri_calcAccMagAngle_st+0x344>
    f0e0:	ed939b04 	vldr	d9, [r3, #16]
    f0e4:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    f0e8:	ebffe64b 	bl	8a1c <_init+0x11c>
    f0ec:	eeb07b40 	vmov.f64	d7, d0
    f0f0:	ee297b07 	vmul.f64	d7, d9, d7
    f0f4:	ee387b07 	vadd.f64	d7, d8, d7
    f0f8:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	if(l_divider_f64!=0)
    f0fc:	ed1b7b0f 	vldr	d7, [fp, #-60]	; 0xffffffc4
    f100:	eeb57b40 	vcmp.f64	d7, #0.0
    f104:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    f108:	0a00000c 	beq	f140 <m_sigOri_calcAccMagAngle_st+0x1dc>
	{
		l_pitch_f64=atan(-m_sigori_imuValues_st.acc.x_f64/l_divider_f64);
    f10c:	e59f3194 	ldr	r3, [pc, #404]	; f2a8 <m_sigOri_calcAccMagAngle_st+0x344>
    f110:	ed937b00 	vldr	d7, [r3]
    f114:	eeb16b47 	vneg.f64	d6, d7
    f118:	ed1b7b0f 	vldr	d7, [fp, #-60]	; 0xffffffc4
    f11c:	ee867b07 	vdiv.f64	d7, d6, d7
    f120:	eeb00b47 	vmov.f64	d0, d7
    f124:	ebffe627 	bl	89c8 <_init+0xc8>
    f128:	ed0b0b0b 	vstr	d0, [fp, #-44]	; 0xffffffd4
		l_angles_f64.pitch_f64=-l_pitch_f64*M_RAD_TO_DEG_F64;
    f12c:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    f130:	eeb16b47 	vneg.f64	d6, d7
    f134:	ed9f7b4d 	vldr	d7, [pc, #308]	; f270 <m_sigOri_calcAccMagAngle_st+0x30c>
    f138:	ee267b07 	vmul.f64	d7, d6, d7
    f13c:	ed0b7b25 	vstr	d7, [fp, #-148]	; 0xffffff6c
	}

	//calculate yaw and make a tilt compensation for the eCompass
	l_divider_f64= m_sigori_imuValues_st.mag.x_f64*cos(l_pitch_f64)+
    f140:	e59f3160 	ldr	r3, [pc, #352]	; f2a8 <m_sigOri_calcAccMagAngle_st+0x344>
    f144:	ed938b06 	vldr	d8, [r3, #24]
    f148:	ed1b0b0b 	vldr	d0, [fp, #-44]	; 0xffffffd4
    f14c:	ebffe632 	bl	8a1c <_init+0x11c>
    f150:	eeb07b40 	vmov.f64	d7, d0
    f154:	ee288b07 	vmul.f64	d8, d8, d7
					m_sigori_imuValues_st.mag.y_f64*sin(l_pitch_f64)*sin(l_roll_f64)+
    f158:	e59f3148 	ldr	r3, [pc, #328]	; f2a8 <m_sigOri_calcAccMagAngle_st+0x344>
    f15c:	ed939b08 	vldr	d9, [r3, #32]
    f160:	ed1b0b0b 	vldr	d0, [fp, #-44]	; 0xffffffd4
    f164:	ebffe650 	bl	8aac <_init+0x1ac>
    f168:	eeb07b40 	vmov.f64	d7, d0
    f16c:	ee299b07 	vmul.f64	d9, d9, d7
    f170:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    f174:	ebffe64c 	bl	8aac <_init+0x1ac>
    f178:	eeb07b40 	vmov.f64	d7, d0
    f17c:	ee297b07 	vmul.f64	d7, d9, d7
		l_pitch_f64=atan(-m_sigori_imuValues_st.acc.x_f64/l_divider_f64);
		l_angles_f64.pitch_f64=-l_pitch_f64*M_RAD_TO_DEG_F64;
	}

	//calculate yaw and make a tilt compensation for the eCompass
	l_divider_f64= m_sigori_imuValues_st.mag.x_f64*cos(l_pitch_f64)+
    f180:	ee388b07 	vadd.f64	d8, d8, d7
					m_sigori_imuValues_st.mag.y_f64*sin(l_pitch_f64)*sin(l_roll_f64)+
					m_sigori_imuValues_st.mag.z_f64*sin(l_pitch_f64)*cos(l_roll_f64);
    f184:	e59f311c 	ldr	r3, [pc, #284]	; f2a8 <m_sigOri_calcAccMagAngle_st+0x344>
    f188:	ed939b0a 	vldr	d9, [r3, #40]	; 0x28
    f18c:	ed1b0b0b 	vldr	d0, [fp, #-44]	; 0xffffffd4
    f190:	ebffe645 	bl	8aac <_init+0x1ac>
    f194:	eeb07b40 	vmov.f64	d7, d0
    f198:	ee299b07 	vmul.f64	d9, d9, d7
    f19c:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    f1a0:	ebffe61d 	bl	8a1c <_init+0x11c>
    f1a4:	eeb07b40 	vmov.f64	d7, d0
    f1a8:	ee297b07 	vmul.f64	d7, d9, d7
		l_pitch_f64=atan(-m_sigori_imuValues_st.acc.x_f64/l_divider_f64);
		l_angles_f64.pitch_f64=-l_pitch_f64*M_RAD_TO_DEG_F64;
	}

	//calculate yaw and make a tilt compensation for the eCompass
	l_divider_f64= m_sigori_imuValues_st.mag.x_f64*cos(l_pitch_f64)+
    f1ac:	ee387b07 	vadd.f64	d7, d8, d7
    f1b0:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
					m_sigori_imuValues_st.mag.y_f64*sin(l_pitch_f64)*sin(l_roll_f64)+
					m_sigori_imuValues_st.mag.z_f64*sin(l_pitch_f64)*cos(l_roll_f64);
	if(l_divider_f64!=0)
    f1b4:	ed1b7b0f 	vldr	d7, [fp, #-60]	; 0xffffffc4
    f1b8:	eeb57b40 	vcmp.f64	d7, #0.0
    f1bc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    f1c0:	0a000016 	beq	f220 <m_sigOri_calcAccMagAngle_st+0x2bc>
	{
		l_yaw_f64=atan2(-(-m_sigori_imuValues_st.mag.z_f64*sin(l_roll_f64)+m_sigori_imuValues_st.mag.y_f64*cos(l_roll_f64)),
    f1c4:	e59f30dc 	ldr	r3, [pc, #220]	; f2a8 <m_sigOri_calcAccMagAngle_st+0x344>
    f1c8:	ed937b0a 	vldr	d7, [r3, #40]	; 0x28
    f1cc:	eeb18b47 	vneg.f64	d8, d7
    f1d0:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    f1d4:	ebffe634 	bl	8aac <_init+0x1ac>
    f1d8:	eeb07b40 	vmov.f64	d7, d0
    f1dc:	ee288b07 	vmul.f64	d8, d8, d7
    f1e0:	e59f30c0 	ldr	r3, [pc, #192]	; f2a8 <m_sigOri_calcAccMagAngle_st+0x344>
    f1e4:	ed939b08 	vldr	d9, [r3, #32]
    f1e8:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    f1ec:	ebffe60a 	bl	8a1c <_init+0x11c>
    f1f0:	eeb07b40 	vmov.f64	d7, d0
    f1f4:	ee297b07 	vmul.f64	d7, d9, d7
    f1f8:	ee387b07 	vadd.f64	d7, d8, d7
    f1fc:	eeb17b47 	vneg.f64	d7, d7
    f200:	eeb00b47 	vmov.f64	d0, d7
    f204:	ed1b1b0f 	vldr	d1, [fp, #-60]	; 0xffffffc4
    f208:	ebffe612 	bl	8a58 <_init+0x158>
    f20c:	ed0b0b0d 	vstr	d0, [fp, #-52]	; 0xffffffcc
					l_divider_f64);
		l_angles_f64.yaw_f64=l_yaw_f64*M_RAD_TO_DEG_F64;	
    f210:	ed1b6b0d 	vldr	d6, [fp, #-52]	; 0xffffffcc
    f214:	ed9f7b15 	vldr	d7, [pc, #84]	; f270 <m_sigOri_calcAccMagAngle_st+0x30c>
    f218:	ee267b07 	vmul.f64	d7, d6, d7
    f21c:	ed0b7b23 	vstr	d7, [fp, #-140]	; 0xffffff74
			l_yaw_f64=atan2(l_divider_f64,l_mag_st.z_f64*sin(l_pitch_f64)+l_mag_st.x_f64*cos(l_pitch_f64));
			l_angles_f64.yaw_f64=l_yaw_f64*M_RAD_TO_DEG_F64;

		}*/

	return l_angles_f64;
    f220:	e24bc084 	sub	ip, fp, #132	; 0x84
    f224:	e24be09c 	sub	lr, fp, #156	; 0x9c
    f228:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    f22c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    f230:	e89e0003 	ldm	lr, {r0, r1}
    f234:	e88c0003 	stm	ip, {r0, r1}
    f238:	e14b48d4 	ldrd	r4, [fp, #-132]	; 0xffffff7c
    f23c:	e14b07dc 	ldrd	r0, [fp, #-124]	; 0xffffff84
    f240:	e14b27d4 	ldrd	r2, [fp, #-116]	; 0xffffff8c
    f244:	ec454b15 	vmov	d5, r4, r5
    f248:	ec410b16 	vmov	d6, r0, r1
    f24c:	ec432b17 	vmov	d7, r2, r3
}
    f250:	eeb00b45 	vmov.f64	d0, d5
    f254:	eeb01b46 	vmov.f64	d1, d6
    f258:	eeb02b47 	vmov.f64	d2, d7
    f25c:	e24bd01c 	sub	sp, fp, #28
    f260:	ecbd8b04 	vpop	{d8-d9}
    f264:	e8bd8830 	pop	{r4, r5, fp, pc}
    f268:	00000000 	.word	0x00000000
    f26c:	3ff00000 	.word	0x3ff00000
    f270:	b05cc3e8 	.word	0xb05cc3e8
    f274:	404ca5dd 	.word	0x404ca5dd
    f278:	9ba5e354 	.word	0x9ba5e354
    f27c:	c033b0c4 	.word	0xc033b0c4
    f280:	eecbfb16 	.word	0xeecbfb16
    f284:	4034c3c9 	.word	0x4034c3c9
    f288:	3fe5c91d 	.word	0x3fe5c91d
    f28c:	c030bfa4 	.word	0xc030bfa4
    f290:	b98c7e28 	.word	0xb98c7e28
    f294:	4035696b 	.word	0x4035696b
    f298:	a0902de0 	.word	0xa0902de0
    f29c:	c02e71f8 	.word	0xc02e71f8
    f2a0:	c5d63886 	.word	0xc5d63886
    f2a4:	4035b46d 	.word	0x4035b46d
    f2a8:	00018ac8 	.word	0x00018ac8

0000f2ac <m_sigOri_calcGyroAnglePerStep_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles m_sigOri_calcGyroAnglePerStep_st()
{
    f2ac:	e92d4830 	push	{r4, r5, fp, lr}
    f2b0:	e28db00c 	add	fp, sp, #12
    f2b4:	e24dd060 	sub	sp, sp, #96	; 0x60
	sigOri_orientationAngles l_angles_f64;
	
	long int time_difference;
	struct timeval gettime_now;
	double l_timestep_f64=0;
    f2b8:	e3a02000 	mov	r2, #0
    f2bc:	e3a03000 	mov	r3, #0
    f2c0:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	gettimeofday(&gettime_now,(void *)0);
    f2c4:	e24b3054 	sub	r3, fp, #84	; 0x54
    f2c8:	e1a00003 	mov	r0, r3
    f2cc:	e3a01000 	mov	r1, #0
    f2d0:	ebffe5bf 	bl	89d4 <_init+0xd4>

	time_difference=gettime_now.tv_usec-gettime_old.tv_usec;
    f2d4:	e51b2050 	ldr	r2, [fp, #-80]	; 0x50
    f2d8:	e59f30e0 	ldr	r3, [pc, #224]	; f3c0 <m_sigOri_calcGyroAnglePerStep_st+0x114>
    f2dc:	e5933004 	ldr	r3, [r3, #4]
    f2e0:	e0633002 	rsb	r3, r3, r2
    f2e4:	e50b3010 	str	r3, [fp, #-16]
	if(time_difference<0)
    f2e8:	e51b3010 	ldr	r3, [fp, #-16]
    f2ec:	e3530000 	cmp	r3, #0
    f2f0:	aa000006 	bge	f310 <m_sigOri_calcGyroAnglePerStep_st+0x64>
	{
		time_difference=1000000-gettime_old.tv_usec+gettime_now.tv_usec;
    f2f4:	e59f30c4 	ldr	r3, [pc, #196]	; f3c0 <m_sigOri_calcGyroAnglePerStep_st+0x114>
    f2f8:	e5933004 	ldr	r3, [r3, #4]
    f2fc:	e263393d 	rsb	r3, r3, #999424	; 0xf4000
    f300:	e2833d09 	add	r3, r3, #576	; 0x240
    f304:	e51b2050 	ldr	r2, [fp, #-80]	; 0x50
    f308:	e0833002 	add	r3, r3, r2
    f30c:	e50b3010 	str	r3, [fp, #-16]
	}

	l_timestep_f64=(double)(time_difference)*0.000001;
    f310:	e51b3010 	ldr	r3, [fp, #-16]
    f314:	ee073a90 	vmov	s15, r3
    f318:	eeb86be7 	vcvt.f64.s32	d6, s15
    f31c:	ed9f7b25 	vldr	d7, [pc, #148]	; f3b8 <m_sigOri_calcGyroAnglePerStep_st+0x10c>
    f320:	ee267b07 	vmul.f64	d7, d6, d7
    f324:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4

	l_angles_f64.roll_f64=m_sigori_imuValues_st.gyro.l_roll_f64*l_timestep_f64;
    f328:	e59f3094 	ldr	r3, [pc, #148]	; f3c4 <m_sigOri_calcGyroAnglePerStep_st+0x118>
    f32c:	ed936b10 	vldr	d6, [r3, #64]	; 0x40
    f330:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
    f334:	ee267b07 	vmul.f64	d7, d6, d7
    f338:	ed0b7b13 	vstr	d7, [fp, #-76]	; 0xffffffb4
	l_angles_f64.pitch_f64=m_sigori_imuValues_st.gyro.l_pitch_f64*l_timestep_f64;
    f33c:	e59f3080 	ldr	r3, [pc, #128]	; f3c4 <m_sigOri_calcGyroAnglePerStep_st+0x118>
    f340:	ed936b0e 	vldr	d6, [r3, #56]	; 0x38
    f344:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
    f348:	ee267b07 	vmul.f64	d7, d6, d7
    f34c:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc
	l_angles_f64.yaw_f64=m_sigori_imuValues_st.gyro.l_yaw_f64*l_timestep_f64;
    f350:	e59f306c 	ldr	r3, [pc, #108]	; f3c4 <m_sigOri_calcGyroAnglePerStep_st+0x118>
    f354:	ed936b0c 	vldr	d6, [r3, #48]	; 0x30
    f358:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
    f35c:	ee267b07 	vmul.f64	d7, d6, d7
    f360:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	gettimeofday(&gettime_old,(void *)0);
    f364:	e59f0054 	ldr	r0, [pc, #84]	; f3c0 <m_sigOri_calcGyroAnglePerStep_st+0x114>
    f368:	e3a01000 	mov	r1, #0
    f36c:	ebffe598 	bl	89d4 <_init+0xd4>

	return l_angles_f64;
    f370:	e24bc034 	sub	ip, fp, #52	; 0x34
    f374:	e24be04c 	sub	lr, fp, #76	; 0x4c
    f378:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    f37c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    f380:	e89e0003 	ldm	lr, {r0, r1}
    f384:	e88c0003 	stm	ip, {r0, r1}
    f388:	e14b43d4 	ldrd	r4, [fp, #-52]	; 0xffffffcc
    f38c:	e14b02dc 	ldrd	r0, [fp, #-44]	; 0xffffffd4
    f390:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
    f394:	ec454b15 	vmov	d5, r4, r5
    f398:	ec410b16 	vmov	d6, r0, r1
    f39c:	ec432b17 	vmov	d7, r2, r3
}
    f3a0:	eeb00b45 	vmov.f64	d0, d5
    f3a4:	eeb01b46 	vmov.f64	d1, d6
    f3a8:	eeb02b47 	vmov.f64	d2, d7
    f3ac:	e24bd00c 	sub	sp, fp, #12
    f3b0:	e8bd8830 	pop	{r4, r5, fp, pc}
    f3b4:	e1a00000 	nop			; (mov r0, r0)
    f3b8:	a0b5ed8d 	.word	0xa0b5ed8d
    f3bc:	3eb0c6f7 	.word	0x3eb0c6f7
    f3c0:	00018e68 	.word	0x00018e68
    f3c4:	00018ac8 	.word	0x00018ac8

0000f3c8 <m_sigOri_calcBarometricHeight_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void m_sigOri_calcBarometricHeight_st()
{
    f3c8:	e92d4800 	push	{fp, lr}
    f3cc:	ed2d8b02 	vpush	{d8}
    f3d0:	e28db00c 	add	fp, sp, #12
    f3d4:	e24dd010 	sub	sp, sp, #16
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
    f3d8:	e59f2090 	ldr	r2, [pc, #144]	; f470 <m_sigOri_calcBarometricHeight_st+0xa8>
    f3dc:	e59f3090 	ldr	r3, [pc, #144]	; f474 <m_sigOri_calcBarometricHeight_st+0xac>
    f3e0:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	double l_Deg2Kelvin_f64=273.15;
    f3e4:	e59f208c 	ldr	r2, [pc, #140]	; f478 <m_sigOri_calcBarometricHeight_st+0xb0>
    f3e8:	e59f308c 	ldr	r3, [pc, #140]	; f47c <m_sigOri_calcBarometricHeight_st+0xb4>
    f3ec:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
    f3f0:	e59f3088 	ldr	r3, [pc, #136]	; f480 <m_sigOri_calcBarometricHeight_st+0xb8>
    f3f4:	ed937b00 	vldr	d7, [r3]
    f3f8:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
    f3fc:	ee866b07 	vdiv.f64	d6, d6, d7
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
    f400:	e59f307c 	ldr	r3, [pc, #124]	; f484 <m_sigOri_calcBarometricHeight_st+0xbc>
    f404:	ed935b12 	vldr	d5, [r3, #72]	; 0x48
    f408:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
    f40c:	ee355b07 	vadd.f64	d5, d5, d7
    f410:	e59f3070 	ldr	r3, [pc, #112]	; f488 <m_sigOri_calcBarometricHeight_st+0xc0>
    f414:	ed937b00 	vldr	d7, [r3]
    f418:	ee355b07 	vadd.f64	d5, d5, d7
    f41c:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
    f420:	ee355b07 	vadd.f64	d5, d5, d7
    f424:	ed9f7b0f 	vldr	d7, [pc, #60]	; f468 <m_sigOri_calcBarometricHeight_st+0xa0>
    f428:	ee857b07 	vdiv.f64	d7, d5, d7
void m_sigOri_calcBarometricHeight_st()
{
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
	double l_Deg2Kelvin_f64=273.15;

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
    f42c:	ee268b07 	vmul.f64	d8, d6, d7
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
			log(m_sigOri_referencePressure_f64/m_sigori_imuValues_st.pressure_f64);
    f430:	e59f3054 	ldr	r3, [pc, #84]	; f48c <m_sigOri_calcBarometricHeight_st+0xc4>
    f434:	ed936b00 	vldr	d6, [r3]
    f438:	e59f3044 	ldr	r3, [pc, #68]	; f484 <m_sigOri_calcBarometricHeight_st+0xbc>
    f43c:	ed937b14 	vldr	d7, [r3, #80]	; 0x50
    f440:	ee867b07 	vdiv.f64	d7, d6, d7
    f444:	eeb00b47 	vmov.f64	d0, d7
    f448:	ebffe58e 	bl	8a88 <_init+0x188>
    f44c:	eeb07b40 	vmov.f64	d7, d0
{
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
	double l_Deg2Kelvin_f64=273.15;

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
    f450:	ee287b07 	vmul.f64	d7, d8, d7
void m_sigOri_calcBarometricHeight_st()
{
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
	double l_Deg2Kelvin_f64=273.15;

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
    f454:	e59f3034 	ldr	r3, [pc, #52]	; f490 <m_sigOri_calcBarometricHeight_st+0xc8>
    f458:	ed837b00 	vstr	d7, [r3]
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
			log(m_sigOri_referencePressure_f64/m_sigori_imuValues_st.pressure_f64);
}
    f45c:	e24bd00c 	sub	sp, fp, #12
    f460:	ecbd8b02 	vpop	{d8}
    f464:	e8bd8800 	pop	{fp, pc}
    f468:	00000000 	.word	0x00000000
    f46c:	40000000 	.word	0x40000000
    f470:	cccccccd 	.word	0xcccccccd
    f474:	4071f0cc 	.word	0x4071f0cc
    f478:	66666666 	.word	0x66666666
    f47c:	40711266 	.word	0x40711266
    f480:	00018b30 	.word	0x00018b30
    f484:	00018ac8 	.word	0x00018ac8
    f488:	00018b38 	.word	0x00018b38
    f48c:	00018b28 	.word	0x00018b28
    f490:	00018b20 	.word	0x00018b20

0000f494 <g_sigOri_calcKalmanOrientation_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigOri_calcKalmanOrientation_bl()
{
    f494:	e92d4800 	push	{fp, lr}
    f498:	e28db004 	add	fp, sp, #4
    f49c:	e24dd0e8 	sub	sp, sp, #232	; 0xe8
	double l_matrixTemp_rg9f64[M_SIGORI_SIZEOFARRAY_UI8][M_SIGORI_SIZEOFARRAY_UI8];
	double l_matrixTemp2_rg9f64[M_SIGORI_SIZEOFARRAY_UI8][M_SIGORI_SIZEOFARRAY_UI8];
	double l_matrixInnovation_rg9f64[M_SIGORI_SIZEOFARRAY_UI8][M_SIGORI_SIZEOFARRAY_UI8];

	//read new data from the IMU
	m_sigOri_getImuData_bl();
    f4a0:	ebfffe9d 	bl	ef1c <m_sigOri_getImuData_bl>

	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesKalman_st=m_sigOri_calcAccMagAngle_st();
    f4a4:	ebfffeae 	bl	ef64 <m_sigOri_calcAccMagAngle_st>
    f4a8:	eeb05b40 	vmov.f64	d5, d0
    f4ac:	eeb06b41 	vmov.f64	d6, d1
    f4b0:	eeb07b42 	vmov.f64	d7, d2
    f4b4:	e59f3314 	ldr	r3, [pc, #788]	; f7d0 <g_sigOri_calcKalmanOrientation_bl+0x33c>
    f4b8:	ed835b00 	vstr	d5, [r3]
    f4bc:	ed836b02 	vstr	d6, [r3, #8]
    f4c0:	ed837b04 	vstr	d7, [r3, #16]
	m_sigOri_arrayGyroAnglesKalman_st=m_sigOri_calcGyroAnglePerStep_st();
    f4c4:	ebffff78 	bl	f2ac <m_sigOri_calcGyroAnglePerStep_st>
    f4c8:	eeb05b40 	vmov.f64	d5, d0
    f4cc:	eeb06b41 	vmov.f64	d6, d1
    f4d0:	eeb07b42 	vmov.f64	d7, d2
    f4d4:	e59f32f8 	ldr	r3, [pc, #760]	; f7d4 <g_sigOri_calcKalmanOrientation_bl+0x340>
    f4d8:	ed835b00 	vstr	d5, [r3]
    f4dc:	ed836b02 	vstr	d6, [r3, #8]
    f4e0:	ed837b04 	vstr	d7, [r3, #16]

	//set new calculated angles from the sensors in the matrices
	m_sigOri_matrixXnew_rg9f64[0][0]=m_sigOri_arrayAccMagAnglesKalman_st.roll_f64;
    f4e4:	e59f32e4 	ldr	r3, [pc, #740]	; f7d0 <g_sigOri_calcKalmanOrientation_bl+0x33c>
    f4e8:	e1c320d0 	ldrd	r2, [r3]
    f4ec:	e59f12e4 	ldr	r1, [pc, #740]	; f7d8 <g_sigOri_calcKalmanOrientation_bl+0x344>
    f4f0:	e1c120f0 	strd	r2, [r1]
	m_sigOri_matrixXnew_rg9f64[1][1]=m_sigOri_arrayAccMagAnglesKalman_st.pitch_f64;
    f4f4:	e59f32d4 	ldr	r3, [pc, #724]	; f7d0 <g_sigOri_calcKalmanOrientation_bl+0x33c>
    f4f8:	e1c320d8 	ldrd	r2, [r3, #8]
    f4fc:	e59f12d4 	ldr	r1, [pc, #724]	; f7d8 <g_sigOri_calcKalmanOrientation_bl+0x344>
    f500:	e1c122f0 	strd	r2, [r1, #32]
	m_sigOri_matrixXnew_rg9f64[2][2]=m_sigOri_arrayAccMagAnglesKalman_st.yaw_f64;
    f504:	e59f32c4 	ldr	r3, [pc, #708]	; f7d0 <g_sigOri_calcKalmanOrientation_bl+0x33c>
    f508:	e1c321d0 	ldrd	r2, [r3, #16]
    f50c:	e59f12c4 	ldr	r1, [pc, #708]	; f7d8 <g_sigOri_calcKalmanOrientation_bl+0x344>
    f510:	e1c124f0 	strd	r2, [r1, #64]	; 0x40

	m_sigOri_matrixUk_rg9f64[0][0]=m_sigOri_arrayGyroAnglesKalman_st.roll_f64;
    f514:	e59f32b8 	ldr	r3, [pc, #696]	; f7d4 <g_sigOri_calcKalmanOrientation_bl+0x340>
    f518:	e1c320d0 	ldrd	r2, [r3]
    f51c:	e59f12b8 	ldr	r1, [pc, #696]	; f7dc <g_sigOri_calcKalmanOrientation_bl+0x348>
    f520:	e1c120f0 	strd	r2, [r1]
	m_sigOri_matrixUk_rg9f64[1][1]=m_sigOri_arrayGyroAnglesKalman_st.pitch_f64;
    f524:	e59f32a8 	ldr	r3, [pc, #680]	; f7d4 <g_sigOri_calcKalmanOrientation_bl+0x340>
    f528:	e1c320d8 	ldrd	r2, [r3, #8]
    f52c:	e59f12a8 	ldr	r1, [pc, #680]	; f7dc <g_sigOri_calcKalmanOrientation_bl+0x348>
    f530:	e1c122f0 	strd	r2, [r1, #32]
	m_sigOri_matrixUk_rg9f64[2][2]=m_sigOri_arrayGyroAnglesKalman_st.yaw_f64;
    f534:	e59f3298 	ldr	r3, [pc, #664]	; f7d4 <g_sigOri_calcKalmanOrientation_bl+0x340>
    f538:	e1c321d0 	ldrd	r2, [r3, #16]
    f53c:	e59f1298 	ldr	r1, [pc, #664]	; f7dc <g_sigOri_calcKalmanOrientation_bl+0x348>
    f540:	e1c124f0 	strd	r2, [r1, #64]	; 0x40

//PREDICTION
	//state estimation (prediction)
	g_sigMath_matrixAddition_bl((double*) l_matrixTemp_rg9f64,
    f544:	e24b304c 	sub	r3, fp, #76	; 0x4c
    f548:	e59f228c 	ldr	r2, [pc, #652]	; f7dc <g_sigOri_calcKalmanOrientation_bl+0x348>
    f54c:	e58d2000 	str	r2, [sp]
    f550:	e3a02003 	mov	r2, #3
    f554:	e58d2004 	str	r2, [sp, #4]
    f558:	e3a02003 	mov	r2, #3
    f55c:	e58d2008 	str	r2, [sp, #8]
    f560:	e1a00003 	mov	r0, r3
    f564:	e59f1274 	ldr	r1, [pc, #628]	; f7e0 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    f568:	e3a02003 	mov	r2, #3
    f56c:	e3a03003 	mov	r3, #3
    f570:	ebfff9f4 	bl	dd48 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixXk_rg9f64, 3,3, 
		(double*) m_sigOri_matrixUk_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixXk_rg9f64,3,3,
    f574:	e24b304c 	sub	r3, fp, #76	; 0x4c
    f578:	e3a02003 	mov	r2, #3
    f57c:	e58d2000 	str	r2, [sp]
    f580:	e3a02003 	mov	r2, #3
    f584:	e58d2004 	str	r2, [sp, #4]
    f588:	e59f0250 	ldr	r0, [pc, #592]	; f7e0 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    f58c:	e3a01003 	mov	r1, #3
    f590:	e3a02003 	mov	r2, #3
    f594:	ebfffcc4 	bl	e8ac <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp_rg9f64,3,3);


	//covariance estimation (prediction)
	g_sigMath_matrixAddition_bl((double*) l_matrixTemp_rg9f64,
    f598:	e24b304c 	sub	r3, fp, #76	; 0x4c
    f59c:	e59f2240 	ldr	r2, [pc, #576]	; f7e4 <g_sigOri_calcKalmanOrientation_bl+0x350>
    f5a0:	e58d2000 	str	r2, [sp]
    f5a4:	e3a02003 	mov	r2, #3
    f5a8:	e58d2004 	str	r2, [sp, #4]
    f5ac:	e3a02003 	mov	r2, #3
    f5b0:	e58d2008 	str	r2, [sp, #8]
    f5b4:	e1a00003 	mov	r0, r3
    f5b8:	e59f1228 	ldr	r1, [pc, #552]	; f7e8 <g_sigOri_calcKalmanOrientation_bl+0x354>
    f5bc:	e3a02003 	mov	r2, #3
    f5c0:	e3a03003 	mov	r3, #3
    f5c4:	ebfff9df 	bl	dd48 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixPk_rg9f64, 3,3, 
		(double*) m_sigOri_matrixQ_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixPk_rg9f64,3,3,
    f5c8:	e24b304c 	sub	r3, fp, #76	; 0x4c
    f5cc:	e3a02003 	mov	r2, #3
    f5d0:	e58d2000 	str	r2, [sp]
    f5d4:	e3a02003 	mov	r2, #3
    f5d8:	e58d2004 	str	r2, [sp, #4]
    f5dc:	e59f0204 	ldr	r0, [pc, #516]	; f7e8 <g_sigOri_calcKalmanOrientation_bl+0x354>
    f5e0:	e3a01003 	mov	r1, #3
    f5e4:	e3a02003 	mov	r2, #3
    f5e8:	ebfffcaf 	bl	e8ac <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp_rg9f64,3,3);

//UPDATE
	//Innovation (update)
	g_sigMath_matrixSubtraktion_bl((double*) l_matrixInnovation_rg9f64,
    f5ec:	e24b30dc 	sub	r3, fp, #220	; 0xdc
    f5f0:	e59f21e8 	ldr	r2, [pc, #488]	; f7e0 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    f5f4:	e58d2000 	str	r2, [sp]
    f5f8:	e3a02003 	mov	r2, #3
    f5fc:	e58d2004 	str	r2, [sp, #4]
    f600:	e3a02003 	mov	r2, #3
    f604:	e58d2008 	str	r2, [sp, #8]
    f608:	e1a00003 	mov	r0, r3
    f60c:	e59f11c4 	ldr	r1, [pc, #452]	; f7d8 <g_sigOri_calcKalmanOrientation_bl+0x344>
    f610:	e3a02003 	mov	r2, #3
    f614:	e3a03003 	mov	r3, #3
    f618:	ebfffa15 	bl	de74 <g_sigMath_matrixSubtraktion_bl>
		(double*) m_sigOri_matrixXnew_rg9f64,3,3, 
		(double*) m_sigOri_matrixXk_rg9f64,3,3);

	//Innovation covariance (update)
	g_sigMath_matrixAddition_bl((double*) m_sigOri_matrixS_rg9f64,
    f61c:	e59f31c8 	ldr	r3, [pc, #456]	; f7ec <g_sigOri_calcKalmanOrientation_bl+0x358>
    f620:	e58d3000 	str	r3, [sp]
    f624:	e3a03003 	mov	r3, #3
    f628:	e58d3004 	str	r3, [sp, #4]
    f62c:	e3a03003 	mov	r3, #3
    f630:	e58d3008 	str	r3, [sp, #8]
    f634:	e59f01b4 	ldr	r0, [pc, #436]	; f7f0 <g_sigOri_calcKalmanOrientation_bl+0x35c>
    f638:	e59f11a8 	ldr	r1, [pc, #424]	; f7e8 <g_sigOri_calcKalmanOrientation_bl+0x354>
    f63c:	e3a02003 	mov	r2, #3
    f640:	e3a03003 	mov	r3, #3
    f644:	ebfff9bf 	bl	dd48 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixPk_rg9f64, 3,3, 
		(double*) m_sigOri_matrixR_rg9f64,3,3);

	//Kalman Gain calculation (update)
	g_sigMath_matrixInverse_bl((double*) l_matrixTemp_rg9f64,
    f648:	e24b304c 	sub	r3, fp, #76	; 0x4c
    f64c:	e1a00003 	mov	r0, r3
    f650:	e59f1198 	ldr	r1, [pc, #408]	; f7f0 <g_sigOri_calcKalmanOrientation_bl+0x35c>
    f654:	e3a02003 	mov	r2, #3
    f658:	e3a03003 	mov	r3, #3
    f65c:	ebfffa84 	bl	e074 <g_sigMath_matrixInverse_bl>
		(double*) m_sigOri_matrixS_rg9f64,3,3);
	g_sigMath_matrixMultiplikation_bl(
    f660:	e24b304c 	sub	r3, fp, #76	; 0x4c
    f664:	e58d3000 	str	r3, [sp]
    f668:	e3a03003 	mov	r3, #3
    f66c:	e58d3004 	str	r3, [sp, #4]
    f670:	e3a03003 	mov	r3, #3
    f674:	e58d3008 	str	r3, [sp, #8]
    f678:	e59f0174 	ldr	r0, [pc, #372]	; f7f4 <g_sigOri_calcKalmanOrientation_bl+0x360>
    f67c:	e59f1164 	ldr	r1, [pc, #356]	; f7e8 <g_sigOri_calcKalmanOrientation_bl+0x354>
    f680:	e3a02003 	mov	r2, #3
    f684:	e3a03003 	mov	r3, #3
    f688:	ebfff951 	bl	dbd4 <g_sigMath_matrixMultiplikation_bl>
		(double*) m_sigOri_matrixK_rg9f64, 
		(double*) m_sigOri_matrixPk_rg9f64,3,3,
		(double*) l_matrixTemp_rg9f64,3,3);

	//State estimation (update)
	g_sigMath_matrixMultiplikation_bl(
    f68c:	e24b304c 	sub	r3, fp, #76	; 0x4c
    f690:	e24b20dc 	sub	r2, fp, #220	; 0xdc
    f694:	e58d2000 	str	r2, [sp]
    f698:	e3a02003 	mov	r2, #3
    f69c:	e58d2004 	str	r2, [sp, #4]
    f6a0:	e3a02003 	mov	r2, #3
    f6a4:	e58d2008 	str	r2, [sp, #8]
    f6a8:	e1a00003 	mov	r0, r3
    f6ac:	e59f1140 	ldr	r1, [pc, #320]	; f7f4 <g_sigOri_calcKalmanOrientation_bl+0x360>
    f6b0:	e3a02003 	mov	r2, #3
    f6b4:	e3a03003 	mov	r3, #3
    f6b8:	ebfff945 	bl	dbd4 <g_sigMath_matrixMultiplikation_bl>
		(double*) l_matrixTemp_rg9f64, 
		(double*) m_sigOri_matrixK_rg9f64,3,3,
		(double*) l_matrixInnovation_rg9f64,3,3);
	g_sigMath_matrixAddition_bl((double*) l_matrixTemp2_rg9f64,
    f6bc:	e24b3094 	sub	r3, fp, #148	; 0x94
    f6c0:	e24b204c 	sub	r2, fp, #76	; 0x4c
    f6c4:	e58d2000 	str	r2, [sp]
    f6c8:	e3a02003 	mov	r2, #3
    f6cc:	e58d2004 	str	r2, [sp, #4]
    f6d0:	e3a02003 	mov	r2, #3
    f6d4:	e58d2008 	str	r2, [sp, #8]
    f6d8:	e1a00003 	mov	r0, r3
    f6dc:	e59f10fc 	ldr	r1, [pc, #252]	; f7e0 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    f6e0:	e3a02003 	mov	r2, #3
    f6e4:	e3a03003 	mov	r3, #3
    f6e8:	ebfff996 	bl	dd48 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixXk_rg9f64, 3,3, 
		(double*) l_matrixTemp_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixXk_rg9f64,3,3,
    f6ec:	e24b3094 	sub	r3, fp, #148	; 0x94
    f6f0:	e3a02003 	mov	r2, #3
    f6f4:	e58d2000 	str	r2, [sp]
    f6f8:	e3a02003 	mov	r2, #3
    f6fc:	e58d2004 	str	r2, [sp, #4]
    f700:	e59f00d8 	ldr	r0, [pc, #216]	; f7e0 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    f704:	e3a01003 	mov	r1, #3
    f708:	e3a02003 	mov	r2, #3
    f70c:	ebfffc66 	bl	e8ac <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp2_rg9f64,3,3);

	//Covariance estimation (update)
	g_sigMath_matrixSubtraktion_bl((double*) l_matrixTemp_rg9f64,
    f710:	e24b304c 	sub	r3, fp, #76	; 0x4c
    f714:	e59f20d8 	ldr	r2, [pc, #216]	; f7f4 <g_sigOri_calcKalmanOrientation_bl+0x360>
    f718:	e58d2000 	str	r2, [sp]
    f71c:	e3a02003 	mov	r2, #3
    f720:	e58d2004 	str	r2, [sp, #4]
    f724:	e3a02003 	mov	r2, #3
    f728:	e58d2008 	str	r2, [sp, #8]
    f72c:	e1a00003 	mov	r0, r3
    f730:	e59f10c0 	ldr	r1, [pc, #192]	; f7f8 <g_sigOri_calcKalmanOrientation_bl+0x364>
    f734:	e3a02003 	mov	r2, #3
    f738:	e3a03003 	mov	r3, #3
    f73c:	ebfff9cc 	bl	de74 <g_sigMath_matrixSubtraktion_bl>
		(double*) m_sigOri_matrixI_rg9f64,3,3, 
		(double*) m_sigOri_matrixK_rg9f64,3,3);
	g_sigMath_matrixMultiplikation_bl(
    f740:	e24b2094 	sub	r2, fp, #148	; 0x94
    f744:	e24b304c 	sub	r3, fp, #76	; 0x4c
    f748:	e59f1098 	ldr	r1, [pc, #152]	; f7e8 <g_sigOri_calcKalmanOrientation_bl+0x354>
    f74c:	e58d1000 	str	r1, [sp]
    f750:	e3a01003 	mov	r1, #3
    f754:	e58d1004 	str	r1, [sp, #4]
    f758:	e3a01003 	mov	r1, #3
    f75c:	e58d1008 	str	r1, [sp, #8]
    f760:	e1a00002 	mov	r0, r2
    f764:	e1a01003 	mov	r1, r3
    f768:	e3a02003 	mov	r2, #3
    f76c:	e3a03003 	mov	r3, #3
    f770:	ebfff917 	bl	dbd4 <g_sigMath_matrixMultiplikation_bl>
		(double*) l_matrixTemp2_rg9f64, 
		(double*) l_matrixTemp_rg9f64,3,3,
		(double*) m_sigOri_matrixPk_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixPk_rg9f64,3,3,
    f774:	e24b3094 	sub	r3, fp, #148	; 0x94
    f778:	e3a02003 	mov	r2, #3
    f77c:	e58d2000 	str	r2, [sp]
    f780:	e3a02003 	mov	r2, #3
    f784:	e58d2004 	str	r2, [sp, #4]
    f788:	e59f0058 	ldr	r0, [pc, #88]	; f7e8 <g_sigOri_calcKalmanOrientation_bl+0x354>
    f78c:	e3a01003 	mov	r1, #3
    f790:	e3a02003 	mov	r2, #3
    f794:	ebfffc44 	bl	e8ac <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp2_rg9f64,3,3);

//set calculate within this module global
	m_sigOri_arrayOutputAnglesKalman_st.roll_f64=m_sigOri_matrixXk_rg9f64[0][0];
    f798:	e59f3040 	ldr	r3, [pc, #64]	; f7e0 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    f79c:	e1c320d0 	ldrd	r2, [r3]
    f7a0:	e59f1054 	ldr	r1, [pc, #84]	; f7fc <g_sigOri_calcKalmanOrientation_bl+0x368>
    f7a4:	e1c120f0 	strd	r2, [r1]
	m_sigOri_arrayOutputAnglesKalman_st.pitch_f64=m_sigOri_matrixXk_rg9f64[1][1];
    f7a8:	e59f3030 	ldr	r3, [pc, #48]	; f7e0 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    f7ac:	e1c322d0 	ldrd	r2, [r3, #32]
    f7b0:	e59f1044 	ldr	r1, [pc, #68]	; f7fc <g_sigOri_calcKalmanOrientation_bl+0x368>
    f7b4:	e1c120f8 	strd	r2, [r1, #8]
	m_sigOri_arrayOutputAnglesKalman_st.yaw_f64=m_sigOri_matrixXk_rg9f64[2][2];
    f7b8:	e59f3020 	ldr	r3, [pc, #32]	; f7e0 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    f7bc:	e1c324d0 	ldrd	r2, [r3, #64]	; 0x40
    f7c0:	e59f1034 	ldr	r1, [pc, #52]	; f7fc <g_sigOri_calcKalmanOrientation_bl+0x368>
    f7c4:	e1c121f0 	strd	r2, [r1, #16]
}
    f7c8:	e24bd004 	sub	sp, fp, #4
    f7cc:	e8bd8800 	pop	{fp, pc}
    f7d0:	00018b50 	.word	0x00018b50
    f7d4:	00018b68 	.word	0x00018b68
    f7d8:	00018c28 	.word	0x00018c28
    f7dc:	00018c70 	.word	0x00018c70
    f7e0:	00018be0 	.word	0x00018be0
    f7e4:	00018d90 	.word	0x00018d90
    f7e8:	00018d00 	.word	0x00018d00
    f7ec:	00018d48 	.word	0x00018d48
    f7f0:	00018dd8 	.word	0x00018dd8
    f7f4:	00018e20 	.word	0x00018e20
    f7f8:	00018cb8 	.word	0x00018cb8
    f7fc:	00018b80 	.word	0x00018b80

0000f800 <g_sigOri_calcComplementaryOrientation_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigOri_calcComplementaryOrientation_bl()
{
    f800:	e92d4800 	push	{fp, lr}
    f804:	e28db004 	add	fp, sp, #4
	//read new data from the IMU
	m_sigOri_getImuData_bl();
    f808:	ebfffdc3 	bl	ef1c <m_sigOri_getImuData_bl>
	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesComplementary_st=m_sigOri_calcAccMagAngle_st();
    f80c:	ebfffdd4 	bl	ef64 <m_sigOri_calcAccMagAngle_st>
    f810:	eeb05b40 	vmov.f64	d5, d0
    f814:	eeb06b41 	vmov.f64	d6, d1
    f818:	eeb07b42 	vmov.f64	d7, d2
    f81c:	e59f30e4 	ldr	r3, [pc, #228]	; f908 <g_sigOri_calcComplementaryOrientation_bl+0x108>
    f820:	ed835b00 	vstr	d5, [r3]
    f824:	ed836b02 	vstr	d6, [r3, #8]
    f828:	ed837b04 	vstr	d7, [r3, #16]
	m_sigOri_arrayGyroAnglesComplementary_st=m_sigOri_calcGyroAnglePerStep_st();
    f82c:	ebfffe9e 	bl	f2ac <m_sigOri_calcGyroAnglePerStep_st>
    f830:	eeb05b40 	vmov.f64	d5, d0
    f834:	eeb06b41 	vmov.f64	d6, d1
    f838:	eeb07b42 	vmov.f64	d7, d2
    f83c:	e59f30c8 	ldr	r3, [pc, #200]	; f90c <g_sigOri_calcComplementaryOrientation_bl+0x10c>
    f840:	ed835b00 	vstr	d5, [r3]
    f844:	ed836b02 	vstr	d6, [r3, #8]
    f848:	ed837b04 	vstr	d7, [r3, #16]

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
    f84c:	e59f30bc 	ldr	r3, [pc, #188]	; f910 <g_sigOri_calcComplementaryOrientation_bl+0x110>
    f850:	ed936b02 	vldr	d6, [r3, #8]
    f854:	e59f30b0 	ldr	r3, [pc, #176]	; f90c <g_sigOri_calcComplementaryOrientation_bl+0x10c>
    f858:	ed937b02 	vldr	d7, [r3, #8]
    f85c:	ee366b07 	vadd.f64	d6, d6, d7
    f860:	ed9f7b24 	vldr	d7, [pc, #144]	; f8f8 <g_sigOri_calcComplementaryOrientation_bl+0xf8>
    f864:	ee266b07 	vmul.f64	d6, d6, d7
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;
    f868:	e59f3098 	ldr	r3, [pc, #152]	; f908 <g_sigOri_calcComplementaryOrientation_bl+0x108>
    f86c:	ed935b02 	vldr	d5, [r3, #8]
    f870:	ed9f7b22 	vldr	d7, [pc, #136]	; f900 <g_sigOri_calcComplementaryOrientation_bl+0x100>
    f874:	ee257b07 	vmul.f64	d7, d5, d7
	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesComplementary_st=m_sigOri_calcAccMagAngle_st();
	m_sigOri_arrayGyroAnglesComplementary_st=m_sigOri_calcGyroAnglePerStep_st();

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
    f878:	ee367b07 	vadd.f64	d7, d6, d7
	m_sigOri_getImuData_bl();
	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesComplementary_st=m_sigOri_calcAccMagAngle_st();
	m_sigOri_arrayGyroAnglesComplementary_st=m_sigOri_calcGyroAnglePerStep_st();

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
    f87c:	e59f308c 	ldr	r3, [pc, #140]	; f910 <g_sigOri_calcComplementaryOrientation_bl+0x110>
    f880:	ed837b02 	vstr	d7, [r3, #8]
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
    f884:	e59f3084 	ldr	r3, [pc, #132]	; f910 <g_sigOri_calcComplementaryOrientation_bl+0x110>
    f888:	ed936b00 	vldr	d6, [r3]
    f88c:	e59f3078 	ldr	r3, [pc, #120]	; f90c <g_sigOri_calcComplementaryOrientation_bl+0x10c>
    f890:	ed937b00 	vldr	d7, [r3]
    f894:	ee366b07 	vadd.f64	d6, d6, d7
    f898:	ed9f7b16 	vldr	d7, [pc, #88]	; f8f8 <g_sigOri_calcComplementaryOrientation_bl+0xf8>
    f89c:	ee266b07 	vmul.f64	d6, d6, d7
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;
    f8a0:	e59f3060 	ldr	r3, [pc, #96]	; f908 <g_sigOri_calcComplementaryOrientation_bl+0x108>
    f8a4:	ed935b00 	vldr	d5, [r3]
    f8a8:	ed9f7b14 	vldr	d7, [pc, #80]	; f900 <g_sigOri_calcComplementaryOrientation_bl+0x100>
    f8ac:	ee257b07 	vmul.f64	d7, d5, d7
	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
    f8b0:	ee367b07 	vadd.f64	d7, d6, d7

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
    f8b4:	e59f3054 	ldr	r3, [pc, #84]	; f910 <g_sigOri_calcComplementaryOrientation_bl+0x110>
    f8b8:	ed837b00 	vstr	d7, [r3]
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64=
		M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64+m_sigOri_arrayGyroAnglesComplementary_st.yaw_f64) +
    f8bc:	e59f304c 	ldr	r3, [pc, #76]	; f910 <g_sigOri_calcComplementaryOrientation_bl+0x110>
    f8c0:	ed936b04 	vldr	d6, [r3, #16]
    f8c4:	e59f3040 	ldr	r3, [pc, #64]	; f90c <g_sigOri_calcComplementaryOrientation_bl+0x10c>
    f8c8:	ed937b04 	vldr	d7, [r3, #16]
    f8cc:	ee366b07 	vadd.f64	d6, d6, d7
    f8d0:	ed9f7b08 	vldr	d7, [pc, #32]	; f8f8 <g_sigOri_calcComplementaryOrientation_bl+0xf8>
    f8d4:	ee266b07 	vmul.f64	d6, d6, d7
		(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.yaw_f64;
    f8d8:	e59f3028 	ldr	r3, [pc, #40]	; f908 <g_sigOri_calcComplementaryOrientation_bl+0x108>
    f8dc:	ed935b04 	vldr	d5, [r3, #16]
    f8e0:	ed9f7b06 	vldr	d7, [pc, #24]	; f900 <g_sigOri_calcComplementaryOrientation_bl+0x100>
    f8e4:	ee257b07 	vmul.f64	d7, d5, d7
	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64=
		M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64+m_sigOri_arrayGyroAnglesComplementary_st.yaw_f64) +
    f8e8:	ee367b07 	vadd.f64	d7, d6, d7

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64=
    f8ec:	e59f301c 	ldr	r3, [pc, #28]	; f910 <g_sigOri_calcComplementaryOrientation_bl+0x110>
    f8f0:	ed837b04 	vstr	d7, [r3, #16]
		M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64+m_sigOri_arrayGyroAnglesComplementary_st.yaw_f64) +
		(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.yaw_f64;
}
    f8f4:	e8bd8800 	pop	{fp, pc}
    f8f8:	f9db22d1 	.word	0xf9db22d1
    f8fc:	3fec6a7e 	.word	0x3fec6a7e
    f900:	3126e978 	.word	0x3126e978
    f904:	3fbcac08 	.word	0x3fbcac08
    f908:	00018b98 	.word	0x00018b98
    f90c:	00018bb0 	.word	0x00018bb0
    f910:	00018bc8 	.word	0x00018bc8
    f914:	e1a00000 	nop			; (mov r0, r0)

0000f918 <g_sigFil_getImuValuesUnfiltered_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halImu_orientationValues g_sigFil_getImuValuesUnfiltered_st()
{
    f918:	e92d4800 	push	{fp, lr}
    f91c:	e28db004 	add	fp, sp, #4
    f920:	e24dd008 	sub	sp, sp, #8
    f924:	e50b0008 	str	r0, [fp, #-8]
	return m_sigFil_imuValues_st;
    f928:	e51b2008 	ldr	r2, [fp, #-8]
    f92c:	e59f3024 	ldr	r3, [pc, #36]	; f958 <g_sigFil_getImuValuesUnfiltered_st+0x40>
    f930:	e1a01002 	mov	r1, r2
    f934:	e1a02003 	mov	r2, r3
    f938:	e3a03058 	mov	r3, #88	; 0x58
    f93c:	e1a00001 	mov	r0, r1
    f940:	e1a01002 	mov	r1, r2
    f944:	e1a02003 	mov	r2, r3
    f948:	ebffe436 	bl	8a28 <_init+0x128>
}
    f94c:	e51b0008 	ldr	r0, [fp, #-8]
    f950:	e24bd004 	sub	sp, fp, #4
    f954:	e8bd8800 	pop	{fp, pc}
    f958:	00018e70 	.word	0x00018e70

0000f95c <m_sigFil_offsetCorrectionGyro_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
strGyro m_sigFil_offsetCorrectionGyro_st()
{
    f95c:	e92d4830 	push	{r4, r5, fp, lr}
    f960:	e28db00c 	add	fp, sp, #12
    f964:	e24dd0a8 	sub	sp, sp, #168	; 0xa8
	int i=0;
    f968:	e3a03000 	mov	r3, #0
    f96c:	e50b3010 	str	r3, [fp, #-16]
	strGyro l_measuredGyroValue_st={0,0,0};
    f970:	e3a02000 	mov	r2, #0
    f974:	e3a03000 	mov	r3, #0
    f978:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
    f97c:	e3a02000 	mov	r2, #0
    f980:	e3a03000 	mov	r3, #0
    f984:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4
    f988:	e3a02000 	mov	r2, #0
    f98c:	e3a03000 	mov	r3, #0
    f990:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	halImu_orientationValues l_sigFil_imuValues_st;

	for(i=0;i<M_NR_OF_VALUES_FOR_OFFSET_UI8;i++)
    f994:	e3a03000 	mov	r3, #0
    f998:	e50b3010 	str	r3, [fp, #-16]
    f99c:	ea000012 	b	f9ec <m_sigFil_offsetCorrectionGyro_st+0x90>
	{
		g_halImu_triggerImuReading_bl();
    f9a0:	ebfff341 	bl	c6ac <g_halImu_triggerImuReading_bl>
		l_sigFil_imuValues_st = g_halImu_getImuValues_str();
    f9a4:	e24b309c 	sub	r3, fp, #156	; 0x9c
    f9a8:	e1a00003 	mov	r0, r3
    f9ac:	ebfff2c0 	bl	c4b4 <g_halImu_getImuValues_str>

		l_measuredGyroValue_st.l_pitch_f64+=l_sigFil_imuValues_st.gyro.l_pitch_f64;
    f9b0:	ed1b6b0f 	vldr	d6, [fp, #-60]	; 0xffffffc4
    f9b4:	ed1b7b19 	vldr	d7, [fp, #-100]	; 0xffffff9c
    f9b8:	ee367b07 	vadd.f64	d7, d6, d7
    f9bc:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
		l_measuredGyroValue_st.l_roll_f64+=l_sigFil_imuValues_st.gyro.l_roll_f64;
    f9c0:	ed1b6b0d 	vldr	d6, [fp, #-52]	; 0xffffffcc
    f9c4:	ed1b7b17 	vldr	d7, [fp, #-92]	; 0xffffffa4
    f9c8:	ee367b07 	vadd.f64	d7, d6, d7
    f9cc:	ed0b7b0d 	vstr	d7, [fp, #-52]	; 0xffffffcc
		l_measuredGyroValue_st.l_yaw_f64+=l_sigFil_imuValues_st.gyro.l_yaw_f64;
    f9d0:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
    f9d4:	ed1b7b1b 	vldr	d7, [fp, #-108]	; 0xffffff94
    f9d8:	ee367b07 	vadd.f64	d7, d6, d7
    f9dc:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc
{
	int i=0;
	strGyro l_measuredGyroValue_st={0,0,0};
	halImu_orientationValues l_sigFil_imuValues_st;

	for(i=0;i<M_NR_OF_VALUES_FOR_OFFSET_UI8;i++)
    f9e0:	e51b3010 	ldr	r3, [fp, #-16]
    f9e4:	e2833001 	add	r3, r3, #1
    f9e8:	e50b3010 	str	r3, [fp, #-16]
    f9ec:	e51b3010 	ldr	r3, [fp, #-16]
    f9f0:	e3530ffa 	cmp	r3, #1000	; 0x3e8
    f9f4:	baffffe9 	blt	f9a0 <m_sigFil_offsetCorrectionGyro_st+0x44>
		l_measuredGyroValue_st.l_pitch_f64+=l_sigFil_imuValues_st.gyro.l_pitch_f64;
		l_measuredGyroValue_st.l_roll_f64+=l_sigFil_imuValues_st.gyro.l_roll_f64;
		l_measuredGyroValue_st.l_yaw_f64+=l_sigFil_imuValues_st.gyro.l_yaw_f64;
	}

	l_measuredGyroValue_st.l_pitch_f64=l_measuredGyroValue_st.l_pitch_f64/M_NR_OF_VALUES_FOR_OFFSET_UI8;
    f9f8:	ed1b6b0f 	vldr	d6, [fp, #-60]	; 0xffffffc4
    f9fc:	ed9f7b1b 	vldr	d7, [pc, #108]	; fa70 <m_sigFil_offsetCorrectionGyro_st+0x114>
    fa00:	ee867b07 	vdiv.f64	d7, d6, d7
    fa04:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	l_measuredGyroValue_st.l_roll_f64=l_measuredGyroValue_st.l_roll_f64/M_NR_OF_VALUES_FOR_OFFSET_UI8;
    fa08:	ed1b6b0d 	vldr	d6, [fp, #-52]	; 0xffffffcc
    fa0c:	ed9f7b17 	vldr	d7, [pc, #92]	; fa70 <m_sigFil_offsetCorrectionGyro_st+0x114>
    fa10:	ee867b07 	vdiv.f64	d7, d6, d7
    fa14:	ed0b7b0d 	vstr	d7, [fp, #-52]	; 0xffffffcc
	l_measuredGyroValue_st.l_yaw_f64=l_measuredGyroValue_st.l_yaw_f64/M_NR_OF_VALUES_FOR_OFFSET_UI8;
    fa18:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
    fa1c:	ed9f7b13 	vldr	d7, [pc, #76]	; fa70 <m_sigFil_offsetCorrectionGyro_st+0x114>
    fa20:	ee867b07 	vdiv.f64	d7, d6, d7
    fa24:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc

	return l_measuredGyroValue_st;
    fa28:	e24bc02c 	sub	ip, fp, #44	; 0x2c
    fa2c:	e24be044 	sub	lr, fp, #68	; 0x44
    fa30:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    fa34:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    fa38:	e89e0003 	ldm	lr, {r0, r1}
    fa3c:	e88c0003 	stm	ip, {r0, r1}
    fa40:	e14b42dc 	ldrd	r4, [fp, #-44]	; 0xffffffd4
    fa44:	e14b02d4 	ldrd	r0, [fp, #-36]	; 0xffffffdc
    fa48:	e14b21dc 	ldrd	r2, [fp, #-28]	; 0xffffffe4
    fa4c:	ec454b15 	vmov	d5, r4, r5
    fa50:	ec410b16 	vmov	d6, r0, r1
    fa54:	ec432b17 	vmov	d7, r2, r3
}
    fa58:	eeb00b45 	vmov.f64	d0, d5
    fa5c:	eeb01b46 	vmov.f64	d1, d6
    fa60:	eeb02b47 	vmov.f64	d2, d7
    fa64:	e24bd00c 	sub	sp, fp, #12
    fa68:	e8bd8830 	pop	{r4, r5, fp, pc}
    fa6c:	e1a00000 	nop			; (mov r0, r0)
    fa70:	00000000 	.word	0x00000000
    fa74:	408f4000 	.word	0x408f4000

0000fa78 <g_SigFil_initImuSensors_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_SigFil_initImuSensors_bl()
{
    fa78:	e92d4800 	push	{fp, lr}
    fa7c:	e28db004 	add	fp, sp, #4
    fa80:	e24dd008 	sub	sp, sp, #8
	unsigned int l_initState_bl;

	l_initState_bl = g_halImu_initImuSensors_bl();
    fa84:	ebfff29b 	bl	c4f8 <g_halImu_initImuSensors_bl>
    fa88:	e50b0008 	str	r0, [fp, #-8]
	m_offsetGyro_st=m_sigFil_offsetCorrectionGyro_st();
    fa8c:	ebffffb2 	bl	f95c <m_sigFil_offsetCorrectionGyro_st>
    fa90:	eeb05b40 	vmov.f64	d5, d0
    fa94:	eeb06b41 	vmov.f64	d6, d1
    fa98:	eeb07b42 	vmov.f64	d7, d2
    fa9c:	e59f3018 	ldr	r3, [pc, #24]	; fabc <g_SigFil_initImuSensors_bl+0x44>
    faa0:	ed835b00 	vstr	d5, [r3]
    faa4:	ed836b02 	vstr	d6, [r3, #8]
    faa8:	ed837b04 	vstr	d7, [r3, #16]

	return l_initState_bl;
    faac:	e51b3008 	ldr	r3, [fp, #-8]
}
    fab0:	e1a00003 	mov	r0, r3
    fab4:	e24bd004 	sub	sp, fp, #4
    fab8:	e8bd8800 	pop	{fp, pc}
    fabc:	00018ec8 	.word	0x00018ec8

0000fac0 <g_sigFil_readImuData_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigFil_readImuData_bl()
{
    fac0:	e92d4810 	push	{r4, fp, lr}
    fac4:	e28db008 	add	fp, sp, #8
    fac8:	e24dd05c 	sub	sp, sp, #92	; 0x5c
	g_halImu_triggerImuReading_bl();
    facc:	ebfff2f6 	bl	c6ac <g_halImu_triggerImuReading_bl>
	m_sigFil_imuValues_st = g_halImu_getImuValues_str();
    fad0:	e59f40e8 	ldr	r4, [pc, #232]	; fbc0 <g_sigFil_readImuData_bl+0x100>
    fad4:	e24b3064 	sub	r3, fp, #100	; 0x64
    fad8:	e1a00003 	mov	r0, r3
    fadc:	ebfff274 	bl	c4b4 <g_halImu_getImuValues_str>
    fae0:	e1a01004 	mov	r1, r4
    fae4:	e24b2064 	sub	r2, fp, #100	; 0x64
    fae8:	e3a03058 	mov	r3, #88	; 0x58
    faec:	e1a00001 	mov	r0, r1
    faf0:	e1a01002 	mov	r1, r2
    faf4:	e1a02003 	mov	r2, r3
    faf8:	ebffe3ca 	bl	8a28 <_init+0x128>

	m_sigFil_imuValues_st.acc.z_f64=-m_sigFil_imuValues_st.acc.z_f64;
    fafc:	e59f30bc 	ldr	r3, [pc, #188]	; fbc0 <g_sigFil_readImuData_bl+0x100>
    fb00:	ed937b04 	vldr	d7, [r3, #16]
    fb04:	eeb17b47 	vneg.f64	d7, d7
    fb08:	e59f30b0 	ldr	r3, [pc, #176]	; fbc0 <g_sigFil_readImuData_bl+0x100>
    fb0c:	ed837b04 	vstr	d7, [r3, #16]
	m_sigFil_imuValues_st.mag.x_f64=m_sigFil_imuValues_st.mag.x_f64*1000000;
    fb10:	e59f30a8 	ldr	r3, [pc, #168]	; fbc0 <g_sigFil_readImuData_bl+0x100>
    fb14:	ed936b06 	vldr	d6, [r3, #24]
    fb18:	ed9f7b26 	vldr	d7, [pc, #152]	; fbb8 <g_sigFil_readImuData_bl+0xf8>
    fb1c:	ee267b07 	vmul.f64	d7, d6, d7
    fb20:	e59f3098 	ldr	r3, [pc, #152]	; fbc0 <g_sigFil_readImuData_bl+0x100>
    fb24:	ed837b06 	vstr	d7, [r3, #24]
	m_sigFil_imuValues_st.mag.y_f64=m_sigFil_imuValues_st.mag.y_f64*1000000;
    fb28:	e59f3090 	ldr	r3, [pc, #144]	; fbc0 <g_sigFil_readImuData_bl+0x100>
    fb2c:	ed936b08 	vldr	d6, [r3, #32]
    fb30:	ed9f7b20 	vldr	d7, [pc, #128]	; fbb8 <g_sigFil_readImuData_bl+0xf8>
    fb34:	ee267b07 	vmul.f64	d7, d6, d7
    fb38:	e59f3080 	ldr	r3, [pc, #128]	; fbc0 <g_sigFil_readImuData_bl+0x100>
    fb3c:	ed837b08 	vstr	d7, [r3, #32]
	m_sigFil_imuValues_st.mag.z_f64=-m_sigFil_imuValues_st.mag.z_f64*1000000;
    fb40:	e59f3078 	ldr	r3, [pc, #120]	; fbc0 <g_sigFil_readImuData_bl+0x100>
    fb44:	ed937b0a 	vldr	d7, [r3, #40]	; 0x28
    fb48:	eeb16b47 	vneg.f64	d6, d7
    fb4c:	ed9f7b19 	vldr	d7, [pc, #100]	; fbb8 <g_sigFil_readImuData_bl+0xf8>
    fb50:	ee267b07 	vmul.f64	d7, d6, d7
    fb54:	e59f3064 	ldr	r3, [pc, #100]	; fbc0 <g_sigFil_readImuData_bl+0x100>
    fb58:	ed837b0a 	vstr	d7, [r3, #40]	; 0x28
	m_sigFil_imuValues_st.gyro.l_pitch_f64=m_sigFil_imuValues_st.gyro.l_pitch_f64-m_offsetGyro_st.l_pitch_f64;
    fb5c:	e59f305c 	ldr	r3, [pc, #92]	; fbc0 <g_sigFil_readImuData_bl+0x100>
    fb60:	ed936b0e 	vldr	d6, [r3, #56]	; 0x38
    fb64:	e59f3058 	ldr	r3, [pc, #88]	; fbc4 <g_sigFil_readImuData_bl+0x104>
    fb68:	ed937b02 	vldr	d7, [r3, #8]
    fb6c:	ee367b47 	vsub.f64	d7, d6, d7
    fb70:	e59f3048 	ldr	r3, [pc, #72]	; fbc0 <g_sigFil_readImuData_bl+0x100>
    fb74:	ed837b0e 	vstr	d7, [r3, #56]	; 0x38
	m_sigFil_imuValues_st.gyro.l_roll_f64=m_sigFil_imuValues_st.gyro.l_roll_f64-m_offsetGyro_st.l_roll_f64;
    fb78:	e59f3040 	ldr	r3, [pc, #64]	; fbc0 <g_sigFil_readImuData_bl+0x100>
    fb7c:	ed936b10 	vldr	d6, [r3, #64]	; 0x40
    fb80:	e59f303c 	ldr	r3, [pc, #60]	; fbc4 <g_sigFil_readImuData_bl+0x104>
    fb84:	ed937b04 	vldr	d7, [r3, #16]
    fb88:	ee367b47 	vsub.f64	d7, d6, d7
    fb8c:	e59f302c 	ldr	r3, [pc, #44]	; fbc0 <g_sigFil_readImuData_bl+0x100>
    fb90:	ed837b10 	vstr	d7, [r3, #64]	; 0x40
	m_sigFil_imuValues_st.gyro.l_yaw_f64=m_sigFil_imuValues_st.gyro.l_yaw_f64-m_offsetGyro_st.l_yaw_f64;
    fb94:	e59f3024 	ldr	r3, [pc, #36]	; fbc0 <g_sigFil_readImuData_bl+0x100>
    fb98:	ed936b0c 	vldr	d6, [r3, #48]	; 0x30
    fb9c:	e59f3020 	ldr	r3, [pc, #32]	; fbc4 <g_sigFil_readImuData_bl+0x104>
    fba0:	ed937b00 	vldr	d7, [r3]
    fba4:	ee367b47 	vsub.f64	d7, d6, d7
    fba8:	e59f3010 	ldr	r3, [pc, #16]	; fbc0 <g_sigFil_readImuData_bl+0x100>
    fbac:	ed837b0c 	vstr	d7, [r3, #48]	; 0x30

}
    fbb0:	e24bd008 	sub	sp, fp, #8
    fbb4:	e8bd8810 	pop	{r4, fp, pc}
    fbb8:	00000000 	.word	0x00000000
    fbbc:	412e8480 	.word	0x412e8480
    fbc0:	00018e70 	.word	0x00018e70
    fbc4:	00018ec8 	.word	0x00018ec8

0000fbc8 <__libc_csu_init>:
    fbc8:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}
    fbcc:	e1a06000 	mov	r6, r0
    fbd0:	e59f5048 	ldr	r5, [pc, #72]	; fc20 <__libc_csu_init+0x58>
    fbd4:	e59fa048 	ldr	sl, [pc, #72]	; fc24 <__libc_csu_init+0x5c>
    fbd8:	e08f5005 	add	r5, pc, r5
    fbdc:	e08fa00a 	add	sl, pc, sl
    fbe0:	e065a00a 	rsb	sl, r5, sl
    fbe4:	e1a07001 	mov	r7, r1
    fbe8:	e1a08002 	mov	r8, r2
    fbec:	ebffe343 	bl	8900 <_init>
    fbf0:	e1b0a14a 	asrs	sl, sl, #2
    fbf4:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, sl, pc}
    fbf8:	e3a04000 	mov	r4, #0
    fbfc:	e4953004 	ldr	r3, [r5], #4
    fc00:	e1a00006 	mov	r0, r6
    fc04:	e1a01007 	mov	r1, r7
    fc08:	e1a02008 	mov	r2, r8
    fc0c:	e2844001 	add	r4, r4, #1
    fc10:	e12fff33 	blx	r3
    fc14:	e154000a 	cmp	r4, sl
    fc18:	1afffff7 	bne	fbfc <__libc_csu_init+0x34>
    fc1c:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, sl, pc}
    fc20:	000085e4 	.word	0x000085e4
    fc24:	000085e4 	.word	0x000085e4

0000fc28 <__libc_csu_fini>:
    fc28:	e12fff1e 	bx	lr

Disassembly of section .fini:

0000fc2c <_fini>:
    fc2c:	e92d4008 	push	{r3, lr}
    fc30:	e8bd8008 	pop	{r3, pc}
