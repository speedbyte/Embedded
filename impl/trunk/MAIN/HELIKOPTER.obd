
HELIKOPTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .interp       00000019  00008134  00008134  00000134  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.ABI-tag 00000020  00008150  00008150  00000150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  00008170  00008170  00000170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .hash         00000140  00008194  00008194  00000194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dynsym       00000290  000082d4  000082d4  000002d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynstr       000001a9  00008564  00008564  00000564  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .gnu.version  00000052  0000870e  0000870e  0000070e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version_r 00000070  00008760  00008760  00000760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rel.dyn      00000008  000087d0  000087d0  000007d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rel.plt      00000128  000087d8  000087d8  000007d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .init         0000000c  00008900  00008900  00000900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .plt          000001d0  0000890c  0000890c  0000090c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text         0000786c  00008ae0  00008ae0  00000ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .fini         00000008  0001034c  0001034c  0000834c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .rodata       0000079c  00010354  00010354  00008354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .ARM.exidx    00000008  00010af0  00010af0  00008af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame     00000004  00010af8  00010af8  00008af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .init_array   00000004  00019000  00019000  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 18 .fini_array   00000004  00019004  00019004  00009004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 19 .jcr          00000004  00019008  00019008  00009008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 20 .dynamic      00000108  0001900c  0001900c  0000900c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .got          000000a4  00019114  00019114  00009114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 22 .data         000000a4  000191b8  000191b8  000091b8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .bss          00000ae8  00019260  00019260  0000925c  2**3
                  ALLOC
 24 .comment      0000005b  00000000  00000000  0000925c  2**0
                  CONTENTS, READONLY
 25 .ARM.attributes 00000031  00000000  00000000  000092b7  2**0
                  CONTENTS, READONLY
 26 .debug_aranges 00000260  00000000  00000000  000092e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_info   00003b87  00000000  00000000  00009548  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_abbrev 00000f36  00000000  00000000  0000d0cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_line   00004ddf  00000000  00000000  0000e005  2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .debug_frame  00000f40  00000000  00000000  00012de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 31 .debug_str    00017437  00000000  00000000  00013d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 32 .debug_macro  0000709e  00000000  00000000  0002b15b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .init:

00008900 <_init>:
    8900:	e92d4008 	push	{r3, lr}
    8904:	eb000084 	bl	8b1c <call_gmon_start>
    8908:	e8bd8008 	pop	{r3, pc}

Disassembly of section .plt:

0000890c <.plt>:
    890c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8910:	e59fe004 	ldr	lr, [pc, #4]	; 891c <_init+0x1c>
    8914:	e08fe00e 	add	lr, pc, lr
    8918:	e5bef008 	ldr	pc, [lr, #8]!
    891c:	000107f8 	.word	0x000107f8
    8920:	e28fc600 	add	ip, pc, #0, 12
    8924:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8928:	e5bcf7f8 	ldr	pc, [ip, #2040]!	; 0x7f8
    892c:	e28fc600 	add	ip, pc, #0, 12
    8930:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8934:	e5bcf7f0 	ldr	pc, [ip, #2032]!	; 0x7f0
    8938:	e28fc600 	add	ip, pc, #0, 12
    893c:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8940:	e5bcf7e8 	ldr	pc, [ip, #2024]!	; 0x7e8
    8944:	e28fc600 	add	ip, pc, #0, 12
    8948:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    894c:	e5bcf7e0 	ldr	pc, [ip, #2016]!	; 0x7e0
    8950:	e28fc600 	add	ip, pc, #0, 12
    8954:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8958:	e5bcf7d8 	ldr	pc, [ip, #2008]!	; 0x7d8
    895c:	e28fc600 	add	ip, pc, #0, 12
    8960:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8964:	e5bcf7d0 	ldr	pc, [ip, #2000]!	; 0x7d0
    8968:	e28fc600 	add	ip, pc, #0, 12
    896c:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8970:	e5bcf7c8 	ldr	pc, [ip, #1992]!	; 0x7c8
    8974:	e28fc600 	add	ip, pc, #0, 12
    8978:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    897c:	e5bcf7c0 	ldr	pc, [ip, #1984]!	; 0x7c0
    8980:	e28fc600 	add	ip, pc, #0, 12
    8984:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8988:	e5bcf7b8 	ldr	pc, [ip, #1976]!	; 0x7b8
    898c:	e28fc600 	add	ip, pc, #0, 12
    8990:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8994:	e5bcf7b0 	ldr	pc, [ip, #1968]!	; 0x7b0
    8998:	e28fc600 	add	ip, pc, #0, 12
    899c:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    89a0:	e5bcf7a8 	ldr	pc, [ip, #1960]!	; 0x7a8
    89a4:	e28fc600 	add	ip, pc, #0, 12
    89a8:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    89ac:	e5bcf7a0 	ldr	pc, [ip, #1952]!	; 0x7a0
    89b0:	e28fc600 	add	ip, pc, #0, 12
    89b4:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    89b8:	e5bcf798 	ldr	pc, [ip, #1944]!	; 0x798
    89bc:	e28fc600 	add	ip, pc, #0, 12
    89c0:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    89c4:	e5bcf790 	ldr	pc, [ip, #1936]!	; 0x790
    89c8:	e28fc600 	add	ip, pc, #0, 12
    89cc:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    89d0:	e5bcf788 	ldr	pc, [ip, #1928]!	; 0x788
    89d4:	e28fc600 	add	ip, pc, #0, 12
    89d8:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    89dc:	e5bcf780 	ldr	pc, [ip, #1920]!	; 0x780
    89e0:	e28fc600 	add	ip, pc, #0, 12
    89e4:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    89e8:	e5bcf778 	ldr	pc, [ip, #1912]!	; 0x778
    89ec:	e28fc600 	add	ip, pc, #0, 12
    89f0:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    89f4:	e5bcf770 	ldr	pc, [ip, #1904]!	; 0x770
    89f8:	e28fc600 	add	ip, pc, #0, 12
    89fc:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a00:	e5bcf768 	ldr	pc, [ip, #1896]!	; 0x768
    8a04:	e28fc600 	add	ip, pc, #0, 12
    8a08:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a0c:	e5bcf760 	ldr	pc, [ip, #1888]!	; 0x760
    8a10:	e28fc600 	add	ip, pc, #0, 12
    8a14:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a18:	e5bcf758 	ldr	pc, [ip, #1880]!	; 0x758
    8a1c:	e28fc600 	add	ip, pc, #0, 12
    8a20:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a24:	e5bcf750 	ldr	pc, [ip, #1872]!	; 0x750
    8a28:	e28fc600 	add	ip, pc, #0, 12
    8a2c:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a30:	e5bcf748 	ldr	pc, [ip, #1864]!	; 0x748
    8a34:	e28fc600 	add	ip, pc, #0, 12
    8a38:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a3c:	e5bcf740 	ldr	pc, [ip, #1856]!	; 0x740
    8a40:	e28fc600 	add	ip, pc, #0, 12
    8a44:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a48:	e5bcf738 	ldr	pc, [ip, #1848]!	; 0x738
    8a4c:	e28fc600 	add	ip, pc, #0, 12
    8a50:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a54:	e5bcf730 	ldr	pc, [ip, #1840]!	; 0x730
    8a58:	e28fc600 	add	ip, pc, #0, 12
    8a5c:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a60:	e5bcf728 	ldr	pc, [ip, #1832]!	; 0x728
    8a64:	e28fc600 	add	ip, pc, #0, 12
    8a68:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a6c:	e5bcf720 	ldr	pc, [ip, #1824]!	; 0x720
    8a70:	e28fc600 	add	ip, pc, #0, 12
    8a74:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a78:	e5bcf718 	ldr	pc, [ip, #1816]!	; 0x718
    8a7c:	e28fc600 	add	ip, pc, #0, 12
    8a80:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a84:	e5bcf710 	ldr	pc, [ip, #1808]!	; 0x710
    8a88:	e28fc600 	add	ip, pc, #0, 12
    8a8c:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a90:	e5bcf708 	ldr	pc, [ip, #1800]!	; 0x708
    8a94:	e28fc600 	add	ip, pc, #0, 12
    8a98:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8a9c:	e5bcf700 	ldr	pc, [ip, #1792]!	; 0x700
    8aa0:	e28fc600 	add	ip, pc, #0, 12
    8aa4:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8aa8:	e5bcf6f8 	ldr	pc, [ip, #1784]!	; 0x6f8
    8aac:	e28fc600 	add	ip, pc, #0, 12
    8ab0:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8ab4:	e5bcf6f0 	ldr	pc, [ip, #1776]!	; 0x6f0
    8ab8:	e28fc600 	add	ip, pc, #0, 12
    8abc:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8ac0:	e5bcf6e8 	ldr	pc, [ip, #1768]!	; 0x6e8
    8ac4:	e28fc600 	add	ip, pc, #0, 12
    8ac8:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8acc:	e5bcf6e0 	ldr	pc, [ip, #1760]!	; 0x6e0
    8ad0:	e28fc600 	add	ip, pc, #0, 12
    8ad4:	e28cca10 	add	ip, ip, #16, 20	; 0x10000
    8ad8:	e5bcf6d8 	ldr	pc, [ip, #1752]!	; 0x6d8

Disassembly of section .text:

00008ae0 <_start>:
    8ae0:	e3a0b000 	mov	fp, #0
    8ae4:	e3a0e000 	mov	lr, #0
    8ae8:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    8aec:	e1a0200d 	mov	r2, sp
    8af0:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
    8af4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    8af8:	e59fc010 	ldr	ip, [pc, #16]	; 8b10 <_start+0x30>
    8afc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
    8b00:	e59f000c 	ldr	r0, [pc, #12]	; 8b14 <_start+0x34>
    8b04:	e59f300c 	ldr	r3, [pc, #12]	; 8b18 <_start+0x38>
    8b08:	ebffff8d 	bl	8944 <_init+0x44>
    8b0c:	ebffff86 	bl	892c <_init+0x2c>
    8b10:	00010348 	.word	0x00010348
    8b14:	00008c08 	.word	0x00008c08
    8b18:	000102e8 	.word	0x000102e8

00008b1c <call_gmon_start>:
    8b1c:	e59f3014 	ldr	r3, [pc, #20]	; 8b38 <call_gmon_start+0x1c>
    8b20:	e59f2014 	ldr	r2, [pc, #20]	; 8b3c <call_gmon_start+0x20>
    8b24:	e08f3003 	add	r3, pc, r3
    8b28:	e7933002 	ldr	r3, [r3, r2]
    8b2c:	e3530000 	cmp	r3, #0
    8b30:	012fff1e 	bxeq	lr
    8b34:	eaffff85 	b	8950 <_init+0x50>
    8b38:	000105e8 	.word	0x000105e8
    8b3c:	000000a0 	.word	0x000000a0

00008b40 <deregister_tm_clones>:
    8b40:	e59f301c 	ldr	r3, [pc, #28]	; 8b64 <deregister_tm_clones+0x24>
    8b44:	e59f001c 	ldr	r0, [pc, #28]	; 8b68 <deregister_tm_clones+0x28>
    8b48:	e0603003 	rsb	r3, r0, r3
    8b4c:	e3530006 	cmp	r3, #6
    8b50:	912fff1e 	bxls	lr
    8b54:	e59f3010 	ldr	r3, [pc, #16]	; 8b6c <deregister_tm_clones+0x2c>
    8b58:	e3530000 	cmp	r3, #0
    8b5c:	012fff1e 	bxeq	lr
    8b60:	e12fff13 	bx	r3
    8b64:	0001925f 	.word	0x0001925f
    8b68:	0001925c 	.word	0x0001925c
    8b6c:	00000000 	.word	0x00000000

00008b70 <register_tm_clones>:
    8b70:	e59f3024 	ldr	r3, [pc, #36]	; 8b9c <register_tm_clones+0x2c>
    8b74:	e59f0024 	ldr	r0, [pc, #36]	; 8ba0 <register_tm_clones+0x30>
    8b78:	e0603003 	rsb	r3, r0, r3
    8b7c:	e1a03143 	asr	r3, r3, #2
    8b80:	e0833fa3 	add	r3, r3, r3, lsr #31
    8b84:	e1b010c3 	asrs	r1, r3, #1
    8b88:	012fff1e 	bxeq	lr
    8b8c:	e59f2010 	ldr	r2, [pc, #16]	; 8ba4 <register_tm_clones+0x34>
    8b90:	e3520000 	cmp	r2, #0
    8b94:	012fff1e 	bxeq	lr
    8b98:	e12fff12 	bx	r2
    8b9c:	0001925c 	.word	0x0001925c
    8ba0:	0001925c 	.word	0x0001925c
    8ba4:	00000000 	.word	0x00000000

00008ba8 <__do_global_dtors_aux>:
    8ba8:	e92d4010 	push	{r4, lr}
    8bac:	e59f4018 	ldr	r4, [pc, #24]	; 8bcc <__do_global_dtors_aux+0x24>
    8bb0:	e5d43000 	ldrb	r3, [r4]
    8bb4:	e3530000 	cmp	r3, #0
    8bb8:	18bd8010 	popne	{r4, pc}
    8bbc:	ebffffdf 	bl	8b40 <deregister_tm_clones>
    8bc0:	e3a03001 	mov	r3, #1
    8bc4:	e5c43000 	strb	r3, [r4]
    8bc8:	e8bd8010 	pop	{r4, pc}
    8bcc:	00019260 	.word	0x00019260

00008bd0 <frame_dummy>:
    8bd0:	e59f0024 	ldr	r0, [pc, #36]	; 8bfc <frame_dummy+0x2c>
    8bd4:	e92d4008 	push	{r3, lr}
    8bd8:	e5903000 	ldr	r3, [r0]
    8bdc:	e3530000 	cmp	r3, #0
    8be0:	0a000003 	beq	8bf4 <frame_dummy+0x24>
    8be4:	e59f3014 	ldr	r3, [pc, #20]	; 8c00 <frame_dummy+0x30>
    8be8:	e3530000 	cmp	r3, #0
    8bec:	0a000000 	beq	8bf4 <frame_dummy+0x24>
    8bf0:	e12fff33 	blx	r3
    8bf4:	e8bd4008 	pop	{r3, lr}
    8bf8:	eaffffdc 	b	8b70 <register_tm_clones>
    8bfc:	00019008 	.word	0x00019008
	...

00008c08 <main>:


static char str[500];
static char str2[500];

int main() {
    8c08:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    8c0c:	ed2d8b0c 	vpush	{d8-d13}
    8c10:	e28db04c 	add	fp, sp, #76	; 0x4c
    8c14:	e24ddd0e 	sub	sp, sp, #896	; 0x380

	enumTestcases runCommand = 0;
    8c18:	e3a03000 	mov	r3, #0
    8c1c:	e50b3050 	str	r3, [fp, #-80]	; 0x50
	char testValue[20];
	scanf("%s", testValue);
    8c20:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8c24:	e59f0d24 	ldr	r0, [pc, #3364]	; 9950 <main+0xd48>
    8c28:	e1a01003 	mov	r1, r3
    8c2c:	ebffff8f 	bl	8a70 <_init+0x170>
	printf("Received string is %s\n", testValue);
    8c30:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8c34:	e59f0d18 	ldr	r0, [pc, #3352]	; 9954 <main+0xd4c>
    8c38:	e1a01003 	mov	r1, r3
    8c3c:	ebffff7c 	bl	8a34 <_init+0x134>
	if ( strcmp(testValue,"testadc")  == 0 )
    8c40:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8c44:	e1a00003 	mov	r0, r3
    8c48:	e59f1d08 	ldr	r1, [pc, #3336]	; 9958 <main+0xd50>
    8c4c:	ebffff9c 	bl	8ac4 <_init+0x1c4>
    8c50:	e1a03000 	mov	r3, r0
    8c54:	e3530000 	cmp	r3, #0
    8c58:	1a000002 	bne	8c68 <main+0x60>
		runCommand = TESTADC;
    8c5c:	e3a03001 	mov	r3, #1
    8c60:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8c64:	ea00009e 	b	8ee4 <main+0x2dc>
	else if ( strcmp(testValue,"testbattery")  == 0 )
    8c68:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8c6c:	e1a00003 	mov	r0, r3
    8c70:	e59f1ce4 	ldr	r1, [pc, #3300]	; 995c <main+0xd54>
    8c74:	ebffff92 	bl	8ac4 <_init+0x1c4>
    8c78:	e1a03000 	mov	r3, r0
    8c7c:	e3530000 	cmp	r3, #0
    8c80:	1a000002 	bne	8c90 <main+0x88>
		runCommand = TESTBATTERY;
    8c84:	e3a03002 	mov	r3, #2
    8c88:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8c8c:	ea000094 	b	8ee4 <main+0x2dc>
	else if ( strcmp(testValue,"testgps")  == 0 )
    8c90:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8c94:	e1a00003 	mov	r0, r3
    8c98:	e59f1cc0 	ldr	r1, [pc, #3264]	; 9960 <main+0xd58>
    8c9c:	ebffff88 	bl	8ac4 <_init+0x1c4>
    8ca0:	e1a03000 	mov	r3, r0
    8ca4:	e3530000 	cmp	r3, #0
    8ca8:	1a000002 	bne	8cb8 <main+0xb0>
		runCommand = TESTGPS;
    8cac:	e3a03003 	mov	r3, #3
    8cb0:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8cb4:	ea00008a 	b	8ee4 <main+0x2dc>
	else if ( strcmp(testValue,"testimu")  == 0 )
    8cb8:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8cbc:	e1a00003 	mov	r0, r3
    8cc0:	e59f1c9c 	ldr	r1, [pc, #3228]	; 9964 <main+0xd5c>
    8cc4:	ebffff7e 	bl	8ac4 <_init+0x1c4>
    8cc8:	e1a03000 	mov	r3, r0
    8ccc:	e3530000 	cmp	r3, #0
    8cd0:	1a000002 	bne	8ce0 <main+0xd8>
		runCommand = TESTIMU;
    8cd4:	e3a03004 	mov	r3, #4
    8cd8:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8cdc:	ea000080 	b	8ee4 <main+0x2dc>
	else if ( strcmp(testValue,"testlaser")  == 0 )
    8ce0:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8ce4:	e1a00003 	mov	r0, r3
    8ce8:	e59f1c78 	ldr	r1, [pc, #3192]	; 9968 <main+0xd60>
    8cec:	ebffff74 	bl	8ac4 <_init+0x1c4>
    8cf0:	e1a03000 	mov	r3, r0
    8cf4:	e3530000 	cmp	r3, #0
    8cf8:	1a000002 	bne	8d08 <main+0x100>
		runCommand = TESTLASER;
    8cfc:	e3a03005 	mov	r3, #5
    8d00:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8d04:	ea000076 	b	8ee4 <main+0x2dc>
	else if ( strcmp(testValue,"testuart")  == 0 )
    8d08:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8d0c:	e1a00003 	mov	r0, r3
    8d10:	e59f1c54 	ldr	r1, [pc, #3156]	; 996c <main+0xd64>
    8d14:	ebffff6a 	bl	8ac4 <_init+0x1c4>
    8d18:	e1a03000 	mov	r3, r0
    8d1c:	e3530000 	cmp	r3, #0
    8d20:	1a000002 	bne	8d30 <main+0x128>
		runCommand = TESTUART;
    8d24:	e3a03006 	mov	r3, #6
    8d28:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8d2c:	ea00006c 	b	8ee4 <main+0x2dc>
	else if ( strcmp(testValue,"testmatlabimu")  == 0 )
    8d30:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8d34:	e1a00003 	mov	r0, r3
    8d38:	e59f1c30 	ldr	r1, [pc, #3120]	; 9970 <main+0xd68>
    8d3c:	ebffff60 	bl	8ac4 <_init+0x1c4>
    8d40:	e1a03000 	mov	r3, r0
    8d44:	e3530000 	cmp	r3, #0
    8d48:	1a000002 	bne	8d58 <main+0x150>
		runCommand = TESTMATLABIMU;
    8d4c:	e3a03007 	mov	r3, #7
    8d50:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8d54:	ea000062 	b	8ee4 <main+0x2dc>
	else if ( strcmp(testValue,"testmatlabkalman")  == 0 )
    8d58:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8d5c:	e1a00003 	mov	r0, r3
    8d60:	e59f1c0c 	ldr	r1, [pc, #3084]	; 9974 <main+0xd6c>
    8d64:	ebffff56 	bl	8ac4 <_init+0x1c4>
    8d68:	e1a03000 	mov	r3, r0
    8d6c:	e3530000 	cmp	r3, #0
    8d70:	1a000002 	bne	8d80 <main+0x178>
		runCommand = TESTMATLABKALMAN;
    8d74:	e3a03008 	mov	r3, #8
    8d78:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8d7c:	ea000058 	b	8ee4 <main+0x2dc>
	else if ( strcmp(testValue,"testaccmag")  == 0 )
    8d80:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8d84:	e1a00003 	mov	r0, r3
    8d88:	e59f1be8 	ldr	r1, [pc, #3048]	; 9978 <main+0xd70>
    8d8c:	ebffff4c 	bl	8ac4 <_init+0x1c4>
    8d90:	e1a03000 	mov	r3, r0
    8d94:	e3530000 	cmp	r3, #0
    8d98:	1a000002 	bne	8da8 <main+0x1a0>
		runCommand = TESTACCMAG;
    8d9c:	e3a03009 	mov	r3, #9
    8da0:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8da4:	ea00004e 	b	8ee4 <main+0x2dc>
	else if ( strcmp(testValue,"testgyro")  == 0 )
    8da8:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8dac:	e1a00003 	mov	r0, r3
    8db0:	e59f1bc4 	ldr	r1, [pc, #3012]	; 997c <main+0xd74>
    8db4:	ebffff42 	bl	8ac4 <_init+0x1c4>
    8db8:	e1a03000 	mov	r3, r0
    8dbc:	e3530000 	cmp	r3, #0
    8dc0:	1a000002 	bne	8dd0 <main+0x1c8>
		runCommand = TESTGYRO;
    8dc4:	e3a0300a 	mov	r3, #10
    8dc8:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8dcc:	ea000044 	b	8ee4 <main+0x2dc>
	else if ( strcmp(testValue,"testbaro")  == 0 )
    8dd0:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8dd4:	e1a00003 	mov	r0, r3
    8dd8:	e59f1ba0 	ldr	r1, [pc, #2976]	; 9980 <main+0xd78>
    8ddc:	ebffff38 	bl	8ac4 <_init+0x1c4>
    8de0:	e1a03000 	mov	r3, r0
    8de4:	e3530000 	cmp	r3, #0
    8de8:	1a000002 	bne	8df8 <main+0x1f0>
		runCommand = TESTBARO;
    8dec:	e3a0300b 	mov	r3, #11
    8df0:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8df4:	ea00003a 	b	8ee4 <main+0x2dc>
	else if ( strcmp(testValue,"testmatrixlib")  == 0 )
    8df8:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8dfc:	e1a00003 	mov	r0, r3
    8e00:	e59f1b7c 	ldr	r1, [pc, #2940]	; 9984 <main+0xd7c>
    8e04:	ebffff2e 	bl	8ac4 <_init+0x1c4>
    8e08:	e1a03000 	mov	r3, r0
    8e0c:	e3530000 	cmp	r3, #0
    8e10:	1a000002 	bne	8e20 <main+0x218>
		runCommand = TESTMATRIXLIB;
    8e14:	e3a0300c 	mov	r3, #12
    8e18:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8e1c:	ea000030 	b	8ee4 <main+0x2dc>
	else if ( strcmp(testValue,"testudp")  == 0 )
    8e20:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8e24:	e1a00003 	mov	r0, r3
    8e28:	e59f1b58 	ldr	r1, [pc, #2904]	; 9988 <main+0xd80>
    8e2c:	ebffff24 	bl	8ac4 <_init+0x1c4>
    8e30:	e1a03000 	mov	r3, r0
    8e34:	e3530000 	cmp	r3, #0
    8e38:	1a000002 	bne	8e48 <main+0x240>
		runCommand = TESTUDP;
    8e3c:	e3a0300d 	mov	r3, #13
    8e40:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8e44:	ea000026 	b	8ee4 <main+0x2dc>
	else if ( strcmp(testValue,"testudptransfer")  == 0 )
    8e48:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8e4c:	e1a00003 	mov	r0, r3
    8e50:	e59f1b34 	ldr	r1, [pc, #2868]	; 998c <main+0xd84>
    8e54:	ebffff1a 	bl	8ac4 <_init+0x1c4>
    8e58:	e1a03000 	mov	r3, r0
    8e5c:	e3530000 	cmp	r3, #0
    8e60:	1a000002 	bne	8e70 <main+0x268>
		runCommand = TESTUDPTRANSFER;
    8e64:	e3a0300e 	mov	r3, #14
    8e68:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8e6c:	ea00001c 	b	8ee4 <main+0x2dc>
	else if ( strcmp(testValue,"testallangles")  == 0 )
    8e70:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8e74:	e1a00003 	mov	r0, r3
    8e78:	e59f1b10 	ldr	r1, [pc, #2832]	; 9990 <main+0xd88>
    8e7c:	ebffff10 	bl	8ac4 <_init+0x1c4>
    8e80:	e1a03000 	mov	r3, r0
    8e84:	e3530000 	cmp	r3, #0
    8e88:	1a000002 	bne	8e98 <main+0x290>
		runCommand = ALLANGLES;
    8e8c:	e3a0300f 	mov	r3, #15
    8e90:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8e94:	ea000012 	b	8ee4 <main+0x2dc>
	else if ( strcmp(testValue,"testallsensordata")  == 0 )
    8e98:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8e9c:	e1a00003 	mov	r0, r3
    8ea0:	e59f1aec 	ldr	r1, [pc, #2796]	; 9994 <main+0xd8c>
    8ea4:	ebffff06 	bl	8ac4 <_init+0x1c4>
    8ea8:	e1a03000 	mov	r3, r0
    8eac:	e3530000 	cmp	r3, #0
    8eb0:	1a000002 	bne	8ec0 <main+0x2b8>
			runCommand = TESTALLSENSORDATA;
    8eb4:	e3a03010 	mov	r3, #16
    8eb8:	e50b3050 	str	r3, [fp, #-80]	; 0x50
    8ebc:	ea000008 	b	8ee4 <main+0x2dc>
	else if ( strcmp(testValue,"testmotorpwm")  == 0 )
    8ec0:	e24b3f41 	sub	r3, fp, #260	; 0x104
    8ec4:	e1a00003 	mov	r0, r3
    8ec8:	e59f1ac8 	ldr	r1, [pc, #2760]	; 9998 <main+0xd90>
    8ecc:	ebfffefc 	bl	8ac4 <_init+0x1c4>
    8ed0:	e1a03000 	mov	r3, r0
    8ed4:	e3530000 	cmp	r3, #0
    8ed8:	1a000001 	bne	8ee4 <main+0x2dc>
			runCommand = TESTMOTORPWM;
    8edc:	e3a03011 	mov	r3, #17
    8ee0:	e50b3050 	str	r3, [fp, #-80]	; 0x50

	switch (runCommand)
    8ee4:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
    8ee8:	e2433001 	sub	r3, r3, #1
    8eec:	e3530010 	cmp	r3, #16
    8ef0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    8ef4:	ea0004c5 	b	a210 <main+0x1608>
    8ef8:	00008f3c 	.word	0x00008f3c
    8efc:	00008f88 	.word	0x00008f88
    8f00:	00008fc0 	.word	0x00008fc0
    8f04:	00008fd8 	.word	0x00008fd8
    8f08:	00009098 	.word	0x00009098
    8f0c:	000090d0 	.word	0x000090d0
    8f10:	00009148 	.word	0x00009148
    8f14:	00009204 	.word	0x00009204
    8f18:	00009338 	.word	0x00009338
    8f1c:	000094e8 	.word	0x000094e8
    8f20:	00009400 	.word	0x00009400
    8f24:	000095a0 	.word	0x000095a0
    8f28:	000096e0 	.word	0x000096e0
    8f2c:	00009864 	.word	0x00009864
    8f30:	00009cec 	.word	0x00009cec
    8f34:	00009ffc 	.word	0x00009ffc
    8f38:	0000a160 	.word	0x0000a160
	{
		case TESTADC:
		{
			float erg;
			printf("Starting ADC Test\n");
    8f3c:	e59f0a58 	ldr	r0, [pc, #2648]	; 999c <main+0xd94>
    8f40:	ebfffecd 	bl	8a7c <_init+0x17c>
			erg = g_halADC_get_ui16(1);
    8f44:	e3a00001 	mov	r0, #1
    8f48:	eb0004b8 	bl	a230 <g_halADC_get_ui16>
    8f4c:	ed0b0a17 	vstr	s0, [fp, #-92]	; 0xffffffa4
			if(erg<0)
    8f50:	ed5b7a17 	vldr	s15, [fp, #-92]	; 0xffffffa4
    8f54:	eef57ac0 	vcmpe.f32	s15, #0.0
    8f58:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8f5c:	5a000003 	bpl	8f70 <main+0x368>
			{
				printf("Fehler");
    8f60:	e59f0a38 	ldr	r0, [pc, #2616]	; 99a0 <main+0xd98>
    8f64:	ebfffeb2 	bl	8a34 <_init+0x134>
				return 1;
    8f68:	e3a03001 	mov	r3, #1
    8f6c:	ea0004ab 	b	a220 <main+0x1618>
			}
			else
			{
				printf("Ergebniss: %f\n",erg);
    8f70:	ed5b7a17 	vldr	s15, [fp, #-92]	; 0xffffffa4
    8f74:	eeb77ae7 	vcvt.f64.f32	d7, s15
    8f78:	e59f0a24 	ldr	r0, [pc, #2596]	; 99a4 <main+0xd9c>
    8f7c:	ec532b17 	vmov	r2, r3, d7
    8f80:	ebfffeab 	bl	8a34 <_init+0x134>
			}
			break;
    8f84:	ea0004a4 	b	a21c <main+0x1614>
		}
		case TESTBATTERY:
		{
			double l_batterLevel_f64=0;
    8f88:	e3a02000 	mov	r2, #0
    8f8c:	e3a03000 	mov	r3, #0
    8f90:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
			printf("Starting Battery Test\n");
    8f94:	e59f0a0c 	ldr	r0, [pc, #2572]	; 99a8 <main+0xda0>
    8f98:	ebfffeb7 	bl	8a7c <_init+0x17c>
			while(1)
			{
				g_halBatCheck_readBatStatusFromI2C_bl();
    8f9c:	eb000527 	bl	a440 <g_halBatCheck_readBatStatusFromI2C_bl>
				l_batterLevel_f64=g_halBatCheck_getBatteryStatus_f64();
    8fa0:	eb00051c 	bl	a418 <g_halBatCheck_getBatteryStatus_f64>
    8fa4:	ed0b0b19 	vstr	d0, [fp, #-100]	; 0xffffff9c
				printf("Measured Voltage: %5.3f\n",l_batterLevel_f64);
    8fa8:	e59f09fc 	ldr	r0, [pc, #2556]	; 99ac <main+0xda4>
    8fac:	e14b26d4 	ldrd	r2, [fp, #-100]	; 0xffffff9c
    8fb0:	ebfffe9f 	bl	8a34 <_init+0x134>
				sleep(1);
    8fb4:	e3a00001 	mov	r0, #1
    8fb8:	ebfffea9 	bl	8a64 <_init+0x164>
			}
    8fbc:	eafffff6 	b	8f9c <main+0x394>
			break;
		}
		case TESTGPS:
		{
			int i=0;
    8fc0:	e3a03000 	mov	r3, #0
    8fc4:	e50b3068 	str	r3, [fp, #-104]	; 0x68
			struct strPosition main_longitude;
			struct strPosition main_latitude;
			printf("Starting GPS Test\n");
    8fc8:	e59f09e0 	ldr	r0, [pc, #2528]	; 99b0 <main+0xda8>
    8fcc:	ebfffeaa 	bl	8a7c <_init+0x17c>
			while(1)
			{
				g_halGps_getData_i32();
    8fd0:	eb0005f9 	bl	a7bc <g_halGps_getData_i32>
			}
    8fd4:	eafffffd 	b	8fd0 <main+0x3c8>
			break;
		}
		case TESTIMU:
		{
			halImu_orientationValues l_imuMeasurements_st;
			printf("Starting IMU Test\n");
    8fd8:	e59f09d4 	ldr	r0, [pc, #2516]	; 99b4 <main+0xdac>
    8fdc:	ebfffea6 	bl	8a7c <_init+0x17c>
			g_halImu_initImuSensors_bl();
    8fe0:	eb000ec6 	bl	cb00 <g_halImu_initImuSensors_bl>
			while(1)
			{
				g_halImu_triggerImuReading_bl();
    8fe4:	eb000f32 	bl	ccb4 <g_halImu_triggerImuReading_bl>
				g_halImu_triggerBaroReading_bl();
    8fe8:	eb000edb 	bl	cb5c <g_halImu_triggerBaroReading_bl>
				g_halImu_triggerGyroReading_bl();
    8fec:	eb000ef4 	bl	cbc4 <g_halImu_triggerGyroReading_bl>
				g_halImu_triggerAccReading_bl();
    8ff0:	eb000f07 	bl	cc14 <g_halImu_triggerAccReading_bl>

				l_imuMeasurements_st=g_halImu_getImuValues_str();
    8ff4:	e24b3fc9 	sub	r3, fp, #804	; 0x324
    8ff8:	e1a00003 	mov	r0, r3
    8ffc:	eb000eae 	bl	cabc <g_halImu_getImuValues_str>

				printf("Pressure: %5.3f    ;    Temperature:  %5.3f\n",l_imuMeasurements_st.pressure_f64,l_imuMeasurements_st.temperature_f64);
    9000:	e24b3fb5 	sub	r3, fp, #724	; 0x2d4
    9004:	e1c320d0 	ldrd	r2, [r3]
    9008:	e24b1fb7 	sub	r1, fp, #732	; 0x2dc
    900c:	e1c100d0 	ldrd	r0, [r1]
    9010:	e1cd00f0 	strd	r0, [sp]
    9014:	e59f099c 	ldr	r0, [pc, #2460]	; 99b8 <main+0xdb0>
    9018:	ebfffe85 	bl	8a34 <_init+0x134>
				printf("roll: %5.3f    ;    pitch:  %5.3f    ;    yaw:  %5.3f\n",l_imuMeasurements_st.gyro.roll_f64, l_imuMeasurements_st.gyro.pitch_f64, l_imuMeasurements_st.gyro.yaw_f64);
    901c:	e24b3fbd 	sub	r3, fp, #756	; 0x2f4
    9020:	e1c320d0 	ldrd	r2, [r3]
    9024:	e24b5fbb 	sub	r5, fp, #748	; 0x2ec
    9028:	e1c540d0 	ldrd	r4, [r5]
    902c:	e24b1fb9 	sub	r1, fp, #740	; 0x2e4
    9030:	e1c100d0 	ldrd	r0, [r1]
    9034:	e1cd40f0 	strd	r4, [sp]
    9038:	e1cd00f8 	strd	r0, [sp, #8]
    903c:	e59f0978 	ldr	r0, [pc, #2424]	; 99bc <main+0xdb4>
    9040:	ebfffe7b 	bl	8a34 <_init+0x134>
				printf("X: %5.3f ; Y:  %5.3f ; Z:  %5.3f\n",l_imuMeasurements_st.acc.x_f64,l_imuMeasurements_st.acc.y_f64,l_imuMeasurements_st.acc.z_f64);
    9044:	e24b3fc9 	sub	r3, fp, #804	; 0x324
    9048:	e1c320d0 	ldrd	r2, [r3]
    904c:	e24b5fc7 	sub	r5, fp, #796	; 0x31c
    9050:	e1c540d0 	ldrd	r4, [r5]
    9054:	e24b1fc5 	sub	r1, fp, #788	; 0x314
    9058:	e1c100d0 	ldrd	r0, [r1]
    905c:	e1cd40f0 	strd	r4, [sp]
    9060:	e1cd00f8 	strd	r0, [sp, #8]
    9064:	e59f0954 	ldr	r0, [pc, #2388]	; 99c0 <main+0xdb8>
    9068:	ebfffe71 	bl	8a34 <_init+0x134>
				printf("X: %5.10f ; Y:  %5.10f ; Z:  %5.10f\n\n\n\n",l_imuMeasurements_st.mag.x_f64,l_imuMeasurements_st.mag.y_f64,l_imuMeasurements_st.mag.z_f64);
    906c:	e24b3fc3 	sub	r3, fp, #780	; 0x30c
    9070:	e1c320d0 	ldrd	r2, [r3]
    9074:	e24b5fc1 	sub	r5, fp, #772	; 0x304
    9078:	e1c540d0 	ldrd	r4, [r5]
    907c:	e24b1fbf 	sub	r1, fp, #764	; 0x2fc
    9080:	e1c100d0 	ldrd	r0, [r1]
    9084:	e1cd40f0 	strd	r4, [sp]
    9088:	e1cd00f8 	strd	r0, [sp, #8]
    908c:	e59f0930 	ldr	r0, [pc, #2352]	; 99c4 <main+0xdbc>
    9090:	ebfffe67 	bl	8a34 <_init+0x134>
			}
    9094:	eaffffd2 	b	8fe4 <main+0x3dc>
			break;
		}
		case TESTLASER:
		{
			double dist=0;
    9098:	e3a02000 	mov	r2, #0
    909c:	e3a03000 	mov	r3, #0
    90a0:	e14b27f4 	strd	r2, [fp, #-116]	; 0xffffff8c
			printf("Starting LASER Test\n");
    90a4:	e59f091c 	ldr	r0, [pc, #2332]	; 99c8 <main+0xdc0>
    90a8:	ebfffe73 	bl	8a7c <_init+0x17c>
			while(1)
			{
				g_LIDAR_readDistanceFromI2C_i32();
    90ac:	eb000f4f 	bl	cdf0 <g_LIDAR_readDistanceFromI2C_i32>
				//usleep(100000);

				dist=g_LIDAR_getDistance_f64();
    90b0:	eb000f44 	bl	cdc8 <g_LIDAR_getDistance_f64>
    90b4:	ed0b0b1d 	vstr	d0, [fp, #-116]	; 0xffffff8c

				printf("Distance: %4.2f m\n",dist);
    90b8:	e59f090c 	ldr	r0, [pc, #2316]	; 99cc <main+0xdc4>
    90bc:	e14b27d4 	ldrd	r2, [fp, #-116]	; 0xffffff8c
    90c0:	ebfffe5b 	bl	8a34 <_init+0x134>
				usleep(500*1000);
    90c4:	e59f0904 	ldr	r0, [pc, #2308]	; 99d0 <main+0xdc8>
    90c8:	ebfffe32 	bl	8998 <_init+0x98>
			}
    90cc:	eafffff6 	b	90ac <main+0x4a4>
			break;
		}
		case TESTUART:
		{
			char rec_char='z';
    90d0:	e3a0307a 	mov	r3, #122	; 0x7a
    90d4:	e54b3135 	strb	r3, [fp, #-309]	; 0x135
			char *ptr_rec_char=&rec_char;
    90d8:	e24b3f4d 	sub	r3, fp, #308	; 0x134
    90dc:	e2433001 	sub	r3, r3, #1
    90e0:	e50b3078 	str	r3, [fp, #-120]	; 0x78
			printf("Starting UART Test\n");
    90e4:	e59f08e8 	ldr	r0, [pc, #2280]	; 99d4 <main+0xdcc>
    90e8:	ebfffe63 	bl	8a7c <_init+0x17c>
			FILE *fp=(FILE *)-1;
    90ec:	e3e03000 	mvn	r3, #0
    90f0:	e50b307c 	str	r3, [fp, #-124]	; 0x7c
			//open file to write received data from GPS
			fp = (FILE *)open("GPS_logging.txt",100 | 01,400);
    90f4:	e59f08dc 	ldr	r0, [pc, #2268]	; 99d8 <main+0xdd0>
    90f8:	e3a01065 	mov	r1, #101	; 0x65
    90fc:	e3a02e19 	mov	r2, #400	; 0x190
    9100:	ebfffe06 	bl	8920 <_init+0x20>
    9104:	e1a03000 	mov	r3, r0
    9108:	e50b307c 	str	r3, [fp, #-124]	; 0x7c
			sleep(1);
    910c:	e3a00001 	mov	r0, #1
    9110:	ebfffe53 	bl	8a64 <_init+0x164>
			while(1)
			{
				rec_char=g_lldUart_readByte_ch();
    9114:	eb0010a4 	bl	d3ac <g_lldUart_readByte_ch>
    9118:	e1a03000 	mov	r3, r0
    911c:	e54b3135 	strb	r3, [fp, #-309]	; 0x135
				//save read values if filestream is opened
				if (fp != (FILE *)-1)
    9120:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    9124:	e3730001 	cmn	r3, #1
    9128:	0a000005 	beq	9144 <main+0x53c>
				{
					write((int)fp,ptr_rec_char,1);
    912c:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    9130:	e1a00003 	mov	r0, r3
    9134:	e51b1078 	ldr	r1, [fp, #-120]	; 0x78
    9138:	e3a02001 	mov	r2, #1
    913c:	ebfffe1e 	bl	89bc <_init+0xbc>
				}
			}
    9140:	eafffff3 	b	9114 <main+0x50c>
    9144:	eafffff2 	b	9114 <main+0x50c>
			fclose(fp);
			break;
		}
		case TESTMATLABIMU:
		{
			printf("Starting IMU Matlab Test\n");
    9148:	e59f088c 	ldr	r0, [pc, #2188]	; 99dc <main+0xdd4>
    914c:	ebfffe4a 	bl	8a7c <_init+0x17c>
			unsigned char	l_remoteHostAddr_rg4ui8[4] 	= {192,168,22,160};
    9150:	e59f2944 	ldr	r2, [pc, #2372]	; 9a9c <main+0xe94>
    9154:	e24b3f4f 	sub	r3, fp, #316	; 0x13c
    9158:	e5920000 	ldr	r0, [r2]
    915c:	e5830000 	str	r0, [r3]
			unsigned short	l_remoteHostPort_ui16		= 5000;
    9160:	e59f3938 	ldr	r3, [pc, #2360]	; 9aa0 <main+0xe98>
    9164:	e14b37be 	strh	r3, [fp, #-126]	; 0xffffff82
			int				l_udpSocket_i32;
			unsigned int	l_sendState_bl;

			// open udp connection
			l_udpSocket_i32 = g_halMatlab_initConnection_i32( l_remoteHostAddr_rg4ui8, l_remoteHostPort_ui16 );
    9168:	e24b2f4f 	sub	r2, fp, #316	; 0x13c
    916c:	e15b37be 	ldrh	r3, [fp, #-126]	; 0xffffff82
    9170:	e1a00002 	mov	r0, r2
    9174:	e1a01003 	mov	r1, r3
    9178:	eb00120d 	bl	d9b4 <g_halMatlab_initConnection_i32>
    917c:	e50b0084 	str	r0, [fp, #-132]	; 0x84

			halImu_orientationValues l_imuMeasurements_st;
			g_halImu_initImuSensors_bl();
    9180:	eb000e5e 	bl	cb00 <g_halImu_initImuSensors_bl>

			while(1)
			{
				g_halImu_triggerImuReading_bl();
    9184:	eb000eca 	bl	ccb4 <g_halImu_triggerImuReading_bl>
				g_halImu_triggerBaroReading_bl();
    9188:	eb000e73 	bl	cb5c <g_halImu_triggerBaroReading_bl>
				g_halImu_triggerGyroReading_bl();
    918c:	eb000e8c 	bl	cbc4 <g_halImu_triggerGyroReading_bl>
				g_halImu_triggerAccReading_bl();
    9190:	eb000e9f 	bl	cc14 <g_halImu_triggerAccReading_bl>

				l_imuMeasurements_st=g_halImu_getImuValues_str();
    9194:	e24b3fc9 	sub	r3, fp, #804	; 0x324
    9198:	e1a00003 	mov	r0, r3
    919c:	eb000e46 	bl	cabc <g_halImu_getImuValues_str>

				l_sendState_bl = g_halMatlab_sendImuState_bl(l_udpSocket_i32, l_imuMeasurements_st);
    91a0:	e1a0100d 	mov	r1, sp
    91a4:	e24b2fc7 	sub	r2, fp, #796	; 0x31c
    91a8:	e3a03050 	mov	r3, #80	; 0x50
    91ac:	e1a00001 	mov	r0, r1
    91b0:	e1a01002 	mov	r1, r2
    91b4:	e1a02003 	mov	r2, r3
    91b8:	ebfffe1a 	bl	8a28 <_init+0x128>
    91bc:	e24b3fc9 	sub	r3, fp, #804	; 0x324
    91c0:	e893000c 	ldm	r3, {r2, r3}
    91c4:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    91c8:	eb0010ab 	bl	d47c <g_halMatlab_sendImuState_bl>
    91cc:	e1a03000 	mov	r3, r0
    91d0:	e50b3088 	str	r3, [fp, #-136]	; 0x88
				printf("Temp %f\n", l_imuMeasurements_st.temperature_f64);
    91d4:	e24b3fb7 	sub	r3, fp, #732	; 0x2dc
    91d8:	e1c320d0 	ldrd	r2, [r3]
    91dc:	e59f07fc 	ldr	r0, [pc, #2044]	; 99e0 <main+0xdd8>
    91e0:	ebfffe13 	bl	8a34 <_init+0x134>
				if ( l_sendState_bl != M_HAL_MATLAB_SUCCESS_UI8 )
    91e4:	e51b3088 	ldr	r3, [fp, #-136]	; 0x88
    91e8:	e3530000 	cmp	r3, #0
    91ec:	0a000001 	beq	91f8 <main+0x5f0>
				{
					printf("UDP-Packet error\n");
    91f0:	e59f08dc 	ldr	r0, [pc, #2268]	; 9ad4 <main+0xecc>
    91f4:	ebfffe20 	bl	8a7c <_init+0x17c>
				}
				usleep( 20000 ); //20ms = 50Hz
    91f8:	e59f08d8 	ldr	r0, [pc, #2264]	; 9ad8 <main+0xed0>
    91fc:	ebfffde5 	bl	8998 <_init+0x98>
			}
    9200:	eaffffdf 	b	9184 <main+0x57c>
			g_halMatlab_closeSocket_bl(l_udpSocket_i32);
			break;
		}
		case TESTMATLABKALMAN:
		{
			printf("Starting Kalman Orientation Matlab Test\n");
    9204:	e59f07d8 	ldr	r0, [pc, #2008]	; 99e4 <main+0xddc>
    9208:	ebfffe1b 	bl	8a7c <_init+0x17c>
			unsigned char	l_remoteHostAddr_rg4ui8[4] 	= {192,168,22,160};
    920c:	e59f2888 	ldr	r2, [pc, #2184]	; 9a9c <main+0xe94>
    9210:	e24b3d05 	sub	r3, fp, #320	; 0x140
    9214:	e5920000 	ldr	r0, [r2]
    9218:	e5830000 	str	r0, [r3]
			unsigned short	l_remoteHostPort_ui16		= 5000;
    921c:	e59f387c 	ldr	r3, [pc, #2172]	; 9aa0 <main+0xe98>
    9220:	e14b38ba 	strh	r3, [fp, #-138]	; 0xffffff76
			sigOri_orientationAngles	l_kalmanAngles_st;
			sigOri_orientationAngles	l_compAngles_st;
			halImu_orientationValues	l_imuStates_st;

			// open udp connection
			l_udpSocket_i32 = g_halMatlab_initConnection_i32( l_remoteHostAddr_rg4ui8, l_remoteHostPort_ui16 );
    9224:	e24b2d05 	sub	r2, fp, #320	; 0x140
    9228:	e15b38ba 	ldrh	r3, [fp, #-138]	; 0xffffff76
    922c:	e1a00002 	mov	r0, r2
    9230:	e1a01003 	mov	r1, r3
    9234:	eb0011de 	bl	d9b4 <g_halMatlab_initConnection_i32>
    9238:	e50b0090 	str	r0, [fp, #-144]	; 0x90

			g_sigOri_initMatrices_bl();
    923c:	eb001848 	bl	f364 <g_sigOri_initMatrices_bl>
			g_sigOri_initImuSensors_bl();
    9240:	eb00183c 	bl	f338 <g_sigOri_initImuSensors_bl>

			while(1)
			{
				g_sigOri_calcKalmanOrientation_bl();
    9244:	eb001a2e 	bl	fb04 <g_sigOri_calcKalmanOrientation_bl>
				g_sigOri_calcComplementaryOrientation_bl();
    9248:	eb001b08 	bl	fe70 <g_sigOri_calcComplementaryOrientation_bl>

				l_kalmanAngles_st 	= g_sigOri_getAnglesKalman_bl();
    924c:	eb001805 	bl	f268 <g_sigOri_getAnglesKalman_bl>
    9250:	eeb05b40 	vmov.f64	d5, d0
    9254:	eeb06b41 	vmov.f64	d6, d1
    9258:	eeb07b42 	vmov.f64	d7, d2
    925c:	ed0b5b57 	vstr	d5, [fp, #-348]	; 0xfffffea4
    9260:	ed0b6b55 	vstr	d6, [fp, #-340]	; 0xfffffeac
    9264:	ed0b7b53 	vstr	d7, [fp, #-332]	; 0xfffffeb4
				l_compAngles_st		= g_sigOri_getAnglesComplementary_bl();
    9268:	eb0017ca 	bl	f198 <g_sigOri_getAnglesComplementary_bl>
    926c:	eeb05b40 	vmov.f64	d5, d0
    9270:	eeb06b41 	vmov.f64	d6, d1
    9274:	eeb07b42 	vmov.f64	d7, d2
    9278:	ed0b5b5d 	vstr	d5, [fp, #-372]	; 0xfffffe8c
    927c:	ed0b6b5b 	vstr	d6, [fp, #-364]	; 0xfffffe94
    9280:	ed0b7b59 	vstr	d7, [fp, #-356]	; 0xfffffe9c
				l_imuStates_st 		= g_halImu_getImuValues_str();
    9284:	e24b3fc9 	sub	r3, fp, #804	; 0x324
    9288:	e1a00003 	mov	r0, r3
    928c:	eb000e0a 	bl	cabc <g_halImu_getImuValues_str>

				printf("Temp%f\nMag%f",l_imuStates_st.temperature_f64, l_imuStates_st.mag.x_f64);
    9290:	e24b3fb7 	sub	r3, fp, #732	; 0x2dc
    9294:	e1c320d0 	ldrd	r2, [r3]
    9298:	e24b1fc3 	sub	r1, fp, #780	; 0x30c
    929c:	e1c100d0 	ldrd	r0, [r1]
    92a0:	e1cd00f0 	strd	r0, [sp]
    92a4:	e59f073c 	ldr	r0, [pc, #1852]	; 99e8 <main+0xde0>
    92a8:	ebfffde1 	bl	8a34 <_init+0x134>
				l_sendState_bl = g_halMatlab_sendSigAllStates_bl(	l_udpSocket_i32,
    92ac:	ed1bdb57 	vldr	d13, [fp, #-348]	; 0xfffffea4
    92b0:	ed1bcb55 	vldr	d12, [fp, #-340]	; 0xfffffeac
    92b4:	ed1bbb53 	vldr	d11, [fp, #-332]	; 0xfffffeb4
    92b8:	ed1bab5d 	vldr	d10, [fp, #-372]	; 0xfffffe8c
    92bc:	ed1b9b5b 	vldr	d9, [fp, #-364]	; 0xfffffe94
    92c0:	ed1b8b59 	vldr	d8, [fp, #-356]	; 0xfffffe9c
    92c4:	e1a0100d 	mov	r1, sp
    92c8:	e24b2fc7 	sub	r2, fp, #796	; 0x31c
    92cc:	e3a03050 	mov	r3, #80	; 0x50
    92d0:	e1a00001 	mov	r0, r1
    92d4:	e1a01002 	mov	r1, r2
    92d8:	e1a02003 	mov	r2, r3
    92dc:	ebfffdd1 	bl	8a28 <_init+0x128>
    92e0:	e24b3fc9 	sub	r3, fp, #804	; 0x324
    92e4:	e893000c 	ldm	r3, {r2, r3}
    92e8:	e51b0090 	ldr	r0, [fp, #-144]	; 0x90
    92ec:	eeb00b4d 	vmov.f64	d0, d13
    92f0:	eeb01b4c 	vmov.f64	d1, d12
    92f4:	eeb02b4b 	vmov.f64	d2, d11
    92f8:	eeb03b4a 	vmov.f64	d3, d10
    92fc:	eeb04b49 	vmov.f64	d4, d9
    9300:	eeb05b48 	vmov.f64	d5, d8
    9304:	eb0012f1 	bl	ded0 <g_halMatlab_sendSigAllStates_bl>
    9308:	e50b0094 	str	r0, [fp, #-148]	; 0x94
																	l_imuStates_st,
																	l_kalmanAngles_st,
																	l_compAngles_st);
				if ( l_sendState_bl != M_HAL_MATLAB_SUCCESS_UI8 )
    930c:	e51b3094 	ldr	r3, [fp, #-148]	; 0x94
    9310:	e3530000 	cmp	r3, #0
    9314:	0a000002 	beq	9324 <main+0x71c>
				{
					printf("UDP-Packet error\n");
    9318:	e59f07b4 	ldr	r0, [pc, #1972]	; 9ad4 <main+0xecc>
    931c:	ebfffdd6 	bl	8a7c <_init+0x17c>
    9320:	ea000001 	b	932c <main+0x724>
				}
				else
				{
					printf("Sent packet\n");
    9324:	e59f06c0 	ldr	r0, [pc, #1728]	; 99ec <main+0xde4>
    9328:	ebfffdd3 	bl	8a7c <_init+0x17c>
				}
				usleep( 20000 ); //20ms = 50Hz
    932c:	e59f07a4 	ldr	r0, [pc, #1956]	; 9ad8 <main+0xed0>
    9330:	ebfffd98 	bl	8998 <_init+0x98>
			}
    9334:	eaffffc2 	b	9244 <main+0x63c>
			break;
		}
		case TESTACCMAG:
		{
			halAccmag_dataContainer l_sensorData_st;
			printf("IMU Acceleration and Compass Test\n");
    9338:	e59f06b0 	ldr	r0, [pc, #1712]	; 99f0 <main+0xde8>
    933c:	ebfffdce 	bl	8a7c <_init+0x17c>
			if ( g_halAccmag_initSensor_bl() != M_HAL_ACCMAG_SUCCESS_BL )
    9340:	eb000adb 	bl	beb4 <g_halAccmag_initSensor_bl>
    9344:	e1a03000 	mov	r3, r0
    9348:	e3530000 	cmp	r3, #0
    934c:	0a000003 	beq	9360 <main+0x758>
			{
				printf( "Init failed!\n" );
    9350:	e59f069c 	ldr	r0, [pc, #1692]	; 99f4 <main+0xdec>
    9354:	ebfffdc8 	bl	8a7c <_init+0x17c>
				return 1;
    9358:	e3a03001 	mov	r3, #1
    935c:	ea0003af 	b	a220 <main+0x1618>
			}

			while (1)
			{
				if ( g_halAccmag_triggerAccUpdate_bl() != M_HAL_ACCMAG_SUCCESS_BL )
    9360:	eb000afb 	bl	bf54 <g_halAccmag_triggerAccUpdate_bl>
    9364:	e1a03000 	mov	r3, r0
    9368:	e3530000 	cmp	r3, #0
    936c:	0a000003 	beq	9380 <main+0x778>
				{
					printf( "ACC update failed!\n" );
    9370:	e59f0680 	ldr	r0, [pc, #1664]	; 99f8 <main+0xdf0>
    9374:	ebfffdc0 	bl	8a7c <_init+0x17c>
					return 1;
    9378:	e3a03001 	mov	r3, #1
    937c:	ea0003a7 	b	a220 <main+0x1618>
				}
				if ( g_halAccmag_triggerMagUpdate_bl() != M_HAL_ACCMAG_SUCCESS_BL )
    9380:	eb000afa 	bl	bf70 <g_halAccmag_triggerMagUpdate_bl>
    9384:	e1a03000 	mov	r3, r0
    9388:	e3530000 	cmp	r3, #0
    938c:	0a000003 	beq	93a0 <main+0x798>
				{
					printf( "MAG update failed!\n" );
    9390:	e59f0664 	ldr	r0, [pc, #1636]	; 99fc <main+0xdf4>
    9394:	ebfffdb8 	bl	8a7c <_init+0x17c>
					return 1;
    9398:	e3a03001 	mov	r3, #1
    939c:	ea00039f 	b	a220 <main+0x1618>
				}

				l_sensorData_st = g_halAccmag_getAccMagContainer_st();
    93a0:	e24b3fc9 	sub	r3, fp, #804	; 0x324
    93a4:	e1a00003 	mov	r0, r3
    93a8:	eb000b2a 	bl	c058 <g_halAccmag_getAccMagContainer_st>

				printf("Acc - x:%f y:%lf z:%f | Mag - x:%.10f y:%.10f z:%.10f\n",
    93ac:	e24b3fc9 	sub	r3, fp, #804	; 0x324
    93b0:	e1c320d0 	ldrd	r2, [r3]
    93b4:	ed1b7bc7 	vldr	d7, [fp, #-796]	; 0xfffffce4
    93b8:	e24b9fc5 	sub	r9, fp, #788	; 0x314
    93bc:	e1c980d0 	ldrd	r8, [r9]
    93c0:	e24b7fc3 	sub	r7, fp, #780	; 0x30c
    93c4:	e1c760d0 	ldrd	r6, [r7]
    93c8:	e24b5fc1 	sub	r5, fp, #772	; 0x304
    93cc:	e1c540d0 	ldrd	r4, [r5]
    93d0:	e24b1fbf 	sub	r1, fp, #764	; 0x2fc
    93d4:	e1c100d0 	ldrd	r0, [r1]
    93d8:	ed8d7b00 	vstr	d7, [sp]
    93dc:	e1cd80f8 	strd	r8, [sp, #8]
    93e0:	e1cd61f0 	strd	r6, [sp, #16]
    93e4:	e1cd41f8 	strd	r4, [sp, #24]
    93e8:	e1cd02f0 	strd	r0, [sp, #32]
    93ec:	e59f060c 	ldr	r0, [pc, #1548]	; 9a00 <main+0xdf8>
    93f0:	ebfffd8f 	bl	8a34 <_init+0x134>
						l_sensorData_st.mag.x_f64,
						l_sensorData_st.mag.y_f64,
						l_sensorData_st.mag.z_f64
						);

				usleep( 250000 );
    93f4:	e59f0608 	ldr	r0, [pc, #1544]	; 9a04 <main+0xdfc>
    93f8:	ebfffd66 	bl	8998 <_init+0x98>
			}
    93fc:	eaffffd7 	b	9360 <main+0x758>
			break;
		}
		case TESTBARO:
		{
			double pressure=0;
    9400:	e3a02000 	mov	r2, #0
    9404:	e3a03000 	mov	r3, #0
    9408:	e14b29fc 	strd	r2, [fp, #-156]	; 0xffffff64
			double temp=0;
    940c:	e3a02000 	mov	r2, #0
    9410:	e3a03000 	mov	r3, #0
    9414:	e14b2af4 	strd	r2, [fp, #-164]	; 0xffffff5c
			sigOri_orientationAngles GyroValues;
			double Gyrotemp=0;
    9418:	e3a02000 	mov	r2, #0
    941c:	e3a03000 	mov	r3, #0
    9420:	e14b2afc 	strd	r2, [fp, #-172]	; 0xffffff54
			g_halBaro_initBaro_i32();
    9424:	eb000b1d 	bl	c0a0 <g_halBaro_initBaro_i32>
			g_halGyro_initGyro_i32();
    9428:	eb000c02 	bl	c438 <g_halGyro_initGyro_i32>
			printf("IMU Barometer pressure test");
    942c:	e59f05d4 	ldr	r0, [pc, #1492]	; 9a08 <main+0xe00>
    9430:	ebfffd7f 	bl	8a34 <_init+0x134>
			while(1)
			{
				g_halBaro_readPressureFromI2C_i32();
    9434:	eb000b57 	bl	c198 <g_halBaro_readPressureFromI2C_i32>
				usleep(100000);
    9438:	e59f05cc 	ldr	r0, [pc, #1484]	; 9a0c <main+0xe04>
    943c:	ebfffd55 	bl	8998 <_init+0x98>
				g_halBaro_readTemperatureFromI2C_i32();
    9440:	eb000ba7 	bl	c2e4 <g_halBaro_readTemperatureFromI2C_i32>
				usleep(100000);
    9444:	e59f05c0 	ldr	r0, [pc, #1472]	; 9a0c <main+0xe04>
    9448:	ebfffd52 	bl	8998 <_init+0x98>
				pressure=g_halBaro_getPressure_f64();
    944c:	eb000b3d 	bl	c148 <g_halBaro_getPressure_f64>
    9450:	ed0b0b27 	vstr	d0, [fp, #-156]	; 0xffffff64
				temp=g_halBaro_getTemperature_f64();
    9454:	eb000b45 	bl	c170 <g_halBaro_getTemperature_f64>
    9458:	ed0b0b29 	vstr	d0, [fp, #-164]	; 0xffffff5c
				printf("Pressure: %5.3f    ;    Temperature:  %5.3f\n",pressure,temp);
    945c:	e14b2ad4 	ldrd	r2, [fp, #-164]	; 0xffffff5c
    9460:	e1cd20f0 	strd	r2, [sp]
    9464:	e59f054c 	ldr	r0, [pc, #1356]	; 99b8 <main+0xdb0>
    9468:	e14b29dc 	ldrd	r2, [fp, #-156]	; 0xffffff64
    946c:	ebfffd70 	bl	8a34 <_init+0x134>
				usleep(100000);
    9470:	e59f0594 	ldr	r0, [pc, #1428]	; 9a0c <main+0xe04>
    9474:	ebfffd47 	bl	8998 <_init+0x98>


				g_halGyro_readGyroscopeFromI2C_i32();
    9478:	eb000c38 	bl	c560 <g_halGyro_readGyroscopeFromI2C_i32>
				usleep(100000);
    947c:	e59f0588 	ldr	r0, [pc, #1416]	; 9a0c <main+0xe04>
    9480:	ebfffd44 	bl	8998 <_init+0x98>
				g_halGyro_readTemperatureFromI2C_i32();
    9484:	eb000cd8 	bl	c7ec <g_halGyro_readTemperatureFromI2C_i32>
				usleep(100000);
    9488:	e59f057c 	ldr	r0, [pc, #1404]	; 9a0c <main+0xe04>
    948c:	ebfffd41 	bl	8998 <_init+0x98>
				GyroValues=g_halGyro_getGyroscope_st();
    9490:	eb000c12 	bl	c4e0 <g_halGyro_getGyroscope_st>
    9494:	eeb05b40 	vmov.f64	d5, d0
    9498:	eeb06b41 	vmov.f64	d6, d1
    949c:	eeb07b42 	vmov.f64	d7, d2
    94a0:	ed0b5b63 	vstr	d5, [fp, #-396]	; 0xfffffe74
    94a4:	ed0b6b61 	vstr	d6, [fp, #-388]	; 0xfffffe7c
    94a8:	ed0b7b5f 	vstr	d7, [fp, #-380]	; 0xfffffe84
				Gyrotemp=g_halGyro_getTemperature_f64();
    94ac:	eb000c21 	bl	c538 <g_halGyro_getTemperature_f64>
    94b0:	ed0b0b2b 	vstr	d0, [fp, #-172]	; 0xffffff54
				printf("roll: %5.3f    ;    pitch:  %5.3f    ;    yaw:  %5.3f\n",GyroValues.roll_f64, GyroValues.pitch_f64, GyroValues.yaw_f64);
    94b4:	e24b3f63 	sub	r3, fp, #396	; 0x18c
    94b8:	e1c320d0 	ldrd	r2, [r3]
    94bc:	e24b5f61 	sub	r5, fp, #388	; 0x184
    94c0:	e1c540d0 	ldrd	r4, [r5]
    94c4:	e24b1f5f 	sub	r1, fp, #380	; 0x17c
    94c8:	e1c100d0 	ldrd	r0, [r1]
    94cc:	e1cd40f0 	strd	r4, [sp]
    94d0:	e1cd00f8 	strd	r0, [sp, #8]
    94d4:	e59f04e0 	ldr	r0, [pc, #1248]	; 99bc <main+0xdb4>
    94d8:	ebfffd55 	bl	8a34 <_init+0x134>
				usleep(100000);
    94dc:	e59f0528 	ldr	r0, [pc, #1320]	; 9a0c <main+0xe04>
    94e0:	ebfffd2c 	bl	8998 <_init+0x98>
			}
    94e4:	eaffffd2 	b	9434 <main+0x82c>
			break;
		}
		case TESTGYRO:
		{
			double pressure=0;
    94e8:	e3a02000 	mov	r2, #0
    94ec:	e3a03000 	mov	r3, #0
    94f0:	e14b2bf4 	strd	r2, [fp, #-180]	; 0xffffff4c
			double temp=0;
    94f4:	e3a02000 	mov	r2, #0
    94f8:	e3a03000 	mov	r3, #0
    94fc:	e14b2bfc 	strd	r2, [fp, #-188]	; 0xffffff44
			sigOri_orientationAngles GyroValues;
			double Gyrotemp=0;
    9500:	e3a02000 	mov	r2, #0
    9504:	e3a03000 	mov	r3, #0
    9508:	e14b2cf4 	strd	r2, [fp, #-196]	; 0xffffff3c
			printf("IMU Gyroscope test\n");
    950c:	e59f04fc 	ldr	r0, [pc, #1276]	; 9a10 <main+0xe08>
    9510:	ebfffd59 	bl	8a7c <_init+0x17c>
			g_halBaro_initBaro_i32();
    9514:	eb000ae1 	bl	c0a0 <g_halBaro_initBaro_i32>
			g_halGyro_initGyro_i32();
    9518:	eb000bc6 	bl	c438 <g_halGyro_initGyro_i32>
			while(1)
			{
				g_halBaro_readPressureFromI2C_i32();
    951c:	eb000b1d 	bl	c198 <g_halBaro_readPressureFromI2C_i32>
				//usleep(100000);
				g_halBaro_readTemperatureFromI2C_i32();
    9520:	eb000b6f 	bl	c2e4 <g_halBaro_readTemperatureFromI2C_i32>
				//usleep(100000);
				pressure=g_halBaro_getPressure_f64();
    9524:	eb000b07 	bl	c148 <g_halBaro_getPressure_f64>
    9528:	ed0b0b2d 	vstr	d0, [fp, #-180]	; 0xffffff4c
				temp=g_halBaro_getTemperature_f64();
    952c:	eb000b0f 	bl	c170 <g_halBaro_getTemperature_f64>
    9530:	ed0b0b2f 	vstr	d0, [fp, #-188]	; 0xffffff44
				printf("Pressure: %5.3f    ;    Temperature:  %5.3f\n",pressure,temp);
    9534:	e14b2bdc 	ldrd	r2, [fp, #-188]	; 0xffffff44
    9538:	e1cd20f0 	strd	r2, [sp]
    953c:	e59f0474 	ldr	r0, [pc, #1140]	; 99b8 <main+0xdb0>
    9540:	e14b2bd4 	ldrd	r2, [fp, #-180]	; 0xffffff4c
    9544:	ebfffd3a 	bl	8a34 <_init+0x134>
				//usleep(100000);
				g_halGyro_readGyroscopeFromI2C_i32();
    9548:	eb000c04 	bl	c560 <g_halGyro_readGyroscopeFromI2C_i32>
				//usleep(100000);
				g_halGyro_readTemperatureFromI2C_i32();
    954c:	eb000ca6 	bl	c7ec <g_halGyro_readTemperatureFromI2C_i32>
				//usleep(100000);
				GyroValues=g_halGyro_getGyroscope_st();
    9550:	eb000be2 	bl	c4e0 <g_halGyro_getGyroscope_st>
    9554:	eeb05b40 	vmov.f64	d5, d0
    9558:	eeb06b41 	vmov.f64	d6, d1
    955c:	eeb07b42 	vmov.f64	d7, d2
    9560:	ed0b5b69 	vstr	d5, [fp, #-420]	; 0xfffffe5c
    9564:	ed0b6b67 	vstr	d6, [fp, #-412]	; 0xfffffe64
    9568:	ed0b7b65 	vstr	d7, [fp, #-404]	; 0xfffffe6c
				Gyrotemp=g_halGyro_getTemperature_f64();
    956c:	eb000bf1 	bl	c538 <g_halGyro_getTemperature_f64>
    9570:	ed0b0b31 	vstr	d0, [fp, #-196]	; 0xffffff3c
				printf("roll: %5.3f    ;    pitch:  %5.3f    ;    yaw:  %5.3f\n",GyroValues.roll_f64, GyroValues.pitch_f64, GyroValues.yaw_f64);
    9574:	e24b3f69 	sub	r3, fp, #420	; 0x1a4
    9578:	e1c320d0 	ldrd	r2, [r3]
    957c:	e24b5f67 	sub	r5, fp, #412	; 0x19c
    9580:	e1c540d0 	ldrd	r4, [r5]
    9584:	e24b1f65 	sub	r1, fp, #404	; 0x194
    9588:	e1c100d0 	ldrd	r0, [r1]
    958c:	e1cd40f0 	strd	r4, [sp]
    9590:	e1cd00f8 	strd	r0, [sp, #8]
    9594:	e59f0420 	ldr	r0, [pc, #1056]	; 99bc <main+0xdb4>
    9598:	ebfffd25 	bl	8a34 <_init+0x134>
				//usleep(100000);
			}
    959c:	eaffffde 	b	951c <main+0x914>
			//static	double l_MatrixA_f64[1][3]={{1,2,9}};
			static	double l_MatrixB_f64[3][3]={{3,6,7},{2,5,9},{4,6,8}};
			//static	double l_MatrixB_f64[3][2]={{3,6},{2,5},{4,6}};
			static	double l_outputMatrix_f64[3][3]={{0,0,0},{0,0,0},{0,0,0}};
			//static	double l_outputMatrix_f64[3][2]={{0,0},{0,0},{0,0}};
			printf("matrix lib function test\n");
    95a0:	e59f046c 	ldr	r0, [pc, #1132]	; 9a14 <main+0xe0c>
    95a4:	ebfffd34 	bl	8a7c <_init+0x17c>
			while(1)
			{
				g_sigMath_matrixEye_bl((double*)l_outputMatrix_f64,3,3);
    95a8:	e59f0468 	ldr	r0, [pc, #1128]	; 9a18 <main+0xe10>
    95ac:	e3a01003 	mov	r1, #3
    95b0:	e3a02003 	mov	r2, #3
    95b4:	eb0016b2 	bl	f084 <g_sigMath_matrixEye_bl>
				sleep(1);
    95b8:	e3a00001 	mov	r0, #1
    95bc:	ebfffd28 	bl	8a64 <_init+0x164>
				g_sigMath_matrixInitialize_bl((double*)l_outputMatrix_f64,3,3,1);
    95c0:	e59f0450 	ldr	r0, [pc, #1104]	; 9a18 <main+0xe10>
    95c4:	e3a01003 	mov	r1, #3
    95c8:	e3a02003 	mov	r2, #3
    95cc:	ed9f0bdd 	vldr	d0, [pc, #884]	; 9948 <main+0xd40>
    95d0:	eb00167e 	bl	efd0 <g_sigMath_matrixInitialize_bl>
				sleep(1);
    95d4:	e3a00001 	mov	r0, #1
    95d8:	ebfffd21 	bl	8a64 <_init+0x164>
				g_sigMath_matrixMultiplikation_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3,(double*)l_MatrixB_f64,3,3);
    95dc:	e59f3438 	ldr	r3, [pc, #1080]	; 9a1c <main+0xe14>
    95e0:	e58d3000 	str	r3, [sp]
    95e4:	e3a03003 	mov	r3, #3
    95e8:	e58d3004 	str	r3, [sp, #4]
    95ec:	e3a03003 	mov	r3, #3
    95f0:	e58d3008 	str	r3, [sp, #8]
    95f4:	e59f041c 	ldr	r0, [pc, #1052]	; 9a18 <main+0xe10>
    95f8:	e59f1420 	ldr	r1, [pc, #1056]	; 9a20 <main+0xe18>
    95fc:	e3a02003 	mov	r2, #3
    9600:	e3a03003 	mov	r3, #3
    9604:	eb0012fc 	bl	e1fc <g_sigMath_matrixMultiplikation_bl>
				sleep(1);
    9608:	e3a00001 	mov	r0, #1
    960c:	ebfffd14 	bl	8a64 <_init+0x164>
				g_sigMath_matrixAddition_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3,(double*)l_MatrixB_f64,3,3);
    9610:	e59f3404 	ldr	r3, [pc, #1028]	; 9a1c <main+0xe14>
    9614:	e58d3000 	str	r3, [sp]
    9618:	e3a03003 	mov	r3, #3
    961c:	e58d3004 	str	r3, [sp, #4]
    9620:	e3a03003 	mov	r3, #3
    9624:	e58d3008 	str	r3, [sp, #8]
    9628:	e59f03e8 	ldr	r0, [pc, #1000]	; 9a18 <main+0xe10>
    962c:	e59f13ec 	ldr	r1, [pc, #1004]	; 9a20 <main+0xe18>
    9630:	e3a02003 	mov	r2, #3
    9634:	e3a03003 	mov	r3, #3
    9638:	eb00134c 	bl	e370 <g_sigMath_matrixAddition_bl>
				sleep(1);
    963c:	e3a00001 	mov	r0, #1
    9640:	ebfffd07 	bl	8a64 <_init+0x164>
				g_sigMath_matrixSubtraktion_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3,(double*)l_MatrixB_f64,3,3);
    9644:	e59f33d0 	ldr	r3, [pc, #976]	; 9a1c <main+0xe14>
    9648:	e58d3000 	str	r3, [sp]
    964c:	e3a03003 	mov	r3, #3
    9650:	e58d3004 	str	r3, [sp, #4]
    9654:	e3a03003 	mov	r3, #3
    9658:	e58d3008 	str	r3, [sp, #8]
    965c:	e59f03b4 	ldr	r0, [pc, #948]	; 9a18 <main+0xe10>
    9660:	e59f13b8 	ldr	r1, [pc, #952]	; 9a20 <main+0xe18>
    9664:	e3a02003 	mov	r2, #3
    9668:	e3a03003 	mov	r3, #3
    966c:	eb00138a 	bl	e49c <g_sigMath_matrixSubtraktion_bl>
				sleep(1);
    9670:	e3a00001 	mov	r0, #1
    9674:	ebfffcfa 	bl	8a64 <_init+0x164>
				g_sigMath_matrixAssignment_bl((double*)l_outputMatrix_f64,3,3,(double*)l_MatrixA_f64,3,3);
    9678:	e3a03003 	mov	r3, #3
    967c:	e58d3000 	str	r3, [sp]
    9680:	e3a03003 	mov	r3, #3
    9684:	e58d3004 	str	r3, [sp, #4]
    9688:	e59f0388 	ldr	r0, [pc, #904]	; 9a18 <main+0xe10>
    968c:	e3a01003 	mov	r1, #3
    9690:	e3a02003 	mov	r2, #3
    9694:	e59f3384 	ldr	r3, [pc, #900]	; 9a20 <main+0xe18>
    9698:	eb00160d 	bl	eed4 <g_sigMath_matrixAssignment_bl>
				sleep(1);
    969c:	e3a00001 	mov	r0, #1
    96a0:	ebfffcef 	bl	8a64 <_init+0x164>
				g_sigMath_matrixTransponiert_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3);
    96a4:	e59f036c 	ldr	r0, [pc, #876]	; 9a18 <main+0xe10>
    96a8:	e59f1370 	ldr	r1, [pc, #880]	; 9a20 <main+0xe18>
    96ac:	e3a02003 	mov	r2, #3
    96b0:	e3a03003 	mov	r3, #3
    96b4:	eb0013c3 	bl	e5c8 <g_sigMath_matrixTransponiert_bl>
				sleep(1);
    96b8:	e3a00001 	mov	r0, #1
    96bc:	ebfffce8 	bl	8a64 <_init+0x164>
				g_sigMath_matrixInverse_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3);
    96c0:	e59f0350 	ldr	r0, [pc, #848]	; 9a18 <main+0xe10>
    96c4:	e59f1354 	ldr	r1, [pc, #852]	; 9a20 <main+0xe18>
    96c8:	e3a02003 	mov	r2, #3
    96cc:	e3a03003 	mov	r3, #3
    96d0:	eb0013f1 	bl	e69c <g_sigMath_matrixInverse_bl>
				sleep(1);
    96d4:	e3a00001 	mov	r0, #1
    96d8:	ebfffce1 	bl	8a64 <_init+0x164>
			}
    96dc:	eaffffb1 	b	95a8 <main+0x9a0>
			break;
		}
		case TESTUDP:
		{
			printf("simple send udp test...");
    96e0:	e59f033c 	ldr	r0, [pc, #828]	; 9a24 <main+0xe1c>
    96e4:	ebfffcd2 	bl	8a34 <_init+0x134>
			int clientSocket;
			char message[20] = "Hello\n";
    96e8:	e59f2338 	ldr	r2, [pc, #824]	; 9a28 <main+0xe20>
    96ec:	e24b3f6e 	sub	r3, fp, #440	; 0x1b8
    96f0:	e8920003 	ldm	r2, {r0, r1}
    96f4:	e5830000 	str	r0, [r3]
    96f8:	e2833004 	add	r3, r3, #4
    96fc:	e1c310b0 	strh	r1, [r3]
    9700:	e2833002 	add	r3, r3, #2
    9704:	e1a02821 	lsr	r2, r1, #16
    9708:	e5c32000 	strb	r2, [r3]
    970c:	e24b3e1b 	sub	r3, fp, #432	; 0x1b0
    9710:	e2433001 	sub	r3, r3, #1
    9714:	e3a02000 	mov	r2, #0
    9718:	e5c32000 	strb	r2, [r3]
    971c:	e2833001 	add	r3, r3, #1
    9720:	e3a02000 	mov	r2, #0
    9724:	e5c32000 	strb	r2, [r3]
    9728:	e2833001 	add	r3, r3, #1
    972c:	e3a02000 	mov	r2, #0
    9730:	e5c32000 	strb	r2, [r3]
    9734:	e2833001 	add	r3, r3, #1
    9738:	e3a02000 	mov	r2, #0
    973c:	e5c32000 	strb	r2, [r3]
    9740:	e2833001 	add	r3, r3, #1
    9744:	e3a02000 	mov	r2, #0
    9748:	e5c32000 	strb	r2, [r3]
    974c:	e2833001 	add	r3, r3, #1
    9750:	e3a02000 	mov	r2, #0
    9754:	e5c32000 	strb	r2, [r3]
    9758:	e2833001 	add	r3, r3, #1
    975c:	e3a02000 	mov	r2, #0
    9760:	e5c32000 	strb	r2, [r3]
    9764:	e2833001 	add	r3, r3, #1
    9768:	e3a02000 	mov	r2, #0
    976c:	e5c32000 	strb	r2, [r3]
    9770:	e2833001 	add	r3, r3, #1
    9774:	e3a02000 	mov	r2, #0
    9778:	e5c32000 	strb	r2, [r3]
    977c:	e2833001 	add	r3, r3, #1
    9780:	e3a02000 	mov	r2, #0
    9784:	e5c32000 	strb	r2, [r3]
    9788:	e2833001 	add	r3, r3, #1
    978c:	e3a02000 	mov	r2, #0
    9790:	e5c32000 	strb	r2, [r3]
    9794:	e2833001 	add	r3, r3, #1
    9798:	e3a02000 	mov	r2, #0
    979c:	e5c32000 	strb	r2, [r3]
    97a0:	e2833001 	add	r3, r3, #1
    97a4:	e3a02000 	mov	r2, #0
    97a8:	e5c32000 	strb	r2, [r3]
    97ac:	e2833001 	add	r3, r3, #1
			struct sockaddr_in serverAddress;
			socklen_t addressSize;

			/*Create UDP socket*/
			clientSocket = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);
    97b0:	e3a00002 	mov	r0, #2
    97b4:	e3a01002 	mov	r1, #2
    97b8:	e3a02011 	mov	r2, #17
    97bc:	ebfffc8d 	bl	89f8 <_init+0xf8>
    97c0:	e50b00c8 	str	r0, [fp, #-200]	; 0xc8

			serverAddress.sin_family = PF_INET;
    97c4:	e59f3260 	ldr	r3, [pc, #608]	; 9a2c <main+0xe24>
    97c8:	e3a02002 	mov	r2, #2
    97cc:	e24b104c 	sub	r1, fp, #76	; 0x4c
    97d0:	e18120b3 	strh	r2, [r1, r3]
			serverAddress.sin_port = htons(REMOTE_PORT);
    97d4:	e59f02c4 	ldr	r0, [pc, #708]	; 9aa0 <main+0xe98>
    97d8:	ebfffc68 	bl	8980 <_init+0x80>
    97dc:	e1a03000 	mov	r3, r0
    97e0:	e1a02003 	mov	r2, r3
    97e4:	e59f3244 	ldr	r3, [pc, #580]	; 9a30 <main+0xe28>
    97e8:	e24b104c 	sub	r1, fp, #76	; 0x4c
    97ec:	e18120b3 	strh	r2, [r1, r3]
			serverAddress.sin_addr.s_addr = inet_addr(REMOTE_ADDR);
    97f0:	e59f0278 	ldr	r0, [pc, #632]	; 9a70 <main+0xe68>
    97f4:	ebfffc58 	bl	895c <_init+0x5c>
    97f8:	e1a03000 	mov	r3, r0
    97fc:	e50b31c4 	str	r3, [fp, #-452]	; 0x1c4

			memset(serverAddress.sin_zero, '\0', sizeof(serverAddress.sin_zero));
    9800:	e24b3f72 	sub	r3, fp, #456	; 0x1c8
    9804:	e2833008 	add	r3, r3, #8
    9808:	e1a00003 	mov	r0, r3
    980c:	e3a01000 	mov	r1, #0
    9810:	e3a02008 	mov	r2, #8
    9814:	ebfffc5c 	bl	898c <_init+0x8c>

			/*Initialize size variable to be used later on*/
			addressSize = sizeof(serverAddress);
    9818:	e3a03010 	mov	r3, #16
    981c:	e50b30cc 	str	r3, [fp, #-204]	; 0xcc

			printf("Start Sending Messages\n");
    9820:	e59f020c 	ldr	r0, [pc, #524]	; 9a34 <main+0xe2c>
    9824:	ebfffc94 	bl	8a7c <_init+0x17c>

			while(1)
			{
				sleep(1);
    9828:	e3a00001 	mov	r0, #1
    982c:	ebfffc8c 	bl	8a64 <_init+0x164>
				/* Send N bytes of BUF on socket FD to peer at address ADDR (which is
				   ADDR_LEN bytes long).  Returns the number sent, or -1 for errors.

				   This function is a cancellation point and therefore not marked with
				   __THROW.  */
				sendto(clientSocket, message, sizeof(message), 0,
    9830:	e24b3f6e 	sub	r3, fp, #440	; 0x1b8
    9834:	e24b2f72 	sub	r2, fp, #456	; 0x1c8
    9838:	e58d2000 	str	r2, [sp]
    983c:	e51b20cc 	ldr	r2, [fp, #-204]	; 0xcc
    9840:	e58d2004 	str	r2, [sp, #4]
    9844:	e51b00c8 	ldr	r0, [fp, #-200]	; 0xc8
    9848:	e1a01003 	mov	r1, r3
    984c:	e3a02014 	mov	r2, #20
    9850:	e3a03000 	mov	r3, #0
    9854:	ebfffc46 	bl	8974 <_init+0x74>
						(struct sockaddr *)&serverAddress,addressSize);
				printf("And send again....\n");
    9858:	e59f01d8 	ldr	r0, [pc, #472]	; 9a38 <main+0xe30>
    985c:	ebfffc86 	bl	8a7c <_init+0x17c>
			}
    9860:	eafffff0 	b	9828 <main+0xc20>


			struct timespec					l_timestamp_st;


			printf("Starting Transfer matlab data on udp test\n");
    9864:	e59f01d0 	ldr	r0, [pc, #464]	; 9a3c <main+0xe34>
    9868:	ebfffc83 	bl	8a7c <_init+0x17c>

			int val=0;
    986c:	e3a03000 	mov	r3, #0
    9870:	e50b30d0 	str	r3, [fp, #-208]	; 0xd0
			int socketclient = 0;
    9874:	e3a03000 	mov	r3, #0
    9878:	e50b30d4 	str	r3, [fp, #-212]	; 0xd4
			struct sockaddr_in remoteaddress;

			remoteaddress.sin_family = PF_INET;
    987c:	e59f31bc 	ldr	r3, [pc, #444]	; 9a40 <main+0xe38>
    9880:	e3a02002 	mov	r2, #2
    9884:	e24b104c 	sub	r1, fp, #76	; 0x4c
    9888:	e18120b3 	strh	r2, [r1, r3]
			remoteaddress.sin_port = htons(REMOTE_PORT);
    988c:	e59f020c 	ldr	r0, [pc, #524]	; 9aa0 <main+0xe98>
    9890:	ebfffc3a 	bl	8980 <_init+0x80>
    9894:	e1a03000 	mov	r3, r0
    9898:	e1a02003 	mov	r2, r3
    989c:	e59f31a0 	ldr	r3, [pc, #416]	; 9a44 <main+0xe3c>
    98a0:	e24b104c 	sub	r1, fp, #76	; 0x4c
    98a4:	e18120b3 	strh	r2, [r1, r3]

			(void)inet_aton(REMOTE_ADDR, &remoteaddress.sin_addr); //dot to integer and then host to network byte order
    98a8:	e24b3f85 	sub	r3, fp, #532	; 0x214
    98ac:	e2833004 	add	r3, r3, #4
    98b0:	e59f01b8 	ldr	r0, [pc, #440]	; 9a70 <main+0xe68>
    98b4:	e1a01003 	mov	r1, r3
    98b8:	ebfffc51 	bl	8a04 <_init+0x104>

			socketclient = socket(PF_INET, SOCK_DGRAM, 0);
    98bc:	e3a00002 	mov	r0, #2
    98c0:	e3a01002 	mov	r1, #2
    98c4:	e3a02000 	mov	r2, #0
    98c8:	ebfffc4a 	bl	89f8 <_init+0xf8>
    98cc:	e50b00d4 	str	r0, [fp, #-212]	; 0xd4


			g_sigOri_initMatrices_bl();
    98d0:	eb0016a3 	bl	f364 <g_sigOri_initMatrices_bl>
			g_sigOri_initImuSensors_bl();
    98d4:	eb001697 	bl	f338 <g_sigOri_initImuSensors_bl>

			while(1)
			{
				g_sigOri_calcKalmanOrientation_bl();
    98d8:	eb001889 	bl	fb04 <g_sigOri_calcKalmanOrientation_bl>
				g_sigOri_calcComplementaryOrientation_bl();
    98dc:	eb001963 	bl	fe70 <g_sigOri_calcComplementaryOrientation_bl>

				l_kalmanAngles_st 	= g_sigOri_getAnglesKalman_bl();
    98e0:	eb001660 	bl	f268 <g_sigOri_getAnglesKalman_bl>
    98e4:	eeb05b40 	vmov.f64	d5, d0
    98e8:	eeb06b41 	vmov.f64	d6, d1
    98ec:	eeb07b42 	vmov.f64	d7, d2
    98f0:	ed0b5b79 	vstr	d5, [fp, #-484]	; 0xfffffe1c
    98f4:	ed0b6b77 	vstr	d6, [fp, #-476]	; 0xfffffe24
    98f8:	ed0b7b75 	vstr	d7, [fp, #-468]	; 0xfffffe2c
				l_compAngles_st		= g_sigOri_getAnglesComplementary_bl();
    98fc:	eb001625 	bl	f198 <g_sigOri_getAnglesComplementary_bl>
    9900:	eeb05b40 	vmov.f64	d5, d0
    9904:	eeb06b41 	vmov.f64	d6, d1
    9908:	eeb07b42 	vmov.f64	d7, d2
    990c:	ed0b5b7f 	vstr	d5, [fp, #-508]	; 0xfffffe04
    9910:	ed0b6b7d 	vstr	d6, [fp, #-500]	; 0xfffffe0c
    9914:	ed0b7b7b 	vstr	d7, [fp, #-492]	; 0xfffffe14
				l_imuStates_st 		= g_halImu_getImuValues_str();
    9918:	e24b3fdf 	sub	r3, fp, #892	; 0x37c
    991c:	e1a00003 	mov	r0, r3
    9920:	eb000c65 	bl	cabc <g_halImu_getImuValues_str>
				 *                Select 'Cross G++ Linker'->Libraries
				 *                and add the entry 'rt' to 'Libraries (-l)'
				 *
				 *       GCC on the commandline: simply add '-lrt' to your gcc options
				 */
				if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    9924:	e24b3f81 	sub	r3, fp, #516	; 0x204
    9928:	e3a00000 	mov	r0, #0
    992c:	e1a01003 	mov	r1, r3
    9930:	ebfffc00 	bl	8938 <_init+0x38>
    9934:	e1a03000 	mov	r3, r0
    9938:	e3530000 	cmp	r3, #0
    993c:	0a00006a 	beq	9aec <main+0xee4>
				{
					return M_HAL_MATLAB_FAILED_UI8;
    9940:	e3a03001 	mov	r3, #1
    9944:	ea000235 	b	a220 <main+0x1618>
    9948:	00000000 	.word	0x00000000
    994c:	3ff00000 	.word	0x3ff00000
    9950:	00010358 	.word	0x00010358
    9954:	0001035c 	.word	0x0001035c
    9958:	00010374 	.word	0x00010374
    995c:	0001037c 	.word	0x0001037c
    9960:	00010388 	.word	0x00010388
    9964:	00010390 	.word	0x00010390
    9968:	00010398 	.word	0x00010398
    996c:	000103a4 	.word	0x000103a4
    9970:	000103b0 	.word	0x000103b0
    9974:	000103c0 	.word	0x000103c0
    9978:	000103d4 	.word	0x000103d4
    997c:	000103e0 	.word	0x000103e0
    9980:	000103ec 	.word	0x000103ec
    9984:	000103f8 	.word	0x000103f8
    9988:	00010408 	.word	0x00010408
    998c:	00010410 	.word	0x00010410
    9990:	00010420 	.word	0x00010420
    9994:	00010430 	.word	0x00010430
    9998:	00010444 	.word	0x00010444
    999c:	00010454 	.word	0x00010454
    99a0:	00010468 	.word	0x00010468
    99a4:	00010470 	.word	0x00010470
    99a8:	00010480 	.word	0x00010480
    99ac:	00010498 	.word	0x00010498
    99b0:	000104b4 	.word	0x000104b4
    99b4:	000104c8 	.word	0x000104c8
    99b8:	000104dc 	.word	0x000104dc
    99bc:	0001050c 	.word	0x0001050c
    99c0:	00010544 	.word	0x00010544
    99c4:	00010568 	.word	0x00010568
    99c8:	00010590 	.word	0x00010590
    99cc:	000105a4 	.word	0x000105a4
    99d0:	0007a120 	.word	0x0007a120
    99d4:	000105b8 	.word	0x000105b8
    99d8:	000105cc 	.word	0x000105cc
    99dc:	000105dc 	.word	0x000105dc
    99e0:	000105f8 	.word	0x000105f8
    99e4:	00010618 	.word	0x00010618
    99e8:	00010640 	.word	0x00010640
    99ec:	00010650 	.word	0x00010650
    99f0:	0001065c 	.word	0x0001065c
    99f4:	00010680 	.word	0x00010680
    99f8:	00010690 	.word	0x00010690
    99fc:	000106a4 	.word	0x000106a4
    9a00:	000106b8 	.word	0x000106b8
    9a04:	0003d090 	.word	0x0003d090
    9a08:	000106f0 	.word	0x000106f0
    9a0c:	000186a0 	.word	0x000186a0
    9a10:	0001070c 	.word	0x0001070c
    9a14:	00010720 	.word	0x00010720
    9a18:	00019650 	.word	0x00019650
    9a1c:	00019208 	.word	0x00019208
    9a20:	000191c0 	.word	0x000191c0
    9a24:	0001073c 	.word	0x0001073c
    9a28:	00010ab0 	.word	0x00010ab0
    9a2c:	fffffe84 	.word	0xfffffe84
    9a30:	fffffe86 	.word	0xfffffe86
    9a34:	00010764 	.word	0x00010764
    9a38:	0001077c 	.word	0x0001077c
    9a3c:	00010790 	.word	0x00010790
    9a40:	fffffe38 	.word	0xfffffe38
    9a44:	fffffe3a 	.word	0xfffffe3a
    9a48:	000107e8 	.word	0x000107e8
    9a4c:	000107f8 	.word	0x000107f8
    9a50:	00010808 	.word	0x00010808
    9a54:	00010824 	.word	0x00010824
    9a58:	00010838 	.word	0x00010838
    9a5c:	00010848 	.word	0x00010848
    9a60:	00010868 	.word	0x00010868
    9a64:	00010890 	.word	0x00010890
    9a68:	fffffdc0 	.word	0xfffffdc0
    9a6c:	fffffdc2 	.word	0xfffffdc2
    9a70:	00010754 	.word	0x00010754
    9a74:	000107bc 	.word	0x000107bc
    9a78:	000107d0 	.word	0x000107d0
    9a7c:	000108bc 	.word	0x000108bc
    9a80:	000108f0 	.word	0x000108f0
    9a84:	00010918 	.word	0x00010918
    9a88:	00010948 	.word	0x00010948
    9a8c:	00010978 	.word	0x00010978
    9a90:	00019268 	.word	0x00019268
    9a94:	0000c350 	.word	0x0000c350
    9a98:	000109a0 	.word	0x000109a0
    9a9c:	00010ac4 	.word	0x00010ac4
    9aa0:	00001388 	.word	0x00001388
    9aa4:	000109c4 	.word	0x000109c4
    9aa8:	000109d0 	.word	0x000109d0
    9aac:	000109dc 	.word	0x000109dc
    9ab0:	000109e8 	.word	0x000109e8
    9ab4:	000109f4 	.word	0x000109f4
    9ab8:	00010a00 	.word	0x00010a00
    9abc:	00010a0c 	.word	0x00010a0c
    9ac0:	00010a1c 	.word	0x00010a1c
    9ac4:	00010a2c 	.word	0x00010a2c
    9ac8:	00010a3c 	.word	0x00010a3c
    9acc:	00010a48 	.word	0x00010a48
    9ad0:	00010a54 	.word	0x00010a54
    9ad4:	00010604 	.word	0x00010604
    9ad8:	00004e20 	.word	0x00004e20
    9adc:	00010a80 	.word	0x00010a80
    9ae0:	fffffdb8 	.word	0xfffffdb8
    9ae4:	00002710 	.word	0x00002710
    9ae8:	00010aa0 	.word	0x00010aa0
				}

				clock_gettime(CLOCK_REALTIME, &l_timestamp_st);
    9aec:	e24b3f81 	sub	r3, fp, #516	; 0x204
    9af0:	e3a00000 	mov	r0, #0
    9af4:	e1a01003 	mov	r1, r3
    9af8:	ebfffb8e 	bl	8938 <_init+0x38>

				//assmeble timestamp and
				l_rtCompleteSigPayload_st.timestamp_st 				= l_timestamp_st;
    9afc:	e24b3fc9 	sub	r3, fp, #804	; 0x324
    9b00:	e24b2f81 	sub	r2, fp, #516	; 0x204
    9b04:	e8920003 	ldm	r2, {r0, r1}
    9b08:	e8830003 	stm	r3, {r0, r1}
				l_rtCompleteSigPayload_st.imuState_st				= l_imuStates_st;
    9b0c:	e24b1fc7 	sub	r1, fp, #796	; 0x31c
    9b10:	e24b2fdf 	sub	r2, fp, #892	; 0x37c
    9b14:	e3a03058 	mov	r3, #88	; 0x58
    9b18:	e1a00001 	mov	r0, r1
    9b1c:	e1a01002 	mov	r1, r2
    9b20:	e1a02003 	mov	r2, r3
    9b24:	ebfffbbf 	bl	8a28 <_init+0x128>
				l_rtCompleteSigPayload_st.kalmanSigState_st 		= l_kalmanAngles_st;
    9b28:	e24bcfb1 	sub	ip, fp, #708	; 0x2c4
    9b2c:	e24bef79 	sub	lr, fp, #484	; 0x1e4
    9b30:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9b34:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    9b38:	e89e0003 	ldm	lr, {r0, r1}
    9b3c:	e88c0003 	stm	ip, {r0, r1}
				l_rtCompleteSigPayload_st.complementarySigState_st	= l_compAngles_st;
    9b40:	e24bcfab 	sub	ip, fp, #684	; 0x2ac
    9b44:	e24bef7f 	sub	lr, fp, #508	; 0x1fc
    9b48:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9b4c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    9b50:	e89e0003 	ldm	lr, {r0, r1}
    9b54:	e88c0003 	stm	ip, {r0, r1}

				printf("START MEASUREMENT\n");
    9b58:	e51f00ec 	ldr	r0, [pc, #-236]	; 9a74 <main+0xe6c>
    9b5c:	ebfffbc6 	bl	8a7c <_init+0x17c>
				sprintf(str, "sec =  %d, nano = %d",
    9b60:	e51b2324 	ldr	r2, [fp, #-804]	; 0x324
    9b64:	e51b3320 	ldr	r3, [fp, #-800]	; 0x320
    9b68:	e51f00e0 	ldr	r0, [pc, #-224]	; 9a90 <main+0xe88>
    9b6c:	e51f10fc 	ldr	r1, [pc, #-252]	; 9a78 <main+0xe70>
    9b70:	ebfffbd6 	bl	8ad0 <_init+0x1d0>
						l_rtCompleteSigPayload_st.timestamp_st.tv_sec, l_rtCompleteSigPayload_st.timestamp_st.tv_nsec);
				puts(str);
    9b74:	e51f00ec 	ldr	r0, [pc, #-236]	; 9a90 <main+0xe88>
    9b78:	ebfffbbf 	bl	8a7c <_init+0x17c>
				sprintf(str, "acc = %f %f %f",
    9b7c:	e24b3fc7 	sub	r3, fp, #796	; 0x31c
    9b80:	e1c320d0 	ldrd	r2, [r3]
    9b84:	e24b5fc5 	sub	r5, fp, #788	; 0x314
    9b88:	e1c540d0 	ldrd	r4, [r5]
    9b8c:	e24b1fc3 	sub	r1, fp, #780	; 0x30c
    9b90:	e1c100d0 	ldrd	r0, [r1]
    9b94:	e1cd40f0 	strd	r4, [sp]
    9b98:	e1cd00f8 	strd	r0, [sp, #8]
    9b9c:	e51f0114 	ldr	r0, [pc, #-276]	; 9a90 <main+0xe88>
    9ba0:	e51f1160 	ldr	r1, [pc, #-352]	; 9a48 <main+0xe40>
    9ba4:	ebfffbc9 	bl	8ad0 <_init+0x1d0>
						l_rtCompleteSigPayload_st.imuState_st.acc.x_f64, l_rtCompleteSigPayload_st.imuState_st.acc.y_f64, l_rtCompleteSigPayload_st.imuState_st.acc.z_f64);
				puts(str);
    9ba8:	e51f0120 	ldr	r0, [pc, #-288]	; 9a90 <main+0xe88>
    9bac:	ebfffbb2 	bl	8a7c <_init+0x17c>
				sprintf(str, "mag = %f %f %f",
    9bb0:	e24b3fc1 	sub	r3, fp, #772	; 0x304
    9bb4:	e1c320d0 	ldrd	r2, [r3]
    9bb8:	e24b5fbf 	sub	r5, fp, #764	; 0x2fc
    9bbc:	e1c540d0 	ldrd	r4, [r5]
    9bc0:	e24b1fbd 	sub	r1, fp, #756	; 0x2f4
    9bc4:	e1c100d0 	ldrd	r0, [r1]
    9bc8:	e1cd40f0 	strd	r4, [sp]
    9bcc:	e1cd00f8 	strd	r0, [sp, #8]
    9bd0:	e51f0148 	ldr	r0, [pc, #-328]	; 9a90 <main+0xe88>
    9bd4:	e51f1190 	ldr	r1, [pc, #-400]	; 9a4c <main+0xe44>
    9bd8:	ebfffbbc 	bl	8ad0 <_init+0x1d0>
						l_rtCompleteSigPayload_st.imuState_st.mag.x_f64, l_rtCompleteSigPayload_st.imuState_st.mag.y_f64, l_rtCompleteSigPayload_st.imuState_st.mag.z_f64);
				puts(str);
    9bdc:	e51f0154 	ldr	r0, [pc, #-340]	; 9a90 <main+0xe88>
    9be0:	ebfffba5 	bl	8a7c <_init+0x17c>
				sprintf(str, "roll %f, pitch %f yaw  %f",
    9be4:	e24b3fbb 	sub	r3, fp, #748	; 0x2ec
    9be8:	e1c320d0 	ldrd	r2, [r3]
    9bec:	e24b5fb9 	sub	r5, fp, #740	; 0x2e4
    9bf0:	e1c540d0 	ldrd	r4, [r5]
    9bf4:	e24b1fb7 	sub	r1, fp, #732	; 0x2dc
    9bf8:	e1c100d0 	ldrd	r0, [r1]
    9bfc:	e1cd40f0 	strd	r4, [sp]
    9c00:	e1cd00f8 	strd	r0, [sp, #8]
    9c04:	e51f017c 	ldr	r0, [pc, #-380]	; 9a90 <main+0xe88>
    9c08:	e51f11c0 	ldr	r1, [pc, #-448]	; 9a50 <main+0xe48>
    9c0c:	ebfffbaf 	bl	8ad0 <_init+0x1d0>
						l_rtCompleteSigPayload_st.imuState_st.gyro.roll_f64, l_rtCompleteSigPayload_st.imuState_st.gyro.pitch_f64, l_rtCompleteSigPayload_st.imuState_st.gyro.yaw_f64 );
				puts(str);
    9c10:	e51f0188 	ldr	r0, [pc, #-392]	; 9a90 <main+0xe88>
    9c14:	ebfffb98 	bl	8a7c <_init+0x17c>
				sprintf(str, "temperature = %f",
    9c18:	e24b3fb5 	sub	r3, fp, #724	; 0x2d4
    9c1c:	e1c320d0 	ldrd	r2, [r3]
    9c20:	e51f0198 	ldr	r0, [pc, #-408]	; 9a90 <main+0xe88>
    9c24:	e51f11d8 	ldr	r1, [pc, #-472]	; 9a54 <main+0xe4c>
    9c28:	ebfffba8 	bl	8ad0 <_init+0x1d0>
						l_rtCompleteSigPayload_st.imuState_st.temperature_f64);
				puts(str);
    9c2c:	e51f01a4 	ldr	r0, [pc, #-420]	; 9a90 <main+0xe88>
    9c30:	ebfffb91 	bl	8a7c <_init+0x17c>
				sprintf(str, "pressure = %f",
    9c34:	e24b3fb3 	sub	r3, fp, #716	; 0x2cc
    9c38:	e1c320d0 	ldrd	r2, [r3]
    9c3c:	e51f01b4 	ldr	r0, [pc, #-436]	; 9a90 <main+0xe88>
    9c40:	e51f11f0 	ldr	r1, [pc, #-496]	; 9a58 <main+0xe50>
    9c44:	ebfffba1 	bl	8ad0 <_init+0x1d0>
						l_rtCompleteSigPayload_st.imuState_st.pressure_f64);
				puts(str);
    9c48:	e51f01c0 	ldr	r0, [pc, #-448]	; 9a90 <main+0xe88>
    9c4c:	ebfffb8a 	bl	8a7c <_init+0x17c>
				sprintf(str, "KALMAN yaw %f, pitch %f roll %f",
    9c50:	e24b3fad 	sub	r3, fp, #692	; 0x2b4
    9c54:	e1c320d0 	ldrd	r2, [r3]
    9c58:	e24b5faf 	sub	r5, fp, #700	; 0x2bc
    9c5c:	e1c540d0 	ldrd	r4, [r5]
    9c60:	e24b1fb1 	sub	r1, fp, #708	; 0x2c4
    9c64:	e1c100d0 	ldrd	r0, [r1]
    9c68:	e1cd40f0 	strd	r4, [sp]
    9c6c:	e1cd00f8 	strd	r0, [sp, #8]
    9c70:	e51f01e8 	ldr	r0, [pc, #-488]	; 9a90 <main+0xe88>
    9c74:	e51f1220 	ldr	r1, [pc, #-544]	; 9a5c <main+0xe54>
    9c78:	ebfffb94 	bl	8ad0 <_init+0x1d0>
						l_rtCompleteSigPayload_st.kalmanSigState_st.yaw_f64, l_rtCompleteSigPayload_st.kalmanSigState_st.pitch_f64, l_rtCompleteSigPayload_st.kalmanSigState_st.roll_f64);
				puts(str);
    9c7c:	e51f01f4 	ldr	r0, [pc, #-500]	; 9a90 <main+0xe88>
    9c80:	ebfffb7d 	bl	8a7c <_init+0x17c>
				sprintf(str, "COMPLEMENTARY yaw %f, pitch %f roll %f",
    9c84:	e24b3fa7 	sub	r3, fp, #668	; 0x29c
    9c88:	e1c320d0 	ldrd	r2, [r3]
    9c8c:	e24b5fa9 	sub	r5, fp, #676	; 0x2a4
    9c90:	e1c540d0 	ldrd	r4, [r5]
    9c94:	e24b1fab 	sub	r1, fp, #684	; 0x2ac
    9c98:	e1c100d0 	ldrd	r0, [r1]
    9c9c:	e1cd40f0 	strd	r4, [sp]
    9ca0:	e1cd00f8 	strd	r0, [sp, #8]
    9ca4:	e51f021c 	ldr	r0, [pc, #-540]	; 9a90 <main+0xe88>
    9ca8:	e51f1250 	ldr	r1, [pc, #-592]	; 9a60 <main+0xe58>
    9cac:	ebfffb87 	bl	8ad0 <_init+0x1d0>
						l_rtCompleteSigPayload_st.complementarySigState_st.yaw_f64, l_rtCompleteSigPayload_st.complementarySigState_st.pitch_f64, l_rtCompleteSigPayload_st.complementarySigState_st.roll_f64);
				puts(str);
    9cb0:	e51f0228 	ldr	r0, [pc, #-552]	; 9a90 <main+0xe88>
    9cb4:	ebfffb70 	bl	8a7c <_init+0x17c>

				//printf("Sending time %d and Temperature %f\n", l_rtCompleteSigPayload_st.timestamp_st.tv_sec, l_rtCompleteSigPayload_st.imuState_st.temperature_f64);
				sendto(socketclient, (unsigned char *)&l_rtCompleteSigPayload_st , (size_t)sizeof( l_rtCompleteSigPayload_st ),  0, (struct sockaddr *)&remoteaddress, sizeof(remoteaddress));
    9cb8:	e24b3fc9 	sub	r3, fp, #804	; 0x324
    9cbc:	e24b2f85 	sub	r2, fp, #532	; 0x214
    9cc0:	e58d2000 	str	r2, [sp]
    9cc4:	e3a02010 	mov	r2, #16
    9cc8:	e58d2004 	str	r2, [sp, #4]
    9ccc:	e51b00d4 	ldr	r0, [fp, #-212]	; 0xd4
    9cd0:	e1a01003 	mov	r1, r3
    9cd4:	e3a02090 	mov	r2, #144	; 0x90
    9cd8:	e3a03000 	mov	r3, #0
    9cdc:	ebfffb24 	bl	8974 <_init+0x74>

				usleep( 50000 ); //20ms = 50Hz
    9ce0:	e51f0254 	ldr	r0, [pc, #-596]	; 9a94 <main+0xe8c>
    9ce4:	ebfffb2b 	bl	8998 <_init+0x98>
			}
    9ce8:	eafffefa 	b	98d8 <main+0xcd0>

			halMatlab_rtSigRollPitchYawStatePayload	l_rtRollPitchYawSigPayload_st;

			struct timespec					l_timestamp_st;

			printf("Starting Transfer matlab data on all angles\n");
    9cec:	e51f0290 	ldr	r0, [pc, #-656]	; 9a64 <main+0xe5c>
    9cf0:	ebfffb61 	bl	8a7c <_init+0x17c>

			int val=0;
    9cf4:	e3a03000 	mov	r3, #0
    9cf8:	e50b30d8 	str	r3, [fp, #-216]	; 0xd8
			int socketclient = 0;
    9cfc:	e3a03000 	mov	r3, #0
    9d00:	e50b30dc 	str	r3, [fp, #-220]	; 0xdc
			struct sockaddr_in remoteaddress;

			remoteaddress.sin_family = PF_INET;
    9d04:	e51f32a4 	ldr	r3, [pc, #-676]	; 9a68 <main+0xe60>
    9d08:	e3a02002 	mov	r2, #2
    9d0c:	e24b104c 	sub	r1, fp, #76	; 0x4c
    9d10:	e18120b3 	strh	r2, [r1, r3]
			remoteaddress.sin_port = htons(REMOTE_PORT);
    9d14:	e51f027c 	ldr	r0, [pc, #-636]	; 9aa0 <main+0xe98>
    9d18:	ebfffb18 	bl	8980 <_init+0x80>
    9d1c:	e1a03000 	mov	r3, r0
    9d20:	e1a02003 	mov	r2, r3
    9d24:	e51f32c0 	ldr	r3, [pc, #-704]	; 9a6c <main+0xe64>
    9d28:	e24b104c 	sub	r1, fp, #76	; 0x4c
    9d2c:	e18120b3 	strh	r2, [r1, r3]

			(void)inet_aton(REMOTE_ADDR, &remoteaddress.sin_addr); //dot to integer and then host to network byte order
    9d30:	e24b3fa3 	sub	r3, fp, #652	; 0x28c
    9d34:	e2833004 	add	r3, r3, #4
    9d38:	e51f02d0 	ldr	r0, [pc, #-720]	; 9a70 <main+0xe68>
    9d3c:	e1a01003 	mov	r1, r3
    9d40:	ebfffb2f 	bl	8a04 <_init+0x104>

			socketclient = socket(PF_INET, SOCK_DGRAM, 0);
    9d44:	e3a00002 	mov	r0, #2
    9d48:	e3a01002 	mov	r1, #2
    9d4c:	e3a02000 	mov	r2, #0
    9d50:	ebfffb28 	bl	89f8 <_init+0xf8>
    9d54:	e50b00dc 	str	r0, [fp, #-220]	; 0xdc

			g_sigOri_initMatrices_bl();
    9d58:	eb001581 	bl	f364 <g_sigOri_initMatrices_bl>
			g_sigOri_initImuSensors_bl();
    9d5c:	eb001575 	bl	f338 <g_sigOri_initImuSensors_bl>

			while(1)
			{
				g_sigOri_calcKalmanOrientation_bl();
    9d60:	eb001767 	bl	fb04 <g_sigOri_calcKalmanOrientation_bl>
				g_sigOri_calcComplementaryOrientation_bl();
    9d64:	eb001841 	bl	fe70 <g_sigOri_calcComplementaryOrientation_bl>

				l_imuStates_st 		= g_halImu_getImuValues_str();
    9d68:	e24b3fdf 	sub	r3, fp, #892	; 0x37c
    9d6c:	e1a00003 	mov	r0, r3
    9d70:	eb000b51 	bl	cabc <g_halImu_getImuValues_str>
				l_GyroPerStepAngles_st = g_sigOri_getAnglesGyroPerStep_bl();
    9d74:	eb001898 	bl	ffdc <g_sigOri_getAnglesGyroPerStep_bl>
    9d78:	eeb05b40 	vmov.f64	d5, d0
    9d7c:	eeb06b41 	vmov.f64	d6, d1
    9d80:	eeb07b42 	vmov.f64	d7, d2
    9d84:	ed0b5b8b 	vstr	d5, [fp, #-556]	; 0xfffffdd4
    9d88:	ed0b6b89 	vstr	d6, [fp, #-548]	; 0xfffffddc
    9d8c:	ed0b7b87 	vstr	d7, [fp, #-540]	; 0xfffffde4
				l_AccMagAngles_st = g_sigOri_getAnglesAccMagCalc_bl();
    9d90:	eb00187b 	bl	ff84 <g_sigOri_getAnglesAccMagCalc_bl>
    9d94:	eeb05b40 	vmov.f64	d5, d0
    9d98:	eeb06b41 	vmov.f64	d6, d1
    9d9c:	eeb07b42 	vmov.f64	d7, d2
    9da0:	ed0b5b91 	vstr	d5, [fp, #-580]	; 0xfffffdbc
    9da4:	ed0b6b8f 	vstr	d6, [fp, #-572]	; 0xfffffdc4
    9da8:	ed0b7b8d 	vstr	d7, [fp, #-564]	; 0xfffffdcc
				l_kalmanAngles_st 	= g_sigOri_getAnglesKalman_bl();
    9dac:	eb00152d 	bl	f268 <g_sigOri_getAnglesKalman_bl>
    9db0:	eeb05b40 	vmov.f64	d5, d0
    9db4:	eeb06b41 	vmov.f64	d6, d1
    9db8:	eeb07b42 	vmov.f64	d7, d2
    9dbc:	ed0b5b97 	vstr	d5, [fp, #-604]	; 0xfffffda4
    9dc0:	ed0b6b95 	vstr	d6, [fp, #-596]	; 0xfffffdac
    9dc4:	ed0b7b93 	vstr	d7, [fp, #-588]	; 0xfffffdb4
				l_compAngles_st		= g_sigOri_getAnglesComplementary_bl();
    9dc8:	eb0014f2 	bl	f198 <g_sigOri_getAnglesComplementary_bl>
    9dcc:	eeb05b40 	vmov.f64	d5, d0
    9dd0:	eeb06b41 	vmov.f64	d6, d1
    9dd4:	eeb07b42 	vmov.f64	d7, d2
    9dd8:	ed0b5b9d 	vstr	d5, [fp, #-628]	; 0xfffffd8c
    9ddc:	ed0b6b9b 	vstr	d6, [fp, #-620]	; 0xfffffd94
    9de0:	ed0b7b99 	vstr	d7, [fp, #-612]	; 0xfffffd9c


				if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    9de4:	e24b3f9f 	sub	r3, fp, #636	; 0x27c
    9de8:	e3a00000 	mov	r0, #0
    9dec:	e1a01003 	mov	r1, r3
    9df0:	ebfffad0 	bl	8938 <_init+0x38>
    9df4:	e1a03000 	mov	r3, r0
    9df8:	e3530000 	cmp	r3, #0
    9dfc:	0a000001 	beq	9e08 <main+0x1200>
				{
					return M_HAL_MATLAB_FAILED_UI8;
    9e00:	e3a03001 	mov	r3, #1
    9e04:	ea000105 	b	a220 <main+0x1618>
				}

				clock_gettime(CLOCK_REALTIME, &l_timestamp_st);
    9e08:	e24b3f9f 	sub	r3, fp, #636	; 0x27c
    9e0c:	e3a00000 	mov	r0, #0
    9e10:	e1a01003 	mov	r1, r3
    9e14:	ebfffac7 	bl	8938 <_init+0x38>

				//assmeble timestamp and
				l_rtRollPitchYawSigPayload_st.timestamp_st 				= l_timestamp_st;
    9e18:	e24b3fc9 	sub	r3, fp, #804	; 0x324
    9e1c:	e24b2f9f 	sub	r2, fp, #636	; 0x27c
    9e20:	e8920003 	ldm	r2, {r0, r1}
    9e24:	e8830003 	stm	r3, {r0, r1}
				l_rtRollPitchYawSigPayload_st.angularVelocityGyroFromImu_st 		= l_imuStates_st.gyro;
    9e28:	e24bcfc7 	sub	ip, fp, #796	; 0x31c
    9e2c:	e24befd3 	sub	lr, fp, #844	; 0x34c
    9e30:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9e34:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    9e38:	e89e0003 	ldm	lr, {r0, r1}
    9e3c:	e88c0003 	stm	ip, {r0, r1}
				l_rtRollPitchYawSigPayload_st.angleFromGyroStepCalculation_st	= l_GyroPerStepAngles_st;
    9e40:	e24bcfc1 	sub	ip, fp, #772	; 0x304
    9e44:	e24bef8b 	sub	lr, fp, #556	; 0x22c
    9e48:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9e4c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    9e50:	e89e0003 	ldm	lr, {r0, r1}
    9e54:	e88c0003 	stm	ip, {r0, r1}
				l_rtRollPitchYawSigPayload_st.angleFromAccMagCalculation_st 		= l_AccMagAngles_st;
    9e58:	e24bcfbb 	sub	ip, fp, #748	; 0x2ec
    9e5c:	e24bef91 	sub	lr, fp, #580	; 0x244
    9e60:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9e64:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    9e68:	e89e0003 	ldm	lr, {r0, r1}
    9e6c:	e88c0003 	stm	ip, {r0, r1}
				l_rtRollPitchYawSigPayload_st.angleFromkalmanSigState_st 		= l_kalmanAngles_st;
    9e70:	e24bcfaf 	sub	ip, fp, #700	; 0x2bc
    9e74:	e24bef97 	sub	lr, fp, #604	; 0x25c
    9e78:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9e7c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    9e80:	e89e0003 	ldm	lr, {r0, r1}
    9e84:	e88c0003 	stm	ip, {r0, r1}
				l_rtRollPitchYawSigPayload_st.angleFromcomplementarySigState_st	= l_compAngles_st;
    9e88:	e24bcfb5 	sub	ip, fp, #724	; 0x2d4
    9e8c:	e24bef9d 	sub	lr, fp, #628	; 0x274
    9e90:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    9e94:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    9e98:	e89e0003 	ldm	lr, {r0, r1}
    9e9c:	e88c0003 	stm	ip, {r0, r1}


				printf("START MEASUREMENT\n");
    9ea0:	e51f0434 	ldr	r0, [pc, #-1076]	; 9a74 <main+0xe6c>
    9ea4:	ebfffaf4 	bl	8a7c <_init+0x17c>
				sprintf(str, "sec =  %d, nano = %d",
    9ea8:	e51b2324 	ldr	r2, [fp, #-804]	; 0x324
    9eac:	e51b3320 	ldr	r3, [fp, #-800]	; 0x320
    9eb0:	e51f0428 	ldr	r0, [pc, #-1064]	; 9a90 <main+0xe88>
    9eb4:	e51f1444 	ldr	r1, [pc, #-1092]	; 9a78 <main+0xe70>
    9eb8:	ebfffb04 	bl	8ad0 <_init+0x1d0>
						l_rtRollPitchYawSigPayload_st.timestamp_st.tv_sec, l_rtRollPitchYawSigPayload_st.timestamp_st.tv_nsec);
				puts(str);
    9ebc:	e51f0434 	ldr	r0, [pc, #-1076]	; 9a90 <main+0xe88>
    9ec0:	ebfffaed 	bl	8a7c <_init+0x17c>
				sprintf(str, "Raw GYro Angular velocity roll %f, pitch %f yaw  %f",
    9ec4:	e24b3fc7 	sub	r3, fp, #796	; 0x31c
    9ec8:	e1c320d0 	ldrd	r2, [r3]
    9ecc:	e24b5fc5 	sub	r5, fp, #788	; 0x314
    9ed0:	e1c540d0 	ldrd	r4, [r5]
    9ed4:	e24b1fc3 	sub	r1, fp, #780	; 0x30c
    9ed8:	e1c100d0 	ldrd	r0, [r1]
    9edc:	e1cd40f0 	strd	r4, [sp]
    9ee0:	e1cd00f8 	strd	r0, [sp, #8]
    9ee4:	e51f045c 	ldr	r0, [pc, #-1116]	; 9a90 <main+0xe88>
    9ee8:	e51f1474 	ldr	r1, [pc, #-1140]	; 9a7c <main+0xe74>
    9eec:	ebfffaf7 	bl	8ad0 <_init+0x1d0>
						l_rtRollPitchYawSigPayload_st.angularVelocityGyroFromImu_st.roll_f64, l_rtRollPitchYawSigPayload_st.angularVelocityGyroFromImu_st.pitch_f64, l_rtRollPitchYawSigPayload_st.angularVelocityGyroFromImu_st.yaw_f64 );
				puts(str);
    9ef0:	e51f0468 	ldr	r0, [pc, #-1128]	; 9a90 <main+0xe88>
    9ef4:	ebfffae0 	bl	8a7c <_init+0x17c>
				sprintf(str, "Gyro Angles roll %f, pitch %f yaw  %f",
    9ef8:	e24b3fc1 	sub	r3, fp, #772	; 0x304
    9efc:	e1c320d0 	ldrd	r2, [r3]
    9f00:	e24b5fbf 	sub	r5, fp, #764	; 0x2fc
    9f04:	e1c540d0 	ldrd	r4, [r5]
    9f08:	e24b1fbd 	sub	r1, fp, #756	; 0x2f4
    9f0c:	e1c100d0 	ldrd	r0, [r1]
    9f10:	e1cd40f0 	strd	r4, [sp]
    9f14:	e1cd00f8 	strd	r0, [sp, #8]
    9f18:	e51f0490 	ldr	r0, [pc, #-1168]	; 9a90 <main+0xe88>
    9f1c:	e51f14a4 	ldr	r1, [pc, #-1188]	; 9a80 <main+0xe78>
    9f20:	ebfffaea 	bl	8ad0 <_init+0x1d0>
						l_rtRollPitchYawSigPayload_st.angleFromGyroStepCalculation_st.roll_f64, l_rtRollPitchYawSigPayload_st.angleFromGyroStepCalculation_st.pitch_f64, l_rtRollPitchYawSigPayload_st.angleFromGyroStepCalculation_st.yaw_f64 );
				puts(str);
    9f24:	e51f049c 	ldr	r0, [pc, #-1180]	; 9a90 <main+0xe88>
    9f28:	ebfffad3 	bl	8a7c <_init+0x17c>
				sprintf(str, "ACC MAG CALC Angles roll %f, pitch %f yaw  %f",
    9f2c:	e24b3fbb 	sub	r3, fp, #748	; 0x2ec
    9f30:	e1c320d0 	ldrd	r2, [r3]
    9f34:	e24b5fb9 	sub	r5, fp, #740	; 0x2e4
    9f38:	e1c540d0 	ldrd	r4, [r5]
    9f3c:	e24b1fb7 	sub	r1, fp, #732	; 0x2dc
    9f40:	e1c100d0 	ldrd	r0, [r1]
    9f44:	e1cd40f0 	strd	r4, [sp]
    9f48:	e1cd00f8 	strd	r0, [sp, #8]
    9f4c:	e51f04c4 	ldr	r0, [pc, #-1220]	; 9a90 <main+0xe88>
    9f50:	e51f14d4 	ldr	r1, [pc, #-1236]	; 9a84 <main+0xe7c>
    9f54:	ebfffadd 	bl	8ad0 <_init+0x1d0>
						l_rtRollPitchYawSigPayload_st.angleFromAccMagCalculation_st.roll_f64, l_rtRollPitchYawSigPayload_st.angleFromAccMagCalculation_st.pitch_f64, l_rtRollPitchYawSigPayload_st.angleFromAccMagCalculation_st.yaw_f64 );
				puts(str);
    9f58:	e51f04d0 	ldr	r0, [pc, #-1232]	; 9a90 <main+0xe88>
    9f5c:	ebfffac6 	bl	8a7c <_init+0x17c>
				sprintf(str, "COMPLEMENTARY Angles roll %f, pitch %f yaw %f",
    9f60:	e24b3fb5 	sub	r3, fp, #724	; 0x2d4
    9f64:	e1c320d0 	ldrd	r2, [r3]
    9f68:	e24b5fb3 	sub	r5, fp, #716	; 0x2cc
    9f6c:	e1c540d0 	ldrd	r4, [r5]
    9f70:	e24b1fb1 	sub	r1, fp, #708	; 0x2c4
    9f74:	e1c100d0 	ldrd	r0, [r1]
    9f78:	e1cd40f0 	strd	r4, [sp]
    9f7c:	e1cd00f8 	strd	r0, [sp, #8]
    9f80:	e51f04f8 	ldr	r0, [pc, #-1272]	; 9a90 <main+0xe88>
    9f84:	e51f1504 	ldr	r1, [pc, #-1284]	; 9a88 <main+0xe80>
    9f88:	ebfffad0 	bl	8ad0 <_init+0x1d0>
						l_rtRollPitchYawSigPayload_st.angleFromcomplementarySigState_st.roll_f64, l_rtRollPitchYawSigPayload_st.angleFromcomplementarySigState_st.pitch_f64, l_rtRollPitchYawSigPayload_st.angleFromcomplementarySigState_st.yaw_f64);
				puts(str);
    9f8c:	e51f0504 	ldr	r0, [pc, #-1284]	; 9a90 <main+0xe88>
    9f90:	ebfffab9 	bl	8a7c <_init+0x17c>
				sprintf(str, "KALMAN Angles roll %f, pitch %f yaw %f",
    9f94:	e24b3faf 	sub	r3, fp, #700	; 0x2bc
    9f98:	e1c320d0 	ldrd	r2, [r3]
    9f9c:	e24b5fad 	sub	r5, fp, #692	; 0x2b4
    9fa0:	e1c540d0 	ldrd	r4, [r5]
    9fa4:	e24b1fab 	sub	r1, fp, #684	; 0x2ac
    9fa8:	e1c100d0 	ldrd	r0, [r1]
    9fac:	e1cd40f0 	strd	r4, [sp]
    9fb0:	e1cd00f8 	strd	r0, [sp, #8]
    9fb4:	e51f052c 	ldr	r0, [pc, #-1324]	; 9a90 <main+0xe88>
    9fb8:	e51f1534 	ldr	r1, [pc, #-1332]	; 9a8c <main+0xe84>
    9fbc:	ebfffac3 	bl	8ad0 <_init+0x1d0>
						l_rtRollPitchYawSigPayload_st.angleFromkalmanSigState_st.roll_f64, l_rtRollPitchYawSigPayload_st.angleFromkalmanSigState_st.pitch_f64, l_rtRollPitchYawSigPayload_st.angleFromkalmanSigState_st.yaw_f64);
				puts(str);
    9fc0:	e51f0538 	ldr	r0, [pc, #-1336]	; 9a90 <main+0xe88>
    9fc4:	ebfffaac 	bl	8a7c <_init+0x17c>

				sendto(socketclient, (unsigned char *)&l_rtRollPitchYawSigPayload_st , (size_t)sizeof( l_rtRollPitchYawSigPayload_st ),  0, (struct sockaddr *)&remoteaddress, sizeof(remoteaddress));
    9fc8:	e24b3fc9 	sub	r3, fp, #804	; 0x324
    9fcc:	e24b2fa3 	sub	r2, fp, #652	; 0x28c
    9fd0:	e58d2000 	str	r2, [sp]
    9fd4:	e3a02010 	mov	r2, #16
    9fd8:	e58d2004 	str	r2, [sp, #4]
    9fdc:	e51b00dc 	ldr	r0, [fp, #-220]	; 0xdc
    9fe0:	e1a01003 	mov	r1, r3
    9fe4:	e3a02080 	mov	r2, #128	; 0x80
    9fe8:	e3a03000 	mov	r3, #0
    9fec:	ebfffa60 	bl	8974 <_init+0x74>

				usleep( 50000 ); //20ms = 50Hz
    9ff0:	e51f0564 	ldr	r0, [pc, #-1380]	; 9a94 <main+0xe8c>
    9ff4:	ebfffa67 	bl	8998 <_init+0x98>
			}
    9ff8:	eaffff58 	b	9d60 <main+0x1158>
			close(socketclient);
			break;
		}
		case TESTALLSENSORDATA:
		{
			printf("Starting IMU send all Sensor Values\n");
    9ffc:	e51f056c 	ldr	r0, [pc, #-1388]	; 9a98 <main+0xe90>
    a000:	ebfffa9d 	bl	8a7c <_init+0x17c>
			unsigned char	l_remoteHostAddr_rg4ui8[4] 	= {192,168,22,160};
    a004:	e51f2570 	ldr	r2, [pc, #-1392]	; 9a9c <main+0xe94>
    a008:	e24b3e29 	sub	r3, fp, #656	; 0x290
    a00c:	e5920000 	ldr	r0, [r2]
    a010:	e5830000 	str	r0, [r3]
			unsigned short	l_remoteHostPort_ui16		= 5000;
    a014:	e51f357c 	ldr	r3, [pc, #-1404]	; 9aa0 <main+0xe98>
    a018:	e14b3dbe 	strh	r3, [fp, #-222]	; 0xffffff22
			int				l_udpSocket_i32;
			unsigned int	l_sendState_bl;

			// open udp connection
			l_udpSocket_i32 = g_halMatlab_initConnection_i32( l_remoteHostAddr_rg4ui8, l_remoteHostPort_ui16 );
    a01c:	e24b2e29 	sub	r2, fp, #656	; 0x290
    a020:	e15b3dbe 	ldrh	r3, [fp, #-222]	; 0xffffff22
    a024:	e1a00002 	mov	r0, r2
    a028:	e1a01003 	mov	r1, r3
    a02c:	eb000e60 	bl	d9b4 <g_halMatlab_initConnection_i32>
    a030:	e50b00e4 	str	r0, [fp, #-228]	; 0xe4

			halImu_orientationValues l_imuMeasurements_st;
			g_halImu_initImuSensors_bl();
    a034:	eb000ab1 	bl	cb00 <g_halImu_initImuSensors_bl>

			while(1)
			{
				g_halImu_triggerImuReading_bl();
    a038:	eb000b1d 	bl	ccb4 <g_halImu_triggerImuReading_bl>
				g_halImu_triggerBaroReading_bl();
    a03c:	eb000ac6 	bl	cb5c <g_halImu_triggerBaroReading_bl>
				g_halImu_triggerGyroReading_bl();
    a040:	eb000adf 	bl	cbc4 <g_halImu_triggerGyroReading_bl>
				g_halImu_triggerAccReading_bl();
    a044:	eb000af2 	bl	cc14 <g_halImu_triggerAccReading_bl>

				l_imuMeasurements_st=g_halImu_getImuValues_str();
    a048:	e24b3fc9 	sub	r3, fp, #804	; 0x324
    a04c:	e1a00003 	mov	r0, r3
    a050:	eb000a99 	bl	cabc <g_halImu_getImuValues_str>

				l_sendState_bl = g_halMatlab_sendImuState_bl(l_udpSocket_i32, l_imuMeasurements_st);
    a054:	e1a0100d 	mov	r1, sp
    a058:	e24b2fc7 	sub	r2, fp, #796	; 0x31c
    a05c:	e3a03050 	mov	r3, #80	; 0x50
    a060:	e1a00001 	mov	r0, r1
    a064:	e1a01002 	mov	r1, r2
    a068:	e1a02003 	mov	r2, r3
    a06c:	ebfffa6d 	bl	8a28 <_init+0x128>
    a070:	e24b3fc9 	sub	r3, fp, #804	; 0x324
    a074:	e893000c 	ldm	r3, {r2, r3}
    a078:	e51b00e4 	ldr	r0, [fp, #-228]	; 0xe4
    a07c:	eb000cfe 	bl	d47c <g_halMatlab_sendImuState_bl>
    a080:	e1a03000 	mov	r3, r0
    a084:	e50b30e8 	str	r3, [fp, #-232]	; 0xe8

				printf("Acc X %f \n", l_imuMeasurements_st.acc.x_f64);
    a088:	e24b3fc9 	sub	r3, fp, #804	; 0x324
    a08c:	e1c320d0 	ldrd	r2, [r3]
    a090:	e51f05f4 	ldr	r0, [pc, #-1524]	; 9aa4 <main+0xe9c>
    a094:	ebfffa66 	bl	8a34 <_init+0x134>
				printf("Acc Y %f \n", l_imuMeasurements_st.acc.y_f64);
    a098:	e24b3fc7 	sub	r3, fp, #796	; 0x31c
    a09c:	e1c320d0 	ldrd	r2, [r3]
    a0a0:	e51f0600 	ldr	r0, [pc, #-1536]	; 9aa8 <main+0xea0>
    a0a4:	ebfffa62 	bl	8a34 <_init+0x134>
				printf("Acc Z %f \n", l_imuMeasurements_st.acc.z_f64);
    a0a8:	e24b3fc5 	sub	r3, fp, #788	; 0x314
    a0ac:	e1c320d0 	ldrd	r2, [r3]
    a0b0:	e51f060c 	ldr	r0, [pc, #-1548]	; 9aac <main+0xea4>
    a0b4:	ebfffa5e 	bl	8a34 <_init+0x134>
				printf("Mag X %f \n", l_imuMeasurements_st.mag.x_f64);
    a0b8:	e24b3fc3 	sub	r3, fp, #780	; 0x30c
    a0bc:	e1c320d0 	ldrd	r2, [r3]
    a0c0:	e51f0618 	ldr	r0, [pc, #-1560]	; 9ab0 <main+0xea8>
    a0c4:	ebfffa5a 	bl	8a34 <_init+0x134>
				printf("Mag Y %f \n", l_imuMeasurements_st.mag.y_f64);
    a0c8:	e24b3fc1 	sub	r3, fp, #772	; 0x304
    a0cc:	e1c320d0 	ldrd	r2, [r3]
    a0d0:	e51f0624 	ldr	r0, [pc, #-1572]	; 9ab4 <main+0xeac>
    a0d4:	ebfffa56 	bl	8a34 <_init+0x134>
				printf("Mag Z %f \n", l_imuMeasurements_st.mag.z_f64);
    a0d8:	e24b3fbf 	sub	r3, fp, #764	; 0x2fc
    a0dc:	e1c320d0 	ldrd	r2, [r3]
    a0e0:	e51f0630 	ldr	r0, [pc, #-1584]	; 9ab8 <main+0xeb0>
    a0e4:	ebfffa52 	bl	8a34 <_init+0x134>
				printf("Gyro yaw %f \n", l_imuMeasurements_st.gyro.yaw_f64);
    a0e8:	e24b3fb9 	sub	r3, fp, #740	; 0x2e4
    a0ec:	e1c320d0 	ldrd	r2, [r3]
    a0f0:	e51f063c 	ldr	r0, [pc, #-1596]	; 9abc <main+0xeb4>
    a0f4:	ebfffa4e 	bl	8a34 <_init+0x134>
				printf("Gyro pitch %f \n", l_imuMeasurements_st.gyro.pitch_f64);
    a0f8:	e24b3fbb 	sub	r3, fp, #748	; 0x2ec
    a0fc:	e1c320d0 	ldrd	r2, [r3]
    a100:	e51f0648 	ldr	r0, [pc, #-1608]	; 9ac0 <main+0xeb8>
    a104:	ebfffa4a 	bl	8a34 <_init+0x134>
				printf("Gyro roll %f \n", l_imuMeasurements_st.gyro.roll_f64);
    a108:	e24b3fbd 	sub	r3, fp, #756	; 0x2f4
    a10c:	e1c320d0 	ldrd	r2, [r3]
    a110:	e51f0654 	ldr	r0, [pc, #-1620]	; 9ac4 <main+0xebc>
    a114:	ebfffa46 	bl	8a34 <_init+0x134>
				printf("Temp %f \n", l_imuMeasurements_st.temperature_f64);
    a118:	e24b3fb7 	sub	r3, fp, #732	; 0x2dc
    a11c:	e1c320d0 	ldrd	r2, [r3]
    a120:	e51f0660 	ldr	r0, [pc, #-1632]	; 9ac8 <main+0xec0>
    a124:	ebfffa42 	bl	8a34 <_init+0x134>
				printf("Press %f \n", l_imuMeasurements_st.pressure_f64);
    a128:	e24b3fb5 	sub	r3, fp, #724	; 0x2d4
    a12c:	e1c320d0 	ldrd	r2, [r3]
    a130:	e51f066c 	ldr	r0, [pc, #-1644]	; 9acc <main+0xec4>
    a134:	ebfffa3e 	bl	8a34 <_init+0x134>
				printf("##########################################\n");
    a138:	e51f0670 	ldr	r0, [pc, #-1648]	; 9ad0 <main+0xec8>
    a13c:	ebfffa4e 	bl	8a7c <_init+0x17c>

				if ( l_sendState_bl != M_HAL_MATLAB_SUCCESS_UI8 )
    a140:	e51b30e8 	ldr	r3, [fp, #-232]	; 0xe8
    a144:	e3530000 	cmp	r3, #0
    a148:	0a000001 	beq	a154 <main+0x154c>
				{
					printf("UDP-Packet error\n");
    a14c:	e51f0680 	ldr	r0, [pc, #-1664]	; 9ad4 <main+0xecc>
    a150:	ebfffa49 	bl	8a7c <_init+0x17c>
				}
				usleep( 20000 ); //20ms = 50Hz
    a154:	e51f0684 	ldr	r0, [pc, #-1668]	; 9ad8 <main+0xed0>
    a158:	ebfffa0e 	bl	8998 <_init+0x98>
			}
    a15c:	eaffffb5 	b	a038 <main+0x1430>

		case TESTMOTORPWM:
		{
			char BLCtrlADRExecuteOrder[DEFMotorsCount];

			int i = 0;
    a160:	e3a03000 	mov	r3, #0
    a164:	e50b3054 	str	r3, [fp, #-84]	; 0x54
			const int MAXPWM = DEFMotorSetpointMAX;
    a168:	e3a030ff 	mov	r3, #255	; 0xff
    a16c:	e50b30ec 	str	r3, [fp, #-236]	; 0xec
			const int STEPSIZE = 10;
    a170:	e3a0300a 	mov	r3, #10
    a174:	e50b30f0 	str	r3, [fp, #-240]	; 0xf0
			unsigned int pwmValue=0;
    a178:	e3a03000 	mov	r3, #0
    a17c:	e50b3058 	str	r3, [fp, #-88]	; 0x58

			getBLCtrlADRExecuteOrder(&BLCtrlADRExecuteOrder[0]);
    a180:	e24b3fa5 	sub	r3, fp, #660	; 0x294
    a184:	e1a00003 	mov	r0, r3
    a188:	eb000cb4 	bl	d460 <getBLCtrlADRExecuteOrder>

			printf("Start Testing Motors with PWM");
    a18c:	e51f06b8 	ldr	r0, [pc, #-1720]	; 9adc <main+0xed4>
    a190:	ebfffa27 	bl	8a34 <_init+0x134>

			while(1)
			{
				for(i = 0; i < DEFMotorsCount ;i++)
    a194:	e3a03000 	mov	r3, #0
    a198:	e50b3054 	str	r3, [fp, #-84]	; 0x54
    a19c:	ea00000c 	b	a1d4 <main+0x15cc>
				{
					g_lldI2c_WriteI2c_bl(BLCtrlADRExecuteOrder[i],pwmValue,1);
    a1a0:	e51f36c8 	ldr	r3, [pc, #-1736]	; 9ae0 <main+0xed8>
    a1a4:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    a1a8:	e24b104c 	sub	r1, fp, #76	; 0x4c
    a1ac:	e0812002 	add	r2, r1, r2
    a1b0:	e0823003 	add	r3, r2, r3
    a1b4:	e5d33000 	ldrb	r3, [r3]
    a1b8:	e1a00003 	mov	r0, r3
    a1bc:	e51b1058 	ldr	r1, [fp, #-88]	; 0x58
    a1c0:	e3a02001 	mov	r2, #1
    a1c4:	eb000b65 	bl	cf60 <g_lldI2c_WriteI2c_bl>

			printf("Start Testing Motors with PWM");

			while(1)
			{
				for(i = 0; i < DEFMotorsCount ;i++)
    a1c8:	e51b3054 	ldr	r3, [fp, #-84]	; 0x54
    a1cc:	e2833001 	add	r3, r3, #1
    a1d0:	e50b3054 	str	r3, [fp, #-84]	; 0x54
    a1d4:	e51b3054 	ldr	r3, [fp, #-84]	; 0x54
    a1d8:	e3530003 	cmp	r3, #3
    a1dc:	daffffef 	ble	a1a0 <main+0x1598>
				{
					g_lldI2c_WriteI2c_bl(BLCtrlADRExecuteOrder[i],pwmValue,1);
				}

				usleep(10000);//10ms
    a1e0:	e51f0704 	ldr	r0, [pc, #-1796]	; 9ae4 <main+0xedc>
    a1e4:	ebfff9eb 	bl	8998 <_init+0x98>

				pwmValue =+STEPSIZE;
    a1e8:	e51b30f0 	ldr	r3, [fp, #-240]	; 0xf0
    a1ec:	e50b3058 	str	r3, [fp, #-88]	; 0x58
				if(pwmValue > MAXPWM)
    a1f0:	e51b20ec 	ldr	r2, [fp, #-236]	; 0xec
    a1f4:	e51b3058 	ldr	r3, [fp, #-88]	; 0x58
    a1f8:	e1520003 	cmp	r2, r3
    a1fc:	2a000002 	bcs	a20c <main+0x1604>
				{
					pwmValue= DEFMotorSetpointMAX;
    a200:	e3a030ff 	mov	r3, #255	; 0xff
    a204:	e50b3058 	str	r3, [fp, #-88]	; 0x58
				}

			}
    a208:	eaffffe1 	b	a194 <main+0x158c>
    a20c:	eaffffe0 	b	a194 <main+0x158c>
		break;
		}
		default:
		case TESTEND:
		{
			printf("Nothing found");
    a210:	e51f0730 	ldr	r0, [pc, #-1840]	; 9ae8 <main+0xee0>
    a214:	ebfffa06 	bl	8a34 <_init+0x134>
			break;
    a218:	e1a00000 	nop			; (mov r0, r0)
		}
	}
	return 0;
    a21c:	e3a03000 	mov	r3, #0
}
    a220:	e1a00003 	mov	r0, r3
    a224:	e24bd04c 	sub	sp, fp, #76	; 0x4c
    a228:	ecbd8b0c 	vpop	{d8-d13}
    a22c:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000a230 <g_halADC_get_ui16>:
 * 2015/05/08 mabrgs00:
 *  Error handling from I2C included
 *
 * \endinternal
 ***********************************************************************/
float g_halADC_get_ui16(unsigned char l_input_ui8){
    a230:	e92d4800 	push	{fp, lr}
    a234:	e28db004 	add	fp, sp, #4
    a238:	e24dd018 	sub	sp, sp, #24
    a23c:	e1a03000 	mov	r3, r0
    a240:	e54b3015 	strb	r3, [fp, #-21]

  unsigned char l_address_ui8 = 0x49;		// Address of our device on the I2C bus
    a244:	e3a03049 	mov	r3, #73	; 0x49
    a248:	e54b3006 	strb	r3, [fp, #-6]
  unsigned char l_mux_ui8;			// Config value depening on input
  unsigned short l_val_ui16;			// (Converted) result of ADC
  unsigned char l_checkerror_bl;			// Variable to store return value

  // Setting Config according to select Input
  switch(l_input_ui8){			   	// Standard: 1100 0011  (Bit 15-8) Input A0
    a24c:	e55b3015 	ldrb	r3, [fp, #-21]
    a250:	e2433001 	sub	r3, r3, #1
    a254:	e3530003 	cmp	r3, #3
    a258:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    a25c:	ea00000f 	b	a2a0 <g_halADC_get_ui16+0x70>
    a260:	0000a270 	.word	0x0000a270
    a264:	0000a27c 	.word	0x0000a27c
    a268:	0000a288 	.word	0x0000a288
    a26c:	0000a294 	.word	0x0000a294
	case 1: l_mux_ui8 = 0xC2; break;	// Input: A0	
    a270:	e3e0303d 	mvn	r3, #61	; 0x3d
    a274:	e54b3005 	strb	r3, [fp, #-5]
    a278:	ea00000a 	b	a2a8 <g_halADC_get_ui16+0x78>
	case 2: l_mux_ui8 = 0xD2; break;	
    a27c:	e3e0302d 	mvn	r3, #45	; 0x2d
    a280:	e54b3005 	strb	r3, [fp, #-5]
    a284:	ea000007 	b	a2a8 <g_halADC_get_ui16+0x78>
	case 3: l_mux_ui8 = 0xE2; break;	
    a288:	e3e0301d 	mvn	r3, #29
    a28c:	e54b3005 	strb	r3, [fp, #-5]
    a290:	ea000004 	b	a2a8 <g_halADC_get_ui16+0x78>
	case 4: l_mux_ui8 = 0xF2; break;	// Input: A3
    a294:	e3e0300d 	mvn	r3, #13
    a298:	e54b3005 	strb	r3, [fp, #-5]
    a29c:	ea000001 	b	a2a8 <g_halADC_get_ui16+0x78>
	default: l_mux_ui8 = 0xC2; 			
    a2a0:	e3e0303d 	mvn	r3, #61	; 0x3d
    a2a4:	e54b3005 	strb	r3, [fp, #-5]
  // First Hex depends on Starting Conversion + the Input, which Pin to read A0-3
  // Second Value is PGA (001)=+-4,099V and continuous Mode (0)


  // These three bytes are written to the ADS1015 to set the config register and start the conversion 
  l_writeBuf_rg24[0] = 1;		// This sets the pointer register to write two bytes to the config register
    a2a8:	e3a03001 	mov	r3, #1
    a2ac:	e54b3010 	strb	r3, [fp, #-16]
  l_writeBuf_rg24[1] = l_mux_ui8;   	// This sets the 8 MSBs of the config register (bits 15-8) to 11000011
    a2b0:	e55b3005 	ldrb	r3, [fp, #-5]
    a2b4:	e54b300f 	strb	r3, [fp, #-15]
  l_writeBuf_rg24[2] = 0x23;  		// This sets the 8 LSBs of the config register (bits  7-0) to 00100011   
    a2b8:	e3a03023 	mov	r3, #35	; 0x23
    a2bc:	e54b300e 	strb	r3, [fp, #-14]
  // First Hex is sample Rate. (001) sets to 250SPS + Comp Mode (0)
  // Second Hex is Comp. config. (0011) disable the comparator


  // Initialize the buffer used to read data from the ADS1015 to 0
  l_readBuf_rg16[0]= 0;		
    a2c0:	e3a03000 	mov	r3, #0
    a2c4:	e54b3014 	strb	r3, [fp, #-20]
  l_readBuf_rg16[1]= 0;
    a2c8:	e3a03000 	mov	r3, #0
    a2cc:	e54b3013 	strb	r3, [fp, #-19]
  
  // Write l_writeBuf_rg24 to the ADS1015, the 3 specifies the number of bytes we are writing,
  // this begins a continuous conversion
  l_checkerror_bl = g_lldI2c_WriteI2c_bl(l_address_ui8,l_writeBuf_rg24,3);
    a2d0:	e55b2006 	ldrb	r2, [fp, #-6]
    a2d4:	e24b3010 	sub	r3, fp, #16
    a2d8:	e1a00002 	mov	r0, r2
    a2dc:	e1a01003 	mov	r1, r3
    a2e0:	e3a02003 	mov	r2, #3
    a2e4:	eb000b1d 	bl	cf60 <g_lldI2c_WriteI2c_bl>
    a2e8:	e1a03000 	mov	r3, r0
    a2ec:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    a2f0:	e55b3007 	ldrb	r3, [fp, #-7]
    a2f4:	e3530001 	cmp	r3, #1
    a2f8:	1a000001 	bne	a304 <g_halADC_get_ui16+0xd4>
	{
	return -1;
    a2fc:	eddf7a43 	vldr	s15, [pc, #268]	; a410 <g_halADC_get_ui16+0x1e0>
    a300:	ea00003b 	b	a3f4 <g_halADC_get_ui16+0x1c4>
	}

  // Read the config register into readBuf
  l_checkerror_bl = g_lldI2c_ReadI2c_bl(l_address_ui8,l_readBuf_rg16,2);
    a304:	e55b2006 	ldrb	r2, [fp, #-6]
    a308:	e24b3014 	sub	r3, fp, #20
    a30c:	e1a00002 	mov	r0, r2
    a310:	e1a01003 	mov	r1, r3
    a314:	e3a02002 	mov	r2, #2
    a318:	eb000b48 	bl	d040 <g_lldI2c_ReadI2c_bl>
    a31c:	e1a03000 	mov	r3, r0
    a320:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    a324:	e55b3007 	ldrb	r3, [fp, #-7]
    a328:	e3530001 	cmp	r3, #1
    a32c:	1a000001 	bne	a338 <g_halADC_get_ui16+0x108>
	{
	return -1;
    a330:	eddf7a36 	vldr	s15, [pc, #216]	; a410 <g_halADC_get_ui16+0x1e0>
    a334:	ea00002e 	b	a3f4 <g_halADC_get_ui16+0x1c4>
	}	
	
  // Set pointer register to 0 to read from the conversion register
  l_writeBuf_rg24[0] = 0;			
    a338:	e3a03000 	mov	r3, #0
    a33c:	e54b3010 	strb	r3, [fp, #-16]
  l_checkerror_bl = g_lldI2c_WriteI2c_bl(l_address_ui8, l_writeBuf_rg24,1);
    a340:	e55b2006 	ldrb	r2, [fp, #-6]
    a344:	e24b3010 	sub	r3, fp, #16
    a348:	e1a00002 	mov	r0, r2
    a34c:	e1a01003 	mov	r1, r3
    a350:	e3a02001 	mov	r2, #1
    a354:	eb000b01 	bl	cf60 <g_lldI2c_WriteI2c_bl>
    a358:	e1a03000 	mov	r3, r0
    a35c:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    a360:	e55b3007 	ldrb	r3, [fp, #-7]
    a364:	e3530001 	cmp	r3, #1
    a368:	1a000001 	bne	a374 <g_halADC_get_ui16+0x144>
	{
	return -1;
    a36c:	eddf7a27 	vldr	s15, [pc, #156]	; a410 <g_halADC_get_ui16+0x1e0>
    a370:	ea00001f 	b	a3f4 <g_halADC_get_ui16+0x1c4>
	}

  // Read the contents of the conversion register into readBuf		
  l_checkerror_bl = g_lldI2c_ReadI2c_bl(l_address_ui8,l_readBuf_rg16,2);	
    a374:	e55b2006 	ldrb	r2, [fp, #-6]
    a378:	e24b3014 	sub	r3, fp, #20
    a37c:	e1a00002 	mov	r0, r2
    a380:	e1a01003 	mov	r1, r3
    a384:	e3a02002 	mov	r2, #2
    a388:	eb000b2c 	bl	d040 <g_lldI2c_ReadI2c_bl>
    a38c:	e1a03000 	mov	r3, r0
    a390:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    a394:	e55b3007 	ldrb	r3, [fp, #-7]
    a398:	e3530001 	cmp	r3, #1
    a39c:	1a000001 	bne	a3a8 <g_halADC_get_ui16+0x178>
	{
	return -1;
    a3a0:	eddf7a1a 	vldr	s15, [pc, #104]	; a410 <g_halADC_get_ui16+0x1e0>
    a3a4:	ea000012 	b	a3f4 <g_halADC_get_ui16+0x1c4>
	}

  // Combine the two bytes of readBuf into a single 16 bit result 
  l_val_ui16 = l_readBuf_rg16[0] << 8 | l_readBuf_rg16[1];	
    a3a8:	e55b3014 	ldrb	r3, [fp, #-20]
    a3ac:	e1a03403 	lsl	r3, r3, #8
    a3b0:	e6ff2073 	uxth	r2, r3
    a3b4:	e55b3013 	ldrb	r3, [fp, #-19]
    a3b8:	e1823003 	orr	r3, r2, r3
    a3bc:	e6ff3073 	uxth	r3, r3
    a3c0:	e14b30ba 	strh	r3, [fp, #-10]
  l_val_ui16 = l_val_ui16 >> 4; 
    a3c4:	e15b30ba 	ldrh	r3, [fp, #-10]
    a3c8:	e1a03223 	lsr	r3, r3, #4
    a3cc:	e14b30ba 	strh	r3, [fp, #-10]

  return((float)l_val_ui16*4.096/2047.0);
    a3d0:	e15b30ba 	ldrh	r3, [fp, #-10]
    a3d4:	ee073a10 	vmov	s14, r3
    a3d8:	eef87a47 	vcvt.f32.u32	s15, s14
    a3dc:	eeb76ae7 	vcvt.f64.f32	d6, s15
    a3e0:	ed9f7b06 	vldr	d7, [pc, #24]	; a400 <g_halADC_get_ui16+0x1d0>
    a3e4:	ee266b07 	vmul.f64	d6, d6, d7
    a3e8:	ed9f7b06 	vldr	d7, [pc, #24]	; a408 <g_halADC_get_ui16+0x1d8>
    a3ec:	ee867b07 	vdiv.f64	d7, d6, d7
    a3f0:	eef77bc7 	vcvt.f32.f64	s15, d7

}
    a3f4:	eeb00a67 	vmov.f32	s0, s15
    a3f8:	e24bd004 	sub	sp, fp, #4
    a3fc:	e8bd8800 	pop	{fp, pc}
    a400:	d2f1a9fc 	.word	0xd2f1a9fc
    a404:	4010624d 	.word	0x4010624d
    a408:	00000000 	.word	0x00000000
    a40c:	409ffc00 	.word	0x409ffc00
    a410:	bf800000 	.word	0xbf800000
    a414:	e1a00000 	nop			; (mov r0, r0)

0000a418 <g_halBatCheck_getBatteryStatus_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halBatCheck_getBatteryStatus_f64(void)
{
    a418:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a41c:	e28db000 	add	fp, sp, #0
	return m_batteryLevel_f64;
    a420:	e59f3014 	ldr	r3, [pc, #20]	; a43c <g_halBatCheck_getBatteryStatus_f64+0x24>
    a424:	e1c320d0 	ldrd	r2, [r3]
    a428:	ec432b17 	vmov	d7, r2, r3
}
    a42c:	eeb00b47 	vmov.f64	d0, d7
    a430:	e24bd000 	sub	sp, fp, #0
    a434:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a438:	e12fff1e 	bx	lr
    a43c:	00019698 	.word	0x00019698

0000a440 <g_halBatCheck_readBatStatusFromI2C_bl>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
unsigned int  g_halBatCheck_readBatStatusFromI2C_bl(void)
{
    a440:	e92d4800 	push	{fp, lr}
    a444:	e28db004 	add	fp, sp, #4
    a448:	e24dd008 	sub	sp, sp, #8
	double l_batteryLevel_f64;

	l_batteryLevel_f64=g_halADC_get_ui16(M_HAL_BATCHECK_ADC_INPUT_PORT_UI8);
    a44c:	e3a00001 	mov	r0, #1
    a450:	ebffff76 	bl	a230 <g_halADC_get_ui16>
    a454:	eef07a40 	vmov.f32	s15, s0
    a458:	eeb77ae7 	vcvt.f64.f32	d7, s15
    a45c:	ed0b7b03 	vstr	d7, [fp, #-12]

	if(l_batteryLevel_f64<=0)
    a460:	ed1b7b03 	vldr	d7, [fp, #-12]
    a464:	eeb57bc0 	vcmpe.f64	d7, #0.0
    a468:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    a46c:	8a000001 	bhi	a478 <g_halBatCheck_readBatStatusFromI2C_bl+0x38>
	{return M_HAL_BATCHECK_FAILED_BL;}
    a470:	e3a03001 	mov	r3, #1
    a474:	ea000003 	b	a488 <g_halBatCheck_readBatStatusFromI2C_bl+0x48>

	m_batteryLevel_f64=l_batteryLevel_f64;
    a478:	e59f1014 	ldr	r1, [pc, #20]	; a494 <g_halBatCheck_readBatStatusFromI2C_bl+0x54>
    a47c:	e14b20dc 	ldrd	r2, [fp, #-12]
    a480:	e1c120f0 	strd	r2, [r1]

	return M_HAL_BATCHECK_SUCCESS_BL;
    a484:	e3a03000 	mov	r3, #0
}
    a488:	e1a00003 	mov	r0, r3
    a48c:	e24bd004 	sub	sp, fp, #4
    a490:	e8bd8800 	pop	{fp, pc}
    a494:	00019698 	.word	0x00019698

0000a498 <g_halGps_getTime_ui32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
unsigned int g_halGps_getTime_ui32(void)
{
    a498:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a49c:	e28db000 	add	fp, sp, #0
	return l_time_ui32;
    a4a0:	e59f3010 	ldr	r3, [pc, #16]	; a4b8 <g_halGps_getTime_ui32+0x20>
    a4a4:	e5933000 	ldr	r3, [r3]
}
    a4a8:	e1a00003 	mov	r0, r3
    a4ac:	e24bd000 	sub	sp, fp, #0
    a4b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a4b4:	e12fff1e 	bx	lr
    a4b8:	000196d0 	.word	0x000196d0

0000a4bc <g_halGps_getLongitude_st>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
struct strPosition g_halGps_getLongitude_st(void)
{
    a4bc:	e92d4800 	push	{fp, lr}
    a4c0:	e28db004 	add	fp, sp, #4
    a4c4:	e24dd008 	sub	sp, sp, #8
    a4c8:	e50b0008 	str	r0, [fp, #-8]
	return l_gps_longitude_st;
    a4cc:	e51b2008 	ldr	r2, [fp, #-8]
    a4d0:	e59f3020 	ldr	r3, [pc, #32]	; a4f8 <g_halGps_getLongitude_st+0x3c>
    a4d4:	e1a0c002 	mov	ip, r2
    a4d8:	e1a0e003 	mov	lr, r3
    a4dc:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    a4e0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    a4e4:	e89e0003 	ldm	lr, {r0, r1}
    a4e8:	e88c0003 	stm	ip, {r0, r1}
}
    a4ec:	e51b0008 	ldr	r0, [fp, #-8]
    a4f0:	e24bd004 	sub	sp, fp, #4
    a4f4:	e8bd8800 	pop	{fp, pc}
    a4f8:	000196a0 	.word	0x000196a0

0000a4fc <g_halGps_getLatitude_st>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
struct strPosition g_halGps_getLatitude_st(void)
{
    a4fc:	e92d4800 	push	{fp, lr}
    a500:	e28db004 	add	fp, sp, #4
    a504:	e24dd008 	sub	sp, sp, #8
    a508:	e50b0008 	str	r0, [fp, #-8]
	return l_gps_latitude_st;
    a50c:	e51b2008 	ldr	r2, [fp, #-8]
    a510:	e59f3020 	ldr	r3, [pc, #32]	; a538 <g_halGps_getLatitude_st+0x3c>
    a514:	e1a0c002 	mov	ip, r2
    a518:	e1a0e003 	mov	lr, r3
    a51c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    a520:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    a524:	e89e0003 	ldm	lr, {r0, r1}
    a528:	e88c0003 	stm	ip, {r0, r1}
}
    a52c:	e51b0008 	ldr	r0, [fp, #-8]
    a530:	e24bd004 	sub	sp, fp, #4
    a534:	e8bd8800 	pop	{fp, pc}
    a538:	000196b8 	.word	0x000196b8

0000a53c <g_halGps_getFix_ch>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
char g_halGps_getFix_ch(void)
{
    a53c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a540:	e28db000 	add	fp, sp, #0
	return l_fix_ch;
    a544:	e59f3010 	ldr	r3, [pc, #16]	; a55c <g_halGps_getFix_ch+0x20>
    a548:	e5d33000 	ldrb	r3, [r3]
}
    a54c:	e1a00003 	mov	r0, r3
    a550:	e24bd000 	sub	sp, fp, #0
    a554:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a558:	e12fff1e 	bx	lr
    a55c:	000196d4 	.word	0x000196d4

0000a560 <g_halGps_getVelocity_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getVelocity_f64(void)
{
    a560:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a564:	e28db000 	add	fp, sp, #0
	return l_velocity_f64;
    a568:	e59f3014 	ldr	r3, [pc, #20]	; a584 <g_halGps_getVelocity_f64+0x24>
    a56c:	e1c320d0 	ldrd	r2, [r3]
    a570:	ec432b17 	vmov	d7, r2, r3
}
    a574:	eeb00b47 	vmov.f64	d0, d7
    a578:	e24bd000 	sub	sp, fp, #0
    a57c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a580:	e12fff1e 	bx	lr
    a584:	000196d8 	.word	0x000196d8

0000a588 <g_halGps_getDirection_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getDirection_f64(void)
{
    a588:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a58c:	e28db000 	add	fp, sp, #0
	return l_direction_f64;
    a590:	e59f3014 	ldr	r3, [pc, #20]	; a5ac <g_halGps_getDirection_f64+0x24>
    a594:	e1c320d0 	ldrd	r2, [r3]
    a598:	ec432b17 	vmov	d7, r2, r3
}
    a59c:	eeb00b47 	vmov.f64	d0, d7
    a5a0:	e24bd000 	sub	sp, fp, #0
    a5a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a5a8:	e12fff1e 	bx	lr
    a5ac:	000196e0 	.word	0x000196e0

0000a5b0 <g_halGps_getDate_ui32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
unsigned int g_halGps_getDate_ui32(void)
{
    a5b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a5b4:	e28db000 	add	fp, sp, #0
	return l_date_ui32;
    a5b8:	e59f3010 	ldr	r3, [pc, #16]	; a5d0 <g_halGps_getDate_ui32+0x20>
    a5bc:	e5933000 	ldr	r3, [r3]
}
    a5c0:	e1a00003 	mov	r0, r3
    a5c4:	e24bd000 	sub	sp, fp, #0
    a5c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a5cc:	e12fff1e 	bx	lr
    a5d0:	000196e8 	.word	0x000196e8

0000a5d4 <g_halGps_getHeight_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getHeight_f64(void)
{
    a5d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a5d8:	e28db000 	add	fp, sp, #0
	return l_height_f64;
    a5dc:	e59f3014 	ldr	r3, [pc, #20]	; a5f8 <g_halGps_getHeight_f64+0x24>
    a5e0:	e1c320d0 	ldrd	r2, [r3]
    a5e4:	ec432b17 	vmov	d7, r2, r3
}
    a5e8:	eeb00b47 	vmov.f64	d0, d7
    a5ec:	e24bd000 	sub	sp, fp, #0
    a5f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a5f4:	e12fff1e 	bx	lr
    a5f8:	000196f0 	.word	0x000196f0

0000a5fc <g_halGps_getGeoid_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getGeoid_f64(void)
{
    a5fc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a600:	e28db000 	add	fp, sp, #0
	return l_geoid_f64;
    a604:	e59f3014 	ldr	r3, [pc, #20]	; a620 <g_halGps_getGeoid_f64+0x24>
    a608:	e1c320d0 	ldrd	r2, [r3]
    a60c:	ec432b17 	vmov	d7, r2, r3
}
    a610:	eeb00b47 	vmov.f64	d0, d7
    a614:	e24bd000 	sub	sp, fp, #0
    a618:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a61c:	e12fff1e 	bx	lr
    a620:	000196f8 	.word	0x000196f8

0000a624 <l_resetMessage1Values_vd>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void l_resetMessage1Values_vd(void)
{
    a624:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a628:	e28db000 	add	fp, sp, #0
	l_time_ui32=0;
    a62c:	e59f3098 	ldr	r3, [pc, #152]	; a6cc <l_resetMessage1Values_vd+0xa8>
    a630:	e3a02000 	mov	r2, #0
    a634:	e5832000 	str	r2, [r3]
	l_gps_longitude_st.l_degree_ui32=0;
    a638:	e59f3090 	ldr	r3, [pc, #144]	; a6d0 <l_resetMessage1Values_vd+0xac>
    a63c:	e3a02000 	mov	r2, #0
    a640:	e5832000 	str	r2, [r3]
	l_gps_longitude_st.l_minutes_ui32=0;
    a644:	e59f3084 	ldr	r3, [pc, #132]	; a6d0 <l_resetMessage1Values_vd+0xac>
    a648:	e3a02000 	mov	r2, #0
    a64c:	e5832004 	str	r2, [r3, #4]
	l_gps_longitude_st.l_seconds_f64=0;
    a650:	e59f1078 	ldr	r1, [pc, #120]	; a6d0 <l_resetMessage1Values_vd+0xac>
    a654:	e3a02000 	mov	r2, #0
    a658:	e3a03000 	mov	r3, #0
    a65c:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_longitude_st.l_cardinalDirection_ch=' ';
    a660:	e59f3068 	ldr	r3, [pc, #104]	; a6d0 <l_resetMessage1Values_vd+0xac>
    a664:	e3a02020 	mov	r2, #32
    a668:	e5c32010 	strb	r2, [r3, #16]
	l_gps_latitude_st.l_degree_ui32=0;
    a66c:	e59f3060 	ldr	r3, [pc, #96]	; a6d4 <l_resetMessage1Values_vd+0xb0>
    a670:	e3a02000 	mov	r2, #0
    a674:	e5832000 	str	r2, [r3]
	l_gps_latitude_st.l_minutes_ui32=0;
    a678:	e59f3054 	ldr	r3, [pc, #84]	; a6d4 <l_resetMessage1Values_vd+0xb0>
    a67c:	e3a02000 	mov	r2, #0
    a680:	e5832004 	str	r2, [r3, #4]
	l_gps_latitude_st.l_seconds_f64=0;
    a684:	e59f1048 	ldr	r1, [pc, #72]	; a6d4 <l_resetMessage1Values_vd+0xb0>
    a688:	e3a02000 	mov	r2, #0
    a68c:	e3a03000 	mov	r3, #0
    a690:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_latitude_st.l_cardinalDirection_ch=' ';
    a694:	e59f3038 	ldr	r3, [pc, #56]	; a6d4 <l_resetMessage1Values_vd+0xb0>
    a698:	e3a02020 	mov	r2, #32
    a69c:	e5c32010 	strb	r2, [r3, #16]
	l_height_f64=0;
    a6a0:	e59f1030 	ldr	r1, [pc, #48]	; a6d8 <l_resetMessage1Values_vd+0xb4>
    a6a4:	e3a02000 	mov	r2, #0
    a6a8:	e3a03000 	mov	r3, #0
    a6ac:	e1c120f0 	strd	r2, [r1]
	l_geoid_f64=0;
    a6b0:	e59f1024 	ldr	r1, [pc, #36]	; a6dc <l_resetMessage1Values_vd+0xb8>
    a6b4:	e3a02000 	mov	r2, #0
    a6b8:	e3a03000 	mov	r3, #0
    a6bc:	e1c120f0 	strd	r2, [r1]
}
    a6c0:	e24bd000 	sub	sp, fp, #0
    a6c4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a6c8:	e12fff1e 	bx	lr
    a6cc:	000196d0 	.word	0x000196d0
    a6d0:	000196a0 	.word	0x000196a0
    a6d4:	000196b8 	.word	0x000196b8
    a6d8:	000196f0 	.word	0x000196f0
    a6dc:	000196f8 	.word	0x000196f8

0000a6e0 <l_resetMessage2Values_vd>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void l_resetMessage2Values_vd(void)
{
    a6e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    a6e4:	e28db000 	add	fp, sp, #0
	l_time_ui32=0;
    a6e8:	e59f30b0 	ldr	r3, [pc, #176]	; a7a0 <l_resetMessage2Values_vd+0xc0>
    a6ec:	e3a02000 	mov	r2, #0
    a6f0:	e5832000 	str	r2, [r3]
	l_fix_ch=' ';
    a6f4:	e59f30a8 	ldr	r3, [pc, #168]	; a7a4 <l_resetMessage2Values_vd+0xc4>
    a6f8:	e3a02020 	mov	r2, #32
    a6fc:	e5c32000 	strb	r2, [r3]
	l_gps_longitude_st.l_degree_ui32=0;
    a700:	e59f30a0 	ldr	r3, [pc, #160]	; a7a8 <l_resetMessage2Values_vd+0xc8>
    a704:	e3a02000 	mov	r2, #0
    a708:	e5832000 	str	r2, [r3]
	l_gps_longitude_st.l_minutes_ui32=0;
    a70c:	e59f3094 	ldr	r3, [pc, #148]	; a7a8 <l_resetMessage2Values_vd+0xc8>
    a710:	e3a02000 	mov	r2, #0
    a714:	e5832004 	str	r2, [r3, #4]
	l_gps_longitude_st.l_seconds_f64=0;
    a718:	e59f1088 	ldr	r1, [pc, #136]	; a7a8 <l_resetMessage2Values_vd+0xc8>
    a71c:	e3a02000 	mov	r2, #0
    a720:	e3a03000 	mov	r3, #0
    a724:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_longitude_st.l_cardinalDirection_ch=' ';
    a728:	e59f3078 	ldr	r3, [pc, #120]	; a7a8 <l_resetMessage2Values_vd+0xc8>
    a72c:	e3a02020 	mov	r2, #32
    a730:	e5c32010 	strb	r2, [r3, #16]
	l_gps_latitude_st.l_degree_ui32=0;
    a734:	e59f3070 	ldr	r3, [pc, #112]	; a7ac <l_resetMessage2Values_vd+0xcc>
    a738:	e3a02000 	mov	r2, #0
    a73c:	e5832000 	str	r2, [r3]
	l_gps_latitude_st.l_minutes_ui32=0;
    a740:	e59f3064 	ldr	r3, [pc, #100]	; a7ac <l_resetMessage2Values_vd+0xcc>
    a744:	e3a02000 	mov	r2, #0
    a748:	e5832004 	str	r2, [r3, #4]
	l_gps_latitude_st.l_seconds_f64=0;
    a74c:	e59f1058 	ldr	r1, [pc, #88]	; a7ac <l_resetMessage2Values_vd+0xcc>
    a750:	e3a02000 	mov	r2, #0
    a754:	e3a03000 	mov	r3, #0
    a758:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_latitude_st.l_cardinalDirection_ch=' ';
    a75c:	e59f3048 	ldr	r3, [pc, #72]	; a7ac <l_resetMessage2Values_vd+0xcc>
    a760:	e3a02020 	mov	r2, #32
    a764:	e5c32010 	strb	r2, [r3, #16]
	l_velocity_f64=0;
    a768:	e59f1040 	ldr	r1, [pc, #64]	; a7b0 <l_resetMessage2Values_vd+0xd0>
    a76c:	e3a02000 	mov	r2, #0
    a770:	e3a03000 	mov	r3, #0
    a774:	e1c120f0 	strd	r2, [r1]
	l_direction_f64=0;
    a778:	e59f1034 	ldr	r1, [pc, #52]	; a7b4 <l_resetMessage2Values_vd+0xd4>
    a77c:	e3a02000 	mov	r2, #0
    a780:	e3a03000 	mov	r3, #0
    a784:	e1c120f0 	strd	r2, [r1]
	l_date_ui32=0;
    a788:	e59f3028 	ldr	r3, [pc, #40]	; a7b8 <l_resetMessage2Values_vd+0xd8>
    a78c:	e3a02000 	mov	r2, #0
    a790:	e5832000 	str	r2, [r3]
}
    a794:	e24bd000 	sub	sp, fp, #0
    a798:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    a79c:	e12fff1e 	bx	lr
    a7a0:	000196d0 	.word	0x000196d0
    a7a4:	000196d4 	.word	0x000196d4
    a7a8:	000196a0 	.word	0x000196a0
    a7ac:	000196b8 	.word	0x000196b8
    a7b0:	000196d8 	.word	0x000196d8
    a7b4:	000196e0 	.word	0x000196e0
    a7b8:	000196e8 	.word	0x000196e8

0000a7bc <g_halGps_getData_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGps_getData_i32(void)
{
    a7bc:	e92d4800 	push	{fp, lr}
    a7c0:	e28db004 	add	fp, sp, #4

	l_rec_Data_ch=g_lldUart_readByte_ch();
    a7c4:	eb000af8 	bl	d3ac <g_lldUart_readByte_ch>
    a7c8:	e1a03000 	mov	r3, r0
    a7cc:	e1a02003 	mov	r2, r3
    a7d0:	e59f38e0 	ldr	r3, [pc, #2272]	; b0b8 <g_halGps_getData_i32+0x8fc>
    a7d4:	e5c32000 	strb	r2, [r3]

	if(!l_message_position_ch)//check which message is received
    a7d8:	e59f38c4 	ldr	r3, [pc, #2244]	; b0a4 <g_halGps_getData_i32+0x8e8>
    a7dc:	e5d33000 	ldrb	r3, [r3]
    a7e0:	e3530000 	cmp	r3, #0
    a7e4:	1a0000a6 	bne	aa84 <g_halGps_getData_i32+0x2c8>
	{
		if(l_rec_Data_ch=='$')
    a7e8:	e59f38c8 	ldr	r3, [pc, #2248]	; b0b8 <g_halGps_getData_i32+0x8fc>
    a7ec:	e5d33000 	ldrb	r3, [r3]
    a7f0:	e3530024 	cmp	r3, #36	; 0x24
    a7f4:	1a00000b 	bne	a828 <g_halGps_getData_i32+0x6c>
		{l_header_position_ch=1;l_succeded_i32=0;l_succeded_i32++;}
    a7f8:	e59f38a8 	ldr	r3, [pc, #2216]	; b0a8 <g_halGps_getData_i32+0x8ec>
    a7fc:	e3a02001 	mov	r2, #1
    a800:	e5c32000 	strb	r2, [r3]
    a804:	e59f38b0 	ldr	r3, [pc, #2224]	; b0bc <g_halGps_getData_i32+0x900>
    a808:	e3a02000 	mov	r2, #0
    a80c:	e5832000 	str	r2, [r3]
    a810:	e59f38a4 	ldr	r3, [pc, #2212]	; b0bc <g_halGps_getData_i32+0x900>
    a814:	e5933000 	ldr	r3, [r3]
    a818:	e2832001 	add	r2, r3, #1
    a81c:	e59f3898 	ldr	r3, [pc, #2200]	; b0bc <g_halGps_getData_i32+0x900>
    a820:	e5832000 	str	r2, [r3]
    a824:	ea000413 	b	b878 <g_halGps_getData_i32+0x10bc>
		else if (l_header_position_ch==1 && l_rec_Data_ch=='G')
    a828:	e59f3878 	ldr	r3, [pc, #2168]	; b0a8 <g_halGps_getData_i32+0x8ec>
    a82c:	e5d33000 	ldrb	r3, [r3]
    a830:	e3530001 	cmp	r3, #1
    a834:	1a00000c 	bne	a86c <g_halGps_getData_i32+0xb0>
    a838:	e59f3878 	ldr	r3, [pc, #2168]	; b0b8 <g_halGps_getData_i32+0x8fc>
    a83c:	e5d33000 	ldrb	r3, [r3]
    a840:	e3530047 	cmp	r3, #71	; 0x47
    a844:	1a000008 	bne	a86c <g_halGps_getData_i32+0xb0>
		{l_header_position_ch=2;l_succeded_i32++;}
    a848:	e59f3858 	ldr	r3, [pc, #2136]	; b0a8 <g_halGps_getData_i32+0x8ec>
    a84c:	e3a02002 	mov	r2, #2
    a850:	e5c32000 	strb	r2, [r3]
    a854:	e59f3860 	ldr	r3, [pc, #2144]	; b0bc <g_halGps_getData_i32+0x900>
    a858:	e5933000 	ldr	r3, [r3]
    a85c:	e2832001 	add	r2, r3, #1
    a860:	e59f3854 	ldr	r3, [pc, #2132]	; b0bc <g_halGps_getData_i32+0x900>
    a864:	e5832000 	str	r2, [r3]
    a868:	ea000084 	b	aa80 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==2 && l_rec_Data_ch=='P')
    a86c:	e59f3834 	ldr	r3, [pc, #2100]	; b0a8 <g_halGps_getData_i32+0x8ec>
    a870:	e5d33000 	ldrb	r3, [r3]
    a874:	e3530002 	cmp	r3, #2
    a878:	1a00000c 	bne	a8b0 <g_halGps_getData_i32+0xf4>
    a87c:	e59f3834 	ldr	r3, [pc, #2100]	; b0b8 <g_halGps_getData_i32+0x8fc>
    a880:	e5d33000 	ldrb	r3, [r3]
    a884:	e3530050 	cmp	r3, #80	; 0x50
    a888:	1a000008 	bne	a8b0 <g_halGps_getData_i32+0xf4>
		{l_header_position_ch=3;l_succeded_i32++;}
    a88c:	e59f3814 	ldr	r3, [pc, #2068]	; b0a8 <g_halGps_getData_i32+0x8ec>
    a890:	e3a02003 	mov	r2, #3
    a894:	e5c32000 	strb	r2, [r3]
    a898:	e59f381c 	ldr	r3, [pc, #2076]	; b0bc <g_halGps_getData_i32+0x900>
    a89c:	e5933000 	ldr	r3, [r3]
    a8a0:	e2832001 	add	r2, r3, #1
    a8a4:	e59f3810 	ldr	r3, [pc, #2064]	; b0bc <g_halGps_getData_i32+0x900>
    a8a8:	e5832000 	str	r2, [r3]
    a8ac:	ea000073 	b	aa80 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==3 && l_rec_Data_ch=='G')
    a8b0:	e59f37f0 	ldr	r3, [pc, #2032]	; b0a8 <g_halGps_getData_i32+0x8ec>
    a8b4:	e5d33000 	ldrb	r3, [r3]
    a8b8:	e3530003 	cmp	r3, #3
    a8bc:	1a00000c 	bne	a8f4 <g_halGps_getData_i32+0x138>
    a8c0:	e59f37f0 	ldr	r3, [pc, #2032]	; b0b8 <g_halGps_getData_i32+0x8fc>
    a8c4:	e5d33000 	ldrb	r3, [r3]
    a8c8:	e3530047 	cmp	r3, #71	; 0x47
    a8cc:	1a000008 	bne	a8f4 <g_halGps_getData_i32+0x138>
		{l_header_position_ch=14;l_succeded_i32++;}
    a8d0:	e59f37d0 	ldr	r3, [pc, #2000]	; b0a8 <g_halGps_getData_i32+0x8ec>
    a8d4:	e3a0200e 	mov	r2, #14
    a8d8:	e5c32000 	strb	r2, [r3]
    a8dc:	e59f37d8 	ldr	r3, [pc, #2008]	; b0bc <g_halGps_getData_i32+0x900>
    a8e0:	e5933000 	ldr	r3, [r3]
    a8e4:	e2832001 	add	r2, r3, #1
    a8e8:	e59f37cc 	ldr	r3, [pc, #1996]	; b0bc <g_halGps_getData_i32+0x900>
    a8ec:	e5832000 	str	r2, [r3]
    a8f0:	ea000062 	b	aa80 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==3 && l_rec_Data_ch=='R')
    a8f4:	e59f37ac 	ldr	r3, [pc, #1964]	; b0a8 <g_halGps_getData_i32+0x8ec>
    a8f8:	e5d33000 	ldrb	r3, [r3]
    a8fc:	e3530003 	cmp	r3, #3
    a900:	1a00000c 	bne	a938 <g_halGps_getData_i32+0x17c>
    a904:	e59f37ac 	ldr	r3, [pc, #1964]	; b0b8 <g_halGps_getData_i32+0x8fc>
    a908:	e5d33000 	ldrb	r3, [r3]
    a90c:	e3530052 	cmp	r3, #82	; 0x52
    a910:	1a000008 	bne	a938 <g_halGps_getData_i32+0x17c>
		{l_header_position_ch=24;l_succeded_i32++;}
    a914:	e59f378c 	ldr	r3, [pc, #1932]	; b0a8 <g_halGps_getData_i32+0x8ec>
    a918:	e3a02018 	mov	r2, #24
    a91c:	e5c32000 	strb	r2, [r3]
    a920:	e59f3794 	ldr	r3, [pc, #1940]	; b0bc <g_halGps_getData_i32+0x900>
    a924:	e5933000 	ldr	r3, [r3]
    a928:	e2832001 	add	r2, r3, #1
    a92c:	e59f3788 	ldr	r3, [pc, #1928]	; b0bc <g_halGps_getData_i32+0x900>
    a930:	e5832000 	str	r2, [r3]
    a934:	ea000051 	b	aa80 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==14 && l_rec_Data_ch=='G')
    a938:	e59f3768 	ldr	r3, [pc, #1896]	; b0a8 <g_halGps_getData_i32+0x8ec>
    a93c:	e5d33000 	ldrb	r3, [r3]
    a940:	e353000e 	cmp	r3, #14
    a944:	1a00000c 	bne	a97c <g_halGps_getData_i32+0x1c0>
    a948:	e59f3768 	ldr	r3, [pc, #1896]	; b0b8 <g_halGps_getData_i32+0x8fc>
    a94c:	e5d33000 	ldrb	r3, [r3]
    a950:	e3530047 	cmp	r3, #71	; 0x47
    a954:	1a000008 	bne	a97c <g_halGps_getData_i32+0x1c0>
		{l_header_position_ch=15;l_succeded_i32++;}
    a958:	e59f3748 	ldr	r3, [pc, #1864]	; b0a8 <g_halGps_getData_i32+0x8ec>
    a95c:	e3a0200f 	mov	r2, #15
    a960:	e5c32000 	strb	r2, [r3]
    a964:	e59f3750 	ldr	r3, [pc, #1872]	; b0bc <g_halGps_getData_i32+0x900>
    a968:	e5933000 	ldr	r3, [r3]
    a96c:	e2832001 	add	r2, r3, #1
    a970:	e59f3744 	ldr	r3, [pc, #1860]	; b0bc <g_halGps_getData_i32+0x900>
    a974:	e5832000 	str	r2, [r3]
    a978:	ea000040 	b	aa80 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==24 && l_rec_Data_ch=='M')
    a97c:	e59f3724 	ldr	r3, [pc, #1828]	; b0a8 <g_halGps_getData_i32+0x8ec>
    a980:	e5d33000 	ldrb	r3, [r3]
    a984:	e3530018 	cmp	r3, #24
    a988:	1a00000c 	bne	a9c0 <g_halGps_getData_i32+0x204>
    a98c:	e59f3724 	ldr	r3, [pc, #1828]	; b0b8 <g_halGps_getData_i32+0x8fc>
    a990:	e5d33000 	ldrb	r3, [r3]
    a994:	e353004d 	cmp	r3, #77	; 0x4d
    a998:	1a000008 	bne	a9c0 <g_halGps_getData_i32+0x204>
		{l_header_position_ch=25;l_succeded_i32++;}
    a99c:	e59f3704 	ldr	r3, [pc, #1796]	; b0a8 <g_halGps_getData_i32+0x8ec>
    a9a0:	e3a02019 	mov	r2, #25
    a9a4:	e5c32000 	strb	r2, [r3]
    a9a8:	e59f370c 	ldr	r3, [pc, #1804]	; b0bc <g_halGps_getData_i32+0x900>
    a9ac:	e5933000 	ldr	r3, [r3]
    a9b0:	e2832001 	add	r2, r3, #1
    a9b4:	e59f3700 	ldr	r3, [pc, #1792]	; b0bc <g_halGps_getData_i32+0x900>
    a9b8:	e5832000 	str	r2, [r3]
    a9bc:	ea00002f 	b	aa80 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==15 && l_rec_Data_ch=='A')
    a9c0:	e59f36e0 	ldr	r3, [pc, #1760]	; b0a8 <g_halGps_getData_i32+0x8ec>
    a9c4:	e5d33000 	ldrb	r3, [r3]
    a9c8:	e353000f 	cmp	r3, #15
    a9cc:	1a000013 	bne	aa20 <g_halGps_getData_i32+0x264>
    a9d0:	e59f36e0 	ldr	r3, [pc, #1760]	; b0b8 <g_halGps_getData_i32+0x8fc>
    a9d4:	e5d33000 	ldrb	r3, [r3]
    a9d8:	e3530041 	cmp	r3, #65	; 0x41
    a9dc:	1a00000f 	bne	aa20 <g_halGps_getData_i32+0x264>
		{	l_message_ch=1;l_resetMessage1Values_vd();l_data_position_ch=0;l_message_position_ch=1; l_succeded_i32++;}
    a9e0:	e59f36a8 	ldr	r3, [pc, #1704]	; b090 <g_halGps_getData_i32+0x8d4>
    a9e4:	e3a02001 	mov	r2, #1
    a9e8:	e5c32000 	strb	r2, [r3]
    a9ec:	ebffff0c 	bl	a624 <l_resetMessage1Values_vd>
    a9f0:	e59f36b4 	ldr	r3, [pc, #1716]	; b0ac <g_halGps_getData_i32+0x8f0>
    a9f4:	e3a02000 	mov	r2, #0
    a9f8:	e5c32000 	strb	r2, [r3]
    a9fc:	e59f36a0 	ldr	r3, [pc, #1696]	; b0a4 <g_halGps_getData_i32+0x8e8>
    aa00:	e3a02001 	mov	r2, #1
    aa04:	e5c32000 	strb	r2, [r3]
    aa08:	e59f36ac 	ldr	r3, [pc, #1708]	; b0bc <g_halGps_getData_i32+0x900>
    aa0c:	e5933000 	ldr	r3, [r3]
    aa10:	e2832001 	add	r2, r3, #1
    aa14:	e59f36a0 	ldr	r3, [pc, #1696]	; b0bc <g_halGps_getData_i32+0x900>
    aa18:	e5832000 	str	r2, [r3]
    aa1c:	ea000017 	b	aa80 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==25 && l_rec_Data_ch=='C')
    aa20:	e59f3680 	ldr	r3, [pc, #1664]	; b0a8 <g_halGps_getData_i32+0x8ec>
    aa24:	e5d33000 	ldrb	r3, [r3]
    aa28:	e3530019 	cmp	r3, #25
    aa2c:	1a000391 	bne	b878 <g_halGps_getData_i32+0x10bc>
    aa30:	e59f3680 	ldr	r3, [pc, #1664]	; b0b8 <g_halGps_getData_i32+0x8fc>
    aa34:	e5d33000 	ldrb	r3, [r3]
    aa38:	e3530043 	cmp	r3, #67	; 0x43
    aa3c:	1a00038d 	bne	b878 <g_halGps_getData_i32+0x10bc>
		{	l_message_ch=2;l_resetMessage2Values_vd();l_data_position_ch=0; l_message_position_ch=1; l_succeded_i32++;}
    aa40:	e59f3648 	ldr	r3, [pc, #1608]	; b090 <g_halGps_getData_i32+0x8d4>
    aa44:	e3a02002 	mov	r2, #2
    aa48:	e5c32000 	strb	r2, [r3]
    aa4c:	ebffff23 	bl	a6e0 <l_resetMessage2Values_vd>
    aa50:	e59f3654 	ldr	r3, [pc, #1620]	; b0ac <g_halGps_getData_i32+0x8f0>
    aa54:	e3a02000 	mov	r2, #0
    aa58:	e5c32000 	strb	r2, [r3]
    aa5c:	e59f3640 	ldr	r3, [pc, #1600]	; b0a4 <g_halGps_getData_i32+0x8e8>
    aa60:	e3a02001 	mov	r2, #1
    aa64:	e5c32000 	strb	r2, [r3]
    aa68:	e59f364c 	ldr	r3, [pc, #1612]	; b0bc <g_halGps_getData_i32+0x900>
    aa6c:	e5933000 	ldr	r3, [r3]
    aa70:	e2832001 	add	r2, r3, #1
    aa74:	e59f3640 	ldr	r3, [pc, #1600]	; b0bc <g_halGps_getData_i32+0x900>
    aa78:	e5832000 	str	r2, [r3]
    aa7c:	ea00037d 	b	b878 <g_halGps_getData_i32+0x10bc>
    aa80:	ea00037c 	b	b878 <g_halGps_getData_i32+0x10bc>
	}
	else
	{
		switch (l_message_ch)//check data within the two important messages
    aa84:	e59f3604 	ldr	r3, [pc, #1540]	; b090 <g_halGps_getData_i32+0x8d4>
    aa88:	e5d33000 	ldrb	r3, [r3]
    aa8c:	e3530001 	cmp	r3, #1
    aa90:	0a000002 	beq	aaa0 <g_halGps_getData_i32+0x2e4>
    aa94:	e3530002 	cmp	r3, #2
    aa98:	0a0001ab 	beq	b14c <g_halGps_getData_i32+0x990>
    aa9c:	ea000375 	b	b878 <g_halGps_getData_i32+0x10bc>
		{
		case 1://$GPGGA ,205003.000 ,4841.9261 ,N ,00918.7276 ,E ,1 ,06 ,1.12 ,283.5 ,M ,48.0 ,M , ,*6D        38
			switch (l_rec_Data_ch)
    aaa0:	e59f3610 	ldr	r3, [pc, #1552]	; b0b8 <g_halGps_getData_i32+0x8fc>
    aaa4:	e5d33000 	ldrb	r3, [r3]
    aaa8:	e353000a 	cmp	r3, #10
    aaac:	0a00000e 	beq	aaec <g_halGps_getData_i32+0x330>
    aab0:	e353002c 	cmp	r3, #44	; 0x2c
    aab4:	1a000018 	bne	ab1c <g_halGps_getData_i32+0x360>
			{
			case ',':
				l_data_position_ch++;
    aab8:	e59f35ec 	ldr	r3, [pc, #1516]	; b0ac <g_halGps_getData_i32+0x8f0>
    aabc:	e5d33000 	ldrb	r3, [r3]
    aac0:	e2833001 	add	r3, r3, #1
    aac4:	e6ef2073 	uxtb	r2, r3
    aac8:	e59f35dc 	ldr	r3, [pc, #1500]	; b0ac <g_halGps_getData_i32+0x8f0>
    aacc:	e5c32000 	strb	r2, [r3]
				l_fieldpointer_i32=0;
    aad0:	e59f35e8 	ldr	r3, [pc, #1512]	; b0c0 <g_halGps_getData_i32+0x904>
    aad4:	e3a02000 	mov	r2, #0
    aad8:	e5832000 	str	r2, [r3]
				l_decimal_place_factor_i32=10;
    aadc:	e59f35bc 	ldr	r3, [pc, #1468]	; b0a0 <g_halGps_getData_i32+0x8e4>
    aae0:	e3a0200a 	mov	r2, #10
    aae4:	e5832000 	str	r2, [r3]
				break;
    aae8:	ea000196 	b	b148 <g_halGps_getData_i32+0x98c>
			case 10://LF found
				l_succeded_i32=l_succeded_i32+100;	//short comment
    aaec:	e59f35c8 	ldr	r3, [pc, #1480]	; b0bc <g_halGps_getData_i32+0x900>
    aaf0:	e5933000 	ldr	r3, [r3]
    aaf4:	e2832064 	add	r2, r3, #100	; 0x64
    aaf8:	e59f35bc 	ldr	r3, [pc, #1468]	; b0bc <g_halGps_getData_i32+0x900>
    aafc:	e5832000 	str	r2, [r3]
				l_message_position_ch=0;
    ab00:	e59f359c 	ldr	r3, [pc, #1436]	; b0a4 <g_halGps_getData_i32+0x8e8>
    ab04:	e3a02000 	mov	r2, #0
    ab08:	e5c32000 	strb	r2, [r3]
				l_header_position_ch=0;
    ab0c:	e59f3594 	ldr	r3, [pc, #1428]	; b0a8 <g_halGps_getData_i32+0x8ec>
    ab10:	e3a02000 	mov	r2, #0
    ab14:	e5c32000 	strb	r2, [r3]
				break;
    ab18:	ea00018a 	b	b148 <g_halGps_getData_i32+0x98c>
			default:
				switch (l_data_position_ch)
    ab1c:	e59f3588 	ldr	r3, [pc, #1416]	; b0ac <g_halGps_getData_i32+0x8f0>
    ab20:	e5d33000 	ldrb	r3, [r3]
    ab24:	e2433001 	sub	r3, r3, #1
    ab28:	e353000a 	cmp	r3, #10
    ab2c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    ab30:	ea000183 	b	b144 <g_halGps_getData_i32+0x988>
    ab34:	0000ab60 	.word	0x0000ab60
    ab38:	0000abd0 	.word	0x0000abd0
    ab3c:	0000ad0c 	.word	0x0000ad0c
    ab40:	0000ad58 	.word	0x0000ad58
    ab44:	0000ae94 	.word	0x0000ae94
    ab48:	0000b144 	.word	0x0000b144
    ab4c:	0000b144 	.word	0x0000b144
    ab50:	0000b144 	.word	0x0000b144
    ab54:	0000aee0 	.word	0x0000aee0
    ab58:	0000b144 	.word	0x0000b144
    ab5c:	0000afec 	.word	0x0000afec
				{
				case 1://Time
					if(l_fieldpointer_i32<6)
    ab60:	e59f3558 	ldr	r3, [pc, #1368]	; b0c0 <g_halGps_getData_i32+0x904>
    ab64:	e5933000 	ldr	r3, [r3]
    ab68:	e3530005 	cmp	r3, #5
    ab6c:	ca000011 	bgt	abb8 <g_halGps_getData_i32+0x3fc>
					{
						l_time_ui32=l_time_ui32*10+(l_rec_Data_ch-48);
    ab70:	e59f3538 	ldr	r3, [pc, #1336]	; b0b0 <g_halGps_getData_i32+0x8f4>
    ab74:	e5932000 	ldr	r2, [r3]
    ab78:	e1a03002 	mov	r3, r2
    ab7c:	e1a03103 	lsl	r3, r3, #2
    ab80:	e0833002 	add	r3, r3, r2
    ab84:	e1a03083 	lsl	r3, r3, #1
    ab88:	e1a02003 	mov	r2, r3
    ab8c:	e59f3524 	ldr	r3, [pc, #1316]	; b0b8 <g_halGps_getData_i32+0x8fc>
    ab90:	e5d33000 	ldrb	r3, [r3]
    ab94:	e0823003 	add	r3, r2, r3
    ab98:	e2432030 	sub	r2, r3, #48	; 0x30
    ab9c:	e59f350c 	ldr	r3, [pc, #1292]	; b0b0 <g_halGps_getData_i32+0x8f4>
    aba0:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    aba4:	e59f3510 	ldr	r3, [pc, #1296]	; b0bc <g_halGps_getData_i32+0x900>
    aba8:	e5933000 	ldr	r3, [r3]
    abac:	e2832001 	add	r2, r3, #1
    abb0:	e59f3504 	ldr	r3, [pc, #1284]	; b0bc <g_halGps_getData_i32+0x900>
    abb4:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    abb8:	e59f3500 	ldr	r3, [pc, #1280]	; b0c0 <g_halGps_getData_i32+0x904>
    abbc:	e5933000 	ldr	r3, [r3]
    abc0:	e2832001 	add	r2, r3, #1
    abc4:	e59f34f4 	ldr	r3, [pc, #1268]	; b0c0 <g_halGps_getData_i32+0x904>
    abc8:	e5832000 	str	r2, [r3]
					break;
    abcc:	ea00015c 	b	b144 <g_halGps_getData_i32+0x988>
				case 2://Latitude
					if(l_fieldpointer_i32<2)
    abd0:	e59f34e8 	ldr	r3, [pc, #1256]	; b0c0 <g_halGps_getData_i32+0x904>
    abd4:	e5933000 	ldr	r3, [r3]
    abd8:	e3530001 	cmp	r3, #1
    abdc:	ca000012 	bgt	ac2c <g_halGps_getData_i32+0x470>
					{
						l_gps_latitude_st.l_degree_ui32=l_gps_latitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    abe0:	e59f34dc 	ldr	r3, [pc, #1244]	; b0c4 <g_halGps_getData_i32+0x908>
    abe4:	e5932000 	ldr	r2, [r3]
    abe8:	e1a03002 	mov	r3, r2
    abec:	e1a03103 	lsl	r3, r3, #2
    abf0:	e0833002 	add	r3, r3, r2
    abf4:	e1a03083 	lsl	r3, r3, #1
    abf8:	e1a02003 	mov	r2, r3
    abfc:	e59f34b4 	ldr	r3, [pc, #1204]	; b0b8 <g_halGps_getData_i32+0x8fc>
    ac00:	e5d33000 	ldrb	r3, [r3]
    ac04:	e0823003 	add	r3, r2, r3
    ac08:	e2432030 	sub	r2, r3, #48	; 0x30
    ac0c:	e59f34b0 	ldr	r3, [pc, #1200]	; b0c4 <g_halGps_getData_i32+0x908>
    ac10:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    ac14:	e59f34a0 	ldr	r3, [pc, #1184]	; b0bc <g_halGps_getData_i32+0x900>
    ac18:	e5933000 	ldr	r3, [r3]
    ac1c:	e2832001 	add	r2, r3, #1
    ac20:	e59f3494 	ldr	r3, [pc, #1172]	; b0bc <g_halGps_getData_i32+0x900>
    ac24:	e5832000 	str	r2, [r3]
    ac28:	ea000031 	b	acf4 <g_halGps_getData_i32+0x538>
					}
					else if(l_fieldpointer_i32<4)
    ac2c:	e59f348c 	ldr	r3, [pc, #1164]	; b0c0 <g_halGps_getData_i32+0x904>
    ac30:	e5933000 	ldr	r3, [r3]
    ac34:	e3530003 	cmp	r3, #3
    ac38:	ca000012 	bgt	ac88 <g_halGps_getData_i32+0x4cc>
					{
						l_gps_latitude_st.l_minutes_ui32=l_gps_latitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    ac3c:	e59f3480 	ldr	r3, [pc, #1152]	; b0c4 <g_halGps_getData_i32+0x908>
    ac40:	e5932004 	ldr	r2, [r3, #4]
    ac44:	e1a03002 	mov	r3, r2
    ac48:	e1a03103 	lsl	r3, r3, #2
    ac4c:	e0833002 	add	r3, r3, r2
    ac50:	e1a03083 	lsl	r3, r3, #1
    ac54:	e1a02003 	mov	r2, r3
    ac58:	e59f3458 	ldr	r3, [pc, #1112]	; b0b8 <g_halGps_getData_i32+0x8fc>
    ac5c:	e5d33000 	ldrb	r3, [r3]
    ac60:	e0823003 	add	r3, r2, r3
    ac64:	e2432030 	sub	r2, r3, #48	; 0x30
    ac68:	e59f3454 	ldr	r3, [pc, #1108]	; b0c4 <g_halGps_getData_i32+0x908>
    ac6c:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    ac70:	e59f3444 	ldr	r3, [pc, #1092]	; b0bc <g_halGps_getData_i32+0x900>
    ac74:	e5933000 	ldr	r3, [r3]
    ac78:	e2832001 	add	r2, r3, #1
    ac7c:	e59f3438 	ldr	r3, [pc, #1080]	; b0bc <g_halGps_getData_i32+0x900>
    ac80:	e5832000 	str	r2, [r3]
    ac84:	ea00001a 	b	acf4 <g_halGps_getData_i32+0x538>
					}
					else if(l_fieldpointer_i32>=5 && l_fieldpointer_i32<9)
    ac88:	e59f3430 	ldr	r3, [pc, #1072]	; b0c0 <g_halGps_getData_i32+0x904>
    ac8c:	e5933000 	ldr	r3, [r3]
    ac90:	e3530004 	cmp	r3, #4
    ac94:	da000016 	ble	acf4 <g_halGps_getData_i32+0x538>
    ac98:	e59f3420 	ldr	r3, [pc, #1056]	; b0c0 <g_halGps_getData_i32+0x904>
    ac9c:	e5933000 	ldr	r3, [r3]
    aca0:	e3530008 	cmp	r3, #8
    aca4:	ca000012 	bgt	acf4 <g_halGps_getData_i32+0x538>
					{
						l_gps_latitude_st.l_seconds_f64=l_gps_latitude_st.l_seconds_f64*10+(l_rec_Data_ch-48)*0.006;
    aca8:	e59f3414 	ldr	r3, [pc, #1044]	; b0c4 <g_halGps_getData_i32+0x908>
    acac:	ed936b02 	vldr	d6, [r3, #8]
    acb0:	ed9f7bf2 	vldr	d7, [pc, #968]	; b080 <g_halGps_getData_i32+0x8c4>
    acb4:	ee266b07 	vmul.f64	d6, d6, d7
    acb8:	e59f33f8 	ldr	r3, [pc, #1016]	; b0b8 <g_halGps_getData_i32+0x8fc>
    acbc:	e5d33000 	ldrb	r3, [r3]
    acc0:	e2433030 	sub	r3, r3, #48	; 0x30
    acc4:	ee073a90 	vmov	s15, r3
    acc8:	eeb85be7 	vcvt.f64.s32	d5, s15
    accc:	ed9f7bed 	vldr	d7, [pc, #948]	; b088 <g_halGps_getData_i32+0x8cc>
    acd0:	ee257b07 	vmul.f64	d7, d5, d7
    acd4:	ee367b07 	vadd.f64	d7, d6, d7
    acd8:	e59f33e4 	ldr	r3, [pc, #996]	; b0c4 <g_halGps_getData_i32+0x908>
    acdc:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    ace0:	e59f33d4 	ldr	r3, [pc, #980]	; b0bc <g_halGps_getData_i32+0x900>
    ace4:	e5933000 	ldr	r3, [r3]
    ace8:	e2832001 	add	r2, r3, #1
    acec:	e59f33c8 	ldr	r3, [pc, #968]	; b0bc <g_halGps_getData_i32+0x900>
    acf0:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    acf4:	e59f33c4 	ldr	r3, [pc, #964]	; b0c0 <g_halGps_getData_i32+0x904>
    acf8:	e5933000 	ldr	r3, [r3]
    acfc:	e2832001 	add	r2, r3, #1
    ad00:	e59f33b8 	ldr	r3, [pc, #952]	; b0c0 <g_halGps_getData_i32+0x904>
    ad04:	e5832000 	str	r2, [r3]
					break;
    ad08:	ea00010d 	b	b144 <g_halGps_getData_i32+0x988>
				case 3://cardinal direction
					if(l_fieldpointer_i32<1)
    ad0c:	e59f33ac 	ldr	r3, [pc, #940]	; b0c0 <g_halGps_getData_i32+0x904>
    ad10:	e5933000 	ldr	r3, [r3]
    ad14:	e3530000 	cmp	r3, #0
    ad18:	ca000008 	bgt	ad40 <g_halGps_getData_i32+0x584>
					{
						l_gps_latitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    ad1c:	e59f3394 	ldr	r3, [pc, #916]	; b0b8 <g_halGps_getData_i32+0x8fc>
    ad20:	e5d32000 	ldrb	r2, [r3]
    ad24:	e59f3398 	ldr	r3, [pc, #920]	; b0c4 <g_halGps_getData_i32+0x908>
    ad28:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    ad2c:	e59f3388 	ldr	r3, [pc, #904]	; b0bc <g_halGps_getData_i32+0x900>
    ad30:	e5933000 	ldr	r3, [r3]
    ad34:	e2832001 	add	r2, r3, #1
    ad38:	e59f337c 	ldr	r3, [pc, #892]	; b0bc <g_halGps_getData_i32+0x900>
    ad3c:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    ad40:	e59f3378 	ldr	r3, [pc, #888]	; b0c0 <g_halGps_getData_i32+0x904>
    ad44:	e5933000 	ldr	r3, [r3]
    ad48:	e2832001 	add	r2, r3, #1
    ad4c:	e59f336c 	ldr	r3, [pc, #876]	; b0c0 <g_halGps_getData_i32+0x904>
    ad50:	e5832000 	str	r2, [r3]
					break;
    ad54:	ea0000fa 	b	b144 <g_halGps_getData_i32+0x988>
				case 4://Longitude
					if(l_fieldpointer_i32<3)
    ad58:	e59f3360 	ldr	r3, [pc, #864]	; b0c0 <g_halGps_getData_i32+0x904>
    ad5c:	e5933000 	ldr	r3, [r3]
    ad60:	e3530002 	cmp	r3, #2
    ad64:	ca000012 	bgt	adb4 <g_halGps_getData_i32+0x5f8>
					{
						l_gps_longitude_st.l_degree_ui32=l_gps_longitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    ad68:	e59f3324 	ldr	r3, [pc, #804]	; b094 <g_halGps_getData_i32+0x8d8>
    ad6c:	e5932000 	ldr	r2, [r3]
    ad70:	e1a03002 	mov	r3, r2
    ad74:	e1a03103 	lsl	r3, r3, #2
    ad78:	e0833002 	add	r3, r3, r2
    ad7c:	e1a03083 	lsl	r3, r3, #1
    ad80:	e1a02003 	mov	r2, r3
    ad84:	e59f332c 	ldr	r3, [pc, #812]	; b0b8 <g_halGps_getData_i32+0x8fc>
    ad88:	e5d33000 	ldrb	r3, [r3]
    ad8c:	e0823003 	add	r3, r2, r3
    ad90:	e2432030 	sub	r2, r3, #48	; 0x30
    ad94:	e59f32f8 	ldr	r3, [pc, #760]	; b094 <g_halGps_getData_i32+0x8d8>
    ad98:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    ad9c:	e59f3318 	ldr	r3, [pc, #792]	; b0bc <g_halGps_getData_i32+0x900>
    ada0:	e5933000 	ldr	r3, [r3]
    ada4:	e2832001 	add	r2, r3, #1
    ada8:	e59f330c 	ldr	r3, [pc, #780]	; b0bc <g_halGps_getData_i32+0x900>
    adac:	e5832000 	str	r2, [r3]
    adb0:	ea000031 	b	ae7c <g_halGps_getData_i32+0x6c0>
					}
					else if(l_fieldpointer_i32<5)
    adb4:	e59f3304 	ldr	r3, [pc, #772]	; b0c0 <g_halGps_getData_i32+0x904>
    adb8:	e5933000 	ldr	r3, [r3]
    adbc:	e3530004 	cmp	r3, #4
    adc0:	ca000012 	bgt	ae10 <g_halGps_getData_i32+0x654>
					{
						l_gps_longitude_st.l_minutes_ui32=l_gps_longitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    adc4:	e59f32c8 	ldr	r3, [pc, #712]	; b094 <g_halGps_getData_i32+0x8d8>
    adc8:	e5932004 	ldr	r2, [r3, #4]
    adcc:	e1a03002 	mov	r3, r2
    add0:	e1a03103 	lsl	r3, r3, #2
    add4:	e0833002 	add	r3, r3, r2
    add8:	e1a03083 	lsl	r3, r3, #1
    addc:	e1a02003 	mov	r2, r3
    ade0:	e59f32d0 	ldr	r3, [pc, #720]	; b0b8 <g_halGps_getData_i32+0x8fc>
    ade4:	e5d33000 	ldrb	r3, [r3]
    ade8:	e0823003 	add	r3, r2, r3
    adec:	e2432030 	sub	r2, r3, #48	; 0x30
    adf0:	e59f329c 	ldr	r3, [pc, #668]	; b094 <g_halGps_getData_i32+0x8d8>
    adf4:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    adf8:	e59f32bc 	ldr	r3, [pc, #700]	; b0bc <g_halGps_getData_i32+0x900>
    adfc:	e5933000 	ldr	r3, [r3]
    ae00:	e2832001 	add	r2, r3, #1
    ae04:	e59f32b0 	ldr	r3, [pc, #688]	; b0bc <g_halGps_getData_i32+0x900>
    ae08:	e5832000 	str	r2, [r3]
    ae0c:	ea00001a 	b	ae7c <g_halGps_getData_i32+0x6c0>
					}
					else if(l_fieldpointer_i32>=6 && l_fieldpointer_i32<10)
    ae10:	e59f32a8 	ldr	r3, [pc, #680]	; b0c0 <g_halGps_getData_i32+0x904>
    ae14:	e5933000 	ldr	r3, [r3]
    ae18:	e3530005 	cmp	r3, #5
    ae1c:	da000016 	ble	ae7c <g_halGps_getData_i32+0x6c0>
    ae20:	e59f3298 	ldr	r3, [pc, #664]	; b0c0 <g_halGps_getData_i32+0x904>
    ae24:	e5933000 	ldr	r3, [r3]
    ae28:	e3530009 	cmp	r3, #9
    ae2c:	ca000012 	bgt	ae7c <g_halGps_getData_i32+0x6c0>
					{
						l_gps_longitude_st.l_seconds_f64=l_gps_longitude_st.l_seconds_f64*10+(l_rec_Data_ch-48)*0.006;
    ae30:	e59f325c 	ldr	r3, [pc, #604]	; b094 <g_halGps_getData_i32+0x8d8>
    ae34:	ed936b02 	vldr	d6, [r3, #8]
    ae38:	ed9f7b90 	vldr	d7, [pc, #576]	; b080 <g_halGps_getData_i32+0x8c4>
    ae3c:	ee266b07 	vmul.f64	d6, d6, d7
    ae40:	e59f3270 	ldr	r3, [pc, #624]	; b0b8 <g_halGps_getData_i32+0x8fc>
    ae44:	e5d33000 	ldrb	r3, [r3]
    ae48:	e2433030 	sub	r3, r3, #48	; 0x30
    ae4c:	ee073a90 	vmov	s15, r3
    ae50:	eeb85be7 	vcvt.f64.s32	d5, s15
    ae54:	ed9f7b8b 	vldr	d7, [pc, #556]	; b088 <g_halGps_getData_i32+0x8cc>
    ae58:	ee257b07 	vmul.f64	d7, d5, d7
    ae5c:	ee367b07 	vadd.f64	d7, d6, d7
    ae60:	e59f322c 	ldr	r3, [pc, #556]	; b094 <g_halGps_getData_i32+0x8d8>
    ae64:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    ae68:	e59f324c 	ldr	r3, [pc, #588]	; b0bc <g_halGps_getData_i32+0x900>
    ae6c:	e5933000 	ldr	r3, [r3]
    ae70:	e2832001 	add	r2, r3, #1
    ae74:	e59f3240 	ldr	r3, [pc, #576]	; b0bc <g_halGps_getData_i32+0x900>
    ae78:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    ae7c:	e59f323c 	ldr	r3, [pc, #572]	; b0c0 <g_halGps_getData_i32+0x904>
    ae80:	e5933000 	ldr	r3, [r3]
    ae84:	e2832001 	add	r2, r3, #1
    ae88:	e59f3230 	ldr	r3, [pc, #560]	; b0c0 <g_halGps_getData_i32+0x904>
    ae8c:	e5832000 	str	r2, [r3]
					break;
    ae90:	ea0000ab 	b	b144 <g_halGps_getData_i32+0x988>
				case 5://cardinal direction
					if(l_fieldpointer_i32<1)
    ae94:	e59f3224 	ldr	r3, [pc, #548]	; b0c0 <g_halGps_getData_i32+0x904>
    ae98:	e5933000 	ldr	r3, [r3]
    ae9c:	e3530000 	cmp	r3, #0
    aea0:	ca000008 	bgt	aec8 <g_halGps_getData_i32+0x70c>
					{
						l_gps_longitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    aea4:	e59f320c 	ldr	r3, [pc, #524]	; b0b8 <g_halGps_getData_i32+0x8fc>
    aea8:	e5d32000 	ldrb	r2, [r3]
    aeac:	e59f31e0 	ldr	r3, [pc, #480]	; b094 <g_halGps_getData_i32+0x8d8>
    aeb0:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    aeb4:	e59f3200 	ldr	r3, [pc, #512]	; b0bc <g_halGps_getData_i32+0x900>
    aeb8:	e5933000 	ldr	r3, [r3]
    aebc:	e2832001 	add	r2, r3, #1
    aec0:	e59f31f4 	ldr	r3, [pc, #500]	; b0bc <g_halGps_getData_i32+0x900>
    aec4:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    aec8:	e59f31f0 	ldr	r3, [pc, #496]	; b0c0 <g_halGps_getData_i32+0x904>
    aecc:	e5933000 	ldr	r3, [r3]
    aed0:	e2832001 	add	r2, r3, #1
    aed4:	e59f31e4 	ldr	r3, [pc, #484]	; b0c0 <g_halGps_getData_i32+0x904>
    aed8:	e5832000 	str	r2, [r3]
					break;
    aedc:	ea000098 	b	b144 <g_halGps_getData_i32+0x988>
				case 9://Height
					if(l_rec_Data_ch!='.' && l_fieldpointer_i32==0)
    aee0:	e59f31d0 	ldr	r3, [pc, #464]	; b0b8 <g_halGps_getData_i32+0x8fc>
    aee4:	e5d33000 	ldrb	r3, [r3]
    aee8:	e353002e 	cmp	r3, #46	; 0x2e
    aeec:	0a000015 	beq	af48 <g_halGps_getData_i32+0x78c>
    aef0:	e59f31c8 	ldr	r3, [pc, #456]	; b0c0 <g_halGps_getData_i32+0x904>
    aef4:	e5933000 	ldr	r3, [r3]
    aef8:	e3530000 	cmp	r3, #0
    aefc:	1a000011 	bne	af48 <g_halGps_getData_i32+0x78c>
					{
						l_height_f64=l_height_f64*10+(double)(l_rec_Data_ch-48);
    af00:	e59f3190 	ldr	r3, [pc, #400]	; b098 <g_halGps_getData_i32+0x8dc>
    af04:	ed936b00 	vldr	d6, [r3]
    af08:	ed9f7b5c 	vldr	d7, [pc, #368]	; b080 <g_halGps_getData_i32+0x8c4>
    af0c:	ee266b07 	vmul.f64	d6, d6, d7
    af10:	e59f31a0 	ldr	r3, [pc, #416]	; b0b8 <g_halGps_getData_i32+0x8fc>
    af14:	e5d33000 	ldrb	r3, [r3]
    af18:	e2433030 	sub	r3, r3, #48	; 0x30
    af1c:	ee053a90 	vmov	s11, r3
    af20:	eeb87be5 	vcvt.f64.s32	d7, s11
    af24:	ee367b07 	vadd.f64	d7, d6, d7
    af28:	e59f3168 	ldr	r3, [pc, #360]	; b098 <g_halGps_getData_i32+0x8dc>
    af2c:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    af30:	e59f3184 	ldr	r3, [pc, #388]	; b0bc <g_halGps_getData_i32+0x900>
    af34:	e5933000 	ldr	r3, [r3]
    af38:	e2832001 	add	r2, r3, #1
    af3c:	e59f3178 	ldr	r3, [pc, #376]	; b0bc <g_halGps_getData_i32+0x900>
    af40:	e5832000 	str	r2, [r3]
    af44:	ea000027 	b	afe8 <g_halGps_getData_i32+0x82c>

					}
					else if (l_rec_Data_ch=='.')
    af48:	e59f3168 	ldr	r3, [pc, #360]	; b0b8 <g_halGps_getData_i32+0x8fc>
    af4c:	e5d33000 	ldrb	r3, [r3]
    af50:	e353002e 	cmp	r3, #46	; 0x2e
    af54:	1a000005 	bne	af70 <g_halGps_getData_i32+0x7b4>
					{
						l_fieldpointer_i32++;
    af58:	e59f3160 	ldr	r3, [pc, #352]	; b0c0 <g_halGps_getData_i32+0x904>
    af5c:	e5933000 	ldr	r3, [r3]
    af60:	e2832001 	add	r2, r3, #1
    af64:	e59f3154 	ldr	r3, [pc, #340]	; b0c0 <g_halGps_getData_i32+0x904>
    af68:	e5832000 	str	r2, [r3]
    af6c:	ea00001d 	b	afe8 <g_halGps_getData_i32+0x82c>
					}
					else
					{
						l_height_f64=l_height_f64+(double)(l_rec_Data_ch-48)/l_decimal_place_factor_i32;
    af70:	e59f3140 	ldr	r3, [pc, #320]	; b0b8 <g_halGps_getData_i32+0x8fc>
    af74:	e5d33000 	ldrb	r3, [r3]
    af78:	e2433030 	sub	r3, r3, #48	; 0x30
    af7c:	ee073a90 	vmov	s15, r3
    af80:	eeb86be7 	vcvt.f64.s32	d6, s15
    af84:	e59f3114 	ldr	r3, [pc, #276]	; b0a0 <g_halGps_getData_i32+0x8e4>
    af88:	e5933000 	ldr	r3, [r3]
    af8c:	ee053a90 	vmov	s11, r3
    af90:	eeb87be5 	vcvt.f64.s32	d7, s11
    af94:	ee866b07 	vdiv.f64	d6, d6, d7
    af98:	e59f30f8 	ldr	r3, [pc, #248]	; b098 <g_halGps_getData_i32+0x8dc>
    af9c:	ed937b00 	vldr	d7, [r3]
    afa0:	ee367b07 	vadd.f64	d7, d6, d7
    afa4:	e59f30ec 	ldr	r3, [pc, #236]	; b098 <g_halGps_getData_i32+0x8dc>
    afa8:	ed837b00 	vstr	d7, [r3]
						l_decimal_place_factor_i32=l_decimal_place_factor_i32*10;
    afac:	e59f30ec 	ldr	r3, [pc, #236]	; b0a0 <g_halGps_getData_i32+0x8e4>
    afb0:	e5932000 	ldr	r2, [r3]
    afb4:	e1a03002 	mov	r3, r2
    afb8:	e1a03103 	lsl	r3, r3, #2
    afbc:	e0833002 	add	r3, r3, r2
    afc0:	e1a03083 	lsl	r3, r3, #1
    afc4:	e1a02003 	mov	r2, r3
    afc8:	e59f30d0 	ldr	r3, [pc, #208]	; b0a0 <g_halGps_getData_i32+0x8e4>
    afcc:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    afd0:	e59f30e4 	ldr	r3, [pc, #228]	; b0bc <g_halGps_getData_i32+0x900>
    afd4:	e5933000 	ldr	r3, [r3]
    afd8:	e2832001 	add	r2, r3, #1
    afdc:	e59f30d8 	ldr	r3, [pc, #216]	; b0bc <g_halGps_getData_i32+0x900>
    afe0:	e5832000 	str	r2, [r3]
					}
					break;
    afe4:	ea000056 	b	b144 <g_halGps_getData_i32+0x988>
    afe8:	ea000055 	b	b144 <g_halGps_getData_i32+0x988>
				case 11://Geoid
					if(l_rec_Data_ch!='.' && l_fieldpointer_i32==0)
    afec:	e59f30c4 	ldr	r3, [pc, #196]	; b0b8 <g_halGps_getData_i32+0x8fc>
    aff0:	e5d33000 	ldrb	r3, [r3]
    aff4:	e353002e 	cmp	r3, #46	; 0x2e
    aff8:	0a000015 	beq	b054 <g_halGps_getData_i32+0x898>
    affc:	e59f30bc 	ldr	r3, [pc, #188]	; b0c0 <g_halGps_getData_i32+0x904>
    b000:	e5933000 	ldr	r3, [r3]
    b004:	e3530000 	cmp	r3, #0
    b008:	1a000011 	bne	b054 <g_halGps_getData_i32+0x898>
					{
						l_geoid_f64=l_geoid_f64*10+(double)(l_rec_Data_ch-48);
    b00c:	e59f3088 	ldr	r3, [pc, #136]	; b09c <g_halGps_getData_i32+0x8e0>
    b010:	ed936b00 	vldr	d6, [r3]
    b014:	ed9f7b19 	vldr	d7, [pc, #100]	; b080 <g_halGps_getData_i32+0x8c4>
    b018:	ee266b07 	vmul.f64	d6, d6, d7
    b01c:	e59f3094 	ldr	r3, [pc, #148]	; b0b8 <g_halGps_getData_i32+0x8fc>
    b020:	e5d33000 	ldrb	r3, [r3]
    b024:	e2433030 	sub	r3, r3, #48	; 0x30
    b028:	ee053a90 	vmov	s11, r3
    b02c:	eeb87be5 	vcvt.f64.s32	d7, s11
    b030:	ee367b07 	vadd.f64	d7, d6, d7
    b034:	e59f3060 	ldr	r3, [pc, #96]	; b09c <g_halGps_getData_i32+0x8e0>
    b038:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    b03c:	e59f3078 	ldr	r3, [pc, #120]	; b0bc <g_halGps_getData_i32+0x900>
    b040:	e5933000 	ldr	r3, [r3]
    b044:	e2832001 	add	r2, r3, #1
    b048:	e59f306c 	ldr	r3, [pc, #108]	; b0bc <g_halGps_getData_i32+0x900>
    b04c:	e5832000 	str	r2, [r3]
    b050:	ea00003a 	b	b140 <g_halGps_getData_i32+0x984>

					}
					else if (l_rec_Data_ch=='.')
    b054:	e59f305c 	ldr	r3, [pc, #92]	; b0b8 <g_halGps_getData_i32+0x8fc>
    b058:	e5d33000 	ldrb	r3, [r3]
    b05c:	e353002e 	cmp	r3, #46	; 0x2e
    b060:	1a000018 	bne	b0c8 <g_halGps_getData_i32+0x90c>
					{
						l_fieldpointer_i32++;
    b064:	e59f3054 	ldr	r3, [pc, #84]	; b0c0 <g_halGps_getData_i32+0x904>
    b068:	e5933000 	ldr	r3, [r3]
    b06c:	e2832001 	add	r2, r3, #1
    b070:	e59f3048 	ldr	r3, [pc, #72]	; b0c0 <g_halGps_getData_i32+0x904>
    b074:	e5832000 	str	r2, [r3]
    b078:	ea000030 	b	b140 <g_halGps_getData_i32+0x984>
    b07c:	e1a00000 	nop			; (mov r0, r0)
    b080:	00000000 	.word	0x00000000
    b084:	40240000 	.word	0x40240000
    b088:	bc6a7efa 	.word	0xbc6a7efa
    b08c:	3f789374 	.word	0x3f789374
    b090:	00019701 	.word	0x00019701
    b094:	000196a0 	.word	0x000196a0
    b098:	000196f0 	.word	0x000196f0
    b09c:	000196f8 	.word	0x000196f8
    b0a0:	00019254 	.word	0x00019254
    b0a4:	00019703 	.word	0x00019703
    b0a8:	00019700 	.word	0x00019700
    b0ac:	00019702 	.word	0x00019702
    b0b0:	000196d0 	.word	0x000196d0
    b0b4:	000196d4 	.word	0x000196d4
    b0b8:	00019250 	.word	0x00019250
    b0bc:	00019708 	.word	0x00019708
    b0c0:	00019704 	.word	0x00019704
    b0c4:	000196b8 	.word	0x000196b8
					}
					else
					{
						l_geoid_f64=l_geoid_f64+(double)(l_rec_Data_ch-48)/l_decimal_place_factor_i32;
    b0c8:	e51f3018 	ldr	r3, [pc, #-24]	; b0b8 <g_halGps_getData_i32+0x8fc>
    b0cc:	e5d33000 	ldrb	r3, [r3]
    b0d0:	e2433030 	sub	r3, r3, #48	; 0x30
    b0d4:	ee073a90 	vmov	s15, r3
    b0d8:	eeb86be7 	vcvt.f64.s32	d6, s15
    b0dc:	e51f3044 	ldr	r3, [pc, #-68]	; b0a0 <g_halGps_getData_i32+0x8e4>
    b0e0:	e5933000 	ldr	r3, [r3]
    b0e4:	ee053a90 	vmov	s11, r3
    b0e8:	eeb87be5 	vcvt.f64.s32	d7, s11
    b0ec:	ee866b07 	vdiv.f64	d6, d6, d7
    b0f0:	e51f305c 	ldr	r3, [pc, #-92]	; b09c <g_halGps_getData_i32+0x8e0>
    b0f4:	ed937b00 	vldr	d7, [r3]
    b0f8:	ee367b07 	vadd.f64	d7, d6, d7
    b0fc:	e51f3068 	ldr	r3, [pc, #-104]	; b09c <g_halGps_getData_i32+0x8e0>
    b100:	ed837b00 	vstr	d7, [r3]
						l_decimal_place_factor_i32=l_decimal_place_factor_i32*10;
    b104:	e51f306c 	ldr	r3, [pc, #-108]	; b0a0 <g_halGps_getData_i32+0x8e4>
    b108:	e5932000 	ldr	r2, [r3]
    b10c:	e1a03002 	mov	r3, r2
    b110:	e1a03103 	lsl	r3, r3, #2
    b114:	e0833002 	add	r3, r3, r2
    b118:	e1a03083 	lsl	r3, r3, #1
    b11c:	e1a02003 	mov	r2, r3
    b120:	e51f3088 	ldr	r3, [pc, #-136]	; b0a0 <g_halGps_getData_i32+0x8e4>
    b124:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    b128:	e51f3074 	ldr	r3, [pc, #-116]	; b0bc <g_halGps_getData_i32+0x900>
    b12c:	e5933000 	ldr	r3, [r3]
    b130:	e2832001 	add	r2, r3, #1
    b134:	e51f3080 	ldr	r3, [pc, #-128]	; b0bc <g_halGps_getData_i32+0x900>
    b138:	e5832000 	str	r2, [r3]
					}
					break;
    b13c:	eaffffff 	b	b140 <g_halGps_getData_i32+0x984>
    b140:	e1a00000 	nop			; (mov r0, r0)
				}
				break;
    b144:	e1a00000 	nop			; (mov r0, r0)
			}
			break;
    b148:	ea0001ca 	b	b878 <g_halGps_getData_i32+0x10bc>


		case 2://$GPRMC ,205003.000 ,A ,4841.9261 ,N ,00918.7276 ,E ,0.33 ,184.26 ,100415 , , , A*63      44- 46
			switch (l_rec_Data_ch)
    b14c:	e51f309c 	ldr	r3, [pc, #-156]	; b0b8 <g_halGps_getData_i32+0x8fc>
    b150:	e5d33000 	ldrb	r3, [r3]
    b154:	e353000a 	cmp	r3, #10
    b158:	0a00000e 	beq	b198 <g_halGps_getData_i32+0x9dc>
    b15c:	e353002c 	cmp	r3, #44	; 0x2c
    b160:	1a000018 	bne	b1c8 <g_halGps_getData_i32+0xa0c>
			{
			case ',':
				l_data_position_ch++;
    b164:	e51f30c0 	ldr	r3, [pc, #-192]	; b0ac <g_halGps_getData_i32+0x8f0>
    b168:	e5d33000 	ldrb	r3, [r3]
    b16c:	e2833001 	add	r3, r3, #1
    b170:	e6ef2073 	uxtb	r2, r3
    b174:	e51f30d0 	ldr	r3, [pc, #-208]	; b0ac <g_halGps_getData_i32+0x8f0>
    b178:	e5c32000 	strb	r2, [r3]
				l_fieldpointer_i32=0;
    b17c:	e51f30c4 	ldr	r3, [pc, #-196]	; b0c0 <g_halGps_getData_i32+0x904>
    b180:	e3a02000 	mov	r2, #0
    b184:	e5832000 	str	r2, [r3]
				l_decimal_place_factor_i32=10;
    b188:	e51f30f0 	ldr	r3, [pc, #-240]	; b0a0 <g_halGps_getData_i32+0x8e4>
    b18c:	e3a0200a 	mov	r2, #10
    b190:	e5832000 	str	r2, [r3]
				break;
    b194:	ea0001b6 	b	b874 <g_halGps_getData_i32+0x10b8>
			case 10://LF found
				l_succeded_i32=l_succeded_i32+200;
    b198:	e51f30e4 	ldr	r3, [pc, #-228]	; b0bc <g_halGps_getData_i32+0x900>
    b19c:	e5933000 	ldr	r3, [r3]
    b1a0:	e28320c8 	add	r2, r3, #200	; 0xc8
    b1a4:	e51f30f0 	ldr	r3, [pc, #-240]	; b0bc <g_halGps_getData_i32+0x900>
    b1a8:	e5832000 	str	r2, [r3]
				l_message_position_ch=0;
    b1ac:	e51f3110 	ldr	r3, [pc, #-272]	; b0a4 <g_halGps_getData_i32+0x8e8>
    b1b0:	e3a02000 	mov	r2, #0
    b1b4:	e5c32000 	strb	r2, [r3]
				l_header_position_ch=0;
    b1b8:	e51f3118 	ldr	r3, [pc, #-280]	; b0a8 <g_halGps_getData_i32+0x8ec>
    b1bc:	e3a02000 	mov	r2, #0
    b1c0:	e5c32000 	strb	r2, [r3]
				break;
    b1c4:	ea0001aa 	b	b874 <g_halGps_getData_i32+0x10b8>
			default:
				switch (l_data_position_ch)
    b1c8:	e51f3124 	ldr	r3, [pc, #-292]	; b0ac <g_halGps_getData_i32+0x8f0>
    b1cc:	e5d33000 	ldrb	r3, [r3]
    b1d0:	e2433001 	sub	r3, r3, #1
    b1d4:	e3530008 	cmp	r3, #8
    b1d8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b1dc:	ea0001a3 	b	b870 <g_halGps_getData_i32+0x10b4>
    b1e0:	0000b204 	.word	0x0000b204
    b1e4:	0000b274 	.word	0x0000b274
    b1e8:	0000b2c0 	.word	0x0000b2c0
    b1ec:	0000b3fc 	.word	0x0000b3fc
    b1f0:	0000b448 	.word	0x0000b448
    b1f4:	0000b584 	.word	0x0000b584
    b1f8:	0000b5d0 	.word	0x0000b5d0
    b1fc:	0000b6b4 	.word	0x0000b6b4
    b200:	0000b800 	.word	0x0000b800
				{
				case 1://Time
					if(l_fieldpointer_i32<6)
    b204:	e51f314c 	ldr	r3, [pc, #-332]	; b0c0 <g_halGps_getData_i32+0x904>
    b208:	e5933000 	ldr	r3, [r3]
    b20c:	e3530005 	cmp	r3, #5
    b210:	ca000011 	bgt	b25c <g_halGps_getData_i32+0xaa0>
					{
						l_time_ui32=l_time_ui32*10+(l_rec_Data_ch-48);
    b214:	e51f316c 	ldr	r3, [pc, #-364]	; b0b0 <g_halGps_getData_i32+0x8f4>
    b218:	e5932000 	ldr	r2, [r3]
    b21c:	e1a03002 	mov	r3, r2
    b220:	e1a03103 	lsl	r3, r3, #2
    b224:	e0833002 	add	r3, r3, r2
    b228:	e1a03083 	lsl	r3, r3, #1
    b22c:	e1a02003 	mov	r2, r3
    b230:	e51f3180 	ldr	r3, [pc, #-384]	; b0b8 <g_halGps_getData_i32+0x8fc>
    b234:	e5d33000 	ldrb	r3, [r3]
    b238:	e0823003 	add	r3, r2, r3
    b23c:	e2432030 	sub	r2, r3, #48	; 0x30
    b240:	e51f3198 	ldr	r3, [pc, #-408]	; b0b0 <g_halGps_getData_i32+0x8f4>
    b244:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    b248:	e51f3194 	ldr	r3, [pc, #-404]	; b0bc <g_halGps_getData_i32+0x900>
    b24c:	e5933000 	ldr	r3, [r3]
    b250:	e2832001 	add	r2, r3, #1
    b254:	e51f31a0 	ldr	r3, [pc, #-416]	; b0bc <g_halGps_getData_i32+0x900>
    b258:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b25c:	e51f31a4 	ldr	r3, [pc, #-420]	; b0c0 <g_halGps_getData_i32+0x904>
    b260:	e5933000 	ldr	r3, [r3]
    b264:	e2832001 	add	r2, r3, #1
    b268:	e51f31b0 	ldr	r3, [pc, #-432]	; b0c0 <g_halGps_getData_i32+0x904>
    b26c:	e5832000 	str	r2, [r3]
					break;
    b270:	ea00017e 	b	b870 <g_halGps_getData_i32+0x10b4>
				case 2://Fix
					if(l_fieldpointer_i32<2)
    b274:	e51f31bc 	ldr	r3, [pc, #-444]	; b0c0 <g_halGps_getData_i32+0x904>
    b278:	e5933000 	ldr	r3, [r3]
    b27c:	e3530001 	cmp	r3, #1
    b280:	ca000008 	bgt	b2a8 <g_halGps_getData_i32+0xaec>
					{
						l_fix_ch=l_rec_Data_ch;
    b284:	e51f31d4 	ldr	r3, [pc, #-468]	; b0b8 <g_halGps_getData_i32+0x8fc>
    b288:	e5d32000 	ldrb	r2, [r3]
    b28c:	e51f31e0 	ldr	r3, [pc, #-480]	; b0b4 <g_halGps_getData_i32+0x8f8>
    b290:	e5c32000 	strb	r2, [r3]
						l_succeded_i32++;
    b294:	e51f31e0 	ldr	r3, [pc, #-480]	; b0bc <g_halGps_getData_i32+0x900>
    b298:	e5933000 	ldr	r3, [r3]
    b29c:	e2832001 	add	r2, r3, #1
    b2a0:	e51f31ec 	ldr	r3, [pc, #-492]	; b0bc <g_halGps_getData_i32+0x900>
    b2a4:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b2a8:	e51f31f0 	ldr	r3, [pc, #-496]	; b0c0 <g_halGps_getData_i32+0x904>
    b2ac:	e5933000 	ldr	r3, [r3]
    b2b0:	e2832001 	add	r2, r3, #1
    b2b4:	e51f31fc 	ldr	r3, [pc, #-508]	; b0c0 <g_halGps_getData_i32+0x904>
    b2b8:	e5832000 	str	r2, [r3]
					break;
    b2bc:	ea00016b 	b	b870 <g_halGps_getData_i32+0x10b4>
				case 3://Latitude
					if(l_fieldpointer_i32<2)
    b2c0:	e51f3208 	ldr	r3, [pc, #-520]	; b0c0 <g_halGps_getData_i32+0x904>
    b2c4:	e5933000 	ldr	r3, [r3]
    b2c8:	e3530001 	cmp	r3, #1
    b2cc:	ca000012 	bgt	b31c <g_halGps_getData_i32+0xb60>
					{
						l_gps_latitude_st.l_degree_ui32=l_gps_latitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    b2d0:	e51f3214 	ldr	r3, [pc, #-532]	; b0c4 <g_halGps_getData_i32+0x908>
    b2d4:	e5932000 	ldr	r2, [r3]
    b2d8:	e1a03002 	mov	r3, r2
    b2dc:	e1a03103 	lsl	r3, r3, #2
    b2e0:	e0833002 	add	r3, r3, r2
    b2e4:	e1a03083 	lsl	r3, r3, #1
    b2e8:	e1a02003 	mov	r2, r3
    b2ec:	e51f323c 	ldr	r3, [pc, #-572]	; b0b8 <g_halGps_getData_i32+0x8fc>
    b2f0:	e5d33000 	ldrb	r3, [r3]
    b2f4:	e0823003 	add	r3, r2, r3
    b2f8:	e2432030 	sub	r2, r3, #48	; 0x30
    b2fc:	e51f3240 	ldr	r3, [pc, #-576]	; b0c4 <g_halGps_getData_i32+0x908>
    b300:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    b304:	e51f3250 	ldr	r3, [pc, #-592]	; b0bc <g_halGps_getData_i32+0x900>
    b308:	e5933000 	ldr	r3, [r3]
    b30c:	e2832001 	add	r2, r3, #1
    b310:	e51f325c 	ldr	r3, [pc, #-604]	; b0bc <g_halGps_getData_i32+0x900>
    b314:	e5832000 	str	r2, [r3]
    b318:	ea000031 	b	b3e4 <g_halGps_getData_i32+0xc28>
					}
					else if(l_fieldpointer_i32<4)
    b31c:	e51f3264 	ldr	r3, [pc, #-612]	; b0c0 <g_halGps_getData_i32+0x904>
    b320:	e5933000 	ldr	r3, [r3]
    b324:	e3530003 	cmp	r3, #3
    b328:	ca000012 	bgt	b378 <g_halGps_getData_i32+0xbbc>
					{
						l_gps_latitude_st.l_minutes_ui32=l_gps_latitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    b32c:	e51f3270 	ldr	r3, [pc, #-624]	; b0c4 <g_halGps_getData_i32+0x908>
    b330:	e5932004 	ldr	r2, [r3, #4]
    b334:	e1a03002 	mov	r3, r2
    b338:	e1a03103 	lsl	r3, r3, #2
    b33c:	e0833002 	add	r3, r3, r2
    b340:	e1a03083 	lsl	r3, r3, #1
    b344:	e1a02003 	mov	r2, r3
    b348:	e51f3298 	ldr	r3, [pc, #-664]	; b0b8 <g_halGps_getData_i32+0x8fc>
    b34c:	e5d33000 	ldrb	r3, [r3]
    b350:	e0823003 	add	r3, r2, r3
    b354:	e2432030 	sub	r2, r3, #48	; 0x30
    b358:	e51f329c 	ldr	r3, [pc, #-668]	; b0c4 <g_halGps_getData_i32+0x908>
    b35c:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    b360:	e51f32ac 	ldr	r3, [pc, #-684]	; b0bc <g_halGps_getData_i32+0x900>
    b364:	e5933000 	ldr	r3, [r3]
    b368:	e2832001 	add	r2, r3, #1
    b36c:	e51f32b8 	ldr	r3, [pc, #-696]	; b0bc <g_halGps_getData_i32+0x900>
    b370:	e5832000 	str	r2, [r3]
    b374:	ea00001a 	b	b3e4 <g_halGps_getData_i32+0xc28>
					}
					else if(l_fieldpointer_i32>=5 && l_fieldpointer_i32<9)
    b378:	e51f32c0 	ldr	r3, [pc, #-704]	; b0c0 <g_halGps_getData_i32+0x904>
    b37c:	e5933000 	ldr	r3, [r3]
    b380:	e3530004 	cmp	r3, #4
    b384:	da000016 	ble	b3e4 <g_halGps_getData_i32+0xc28>
    b388:	e51f32d0 	ldr	r3, [pc, #-720]	; b0c0 <g_halGps_getData_i32+0x904>
    b38c:	e5933000 	ldr	r3, [r3]
    b390:	e3530008 	cmp	r3, #8
    b394:	ca000012 	bgt	b3e4 <g_halGps_getData_i32+0xc28>
					{
						l_gps_latitude_st.l_seconds_f64=l_gps_latitude_st.l_seconds_f64*10+(double)(l_rec_Data_ch-48)*0.006;
    b398:	e51f32dc 	ldr	r3, [pc, #-732]	; b0c4 <g_halGps_getData_i32+0x908>
    b39c:	ed936b02 	vldr	d6, [r3, #8]
    b3a0:	ed9f7be8 	vldr	d7, [pc, #928]	; b748 <g_halGps_getData_i32+0xf8c>
    b3a4:	ee266b07 	vmul.f64	d6, d6, d7
    b3a8:	e59f33c4 	ldr	r3, [pc, #964]	; b774 <g_halGps_getData_i32+0xfb8>
    b3ac:	e5d33000 	ldrb	r3, [r3]
    b3b0:	e2433030 	sub	r3, r3, #48	; 0x30
    b3b4:	ee073a90 	vmov	s15, r3
    b3b8:	eeb85be7 	vcvt.f64.s32	d5, s15
    b3bc:	ed9f7be3 	vldr	d7, [pc, #908]	; b750 <g_halGps_getData_i32+0xf94>
    b3c0:	ee257b07 	vmul.f64	d7, d5, d7
    b3c4:	ee367b07 	vadd.f64	d7, d6, d7
    b3c8:	e59f3390 	ldr	r3, [pc, #912]	; b760 <g_halGps_getData_i32+0xfa4>
    b3cc:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    b3d0:	e59f33a8 	ldr	r3, [pc, #936]	; b780 <g_halGps_getData_i32+0xfc4>
    b3d4:	e5933000 	ldr	r3, [r3]
    b3d8:	e2832001 	add	r2, r3, #1
    b3dc:	e59f339c 	ldr	r3, [pc, #924]	; b780 <g_halGps_getData_i32+0xfc4>
    b3e0:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b3e4:	e59f3390 	ldr	r3, [pc, #912]	; b77c <g_halGps_getData_i32+0xfc0>
    b3e8:	e5933000 	ldr	r3, [r3]
    b3ec:	e2832001 	add	r2, r3, #1
    b3f0:	e59f3384 	ldr	r3, [pc, #900]	; b77c <g_halGps_getData_i32+0xfc0>
    b3f4:	e5832000 	str	r2, [r3]
					break;
    b3f8:	ea00011c 	b	b870 <g_halGps_getData_i32+0x10b4>
				case 4://cardinal direction
					if(l_fieldpointer_i32<1)
    b3fc:	e59f3378 	ldr	r3, [pc, #888]	; b77c <g_halGps_getData_i32+0xfc0>
    b400:	e5933000 	ldr	r3, [r3]
    b404:	e3530000 	cmp	r3, #0
    b408:	ca000008 	bgt	b430 <g_halGps_getData_i32+0xc74>
					{
						l_gps_latitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    b40c:	e59f3360 	ldr	r3, [pc, #864]	; b774 <g_halGps_getData_i32+0xfb8>
    b410:	e5d32000 	ldrb	r2, [r3]
    b414:	e59f3344 	ldr	r3, [pc, #836]	; b760 <g_halGps_getData_i32+0xfa4>
    b418:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    b41c:	e59f335c 	ldr	r3, [pc, #860]	; b780 <g_halGps_getData_i32+0xfc4>
    b420:	e5933000 	ldr	r3, [r3]
    b424:	e2832001 	add	r2, r3, #1
    b428:	e59f3350 	ldr	r3, [pc, #848]	; b780 <g_halGps_getData_i32+0xfc4>
    b42c:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b430:	e59f3344 	ldr	r3, [pc, #836]	; b77c <g_halGps_getData_i32+0xfc0>
    b434:	e5933000 	ldr	r3, [r3]
    b438:	e2832001 	add	r2, r3, #1
    b43c:	e59f3338 	ldr	r3, [pc, #824]	; b77c <g_halGps_getData_i32+0xfc0>
    b440:	e5832000 	str	r2, [r3]
					break;
    b444:	ea000109 	b	b870 <g_halGps_getData_i32+0x10b4>
				case 5://Longitude
					if(l_fieldpointer_i32<3)
    b448:	e59f332c 	ldr	r3, [pc, #812]	; b77c <g_halGps_getData_i32+0xfc0>
    b44c:	e5933000 	ldr	r3, [r3]
    b450:	e3530002 	cmp	r3, #2
    b454:	ca000012 	bgt	b4a4 <g_halGps_getData_i32+0xce8>
					{
						l_gps_longitude_st.l_degree_ui32=l_gps_longitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    b458:	e59f3304 	ldr	r3, [pc, #772]	; b764 <g_halGps_getData_i32+0xfa8>
    b45c:	e5932000 	ldr	r2, [r3]
    b460:	e1a03002 	mov	r3, r2
    b464:	e1a03103 	lsl	r3, r3, #2
    b468:	e0833002 	add	r3, r3, r2
    b46c:	e1a03083 	lsl	r3, r3, #1
    b470:	e1a02003 	mov	r2, r3
    b474:	e59f32f8 	ldr	r3, [pc, #760]	; b774 <g_halGps_getData_i32+0xfb8>
    b478:	e5d33000 	ldrb	r3, [r3]
    b47c:	e0823003 	add	r3, r2, r3
    b480:	e2432030 	sub	r2, r3, #48	; 0x30
    b484:	e59f32d8 	ldr	r3, [pc, #728]	; b764 <g_halGps_getData_i32+0xfa8>
    b488:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    b48c:	e59f32ec 	ldr	r3, [pc, #748]	; b780 <g_halGps_getData_i32+0xfc4>
    b490:	e5933000 	ldr	r3, [r3]
    b494:	e2832001 	add	r2, r3, #1
    b498:	e59f32e0 	ldr	r3, [pc, #736]	; b780 <g_halGps_getData_i32+0xfc4>
    b49c:	e5832000 	str	r2, [r3]
    b4a0:	ea000031 	b	b56c <g_halGps_getData_i32+0xdb0>
					}
					else if(l_fieldpointer_i32<5)
    b4a4:	e59f32d0 	ldr	r3, [pc, #720]	; b77c <g_halGps_getData_i32+0xfc0>
    b4a8:	e5933000 	ldr	r3, [r3]
    b4ac:	e3530004 	cmp	r3, #4
    b4b0:	ca000012 	bgt	b500 <g_halGps_getData_i32+0xd44>
					{
						l_gps_longitude_st.l_minutes_ui32=l_gps_longitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    b4b4:	e59f32a8 	ldr	r3, [pc, #680]	; b764 <g_halGps_getData_i32+0xfa8>
    b4b8:	e5932004 	ldr	r2, [r3, #4]
    b4bc:	e1a03002 	mov	r3, r2
    b4c0:	e1a03103 	lsl	r3, r3, #2
    b4c4:	e0833002 	add	r3, r3, r2
    b4c8:	e1a03083 	lsl	r3, r3, #1
    b4cc:	e1a02003 	mov	r2, r3
    b4d0:	e59f329c 	ldr	r3, [pc, #668]	; b774 <g_halGps_getData_i32+0xfb8>
    b4d4:	e5d33000 	ldrb	r3, [r3]
    b4d8:	e0823003 	add	r3, r2, r3
    b4dc:	e2432030 	sub	r2, r3, #48	; 0x30
    b4e0:	e59f327c 	ldr	r3, [pc, #636]	; b764 <g_halGps_getData_i32+0xfa8>
    b4e4:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    b4e8:	e59f3290 	ldr	r3, [pc, #656]	; b780 <g_halGps_getData_i32+0xfc4>
    b4ec:	e5933000 	ldr	r3, [r3]
    b4f0:	e2832001 	add	r2, r3, #1
    b4f4:	e59f3284 	ldr	r3, [pc, #644]	; b780 <g_halGps_getData_i32+0xfc4>
    b4f8:	e5832000 	str	r2, [r3]
    b4fc:	ea00001a 	b	b56c <g_halGps_getData_i32+0xdb0>
					}
					else if(l_fieldpointer_i32>=6 && l_fieldpointer_i32<10)
    b500:	e59f3274 	ldr	r3, [pc, #628]	; b77c <g_halGps_getData_i32+0xfc0>
    b504:	e5933000 	ldr	r3, [r3]
    b508:	e3530005 	cmp	r3, #5
    b50c:	da000016 	ble	b56c <g_halGps_getData_i32+0xdb0>
    b510:	e59f3264 	ldr	r3, [pc, #612]	; b77c <g_halGps_getData_i32+0xfc0>
    b514:	e5933000 	ldr	r3, [r3]
    b518:	e3530009 	cmp	r3, #9
    b51c:	ca000012 	bgt	b56c <g_halGps_getData_i32+0xdb0>
					{
						l_gps_longitude_st.l_seconds_f64=l_gps_longitude_st.l_seconds_f64*10+(double)(l_rec_Data_ch-48)*0.006;
    b520:	e59f323c 	ldr	r3, [pc, #572]	; b764 <g_halGps_getData_i32+0xfa8>
    b524:	ed936b02 	vldr	d6, [r3, #8]
    b528:	ed9f7b86 	vldr	d7, [pc, #536]	; b748 <g_halGps_getData_i32+0xf8c>
    b52c:	ee266b07 	vmul.f64	d6, d6, d7
    b530:	e59f323c 	ldr	r3, [pc, #572]	; b774 <g_halGps_getData_i32+0xfb8>
    b534:	e5d33000 	ldrb	r3, [r3]
    b538:	e2433030 	sub	r3, r3, #48	; 0x30
    b53c:	ee073a90 	vmov	s15, r3
    b540:	eeb85be7 	vcvt.f64.s32	d5, s15
    b544:	ed9f7b81 	vldr	d7, [pc, #516]	; b750 <g_halGps_getData_i32+0xf94>
    b548:	ee257b07 	vmul.f64	d7, d5, d7
    b54c:	ee367b07 	vadd.f64	d7, d6, d7
    b550:	e59f320c 	ldr	r3, [pc, #524]	; b764 <g_halGps_getData_i32+0xfa8>
    b554:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    b558:	e59f3220 	ldr	r3, [pc, #544]	; b780 <g_halGps_getData_i32+0xfc4>
    b55c:	e5933000 	ldr	r3, [r3]
    b560:	e2832001 	add	r2, r3, #1
    b564:	e59f3214 	ldr	r3, [pc, #532]	; b780 <g_halGps_getData_i32+0xfc4>
    b568:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b56c:	e59f3208 	ldr	r3, [pc, #520]	; b77c <g_halGps_getData_i32+0xfc0>
    b570:	e5933000 	ldr	r3, [r3]
    b574:	e2832001 	add	r2, r3, #1
    b578:	e59f31fc 	ldr	r3, [pc, #508]	; b77c <g_halGps_getData_i32+0xfc0>
    b57c:	e5832000 	str	r2, [r3]
					break;
    b580:	ea0000ba 	b	b870 <g_halGps_getData_i32+0x10b4>
				case 6://cardinal direction
					if(l_fieldpointer_i32<1)
    b584:	e59f31f0 	ldr	r3, [pc, #496]	; b77c <g_halGps_getData_i32+0xfc0>
    b588:	e5933000 	ldr	r3, [r3]
    b58c:	e3530000 	cmp	r3, #0
    b590:	ca000008 	bgt	b5b8 <g_halGps_getData_i32+0xdfc>
					{
						l_gps_longitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    b594:	e59f31d8 	ldr	r3, [pc, #472]	; b774 <g_halGps_getData_i32+0xfb8>
    b598:	e5d32000 	ldrb	r2, [r3]
    b59c:	e59f31c0 	ldr	r3, [pc, #448]	; b764 <g_halGps_getData_i32+0xfa8>
    b5a0:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    b5a4:	e59f31d4 	ldr	r3, [pc, #468]	; b780 <g_halGps_getData_i32+0xfc4>
    b5a8:	e5933000 	ldr	r3, [r3]
    b5ac:	e2832001 	add	r2, r3, #1
    b5b0:	e59f31c8 	ldr	r3, [pc, #456]	; b780 <g_halGps_getData_i32+0xfc4>
    b5b4:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b5b8:	e59f31bc 	ldr	r3, [pc, #444]	; b77c <g_halGps_getData_i32+0xfc0>
    b5bc:	e5933000 	ldr	r3, [r3]
    b5c0:	e2832001 	add	r2, r3, #1
    b5c4:	e59f31b0 	ldr	r3, [pc, #432]	; b77c <g_halGps_getData_i32+0xfc0>
    b5c8:	e5832000 	str	r2, [r3]
					break;
    b5cc:	ea0000a7 	b	b870 <g_halGps_getData_i32+0x10b4>
				case 7://Velocity
					if(l_fieldpointer_i32<1)
    b5d0:	e59f31a4 	ldr	r3, [pc, #420]	; b77c <g_halGps_getData_i32+0xfc0>
    b5d4:	e5933000 	ldr	r3, [r3]
    b5d8:	e3530000 	cmp	r3, #0
    b5dc:	ca000013 	bgt	b630 <g_halGps_getData_i32+0xe74>
					{
						l_velocity_f64=l_velocity_f64*10+(double)(l_rec_Data_ch-48)*0.01;
    b5e0:	e59f3180 	ldr	r3, [pc, #384]	; b768 <g_halGps_getData_i32+0xfac>
    b5e4:	ed936b00 	vldr	d6, [r3]
    b5e8:	ed9f7b56 	vldr	d7, [pc, #344]	; b748 <g_halGps_getData_i32+0xf8c>
    b5ec:	ee266b07 	vmul.f64	d6, d6, d7
    b5f0:	e59f317c 	ldr	r3, [pc, #380]	; b774 <g_halGps_getData_i32+0xfb8>
    b5f4:	e5d33000 	ldrb	r3, [r3]
    b5f8:	e2433030 	sub	r3, r3, #48	; 0x30
    b5fc:	ee073a90 	vmov	s15, r3
    b600:	eeb85be7 	vcvt.f64.s32	d5, s15
    b604:	ed9f7b53 	vldr	d7, [pc, #332]	; b758 <g_halGps_getData_i32+0xf9c>
    b608:	ee257b07 	vmul.f64	d7, d5, d7
    b60c:	ee367b07 	vadd.f64	d7, d6, d7
    b610:	e59f3150 	ldr	r3, [pc, #336]	; b768 <g_halGps_getData_i32+0xfac>
    b614:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    b618:	e59f3160 	ldr	r3, [pc, #352]	; b780 <g_halGps_getData_i32+0xfc4>
    b61c:	e5933000 	ldr	r3, [r3]
    b620:	e2832001 	add	r2, r3, #1
    b624:	e59f3154 	ldr	r3, [pc, #340]	; b780 <g_halGps_getData_i32+0xfc4>
    b628:	e5832000 	str	r2, [r3]
    b62c:	ea00001a 	b	b69c <g_halGps_getData_i32+0xee0>
					}
					else if(l_fieldpointer_i32>=2 && l_fieldpointer_i32<4)
    b630:	e59f3144 	ldr	r3, [pc, #324]	; b77c <g_halGps_getData_i32+0xfc0>
    b634:	e5933000 	ldr	r3, [r3]
    b638:	e3530001 	cmp	r3, #1
    b63c:	da000016 	ble	b69c <g_halGps_getData_i32+0xee0>
    b640:	e59f3134 	ldr	r3, [pc, #308]	; b77c <g_halGps_getData_i32+0xfc0>
    b644:	e5933000 	ldr	r3, [r3]
    b648:	e3530003 	cmp	r3, #3
    b64c:	ca000012 	bgt	b69c <g_halGps_getData_i32+0xee0>
					{
						l_velocity_f64=l_velocity_f64*10+(double)(l_rec_Data_ch-48)*0.01;
    b650:	e59f3110 	ldr	r3, [pc, #272]	; b768 <g_halGps_getData_i32+0xfac>
    b654:	ed936b00 	vldr	d6, [r3]
    b658:	ed9f7b3a 	vldr	d7, [pc, #232]	; b748 <g_halGps_getData_i32+0xf8c>
    b65c:	ee266b07 	vmul.f64	d6, d6, d7
    b660:	e59f310c 	ldr	r3, [pc, #268]	; b774 <g_halGps_getData_i32+0xfb8>
    b664:	e5d33000 	ldrb	r3, [r3]
    b668:	e2433030 	sub	r3, r3, #48	; 0x30
    b66c:	ee073a90 	vmov	s15, r3
    b670:	eeb85be7 	vcvt.f64.s32	d5, s15
    b674:	ed9f7b37 	vldr	d7, [pc, #220]	; b758 <g_halGps_getData_i32+0xf9c>
    b678:	ee257b07 	vmul.f64	d7, d5, d7
    b67c:	ee367b07 	vadd.f64	d7, d6, d7
    b680:	e59f30e0 	ldr	r3, [pc, #224]	; b768 <g_halGps_getData_i32+0xfac>
    b684:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    b688:	e59f30f0 	ldr	r3, [pc, #240]	; b780 <g_halGps_getData_i32+0xfc4>
    b68c:	e5933000 	ldr	r3, [r3]
    b690:	e2832001 	add	r2, r3, #1
    b694:	e59f30e4 	ldr	r3, [pc, #228]	; b780 <g_halGps_getData_i32+0xfc4>
    b698:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b69c:	e59f30d8 	ldr	r3, [pc, #216]	; b77c <g_halGps_getData_i32+0xfc0>
    b6a0:	e5933000 	ldr	r3, [r3]
    b6a4:	e2832001 	add	r2, r3, #1
    b6a8:	e59f30cc 	ldr	r3, [pc, #204]	; b77c <g_halGps_getData_i32+0xfc0>
    b6ac:	e5832000 	str	r2, [r3]
					break;
    b6b0:	ea00006e 	b	b870 <g_halGps_getData_i32+0x10b4>
				case 8://Direction
					if(l_rec_Data_ch!='.' && l_fieldpointer_i32==0)
    b6b4:	e59f30b8 	ldr	r3, [pc, #184]	; b774 <g_halGps_getData_i32+0xfb8>
    b6b8:	e5d33000 	ldrb	r3, [r3]
    b6bc:	e353002e 	cmp	r3, #46	; 0x2e
    b6c0:	0a000015 	beq	b71c <g_halGps_getData_i32+0xf60>
    b6c4:	e59f30b0 	ldr	r3, [pc, #176]	; b77c <g_halGps_getData_i32+0xfc0>
    b6c8:	e5933000 	ldr	r3, [r3]
    b6cc:	e3530000 	cmp	r3, #0
    b6d0:	1a000011 	bne	b71c <g_halGps_getData_i32+0xf60>
					{
						l_direction_f64=l_direction_f64*10+(double)(l_rec_Data_ch-48);
    b6d4:	e59f3090 	ldr	r3, [pc, #144]	; b76c <g_halGps_getData_i32+0xfb0>
    b6d8:	ed936b00 	vldr	d6, [r3]
    b6dc:	ed9f7b19 	vldr	d7, [pc, #100]	; b748 <g_halGps_getData_i32+0xf8c>
    b6e0:	ee266b07 	vmul.f64	d6, d6, d7
    b6e4:	e59f3088 	ldr	r3, [pc, #136]	; b774 <g_halGps_getData_i32+0xfb8>
    b6e8:	e5d33000 	ldrb	r3, [r3]
    b6ec:	e2433030 	sub	r3, r3, #48	; 0x30
    b6f0:	ee053a90 	vmov	s11, r3
    b6f4:	eeb87be5 	vcvt.f64.s32	d7, s11
    b6f8:	ee367b07 	vadd.f64	d7, d6, d7
    b6fc:	e59f3068 	ldr	r3, [pc, #104]	; b76c <g_halGps_getData_i32+0xfb0>
    b700:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    b704:	e59f3074 	ldr	r3, [pc, #116]	; b780 <g_halGps_getData_i32+0xfc4>
    b708:	e5933000 	ldr	r3, [r3]
    b70c:	e2832001 	add	r2, r3, #1
    b710:	e59f3068 	ldr	r3, [pc, #104]	; b780 <g_halGps_getData_i32+0xfc4>
    b714:	e5832000 	str	r2, [r3]
    b718:	ea000037 	b	b7fc <g_halGps_getData_i32+0x1040>

					}
					else if (l_rec_Data_ch=='.')
    b71c:	e59f3050 	ldr	r3, [pc, #80]	; b774 <g_halGps_getData_i32+0xfb8>
    b720:	e5d33000 	ldrb	r3, [r3]
    b724:	e353002e 	cmp	r3, #46	; 0x2e
    b728:	1a000015 	bne	b784 <g_halGps_getData_i32+0xfc8>
					{
						l_fieldpointer_i32++;
    b72c:	e59f3048 	ldr	r3, [pc, #72]	; b77c <g_halGps_getData_i32+0xfc0>
    b730:	e5933000 	ldr	r3, [r3]
    b734:	e2832001 	add	r2, r3, #1
    b738:	e59f303c 	ldr	r3, [pc, #60]	; b77c <g_halGps_getData_i32+0xfc0>
    b73c:	e5832000 	str	r2, [r3]
    b740:	ea00002d 	b	b7fc <g_halGps_getData_i32+0x1040>
    b744:	e1a00000 	nop			; (mov r0, r0)
    b748:	00000000 	.word	0x00000000
    b74c:	40240000 	.word	0x40240000
    b750:	bc6a7efa 	.word	0xbc6a7efa
    b754:	3f789374 	.word	0x3f789374
    b758:	47ae147b 	.word	0x47ae147b
    b75c:	3f847ae1 	.word	0x3f847ae1
    b760:	000196b8 	.word	0x000196b8
    b764:	000196a0 	.word	0x000196a0
    b768:	000196d8 	.word	0x000196d8
    b76c:	000196e0 	.word	0x000196e0
    b770:	00019254 	.word	0x00019254
    b774:	00019250 	.word	0x00019250
    b778:	000196e8 	.word	0x000196e8
    b77c:	00019704 	.word	0x00019704
    b780:	00019708 	.word	0x00019708
					}
					else
					{
						l_direction_f64=l_direction_f64+(double)(l_rec_Data_ch-48)/l_decimal_place_factor_i32;
    b784:	e51f3018 	ldr	r3, [pc, #-24]	; b774 <g_halGps_getData_i32+0xfb8>
    b788:	e5d33000 	ldrb	r3, [r3]
    b78c:	e2433030 	sub	r3, r3, #48	; 0x30
    b790:	ee073a90 	vmov	s15, r3
    b794:	eeb86be7 	vcvt.f64.s32	d6, s15
    b798:	e51f3030 	ldr	r3, [pc, #-48]	; b770 <g_halGps_getData_i32+0xfb4>
    b79c:	e5933000 	ldr	r3, [r3]
    b7a0:	ee053a90 	vmov	s11, r3
    b7a4:	eeb87be5 	vcvt.f64.s32	d7, s11
    b7a8:	ee866b07 	vdiv.f64	d6, d6, d7
    b7ac:	e51f3048 	ldr	r3, [pc, #-72]	; b76c <g_halGps_getData_i32+0xfb0>
    b7b0:	ed937b00 	vldr	d7, [r3]
    b7b4:	ee367b07 	vadd.f64	d7, d6, d7
    b7b8:	e51f3054 	ldr	r3, [pc, #-84]	; b76c <g_halGps_getData_i32+0xfb0>
    b7bc:	ed837b00 	vstr	d7, [r3]
						l_decimal_place_factor_i32=l_decimal_place_factor_i32*10;
    b7c0:	e51f3058 	ldr	r3, [pc, #-88]	; b770 <g_halGps_getData_i32+0xfb4>
    b7c4:	e5932000 	ldr	r2, [r3]
    b7c8:	e1a03002 	mov	r3, r2
    b7cc:	e1a03103 	lsl	r3, r3, #2
    b7d0:	e0833002 	add	r3, r3, r2
    b7d4:	e1a03083 	lsl	r3, r3, #1
    b7d8:	e1a02003 	mov	r2, r3
    b7dc:	e51f3074 	ldr	r3, [pc, #-116]	; b770 <g_halGps_getData_i32+0xfb4>
    b7e0:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    b7e4:	e51f306c 	ldr	r3, [pc, #-108]	; b780 <g_halGps_getData_i32+0xfc4>
    b7e8:	e5933000 	ldr	r3, [r3]
    b7ec:	e2832001 	add	r2, r3, #1
    b7f0:	e51f3078 	ldr	r3, [pc, #-120]	; b780 <g_halGps_getData_i32+0xfc4>
    b7f4:	e5832000 	str	r2, [r3]
					}
					break;
    b7f8:	ea00001c 	b	b870 <g_halGps_getData_i32+0x10b4>
    b7fc:	ea00001b 	b	b870 <g_halGps_getData_i32+0x10b4>
				case 9://Date
					if(l_fieldpointer_i32<6)
    b800:	e51f308c 	ldr	r3, [pc, #-140]	; b77c <g_halGps_getData_i32+0xfc0>
    b804:	e5933000 	ldr	r3, [r3]
    b808:	e3530005 	cmp	r3, #5
    b80c:	ca000011 	bgt	b858 <g_halGps_getData_i32+0x109c>
					{
						l_date_ui32=l_date_ui32*10+(l_rec_Data_ch-48);
    b810:	e51f30a0 	ldr	r3, [pc, #-160]	; b778 <g_halGps_getData_i32+0xfbc>
    b814:	e5932000 	ldr	r2, [r3]
    b818:	e1a03002 	mov	r3, r2
    b81c:	e1a03103 	lsl	r3, r3, #2
    b820:	e0833002 	add	r3, r3, r2
    b824:	e1a03083 	lsl	r3, r3, #1
    b828:	e1a02003 	mov	r2, r3
    b82c:	e51f30c0 	ldr	r3, [pc, #-192]	; b774 <g_halGps_getData_i32+0xfb8>
    b830:	e5d33000 	ldrb	r3, [r3]
    b834:	e0823003 	add	r3, r2, r3
    b838:	e2432030 	sub	r2, r3, #48	; 0x30
    b83c:	e51f30cc 	ldr	r3, [pc, #-204]	; b778 <g_halGps_getData_i32+0xfbc>
    b840:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    b844:	e51f30cc 	ldr	r3, [pc, #-204]	; b780 <g_halGps_getData_i32+0xfc4>
    b848:	e5933000 	ldr	r3, [r3]
    b84c:	e2832001 	add	r2, r3, #1
    b850:	e51f30d8 	ldr	r3, [pc, #-216]	; b780 <g_halGps_getData_i32+0xfc4>
    b854:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    b858:	e51f30e4 	ldr	r3, [pc, #-228]	; b77c <g_halGps_getData_i32+0xfc0>
    b85c:	e5933000 	ldr	r3, [r3]
    b860:	e2832001 	add	r2, r3, #1
    b864:	e51f30f0 	ldr	r3, [pc, #-240]	; b77c <g_halGps_getData_i32+0xfc0>
    b868:	e5832000 	str	r2, [r3]
					break;
    b86c:	e1a00000 	nop			; (mov r0, r0)
				}
				break;
    b870:	e1a00000 	nop			; (mov r0, r0)
			}
			break;
    b874:	e1a00000 	nop			; (mov r0, r0)
		}
	}
	return(l_succeded_i32);
    b878:	e51f3100 	ldr	r3, [pc, #-256]	; b780 <g_halGps_getData_i32+0xfc4>
    b87c:	e5933000 	ldr	r3, [r3]
}
    b880:	e1a00003 	mov	r0, r3
    b884:	e8bd8800 	pop	{fp, pc}

0000b888 <l_readI2cByte_ui8>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline unsigned char l_readI2cByte_ui8( unsigned char f_registerAddr_ui8 )
{
    b888:	e92d4800 	push	{fp, lr}
    b88c:	e28db004 	add	fp, sp, #4
    b890:	e24dd010 	sub	sp, sp, #16
    b894:	e1a03000 	mov	r3, r0
    b898:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char	l_registerAddr_ui8 = 0;
    b89c:	e3a03000 	mov	r3, #0
    b8a0:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char	l_recvDataByte_ui8 = 0;
    b8a4:	e3a03000 	mov	r3, #0
    b8a8:	e54b3006 	strb	r3, [fp, #-6]

	/*
	 * ensure single byte read (MSB of register address shall be 0)
	 * -> Mask MSB to zero!
	 */
	l_registerAddr_ui8 = f_registerAddr_ui8 & 0b01111111;
    b8ac:	e55b300d 	ldrb	r3, [fp, #-13]
    b8b0:	e203307f 	and	r3, r3, #127	; 0x7f
    b8b4:	e6ef3073 	uxtb	r3, r3
    b8b8:	e54b3005 	strb	r3, [fp, #-5]

	//write register request to I2C
	if ( g_lldI2c_WriteI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, &l_registerAddr_ui8, 1) != M_HAL_ACCMAG_SUCCESS_BL )
    b8bc:	e24b3005 	sub	r3, fp, #5
    b8c0:	e3a0001e 	mov	r0, #30
    b8c4:	e1a01003 	mov	r1, r3
    b8c8:	e3a02001 	mov	r2, #1
    b8cc:	eb0005a3 	bl	cf60 <g_lldI2c_WriteI2c_bl>
    b8d0:	e1a03000 	mov	r3, r0
    b8d4:	e3530000 	cmp	r3, #0
    b8d8:	0a000001 	beq	b8e4 <l_readI2cByte_ui8+0x5c>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    b8dc:	e3a03001 	mov	r3, #1
    b8e0:	ea00000a 	b	b910 <l_readI2cByte_ui8+0x88>
	}

	//read requested register data
	if ( g_lldI2c_ReadI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, &l_recvDataByte_ui8, 1) != M_HAL_ACCMAG_SUCCESS_BL )
    b8e4:	e24b3006 	sub	r3, fp, #6
    b8e8:	e3a0001e 	mov	r0, #30
    b8ec:	e1a01003 	mov	r1, r3
    b8f0:	e3a02001 	mov	r2, #1
    b8f4:	eb0005d1 	bl	d040 <g_lldI2c_ReadI2c_bl>
    b8f8:	e1a03000 	mov	r3, r0
    b8fc:	e3530000 	cmp	r3, #0
    b900:	0a000001 	beq	b90c <l_readI2cByte_ui8+0x84>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    b904:	e3a03001 	mov	r3, #1
    b908:	ea000000 	b	b910 <l_readI2cByte_ui8+0x88>
	}

	return l_recvDataByte_ui8;
    b90c:	e55b3006 	ldrb	r3, [fp, #-6]
}
    b910:	e1a00003 	mov	r0, r3
    b914:	e24bd004 	sub	sp, fp, #4
    b918:	e8bd8800 	pop	{fp, pc}

0000b91c <l_readI2cByteStream_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline unsigned int l_readI2cByteStream_bl( unsigned char f_startRegisterAddr_ui8, const unsigned char* f_readDestinationBuffer_pui8, unsigned int f_numOfBytesToRead_ui32 )
{
    b91c:	e92d4800 	push	{fp, lr}
    b920:	e28db004 	add	fp, sp, #4
    b924:	e24dd018 	sub	sp, sp, #24
    b928:	e1a03000 	mov	r3, r0
    b92c:	e50b1014 	str	r1, [fp, #-20]
    b930:	e50b2018 	str	r2, [fp, #-24]
    b934:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char	l_registerAddr_ui8 	= 0;
    b938:	e3a03000 	mov	r3, #0
    b93c:	e54b3005 	strb	r3, [fp, #-5]

	// ensure at least one data byte to read
	if (f_numOfBytesToRead_ui32 < 1)
    b940:	e51b3018 	ldr	r3, [fp, #-24]
    b944:	e3530000 	cmp	r3, #0
    b948:	1a000001 	bne	b954 <l_readI2cByteStream_bl+0x38>
	{
		return M_HAL_ACCMAG_FAILED_BL;
    b94c:	e3a03001 	mov	r3, #1
    b950:	ea000018 	b	b9b8 <l_readI2cByteStream_bl+0x9c>
	 * ensure byte stream reading (MSB of register address shall be 1)
	 *   -> Mask MSB to one!
	 *   -> LSM303D will auto-increment the register address for each byte
	 *      of data
	 */
	l_registerAddr_ui8 = f_startRegisterAddr_ui8 | 0b10000000;
    b954:	e55b300d 	ldrb	r3, [fp, #-13]
    b958:	e1e03c83 	mvn	r3, r3, lsl #25
    b95c:	e1e03ca3 	mvn	r3, r3, lsr #25
    b960:	e6ef3073 	uxtb	r3, r3
    b964:	e54b3005 	strb	r3, [fp, #-5]

	//write register request to I2C
	if ( g_lldI2c_WriteI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, &l_registerAddr_ui8, 1) != M_HAL_ACCMAG_SUCCESS_BL )
    b968:	e24b3005 	sub	r3, fp, #5
    b96c:	e3a0001e 	mov	r0, #30
    b970:	e1a01003 	mov	r1, r3
    b974:	e3a02001 	mov	r2, #1
    b978:	eb000578 	bl	cf60 <g_lldI2c_WriteI2c_bl>
    b97c:	e1a03000 	mov	r3, r0
    b980:	e3530000 	cmp	r3, #0
    b984:	0a000001 	beq	b990 <l_readI2cByteStream_bl+0x74>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    b988:	e3a03001 	mov	r3, #1
    b98c:	ea000009 	b	b9b8 <l_readI2cByteStream_bl+0x9c>
	}

	//read requested registers to I2C
	if ( g_lldI2c_ReadI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, f_readDestinationBuffer_pui8, f_numOfBytesToRead_ui32) != M_HAL_ACCMAG_SUCCESS_BL )
    b990:	e3a0001e 	mov	r0, #30
    b994:	e51b1014 	ldr	r1, [fp, #-20]
    b998:	e51b2018 	ldr	r2, [fp, #-24]
    b99c:	eb0005a7 	bl	d040 <g_lldI2c_ReadI2c_bl>
    b9a0:	e1a03000 	mov	r3, r0
    b9a4:	e3530000 	cmp	r3, #0
    b9a8:	0a000001 	beq	b9b4 <l_readI2cByteStream_bl+0x98>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    b9ac:	e3a03001 	mov	r3, #1
    b9b0:	ea000000 	b	b9b8 <l_readI2cByteStream_bl+0x9c>
	}

	return M_HAL_ACCMAG_SUCCESS_BL;
    b9b4:	e3a03000 	mov	r3, #0
}
    b9b8:	e1a00003 	mov	r0, r3
    b9bc:	e24bd004 	sub	sp, fp, #4
    b9c0:	e8bd8800 	pop	{fp, pc}

0000b9c4 <l_writeI2cByteStream_bl>:
 * - changed malloc/free approach to fixed size array (with define to set
 *   size of array in header)
 * \endinternal
 ***********************************************************************/
static inline unsigned int l_writeI2cByteStream_bl( unsigned char f_startRegisterAddr_ui8, const unsigned char* const f_byteStreamToWrite_pui8, unsigned int f_numOfBytes_ui32 )
{
    b9c4:	e92d4800 	push	{fp, lr}
    b9c8:	e28db004 	add	fp, sp, #4
    b9cc:	e24dd028 	sub	sp, sp, #40	; 0x28
    b9d0:	e1a03000 	mov	r3, r0
    b9d4:	e50b1024 	str	r1, [fp, #-36]	; 0x24
    b9d8:	e50b2028 	str	r2, [fp, #-40]	; 0x28
    b9dc:	e54b301d 	strb	r3, [fp, #-29]
	unsigned int	l_writeSucceeded_bl 	= M_HAL_ACCMAG_SUCCESS_BL; 	// success state as default
    b9e0:	e3a03000 	mov	r3, #0
    b9e4:	e50b3008 	str	r3, [fp, #-8]
	unsigned char 	l_bufCtr_ui8			= 0;						// loop counter to assemble payload and register address
    b9e8:	e3a03000 	mov	r3, #0
    b9ec:	e54b3009 	strb	r3, [fp, #-9]
	/*
	 * - ensure at least one data byte to write
	 * - prevent a buffer overflow of l_byteStreamBuffer_rgXui8
	 *   --> payload data bytes + register address (subaddress)
	 */
	if ( 		(f_numOfBytes_ui32 < 1)
    b9f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    b9f4:	e3530000 	cmp	r3, #0
    b9f8:	0a000002 	beq	ba08 <l_writeI2cByteStream_bl+0x44>
			||  (f_numOfBytes_ui32 > M_HAL_ACCMAG_WRITE_BYTESTREAM_BUFFER_SIZE_UI8-1) )
    b9fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    ba00:	e353000b 	cmp	r3, #11
    ba04:	9a000001 	bls	ba10 <l_writeI2cByteStream_bl+0x4c>
	{
		return M_HAL_ACCMAG_FAILED_BL;
    ba08:	e3a03001 	mov	r3, #1
    ba0c:	ea000026 	b	baac <l_writeI2cByteStream_bl+0xe8>
	 *     -> LSM303D will auto-increment the register address for each byte
	 *        of data
	 * (2) copy data to write to local buffer, start at second byte position
	 *     (first byte position is the register address)
	 */
	l_byteStreamBuffer_rgXui8[0] = f_startRegisterAddr_ui8 | 0b10000000;
    ba10:	e55b301d 	ldrb	r3, [fp, #-29]
    ba14:	e1e03c83 	mvn	r3, r3, lsl #25
    ba18:	e1e03ca3 	mvn	r3, r3, lsr #25
    ba1c:	e6ef3073 	uxtb	r3, r3
    ba20:	e54b3018 	strb	r3, [fp, #-24]
	for(l_bufCtr_ui8=0; l_bufCtr_ui8 < f_numOfBytes_ui32; l_bufCtr_ui8++)
    ba24:	e3a03000 	mov	r3, #0
    ba28:	e54b3009 	strb	r3, [fp, #-9]
    ba2c:	ea00000d 	b	ba68 <l_writeI2cByteStream_bl+0xa4>
	{
		l_byteStreamBuffer_rgXui8[l_bufCtr_ui8+1] = f_byteStreamToWrite_pui8[l_bufCtr_ui8];
    ba30:	e55b3009 	ldrb	r3, [fp, #-9]
    ba34:	e2831001 	add	r1, r3, #1
    ba38:	e55b3009 	ldrb	r3, [fp, #-9]
    ba3c:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
    ba40:	e0823003 	add	r3, r2, r3
    ba44:	e5d32000 	ldrb	r2, [r3]
    ba48:	e3e03013 	mvn	r3, #19
    ba4c:	e24b0004 	sub	r0, fp, #4
    ba50:	e0801001 	add	r1, r0, r1
    ba54:	e0813003 	add	r3, r1, r3
    ba58:	e5c32000 	strb	r2, [r3]
	 *        of data
	 * (2) copy data to write to local buffer, start at second byte position
	 *     (first byte position is the register address)
	 */
	l_byteStreamBuffer_rgXui8[0] = f_startRegisterAddr_ui8 | 0b10000000;
	for(l_bufCtr_ui8=0; l_bufCtr_ui8 < f_numOfBytes_ui32; l_bufCtr_ui8++)
    ba5c:	e55b3009 	ldrb	r3, [fp, #-9]
    ba60:	e2833001 	add	r3, r3, #1
    ba64:	e54b3009 	strb	r3, [fp, #-9]
    ba68:	e55b2009 	ldrb	r2, [fp, #-9]
    ba6c:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    ba70:	e1520003 	cmp	r2, r3
    ba74:	3affffed 	bcc	ba30 <l_writeI2cByteStream_bl+0x6c>
	{
		l_byteStreamBuffer_rgXui8[l_bufCtr_ui8+1] = f_byteStreamToWrite_pui8[l_bufCtr_ui8];
	}

	//write register to I2C
	if ( g_lldI2c_WriteI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, l_byteStreamBuffer_rgXui8, f_numOfBytes_ui32 + 1) != M_HAL_ACCMAG_SUCCESS_BL )
    ba78:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    ba7c:	e2833001 	add	r3, r3, #1
    ba80:	e24b2018 	sub	r2, fp, #24
    ba84:	e3a0001e 	mov	r0, #30
    ba88:	e1a01002 	mov	r1, r2
    ba8c:	e1a02003 	mov	r2, r3
    ba90:	eb000532 	bl	cf60 <g_lldI2c_WriteI2c_bl>
    ba94:	e1a03000 	mov	r3, r0
    ba98:	e3530000 	cmp	r3, #0
    ba9c:	0a000001 	beq	baa8 <l_writeI2cByteStream_bl+0xe4>
	{
		// error in I2C access
		l_writeSucceeded_bl = M_HAL_ACCMAG_FAILED_BL;
    baa0:	e3a03001 	mov	r3, #1
    baa4:	e50b3008 	str	r3, [fp, #-8]
	}

	return l_writeSucceeded_bl;
    baa8:	e51b3008 	ldr	r3, [fp, #-8]
}
    baac:	e1a00003 	mov	r0, r3
    bab0:	e24bd004 	sub	sp, fp, #4
    bab4:	e8bd8800 	pop	{fp, pc}

0000bab8 <l_twoCompOf16Bit_ui16>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline signed short l_twoCompOf16Bit_ui16( unsigned char f_lsb_ui8, unsigned char f_msb_ui8 )
{
    bab8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    babc:	e28db000 	add	fp, sp, #0
    bac0:	e24dd014 	sub	sp, sp, #20
    bac4:	e1a02000 	mov	r2, r0
    bac8:	e1a03001 	mov	r3, r1
    bacc:	e54b200d 	strb	r2, [fp, #-13]
    bad0:	e54b300e 	strb	r3, [fp, #-14]
	signed short	l_compOfTwo_ui16 = 0; //init variable with zeros
    bad4:	e3a03000 	mov	r3, #0
    bad8:	e14b30b6 	strh	r3, [fp, #-6]
	 * 2. invert 16bit
	 * 3. add 1 to 16bit value
	 * 4. mask only 16bit range (to avoid overflows)
	 * --> conversion of two's complement
	 */
	l_compOfTwo_ui16 = (signed short)( ( ~((int)(f_msb_ui8 << 8) + (int)(f_lsb_ui8)) + (int)1 ) & (int)0xFFFF );
    badc:	e55b300e 	ldrb	r3, [fp, #-14]
    bae0:	e6ff3073 	uxth	r3, r3
    bae4:	e1a03403 	lsl	r3, r3, #8
    bae8:	e6ff2073 	uxth	r2, r3
    baec:	e55b300d 	ldrb	r3, [fp, #-13]
    baf0:	e6ff3073 	uxth	r3, r3
    baf4:	e0823003 	add	r3, r2, r3
    baf8:	e6ff3073 	uxth	r3, r3
    bafc:	e2633000 	rsb	r3, r3, #0
    bb00:	e6ff3073 	uxth	r3, r3
    bb04:	e14b30b6 	strh	r3, [fp, #-6]

	return l_compOfTwo_ui16;
    bb08:	e15b30b6 	ldrh	r3, [fp, #-6]
    bb0c:	e6bf3073 	sxth	r3, r3
}
    bb10:	e1a00003 	mov	r0, r3
    bb14:	e24bd000 	sub	sp, fp, #0
    bb18:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    bb1c:	e12fff1e 	bx	lr

0000bb20 <l_convertMagRawToSIUnit_f64>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline double l_convertMagRawToSIUnit_f64( signed short f_rawMagVal_i16, unsigned char f_scalingValueGauss_ui8 )
{
    bb20:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    bb24:	e28db000 	add	fp, sp, #0
    bb28:	e24dd01c 	sub	sp, sp, #28
    bb2c:	e1a02000 	mov	r2, r0
    bb30:	e1a03001 	mov	r3, r1
    bb34:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
    bb38:	e54b3017 	strb	r3, [fp, #-23]
	double			l_outputValue_f64 = 0;
    bb3c:	e3a02000 	mov	r2, #0
    bb40:	e3a03000 	mov	r3, #0
    bb44:	e14b20fc 	strd	r2, [fp, #-12]
	const double	l_gaussToSI_f64 = 0.1E-3;	//1Gauss = 0.1mT = 0.1*10^(-3)T
    bb48:	e59f2060 	ldr	r2, [pc, #96]	; bbb0 <l_convertMagRawToSIUnit_f64+0x90>
    bb4c:	e59f3060 	ldr	r3, [pc, #96]	; bbb4 <l_convertMagRawToSIUnit_f64+0x94>
    bb50:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

	// unitless [-1,1]
	l_outputValue_f64 = (double)f_rawMagVal_i16 / (double)SHRT_MAX;
    bb54:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
    bb58:	ee053a90 	vmov	s11, r3
    bb5c:	eeb86be5 	vcvt.f64.s32	d6, s11
    bb60:	ed9f7b10 	vldr	d7, [pc, #64]	; bba8 <l_convertMagRawToSIUnit_f64+0x88>
    bb64:	ee867b07 	vdiv.f64	d7, d6, d7
    bb68:	ed0b7b03 	vstr	d7, [fp, #-12]

	// Units: 1 * T*Gauss^(-1) * Gauss = m*s^(-2)
	l_outputValue_f64 = l_outputValue_f64 * l_gaussToSI_f64 * (double)f_scalingValueGauss_ui8;
    bb6c:	ed1b6b03 	vldr	d6, [fp, #-12]
    bb70:	ed1b7b05 	vldr	d7, [fp, #-20]	; 0xffffffec
    bb74:	ee266b07 	vmul.f64	d6, d6, d7
    bb78:	e55b3017 	ldrb	r3, [fp, #-23]
    bb7c:	ee053a90 	vmov	s11, r3
    bb80:	eeb87b65 	vcvt.f64.u32	d7, s11
    bb84:	ee267b07 	vmul.f64	d7, d6, d7
    bb88:	ed0b7b03 	vstr	d7, [fp, #-12]

	return l_outputValue_f64;	//Tesla
    bb8c:	e14b20dc 	ldrd	r2, [fp, #-12]
    bb90:	ec432b17 	vmov	d7, r2, r3
}
    bb94:	eeb00b47 	vmov.f64	d0, d7
    bb98:	e24bd000 	sub	sp, fp, #0
    bb9c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    bba0:	e12fff1e 	bx	lr
    bba4:	e1a00000 	nop			; (mov r0, r0)
    bba8:	00000000 	.word	0x00000000
    bbac:	40dfffc0 	.word	0x40dfffc0
    bbb0:	eb1c432d 	.word	0xeb1c432d
    bbb4:	3f1a36e2 	.word	0x3f1a36e2

0000bbb8 <l_convertAccRawToSIUnit_f64>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline double l_convertAccRawToSIUnit_f64( signed short f_rawAccVal_i16, unsigned char f_scalingValueG_ui8 )
{
    bbb8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    bbbc:	e28db000 	add	fp, sp, #0
    bbc0:	e24dd01c 	sub	sp, sp, #28
    bbc4:	e1a02000 	mov	r2, r0
    bbc8:	e1a03001 	mov	r3, r1
    bbcc:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
    bbd0:	e54b3017 	strb	r3, [fp, #-23]
	double			l_outputValue_f64 	= 0;
    bbd4:	e3a02000 	mov	r2, #0
    bbd8:	e3a03000 	mov	r3, #0
    bbdc:	e14b20fc 	strd	r2, [fp, #-12]
	const double	l_gravityConst_f64 	= 9.81; // m*(s^-2) per G
    bbe0:	e59f2060 	ldr	r2, [pc, #96]	; bc48 <l_convertAccRawToSIUnit_f64+0x90>
    bbe4:	e59f3060 	ldr	r3, [pc, #96]	; bc4c <l_convertAccRawToSIUnit_f64+0x94>
    bbe8:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

	// unitless [-1,1]
	l_outputValue_f64 = (double)f_scalingValueG_ui8 * (double)f_rawAccVal_i16 / (double)SHRT_MAX;
    bbec:	e55b3017 	ldrb	r3, [fp, #-23]
    bbf0:	ee053a90 	vmov	s11, r3
    bbf4:	eeb86b65 	vcvt.f64.u32	d6, s11
    bbf8:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
    bbfc:	ee053a90 	vmov	s11, r3
    bc00:	eeb87be5 	vcvt.f64.s32	d7, s11
    bc04:	ee266b07 	vmul.f64	d6, d6, d7
    bc08:	ed9f7b0c 	vldr	d7, [pc, #48]	; bc40 <l_convertAccRawToSIUnit_f64+0x88>
    bc0c:	ee867b07 	vdiv.f64	d7, d6, d7
    bc10:	ed0b7b03 	vstr	d7, [fp, #-12]

	// Units: 1 * m*s^(-2)*G^(-1) * G = m*s^(-2)
	l_outputValue_f64 = l_outputValue_f64 * l_gravityConst_f64;
    bc14:	ed1b6b03 	vldr	d6, [fp, #-12]
    bc18:	ed1b7b05 	vldr	d7, [fp, #-20]	; 0xffffffec
    bc1c:	ee267b07 	vmul.f64	d7, d6, d7
    bc20:	ed0b7b03 	vstr	d7, [fp, #-12]

	return l_outputValue_f64;  // m*(s^-2)
    bc24:	e14b20dc 	ldrd	r2, [fp, #-12]
    bc28:	ec432b17 	vmov	d7, r2, r3
}
    bc2c:	eeb00b47 	vmov.f64	d0, d7
    bc30:	e24bd000 	sub	sp, fp, #0
    bc34:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    bc38:	e12fff1e 	bx	lr
    bc3c:	e1a00000 	nop			; (mov r0, r0)
    bc40:	00000000 	.word	0x00000000
    bc44:	40dfffc0 	.word	0x40dfffc0
    bc48:	51eb851f 	.word	0x51eb851f
    bc4c:	40239eb8 	.word	0x40239eb8

0000bc50 <l_updateSensorState_vd>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline unsigned int l_updateSensorState_vd( halAccmag_sensorSelect f_sensor_en )
{
    bc50:	e92d4800 	push	{fp, lr}
    bc54:	e28db004 	add	fp, sp, #4
    bc58:	e24dd048 	sub	sp, sp, #72	; 0x48
    bc5c:	e50b0048 	str	r0, [fp, #-72]	; 0x48
	halAccmag_3dDoubleVector	l_accBuffer_st;
	halAccmag_3dDoubleVector	l_magBuffer_st;
	unsigned char				l_readBuffer_rg6ui8[6];
	signed short				l_tempComponent_i16 = 0;
    bc60:	e3a03000 	mov	r3, #0
    bc64:	e14b30ba 	strh	r3, [fp, #-10]
	unsigned int				l_successState_bl = M_HAL_ACCMAG_SUCCESS_BL;
    bc68:	e3a03000 	mov	r3, #0
    bc6c:	e50b3008 	str	r3, [fp, #-8]

	//init local data buffers with current values
	l_accBuffer_st = m_halAccmag_sensorState_st.acc;
    bc70:	e59f3238 	ldr	r3, [pc, #568]	; beb0 <l_updateSensorState_vd+0x260>
    bc74:	e24bc024 	sub	ip, fp, #36	; 0x24
    bc78:	e1a0e003 	mov	lr, r3
    bc7c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    bc80:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    bc84:	e89e0003 	ldm	lr, {r0, r1}
    bc88:	e88c0003 	stm	ip, {r0, r1}
	l_magBuffer_st = m_halAccmag_sensorState_st.mag;
    bc8c:	e59f321c 	ldr	r3, [pc, #540]	; beb0 <l_updateSensorState_vd+0x260>
    bc90:	e24bc03c 	sub	ip, fp, #60	; 0x3c
    bc94:	e283e018 	add	lr, r3, #24
    bc98:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    bc9c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    bca0:	e89e0003 	ldm	lr, {r0, r1}
    bca4:	e88c0003 	stm	ip, {r0, r1}
	 *   (Byte 3) Y-Component, LSB
	 *   (Byte 4) Y-Component, MSB
	 *   (Byte 5) Z-Component, LSB
	 *   (Byte 6) Z-Component, MSB
	 */
	if ( (f_sensor_en == SENSOR_ACC_EN) || (f_sensor_en == SENSOR_BOTH_EN) )
    bca8:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    bcac:	e3530000 	cmp	r3, #0
    bcb0:	0a000002 	beq	bcc0 <l_updateSensorState_vd+0x70>
    bcb4:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    bcb8:	e3530002 	cmp	r3, #2
    bcbc:	1a000031 	bne	bd88 <l_updateSensorState_vd+0x138>
	{
		if ( l_readI2cByteStream_bl(M_HAL_ACCMAG_OUT_X_L_A_UI8,l_readBuffer_rg6ui8, 6) == M_HAL_ACCMAG_SUCCESS_BL )
    bcc0:	e24b3044 	sub	r3, fp, #68	; 0x44
    bcc4:	e3a00028 	mov	r0, #40	; 0x28
    bcc8:	e1a01003 	mov	r1, r3
    bccc:	e3a02006 	mov	r2, #6
    bcd0:	ebffff11 	bl	b91c <l_readI2cByteStream_bl>
    bcd4:	e1a03000 	mov	r3, r0
    bcd8:	e3530000 	cmp	r3, #0
    bcdc:	1a000027 	bne	bd80 <l_updateSensorState_vd+0x130>
		{
			// x-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[0], l_readBuffer_rg6ui8[1]);
    bce0:	e55b2044 	ldrb	r2, [fp, #-68]	; 0x44
    bce4:	e55b3043 	ldrb	r3, [fp, #-67]	; 0x43
    bce8:	e1a00002 	mov	r0, r2
    bcec:	e1a01003 	mov	r1, r3
    bcf0:	ebffff70 	bl	bab8 <l_twoCompOf16Bit_ui16>
    bcf4:	e1a03000 	mov	r3, r0
    bcf8:	e14b30ba 	strh	r3, [fp, #-10]
			l_accBuffer_st.x_f64 = l_convertAccRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_ACCSCALE_UI8 );
    bcfc:	e15b30fa 	ldrsh	r3, [fp, #-10]
    bd00:	e1a00003 	mov	r0, r3
    bd04:	e3a01008 	mov	r1, #8
    bd08:	ebffffaa 	bl	bbb8 <l_convertAccRawToSIUnit_f64>
    bd0c:	eeb07b40 	vmov.f64	d7, d0
    bd10:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc

			// y-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[2], l_readBuffer_rg6ui8[3]);
    bd14:	e55b2042 	ldrb	r2, [fp, #-66]	; 0x42
    bd18:	e55b3041 	ldrb	r3, [fp, #-65]	; 0x41
    bd1c:	e1a00002 	mov	r0, r2
    bd20:	e1a01003 	mov	r1, r3
    bd24:	ebffff63 	bl	bab8 <l_twoCompOf16Bit_ui16>
    bd28:	e1a03000 	mov	r3, r0
    bd2c:	e14b30ba 	strh	r3, [fp, #-10]
			l_accBuffer_st.y_f64 = l_convertAccRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_ACCSCALE_UI8 );
    bd30:	e15b30fa 	ldrsh	r3, [fp, #-10]
    bd34:	e1a00003 	mov	r0, r3
    bd38:	e3a01008 	mov	r1, #8
    bd3c:	ebffff9d 	bl	bbb8 <l_convertAccRawToSIUnit_f64>
    bd40:	eeb07b40 	vmov.f64	d7, d0
    bd44:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4

			// z-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[4], l_readBuffer_rg6ui8[5]);
    bd48:	e55b2040 	ldrb	r2, [fp, #-64]	; 0x40
    bd4c:	e55b303f 	ldrb	r3, [fp, #-63]	; 0x3f
    bd50:	e1a00002 	mov	r0, r2
    bd54:	e1a01003 	mov	r1, r3
    bd58:	ebffff56 	bl	bab8 <l_twoCompOf16Bit_ui16>
    bd5c:	e1a03000 	mov	r3, r0
    bd60:	e14b30ba 	strh	r3, [fp, #-10]
			l_accBuffer_st.z_f64 = l_convertAccRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_ACCSCALE_UI8 );
    bd64:	e15b30fa 	ldrsh	r3, [fp, #-10]
    bd68:	e1a00003 	mov	r0, r3
    bd6c:	e3a01008 	mov	r1, #8
    bd70:	ebffff90 	bl	bbb8 <l_convertAccRawToSIUnit_f64>
    bd74:	eeb07b40 	vmov.f64	d7, d0
    bd78:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
    bd7c:	ea000001 	b	bd88 <l_updateSensorState_vd+0x138>
		}else{
			l_successState_bl = M_HAL_ACCMAG_FAILED_BL;
    bd80:	e3a03001 	mov	r3, #1
    bd84:	e50b3008 	str	r3, [fp, #-8]
	 *   (Byte 3) Y-Component, LSB
	 *   (Byte 4) Y-Component, MSB
	 *   (Byte 5) Z-Component, LSB
	 *   (Byte 6) Z-Component, MSB
	 */
	if ( (f_sensor_en == SENSOR_MAG_EN) || (f_sensor_en == SENSOR_BOTH_EN) )
    bd88:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    bd8c:	e3530001 	cmp	r3, #1
    bd90:	0a000002 	beq	bda0 <l_updateSensorState_vd+0x150>
    bd94:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    bd98:	e3530002 	cmp	r3, #2
    bd9c:	1a000031 	bne	be68 <l_updateSensorState_vd+0x218>
	{
		if ( l_readI2cByteStream_bl(M_HAL_ACCMAG_OUT_X_L_M_UI8,l_readBuffer_rg6ui8, 6) == M_HAL_ACCMAG_SUCCESS_BL )
    bda0:	e24b3044 	sub	r3, fp, #68	; 0x44
    bda4:	e3a00008 	mov	r0, #8
    bda8:	e1a01003 	mov	r1, r3
    bdac:	e3a02006 	mov	r2, #6
    bdb0:	ebfffed9 	bl	b91c <l_readI2cByteStream_bl>
    bdb4:	e1a03000 	mov	r3, r0
    bdb8:	e3530000 	cmp	r3, #0
    bdbc:	1a000027 	bne	be60 <l_updateSensorState_vd+0x210>
		{
			// x-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[0], l_readBuffer_rg6ui8[1]);
    bdc0:	e55b2044 	ldrb	r2, [fp, #-68]	; 0x44
    bdc4:	e55b3043 	ldrb	r3, [fp, #-67]	; 0x43
    bdc8:	e1a00002 	mov	r0, r2
    bdcc:	e1a01003 	mov	r1, r3
    bdd0:	ebffff38 	bl	bab8 <l_twoCompOf16Bit_ui16>
    bdd4:	e1a03000 	mov	r3, r0
    bdd8:	e14b30ba 	strh	r3, [fp, #-10]
			l_magBuffer_st.x_f64 = l_convertMagRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_MAGSCALE_UI8 );
    bddc:	e15b30fa 	ldrsh	r3, [fp, #-10]
    bde0:	e1a00003 	mov	r0, r3
    bde4:	e3a01004 	mov	r1, #4
    bde8:	ebffff4c 	bl	bb20 <l_convertMagRawToSIUnit_f64>
    bdec:	eeb07b40 	vmov.f64	d7, d0
    bdf0:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4

			// y-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[2], l_readBuffer_rg6ui8[3]);
    bdf4:	e55b2042 	ldrb	r2, [fp, #-66]	; 0x42
    bdf8:	e55b3041 	ldrb	r3, [fp, #-65]	; 0x41
    bdfc:	e1a00002 	mov	r0, r2
    be00:	e1a01003 	mov	r1, r3
    be04:	ebffff2b 	bl	bab8 <l_twoCompOf16Bit_ui16>
    be08:	e1a03000 	mov	r3, r0
    be0c:	e14b30ba 	strh	r3, [fp, #-10]
			l_magBuffer_st.y_f64 = l_convertMagRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_MAGSCALE_UI8 );
    be10:	e15b30fa 	ldrsh	r3, [fp, #-10]
    be14:	e1a00003 	mov	r0, r3
    be18:	e3a01004 	mov	r1, #4
    be1c:	ebffff3f 	bl	bb20 <l_convertMagRawToSIUnit_f64>
    be20:	eeb07b40 	vmov.f64	d7, d0
    be24:	ed0b7b0d 	vstr	d7, [fp, #-52]	; 0xffffffcc

			// z-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[4], l_readBuffer_rg6ui8[5]);
    be28:	e55b2040 	ldrb	r2, [fp, #-64]	; 0x40
    be2c:	e55b303f 	ldrb	r3, [fp, #-63]	; 0x3f
    be30:	e1a00002 	mov	r0, r2
    be34:	e1a01003 	mov	r1, r3
    be38:	ebffff1e 	bl	bab8 <l_twoCompOf16Bit_ui16>
    be3c:	e1a03000 	mov	r3, r0
    be40:	e14b30ba 	strh	r3, [fp, #-10]
			l_magBuffer_st.z_f64 = l_convertMagRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_MAGSCALE_UI8 );
    be44:	e15b30fa 	ldrsh	r3, [fp, #-10]
    be48:	e1a00003 	mov	r0, r3
    be4c:	e3a01004 	mov	r1, #4
    be50:	ebffff32 	bl	bb20 <l_convertMagRawToSIUnit_f64>
    be54:	eeb07b40 	vmov.f64	d7, d0
    be58:	ed0b7b0b 	vstr	d7, [fp, #-44]	; 0xffffffd4
    be5c:	ea000001 	b	be68 <l_updateSensorState_vd+0x218>
		}else{
			l_successState_bl = M_HAL_ACCMAG_FAILED_BL;
    be60:	e3a03001 	mov	r3, #1
    be64:	e50b3008 	str	r3, [fp, #-8]
		}
	}

	// update sensor state storage values
	m_halAccmag_sensorState_st.acc = l_accBuffer_st;
    be68:	e59f3040 	ldr	r3, [pc, #64]	; beb0 <l_updateSensorState_vd+0x260>
    be6c:	e1a0c003 	mov	ip, r3
    be70:	e24be024 	sub	lr, fp, #36	; 0x24
    be74:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    be78:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    be7c:	e89e0003 	ldm	lr, {r0, r1}
    be80:	e88c0003 	stm	ip, {r0, r1}
	m_halAccmag_sensorState_st.mag = l_magBuffer_st;
    be84:	e59f3024 	ldr	r3, [pc, #36]	; beb0 <l_updateSensorState_vd+0x260>
    be88:	e283c018 	add	ip, r3, #24
    be8c:	e24be03c 	sub	lr, fp, #60	; 0x3c
    be90:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    be94:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    be98:	e89e0003 	ldm	lr, {r0, r1}
    be9c:	e88c0003 	stm	ip, {r0, r1}

	return l_successState_bl;
    bea0:	e51b3008 	ldr	r3, [fp, #-8]
}
    bea4:	e1a00003 	mov	r0, r3
    bea8:	e24bd004 	sub	sp, fp, #4
    beac:	e8bd8800 	pop	{fp, pc}
    beb0:	00019710 	.word	0x00019710

0000beb4 <g_halAccmag_initSensor_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_initSensor_bl(void)
{
    beb4:	e92d4800 	push	{fp, lr}
    beb8:	e28db004 	add	fp, sp, #4
    bebc:	e24dd008 	sub	sp, sp, #8
	unsigned char l_configRegisters_rg8ui8[8];	//buffer for 8 control register bytes

	//Identify sensor
	if ( l_readI2cByte_ui8( M_HAL_ACCMAG_WHO_AM_I_UI8 ) != M_HAL_ACCMAG_WHO_AM_I_PATTERN_UI8 )
    bec0:	e3a0000f 	mov	r0, #15
    bec4:	ebfffe6f 	bl	b888 <l_readI2cByte_ui8>
    bec8:	e1a03000 	mov	r3, r0
    becc:	e3530049 	cmp	r3, #73	; 0x49
    bed0:	0a000001 	beq	bedc <g_halAccmag_initSensor_bl+0x28>
	{
		// sensor could not be identified --> abort initialization
		return M_HAL_ACCMAG_FAILED_BL;
    bed4:	e3a03001 	mov	r3, #1
    bed8:	ea00001a 	b	bf48 <g_halAccmag_initSensor_bl+0x94>

	/*
	 * ACCELEROMETER
	 */
	// CTRL0: no FIFO (default values)
	l_configRegisters_rg8ui8[0] = 0b00000000;
    bedc:	e3a03000 	mov	r3, #0
    bee0:	e54b300c 	strb	r3, [fp, #-12]

	// CTRL1: Enable accelerometer, 800Hz sampling
	l_configRegisters_rg8ui8[1] = (		M_HAL_ACCMAG_CTRL1_MASK_AXEN_UI8
    bee4:	e3e03068 	mvn	r3, #104	; 0x68
    bee8:	e54b300b 	strb	r3, [fp, #-11]
			| 	M_HAL_ACCMAG_CTRL1_MASK_AYEN_UI8
			|	M_HAL_ACCMAG_CTRL1_MASK_AZEN_UI8
			| 	M_HAL_ACCMAG_CTRL1_MASK_ACC_RATE_800HZ_UI8);

	// CTRL2 register (default values): Set scale +/-8G (accelerometer) & Anti-Alias-Filter ~200Hz
	l_configRegisters_rg8ui8[2] = ( 	M_HAL_ACCMAG_CTRL2_MASK_ACC_SCALE_8G_UI8
    beec:	e3a03058 	mov	r3, #88	; 0x58
    bef0:	e54b300a 	strb	r3, [fp, #-10]
									| 	M_HAL_ACCMAG_CTRL2_MASK_ACC_BANDWIDTH_194HZ_UI8 );

	// CTRL3 register (default values): Disable all interrupts
	l_configRegisters_rg8ui8[3] = 0b00000000;
    bef4:	e3a03000 	mov	r3, #0
    bef8:	e54b3009 	strb	r3, [fp, #-9]

	//CTRL4 register (default values)
	l_configRegisters_rg8ui8[4] = 0b00000000;
    befc:	e3a03000 	mov	r3, #0
    bf00:	e54b3008 	strb	r3, [fp, #-8]

	/*
	 * MAGNETOMETER
	 */
	// CTRL5 register: Disable Temp.-sensor, set high-resolution, set 100Hz data rate
	l_configRegisters_rg8ui8[5] = (		M_HAL_ACCMAG_CTRL5_MASK_MAG_RES_HIGH_UI8
    bf04:	e3a03074 	mov	r3, #116	; 0x74
    bf08:	e54b3007 	strb	r3, [fp, #-7]
			| 	M_HAL_ACCMAG_CTRL5_MASK_MAG_RATE_100HZ_UI8 );

	// CTRL6 register: set scale +/-0.4mT
	l_configRegisters_rg8ui8[6] = M_HAL_ACCMAG_CTRL6_MASK_MAG_SCALE_4GAUSS_UI8;
    bf0c:	e3a03040 	mov	r3, #64	; 0x40
    bf10:	e54b3006 	strb	r3, [fp, #-6]

	// CTRL7 register (default values): set continuous-conversion mode (magnetometer)
	l_configRegisters_rg8ui8[7] = M_HAL_ACCMAG_CTRL7_MASK_MAG_SENSMODE_CONTINOUS_UI8;
    bf14:	e3a03000 	mov	r3, #0
    bf18:	e54b3005 	strb	r3, [fp, #-5]


	// send config
	if ( l_writeI2cByteStream_bl(M_HAL_ACCMAG_CTRL0_UI8, l_configRegisters_rg8ui8, sizeof(l_configRegisters_rg8ui8) ) == M_HAL_ACCMAG_FAILED_BL )
    bf1c:	e24b300c 	sub	r3, fp, #12
    bf20:	e3a0001f 	mov	r0, #31
    bf24:	e1a01003 	mov	r1, r3
    bf28:	e3a02008 	mov	r2, #8
    bf2c:	ebfffea4 	bl	b9c4 <l_writeI2cByteStream_bl>
    bf30:	e1a03000 	mov	r3, r0
    bf34:	e3530001 	cmp	r3, #1
    bf38:	1a000001 	bne	bf44 <g_halAccmag_initSensor_bl+0x90>
	{
		// setting register CTRL1 failed
		return M_HAL_ACCMAG_FAILED_BL;
    bf3c:	e3a03001 	mov	r3, #1
    bf40:	ea000000 	b	bf48 <g_halAccmag_initSensor_bl+0x94>
	}

	return M_HAL_ACCMAG_SUCCESS_BL;
    bf44:	e3a03000 	mov	r3, #0
}
    bf48:	e1a00003 	mov	r0, r3
    bf4c:	e24bd004 	sub	sp, fp, #4
    bf50:	e8bd8800 	pop	{fp, pc}

0000bf54 <g_halAccmag_triggerAccUpdate_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_triggerAccUpdate_bl( void )
{
    bf54:	e92d4800 	push	{fp, lr}
    bf58:	e28db004 	add	fp, sp, #4
	return l_updateSensorState_vd(SENSOR_ACC_EN);
    bf5c:	e3a00000 	mov	r0, #0
    bf60:	ebffff3a 	bl	bc50 <l_updateSensorState_vd>
    bf64:	e1a03000 	mov	r3, r0
}
    bf68:	e1a00003 	mov	r0, r3
    bf6c:	e8bd8800 	pop	{fp, pc}

0000bf70 <g_halAccmag_triggerMagUpdate_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_triggerMagUpdate_bl( void )
{
    bf70:	e92d4800 	push	{fp, lr}
    bf74:	e28db004 	add	fp, sp, #4
	return l_updateSensorState_vd(SENSOR_MAG_EN);
    bf78:	e3a00001 	mov	r0, #1
    bf7c:	ebffff33 	bl	bc50 <l_updateSensorState_vd>
    bf80:	e1a03000 	mov	r3, r0
}
    bf84:	e1a00003 	mov	r0, r3
    bf88:	e8bd8800 	pop	{fp, pc}

0000bf8c <g_halAccmag_triggerFullUpdate_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_triggerFullUpdate_bl( void )
{
    bf8c:	e92d4800 	push	{fp, lr}
    bf90:	e28db004 	add	fp, sp, #4
	return l_updateSensorState_vd(SENSOR_BOTH_EN);
    bf94:	e3a00002 	mov	r0, #2
    bf98:	ebffff2c 	bl	bc50 <l_updateSensorState_vd>
    bf9c:	e1a03000 	mov	r3, r0
}
    bfa0:	e1a00003 	mov	r0, r3
    bfa4:	e8bd8800 	pop	{fp, pc}

0000bfa8 <g_halAccmag_getAccVector_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halAccmag_3dDoubleVector g_halAccmag_getAccVector_st( void )
{
    bfa8:	e92d4830 	push	{r4, r5, fp, lr}
    bfac:	e28db00c 	add	fp, sp, #12
    bfb0:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_halAccmag_sensorState_st.acc;
    bfb4:	e59f3040 	ldr	r3, [pc, #64]	; bffc <g_halAccmag_getAccVector_st+0x54>
    bfb8:	e24bc024 	sub	ip, fp, #36	; 0x24
    bfbc:	e1a0e003 	mov	lr, r3
    bfc0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    bfc4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    bfc8:	e89e0003 	ldm	lr, {r0, r1}
    bfcc:	e88c0003 	stm	ip, {r0, r1}
    bfd0:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    bfd4:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    bfd8:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    bfdc:	ec454b15 	vmov	d5, r4, r5
    bfe0:	ec410b16 	vmov	d6, r0, r1
    bfe4:	ec432b17 	vmov	d7, r2, r3
}
    bfe8:	eeb00b45 	vmov.f64	d0, d5
    bfec:	eeb01b46 	vmov.f64	d1, d6
    bff0:	eeb02b47 	vmov.f64	d2, d7
    bff4:	e24bd00c 	sub	sp, fp, #12
    bff8:	e8bd8830 	pop	{r4, r5, fp, pc}
    bffc:	00019710 	.word	0x00019710

0000c000 <g_halAccmag_getMagVector_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halAccmag_3dDoubleVector g_halAccmag_getMagVector_st( void )
{
    c000:	e92d4830 	push	{r4, r5, fp, lr}
    c004:	e28db00c 	add	fp, sp, #12
    c008:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_halAccmag_sensorState_st.mag;
    c00c:	e59f3040 	ldr	r3, [pc, #64]	; c054 <g_halAccmag_getMagVector_st+0x54>
    c010:	e24bc024 	sub	ip, fp, #36	; 0x24
    c014:	e283e018 	add	lr, r3, #24
    c018:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    c01c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    c020:	e89e0003 	ldm	lr, {r0, r1}
    c024:	e88c0003 	stm	ip, {r0, r1}
    c028:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    c02c:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    c030:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    c034:	ec454b15 	vmov	d5, r4, r5
    c038:	ec410b16 	vmov	d6, r0, r1
    c03c:	ec432b17 	vmov	d7, r2, r3
}
    c040:	eeb00b45 	vmov.f64	d0, d5
    c044:	eeb01b46 	vmov.f64	d1, d6
    c048:	eeb02b47 	vmov.f64	d2, d7
    c04c:	e24bd00c 	sub	sp, fp, #12
    c050:	e8bd8830 	pop	{r4, r5, fp, pc}
    c054:	00019710 	.word	0x00019710

0000c058 <g_halAccmag_getAccMagContainer_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halAccmag_dataContainer	g_halAccmag_getAccMagContainer_st( void )
{
    c058:	e92d4800 	push	{fp, lr}
    c05c:	e28db004 	add	fp, sp, #4
    c060:	e24dd008 	sub	sp, sp, #8
    c064:	e50b0008 	str	r0, [fp, #-8]
	return m_halAccmag_sensorState_st;
    c068:	e51b2008 	ldr	r2, [fp, #-8]
    c06c:	e59f3028 	ldr	r3, [pc, #40]	; c09c <g_halAccmag_getAccMagContainer_st+0x44>
    c070:	e1a0c002 	mov	ip, r2
    c074:	e1a0e003 	mov	lr, r3
    c078:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    c07c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    c080:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    c084:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    c088:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
    c08c:	e88c000f 	stm	ip, {r0, r1, r2, r3}
}
    c090:	e51b0008 	ldr	r0, [fp, #-8]
    c094:	e24bd004 	sub	sp, fp, #4
    c098:	e8bd8800 	pop	{fp, pc}
    c09c:	00019710 	.word	0x00019710

0000c0a0 <g_halBaro_initBaro_i32>:
 * 2015/05/19 juscgs00:
 * - removed unused local variable 'l_ReadBuffer_ui8' (compiler warning)
 * \endinternal
 ********************************************************************** */
int g_halBaro_initBaro_i32(void)
{
    c0a0:	e92d4800 	push	{fp, lr}
    c0a4:	e28db004 	add	fp, sp, #4
	static unsigned char l_WriteBuffer_ui8[3];

	//RES_CONF(0x10)
	l_WriteBuffer_ui8[0]=M_HAL_BARO_SINGLE_FLAG_UI8 | M_HAL_BARO_RES_CONF_UI8;
    c0a8:	e59f3090 	ldr	r3, [pc, #144]	; c140 <g_halBaro_initBaro_i32+0xa0>
    c0ac:	e3a02010 	mov	r2, #16
    c0b0:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]= M_HAL_BARO_TEMP_RES_CONF_128_UI8 | M_HAL_BARO_PRES_RES_CONF_512_UI8;
    c0b4:	e59f3084 	ldr	r3, [pc, #132]	; c140 <g_halBaro_initBaro_i32+0xa0>
    c0b8:	e3a0207a 	mov	r2, #122	; 0x7a
    c0bc:	e5c32001 	strb	r2, [r3, #1]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
    c0c0:	e3a0005c 	mov	r0, #92	; 0x5c
    c0c4:	e59f1074 	ldr	r1, [pc, #116]	; c140 <g_halBaro_initBaro_i32+0xa0>
    c0c8:	e3a02002 	mov	r2, #2
    c0cc:	eb0003a3 	bl	cf60 <g_lldI2c_WriteI2c_bl>
    c0d0:	e1a03000 	mov	r3, r0
    c0d4:	e3530000 	cmp	r3, #0
    c0d8:	0a000001 	beq	c0e4 <g_halBaro_initBaro_i32+0x44>
	{return -1;}
    c0dc:	e3e03000 	mvn	r3, #0
    c0e0:	ea000014 	b	c138 <g_halBaro_initBaro_i32+0x98>

	usleep(100000);
    c0e4:	e59f0058 	ldr	r0, [pc, #88]	; c144 <g_halBaro_initBaro_i32+0xa4>
    c0e8:	ebfff22a 	bl	8998 <_init+0x98>

	//CTRL_REG1(0x20) = 0b11000100		setting Speed of Pressure to 25Hz and Temperature to 1Hz
										//REMARK: setting both Sensors to the same value did not work!!!
	//CTRL_REG2(0x21) = 0b10000000
	l_WriteBuffer_ui8[0]=M_HAL_BARO_MULTIPLE_FLAG_UI8 | M_HAL_BARO_CTRL_REG1_UI8;
    c0ec:	e59f304c 	ldr	r3, [pc, #76]	; c140 <g_halBaro_initBaro_i32+0xa0>
    c0f0:	e3e0205f 	mvn	r2, #95	; 0x5f
    c0f4:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]=M_HAL_BARO_CTRL_REG1_PD_UI8|M_HAL_BARO_CTRL_REG1_DATARATE_P25HZ_T1HZ_UI8;
    c0f8:	e59f3040 	ldr	r3, [pc, #64]	; c140 <g_halBaro_initBaro_i32+0xa0>
    c0fc:	e3e0203f 	mvn	r2, #63	; 0x3f
    c100:	e5c32001 	strb	r2, [r3, #1]
	l_WriteBuffer_ui8[2]=M_HAL_BARO_CTRL_REG2_BOOT_UI8;
    c104:	e59f3034 	ldr	r3, [pc, #52]	; c140 <g_halBaro_initBaro_i32+0xa0>
    c108:	e3e0207f 	mvn	r2, #127	; 0x7f
    c10c:	e5c32002 	strb	r2, [r3, #2]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
    c110:	e3a0005c 	mov	r0, #92	; 0x5c
    c114:	e59f1024 	ldr	r1, [pc, #36]	; c140 <g_halBaro_initBaro_i32+0xa0>
    c118:	e3a02003 	mov	r2, #3
    c11c:	eb00038f 	bl	cf60 <g_lldI2c_WriteI2c_bl>
    c120:	e1a03000 	mov	r3, r0
    c124:	e3530000 	cmp	r3, #0
    c128:	0a000001 	beq	c134 <g_halBaro_initBaro_i32+0x94>
	{return -1;}
    c12c:	e3e03000 	mvn	r3, #0
    c130:	ea000000 	b	c138 <g_halBaro_initBaro_i32+0x98>

	return 0;
    c134:	e3a03000 	mov	r3, #0
}
    c138:	e1a00003 	mov	r0, r3
    c13c:	e8bd8800 	pop	{fp, pc}
    c140:	00019750 	.word	0x00019750
    c144:	000186a0 	.word	0x000186a0

0000c148 <g_halBaro_getPressure_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halBaro_getPressure_f64(void)
{
    c148:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    c14c:	e28db000 	add	fp, sp, #0
	return m_pressure_f64;
    c150:	e59f3014 	ldr	r3, [pc, #20]	; c16c <g_halBaro_getPressure_f64+0x24>
    c154:	e1c320d0 	ldrd	r2, [r3]
    c158:	ec432b17 	vmov	d7, r2, r3
}
    c15c:	eeb00b47 	vmov.f64	d0, d7
    c160:	e24bd000 	sub	sp, fp, #0
    c164:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    c168:	e12fff1e 	bx	lr
    c16c:	00019748 	.word	0x00019748

0000c170 <g_halBaro_getTemperature_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halBaro_getTemperature_f64(void)
{
    c170:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    c174:	e28db000 	add	fp, sp, #0
	return m_temperature_f64;
    c178:	e59f3014 	ldr	r3, [pc, #20]	; c194 <g_halBaro_getTemperature_f64+0x24>
    c17c:	e1c320d0 	ldrd	r2, [r3]
    c180:	ec432b17 	vmov	d7, r2, r3
}
    c184:	eeb00b47 	vmov.f64	d0, d7
    c188:	e24bd000 	sub	sp, fp, #0
    c18c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    c190:	e12fff1e 	bx	lr
    c194:	00019740 	.word	0x00019740

0000c198 <g_halBaro_readPressureFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halBaro_readPressureFromI2C_i32(void)
{
    c198:	e92d4800 	push	{fp, lr}
    c19c:	e28db004 	add	fp, sp, #4
    c1a0:	e24dd010 	sub	sp, sp, #16
	unsigned char l_ReadBuffer_ui8[3]={0,0,0};
    c1a4:	e3a03000 	mov	r3, #0
    c1a8:	e54b300c 	strb	r3, [fp, #-12]
    c1ac:	e3a03000 	mov	r3, #0
    c1b0:	e54b300b 	strb	r3, [fp, #-11]
    c1b4:	e3a03000 	mov	r3, #0
    c1b8:	e54b300a 	strb	r3, [fp, #-10]
	unsigned char l_rotatedReadBuffer_ui8[3]={0,0,0};
    c1bc:	e3a03000 	mov	r3, #0
    c1c0:	e54b3010 	strb	r3, [fp, #-16]
    c1c4:	e3a03000 	mov	r3, #0
    c1c8:	e54b300f 	strb	r3, [fp, #-15]
    c1cc:	e3a03000 	mov	r3, #0
    c1d0:	e54b300e 	strb	r3, [fp, #-14]
	unsigned char l_WriteBuffer_ui8[3];
	int l_countVariable_i32=0;
    c1d4:	e3a03000 	mov	r3, #0
    c1d8:	e50b3008 	str	r3, [fp, #-8]

	//maybe check STATUS_REG if new value is available

	//set SUB Address to Pressure register PRESS_OUT_XL and activate multiple read
	l_WriteBuffer_ui8[0]=M_HAL_BARO_MULTIPLE_FLAG_UI8 | M_HAL_BARO_PRESS_OUT_XL_UI8;
    c1dc:	e3e03057 	mvn	r3, #87	; 0x57
    c1e0:	e54b3014 	strb	r3, [fp, #-20]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    c1e4:	e24b3014 	sub	r3, fp, #20
    c1e8:	e3a0005c 	mov	r0, #92	; 0x5c
    c1ec:	e1a01003 	mov	r1, r3
    c1f0:	e3a02001 	mov	r2, #1
    c1f4:	eb000359 	bl	cf60 <g_lldI2c_WriteI2c_bl>
    c1f8:	e1a03000 	mov	r3, r0
    c1fc:	e3530000 	cmp	r3, #0
    c200:	0a000001 	beq	c20c <g_halBaro_readPressureFromI2C_i32+0x74>
	{return -1;}
    c204:	e3e03000 	mvn	r3, #0
    c208:	ea00002f 	b	c2cc <g_halBaro_readPressureFromI2C_i32+0x134>


	//Read from PRESS_OUT_XL(0x28),PRESS_OUT_L(0x29),PRESS_OUT_H(0x2A)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
    c20c:	e24b300c 	sub	r3, fp, #12
    c210:	e3a0005c 	mov	r0, #92	; 0x5c
    c214:	e1a01003 	mov	r1, r3
    c218:	e3a02003 	mov	r2, #3
    c21c:	eb000387 	bl	d040 <g_lldI2c_ReadI2c_bl>
    c220:	e1a03000 	mov	r3, r0
    c224:	e3530000 	cmp	r3, #0
    c228:	0a000001 	beq	c234 <g_halBaro_readPressureFromI2C_i32+0x9c>
	{return -1;}
    c22c:	e3e03000 	mvn	r3, #0
    c230:	ea000025 	b	c2cc <g_halBaro_readPressureFromI2C_i32+0x134>
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<3;l_countVariable_i32++)
    c234:	e3a03000 	mov	r3, #0
    c238:	e50b3008 	str	r3, [fp, #-8]
    c23c:	ea00000f 	b	c280 <g_halBaro_readPressureFromI2C_i32+0xe8>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[2-l_countVariable_i32];
    c240:	e51b3008 	ldr	r3, [fp, #-8]
    c244:	e2632002 	rsb	r2, r3, #2
    c248:	e3e03007 	mvn	r3, #7
    c24c:	e24b0004 	sub	r0, fp, #4
    c250:	e0802002 	add	r2, r0, r2
    c254:	e0823003 	add	r3, r2, r3
    c258:	e5d32000 	ldrb	r2, [r3]
    c25c:	e3e0300b 	mvn	r3, #11
    c260:	e51b1008 	ldr	r1, [fp, #-8]
    c264:	e24b0004 	sub	r0, fp, #4
    c268:	e0801001 	add	r1, r0, r1
    c26c:	e0813003 	add	r3, r1, r3
    c270:	e5c32000 	strb	r2, [r3]
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
	{return -1;}
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<3;l_countVariable_i32++)
    c274:	e51b3008 	ldr	r3, [fp, #-8]
    c278:	e2833001 	add	r3, r3, #1
    c27c:	e50b3008 	str	r3, [fp, #-8]
    c280:	e51b3008 	ldr	r3, [fp, #-8]
    c284:	e3530002 	cmp	r3, #2
    c288:	daffffec 	ble	c240 <g_halBaro_readPressureFromI2C_i32+0xa8>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[2-l_countVariable_i32];
		}

		m_pressure_f64=(double)g_halLib_twoComplement2Int(l_rotatedReadBuffer_ui8,3);
    c28c:	e24b3010 	sub	r3, fp, #16
    c290:	e1a00003 	mov	r0, r3
    c294:	e3a01003 	mov	r1, #3
    c298:	eb000184 	bl	c8b0 <g_halLib_twoComplement2Int>
    c29c:	e1a03000 	mov	r3, r0
    c2a0:	ee063a90 	vmov	s13, r3
    c2a4:	eeb87be6 	vcvt.f64.s32	d7, s13
    c2a8:	e59f3030 	ldr	r3, [pc, #48]	; c2e0 <g_halBaro_readPressureFromI2C_i32+0x148>
    c2ac:	ed837b00 	vstr	d7, [r3]
		m_pressure_f64=m_pressure_f64/4096;
    c2b0:	e59f3028 	ldr	r3, [pc, #40]	; c2e0 <g_halBaro_readPressureFromI2C_i32+0x148>
    c2b4:	ed936b00 	vldr	d6, [r3]
    c2b8:	ed9f7b06 	vldr	d7, [pc, #24]	; c2d8 <g_halBaro_readPressureFromI2C_i32+0x140>
    c2bc:	ee867b07 	vdiv.f64	d7, d6, d7
    c2c0:	e59f3018 	ldr	r3, [pc, #24]	; c2e0 <g_halBaro_readPressureFromI2C_i32+0x148>
    c2c4:	ed837b00 	vstr	d7, [r3]
	}

	return 0;
    c2c8:	e3a03000 	mov	r3, #0
}
    c2cc:	e1a00003 	mov	r0, r3
    c2d0:	e24bd004 	sub	sp, fp, #4
    c2d4:	e8bd8800 	pop	{fp, pc}
    c2d8:	00000000 	.word	0x00000000
    c2dc:	40b00000 	.word	0x40b00000
    c2e0:	00019748 	.word	0x00019748

0000c2e4 <g_halBaro_readTemperatureFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halBaro_readTemperatureFromI2C_i32(void)
{
    c2e4:	e92d4800 	push	{fp, lr}
    c2e8:	e28db004 	add	fp, sp, #4
    c2ec:	e24dd010 	sub	sp, sp, #16
	unsigned char l_ReadBuffer_ui8[2]={0,0};
    c2f0:	e3a03000 	mov	r3, #0
    c2f4:	e54b300c 	strb	r3, [fp, #-12]
    c2f8:	e3a03000 	mov	r3, #0
    c2fc:	e54b300b 	strb	r3, [fp, #-11]
	unsigned char l_rotatedReadBuffer_ui8[2]={0,0};
    c300:	e3a03000 	mov	r3, #0
    c304:	e54b3010 	strb	r3, [fp, #-16]
    c308:	e3a03000 	mov	r3, #0
    c30c:	e54b300f 	strb	r3, [fp, #-15]
	unsigned char l_WriteBuffer_ui8[3];
	int l_countVariable_i32=0;
    c310:	e3a03000 	mov	r3, #0
    c314:	e50b3008 	str	r3, [fp, #-8]

	//maybe check STATUS_REG if new value is available

	//set SUB Address to Temperature register PRESS_OUT_XL and activate multiple read
	l_WriteBuffer_ui8[0]=M_HAL_BARO_MULTIPLE_FLAG_UI8 | M_HAL_BARO_TEMP_OUT_L_UI8;
    c318:	e3e03054 	mvn	r3, #84	; 0x54
    c31c:	e54b3014 	strb	r3, [fp, #-20]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    c320:	e24b3014 	sub	r3, fp, #20
    c324:	e3a0005c 	mov	r0, #92	; 0x5c
    c328:	e1a01003 	mov	r1, r3
    c32c:	e3a02001 	mov	r2, #1
    c330:	eb00030a 	bl	cf60 <g_lldI2c_WriteI2c_bl>
    c334:	e1a03000 	mov	r3, r0
    c338:	e3530000 	cmp	r3, #0
    c33c:	0a000001 	beq	c348 <g_halBaro_readTemperatureFromI2C_i32+0x64>
	{return -1;}
    c340:	e3e03000 	mvn	r3, #0
    c344:	ea000031 	b	c410 <g_halBaro_readTemperatureFromI2C_i32+0x12c>


	//Read from TEMP_OUT_L (2Bh), TEMP_OUT_H (2Ch)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
    c348:	e24b300c 	sub	r3, fp, #12
    c34c:	e3a0005c 	mov	r0, #92	; 0x5c
    c350:	e1a01003 	mov	r1, r3
    c354:	e3a02002 	mov	r2, #2
    c358:	eb000338 	bl	d040 <g_lldI2c_ReadI2c_bl>
    c35c:	e1a03000 	mov	r3, r0
    c360:	e3530000 	cmp	r3, #0
    c364:	0a000001 	beq	c370 <g_halBaro_readTemperatureFromI2C_i32+0x8c>
	{return -1;}
    c368:	e3e03000 	mvn	r3, #0
    c36c:	ea000027 	b	c410 <g_halBaro_readTemperatureFromI2C_i32+0x12c>
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    c370:	e3a03000 	mov	r3, #0
    c374:	e50b3008 	str	r3, [fp, #-8]
    c378:	ea00000f 	b	c3bc <g_halBaro_readTemperatureFromI2C_i32+0xd8>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
    c37c:	e51b3008 	ldr	r3, [fp, #-8]
    c380:	e2632001 	rsb	r2, r3, #1
    c384:	e3e03007 	mvn	r3, #7
    c388:	e24b0004 	sub	r0, fp, #4
    c38c:	e0802002 	add	r2, r0, r2
    c390:	e0823003 	add	r3, r2, r3
    c394:	e5d32000 	ldrb	r2, [r3]
    c398:	e3e0300b 	mvn	r3, #11
    c39c:	e51b1008 	ldr	r1, [fp, #-8]
    c3a0:	e24b0004 	sub	r0, fp, #4
    c3a4:	e0801001 	add	r1, r0, r1
    c3a8:	e0813003 	add	r3, r1, r3
    c3ac:	e5c32000 	strb	r2, [r3]
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
	{return -1;}
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    c3b0:	e51b3008 	ldr	r3, [fp, #-8]
    c3b4:	e2833001 	add	r3, r3, #1
    c3b8:	e50b3008 	str	r3, [fp, #-8]
    c3bc:	e51b3008 	ldr	r3, [fp, #-8]
    c3c0:	e3530001 	cmp	r3, #1
    c3c4:	daffffec 	ble	c37c <g_halBaro_readTemperatureFromI2C_i32+0x98>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
		}

		m_temperature_f64=(double)g_halLib_twoComplement2Int(l_rotatedReadBuffer_ui8,2);
    c3c8:	e24b3010 	sub	r3, fp, #16
    c3cc:	e1a00003 	mov	r0, r3
    c3d0:	e3a01002 	mov	r1, #2
    c3d4:	eb000135 	bl	c8b0 <g_halLib_twoComplement2Int>
    c3d8:	e1a03000 	mov	r3, r0
    c3dc:	ee063a90 	vmov	s13, r3
    c3e0:	eeb87be6 	vcvt.f64.s32	d7, s13
    c3e4:	e59f3044 	ldr	r3, [pc, #68]	; c430 <g_halBaro_readTemperatureFromI2C_i32+0x14c>
    c3e8:	ed837b00 	vstr	d7, [r3]
		m_temperature_f64=42.5+m_temperature_f64/480;
    c3ec:	e59f303c 	ldr	r3, [pc, #60]	; c430 <g_halBaro_readTemperatureFromI2C_i32+0x14c>
    c3f0:	ed936b00 	vldr	d6, [r3]
    c3f4:	ed9f7b09 	vldr	d7, [pc, #36]	; c420 <g_halBaro_readTemperatureFromI2C_i32+0x13c>
    c3f8:	ee866b07 	vdiv.f64	d6, d6, d7
    c3fc:	ed9f7b09 	vldr	d7, [pc, #36]	; c428 <g_halBaro_readTemperatureFromI2C_i32+0x144>
    c400:	ee367b07 	vadd.f64	d7, d6, d7
    c404:	e59f3024 	ldr	r3, [pc, #36]	; c430 <g_halBaro_readTemperatureFromI2C_i32+0x14c>
    c408:	ed837b00 	vstr	d7, [r3]
	}

	return 0;
    c40c:	e3a03000 	mov	r3, #0
}
    c410:	e1a00003 	mov	r0, r3
    c414:	e24bd004 	sub	sp, fp, #4
    c418:	e8bd8800 	pop	{fp, pc}
    c41c:	e1a00000 	nop			; (mov r0, r0)
    c420:	00000000 	.word	0x00000000
    c424:	407e0000 	.word	0x407e0000
    c428:	00000000 	.word	0x00000000
    c42c:	40454000 	.word	0x40454000
    c430:	00019740 	.word	0x00019740
    c434:	e1a00000 	nop			; (mov r0, r0)

0000c438 <g_halGyro_initGyro_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGyro_initGyro_i32(void)
{
    c438:	e92d4800 	push	{fp, lr}
    c43c:	e28db004 	add	fp, sp, #4

	//Bypass mode -> maybe Dynamic Stream if enough bandwidth on I2C is left

	//CTRL1 (20h)= 0b11101111 ODR=800Hz Cut-Off frequency=not used
	//CTRL2 (21h)= 0b00100000 HPF=normal mode; Cut-Off frequency=56Hz
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_MULTIPLE_READ_FLAG_UI8 | M_HAL_GYRO_CTRL1_UI8;
    c440:	e59f3090 	ldr	r3, [pc, #144]	; c4d8 <g_halGyro_initGyro_i32+0xa0>
    c444:	e3e0205f 	mvn	r2, #95	; 0x5f
    c448:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]=M_HAL_GYRO_CTRL1_DR0_DR1_UI8 | M_HAL_GYRO_CTRL1_BW1_UI8 | M_HAL_GYRO_CTRL1_NORMAL_UI8;
    c44c:	e59f3084 	ldr	r3, [pc, #132]	; c4d8 <g_halGyro_initGyro_i32+0xa0>
    c450:	e3e02010 	mvn	r2, #16
    c454:	e5c32001 	strb	r2, [r3, #1]
	l_WriteBuffer_ui8[2]=M_HAL_GYRO_CTRL2_HPF_NORMAL_MODE_UI8;
    c458:	e59f3078 	ldr	r3, [pc, #120]	; c4d8 <g_halGyro_initGyro_i32+0xa0>
    c45c:	e3a02020 	mov	r2, #32
    c460:	e5c32002 	strb	r2, [r3, #2]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
    c464:	e3a0006a 	mov	r0, #106	; 0x6a
    c468:	e59f1068 	ldr	r1, [pc, #104]	; c4d8 <g_halGyro_initGyro_i32+0xa0>
    c46c:	e3a02003 	mov	r2, #3
    c470:	eb0002ba 	bl	cf60 <g_lldI2c_WriteI2c_bl>
    c474:	e1a03000 	mov	r3, r0
    c478:	e3530000 	cmp	r3, #0
    c47c:	0a000001 	beq	c488 <g_halGyro_initGyro_i32+0x50>
	{return -1;}
    c480:	e3e03000 	mvn	r3, #0
    c484:	ea000011 	b	c4d0 <g_halGyro_initGyro_i32+0x98>

	usleep(100000);
    c488:	e59f004c 	ldr	r0, [pc, #76]	; c4dc <g_halGyro_initGyro_i32+0xa4>
    c48c:	ebfff141 	bl	8998 <_init+0x98>

	//CTRL4 (23h)= 0b00010000
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_SINGLE_READ_FLAG_UI8 | M_HAL_GYRO_CTRL4_UI8;
    c490:	e59f3040 	ldr	r3, [pc, #64]	; c4d8 <g_halGyro_initGyro_i32+0xa0>
    c494:	e3a02023 	mov	r2, #35	; 0x23
    c498:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]=M_HAL_GYRO_CTRL4_SCALE_500DPS_UI8;
    c49c:	e59f3034 	ldr	r3, [pc, #52]	; c4d8 <g_halGyro_initGyro_i32+0xa0>
    c4a0:	e3a02010 	mov	r2, #16
    c4a4:	e5c32001 	strb	r2, [r3, #1]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
    c4a8:	e3a0006a 	mov	r0, #106	; 0x6a
    c4ac:	e59f1024 	ldr	r1, [pc, #36]	; c4d8 <g_halGyro_initGyro_i32+0xa0>
    c4b0:	e3a02002 	mov	r2, #2
    c4b4:	eb0002a9 	bl	cf60 <g_lldI2c_WriteI2c_bl>
    c4b8:	e1a03000 	mov	r3, r0
    c4bc:	e3530000 	cmp	r3, #0
    c4c0:	0a000001 	beq	c4cc <g_halGyro_initGyro_i32+0x94>
	{return -1;}
    c4c4:	e3e03000 	mvn	r3, #0
    c4c8:	ea000000 	b	c4d0 <g_halGyro_initGyro_i32+0x98>

	return 0;
    c4cc:	e3a03000 	mov	r3, #0
}
    c4d0:	e1a00003 	mov	r0, r3
    c4d4:	e8bd8800 	pop	{fp, pc}
    c4d8:	00019778 	.word	0x00019778
    c4dc:	000186a0 	.word	0x000186a0

0000c4e0 <g_halGyro_getGyroscope_st>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
sigOri_orientationAngles g_halGyro_getGyroscope_st(void)
{
    c4e0:	e92d4830 	push	{r4, r5, fp, lr}
    c4e4:	e28db00c 	add	fp, sp, #12
    c4e8:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_rotation_str;
    c4ec:	e59f3040 	ldr	r3, [pc, #64]	; c534 <g_halGyro_getGyroscope_st+0x54>
    c4f0:	e24bc024 	sub	ip, fp, #36	; 0x24
    c4f4:	e1a0e003 	mov	lr, r3
    c4f8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    c4fc:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    c500:	e89e0003 	ldm	lr, {r0, r1}
    c504:	e88c0003 	stm	ip, {r0, r1}
    c508:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    c50c:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    c510:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    c514:	ec454b15 	vmov	d5, r4, r5
    c518:	ec410b16 	vmov	d6, r0, r1
    c51c:	ec432b17 	vmov	d7, r2, r3
}
    c520:	eeb00b45 	vmov.f64	d0, d5
    c524:	eeb01b46 	vmov.f64	d1, d6
    c528:	eeb02b47 	vmov.f64	d2, d7
    c52c:	e24bd00c 	sub	sp, fp, #12
    c530:	e8bd8830 	pop	{r4, r5, fp, pc}
    c534:	00019758 	.word	0x00019758

0000c538 <g_halGyro_getTemperature_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGyro_getTemperature_f64(void)
{
    c538:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    c53c:	e28db000 	add	fp, sp, #0
	return m_halGyro_temperature_f64;
    c540:	e59f3014 	ldr	r3, [pc, #20]	; c55c <g_halGyro_getTemperature_f64+0x24>
    c544:	e1c320d0 	ldrd	r2, [r3]
    c548:	ec432b17 	vmov	d7, r2, r3
}
    c54c:	eeb00b47 	vmov.f64	d0, d7
    c550:	e24bd000 	sub	sp, fp, #0
    c554:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    c558:	e12fff1e 	bx	lr
    c55c:	00019770 	.word	0x00019770

0000c560 <g_halGyro_readGyroscopeFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGyro_readGyroscopeFromI2C_i32(void)
{
    c560:	e92d4800 	push	{fp, lr}
    c564:	e28db004 	add	fp, sp, #4
    c568:	e24dd040 	sub	sp, sp, #64	; 0x40
	unsigned char l_ReadBuffer_ui8[6]={0,0,0,0,0,0};
    c56c:	e3a03000 	mov	r3, #0
    c570:	e54b3034 	strb	r3, [fp, #-52]	; 0x34
    c574:	e3a03000 	mov	r3, #0
    c578:	e54b3033 	strb	r3, [fp, #-51]	; 0x33
    c57c:	e3a03000 	mov	r3, #0
    c580:	e54b3032 	strb	r3, [fp, #-50]	; 0x32
    c584:	e3a03000 	mov	r3, #0
    c588:	e54b3031 	strb	r3, [fp, #-49]	; 0x31
    c58c:	e3a03000 	mov	r3, #0
    c590:	e54b3030 	strb	r3, [fp, #-48]	; 0x30
    c594:	e3a03000 	mov	r3, #0
    c598:	e54b302f 	strb	r3, [fp, #-47]	; 0x2f
	unsigned char l_xRegister_ui8[2]={0,0};
    c59c:	e3a03000 	mov	r3, #0
    c5a0:	e54b3038 	strb	r3, [fp, #-56]	; 0x38
    c5a4:	e3a03000 	mov	r3, #0
    c5a8:	e54b3037 	strb	r3, [fp, #-55]	; 0x37
	unsigned char l_yRegister_ui8[2]={0,0};
    c5ac:	e3a03000 	mov	r3, #0
    c5b0:	e54b303c 	strb	r3, [fp, #-60]	; 0x3c
    c5b4:	e3a03000 	mov	r3, #0
    c5b8:	e54b303b 	strb	r3, [fp, #-59]	; 0x3b
	unsigned char l_zRegister_ui8[2]={0,0};
    c5bc:	e3a03000 	mov	r3, #0
    c5c0:	e54b3040 	strb	r3, [fp, #-64]	; 0x40
    c5c4:	e3a03000 	mov	r3, #0
    c5c8:	e54b303f 	strb	r3, [fp, #-63]	; 0x3f
	double l_xValue_ui8=0;
    c5cc:	e3a02000 	mov	r2, #0
    c5d0:	e3a03000 	mov	r3, #0
    c5d4:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	double l_yValue_ui8=0;
    c5d8:	e3a02000 	mov	r2, #0
    c5dc:	e3a03000 	mov	r3, #0
    c5e0:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	double l_zValue_ui8=0;
    c5e4:	e3a02000 	mov	r2, #0
    c5e8:	e3a03000 	mov	r3, #0
    c5ec:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	unsigned char l_WriteBuffer_ui8[3];
	int l_countVariable_i32=0;
    c5f0:	e3a03000 	mov	r3, #0
    c5f4:	e50b3008 	str	r3, [fp, #-8]
	//500dps in init set
	double l_factorRaw2Out_f64=(double)500.0/32767.0;
    c5f8:	e59f21e0 	ldr	r2, [pc, #480]	; c7e0 <g_halGyro_readGyroscopeFromI2C_i32+0x280>
    c5fc:	e59f31e0 	ldr	r3, [pc, #480]	; c7e4 <g_halGyro_readGyroscopeFromI2C_i32+0x284>
    c600:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4


	//maybe check if new value is available; STATUS (27h) -->ZYXDA

	//set SUB Address to X register OUT_X_L and activate multiple read
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_MULTIPLE_READ_FLAG_UI8 | M_HAL_GYRO_OUT_X_L_UI8;
    c604:	e3e03057 	mvn	r3, #87	; 0x57
    c608:	e54b3044 	strb	r3, [fp, #-68]	; 0x44
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    c60c:	e24b3044 	sub	r3, fp, #68	; 0x44
    c610:	e3a0006a 	mov	r0, #106	; 0x6a
    c614:	e1a01003 	mov	r1, r3
    c618:	e3a02001 	mov	r2, #1
    c61c:	eb00024f 	bl	cf60 <g_lldI2c_WriteI2c_bl>
    c620:	e1a03000 	mov	r3, r0
    c624:	e3530000 	cmp	r3, #0
    c628:	0a000001 	beq	c634 <g_halGyro_readGyroscopeFromI2C_i32+0xd4>
	{return -1;}
    c62c:	e3e03000 	mvn	r3, #0
    c630:	ea000067 	b	c7d4 <g_halGyro_readGyroscopeFromI2C_i32+0x274>

	//Read from OUT_X_L (28h), OUT_X_H (29h), OUT_Y_L (2Ah), OUT_Y_H (2Bh), OUT_Z_L (2Ch), OUT_Z_H (2Dh)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_SIX_UI8)!=0)
    c634:	e24b3034 	sub	r3, fp, #52	; 0x34
    c638:	e3a0006a 	mov	r0, #106	; 0x6a
    c63c:	e1a01003 	mov	r1, r3
    c640:	e3a02006 	mov	r2, #6
    c644:	eb00027d 	bl	d040 <g_lldI2c_ReadI2c_bl>
    c648:	e1a03000 	mov	r3, r0
    c64c:	e3530000 	cmp	r3, #0
    c650:	0a000001 	beq	c65c <g_halGyro_readGyroscopeFromI2C_i32+0xfc>
	{return -1;}
    c654:	e3e03000 	mvn	r3, #0
    c658:	ea00005d 	b	c7d4 <g_halGyro_readGyroscopeFromI2C_i32+0x274>
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    c65c:	e3a03000 	mov	r3, #0
    c660:	e50b3008 	str	r3, [fp, #-8]
    c664:	ea000029 	b	c710 <g_halGyro_readGyroscopeFromI2C_i32+0x1b0>
		{
			l_xRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
    c668:	e51b3008 	ldr	r3, [fp, #-8]
    c66c:	e2632001 	rsb	r2, r3, #1
    c670:	e3e0302f 	mvn	r3, #47	; 0x2f
    c674:	e24b0004 	sub	r0, fp, #4
    c678:	e0802002 	add	r2, r0, r2
    c67c:	e0823003 	add	r3, r2, r3
    c680:	e5d32000 	ldrb	r2, [r3]
    c684:	e3e03033 	mvn	r3, #51	; 0x33
    c688:	e51b1008 	ldr	r1, [fp, #-8]
    c68c:	e24b0004 	sub	r0, fp, #4
    c690:	e0801001 	add	r1, r0, r1
    c694:	e0813003 	add	r3, r1, r3
    c698:	e5c32000 	strb	r2, [r3]
			l_yRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[3-l_countVariable_i32];
    c69c:	e51b3008 	ldr	r3, [fp, #-8]
    c6a0:	e2632003 	rsb	r2, r3, #3
    c6a4:	e3e0302f 	mvn	r3, #47	; 0x2f
    c6a8:	e24b1004 	sub	r1, fp, #4
    c6ac:	e0812002 	add	r2, r1, r2
    c6b0:	e0823003 	add	r3, r2, r3
    c6b4:	e5d32000 	ldrb	r2, [r3]
    c6b8:	e3e03037 	mvn	r3, #55	; 0x37
    c6bc:	e51b1008 	ldr	r1, [fp, #-8]
    c6c0:	e24b0004 	sub	r0, fp, #4
    c6c4:	e0801001 	add	r1, r0, r1
    c6c8:	e0813003 	add	r3, r1, r3
    c6cc:	e5c32000 	strb	r2, [r3]
			l_zRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[5-l_countVariable_i32];
    c6d0:	e51b3008 	ldr	r3, [fp, #-8]
    c6d4:	e2632005 	rsb	r2, r3, #5
    c6d8:	e3e0302f 	mvn	r3, #47	; 0x2f
    c6dc:	e24b1004 	sub	r1, fp, #4
    c6e0:	e0812002 	add	r2, r1, r2
    c6e4:	e0823003 	add	r3, r2, r3
    c6e8:	e5d32000 	ldrb	r2, [r3]
    c6ec:	e3e0303b 	mvn	r3, #59	; 0x3b
    c6f0:	e51b1008 	ldr	r1, [fp, #-8]
    c6f4:	e24b0004 	sub	r0, fp, #4
    c6f8:	e0801001 	add	r1, r0, r1
    c6fc:	e0813003 	add	r3, r1, r3
    c700:	e5c32000 	strb	r2, [r3]
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_SIX_UI8)!=0)
	{return -1;}
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    c704:	e51b3008 	ldr	r3, [fp, #-8]
    c708:	e2833001 	add	r3, r3, #1
    c70c:	e50b3008 	str	r3, [fp, #-8]
    c710:	e51b3008 	ldr	r3, [fp, #-8]
    c714:	e3530001 	cmp	r3, #1
    c718:	daffffd2 	ble	c668 <g_halGyro_readGyroscopeFromI2C_i32+0x108>
			l_xRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
			l_yRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[3-l_countVariable_i32];
			l_zRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[5-l_countVariable_i32];
		}

		l_xValue_ui8=(double)g_halLib_twoComplement2Int(l_xRegister_ui8,2);
    c71c:	e24b3038 	sub	r3, fp, #56	; 0x38
    c720:	e1a00003 	mov	r0, r3
    c724:	e3a01002 	mov	r1, #2
    c728:	eb000060 	bl	c8b0 <g_halLib_twoComplement2Int>
    c72c:	e1a03000 	mov	r3, r0
    c730:	ee063a90 	vmov	s13, r3
    c734:	eeb87be6 	vcvt.f64.s32	d7, s13
    c738:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
		l_yValue_ui8=(double)g_halLib_twoComplement2Int(l_yRegister_ui8,2);
    c73c:	e24b303c 	sub	r3, fp, #60	; 0x3c
    c740:	e1a00003 	mov	r0, r3
    c744:	e3a01002 	mov	r1, #2
    c748:	eb000058 	bl	c8b0 <g_halLib_twoComplement2Int>
    c74c:	e1a03000 	mov	r3, r0
    c750:	ee063a90 	vmov	s13, r3
    c754:	eeb87be6 	vcvt.f64.s32	d7, s13
    c758:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4
		l_zValue_ui8=(double)g_halLib_twoComplement2Int(l_zRegister_ui8,2);
    c75c:	e24b3040 	sub	r3, fp, #64	; 0x40
    c760:	e1a00003 	mov	r0, r3
    c764:	e3a01002 	mov	r1, #2
    c768:	eb000050 	bl	c8b0 <g_halLib_twoComplement2Int>
    c76c:	e1a03000 	mov	r3, r0
    c770:	ee063a90 	vmov	s13, r3
    c774:	eeb87be6 	vcvt.f64.s32	d7, s13
    c778:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc

		l_xValue_ui8=l_xValue_ui8*l_factorRaw2Out_f64;
    c77c:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
    c780:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    c784:	ee267b07 	vmul.f64	d7, d6, d7
    c788:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
		l_yValue_ui8=l_yValue_ui8*l_factorRaw2Out_f64;
    c78c:	ed1b6b07 	vldr	d6, [fp, #-28]	; 0xffffffe4
    c790:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    c794:	ee267b07 	vmul.f64	d7, d6, d7
    c798:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4
		l_zValue_ui8=l_zValue_ui8*l_factorRaw2Out_f64;
    c79c:	ed1b6b09 	vldr	d6, [fp, #-36]	; 0xffffffdc
    c7a0:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    c7a4:	ee267b07 	vmul.f64	d7, d6, d7
    c7a8:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc

		m_rotation_str.roll_f64=l_xValue_ui8;
    c7ac:	e59f1034 	ldr	r1, [pc, #52]	; c7e8 <g_halGyro_readGyroscopeFromI2C_i32+0x288>
    c7b0:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    c7b4:	e1c120f0 	strd	r2, [r1]
		m_rotation_str.pitch_f64=l_yValue_ui8;
    c7b8:	e59f1028 	ldr	r1, [pc, #40]	; c7e8 <g_halGyro_readGyroscopeFromI2C_i32+0x288>
    c7bc:	e14b21dc 	ldrd	r2, [fp, #-28]	; 0xffffffe4
    c7c0:	e1c120f8 	strd	r2, [r1, #8]
		m_rotation_str.yaw_f64=l_zValue_ui8;
    c7c4:	e59f101c 	ldr	r1, [pc, #28]	; c7e8 <g_halGyro_readGyroscopeFromI2C_i32+0x288>
    c7c8:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
    c7cc:	e1c121f0 	strd	r2, [r1, #16]
	}

	return 0;
    c7d0:	e3a03000 	mov	r3, #0
}
    c7d4:	e1a00003 	mov	r0, r3
    c7d8:	e24bd004 	sub	sp, fp, #4
    c7dc:	e8bd8800 	pop	{fp, pc}
    c7e0:	807d00fa 	.word	0x807d00fa
    c7e4:	3f8f403e 	.word	0x3f8f403e
    c7e8:	00019758 	.word	0x00019758

0000c7ec <g_halGyro_readTemperatureFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGyro_readTemperatureFromI2C_i32(void)
{
    c7ec:	e92d4800 	push	{fp, lr}
    c7f0:	e28db004 	add	fp, sp, #4
    c7f4:	e24dd008 	sub	sp, sp, #8
	unsigned char l_ReadBuffer_ui8[2]={0,0};
    c7f8:	e3a03000 	mov	r3, #0
    c7fc:	e54b3008 	strb	r3, [fp, #-8]
    c800:	e3a03000 	mov	r3, #0
    c804:	e54b3007 	strb	r3, [fp, #-7]
	unsigned char l_WriteBuffer_ui8[3];

	//set SUB Address to OUT_TEMP register and activate single read
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_SINGLE_READ_FLAG_UI8 | M_HAL_GYRO_OUT_TEMP_UI8;
    c808:	e3a03026 	mov	r3, #38	; 0x26
    c80c:	e54b300c 	strb	r3, [fp, #-12]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    c810:	e24b300c 	sub	r3, fp, #12
    c814:	e3a0006a 	mov	r0, #106	; 0x6a
    c818:	e1a01003 	mov	r1, r3
    c81c:	e3a02001 	mov	r2, #1
    c820:	eb0001ce 	bl	cf60 <g_lldI2c_WriteI2c_bl>
    c824:	e1a03000 	mov	r3, r0
    c828:	e3530000 	cmp	r3, #0
    c82c:	0a000001 	beq	c838 <g_halGyro_readTemperatureFromI2C_i32+0x4c>
	{return -1;}
    c830:	e3e03000 	mvn	r3, #0
    c834:	ea000015 	b	c890 <g_halGyro_readTemperatureFromI2C_i32+0xa4>

	//Read from OUT_TEMP (26h)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    c838:	e24b3008 	sub	r3, fp, #8
    c83c:	e3a0006a 	mov	r0, #106	; 0x6a
    c840:	e1a01003 	mov	r1, r3
    c844:	e3a02001 	mov	r2, #1
    c848:	eb0001fc 	bl	d040 <g_lldI2c_ReadI2c_bl>
    c84c:	e1a03000 	mov	r3, r0
    c850:	e3530000 	cmp	r3, #0
    c854:	0a000001 	beq	c860 <g_halGyro_readTemperatureFromI2C_i32+0x74>
	{return -1;}
    c858:	e3e03000 	mvn	r3, #0
    c85c:	ea00000b 	b	c890 <g_halGyro_readTemperatureFromI2C_i32+0xa4>
	else
	{
		m_halGyro_temperature_f64=(double)(M_HAL_GYRO_TEMP_OFFSET_UI8)-(double)(g_halLib_twoComplement2Int(l_ReadBuffer_ui8,1));
    c860:	e24b3008 	sub	r3, fp, #8
    c864:	e1a00003 	mov	r0, r3
    c868:	e3a01001 	mov	r1, #1
    c86c:	eb00000f 	bl	c8b0 <g_halLib_twoComplement2Int>
    c870:	e1a03000 	mov	r3, r0
    c874:	ee063a90 	vmov	s13, r3
    c878:	eeb87be6 	vcvt.f64.s32	d7, s13
    c87c:	ed9f6b07 	vldr	d6, [pc, #28]	; c8a0 <g_halGyro_readTemperatureFromI2C_i32+0xb4>
    c880:	ee367b47 	vsub.f64	d7, d6, d7
    c884:	e59f301c 	ldr	r3, [pc, #28]	; c8a8 <g_halGyro_readTemperatureFromI2C_i32+0xbc>
    c888:	ed837b00 	vstr	d7, [r3]
	}

	return 0;
    c88c:	e3a03000 	mov	r3, #0
}
    c890:	e1a00003 	mov	r0, r3
    c894:	e24bd004 	sub	sp, fp, #4
    c898:	e8bd8800 	pop	{fp, pc}
    c89c:	e1a00000 	nop			; (mov r0, r0)
    c8a0:	00000000 	.word	0x00000000
    c8a4:	403b0000 	.word	0x403b0000
    c8a8:	00019770 	.word	0x00019770
    c8ac:	e1a00000 	nop			; (mov r0, r0)

0000c8b0 <g_halLib_twoComplement2Int>:
 */

#include "Hal_Lib.h"

int g_halLib_twoComplement2Int(unsigned char* f_buffer_ui8,unsigned int f_nrOfBytes_ui32)
{
    c8b0:	e92d4830 	push	{r4, r5, fp, lr}
    c8b4:	e28db00c 	add	fp, sp, #12
    c8b8:	e24dd020 	sub	sp, sp, #32
    c8bc:	e50b0028 	str	r0, [fp, #-40]	; 0x28
    c8c0:	e50b102c 	str	r1, [fp, #-44]	; 0x2c
    c8c4:	e1a0100d 	mov	r1, sp
    c8c8:	e1a0e001 	mov	lr, r1
	int l_countVariable_i32=0;
    c8cc:	e3a01000 	mov	r1, #0
    c8d0:	e50b1010 	str	r1, [fp, #-16]
	int l_result_i32=0;
    c8d4:	e3a01000 	mov	r1, #0
    c8d8:	e50b1014 	str	r1, [fp, #-20]
	unsigned char l_shift_ui8=0;
    c8dc:	e3a01000 	mov	r1, #0
    c8e0:	e54b1015 	strb	r1, [fp, #-21]
	unsigned int l_buffer_ui8[f_nrOfBytes_ui32];
    c8e4:	e51bc02c 	ldr	ip, [fp, #-44]	; 0x2c
    c8e8:	e1a0100c 	mov	r1, ip
    c8ec:	e2411001 	sub	r1, r1, #1
    c8f0:	e50b101c 	str	r1, [fp, #-28]
    c8f4:	e1a0000c 	mov	r0, ip
    c8f8:	e3a01000 	mov	r1, #0
    c8fc:	e1a05281 	lsl	r5, r1, #5
    c900:	e1855da0 	orr	r5, r5, r0, lsr #27
    c904:	e1a04280 	lsl	r4, r0, #5
    c908:	e1a0000c 	mov	r0, ip
    c90c:	e3a01000 	mov	r1, #0
    c910:	e1a03281 	lsl	r3, r1, #5
    c914:	e1833da0 	orr	r3, r3, r0, lsr #27
    c918:	e1a02280 	lsl	r2, r0, #5
    c91c:	e1a0310c 	lsl	r3, ip, #2
    c920:	e2833003 	add	r3, r3, #3
    c924:	e2833007 	add	r3, r3, #7
    c928:	e1a031a3 	lsr	r3, r3, #3
    c92c:	e1a03183 	lsl	r3, r3, #3
    c930:	e04dd003 	sub	sp, sp, r3
    c934:	e1a0300d 	mov	r3, sp
    c938:	e2833003 	add	r3, r3, #3
    c93c:	e1a03123 	lsr	r3, r3, #2
    c940:	e1a03103 	lsl	r3, r3, #2
    c944:	e50b3020 	str	r3, [fp, #-32]

	//copy Parameter buffer to local buffer
	for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    c948:	e3a03000 	mov	r3, #0
    c94c:	e50b3010 	str	r3, [fp, #-16]
    c950:	ea00000a 	b	c980 <g_halLib_twoComplement2Int+0xd0>
	{
		l_buffer_ui8[l_countVariable_i32]=*(f_buffer_ui8+l_countVariable_i32);
    c954:	e51b3010 	ldr	r3, [fp, #-16]
    c958:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    c95c:	e0823003 	add	r3, r2, r3
    c960:	e5d33000 	ldrb	r3, [r3]
    c964:	e1a01003 	mov	r1, r3
    c968:	e51b3020 	ldr	r3, [fp, #-32]
    c96c:	e51b2010 	ldr	r2, [fp, #-16]
    c970:	e7831102 	str	r1, [r3, r2, lsl #2]
	int l_result_i32=0;
	unsigned char l_shift_ui8=0;
	unsigned int l_buffer_ui8[f_nrOfBytes_ui32];

	//copy Parameter buffer to local buffer
	for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    c974:	e51b3010 	ldr	r3, [fp, #-16]
    c978:	e2833001 	add	r3, r3, #1
    c97c:	e50b3010 	str	r3, [fp, #-16]
    c980:	e51b2010 	ldr	r2, [fp, #-16]
    c984:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    c988:	e2433001 	sub	r3, r3, #1
    c98c:	e1520003 	cmp	r2, r3
    c990:	9affffef 	bls	c954 <g_halLib_twoComplement2Int+0xa4>
	{
		l_buffer_ui8[l_countVariable_i32]=*(f_buffer_ui8+l_countVariable_i32);
	}
//
	//if number is negative
	if ((l_buffer_ui8[0]& M_MASK_NEGATIVE_UI8)!=0)
    c994:	e51b3020 	ldr	r3, [fp, #-32]
    c998:	e5933000 	ldr	r3, [r3]
    c99c:	e2033080 	and	r3, r3, #128	; 0x80
    c9a0:	e3530000 	cmp	r3, #0
    c9a4:	0a000023 	beq	ca38 <g_halLib_twoComplement2Int+0x188>
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    c9a8:	e3a03000 	mov	r3, #0
    c9ac:	e50b3010 	str	r3, [fp, #-16]
    c9b0:	ea000014 	b	ca08 <g_halLib_twoComplement2Int+0x158>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
    c9b4:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    c9b8:	e6ef2073 	uxtb	r2, r3
    c9bc:	e51b3010 	ldr	r3, [fp, #-16]
    c9c0:	e6ef3073 	uxtb	r3, r3
    c9c4:	e0633002 	rsb	r3, r3, r2
    c9c8:	e6ef3073 	uxtb	r3, r3
    c9cc:	e2433001 	sub	r3, r3, #1
    c9d0:	e54b3015 	strb	r3, [fp, #-21]
			l_result_i32=l_result_i32+(((l_buffer_ui8[l_countVariable_i32])^255)<<(l_shift_ui8*8));
    c9d4:	e51b3020 	ldr	r3, [fp, #-32]
    c9d8:	e51b2010 	ldr	r2, [fp, #-16]
    c9dc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    c9e0:	e22320ff 	eor	r2, r3, #255	; 0xff
    c9e4:	e55b3015 	ldrb	r3, [fp, #-21]
    c9e8:	e1a03183 	lsl	r3, r3, #3
    c9ec:	e1a02312 	lsl	r2, r2, r3
    c9f0:	e51b3014 	ldr	r3, [fp, #-20]
    c9f4:	e0823003 	add	r3, r2, r3
    c9f8:	e50b3014 	str	r3, [fp, #-20]
	}
//
	//if number is negative
	if ((l_buffer_ui8[0]& M_MASK_NEGATIVE_UI8)!=0)
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    c9fc:	e51b3010 	ldr	r3, [fp, #-16]
    ca00:	e2833001 	add	r3, r3, #1
    ca04:	e50b3010 	str	r3, [fp, #-16]
    ca08:	e51b2010 	ldr	r2, [fp, #-16]
    ca0c:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    ca10:	e2433001 	sub	r3, r3, #1
    ca14:	e1520003 	cmp	r2, r3
    ca18:	9affffe5 	bls	c9b4 <g_halLib_twoComplement2Int+0x104>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
			l_result_i32=l_result_i32+(((l_buffer_ui8[l_countVariable_i32])^255)<<(l_shift_ui8*8));
		}
		l_result_i32=l_result_i32+1;
    ca1c:	e51b3014 	ldr	r3, [fp, #-20]
    ca20:	e2833001 	add	r3, r3, #1
    ca24:	e50b3014 	str	r3, [fp, #-20]
		l_result_i32=l_result_i32*-1;
    ca28:	e51b3014 	ldr	r3, [fp, #-20]
    ca2c:	e2633000 	rsb	r3, r3, #0
    ca30:	e50b3014 	str	r3, [fp, #-20]
    ca34:	ea00001b 	b	caa8 <g_halLib_twoComplement2Int+0x1f8>
	}
	else
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    ca38:	e3a03000 	mov	r3, #0
    ca3c:	e50b3010 	str	r3, [fp, #-16]
    ca40:	ea000013 	b	ca94 <g_halLib_twoComplement2Int+0x1e4>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
    ca44:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    ca48:	e6ef2073 	uxtb	r2, r3
    ca4c:	e51b3010 	ldr	r3, [fp, #-16]
    ca50:	e6ef3073 	uxtb	r3, r3
    ca54:	e0633002 	rsb	r3, r3, r2
    ca58:	e6ef3073 	uxtb	r3, r3
    ca5c:	e2433001 	sub	r3, r3, #1
    ca60:	e54b3015 	strb	r3, [fp, #-21]
			l_result_i32=l_result_i32+(l_buffer_ui8[l_countVariable_i32]<<l_shift_ui8*8);
    ca64:	e51b3020 	ldr	r3, [fp, #-32]
    ca68:	e51b2010 	ldr	r2, [fp, #-16]
    ca6c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
    ca70:	e55b3015 	ldrb	r3, [fp, #-21]
    ca74:	e1a03183 	lsl	r3, r3, #3
    ca78:	e1a02312 	lsl	r2, r2, r3
    ca7c:	e51b3014 	ldr	r3, [fp, #-20]
    ca80:	e0823003 	add	r3, r2, r3
    ca84:	e50b3014 	str	r3, [fp, #-20]
		l_result_i32=l_result_i32+1;
		l_result_i32=l_result_i32*-1;
	}
	else
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    ca88:	e51b3010 	ldr	r3, [fp, #-16]
    ca8c:	e2833001 	add	r3, r3, #1
    ca90:	e50b3010 	str	r3, [fp, #-16]
    ca94:	e51b2010 	ldr	r2, [fp, #-16]
    ca98:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    ca9c:	e2433001 	sub	r3, r3, #1
    caa0:	e1520003 	cmp	r2, r3
    caa4:	9affffe6 	bls	ca44 <g_halLib_twoComplement2Int+0x194>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
			l_result_i32=l_result_i32+(l_buffer_ui8[l_countVariable_i32]<<l_shift_ui8*8);
		}
	}
	return l_result_i32;
    caa8:	e51b3014 	ldr	r3, [fp, #-20]
    caac:	e1a0d00e 	mov	sp, lr
}
    cab0:	e1a00003 	mov	r0, r3
    cab4:	e24bd00c 	sub	sp, fp, #12
    cab8:	e8bd8830 	pop	{r4, r5, fp, pc}

0000cabc <g_halImu_getImuValues_str>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halImu_orientationValues g_halImu_getImuValues_str(void)
{
    cabc:	e92d4800 	push	{fp, lr}
    cac0:	e28db004 	add	fp, sp, #4
    cac4:	e24dd008 	sub	sp, sp, #8
    cac8:	e50b0008 	str	r0, [fp, #-8]
	return m_halImu_imuValues_st;
    cacc:	e51b2008 	ldr	r2, [fp, #-8]
    cad0:	e59f3024 	ldr	r3, [pc, #36]	; cafc <g_halImu_getImuValues_str+0x40>
    cad4:	e1a01002 	mov	r1, r2
    cad8:	e1a02003 	mov	r2, r3
    cadc:	e3a03058 	mov	r3, #88	; 0x58
    cae0:	e1a00001 	mov	r0, r1
    cae4:	e1a01002 	mov	r1, r2
    cae8:	e1a02003 	mov	r2, r3
    caec:	ebffefcd 	bl	8a28 <_init+0x128>
}
    caf0:	e51b0008 	ldr	r0, [fp, #-8]
    caf4:	e24bd004 	sub	sp, fp, #4
    caf8:	e8bd8800 	pop	{fp, pc}
    cafc:	00019780 	.word	0x00019780

0000cb00 <g_halImu_initImuSensors_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_initImuSensors_bl(void)
{
    cb00:	e92d4800 	push	{fp, lr}
    cb04:	e28db004 	add	fp, sp, #4
	// initialize Acceleration and electrical Compass chip
	if(g_halAccmag_initSensor_bl()!=0)
    cb08:	ebfffce9 	bl	beb4 <g_halAccmag_initSensor_bl>
    cb0c:	e1a03000 	mov	r3, r0
    cb10:	e3530000 	cmp	r3, #0
    cb14:	0a000001 	beq	cb20 <g_halImu_initImuSensors_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    cb18:	e3a03001 	mov	r3, #1
    cb1c:	ea00000c 	b	cb54 <g_halImu_initImuSensors_bl+0x54>

	// initialize Barometer chip
	if(g_halBaro_initBaro_i32()!=0)
    cb20:	ebfffd5e 	bl	c0a0 <g_halBaro_initBaro_i32>
    cb24:	e1a03000 	mov	r3, r0
    cb28:	e3530000 	cmp	r3, #0
    cb2c:	0a000001 	beq	cb38 <g_halImu_initImuSensors_bl+0x38>
	{return M_HAL_IMU_FAILED_BL;}
    cb30:	e3a03001 	mov	r3, #1
    cb34:	ea000006 	b	cb54 <g_halImu_initImuSensors_bl+0x54>

	// initialize Gyroscope chip
	if(g_halGyro_initGyro_i32()!=0)
    cb38:	ebfffe3e 	bl	c438 <g_halGyro_initGyro_i32>
    cb3c:	e1a03000 	mov	r3, r0
    cb40:	e3530000 	cmp	r3, #0
    cb44:	0a000001 	beq	cb50 <g_halImu_initImuSensors_bl+0x50>
	{return M_HAL_IMU_FAILED_BL;}
    cb48:	e3a03001 	mov	r3, #1
    cb4c:	ea000000 	b	cb54 <g_halImu_initImuSensors_bl+0x54>

	return M_HAL_IMU_SUCCESS_BL;
    cb50:	e3a03000 	mov	r3, #0
}
    cb54:	e1a00003 	mov	r0, r3
    cb58:	e8bd8800 	pop	{fp, pc}

0000cb5c <g_halImu_triggerBaroReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerBaroReading_bl(void)
{
    cb5c:	e92d4800 	push	{fp, lr}
    cb60:	e28db004 	add	fp, sp, #4
	if(g_halBaro_readPressureFromI2C_i32()!=0)
    cb64:	ebfffd8b 	bl	c198 <g_halBaro_readPressureFromI2C_i32>
    cb68:	e1a03000 	mov	r3, r0
    cb6c:	e3530000 	cmp	r3, #0
    cb70:	0a000001 	beq	cb7c <g_halImu_triggerBaroReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    cb74:	e3a03001 	mov	r3, #1
    cb78:	ea00000e 	b	cbb8 <g_halImu_triggerBaroReading_bl+0x5c>

	if(g_halBaro_readTemperatureFromI2C_i32()!=0)
    cb7c:	ebfffdd8 	bl	c2e4 <g_halBaro_readTemperatureFromI2C_i32>
    cb80:	e1a03000 	mov	r3, r0
    cb84:	e3530000 	cmp	r3, #0
    cb88:	0a000001 	beq	cb94 <g_halImu_triggerBaroReading_bl+0x38>
	{return M_HAL_IMU_FAILED_BL;}
    cb8c:	e3a03001 	mov	r3, #1
    cb90:	ea000008 	b	cbb8 <g_halImu_triggerBaroReading_bl+0x5c>

	m_halImu_imuValues_st.pressure_f64=g_halBaro_getPressure_f64();
    cb94:	ebfffd6b 	bl	c148 <g_halBaro_getPressure_f64>
    cb98:	eeb07b40 	vmov.f64	d7, d0
    cb9c:	e59f301c 	ldr	r3, [pc, #28]	; cbc0 <g_halImu_triggerBaroReading_bl+0x64>
    cba0:	ed837b14 	vstr	d7, [r3, #80]	; 0x50
	m_halImu_imuValues_st.temperature_f64=g_halBaro_getTemperature_f64();
    cba4:	ebfffd71 	bl	c170 <g_halBaro_getTemperature_f64>
    cba8:	eeb07b40 	vmov.f64	d7, d0
    cbac:	e59f300c 	ldr	r3, [pc, #12]	; cbc0 <g_halImu_triggerBaroReading_bl+0x64>
    cbb0:	ed837b12 	vstr	d7, [r3, #72]	; 0x48

	return M_HAL_IMU_SUCCESS_BL;
    cbb4:	e3a03000 	mov	r3, #0
}
    cbb8:	e1a00003 	mov	r0, r3
    cbbc:	e8bd8800 	pop	{fp, pc}
    cbc0:	00019780 	.word	0x00019780

0000cbc4 <g_halImu_triggerGyroReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerGyroReading_bl(void)
{
    cbc4:	e92d4818 	push	{r3, r4, fp, lr}
    cbc8:	e28db00c 	add	fp, sp, #12
	if(g_halGyro_readGyroscopeFromI2C_i32()!=0)
    cbcc:	ebfffe63 	bl	c560 <g_halGyro_readGyroscopeFromI2C_i32>
    cbd0:	e1a03000 	mov	r3, r0
    cbd4:	e3530000 	cmp	r3, #0
    cbd8:	0a000001 	beq	cbe4 <g_halImu_triggerGyroReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    cbdc:	e3a03001 	mov	r3, #1
    cbe0:	ea000008 	b	cc08 <g_halImu_triggerGyroReading_bl+0x44>

	m_halImu_imuValues_st.gyro=g_halGyro_getGyroscope_st();
    cbe4:	e59f4024 	ldr	r4, [pc, #36]	; cc10 <g_halImu_triggerGyroReading_bl+0x4c>
    cbe8:	ebfffe3c 	bl	c4e0 <g_halGyro_getGyroscope_st>
    cbec:	eeb05b40 	vmov.f64	d5, d0
    cbf0:	eeb06b41 	vmov.f64	d6, d1
    cbf4:	eeb07b42 	vmov.f64	d7, d2
    cbf8:	ed845b0c 	vstr	d5, [r4, #48]	; 0x30
    cbfc:	ed846b0e 	vstr	d6, [r4, #56]	; 0x38
    cc00:	ed847b10 	vstr	d7, [r4, #64]	; 0x40

	return M_HAL_IMU_SUCCESS_BL;
    cc04:	e3a03000 	mov	r3, #0
}
    cc08:	e1a00003 	mov	r0, r3
    cc0c:	e8bd8818 	pop	{r3, r4, fp, pc}
    cc10:	00019780 	.word	0x00019780

0000cc14 <g_halImu_triggerAccReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerAccReading_bl(void)
{
    cc14:	e92d4818 	push	{r3, r4, fp, lr}
    cc18:	e28db00c 	add	fp, sp, #12
	if(g_halAccmag_triggerAccUpdate_bl()!=0)
    cc1c:	ebfffccc 	bl	bf54 <g_halAccmag_triggerAccUpdate_bl>
    cc20:	e1a03000 	mov	r3, r0
    cc24:	e3530000 	cmp	r3, #0
    cc28:	0a000001 	beq	cc34 <g_halImu_triggerAccReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    cc2c:	e3a03001 	mov	r3, #1
    cc30:	ea000008 	b	cc58 <g_halImu_triggerAccReading_bl+0x44>

	m_halImu_imuValues_st.acc=g_halAccmag_getAccVector_st();
    cc34:	e59f4024 	ldr	r4, [pc, #36]	; cc60 <g_halImu_triggerAccReading_bl+0x4c>
    cc38:	ebfffcda 	bl	bfa8 <g_halAccmag_getAccVector_st>
    cc3c:	eeb05b40 	vmov.f64	d5, d0
    cc40:	eeb06b41 	vmov.f64	d6, d1
    cc44:	eeb07b42 	vmov.f64	d7, d2
    cc48:	ed845b00 	vstr	d5, [r4]
    cc4c:	ed846b02 	vstr	d6, [r4, #8]
    cc50:	ed847b04 	vstr	d7, [r4, #16]

	return M_HAL_IMU_SUCCESS_BL;
    cc54:	e3a03000 	mov	r3, #0
}
    cc58:	e1a00003 	mov	r0, r3
    cc5c:	e8bd8818 	pop	{r3, r4, fp, pc}
    cc60:	00019780 	.word	0x00019780

0000cc64 <g_halImu_triggerMagReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerMagReading_bl(void)
{
    cc64:	e92d4818 	push	{r3, r4, fp, lr}
    cc68:	e28db00c 	add	fp, sp, #12
	if(g_halAccmag_triggerMagUpdate_bl()!=0)
    cc6c:	ebfffcbf 	bl	bf70 <g_halAccmag_triggerMagUpdate_bl>
    cc70:	e1a03000 	mov	r3, r0
    cc74:	e3530000 	cmp	r3, #0
    cc78:	0a000001 	beq	cc84 <g_halImu_triggerMagReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    cc7c:	e3a03001 	mov	r3, #1
    cc80:	ea000008 	b	cca8 <g_halImu_triggerMagReading_bl+0x44>

	m_halImu_imuValues_st.mag=g_halAccmag_getMagVector_st();
    cc84:	e59f4024 	ldr	r4, [pc, #36]	; ccb0 <g_halImu_triggerMagReading_bl+0x4c>
    cc88:	ebfffcdc 	bl	c000 <g_halAccmag_getMagVector_st>
    cc8c:	eeb05b40 	vmov.f64	d5, d0
    cc90:	eeb06b41 	vmov.f64	d6, d1
    cc94:	eeb07b42 	vmov.f64	d7, d2
    cc98:	ed845b06 	vstr	d5, [r4, #24]
    cc9c:	ed846b08 	vstr	d6, [r4, #32]
    cca0:	ed847b0a 	vstr	d7, [r4, #40]	; 0x28

	return M_HAL_IMU_SUCCESS_BL;
    cca4:	e3a03000 	mov	r3, #0
}
    cca8:	e1a00003 	mov	r0, r3
    ccac:	e8bd8818 	pop	{r3, r4, fp, pc}
    ccb0:	00019780 	.word	0x00019780

0000ccb4 <g_halImu_triggerImuReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerImuReading_bl(void)
{
    ccb4:	e92d4818 	push	{r3, r4, fp, lr}
    ccb8:	e28db00c 	add	fp, sp, #12
	if(g_halBaro_readPressureFromI2C_i32()!=0)
    ccbc:	ebfffd35 	bl	c198 <g_halBaro_readPressureFromI2C_i32>
    ccc0:	e1a03000 	mov	r3, r0
    ccc4:	e3530000 	cmp	r3, #0
    ccc8:	0a000001 	beq	ccd4 <g_halImu_triggerImuReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    cccc:	e3a03001 	mov	r3, #1
    ccd0:	ea000038 	b	cdb8 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halBaro_readTemperatureFromI2C_i32()!=0)
    ccd4:	ebfffd82 	bl	c2e4 <g_halBaro_readTemperatureFromI2C_i32>
    ccd8:	e1a03000 	mov	r3, r0
    ccdc:	e3530000 	cmp	r3, #0
    cce0:	0a000001 	beq	ccec <g_halImu_triggerImuReading_bl+0x38>
	{return M_HAL_IMU_FAILED_BL;}
    cce4:	e3a03001 	mov	r3, #1
    cce8:	ea000032 	b	cdb8 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halGyro_readGyroscopeFromI2C_i32()!=0)
    ccec:	ebfffe1b 	bl	c560 <g_halGyro_readGyroscopeFromI2C_i32>
    ccf0:	e1a03000 	mov	r3, r0
    ccf4:	e3530000 	cmp	r3, #0
    ccf8:	0a000001 	beq	cd04 <g_halImu_triggerImuReading_bl+0x50>
	{return M_HAL_IMU_FAILED_BL;}
    ccfc:	e3a03001 	mov	r3, #1
    cd00:	ea00002c 	b	cdb8 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halAccmag_triggerAccUpdate_bl()!=0)
    cd04:	ebfffc92 	bl	bf54 <g_halAccmag_triggerAccUpdate_bl>
    cd08:	e1a03000 	mov	r3, r0
    cd0c:	e3530000 	cmp	r3, #0
    cd10:	0a000001 	beq	cd1c <g_halImu_triggerImuReading_bl+0x68>
	{return M_HAL_IMU_FAILED_BL;}
    cd14:	e3a03001 	mov	r3, #1
    cd18:	ea000026 	b	cdb8 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halAccmag_triggerMagUpdate_bl()!=0)
    cd1c:	ebfffc93 	bl	bf70 <g_halAccmag_triggerMagUpdate_bl>
    cd20:	e1a03000 	mov	r3, r0
    cd24:	e3530000 	cmp	r3, #0
    cd28:	0a000001 	beq	cd34 <g_halImu_triggerImuReading_bl+0x80>
	{return M_HAL_IMU_FAILED_BL;}
    cd2c:	e3a03001 	mov	r3, #1
    cd30:	ea000020 	b	cdb8 <g_halImu_triggerImuReading_bl+0x104>

	m_halImu_imuValues_st.mag=g_halAccmag_getMagVector_st();
    cd34:	e59f4084 	ldr	r4, [pc, #132]	; cdc0 <g_halImu_triggerImuReading_bl+0x10c>
    cd38:	ebfffcb0 	bl	c000 <g_halAccmag_getMagVector_st>
    cd3c:	eeb05b40 	vmov.f64	d5, d0
    cd40:	eeb06b41 	vmov.f64	d6, d1
    cd44:	eeb07b42 	vmov.f64	d7, d2
    cd48:	ed845b06 	vstr	d5, [r4, #24]
    cd4c:	ed846b08 	vstr	d6, [r4, #32]
    cd50:	ed847b0a 	vstr	d7, [r4, #40]	; 0x28
	m_halImu_imuValues_st.acc=g_halAccmag_getAccVector_st();
    cd54:	e59f4064 	ldr	r4, [pc, #100]	; cdc0 <g_halImu_triggerImuReading_bl+0x10c>
    cd58:	ebfffc92 	bl	bfa8 <g_halAccmag_getAccVector_st>
    cd5c:	eeb05b40 	vmov.f64	d5, d0
    cd60:	eeb06b41 	vmov.f64	d6, d1
    cd64:	eeb07b42 	vmov.f64	d7, d2
    cd68:	ed845b00 	vstr	d5, [r4]
    cd6c:	ed846b02 	vstr	d6, [r4, #8]
    cd70:	ed847b04 	vstr	d7, [r4, #16]
	m_halImu_imuValues_st.gyro=g_halGyro_getGyroscope_st();
    cd74:	e59f4044 	ldr	r4, [pc, #68]	; cdc0 <g_halImu_triggerImuReading_bl+0x10c>
    cd78:	ebfffdd8 	bl	c4e0 <g_halGyro_getGyroscope_st>
    cd7c:	eeb05b40 	vmov.f64	d5, d0
    cd80:	eeb06b41 	vmov.f64	d6, d1
    cd84:	eeb07b42 	vmov.f64	d7, d2
    cd88:	ed845b0c 	vstr	d5, [r4, #48]	; 0x30
    cd8c:	ed846b0e 	vstr	d6, [r4, #56]	; 0x38
    cd90:	ed847b10 	vstr	d7, [r4, #64]	; 0x40
	m_halImu_imuValues_st.pressure_f64=g_halBaro_getPressure_f64();
    cd94:	ebfffceb 	bl	c148 <g_halBaro_getPressure_f64>
    cd98:	eeb07b40 	vmov.f64	d7, d0
    cd9c:	e59f301c 	ldr	r3, [pc, #28]	; cdc0 <g_halImu_triggerImuReading_bl+0x10c>
    cda0:	ed837b14 	vstr	d7, [r3, #80]	; 0x50
	m_halImu_imuValues_st.temperature_f64=g_halBaro_getTemperature_f64();
    cda4:	ebfffcf1 	bl	c170 <g_halBaro_getTemperature_f64>
    cda8:	eeb07b40 	vmov.f64	d7, d0
    cdac:	e59f300c 	ldr	r3, [pc, #12]	; cdc0 <g_halImu_triggerImuReading_bl+0x10c>
    cdb0:	ed837b12 	vstr	d7, [r3, #72]	; 0x48

	return M_HAL_IMU_SUCCESS_BL;
    cdb4:	e3a03000 	mov	r3, #0
}
    cdb8:	e1a00003 	mov	r0, r3
    cdbc:	e8bd8818 	pop	{r3, r4, fp, pc}
    cdc0:	00019780 	.word	0x00019780
    cdc4:	00000000 	.word	0x00000000

0000cdc8 <g_LIDAR_getDistance_f64>:
 *
 * \endinternal
 ********************************************************************** */

double g_LIDAR_getDistance_f64(void)
{
    cdc8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    cdcc:	e28db000 	add	fp, sp, #0
	return m_distance_f64;
    cdd0:	e59f3014 	ldr	r3, [pc, #20]	; cdec <g_LIDAR_getDistance_f64+0x24>
    cdd4:	e1c320d0 	ldrd	r2, [r3]
    cdd8:	ec432b17 	vmov	d7, r2, r3
}
    cddc:	eeb00b47 	vmov.f64	d0, d7
    cde0:	e24bd000 	sub	sp, fp, #0
    cde4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    cde8:	e12fff1e 	bx	lr
    cdec:	000197d8 	.word	0x000197d8

0000cdf0 <g_LIDAR_readDistanceFromI2C_i32>:
 *
 * \endinternal
 ********************************************************************** */

int g_LIDAR_readDistanceFromI2C_i32(void)
{
    cdf0:	e92d4800 	push	{fp, lr}
    cdf4:	e28db004 	add	fp, sp, #4
    cdf8:	e24dd010 	sub	sp, sp, #16
unsigned char l_ReadBuffer_ui8[2]={0,0};
    cdfc:	e3a03000 	mov	r3, #0
    ce00:	e54b300c 	strb	r3, [fp, #-12]
    ce04:	e3a03000 	mov	r3, #0
    ce08:	e54b300b 	strb	r3, [fp, #-11]
unsigned char l_WriteBuffer_ui8[2]={0,0};
    ce0c:	e3a03000 	mov	r3, #0
    ce10:	e54b3010 	strb	r3, [fp, #-16]
    ce14:	e3a03000 	mov	r3, #0
    ce18:	e54b300f 	strb	r3, [fp, #-15]
int l_DistInCm_i32 =  0;
    ce1c:	e3a03000 	mov	r3, #0
    ce20:	e50b3008 	str	r3, [fp, #-8]

//Trigger Measurement of Distance (DC stabnilization cycle, Signal Acquisition, DataProcessing)
l_WriteBuffer_ui8[0]=0x00; 								//write Reg 0x00
    ce24:	e3a03000 	mov	r3, #0
    ce28:	e54b3010 	strb	r3, [fp, #-16]
l_WriteBuffer_ui8[1]=0x04; 								//with value 0x04
    ce2c:	e3a03004 	mov	r3, #4
    ce30:	e54b300f 	strb	r3, [fp, #-15]
if(g_lldI2c_WriteI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, l_WriteBuffer_ui8, 2)!=0)
    ce34:	e24b3010 	sub	r3, fp, #16
    ce38:	e3a00062 	mov	r0, #98	; 0x62
    ce3c:	e1a01003 	mov	r1, r3
    ce40:	e3a02002 	mov	r2, #2
    ce44:	eb0000b5 	bl	d120 <g_lldI2c_WriteI2c0_bl>
    ce48:	e1a03000 	mov	r3, r0
    ce4c:	e3530000 	cmp	r3, #0
    ce50:	0a000001 	beq	ce5c <g_LIDAR_readDistanceFromI2C_i32+0x6c>
{
return -1;
    ce54:	e3e03000 	mvn	r3, #0
    ce58:	ea000038 	b	cf40 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Waiting Time for Acquisition
usleep(20*1000);
    ce5c:	e59f00f4 	ldr	r0, [pc, #244]	; cf58 <g_LIDAR_readDistanceFromI2C_i32+0x168>
    ce60:	ebffeecc 	bl	8998 <_init+0x98>


//Set Acquisition count cycle to 255
l_WriteBuffer_ui8[0]=0x02;
    ce64:	e3a03002 	mov	r3, #2
    ce68:	e54b3010 	strb	r3, [fp, #-16]
l_WriteBuffer_ui8[1]=0xFF;
    ce6c:	e3e03000 	mvn	r3, #0
    ce70:	e54b300f 	strb	r3, [fp, #-15]
if(g_lldI2c_WriteI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, l_WriteBuffer_ui8, 2)!=0)
    ce74:	e24b3010 	sub	r3, fp, #16
    ce78:	e3a00062 	mov	r0, #98	; 0x62
    ce7c:	e1a01003 	mov	r1, r3
    ce80:	e3a02002 	mov	r2, #2
    ce84:	eb0000a5 	bl	d120 <g_lldI2c_WriteI2c0_bl>
    ce88:	e1a03000 	mov	r3, r0
    ce8c:	e3530000 	cmp	r3, #0
    ce90:	0a000001 	beq	ce9c <g_LIDAR_readDistanceFromI2C_i32+0xac>
{
return -1;
    ce94:	e3e03000 	mvn	r3, #0
    ce98:	ea000028 	b	cf40 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Set Reg 0x8f as Output-Register
l_WriteBuffer_ui8[0]=0x8f;
    ce9c:	e3e03070 	mvn	r3, #112	; 0x70
    cea0:	e54b3010 	strb	r3, [fp, #-16]
if(g_lldI2c_WriteI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, l_WriteBuffer_ui8, 1)!=0)
    cea4:	e24b3010 	sub	r3, fp, #16
    cea8:	e3a00062 	mov	r0, #98	; 0x62
    ceac:	e1a01003 	mov	r1, r3
    ceb0:	e3a02001 	mov	r2, #1
    ceb4:	eb000099 	bl	d120 <g_lldI2c_WriteI2c0_bl>
    ceb8:	e1a03000 	mov	r3, r0
    cebc:	e3530000 	cmp	r3, #0
    cec0:	0a000001 	beq	cecc <g_LIDAR_readDistanceFromI2C_i32+0xdc>
{
return -1;
    cec4:	e3e03000 	mvn	r3, #0
    cec8:	ea00001c 	b	cf40 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Read 2-Byte Distance in cm from Register 0x8f
if(g_lldI2c_ReadI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, (l_ReadBuffer_ui8), 2)!=0)
    cecc:	e24b300c 	sub	r3, fp, #12
    ced0:	e3a00062 	mov	r0, #98	; 0x62
    ced4:	e1a01003 	mov	r1, r3
    ced8:	e3a02002 	mov	r2, #2
    cedc:	eb0000c7 	bl	d200 <g_lldI2c_ReadI2c0_bl>
    cee0:	e1a03000 	mov	r3, r0
    cee4:	e3530000 	cmp	r3, #0
    cee8:	0a000001 	beq	cef4 <g_LIDAR_readDistanceFromI2C_i32+0x104>
{
return -1;
    ceec:	e3e03000 	mvn	r3, #0
    cef0:	ea000012 	b	cf40 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Conversion from int(cm) to double(m)
l_DistInCm_i32 = *l_ReadBuffer_ui8 << 8;
    cef4:	e55b300c 	ldrb	r3, [fp, #-12]
    cef8:	e1a03403 	lsl	r3, r3, #8
    cefc:	e50b3008 	str	r3, [fp, #-8]
l_DistInCm_i32 |= *(l_ReadBuffer_ui8+1);
    cf00:	e55b300b 	ldrb	r3, [fp, #-11]
    cf04:	e51b2008 	ldr	r2, [fp, #-8]
    cf08:	e1823003 	orr	r3, r2, r3
    cf0c:	e50b3008 	str	r3, [fp, #-8]
m_distance_f64 = (double)l_DistInCm_i32;
    cf10:	e51b3008 	ldr	r3, [fp, #-8]
    cf14:	ee063a90 	vmov	s13, r3
    cf18:	eeb87be6 	vcvt.f64.s32	d7, s13
    cf1c:	e59f3038 	ldr	r3, [pc, #56]	; cf5c <g_LIDAR_readDistanceFromI2C_i32+0x16c>
    cf20:	ed837b00 	vstr	d7, [r3]
m_distance_f64 = (m_distance_f64/100);
    cf24:	e59f3030 	ldr	r3, [pc, #48]	; cf5c <g_LIDAR_readDistanceFromI2C_i32+0x16c>
    cf28:	ed936b00 	vldr	d6, [r3]
    cf2c:	ed9f7b07 	vldr	d7, [pc, #28]	; cf50 <g_LIDAR_readDistanceFromI2C_i32+0x160>
    cf30:	ee867b07 	vdiv.f64	d7, d6, d7
    cf34:	e59f3020 	ldr	r3, [pc, #32]	; cf5c <g_LIDAR_readDistanceFromI2C_i32+0x16c>
    cf38:	ed837b00 	vstr	d7, [r3]
//printf("Distance: %d / %.2f\n",l_DistInCm_i32,m_distance_f64);
//usleep(500*1000);


return 0;
    cf3c:	e3a03000 	mov	r3, #0
}
    cf40:	e1a00003 	mov	r0, r3
    cf44:	e24bd004 	sub	sp, fp, #4
    cf48:	e8bd8800 	pop	{fp, pc}
    cf4c:	e1a00000 	nop			; (mov r0, r0)
    cf50:	00000000 	.word	0x00000000
    cf54:	40590000 	.word	0x40590000
    cf58:	00004e20 	.word	0x00004e20
    cf5c:	000197d8 	.word	0x000197d8

0000cf60 <g_lldI2c_WriteI2c_bl>:
 * 2015/05/06 phwogs00:
 * Changed variable and function names in order to guideline
 * \endinternal
 ***********************************************************************/
unsigned int g_lldI2c_WriteI2c_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_i2cWriteBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    cf60:	e92d4800 	push	{fp, lr}
    cf64:	e28db004 	add	fp, sp, #4
    cf68:	e24dd018 	sub	sp, sp, #24
    cf6c:	e1a03000 	mov	r3, r0
    cf70:	e50b1014 	str	r1, [fp, #-20]
    cf74:	e50b2018 	str	r2, [fp, #-24]
    cf78:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_returnOfWrittenBytes_ui8 	= 0;
    cf7c:	e3a03000 	mov	r3, #0
    cf80:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_WriteRetryCounter_ui8 	= 0;
    cf84:	e3a03000 	mov	r3, #0
    cf88:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 				= 0;
    cf8c:	e3a03000 	mov	r3, #0
    cf90:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C_DEV_UI8, O_RDWR);
    cf94:	e59f009c 	ldr	r0, [pc, #156]	; d038 <g_lldI2c_WriteI2c_bl+0xd8>
    cf98:	e3a01002 	mov	r1, #2
    cf9c:	ebffee5f 	bl	8920 <_init+0x20>
    cfa0:	e1a03000 	mov	r3, r0
    cfa4:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    cfa8:	e51b200c 	ldr	r2, [fp, #-12]
    cfac:	e55b300d 	ldrb	r3, [fp, #-13]
    cfb0:	e1a00002 	mov	r0, r2
    cfb4:	e59f1080 	ldr	r1, [pc, #128]	; d03c <g_lldI2c_WriteI2c_bl+0xdc>
    cfb8:	e1a02003 	mov	r2, r3
    cfbc:	ebffee93 	bl	8a10 <_init+0x110>

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    cfc0:	ea000009 	b	cfec <g_lldI2c_WriteI2c_bl+0x8c>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    cfc4:	e51b300c 	ldr	r3, [fp, #-12]
    cfc8:	e1a00003 	mov	r0, r3
    cfcc:	e51b1014 	ldr	r1, [fp, #-20]
    cfd0:	e51b2018 	ldr	r2, [fp, #-24]
    cfd4:	ebffee78 	bl	89bc <_init+0xbc>
    cfd8:	e1a03000 	mov	r3, r0
    cfdc:	e54b3005 	strb	r3, [fp, #-5]
		l_WriteRetryCounter_ui8++;
    cfe0:	e55b3006 	ldrb	r3, [fp, #-6]
    cfe4:	e2833001 	add	r3, r3, #1
    cfe8:	e54b3006 	strb	r3, [fp, #-6]

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    cfec:	e55b2005 	ldrb	r2, [fp, #-5]
    cff0:	e51b3018 	ldr	r3, [fp, #-24]
    cff4:	e1520003 	cmp	r2, r3
    cff8:	0a000002 	beq	d008 <g_lldI2c_WriteI2c_bl+0xa8>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    cffc:	e55b3006 	ldrb	r3, [fp, #-6]
    d000:	e3530002 	cmp	r3, #2
    d004:	9affffee 	bls	cfc4 <g_lldI2c_WriteI2c_bl+0x64>
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_WriteRetryCounter_ui8++;
	}

	if(l_WriteRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    d008:	e55b3006 	ldrb	r3, [fp, #-6]
    d00c:	e3530002 	cmp	r3, #2
    d010:	9a000001 	bls	d01c <g_lldI2c_WriteI2c_bl+0xbc>
	{
		return 1;
    d014:	e3a03001 	mov	r3, #1
    d018:	ea000003 	b	d02c <g_lldI2c_WriteI2c_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    d01c:	e51b300c 	ldr	r3, [fp, #-12]
    d020:	e1a00003 	mov	r0, r3
    d024:	ebffee88 	bl	8a4c <_init+0x14c>
	{
		/*ERROR HANDLER*/
		return 1;
	}

	return 0;
    d028:	e3a03000 	mov	r3, #0
}
    d02c:	e1a00003 	mov	r0, r3
    d030:	e24bd004 	sub	sp, fp, #4
    d034:	e8bd8800 	pop	{fp, pc}
    d038:	00010ac8 	.word	0x00010ac8
    d03c:	00000703 	.word	0x00000703

0000d040 <g_lldI2c_ReadI2c_bl>:
 * Changed variable and function names in order to guideline
 *   *
 * \endinternal
 ***********************************************************************/ 
unsigned int g_lldI2c_ReadI2c_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_lldI2c_i2cReadBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    d040:	e92d4800 	push	{fp, lr}
    d044:	e28db004 	add	fp, sp, #4
    d048:	e24dd018 	sub	sp, sp, #24
    d04c:	e1a03000 	mov	r3, r0
    d050:	e50b1014 	str	r1, [fp, #-20]
    d054:	e50b2018 	str	r2, [fp, #-24]
    d058:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_ReturnOfReadBytes_ui8 = 0;
    d05c:	e3a03000 	mov	r3, #0
    d060:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_ReadRetryCounter_ui8 	= 0;
    d064:	e3a03000 	mov	r3, #0
    d068:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 			= 0;
    d06c:	e3a03000 	mov	r3, #0
    d070:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C_DEV_UI8, O_RDWR);   //Open I2C device
    d074:	e59f009c 	ldr	r0, [pc, #156]	; d118 <g_lldI2c_ReadI2c_bl+0xd8>
    d078:	e3a01002 	mov	r1, #2
    d07c:	ebffee27 	bl	8920 <_init+0x20>
    d080:	e1a03000 	mov	r3, r0
    d084:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    d088:	e51b200c 	ldr	r2, [fp, #-12]
    d08c:	e55b300d 	ldrb	r3, [fp, #-13]
    d090:	e1a00002 	mov	r0, r2
    d094:	e59f1080 	ldr	r1, [pc, #128]	; d11c <g_lldI2c_ReadI2c_bl+0xdc>
    d098:	e1a02003 	mov	r2, r3
    d09c:	ebffee5b 	bl	8a10 <_init+0x110>

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    d0a0:	ea000009 	b	d0cc <g_lldI2c_ReadI2c_bl+0x8c>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    d0a4:	e51b300c 	ldr	r3, [fp, #-12]
    d0a8:	e1a00003 	mov	r0, r3
    d0ac:	e51b1014 	ldr	r1, [fp, #-20]
    d0b0:	e51b2018 	ldr	r2, [fp, #-24]
    d0b4:	ebffee3d 	bl	89b0 <_init+0xb0>
    d0b8:	e1a03000 	mov	r3, r0
    d0bc:	e54b3005 	strb	r3, [fp, #-5]
		l_ReadRetryCounter_ui8++;
    d0c0:	e55b3006 	ldrb	r3, [fp, #-6]
    d0c4:	e2833001 	add	r3, r3, #1
    d0c8:	e54b3006 	strb	r3, [fp, #-6]
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    d0cc:	e55b2005 	ldrb	r2, [fp, #-5]
    d0d0:	e51b3018 	ldr	r3, [fp, #-24]
    d0d4:	e1520003 	cmp	r2, r3
    d0d8:	0a000002 	beq	d0e8 <g_lldI2c_ReadI2c_bl+0xa8>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    d0dc:	e55b3006 	ldrb	r3, [fp, #-6]
    d0e0:	e3530002 	cmp	r3, #2
    d0e4:	9affffee 	bls	d0a4 <g_lldI2c_ReadI2c_bl+0x64>
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_ReadRetryCounter_ui8++;
	}

	if(l_ReadRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    d0e8:	e55b3006 	ldrb	r3, [fp, #-6]
    d0ec:	e3530002 	cmp	r3, #2
    d0f0:	9a000001 	bls	d0fc <g_lldI2c_ReadI2c_bl+0xbc>
	{
		return 1;
    d0f4:	e3a03001 	mov	r3, #1
    d0f8:	ea000003 	b	d10c <g_lldI2c_ReadI2c_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    d0fc:	e51b300c 	ldr	r3, [fp, #-12]
    d100:	e1a00003 	mov	r0, r3
    d104:	ebffee50 	bl	8a4c <_init+0x14c>
	if(l_i2cFile_ui32 < 0)
	{
		/*ERROR HANDLER*/
		return 1;
	}
	return(0);
    d108:	e3a03000 	mov	r3, #0

}
    d10c:	e1a00003 	mov	r0, r3
    d110:	e24bd004 	sub	sp, fp, #4
    d114:	e8bd8800 	pop	{fp, pc}
    d118:	00010ac8 	.word	0x00010ac8
    d11c:	00000703 	.word	0x00000703

0000d120 <g_lldI2c_WriteI2c0_bl>:
 *
 * 
 * \endinternal
 ***********************************************************************/
unsigned int g_lldI2c_WriteI2c0_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_i2cWriteBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    d120:	e92d4800 	push	{fp, lr}
    d124:	e28db004 	add	fp, sp, #4
    d128:	e24dd018 	sub	sp, sp, #24
    d12c:	e1a03000 	mov	r3, r0
    d130:	e50b1014 	str	r1, [fp, #-20]
    d134:	e50b2018 	str	r2, [fp, #-24]
    d138:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_returnOfWrittenBytes_ui8 	= 0;
    d13c:	e3a03000 	mov	r3, #0
    d140:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_WriteRetryCounter_ui8 	= 0;
    d144:	e3a03000 	mov	r3, #0
    d148:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 				= 0;
    d14c:	e3a03000 	mov	r3, #0
    d150:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C0_DEV_UI8, O_RDWR);
    d154:	e59f009c 	ldr	r0, [pc, #156]	; d1f8 <g_lldI2c_WriteI2c0_bl+0xd8>
    d158:	e3a01002 	mov	r1, #2
    d15c:	ebffedef 	bl	8920 <_init+0x20>
    d160:	e1a03000 	mov	r3, r0
    d164:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    d168:	e51b200c 	ldr	r2, [fp, #-12]
    d16c:	e55b300d 	ldrb	r3, [fp, #-13]
    d170:	e1a00002 	mov	r0, r2
    d174:	e59f1080 	ldr	r1, [pc, #128]	; d1fc <g_lldI2c_WriteI2c0_bl+0xdc>
    d178:	e1a02003 	mov	r2, r3
    d17c:	ebffee23 	bl	8a10 <_init+0x110>

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    d180:	ea000009 	b	d1ac <g_lldI2c_WriteI2c0_bl+0x8c>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    d184:	e51b300c 	ldr	r3, [fp, #-12]
    d188:	e1a00003 	mov	r0, r3
    d18c:	e51b1014 	ldr	r1, [fp, #-20]
    d190:	e51b2018 	ldr	r2, [fp, #-24]
    d194:	ebffee08 	bl	89bc <_init+0xbc>
    d198:	e1a03000 	mov	r3, r0
    d19c:	e54b3005 	strb	r3, [fp, #-5]
		l_WriteRetryCounter_ui8++;
    d1a0:	e55b3006 	ldrb	r3, [fp, #-6]
    d1a4:	e2833001 	add	r3, r3, #1
    d1a8:	e54b3006 	strb	r3, [fp, #-6]

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    d1ac:	e55b2005 	ldrb	r2, [fp, #-5]
    d1b0:	e51b3018 	ldr	r3, [fp, #-24]
    d1b4:	e1520003 	cmp	r2, r3
    d1b8:	0a000002 	beq	d1c8 <g_lldI2c_WriteI2c0_bl+0xa8>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    d1bc:	e55b3006 	ldrb	r3, [fp, #-6]
    d1c0:	e3530002 	cmp	r3, #2
    d1c4:	9affffee 	bls	d184 <g_lldI2c_WriteI2c0_bl+0x64>
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_WriteRetryCounter_ui8++;
	}

	if(l_WriteRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    d1c8:	e55b3006 	ldrb	r3, [fp, #-6]
    d1cc:	e3530002 	cmp	r3, #2
    d1d0:	9a000001 	bls	d1dc <g_lldI2c_WriteI2c0_bl+0xbc>
	{
		return 1;
    d1d4:	e3a03001 	mov	r3, #1
    d1d8:	ea000003 	b	d1ec <g_lldI2c_WriteI2c0_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    d1dc:	e51b300c 	ldr	r3, [fp, #-12]
    d1e0:	e1a00003 	mov	r0, r3
    d1e4:	ebffee18 	bl	8a4c <_init+0x14c>
	{
		/*ERROR HANDLER*/
		return 1;
	}

	return 0;
    d1e8:	e3a03000 	mov	r3, #0
}
    d1ec:	e1a00003 	mov	r0, r3
    d1f0:	e24bd004 	sub	sp, fp, #4
    d1f4:	e8bd8800 	pop	{fp, pc}
    d1f8:	00010ad4 	.word	0x00010ad4
    d1fc:	00000703 	.word	0x00000703

0000d200 <g_lldI2c_ReadI2c0_bl>:
 * 
 * 
 *  * \endinternal
 ***********************************************************************/ 
unsigned int g_lldI2c_ReadI2c0_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_lldI2c_i2cReadBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    d200:	e92d4800 	push	{fp, lr}
    d204:	e28db004 	add	fp, sp, #4
    d208:	e24dd018 	sub	sp, sp, #24
    d20c:	e1a03000 	mov	r3, r0
    d210:	e50b1014 	str	r1, [fp, #-20]
    d214:	e50b2018 	str	r2, [fp, #-24]
    d218:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_ReturnOfReadBytes_ui8 = 0;
    d21c:	e3a03000 	mov	r3, #0
    d220:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_ReadRetryCounter_ui8 	= 0;
    d224:	e3a03000 	mov	r3, #0
    d228:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 			= 0;
    d22c:	e3a03000 	mov	r3, #0
    d230:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C0_DEV_UI8, O_RDWR);   //Open I2C device
    d234:	e59f009c 	ldr	r0, [pc, #156]	; d2d8 <g_lldI2c_ReadI2c0_bl+0xd8>
    d238:	e3a01002 	mov	r1, #2
    d23c:	ebffedb7 	bl	8920 <_init+0x20>
    d240:	e1a03000 	mov	r3, r0
    d244:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    d248:	e51b200c 	ldr	r2, [fp, #-12]
    d24c:	e55b300d 	ldrb	r3, [fp, #-13]
    d250:	e1a00002 	mov	r0, r2
    d254:	e59f1080 	ldr	r1, [pc, #128]	; d2dc <g_lldI2c_ReadI2c0_bl+0xdc>
    d258:	e1a02003 	mov	r2, r3
    d25c:	ebffedeb 	bl	8a10 <_init+0x110>

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    d260:	ea000009 	b	d28c <g_lldI2c_ReadI2c0_bl+0x8c>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    d264:	e51b300c 	ldr	r3, [fp, #-12]
    d268:	e1a00003 	mov	r0, r3
    d26c:	e51b1014 	ldr	r1, [fp, #-20]
    d270:	e51b2018 	ldr	r2, [fp, #-24]
    d274:	ebffedcd 	bl	89b0 <_init+0xb0>
    d278:	e1a03000 	mov	r3, r0
    d27c:	e54b3005 	strb	r3, [fp, #-5]
		l_ReadRetryCounter_ui8++;
    d280:	e55b3006 	ldrb	r3, [fp, #-6]
    d284:	e2833001 	add	r3, r3, #1
    d288:	e54b3006 	strb	r3, [fp, #-6]
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    d28c:	e55b2005 	ldrb	r2, [fp, #-5]
    d290:	e51b3018 	ldr	r3, [fp, #-24]
    d294:	e1520003 	cmp	r2, r3
    d298:	0a000002 	beq	d2a8 <g_lldI2c_ReadI2c0_bl+0xa8>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    d29c:	e55b3006 	ldrb	r3, [fp, #-6]
    d2a0:	e3530002 	cmp	r3, #2
    d2a4:	9affffee 	bls	d264 <g_lldI2c_ReadI2c0_bl+0x64>
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_ReadRetryCounter_ui8++;
	}

	if(l_ReadRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    d2a8:	e55b3006 	ldrb	r3, [fp, #-6]
    d2ac:	e3530002 	cmp	r3, #2
    d2b0:	9a000001 	bls	d2bc <g_lldI2c_ReadI2c0_bl+0xbc>
	{
		return 1;
    d2b4:	e3a03001 	mov	r3, #1
    d2b8:	ea000003 	b	d2cc <g_lldI2c_ReadI2c0_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    d2bc:	e51b300c 	ldr	r3, [fp, #-12]
    d2c0:	e1a00003 	mov	r0, r3
    d2c4:	ebffede0 	bl	8a4c <_init+0x14c>
	if(l_i2cFile_ui32 < 0)
	{
		/*ERROR HANDLER*/
		return 1;
	}
	return(0);
    d2c8:	e3a03000 	mov	r3, #0

}
    d2cc:	e1a00003 	mov	r0, r3
    d2d0:	e24bd004 	sub	sp, fp, #4
    d2d4:	e8bd8800 	pop	{fp, pc}
    d2d8:	00010ad4 	.word	0x00010ad4
    d2dc:	00000703 	.word	0x00000703

0000d2e0 <g_lldUart_uartOpen_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_lldUart_uartOpen_i32(void)
{
    d2e0:	e92d4800 	push	{fp, lr}
    d2e4:	e28db004 	add	fp, sp, #4
    d2e8:	e24dd040 	sub	sp, sp, #64	; 0x40
	l_filestream_i32 = open("/dev/ttyAMA0", O_RDWR | O_NOCTTY | O_NDELAY);
    d2ec:	e59f00a8 	ldr	r0, [pc, #168]	; d39c <g_lldUart_uartOpen_i32+0xbc>
    d2f0:	e59f10a8 	ldr	r1, [pc, #168]	; d3a0 <g_lldUart_uartOpen_i32+0xc0>
    d2f4:	ebffed89 	bl	8920 <_init+0x20>
    d2f8:	e1a02000 	mov	r2, r0
    d2fc:	e59f30a0 	ldr	r3, [pc, #160]	; d3a4 <g_lldUart_uartOpen_i32+0xc4>
    d300:	e5832000 	str	r2, [r3]
	if (l_filestream_i32 == -1)
    d304:	e59f3098 	ldr	r3, [pc, #152]	; d3a4 <g_lldUart_uartOpen_i32+0xc4>
    d308:	e5933000 	ldr	r3, [r3]
    d30c:	e3730001 	cmn	r3, #1
    d310:	1a000001 	bne	d31c <g_lldUart_uartOpen_i32+0x3c>
	{
		//Error UART can not be opened
		return(-1);
    d314:	e3e03000 	mvn	r3, #0
    d318:	ea00001c 	b	d390 <g_lldUart_uartOpen_i32+0xb0>
	}
	struct termios l_options_st;
	tcgetattr(l_filestream_i32, &l_options_st);
    d31c:	e59f3080 	ldr	r3, [pc, #128]	; d3a4 <g_lldUart_uartOpen_i32+0xc4>
    d320:	e5932000 	ldr	r2, [r3]
    d324:	e24b3040 	sub	r3, fp, #64	; 0x40
    d328:	e1a00002 	mov	r0, r2
    d32c:	e1a01003 	mov	r1, r3
    d330:	ebffedaa 	bl	89e0 <_init+0xe0>
	l_options_st.c_cflag = B9600 | CS8 | CLOCAL | CREAD;
    d334:	e59f306c 	ldr	r3, [pc, #108]	; d3a8 <g_lldUart_uartOpen_i32+0xc8>
    d338:	e50b3038 	str	r3, [fp, #-56]	; 0x38
	l_options_st.c_iflag = IGNPAR;
    d33c:	e3a03004 	mov	r3, #4
    d340:	e50b3040 	str	r3, [fp, #-64]	; 0x40
	l_options_st.c_oflag = 0;
    d344:	e3a03000 	mov	r3, #0
    d348:	e50b303c 	str	r3, [fp, #-60]	; 0x3c
	l_options_st.c_lflag = 0;
    d34c:	e3a03000 	mov	r3, #0
    d350:	e50b3034 	str	r3, [fp, #-52]	; 0x34
	tcflush(l_filestream_i32, TCIFLUSH);
    d354:	e59f3048 	ldr	r3, [pc, #72]	; d3a4 <g_lldUart_uartOpen_i32+0xc4>
    d358:	e5933000 	ldr	r3, [r3]
    d35c:	e1a00003 	mov	r0, r3
    d360:	e3a01000 	mov	r1, #0
    d364:	ebffeda0 	bl	89ec <_init+0xec>
	tcsetattr(l_filestream_i32, TCSANOW, &l_options_st);
    d368:	e59f3034 	ldr	r3, [pc, #52]	; d3a4 <g_lldUart_uartOpen_i32+0xc4>
    d36c:	e5932000 	ldr	r2, [r3]
    d370:	e24b3040 	sub	r3, fp, #64	; 0x40
    d374:	e1a00002 	mov	r0, r2
    d378:	e3a01000 	mov	r1, #0
    d37c:	e1a02003 	mov	r2, r3
    d380:	ebffedc3 	bl	8a94 <_init+0x194>
	sleep(3);
    d384:	e3a00003 	mov	r0, #3
    d388:	ebffedb5 	bl	8a64 <_init+0x164>
	return(0);
    d38c:	e3a03000 	mov	r3, #0
}
    d390:	e1a00003 	mov	r0, r3
    d394:	e24bd004 	sub	sp, fp, #4
    d398:	e8bd8800 	pop	{fp, pc}
    d39c:	00010ae0 	.word	0x00010ae0
    d3a0:	00000902 	.word	0x00000902
    d3a4:	00019258 	.word	0x00019258
    d3a8:	000008bd 	.word	0x000008bd

0000d3ac <g_lldUart_readByte_ch>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
char g_lldUart_readByte_ch(void)
{
    d3ac:	e92d4800 	push	{fp, lr}
    d3b0:	e28db004 	add	fp, sp, #4
    d3b4:	e24dd008 	sub	sp, sp, #8
	char l_recChar_ch='0';
    d3b8:	e3a03030 	mov	r3, #48	; 0x30
    d3bc:	e54b3009 	strb	r3, [fp, #-9]
	ssize_t l_nrReadBytes_ssize=0;
    d3c0:	e3a03000 	mov	r3, #0
    d3c4:	e50b3008 	str	r3, [fp, #-8]

	if (l_filestream_i32 == -1)
    d3c8:	e59f3064 	ldr	r3, [pc, #100]	; d434 <g_lldUart_readByte_ch+0x88>
    d3cc:	e5933000 	ldr	r3, [r3]
    d3d0:	e3730001 	cmn	r3, #1
    d3d4:	1a000000 	bne	d3dc <g_lldUart_readByte_ch+0x30>
	{
		g_lldUart_uartOpen_i32();
    d3d8:	ebffffc0 	bl	d2e0 <g_lldUart_uartOpen_i32>
	}

	//read new values if l_filestream_i32 is opened
	if (l_filestream_i32 != -1)
    d3dc:	e59f3050 	ldr	r3, [pc, #80]	; d434 <g_lldUart_readByte_ch+0x88>
    d3e0:	e5933000 	ldr	r3, [r3]
    d3e4:	e3730001 	cmn	r3, #1
    d3e8:	0a00000d 	beq	d424 <g_lldUart_readByte_ch+0x78>
	{
		while (l_nrReadBytes_ssize!=1)
    d3ec:	ea000007 	b	d410 <g_lldUart_readByte_ch+0x64>
		{ l_nrReadBytes_ssize=read(l_filestream_i32, &l_recChar_ch, 1);}
    d3f0:	e59f303c 	ldr	r3, [pc, #60]	; d434 <g_lldUart_readByte_ch+0x88>
    d3f4:	e5932000 	ldr	r2, [r3]
    d3f8:	e24b3009 	sub	r3, fp, #9
    d3fc:	e1a00002 	mov	r0, r2
    d400:	e1a01003 	mov	r1, r3
    d404:	e3a02001 	mov	r2, #1
    d408:	ebffed68 	bl	89b0 <_init+0xb0>
    d40c:	e50b0008 	str	r0, [fp, #-8]
	}

	//read new values if l_filestream_i32 is opened
	if (l_filestream_i32 != -1)
	{
		while (l_nrReadBytes_ssize!=1)
    d410:	e51b3008 	ldr	r3, [fp, #-8]
    d414:	e3530001 	cmp	r3, #1
    d418:	1afffff4 	bne	d3f0 <g_lldUart_readByte_ch+0x44>
		{ l_nrReadBytes_ssize=read(l_filestream_i32, &l_recChar_ch, 1);}
		return l_recChar_ch;
    d41c:	e55b3009 	ldrb	r3, [fp, #-9]
    d420:	ea000000 	b	d428 <g_lldUart_readByte_ch+0x7c>
	}
	return(-1);
    d424:	e3a030ff 	mov	r3, #255	; 0xff
}
    d428:	e1a00003 	mov	r0, r3
    d42c:	e24bd004 	sub	sp, fp, #4
    d430:	e8bd8800 	pop	{fp, pc}
    d434:	00019258 	.word	0x00019258

0000d438 <g_lldUart_uartClose_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_lldUart_uartClose_i32(void)
{
    d438:	e92d4800 	push	{fp, lr}
    d43c:	e28db004 	add	fp, sp, #4
	close(l_filestream_i32);
    d440:	e59f3014 	ldr	r3, [pc, #20]	; d45c <g_lldUart_uartClose_i32+0x24>
    d444:	e5933000 	ldr	r3, [r3]
    d448:	e1a00003 	mov	r0, r3
    d44c:	ebffed7e 	bl	8a4c <_init+0x14c>
	return(0);
    d450:	e3a03000 	mov	r3, #0
}
    d454:	e1a00003 	mov	r0, r3
    d458:	e8bd8800 	pop	{fp, pc}
    d45c:	00019258 	.word	0x00019258

0000d460 <getBLCtrlADRExecuteOrder>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void getBLCtrlADRExecuteOrder(char BLCtrlADRExecuteOrder[]){
    d460:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    d464:	e28db000 	add	fp, sp, #0
    d468:	e24dd00c 	sub	sp, sp, #12
    d46c:	e50b0008 	str	r0, [fp, #-8]
	BLCtrlADRExecuteOrder[DEFMotorNo6_OrderIDX]=BLCTRLADR[5];
	BLCtrlADRExecuteOrder[DEFMotorNo7_OrderIDX]=BLCTRLADR[6];
	BLCtrlADRExecuteOrder[DEFMotorNo8_OrderIDX]=BLCTRLADR[7];

#endif
}
    d470:	e24bd000 	sub	sp, fp, #0
    d474:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    d478:	e12fff1e 	bx	lr

0000d47c <g_halMatlab_sendImuState_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_sendImuState_bl(	int f_socketHandler_i32,
											halImu_orientationValues f_imuState_st) {
    d47c:	e24dd008 	sub	sp, sp, #8
    d480:	e92d4800 	push	{fp, lr}
    d484:	e28db004 	add	fp, sp, #4
    d488:	e24dd070 	sub	sp, sp, #112	; 0x70
    d48c:	e50b0070 	str	r0, [fp, #-112]	; 0x70
    d490:	e28b1004 	add	r1, fp, #4
    d494:	e881000c 	stm	r1, {r2, r3}
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    d498:	e24b306c 	sub	r3, fp, #108	; 0x6c
    d49c:	e3a00000 	mov	r0, #0
    d4a0:	e1a01003 	mov	r1, r3
    d4a4:	ebffed23 	bl	8938 <_init+0x38>
    d4a8:	e1a03000 	mov	r3, r0
    d4ac:	e3530000 	cmp	r3, #0
    d4b0:	0a000001 	beq	d4bc <g_halMatlab_sendImuState_bl+0x40>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    d4b4:	e3a03001 	mov	r3, #1
    d4b8:	ea000010 	b	d500 <g_halMatlab_sendImuState_bl+0x84>
	}

	//assmeble timestamp and
	l_rtImuPayload_st.timestamp_st 	= l_timestamp_st;
    d4bc:	e24b3064 	sub	r3, fp, #100	; 0x64
    d4c0:	e24b206c 	sub	r2, fp, #108	; 0x6c
    d4c4:	e8920003 	ldm	r2, {r0, r1}
    d4c8:	e8830003 	stm	r3, {r0, r1}
	l_rtImuPayload_st.imuState_st	= f_imuState_st;
    d4cc:	e24b105c 	sub	r1, fp, #92	; 0x5c
    d4d0:	e28b2004 	add	r2, fp, #4
    d4d4:	e3a03058 	mov	r3, #88	; 0x58
    d4d8:	e1a00001 	mov	r0, r1
    d4dc:	e1a01002 	mov	r1, r2
    d4e0:	e1a02003 	mov	r2, r3
    d4e4:	ebffed4f 	bl	8a28 <_init+0x128>

	return g_halMatlab_sendPacket_bl( 	f_socketHandler_i32,
    d4e8:	e24b3064 	sub	r3, fp, #100	; 0x64
    d4ec:	e51b0070 	ldr	r0, [fp, #-112]	; 0x70
    d4f0:	e1a01003 	mov	r1, r3
    d4f4:	e3a02060 	mov	r2, #96	; 0x60
    d4f8:	eb000175 	bl	dad4 <g_halMatlab_sendPacket_bl>
    d4fc:	e1a03000 	mov	r3, r0
										(unsigned char*)&l_rtImuPayload_st,
										sizeof( l_rtImuPayload_st ) );
}
    d500:	e1a00003 	mov	r0, r3
    d504:	e24bd004 	sub	sp, fp, #4
    d508:	e8bd4800 	pop	{fp, lr}
    d50c:	e28dd008 	add	sp, sp, #8
    d510:	e12fff1e 	bx	lr

0000d514 <g_halMatlab_recvImuStateAndTime_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halMatlab_rtImuPayload g_halMatlab_recvImuStateAndTime_bl(int f_socketHandler_i32) {
    d514:	e92d4800 	push	{fp, lr}
    d518:	e28db004 	add	fp, sp, #4
    d51c:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
    d520:	e50b00d0 	str	r0, [fp, #-208]	; 0xd0
    d524:	e50b10d4 	str	r1, [fp, #-212]	; 0xd4
	halMatlab_rtImuPayload 		l_recvImuState_st;
	unsigned char				l_recvBuffer_rgXui8[ sizeof(halMatlab_rtImuPayload) ];
	unsigned int				l_recvBytesNumber_ui32;

	// zero all values
	l_recvImuState_st.timestamp_st.tv_sec 	= 0;
    d528:	e3a03000 	mov	r3, #0
    d52c:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
	l_recvImuState_st.timestamp_st.tv_nsec 	= 0;
    d530:	e3a03000 	mov	r3, #0
    d534:	e50b3068 	str	r3, [fp, #-104]	; 0x68

	l_recvImuState_st.imuState_st.acc.x_f64 = 0;
    d538:	e3a02000 	mov	r2, #0
    d53c:	e3a03000 	mov	r3, #0
    d540:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
	l_recvImuState_st.imuState_st.acc.y_f64 = 0;
    d544:	e3a02000 	mov	r2, #0
    d548:	e3a03000 	mov	r3, #0
    d54c:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	l_recvImuState_st.imuState_st.acc.z_f64 = 0;
    d550:	e3a02000 	mov	r2, #0
    d554:	e3a03000 	mov	r3, #0
    d558:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac

	l_recvImuState_st.imuState_st.gyro.pitch_f64 = 0;
    d55c:	e3a02000 	mov	r2, #0
    d560:	e3a03000 	mov	r3, #0
    d564:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
	l_recvImuState_st.imuState_st.gyro.roll_f64 = 0;
    d568:	e3a02000 	mov	r2, #0
    d56c:	e3a03000 	mov	r3, #0
    d570:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	l_recvImuState_st.imuState_st.gyro.yaw_f64 = 0;
    d574:	e3a02000 	mov	r2, #0
    d578:	e3a03000 	mov	r3, #0
    d57c:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc

	l_recvImuState_st.imuState_st.mag.x_f64 = 0;
    d580:	e3a02000 	mov	r2, #0
    d584:	e3a03000 	mov	r3, #0
    d588:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
	l_recvImuState_st.imuState_st.mag.y_f64 = 0;
    d58c:	e3a02000 	mov	r2, #0
    d590:	e3a03000 	mov	r3, #0
    d594:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	l_recvImuState_st.imuState_st.mag.z_f64 = 0;
    d598:	e3a02000 	mov	r2, #0
    d59c:	e3a03000 	mov	r3, #0
    d5a0:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4

	l_recvImuState_st.imuState_st.pressure_f64 = 0;
    d5a4:	e3a02000 	mov	r2, #0
    d5a8:	e3a03000 	mov	r3, #0
    d5ac:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	l_recvImuState_st.imuState_st.temperature_f64 = 0;
    d5b0:	e3a02000 	mov	r2, #0
    d5b4:	e3a03000 	mov	r3, #0
    d5b8:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    d5bc:	e24b30cc 	sub	r3, fp, #204	; 0xcc
    d5c0:	e51b00d4 	ldr	r0, [fp, #-212]	; 0xd4
    d5c4:	e1a01003 	mov	r1, r3
    d5c8:	e3a02060 	mov	r2, #96	; 0x60
    d5cc:	eb00019f 	bl	dc50 <g_halMatlab_recvPacket_ui32>
    d5d0:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halMatlab_rtImuPayload) );

	if ( l_recvBytesNumber_ui32 == sizeof(halMatlab_rtImuPayload) )
    d5d4:	e51b3008 	ldr	r3, [fp, #-8]
    d5d8:	e3530060 	cmp	r3, #96	; 0x60
    d5dc:	1a000005 	bne	d5f8 <g_halMatlab_recvImuStateAndTime_bl+0xe4>
	{
		memcpy( &l_recvImuState_st, &l_recvBuffer_rgXui8, sizeof(halMatlab_rtImuPayload));
    d5e0:	e24b206c 	sub	r2, fp, #108	; 0x6c
    d5e4:	e24b30cc 	sub	r3, fp, #204	; 0xcc
    d5e8:	e1a00002 	mov	r0, r2
    d5ec:	e1a01003 	mov	r1, r3
    d5f0:	e3a02060 	mov	r2, #96	; 0x60
    d5f4:	ebffed0b 	bl	8a28 <_init+0x128>
	}

	return l_recvImuState_st;
    d5f8:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xd0
    d5fc:	e1a01003 	mov	r1, r3
    d600:	e24b206c 	sub	r2, fp, #108	; 0x6c
    d604:	e3a03060 	mov	r3, #96	; 0x60
    d608:	e1a00001 	mov	r0, r1
    d60c:	e1a01002 	mov	r1, r2
    d610:	e1a02003 	mov	r2, r3
    d614:	ebffed03 	bl	8a28 <_init+0x128>
}
    d618:	e51b00d0 	ldr	r0, [fp, #-208]	; 0xd0
    d61c:	e24bd004 	sub	sp, fp, #4
    d620:	e8bd8800 	pop	{fp, pc}

0000d624 <g_halMatlab_recvImuState_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halImu_orientationValues g_halMatlab_recvImuState_bl(int f_socketHandler_i32) {
    d624:	e92d4800 	push	{fp, lr}
    d628:	e28db004 	add	fp, sp, #4
    d62c:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
    d630:	e50b00c8 	str	r0, [fp, #-200]	; 0xc8
    d634:	e50b10cc 	str	r1, [fp, #-204]	; 0xcc
	halImu_orientationValues 		l_recvImuState_st;
	unsigned char				l_recvBuffer_rgXui8[ sizeof(halMatlab_rtImuPayload) ];
	unsigned int				l_recvBytesNumber_ui32;

	l_recvImuState_st.acc.x_f64 = 0;
    d638:	e3a02000 	mov	r2, #0
    d63c:	e3a03000 	mov	r3, #0
    d640:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
	l_recvImuState_st.acc.y_f64 = 0;
    d644:	e3a02000 	mov	r2, #0
    d648:	e3a03000 	mov	r3, #0
    d64c:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	l_recvImuState_st.acc.z_f64 = 0;
    d650:	e3a02000 	mov	r2, #0
    d654:	e3a03000 	mov	r3, #0
    d658:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac

	l_recvImuState_st.gyro.pitch_f64 = 0;
    d65c:	e3a02000 	mov	r2, #0
    d660:	e3a03000 	mov	r3, #0
    d664:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
	l_recvImuState_st.gyro.roll_f64 = 0;
    d668:	e3a02000 	mov	r2, #0
    d66c:	e3a03000 	mov	r3, #0
    d670:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	l_recvImuState_st.gyro.yaw_f64 = 0;
    d674:	e3a02000 	mov	r2, #0
    d678:	e3a03000 	mov	r3, #0
    d67c:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc

	l_recvImuState_st.mag.x_f64 = 0;
    d680:	e3a02000 	mov	r2, #0
    d684:	e3a03000 	mov	r3, #0
    d688:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
	l_recvImuState_st.mag.y_f64 = 0;
    d68c:	e3a02000 	mov	r2, #0
    d690:	e3a03000 	mov	r3, #0
    d694:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	l_recvImuState_st.mag.z_f64 = 0;
    d698:	e3a02000 	mov	r2, #0
    d69c:	e3a03000 	mov	r3, #0
    d6a0:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4

	l_recvImuState_st.pressure_f64 = 0;
    d6a4:	e3a02000 	mov	r2, #0
    d6a8:	e3a03000 	mov	r3, #0
    d6ac:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	l_recvImuState_st.temperature_f64 = 0;
    d6b0:	e3a02000 	mov	r2, #0
    d6b4:	e3a03000 	mov	r3, #0
    d6b8:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    d6bc:	e24b30c4 	sub	r3, fp, #196	; 0xc4
    d6c0:	e51b00cc 	ldr	r0, [fp, #-204]	; 0xcc
    d6c4:	e1a01003 	mov	r1, r3
    d6c8:	e3a02058 	mov	r2, #88	; 0x58
    d6cc:	eb00015f 	bl	dc50 <g_halMatlab_recvPacket_ui32>
    d6d0:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halImu_orientationValues) );

	if ( l_recvBytesNumber_ui32 == sizeof(halImu_orientationValues) )
    d6d4:	e51b3008 	ldr	r3, [fp, #-8]
    d6d8:	e3530058 	cmp	r3, #88	; 0x58
    d6dc:	1a000005 	bne	d6f8 <g_halMatlab_recvImuState_bl+0xd4>
	{
		memcpy( &l_recvImuState_st, &l_recvBuffer_rgXui8, sizeof(halImu_orientationValues));
    d6e0:	e24b2064 	sub	r2, fp, #100	; 0x64
    d6e4:	e24b30c4 	sub	r3, fp, #196	; 0xc4
    d6e8:	e1a00002 	mov	r0, r2
    d6ec:	e1a01003 	mov	r1, r3
    d6f0:	e3a02058 	mov	r2, #88	; 0x58
    d6f4:	ebffeccb 	bl	8a28 <_init+0x128>
	}

	return l_recvImuState_st;
    d6f8:	e51b30c8 	ldr	r3, [fp, #-200]	; 0xc8
    d6fc:	e1a01003 	mov	r1, r3
    d700:	e24b2064 	sub	r2, fp, #100	; 0x64
    d704:	e3a03058 	mov	r3, #88	; 0x58
    d708:	e1a00001 	mov	r0, r1
    d70c:	e1a01002 	mov	r1, r2
    d710:	e1a02003 	mov	r2, r3
    d714:	ebffecc3 	bl	8a28 <_init+0x128>
}
    d718:	e51b00c8 	ldr	r0, [fp, #-200]	; 0xc8
    d71c:	e24bd004 	sub	sp, fp, #4
    d720:	e8bd8800 	pop	{fp, pc}

0000d724 <l_findFreeSocketSlot_i16>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static signed short l_findFreeSocketSlot_i16(void)
{
    d724:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    d728:	e28db000 	add	fp, sp, #0
    d72c:	e24dd00c 	sub	sp, sp, #12
	signed short l_socketIndex_i16 = 0;
    d730:	e3a03000 	mov	r3, #0
    d734:	e14b30b6 	strh	r3, [fp, #-6]

	// find empty slot in socket library
	while( 		(m_socketManagementBuffer_rg8st[l_socketIndex_i16].socketHandler_i32 > 0)
    d738:	ea000002 	b	d748 <l_findFreeSocketSlot_i16+0x24>
			&& 	(l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8) )
	{
		l_socketIndex_i16++;
    d73c:	e15b30b6 	ldrh	r3, [fp, #-6]
    d740:	e2833001 	add	r3, r3, #1
    d744:	e14b30b6 	strh	r3, [fp, #-6]
static signed short l_findFreeSocketSlot_i16(void)
{
	signed short l_socketIndex_i16 = 0;

	// find empty slot in socket library
	while( 		(m_socketManagementBuffer_rg8st[l_socketIndex_i16].socketHandler_i32 > 0)
    d748:	e15b20f6 	ldrsh	r2, [fp, #-6]
    d74c:	e59f005c 	ldr	r0, [pc, #92]	; d7b0 <l_findFreeSocketSlot_i16+0x8c>
    d750:	e3a01020 	mov	r1, #32
    d754:	e1a03002 	mov	r3, r2
    d758:	e1a03183 	lsl	r3, r3, #3
    d75c:	e0833002 	add	r3, r3, r2
    d760:	e1a03103 	lsl	r3, r3, #2
    d764:	e0803003 	add	r3, r0, r3
    d768:	e0833001 	add	r3, r3, r1
    d76c:	e5933000 	ldr	r3, [r3]
    d770:	e3530000 	cmp	r3, #0
    d774:	da000002 	ble	d784 <l_findFreeSocketSlot_i16+0x60>
			&& 	(l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8) )
    d778:	e15b30f6 	ldrsh	r3, [fp, #-6]
    d77c:	e3530007 	cmp	r3, #7
    d780:	daffffed 	ble	d73c <l_findFreeSocketSlot_i16+0x18>
	{
		l_socketIndex_i16++;
	}

	// if all slots are occupied, do not open a new one
	if (l_socketIndex_i16 >= M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8)
    d784:	e15b30f6 	ldrsh	r3, [fp, #-6]
    d788:	e3530007 	cmp	r3, #7
    d78c:	da000001 	ble	d798 <l_findFreeSocketSlot_i16+0x74>
	{
		return M_HAL_MATLAB_ERROR_I8;
    d790:	e59f301c 	ldr	r3, [pc, #28]	; d7b4 <l_findFreeSocketSlot_i16+0x90>
    d794:	ea000000 	b	d79c <l_findFreeSocketSlot_i16+0x78>
	}

	return l_socketIndex_i16;
    d798:	e15b30b6 	ldrh	r3, [fp, #-6]
    d79c:	e6bf3073 	sxth	r3, r3
}
    d7a0:	e1a00003 	mov	r0, r3
    d7a4:	e24bd000 	sub	sp, fp, #0
    d7a8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    d7ac:	e12fff1e 	bx	lr
    d7b0:	000197e0 	.word	0x000197e0
    d7b4:	0000ffff 	.word	0x0000ffff

0000d7b8 <l_findSocket_i16>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static signed short l_findSocket_i16(signed int f_socketHandler_i32)
{
    d7b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    d7bc:	e28db000 	add	fp, sp, #0
    d7c0:	e24dd014 	sub	sp, sp, #20
    d7c4:	e50b0010 	str	r0, [fp, #-16]
	signed short l_socketIndex_i16 = 0;
    d7c8:	e3a03000 	mov	r3, #0
    d7cc:	e14b30b6 	strh	r3, [fp, #-6]

	if (f_socketHandler_i32 <= 0 )
    d7d0:	e51b3010 	ldr	r3, [fp, #-16]
    d7d4:	e3530000 	cmp	r3, #0
    d7d8:	ca000001 	bgt	d7e4 <l_findSocket_i16+0x2c>
	{
		return M_HAL_MATLAB_ERROR_I8;
    d7dc:	e59f3088 	ldr	r3, [pc, #136]	; d86c <l_findSocket_i16+0xb4>
    d7e0:	ea00001c 	b	d858 <l_findSocket_i16+0xa0>
	}

	// find socket handler
	for( l_socketIndex_i16=0; l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8; l_socketIndex_i16++ )
    d7e4:	e3a03000 	mov	r3, #0
    d7e8:	e14b30b6 	strh	r3, [fp, #-6]
    d7ec:	ea000010 	b	d834 <l_findSocket_i16+0x7c>
	{
		if ( m_socketManagementBuffer_rg8st[l_socketIndex_i16].socketHandler_i32 == f_socketHandler_i32 )
    d7f0:	e15b20f6 	ldrsh	r2, [fp, #-6]
    d7f4:	e59f0074 	ldr	r0, [pc, #116]	; d870 <l_findSocket_i16+0xb8>
    d7f8:	e3a01020 	mov	r1, #32
    d7fc:	e1a03002 	mov	r3, r2
    d800:	e1a03183 	lsl	r3, r3, #3
    d804:	e0833002 	add	r3, r3, r2
    d808:	e1a03103 	lsl	r3, r3, #2
    d80c:	e0803003 	add	r3, r0, r3
    d810:	e0833001 	add	r3, r3, r1
    d814:	e5932000 	ldr	r2, [r3]
    d818:	e51b3010 	ldr	r3, [fp, #-16]
    d81c:	e1520003 	cmp	r2, r3
    d820:	1a000000 	bne	d828 <l_findSocket_i16+0x70>
		{
			break;
    d824:	ea000005 	b	d840 <l_findSocket_i16+0x88>
	{
		return M_HAL_MATLAB_ERROR_I8;
	}

	// find socket handler
	for( l_socketIndex_i16=0; l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8; l_socketIndex_i16++ )
    d828:	e15b30b6 	ldrh	r3, [fp, #-6]
    d82c:	e2833001 	add	r3, r3, #1
    d830:	e14b30b6 	strh	r3, [fp, #-6]
    d834:	e15b30f6 	ldrsh	r3, [fp, #-6]
    d838:	e3530007 	cmp	r3, #7
    d83c:	daffffeb 	ble	d7f0 <l_findSocket_i16+0x38>
			break;
		}
	}

	// if all slots are occupied, do not open a new one
	if (l_socketIndex_i16 >= M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8)
    d840:	e15b30f6 	ldrsh	r3, [fp, #-6]
    d844:	e3530007 	cmp	r3, #7
    d848:	da000001 	ble	d854 <l_findSocket_i16+0x9c>
	{
		return M_HAL_MATLAB_ERROR_I8;
    d84c:	e59f3018 	ldr	r3, [pc, #24]	; d86c <l_findSocket_i16+0xb4>
    d850:	ea000000 	b	d858 <l_findSocket_i16+0xa0>
	}

	return l_socketIndex_i16;
    d854:	e15b30b6 	ldrh	r3, [fp, #-6]
    d858:	e6bf3073 	sxth	r3, r3
}
    d85c:	e1a00003 	mov	r0, r3
    d860:	e24bd000 	sub	sp, fp, #0
    d864:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    d868:	e12fff1e 	bx	lr
    d86c:	0000ffff 	.word	0x0000ffff
    d870:	000197e0 	.word	0x000197e0

0000d874 <g_halMatlab_initSocket_i32>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
int g_halMatlab_initSocket_i32(	unsigned short f_udpListenPort_ui16 )
{
    d874:	e92d4800 	push	{fp, lr}
    d878:	e28db004 	add	fp, sp, #4
    d87c:	e24dd010 	sub	sp, sp, #16
    d880:	e1a03000 	mov	r3, r0
    d884:	e14b30be 	strh	r3, [fp, #-14]
	signed short 			l_socketSlotCtr_i16 = 0;
    d888:	e3a03000 	mov	r3, #0
    d88c:	e14b30b6 	strh	r3, [fp, #-6]
	halMatlab_socketData* 	l_freeSocketSlot_pst;
#ifdef _WIN32
    WSADATA wsa;
#endif
    
	if ( (l_socketSlotCtr_i16 = l_findFreeSocketSlot_i16()) < 0)
    d890:	ebffffa3 	bl	d724 <l_findFreeSocketSlot_i16>
    d894:	e1a03000 	mov	r3, r0
    d898:	e14b30b6 	strh	r3, [fp, #-6]
    d89c:	e15b30f6 	ldrsh	r3, [fp, #-6]
    d8a0:	e3530000 	cmp	r3, #0
    d8a4:	aa000001 	bge	d8b0 <g_halMatlab_initSocket_i32+0x3c>
	{
		return M_HAL_MATLAB_ERROR_I8;
    d8a8:	e3e03000 	mvn	r3, #0
    d8ac:	ea00003c 	b	d9a4 <g_halMatlab_initSocket_i32+0x130>
	}


	l_freeSocketSlot_pst = &m_socketManagementBuffer_rg8st[l_socketSlotCtr_i16];
    d8b0:	e15b20f6 	ldrsh	r2, [fp, #-6]
    d8b4:	e1a03002 	mov	r3, r2
    d8b8:	e1a03183 	lsl	r3, r3, #3
    d8bc:	e0833002 	add	r3, r3, r2
    d8c0:	e1a03103 	lsl	r3, r3, #2
    d8c4:	e59f20e4 	ldr	r2, [pc, #228]	; d9b0 <g_halMatlab_initSocket_i32+0x13c>
    d8c8:	e0833002 	add	r3, r3, r2
    d8cc:	e50b300c 	str	r3, [fp, #-12]
	{
		return M_HAL_MATLAB_ERROR_I8;
	}
#endif
	// open socket
	if ( (l_freeSocketSlot_pst->socketHandler_i32 = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1 )
    d8d0:	e3a00002 	mov	r0, #2
    d8d4:	e3a01002 	mov	r1, #2
    d8d8:	e3a02011 	mov	r2, #17
    d8dc:	ebffec45 	bl	89f8 <_init+0xf8>
    d8e0:	e1a02000 	mov	r2, r0
    d8e4:	e51b300c 	ldr	r3, [fp, #-12]
    d8e8:	e5832020 	str	r2, [r3, #32]
    d8ec:	e51b300c 	ldr	r3, [fp, #-12]
    d8f0:	e5933020 	ldr	r3, [r3, #32]
    d8f4:	e3730001 	cmn	r3, #1
    d8f8:	1a000004 	bne	d910 <g_halMatlab_initSocket_i32+0x9c>
	{
		l_freeSocketSlot_pst->socketHandler_i32 = 0;
    d8fc:	e51b300c 	ldr	r3, [fp, #-12]
    d900:	e3a02000 	mov	r2, #0
    d904:	e5832020 	str	r2, [r3, #32]
		return M_HAL_MATLAB_ERROR_I8;
    d908:	e3e03000 	mvn	r3, #0
    d90c:	ea000024 	b	d9a4 <g_halMatlab_initSocket_i32+0x130>
	}

	// bind ip
	// -->zero out the structure
	memset(	(char*)&(l_freeSocketSlot_pst->sockAddrListen_st), 0, sizeof(l_freeSocketSlot_pst->sockAddrListen_st) );
    d910:	e51b300c 	ldr	r3, [fp, #-12]
    d914:	e1a00003 	mov	r0, r3
    d918:	e3a01000 	mov	r1, #0
    d91c:	e3a02010 	mov	r2, #16
    d920:	ebffec19 	bl	898c <_init+0x8c>

	l_freeSocketSlot_pst->sockAddrListen_st.sin_family 		= AF_INET;
    d924:	e51b300c 	ldr	r3, [fp, #-12]
    d928:	e3a02002 	mov	r2, #2
    d92c:	e1c320b0 	strh	r2, [r3]
	l_freeSocketSlot_pst->sockAddrListen_st.sin_port 		= htons((uint16_t)f_udpListenPort_ui16);
    d930:	e15b30be 	ldrh	r3, [fp, #-14]
    d934:	e1a00003 	mov	r0, r3
    d938:	ebffec10 	bl	8980 <_init+0x80>
    d93c:	e1a03000 	mov	r3, r0
    d940:	e1a02003 	mov	r2, r3
    d944:	e51b300c 	ldr	r3, [fp, #-12]
    d948:	e1c320b2 	strh	r2, [r3, #2]
	l_freeSocketSlot_pst->sockAddrListen_st.sin_addr.s_addr = htonl(INADDR_ANY);
    d94c:	e3a00000 	mov	r0, #0
    d950:	ebffec52 	bl	8aa0 <_init+0x1a0>
    d954:	e1a02000 	mov	r2, r0
    d958:	e51b300c 	ldr	r3, [fp, #-12]
    d95c:	e5832004 	str	r2, [r3, #4]

	//bind socket to port
	if( bind(	l_freeSocketSlot_pst->socketHandler_i32 ,
    d960:	e51b300c 	ldr	r3, [fp, #-12]
    d964:	e5932020 	ldr	r2, [r3, #32]
				(struct sockaddr*)&(l_freeSocketSlot_pst->sockAddrListen_st),
    d968:	e51b300c 	ldr	r3, [fp, #-12]
	l_freeSocketSlot_pst->sockAddrListen_st.sin_family 		= AF_INET;
	l_freeSocketSlot_pst->sockAddrListen_st.sin_port 		= htons((uint16_t)f_udpListenPort_ui16);
	l_freeSocketSlot_pst->sockAddrListen_st.sin_addr.s_addr = htonl(INADDR_ANY);

	//bind socket to port
	if( bind(	l_freeSocketSlot_pst->socketHandler_i32 ,
    d96c:	e1a00002 	mov	r0, r2
    d970:	e1a01003 	mov	r1, r3
    d974:	e3a02010 	mov	r2, #16
    d978:	ebffec30 	bl	8a40 <_init+0x140>
    d97c:	e1a03000 	mov	r3, r0
    d980:	e3730001 	cmn	r3, #1
    d984:	1a000004 	bne	d99c <g_halMatlab_initSocket_i32+0x128>
				(struct sockaddr*)&(l_freeSocketSlot_pst->sockAddrListen_st),
				sizeof(l_freeSocketSlot_pst->sockAddrListen_st)
				)
		== -1 )
	{
		l_freeSocketSlot_pst->socketHandler_i32 = 0;
    d988:	e51b300c 	ldr	r3, [fp, #-12]
    d98c:	e3a02000 	mov	r2, #0
    d990:	e5832020 	str	r2, [r3, #32]
		return M_HAL_MATLAB_ERROR_I8;
    d994:	e3e03000 	mvn	r3, #0
    d998:	ea000001 	b	d9a4 <g_halMatlab_initSocket_i32+0x130>
	}

	return l_freeSocketSlot_pst->socketHandler_i32;
    d99c:	e51b300c 	ldr	r3, [fp, #-12]
    d9a0:	e5933020 	ldr	r3, [r3, #32]
}
    d9a4:	e1a00003 	mov	r0, r3
    d9a8:	e24bd004 	sub	sp, fp, #4
    d9ac:	e8bd8800 	pop	{fp, pc}
    d9b0:	000197e0 	.word	0x000197e0

0000d9b4 <g_halMatlab_initConnection_i32>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
int 	g_halMatlab_initConnection_i32(const unsigned char* const f_destIpv4_rg4ui8, unsigned short f_udpConnectionPort_ui16 )
{
    d9b4:	e92d4800 	push	{fp, lr}
    d9b8:	e28db004 	add	fp, sp, #4
    d9bc:	e24dd010 	sub	sp, sp, #16
    d9c0:	e50b0010 	str	r0, [fp, #-16]
    d9c4:	e1a03001 	mov	r3, r1
    d9c8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	int	l_socketHandler_i32;

	// create socket
	if ( ( l_socketHandler_i32 = g_halMatlab_initSocket_i32(f_udpConnectionPort_ui16) ) <= 0 )
    d9cc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    d9d0:	e1a00003 	mov	r0, r3
    d9d4:	ebffffa6 	bl	d874 <g_halMatlab_initSocket_i32>
    d9d8:	e50b0008 	str	r0, [fp, #-8]
    d9dc:	e51b3008 	ldr	r3, [fp, #-8]
    d9e0:	e3530000 	cmp	r3, #0
    d9e4:	ca000001 	bgt	d9f0 <g_halMatlab_initConnection_i32+0x3c>
	{
		// error occurred
		return M_HAL_MATLAB_ERROR_I8;
    d9e8:	e3e03000 	mvn	r3, #0
    d9ec:	ea00000a 	b	da1c <g_halMatlab_initConnection_i32+0x68>
	 *                        |  >Local machine>  |
	 *  ----------------------+  >sends to 5000>  +-----------------------
	 *     Local machine                               Remote machine
	 *
	 */
	if ( g_halMatlab_configSocket_bl(l_socketHandler_i32, f_destIpv4_rg4ui8, f_udpConnectionPort_ui16) != M_HAL_MATLAB_SUCCESS_UI8 )
    d9f0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    d9f4:	e51b0008 	ldr	r0, [fp, #-8]
    d9f8:	e51b1010 	ldr	r1, [fp, #-16]
    d9fc:	e1a02003 	mov	r2, r3
    da00:	eb0000c2 	bl	dd10 <g_halMatlab_configSocket_bl>
    da04:	e1a03000 	mov	r3, r0
    da08:	e3530000 	cmp	r3, #0
    da0c:	0a000001 	beq	da18 <g_halMatlab_initConnection_i32+0x64>
	{
		// error occurred
		return M_HAL_MATLAB_ERROR_I8;
    da10:	e3e03000 	mvn	r3, #0
    da14:	ea000000 	b	da1c <g_halMatlab_initConnection_i32+0x68>
	}

	return l_socketHandler_i32;
    da18:	e51b3008 	ldr	r3, [fp, #-8]
}
    da1c:	e1a00003 	mov	r0, r3
    da20:	e24bd004 	sub	sp, fp, #4
    da24:	e8bd8800 	pop	{fp, pc}

0000da28 <g_halMatlab_closeSocket_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_closeSocket_bl(int f_socketHandler_i32)
{
    da28:	e92d4800 	push	{fp, lr}
    da2c:	e28db004 	add	fp, sp, #4
    da30:	e24dd010 	sub	sp, sp, #16
    da34:	e50b0010 	str	r0, [fp, #-16]
	signed short l_socketSlotNumber_i16 = 0;
    da38:	e3a03000 	mov	r3, #0
    da3c:	e14b30b6 	strh	r3, [fp, #-6]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    da40:	e51b0010 	ldr	r0, [fp, #-16]
    da44:	ebffff5b 	bl	d7b8 <l_findSocket_i16>
    da48:	e1a03000 	mov	r3, r0
    da4c:	e14b30b6 	strh	r3, [fp, #-6]
    da50:	e15b30f6 	ldrsh	r3, [fp, #-6]
    da54:	e3530000 	cmp	r3, #0
    da58:	aa000001 	bge	da64 <g_halMatlab_closeSocket_bl+0x3c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    da5c:	e3a03001 	mov	r3, #1
    da60:	ea000017 	b	dac4 <g_halMatlab_closeSocket_bl+0x9c>
	}

#ifdef __linux__
	/* close socket */
	close( m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16].socketHandler_i32 );
    da64:	e15b20f6 	ldrsh	r2, [fp, #-6]
    da68:	e59f0060 	ldr	r0, [pc, #96]	; dad0 <g_halMatlab_closeSocket_bl+0xa8>
    da6c:	e3a01020 	mov	r1, #32
    da70:	e1a03002 	mov	r3, r2
    da74:	e1a03183 	lsl	r3, r3, #3
    da78:	e0833002 	add	r3, r3, r2
    da7c:	e1a03103 	lsl	r3, r3, #2
    da80:	e0803003 	add	r3, r0, r3
    da84:	e0833001 	add	r3, r3, r1
    da88:	e5933000 	ldr	r3, [r3]
    da8c:	e1a00003 	mov	r0, r3
    da90:	ebffebed 	bl	8a4c <_init+0x14c>
#elif _WIN32
    closesocket(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16].socketHandler_i32);
    WSACleanup();
#endif
	/* free slot */
	m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16].socketHandler_i32 = 0;
    da94:	e15b20f6 	ldrsh	r2, [fp, #-6]
    da98:	e59f0030 	ldr	r0, [pc, #48]	; dad0 <g_halMatlab_closeSocket_bl+0xa8>
    da9c:	e3a01020 	mov	r1, #32
    daa0:	e1a03002 	mov	r3, r2
    daa4:	e1a03183 	lsl	r3, r3, #3
    daa8:	e0833002 	add	r3, r3, r2
    daac:	e1a03103 	lsl	r3, r3, #2
    dab0:	e0803003 	add	r3, r0, r3
    dab4:	e0833001 	add	r3, r3, r1
    dab8:	e3a02000 	mov	r2, #0
    dabc:	e5832000 	str	r2, [r3]

	return M_HAL_MATLAB_SUCCESS_UI8;
    dac0:	e3a03000 	mov	r3, #0
}
    dac4:	e1a00003 	mov	r0, r3
    dac8:	e24bd004 	sub	sp, fp, #4
    dacc:	e8bd8800 	pop	{fp, pc}
    dad0:	000197e0 	.word	0x000197e0

0000dad4 <g_halMatlab_sendPacket_bl>:
 ***********************************************************************/
unsigned int g_halMatlab_sendPacket_bl(	int f_socketHandler_i32,
										const unsigned char* const f_sendBuffer_pui8,
										unsigned int f_sendBufferSize_ui32
										)
{
    dad4:	e92d4800 	push	{fp, lr}
    dad8:	e28db004 	add	fp, sp, #4
    dadc:	e24dd028 	sub	sp, sp, #40	; 0x28
    dae0:	e50b0018 	str	r0, [fp, #-24]
    dae4:	e50b101c 	str	r1, [fp, #-28]
    dae8:	e50b2020 	str	r2, [fp, #-32]
	int						l_sendSuccess_i32		= -1;
    daec:	e3e03000 	mvn	r3, #0
    daf0:	e50b3008 	str	r3, [fp, #-8]
	signed short 			l_socketSlotNumber_i16 	= 0;
    daf4:	e3a03000 	mov	r3, #0
    daf8:	e14b30ba 	strh	r3, [fp, #-10]
	halMatlab_socketData* 	l_socketConfig_pst		= 0;
    dafc:	e3a03000 	mov	r3, #0
    db00:	e50b3010 	str	r3, [fp, #-16]
	unsigned int			l_socketStructSize_ui32	= 0;
    db04:	e3a03000 	mov	r3, #0
    db08:	e50b3014 	str	r3, [fp, #-20]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    db0c:	e51b0018 	ldr	r0, [fp, #-24]
    db10:	ebffff28 	bl	d7b8 <l_findSocket_i16>
    db14:	e1a03000 	mov	r3, r0
    db18:	e14b30ba 	strh	r3, [fp, #-10]
    db1c:	e15b30fa 	ldrsh	r3, [fp, #-10]
    db20:	e3530000 	cmp	r3, #0
    db24:	aa000001 	bge	db30 <g_halMatlab_sendPacket_bl+0x5c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    db28:	e3a03001 	mov	r3, #1
    db2c:	ea00001a 	b	db9c <g_halMatlab_sendPacket_bl+0xc8>
	}

	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);
    db30:	e15b20fa 	ldrsh	r2, [fp, #-10]
    db34:	e1a03002 	mov	r3, r2
    db38:	e1a03183 	lsl	r3, r3, #3
    db3c:	e0833002 	add	r3, r3, r2
    db40:	e1a03103 	lsl	r3, r3, #2
    db44:	e59f205c 	ldr	r2, [pc, #92]	; dba8 <g_halMatlab_sendPacket_bl+0xd4>
    db48:	e0833002 	add	r3, r3, r2
    db4c:	e50b3010 	str	r3, [fp, #-16]

	// send telegram
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
    db50:	e3a03010 	mov	r3, #16
    db54:	e50b3014 	str	r3, [fp, #-20]
	l_sendSuccess_i32 = sendto(	f_socketHandler_i32,
								f_sendBuffer_pui8,
								f_sendBufferSize_ui32,
								0 ,
								(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
    db58:	e51b3010 	ldr	r3, [fp, #-16]
    db5c:	e2833010 	add	r3, r3, #16
	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);

	// send telegram
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
	l_sendSuccess_i32 = sendto(	f_socketHandler_i32,
    db60:	e58d3000 	str	r3, [sp]
    db64:	e51b3014 	ldr	r3, [fp, #-20]
    db68:	e58d3004 	str	r3, [sp, #4]
    db6c:	e51b0018 	ldr	r0, [fp, #-24]
    db70:	e51b101c 	ldr	r1, [fp, #-28]
    db74:	e51b2020 	ldr	r2, [fp, #-32]
    db78:	e3a03000 	mov	r3, #0
    db7c:	ebffeb7c 	bl	8974 <_init+0x74>
    db80:	e50b0008 	str	r0, [fp, #-8]
								f_sendBufferSize_ui32,
								0 ,
								(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
								l_socketStructSize_ui32 );

	if ( l_sendSuccess_i32 == M_HAL_MATLAB_ERROR_I8 )
    db84:	e51b3008 	ldr	r3, [fp, #-8]
    db88:	e3730001 	cmn	r3, #1
    db8c:	1a000001 	bne	db98 <g_halMatlab_sendPacket_bl+0xc4>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    db90:	e3a03001 	mov	r3, #1
    db94:	ea000000 	b	db9c <g_halMatlab_sendPacket_bl+0xc8>
	}else{
		return M_HAL_MATLAB_SUCCESS_UI8;
    db98:	e3a03000 	mov	r3, #0
	}
}
    db9c:	e1a00003 	mov	r0, r3
    dba0:	e24bd004 	sub	sp, fp, #4
    dba4:	e8bd8800 	pop	{fp, pc}
    dba8:	000197e0 	.word	0x000197e0

0000dbac <g_halMatlab_sendRtDataPacket_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_sendRtDataPacket_bl(	int f_socketHandler_i32,
												const unsigned char* const f_sendBuffer_pui8,
												unsigned int f_sendBufferSize_ui32)
{
    dbac:	e92d4800 	push	{fp, lr}
    dbb0:	e28db004 	add	fp, sp, #4
    dbb4:	e24dde22 	sub	sp, sp, #544	; 0x220
    dbb8:	e50b0218 	str	r0, [fp, #-536]	; 0x218
    dbbc:	e50b121c 	str	r1, [fp, #-540]	; 0x21c
    dbc0:	e50b2220 	str	r2, [fp, #-544]	; 0x220
	struct timespec			l_timestamp_st;
	unsigned char			l_sendBuffer_rgXi8[M_HAL_MATLAB_SEND_BUFFER_SIZE_UI16];
	unsigned int			l_sizePayload_ui32		= 0;
    dbc4:	e3a03000 	mov	r3, #0
    dbc8:	e50b3008 	str	r3, [fp, #-8]
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    dbcc:	e24b3010 	sub	r3, fp, #16
    dbd0:	e3a00000 	mov	r0, #0
    dbd4:	e1a01003 	mov	r1, r3
    dbd8:	ebffeb56 	bl	8938 <_init+0x38>
    dbdc:	e1a03000 	mov	r3, r0
    dbe0:	e3530000 	cmp	r3, #0
    dbe4:	0a000001 	beq	dbf0 <g_halMatlab_sendRtDataPacket_bl+0x44>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    dbe8:	e3a03001 	mov	r3, #1
    dbec:	ea000014 	b	dc44 <g_halMatlab_sendRtDataPacket_bl+0x98>
	}

	// add timestamp to payload data
	memcpy(	l_sendBuffer_rgXi8,
    dbf0:	e24b2e21 	sub	r2, fp, #528	; 0x210
    dbf4:	e24b3010 	sub	r3, fp, #16
    dbf8:	e1a00002 	mov	r0, r2
    dbfc:	e1a01003 	mov	r1, r3
    dc00:	e3a02008 	mov	r2, #8
    dc04:	ebffeb87 	bl	8a28 <_init+0x128>
			&l_timestamp_st,
			sizeof(l_timestamp_st) );
	memcpy(	(l_sendBuffer_rgXi8+sizeof(l_timestamp_st)),
    dc08:	e24b3e21 	sub	r3, fp, #528	; 0x210
    dc0c:	e2833008 	add	r3, r3, #8
    dc10:	e1a00003 	mov	r0, r3
    dc14:	e51b121c 	ldr	r1, [fp, #-540]	; 0x21c
    dc18:	e51b2220 	ldr	r2, [fp, #-544]	; 0x220
    dc1c:	ebffeb81 	bl	8a28 <_init+0x128>
			f_sendBuffer_pui8,
			f_sendBufferSize_ui32 );

	// adjust size of telegram's payload (due to added timestamp)
	l_sizePayload_ui32 = f_sendBufferSize_ui32 + sizeof(l_timestamp_st);
    dc20:	e51b3220 	ldr	r3, [fp, #-544]	; 0x220
    dc24:	e2833008 	add	r3, r3, #8
    dc28:	e50b3008 	str	r3, [fp, #-8]

	return g_halMatlab_sendPacket_bl(f_socketHandler_i32, l_sendBuffer_rgXi8, l_sizePayload_ui32);
    dc2c:	e24b3e21 	sub	r3, fp, #528	; 0x210
    dc30:	e51b0218 	ldr	r0, [fp, #-536]	; 0x218
    dc34:	e1a01003 	mov	r1, r3
    dc38:	e51b2008 	ldr	r2, [fp, #-8]
    dc3c:	ebffffa4 	bl	dad4 <g_halMatlab_sendPacket_bl>
    dc40:	e1a03000 	mov	r3, r0
}
    dc44:	e1a00003 	mov	r0, r3
    dc48:	e24bd004 	sub	sp, fp, #4
    dc4c:	e8bd8800 	pop	{fp, pc}

0000dc50 <g_halMatlab_recvPacket_ui32>:
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_recvPacket_ui32( int f_socketHandler_i32,
		unsigned char* const f_recvBuffer_pui8,
		unsigned int f_recvBufferSize_ui32)
{
    dc50:	e92d4800 	push	{fp, lr}
    dc54:	e28db004 	add	fp, sp, #4
    dc58:	e24dd028 	sub	sp, sp, #40	; 0x28
    dc5c:	e50b0018 	str	r0, [fp, #-24]
    dc60:	e50b101c 	str	r1, [fp, #-28]
    dc64:	e50b2020 	str	r2, [fp, #-32]
	signed short 			l_socketSlotNumber_i16 	= 0;
    dc68:	e3a03000 	mov	r3, #0
    dc6c:	e14b30b6 	strh	r3, [fp, #-6]
	halMatlab_socketData* 	l_socketConfig_pst		= 0;
    dc70:	e3a03000 	mov	r3, #0
    dc74:	e50b300c 	str	r3, [fp, #-12]
	int						l_recvFromFlag_i32		= 0;	// blocking behavior (standard)
    dc78:	e3a03000 	mov	r3, #0
    dc7c:	e50b3010 	str	r3, [fp, #-16]
	unsigned int			l_socketStructSize_ui32	= 0;
    dc80:	e3a03000 	mov	r3, #0
    dc84:	e50b3014 	str	r3, [fp, #-20]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    dc88:	e51b0018 	ldr	r0, [fp, #-24]
    dc8c:	ebfffec9 	bl	d7b8 <l_findSocket_i16>
    dc90:	e1a03000 	mov	r3, r0
    dc94:	e14b30b6 	strh	r3, [fp, #-6]
    dc98:	e15b30f6 	ldrsh	r3, [fp, #-6]
    dc9c:	e3530000 	cmp	r3, #0
    dca0:	aa000001 	bge	dcac <g_halMatlab_recvPacket_ui32+0x5c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    dca4:	e3a03001 	mov	r3, #1
    dca8:	ea000014 	b	dd00 <g_halMatlab_recvPacket_ui32+0xb0>
	}

	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);
    dcac:	e15b20f6 	ldrsh	r2, [fp, #-6]
    dcb0:	e1a03002 	mov	r3, r2
    dcb4:	e1a03183 	lsl	r3, r3, #3
    dcb8:	e0833002 	add	r3, r3, r2
    dcbc:	e1a03103 	lsl	r3, r3, #2
    dcc0:	e59f2044 	ldr	r2, [pc, #68]	; dd0c <g_halMatlab_recvPacket_ui32+0xbc>
    dcc4:	e0833002 	add	r3, r3, r2
    dcc8:	e50b300c 	str	r3, [fp, #-12]
//		// blocking behavior (standard)
//		l_recvFromFlag_i32 = 0;
//	}

	// recv telegram (blocking!)
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
    dccc:	e3a03010 	mov	r3, #16
    dcd0:	e50b3014 	str	r3, [fp, #-20]
	return recvfrom(	f_socketHandler_i32,
						f_recvBuffer_pui8,
						f_recvBufferSize_ui32,
						l_recvFromFlag_i32,
						(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
    dcd4:	e51b300c 	ldr	r3, [fp, #-12]
    dcd8:	e2833010 	add	r3, r3, #16
//		l_recvFromFlag_i32 = 0;
//	}

	// recv telegram (blocking!)
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
	return recvfrom(	f_socketHandler_i32,
    dcdc:	e58d3000 	str	r3, [sp]
    dce0:	e24b3014 	sub	r3, fp, #20
    dce4:	e58d3004 	str	r3, [sp, #4]
    dce8:	e51b0018 	ldr	r0, [fp, #-24]
    dcec:	e51b101c 	ldr	r1, [fp, #-28]
    dcf0:	e51b2020 	ldr	r2, [fp, #-32]
    dcf4:	e51b3010 	ldr	r3, [fp, #-16]
    dcf8:	ebffeb6e 	bl	8ab8 <_init+0x1b8>
    dcfc:	e1a03000 	mov	r3, r0
						f_recvBuffer_pui8,
						f_recvBufferSize_ui32,
						l_recvFromFlag_i32,
						(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
						&l_socketStructSize_ui32);
}
    dd00:	e1a00003 	mov	r0, r3
    dd04:	e24bd004 	sub	sp, fp, #4
    dd08:	e8bd8800 	pop	{fp, pc}
    dd0c:	000197e0 	.word	0x000197e0

0000dd10 <g_halMatlab_configSocket_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_configSocket_bl(	int f_socketHandler_i32,
		const unsigned char* const f_destIpv4_rg4ui8,
		unsigned short f_destPort_ui16)
{
    dd10:	e92d4800 	push	{fp, lr}
    dd14:	e28db004 	add	fp, sp, #4
    dd18:	e24dd020 	sub	sp, sp, #32
    dd1c:	e50b0018 	str	r0, [fp, #-24]
    dd20:	e50b101c 	str	r1, [fp, #-28]
    dd24:	e1a03002 	mov	r3, r2
    dd28:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
	signed short 			l_socketSlotNumber_i16 	= 0;
    dd2c:	e3a03000 	mov	r3, #0
    dd30:	e14b30b6 	strh	r3, [fp, #-6]
	halMatlab_socketData* 	l_socketConfig_pst		= 0;
    dd34:	e3a03000 	mov	r3, #0
    dd38:	e50b300c 	str	r3, [fp, #-12]
	unsigned int			l_ipv4Addr_ui32			= 0;
    dd3c:	e3a03000 	mov	r3, #0
    dd40:	e50b3010 	str	r3, [fp, #-16]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    dd44:	e51b0018 	ldr	r0, [fp, #-24]
    dd48:	ebfffe9a 	bl	d7b8 <l_findSocket_i16>
    dd4c:	e1a03000 	mov	r3, r0
    dd50:	e14b30b6 	strh	r3, [fp, #-6]
    dd54:	e15b30f6 	ldrsh	r3, [fp, #-6]
    dd58:	e3530000 	cmp	r3, #0
    dd5c:	aa000001 	bge	dd68 <g_halMatlab_configSocket_bl+0x58>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    dd60:	e3a03001 	mov	r3, #1
    dd64:	ea00002f 	b	de28 <g_halMatlab_configSocket_bl+0x118>
	}

	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);
    dd68:	e15b20f6 	ldrsh	r2, [fp, #-6]
    dd6c:	e1a03002 	mov	r3, r2
    dd70:	e1a03183 	lsl	r3, r3, #3
    dd74:	e0833002 	add	r3, r3, r2
    dd78:	e1a03103 	lsl	r3, r3, #2
    dd7c:	e59f20b0 	ldr	r2, [pc, #176]	; de34 <g_halMatlab_configSocket_bl+0x124>
    dd80:	e0833002 	add	r3, r3, r2
    dd84:	e50b300c 	str	r3, [fp, #-12]

	// set values in l_socketConfig_pst->sockAddrRemote_st
	memset((char*) &l_socketConfig_pst->sockAddrRemote_st, 0, sizeof(l_socketConfig_pst->sockAddrRemote_st));
    dd88:	e51b300c 	ldr	r3, [fp, #-12]
    dd8c:	e2833010 	add	r3, r3, #16
    dd90:	e1a00003 	mov	r0, r3
    dd94:	e3a01000 	mov	r1, #0
    dd98:	e3a02010 	mov	r2, #16
    dd9c:	ebffeafa 	bl	898c <_init+0x8c>
	l_socketConfig_pst->sockAddrRemote_st.sin_family = AF_INET;
    dda0:	e51b300c 	ldr	r3, [fp, #-12]
    dda4:	e3a02002 	mov	r2, #2
    dda8:	e1c321b0 	strh	r2, [r3, #16]
	l_socketConfig_pst->sockAddrRemote_st.sin_port = htons(f_destPort_ui16);
    ddac:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
    ddb0:	e1a00003 	mov	r0, r3
    ddb4:	ebffeaf1 	bl	8980 <_init+0x80>
    ddb8:	e1a03000 	mov	r3, r0
    ddbc:	e1a02003 	mov	r2, r3
    ddc0:	e51b300c 	ldr	r3, [fp, #-12]
    ddc4:	e1c321b2 	strh	r2, [r3, #18]

	// assemble 4 bytes of IPv4 address into one 32bit value
	l_ipv4Addr_ui32 = 		( f_destIpv4_rg4ui8[0] << 24 )
    ddc8:	e51b301c 	ldr	r3, [fp, #-28]
    ddcc:	e5d33000 	ldrb	r3, [r3]
    ddd0:	e1a02c03 	lsl	r2, r3, #24
						+ 	( f_destIpv4_rg4ui8[1] << 16 )
    ddd4:	e51b301c 	ldr	r3, [fp, #-28]
    ddd8:	e2833001 	add	r3, r3, #1
    dddc:	e5d33000 	ldrb	r3, [r3]
    dde0:	e1a03803 	lsl	r3, r3, #16
    dde4:	e0822003 	add	r2, r2, r3
						+ 	( f_destIpv4_rg4ui8[2] << 8 )
    dde8:	e51b301c 	ldr	r3, [fp, #-28]
    ddec:	e2833002 	add	r3, r3, #2
    ddf0:	e5d33000 	ldrb	r3, [r3]
    ddf4:	e1a03403 	lsl	r3, r3, #8
    ddf8:	e0822003 	add	r2, r2, r3
						+ 	( f_destIpv4_rg4ui8[3] );
    ddfc:	e51b301c 	ldr	r3, [fp, #-28]
    de00:	e2833003 	add	r3, r3, #3
    de04:	e5d33000 	ldrb	r3, [r3]
    de08:	e0823003 	add	r3, r2, r3
	memset((char*) &l_socketConfig_pst->sockAddrRemote_st, 0, sizeof(l_socketConfig_pst->sockAddrRemote_st));
	l_socketConfig_pst->sockAddrRemote_st.sin_family = AF_INET;
	l_socketConfig_pst->sockAddrRemote_st.sin_port = htons(f_destPort_ui16);

	// assemble 4 bytes of IPv4 address into one 32bit value
	l_ipv4Addr_ui32 = 		( f_destIpv4_rg4ui8[0] << 24 )
    de0c:	e50b3010 	str	r3, [fp, #-16]
						+ 	( f_destIpv4_rg4ui8[1] << 16 )
						+ 	( f_destIpv4_rg4ui8[2] << 8 )
						+ 	( f_destIpv4_rg4ui8[3] );

	l_socketConfig_pst->sockAddrRemote_st.sin_addr.s_addr = htonl( l_ipv4Addr_ui32 );
    de10:	e51b0010 	ldr	r0, [fp, #-16]
    de14:	ebffeb21 	bl	8aa0 <_init+0x1a0>
    de18:	e1a02000 	mov	r2, r0
    de1c:	e51b300c 	ldr	r3, [fp, #-12]
    de20:	e5832014 	str	r2, [r3, #20]

	return M_HAL_MATLAB_SUCCESS_UI8;
    de24:	e3a03000 	mov	r3, #0
}
    de28:	e1a00003 	mov	r0, r3
    de2c:	e24bd004 	sub	sp, fp, #4
    de30:	e8bd8800 	pop	{fp, pc}
    de34:	000197e0 	.word	0x000197e0

0000de38 <g_halMatlab_sendSigState_bl>:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_sendSigState_bl(	int f_socketHandler_i32,
											sigOri_orientationAngles f_sigState_st )
{
    de38:	e92d4800 	push	{fp, lr}
    de3c:	e28db004 	add	fp, sp, #4
    de40:	e24dd048 	sub	sp, sp, #72	; 0x48
    de44:	e50b0030 	str	r0, [fp, #-48]	; 0x30
    de48:	eeb05b40 	vmov.f64	d5, d0
    de4c:	eeb06b41 	vmov.f64	d6, d1
    de50:	eeb07b42 	vmov.f64	d7, d2
    de54:	ed0b5b13 	vstr	d5, [fp, #-76]	; 0xffffffb4
    de58:	ed0b6b11 	vstr	d6, [fp, #-68]	; 0xffffffbc
    de5c:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    de60:	e24b302c 	sub	r3, fp, #44	; 0x2c
    de64:	e3a00000 	mov	r0, #0
    de68:	e1a01003 	mov	r1, r3
    de6c:	ebffeab1 	bl	8938 <_init+0x38>
    de70:	e1a03000 	mov	r3, r0
    de74:	e3530000 	cmp	r3, #0
    de78:	0a000001 	beq	de84 <g_halMatlab_sendSigState_bl+0x4c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    de7c:	e3a03001 	mov	r3, #1
    de80:	ea00000f 	b	dec4 <g_halMatlab_sendSigState_bl+0x8c>
	}

	//assmeble timestamp and
	l_rtSigPayload_st.timestamp_st 	= l_timestamp_st;
    de84:	e24b3024 	sub	r3, fp, #36	; 0x24
    de88:	e24b202c 	sub	r2, fp, #44	; 0x2c
    de8c:	e8920003 	ldm	r2, {r0, r1}
    de90:	e8830003 	stm	r3, {r0, r1}
	l_rtSigPayload_st.sigState_st	= f_sigState_st;
    de94:	e24bc01c 	sub	ip, fp, #28
    de98:	e24be04c 	sub	lr, fp, #76	; 0x4c
    de9c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    dea0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    dea4:	e89e0003 	ldm	lr, {r0, r1}
    dea8:	e88c0003 	stm	ip, {r0, r1}

	return g_halMatlab_sendPacket_bl( 	f_socketHandler_i32,
    deac:	e24b3024 	sub	r3, fp, #36	; 0x24
    deb0:	e51b0030 	ldr	r0, [fp, #-48]	; 0x30
    deb4:	e1a01003 	mov	r1, r3
    deb8:	e3a02020 	mov	r2, #32
    debc:	ebffff04 	bl	dad4 <g_halMatlab_sendPacket_bl>
    dec0:	e1a03000 	mov	r3, r0
										(unsigned char*)&l_rtSigPayload_st,
										sizeof( l_rtSigPayload_st ) );
}
    dec4:	e1a00003 	mov	r0, r3
    dec8:	e24bd004 	sub	sp, fp, #4
    decc:	e8bd8800 	pop	{fp, pc}

0000ded0 <g_halMatlab_sendSigAllStates_bl>:
 ***********************************************************************/
unsigned int g_halMatlab_sendSigAllStates_bl(	int f_socketHandler_i32,
												halImu_orientationValues f_rawImuState_st,
												sigOri_orientationAngles f_sigKalmanState_st,
												sigOri_orientationAngles f_sigComplementaryState_st )
{
    ded0:	e24dd008 	sub	sp, sp, #8
    ded4:	e92d4800 	push	{fp, lr}
    ded8:	e28db004 	add	fp, sp, #4
    dedc:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
    dee0:	e50b00a0 	str	r0, [fp, #-160]	; 0xa0
    dee4:	e28b1004 	add	r1, fp, #4
    dee8:	e881000c 	stm	r1, {r2, r3}
    deec:	eeb06b44 	vmov.f64	d6, d4
    def0:	eeb07b45 	vmov.f64	d7, d5
    def4:	ed0b0b2f 	vstr	d0, [fp, #-188]	; 0xffffff44
    def8:	ed0b1b2d 	vstr	d1, [fp, #-180]	; 0xffffff4c
    defc:	ed0b2b2b 	vstr	d2, [fp, #-172]	; 0xffffff54
    df00:	ed0b3b35 	vstr	d3, [fp, #-212]	; 0xffffff2c
    df04:	ed0b6b33 	vstr	d6, [fp, #-204]	; 0xffffff34
    df08:	ed0b7b31 	vstr	d7, [fp, #-196]	; 0xffffff3c
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    df0c:	e24b309c 	sub	r3, fp, #156	; 0x9c
    df10:	e3a00000 	mov	r0, #0
    df14:	e1a01003 	mov	r1, r3
    df18:	ebffea86 	bl	8938 <_init+0x38>
    df1c:	e1a03000 	mov	r3, r0
    df20:	e3530000 	cmp	r3, #0
    df24:	0a000001 	beq	df30 <g_halMatlab_sendSigAllStates_bl+0x60>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    df28:	e3a03001 	mov	r3, #1
    df2c:	ea00001c 	b	dfa4 <g_halMatlab_sendSigAllStates_bl+0xd4>
	}

	//assmeble timestamp and
	l_rtCompleteSigPayload_st.timestamp_st 				= l_timestamp_st;
    df30:	e24b3094 	sub	r3, fp, #148	; 0x94
    df34:	e24b209c 	sub	r2, fp, #156	; 0x9c
    df38:	e8920003 	ldm	r2, {r0, r1}
    df3c:	e8830003 	stm	r3, {r0, r1}
	l_rtCompleteSigPayload_st.imuState_st				= f_rawImuState_st;
    df40:	e24b108c 	sub	r1, fp, #140	; 0x8c
    df44:	e28b2004 	add	r2, fp, #4
    df48:	e3a03058 	mov	r3, #88	; 0x58
    df4c:	e1a00001 	mov	r0, r1
    df50:	e1a01002 	mov	r1, r2
    df54:	e1a02003 	mov	r2, r3
    df58:	ebffeab2 	bl	8a28 <_init+0x128>
	l_rtCompleteSigPayload_st.kalmanSigState_st 		= f_sigKalmanState_st;
    df5c:	e24bc034 	sub	ip, fp, #52	; 0x34
    df60:	e24be0bc 	sub	lr, fp, #188	; 0xbc
    df64:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    df68:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    df6c:	e89e0003 	ldm	lr, {r0, r1}
    df70:	e88c0003 	stm	ip, {r0, r1}
	l_rtCompleteSigPayload_st.complementarySigState_st	= f_sigComplementaryState_st;
    df74:	e24bc01c 	sub	ip, fp, #28
    df78:	e24be0d4 	sub	lr, fp, #212	; 0xd4
    df7c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    df80:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    df84:	e89e0003 	ldm	lr, {r0, r1}
    df88:	e88c0003 	stm	ip, {r0, r1}

	return g_halMatlab_sendPacket_bl( 	f_socketHandler_i32,
    df8c:	e24b3094 	sub	r3, fp, #148	; 0x94
    df90:	e51b00a0 	ldr	r0, [fp, #-160]	; 0xa0
    df94:	e1a01003 	mov	r1, r3
    df98:	e3a02090 	mov	r2, #144	; 0x90
    df9c:	ebfffecc 	bl	dad4 <g_halMatlab_sendPacket_bl>
    dfa0:	e1a03000 	mov	r3, r0
										(unsigned char*)&l_rtCompleteSigPayload_st,
										sizeof( l_rtCompleteSigPayload_st ) );
}
    dfa4:	e1a00003 	mov	r0, r3
    dfa8:	e24bd004 	sub	sp, fp, #4
    dfac:	e8bd4800 	pop	{fp, lr}
    dfb0:	e28dd008 	add	sp, sp, #8
    dfb4:	e12fff1e 	bx	lr

0000dfb8 <g_halMatlab_recvSigState_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halMatlab_rtSigPayload g_halMatlab_recvSigState_bl( int f_socketHandler_i32 ) {
    dfb8:	e92d4800 	push	{fp, lr}
    dfbc:	e28db004 	add	fp, sp, #4
    dfc0:	e24dd050 	sub	sp, sp, #80	; 0x50
    dfc4:	e50b0050 	str	r0, [fp, #-80]	; 0x50
    dfc8:	e50b1054 	str	r1, [fp, #-84]	; 0x54
	halMatlab_rtSigPayload 		l_recvSigState_st;
	unsigned char				l_recvBuffer_rgXui8[ sizeof(halMatlab_rtSigPayload) ];
	unsigned int				l_recvBytesNumber_ui32;

	// zero all values
	l_recvSigState_st.timestamp_st.tv_sec 	= 0;
    dfcc:	e3a03000 	mov	r3, #0
    dfd0:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
	l_recvSigState_st.timestamp_st.tv_nsec 	= 0;
    dfd4:	e3a03000 	mov	r3, #0
    dfd8:	e50b3028 	str	r3, [fp, #-40]	; 0x28

	l_recvSigState_st.sigState_st.roll_f64 	= 0;
    dfdc:	e3a02000 	mov	r2, #0
    dfe0:	e3a03000 	mov	r3, #0
    dfe4:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	l_recvSigState_st.sigState_st.pitch_f64 = 0;
    dfe8:	e3a02000 	mov	r2, #0
    dfec:	e3a03000 	mov	r3, #0
    dff0:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	l_recvSigState_st.sigState_st.yaw_f64 	= 0;
    dff4:	e3a02000 	mov	r2, #0
    dff8:	e3a03000 	mov	r3, #0
    dffc:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec


	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    e000:	e24b304c 	sub	r3, fp, #76	; 0x4c
    e004:	e51b0054 	ldr	r0, [fp, #-84]	; 0x54
    e008:	e1a01003 	mov	r1, r3
    e00c:	e3a02020 	mov	r2, #32
    e010:	ebffff0e 	bl	dc50 <g_halMatlab_recvPacket_ui32>
    e014:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halMatlab_rtSigPayload) );

	if ( l_recvBytesNumber_ui32 == sizeof(halMatlab_rtSigPayload) )
    e018:	e51b3008 	ldr	r3, [fp, #-8]
    e01c:	e3530020 	cmp	r3, #32
    e020:	1a000005 	bne	e03c <g_halMatlab_recvSigState_bl+0x84>
	{
		memcpy( &l_recvSigState_st, &l_recvBuffer_rgXui8, sizeof(halMatlab_rtSigPayload));
    e024:	e24b202c 	sub	r2, fp, #44	; 0x2c
    e028:	e24b304c 	sub	r3, fp, #76	; 0x4c
    e02c:	e1a00002 	mov	r0, r2
    e030:	e1a01003 	mov	r1, r3
    e034:	e3a02020 	mov	r2, #32
    e038:	ebffea7a 	bl	8a28 <_init+0x128>
	}

	return l_recvSigState_st;
    e03c:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
    e040:	e1a0c003 	mov	ip, r3
    e044:	e24be02c 	sub	lr, fp, #44	; 0x2c
    e048:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    e04c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    e050:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
    e054:	e88c000f 	stm	ip, {r0, r1, r2, r3}
}
    e058:	e51b0050 	ldr	r0, [fp, #-80]	; 0x50
    e05c:	e24bd004 	sub	sp, fp, #4
    e060:	e8bd8800 	pop	{fp, pc}

0000e064 <g_halMatlab_recvSigAllStates_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halMatlab_rtSigAllStatePayload g_halMatlab_recvSigAllStates_bl( int f_socketHandler_i32 ) {
    e064:	e92d4800 	push	{fp, lr}
    e068:	e28db004 	add	fp, sp, #4
    e06c:	e24dde13 	sub	sp, sp, #304	; 0x130
    e070:	e50b0130 	str	r0, [fp, #-304]	; 0x130
    e074:	e50b1134 	str	r1, [fp, #-308]	; 0x134
	halMatlab_rtSigAllStatePayload 		l_recvSigAllStates_st;
	unsigned char				              l_recvBuffer_rgXui8[ sizeof(halMatlab_rtSigAllStatePayload) ];
	unsigned int				              l_recvBytesNumber_ui32;

	// zero all values
	l_recvSigAllStates_st.timestamp_st.tv_sec 	= 0;
    e078:	e3a03000 	mov	r3, #0
    e07c:	e50b309c 	str	r3, [fp, #-156]	; 0x9c
	l_recvSigAllStates_st.timestamp_st.tv_nsec 	= 0;
    e080:	e3a03000 	mov	r3, #0
    e084:	e50b3098 	str	r3, [fp, #-152]	; 0x98

    l_recvSigAllStates_st.imuState_st.acc.x_f64       = 0;
    e088:	e3a02000 	mov	r2, #0
    e08c:	e3a03000 	mov	r3, #0
    e090:	e14b29f4 	strd	r2, [fp, #-148]	; 0xffffff6c
    l_recvSigAllStates_st.imuState_st.acc.y_f64       = 0;
    e094:	e3a02000 	mov	r2, #0
    e098:	e3a03000 	mov	r3, #0
    e09c:	e14b28fc 	strd	r2, [fp, #-140]	; 0xffffff74
    l_recvSigAllStates_st.imuState_st.acc.z_f64       = 0;
    e0a0:	e3a02000 	mov	r2, #0
    e0a4:	e3a03000 	mov	r3, #0
    e0a8:	e14b28f4 	strd	r2, [fp, #-132]	; 0xffffff7c
  
    l_recvSigAllStates_st.imuState_st.mag.x_f64       = 0;
    e0ac:	e3a02000 	mov	r2, #0
    e0b0:	e3a03000 	mov	r3, #0
    e0b4:	e14b27fc 	strd	r2, [fp, #-124]	; 0xffffff84
    l_recvSigAllStates_st.imuState_st.mag.y_f64       = 0;
    e0b8:	e3a02000 	mov	r2, #0
    e0bc:	e3a03000 	mov	r3, #0
    e0c0:	e14b27f4 	strd	r2, [fp, #-116]	; 0xffffff8c
    l_recvSigAllStates_st.imuState_st.mag.z_f64       = 0;
    e0c4:	e3a02000 	mov	r2, #0
    e0c8:	e3a03000 	mov	r3, #0
    e0cc:	e14b26fc 	strd	r2, [fp, #-108]	; 0xffffff94
  
	l_recvSigAllStates_st.imuState_st.gyro.roll_f64 	= 0;
    e0d0:	e3a02000 	mov	r2, #0
    e0d4:	e3a03000 	mov	r3, #0
    e0d8:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
    l_recvSigAllStates_st.imuState_st.gyro.pitch_f64  = 0;
    e0dc:	e3a02000 	mov	r2, #0
    e0e0:	e3a03000 	mov	r3, #0
    e0e4:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	l_recvSigAllStates_st.imuState_st.gyro.yaw_f64 	  = 0;
    e0e8:	e3a02000 	mov	r2, #0
    e0ec:	e3a03000 	mov	r3, #0
    e0f0:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac
  
    l_recvSigAllStates_st.imuState_st.temperature_f64 = 0;
    e0f4:	e3a02000 	mov	r2, #0
    e0f8:	e3a03000 	mov	r3, #0
    e0fc:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
    l_recvSigAllStates_st.imuState_st.pressure_f64    = 0;
    e100:	e3a02000 	mov	r2, #0
    e104:	e3a03000 	mov	r3, #0
    e108:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
  
	l_recvSigAllStates_st.kalmanSigState_st.roll_f64 	= 0;
    e10c:	e3a02000 	mov	r2, #0
    e110:	e3a03000 	mov	r3, #0
    e114:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4
	l_recvSigAllStates_st.kalmanSigState_st.pitch_f64 = 0;
    e118:	e3a02000 	mov	r2, #0
    e11c:	e3a03000 	mov	r3, #0
    e120:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	l_recvSigAllStates_st.kalmanSigState_st.yaw_f64 	= 0;
    e124:	e3a02000 	mov	r2, #0
    e128:	e3a03000 	mov	r3, #0
    e12c:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4

	l_recvSigAllStates_st.complementarySigState_st.roll_f64 	= 0;
    e130:	e3a02000 	mov	r2, #0
    e134:	e3a03000 	mov	r3, #0
    e138:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
    l_recvSigAllStates_st.complementarySigState_st.pitch_f64 = 0;
    e13c:	e3a02000 	mov	r2, #0
    e140:	e3a03000 	mov	r3, #0
    e144:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	l_recvSigAllStates_st.complementarySigState_st.yaw_f64 	= 0;
    e148:	e3a02000 	mov	r2, #0
    e14c:	e3a03000 	mov	r3, #0
    e150:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    e154:	e24b3f4b 	sub	r3, fp, #300	; 0x12c
    e158:	e51b0134 	ldr	r0, [fp, #-308]	; 0x134
    e15c:	e1a01003 	mov	r1, r3
    e160:	e3a02090 	mov	r2, #144	; 0x90
    e164:	ebfffeb9 	bl	dc50 <g_halMatlab_recvPacket_ui32>
    e168:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halMatlab_rtSigAllStatePayload) );

	if ( l_recvBytesNumber_ui32 == sizeof(halMatlab_rtSigAllStatePayload) )
    e16c:	e51b3008 	ldr	r3, [fp, #-8]
    e170:	e3530090 	cmp	r3, #144	; 0x90
    e174:	1a000005 	bne	e190 <g_halMatlab_recvSigAllStates_bl+0x12c>
	{
		memcpy( &l_recvSigAllStates_st, &l_recvBuffer_rgXui8, sizeof(halMatlab_rtSigAllStatePayload));
    e178:	e24b209c 	sub	r2, fp, #156	; 0x9c
    e17c:	e24b3f4b 	sub	r3, fp, #300	; 0x12c
    e180:	e1a00002 	mov	r0, r2
    e184:	e1a01003 	mov	r1, r3
    e188:	e3a02090 	mov	r2, #144	; 0x90
    e18c:	ebffea25 	bl	8a28 <_init+0x128>
	}

	return l_recvSigAllStates_st;
    e190:	e51b3130 	ldr	r3, [fp, #-304]	; 0x130
    e194:	e1a01003 	mov	r1, r3
    e198:	e24b209c 	sub	r2, fp, #156	; 0x9c
    e19c:	e3a03090 	mov	r3, #144	; 0x90
    e1a0:	e1a00001 	mov	r0, r1
    e1a4:	e1a01002 	mov	r1, r2
    e1a8:	e1a02003 	mov	r2, r3
    e1ac:	ebffea1d 	bl	8a28 <_init+0x128>
}
    e1b0:	e51b0130 	ldr	r0, [fp, #-304]	; 0x130
    e1b4:	e24bd004 	sub	sp, fp, #4
    e1b8:	e8bd8800 	pop	{fp, pc}
    e1bc:	00000000 	andeq	r0, r0, r0

0000e1c0 <m_getIndex_i32>:
#include <math.h>
//memcpy(dest, src, strlen(src)+1);


unsigned int m_getIndex_i32(unsigned int f_maxCol_ui32,unsigned int f_row_ui32,unsigned int f_col_ui32)
{
    e1c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    e1c4:	e28db000 	add	fp, sp, #0
    e1c8:	e24dd014 	sub	sp, sp, #20
    e1cc:	e50b0008 	str	r0, [fp, #-8]
    e1d0:	e50b100c 	str	r1, [fp, #-12]
    e1d4:	e50b2010 	str	r2, [fp, #-16]
	return (f_maxCol_ui32*f_row_ui32+f_col_ui32);
    e1d8:	e51b3008 	ldr	r3, [fp, #-8]
    e1dc:	e51b200c 	ldr	r2, [fp, #-12]
    e1e0:	e0020392 	mul	r2, r2, r3
    e1e4:	e51b3010 	ldr	r3, [fp, #-16]
    e1e8:	e0823003 	add	r3, r2, r3
}
    e1ec:	e1a00003 	mov	r0, r3
    e1f0:	e24bd000 	sub	sp, fp, #0
    e1f4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    e1f8:	e12fff1e 	bx	lr

0000e1fc <g_sigMath_matrixMultiplikation_bl>:
unsigned int g_sigMath_matrixMultiplikation_bl(
		double* f_matrixResult_pf64, double* f_matrixA_pf64,
		unsigned int f_nrOfRowsA_ui32, unsigned int f_nrOfColsA_ui32,
		double* f_matrixB_pf64, unsigned int f_nrOfRowsB_ui32,
		unsigned int f_nrOfColsB_ui32)
{
    e1fc:	e92d4800 	push	{fp, lr}
    e200:	ed2d8b02 	vpush	{d8}
    e204:	e28db00c 	add	fp, sp, #12
    e208:	e24dd028 	sub	sp, sp, #40	; 0x28
    e20c:	e50b0028 	str	r0, [fp, #-40]	; 0x28
    e210:	e50b102c 	str	r1, [fp, #-44]	; 0x2c
    e214:	e50b2030 	str	r2, [fp, #-48]	; 0x30
    e218:	e50b3034 	str	r3, [fp, #-52]	; 0x34
	unsigned int l_rowCounter_ui32=0;
    e21c:	e3a03000 	mov	r3, #0
    e220:	e50b3010 	str	r3, [fp, #-16]
	unsigned int l_colCounter_ui32=0;
    e224:	e3a03000 	mov	r3, #0
    e228:	e50b3014 	str	r3, [fp, #-20]
	unsigned int l_innerCounter_ui32=0;
    e22c:	e3a03000 	mov	r3, #0
    e230:	e50b3018 	str	r3, [fp, #-24]
	double l_temporalStorage_f64=0;
    e234:	e3a02000 	mov	r2, #0
    e238:	e3a03000 	mov	r3, #0
    e23c:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc

	if(f_nrOfColsA_ui32!=f_nrOfRowsB_ui32)
    e240:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    e244:	e59b3008 	ldr	r3, [fp, #8]
    e248:	e1520003 	cmp	r2, r3
    e24c:	0a000001 	beq	e258 <g_sigMath_matrixMultiplikation_bl+0x5c>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    e250:	e3a03001 	mov	r3, #1
    e254:	ea000041 	b	e360 <g_sigMath_matrixMultiplikation_bl+0x164>
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    e258:	e3a03000 	mov	r3, #0
    e25c:	e50b3010 	str	r3, [fp, #-16]
    e260:	ea000039 	b	e34c <g_sigMath_matrixMultiplikation_bl+0x150>
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
    e264:	e3a03000 	mov	r3, #0
    e268:	e50b3014 	str	r3, [fp, #-20]
    e26c:	ea00002f 	b	e330 <g_sigMath_matrixMultiplikation_bl+0x134>
			{
				for(l_innerCounter_ui32=0;l_innerCounter_ui32<f_nrOfColsA_ui32;l_innerCounter_ui32++)
    e270:	e3a03000 	mov	r3, #0
    e274:	e50b3018 	str	r3, [fp, #-24]
    e278:	ea000018 	b	e2e0 <g_sigMath_matrixMultiplikation_bl+0xe4>
				{
					l_temporalStorage_f64+=f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_innerCounter_ui32)]*
    e27c:	e51b0034 	ldr	r0, [fp, #-52]	; 0x34
    e280:	e51b1010 	ldr	r1, [fp, #-16]
    e284:	e51b2018 	ldr	r2, [fp, #-24]
    e288:	ebffffcc 	bl	e1c0 <m_getIndex_i32>
    e28c:	e1a03000 	mov	r3, r0
    e290:	e1a03183 	lsl	r3, r3, #3
    e294:	e51b202c 	ldr	r2, [fp, #-44]	; 0x2c
    e298:	e0823003 	add	r3, r2, r3
    e29c:	ed938b00 	vldr	d8, [r3]
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_innerCounter_ui32,l_colCounter_ui32)];
    e2a0:	e59b000c 	ldr	r0, [fp, #12]
    e2a4:	e51b1018 	ldr	r1, [fp, #-24]
    e2a8:	e51b2014 	ldr	r2, [fp, #-20]
    e2ac:	ebffffc3 	bl	e1c0 <m_getIndex_i32>
    e2b0:	e1a03000 	mov	r3, r0
    e2b4:	e1a03183 	lsl	r3, r3, #3
    e2b8:	e59b2004 	ldr	r2, [fp, #4]
    e2bc:	e0823003 	add	r3, r2, r3
    e2c0:	ed937b00 	vldr	d7, [r3]
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
			{
				for(l_innerCounter_ui32=0;l_innerCounter_ui32<f_nrOfColsA_ui32;l_innerCounter_ui32++)
				{
					l_temporalStorage_f64+=f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_innerCounter_ui32)]*
    e2c4:	ee287b07 	vmul.f64	d7, d8, d7
    e2c8:	ed1b6b09 	vldr	d6, [fp, #-36]	; 0xffffffdc
    e2cc:	ee367b07 	vadd.f64	d7, d6, d7
    e2d0:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
			{
				for(l_innerCounter_ui32=0;l_innerCounter_ui32<f_nrOfColsA_ui32;l_innerCounter_ui32++)
    e2d4:	e51b3018 	ldr	r3, [fp, #-24]
    e2d8:	e2833001 	add	r3, r3, #1
    e2dc:	e50b3018 	str	r3, [fp, #-24]
    e2e0:	e51b2018 	ldr	r2, [fp, #-24]
    e2e4:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    e2e8:	e1520003 	cmp	r2, r3
    e2ec:	3affffe2 	bcc	e27c <g_sigMath_matrixMultiplikation_bl+0x80>
				{
					l_temporalStorage_f64+=f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_innerCounter_ui32)]*
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_innerCounter_ui32,l_colCounter_ui32)];
				}
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=l_temporalStorage_f64;
    e2f0:	e59b000c 	ldr	r0, [fp, #12]
    e2f4:	e51b1010 	ldr	r1, [fp, #-16]
    e2f8:	e51b2014 	ldr	r2, [fp, #-20]
    e2fc:	ebffffaf 	bl	e1c0 <m_getIndex_i32>
    e300:	e1a03000 	mov	r3, r0
    e304:	e1a03183 	lsl	r3, r3, #3
    e308:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    e30c:	e0821003 	add	r1, r2, r3
    e310:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
    e314:	e1c120f0 	strd	r2, [r1]
				l_temporalStorage_f64=0;
    e318:	e3a02000 	mov	r2, #0
    e31c:	e3a03000 	mov	r3, #0
    e320:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
    e324:	e51b3014 	ldr	r3, [fp, #-20]
    e328:	e2833001 	add	r3, r3, #1
    e32c:	e50b3014 	str	r3, [fp, #-20]
    e330:	e51b2014 	ldr	r2, [fp, #-20]
    e334:	e59b300c 	ldr	r3, [fp, #12]
    e338:	e1520003 	cmp	r2, r3
    e33c:	3affffcb 	bcc	e270 <g_sigMath_matrixMultiplikation_bl+0x74>

	if(f_nrOfColsA_ui32!=f_nrOfRowsB_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    e340:	e51b3010 	ldr	r3, [fp, #-16]
    e344:	e2833001 	add	r3, r3, #1
    e348:	e50b3010 	str	r3, [fp, #-16]
    e34c:	e51b2010 	ldr	r2, [fp, #-16]
    e350:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    e354:	e1520003 	cmp	r2, r3
    e358:	3affffc1 	bcc	e264 <g_sigMath_matrixMultiplikation_bl+0x68>
				}
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=l_temporalStorage_f64;
				l_temporalStorage_f64=0;
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    e35c:	e3a03000 	mov	r3, #0
	}
}
    e360:	e1a00003 	mov	r0, r3
    e364:	e24bd00c 	sub	sp, fp, #12
    e368:	ecbd8b02 	vpop	{d8}
    e36c:	e8bd8800 	pop	{fp, pc}

0000e370 <g_sigMath_matrixAddition_bl>:
 ***********************************************************************/
unsigned int g_sigMath_matrixAddition_bl(double* f_matrixResult_pf64,
		double* f_matrixA_pf64, unsigned int f_nrOfRowsA_ui32,
		unsigned int f_nrOfColsA_ui32, double* f_matrixB_pf64,
		unsigned int f_nrOfRowsB_ui32, unsigned int f_nrOfColsB_ui32)
		{
    e370:	e92d4810 	push	{r4, fp, lr}
    e374:	ed2d8b02 	vpush	{d8}
    e378:	e28db010 	add	fp, sp, #16
    e37c:	e24dd01c 	sub	sp, sp, #28
    e380:	e50b0020 	str	r0, [fp, #-32]
    e384:	e50b1024 	str	r1, [fp, #-36]	; 0x24
    e388:	e50b2028 	str	r2, [fp, #-40]	; 0x28
    e38c:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
	unsigned int l_rowCounter_ui32=0;
    e390:	e3a03000 	mov	r3, #0
    e394:	e50b3018 	str	r3, [fp, #-24]
	unsigned int l_colCounter_ui32=0;
    e398:	e3a03000 	mov	r3, #0
    e39c:	e50b301c 	str	r3, [fp, #-28]

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
    e3a0:	e51b202c 	ldr	r2, [fp, #-44]	; 0x2c
    e3a4:	e59b300c 	ldr	r3, [fp, #12]
    e3a8:	e1520003 	cmp	r2, r3
    e3ac:	0a000005 	beq	e3c8 <g_sigMath_matrixAddition_bl+0x58>
    e3b0:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    e3b4:	e59b3008 	ldr	r3, [fp, #8]
    e3b8:	e1520003 	cmp	r2, r3
    e3bc:	0a000001 	beq	e3c8 <g_sigMath_matrixAddition_bl+0x58>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    e3c0:	e3a03001 	mov	r3, #1
    e3c4:	ea000030 	b	e48c <g_sigMath_matrixAddition_bl+0x11c>
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    e3c8:	e3a03000 	mov	r3, #0
    e3cc:	e50b3018 	str	r3, [fp, #-24]
    e3d0:	ea000028 	b	e478 <g_sigMath_matrixAddition_bl+0x108>
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    e3d4:	e3a03000 	mov	r3, #0
    e3d8:	e50b301c 	str	r3, [fp, #-28]
    e3dc:	ea00001e 	b	e45c <g_sigMath_matrixAddition_bl+0xec>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    e3e0:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    e3e4:	e51b1018 	ldr	r1, [fp, #-24]
    e3e8:	e51b201c 	ldr	r2, [fp, #-28]
    e3ec:	ebffff73 	bl	e1c0 <m_getIndex_i32>
    e3f0:	e1a03000 	mov	r3, r0
    e3f4:	e1a03183 	lsl	r3, r3, #3
    e3f8:	e51b2020 	ldr	r2, [fp, #-32]
    e3fc:	e0824003 	add	r4, r2, r3
						f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+
    e400:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    e404:	e51b1018 	ldr	r1, [fp, #-24]
    e408:	e51b201c 	ldr	r2, [fp, #-28]
    e40c:	ebffff6b 	bl	e1c0 <m_getIndex_i32>
    e410:	e1a03000 	mov	r3, r0
    e414:	e1a03183 	lsl	r3, r3, #3
    e418:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
    e41c:	e0823003 	add	r3, r2, r3
    e420:	ed938b00 	vldr	d8, [r3]
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
    e424:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    e428:	e51b1018 	ldr	r1, [fp, #-24]
    e42c:	e51b201c 	ldr	r2, [fp, #-28]
    e430:	ebffff62 	bl	e1c0 <m_getIndex_i32>
    e434:	e1a03000 	mov	r3, r0
    e438:	e1a03183 	lsl	r3, r3, #3
    e43c:	e59b2004 	ldr	r2, [fp, #4]
    e440:	e0823003 	add	r3, r2, r3
    e444:	ed937b00 	vldr	d7, [r3]
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+
    e448:	ee387b07 	vadd.f64	d7, d8, d7
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    e44c:	ed847b00 	vstr	d7, [r4]
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    e450:	e51b301c 	ldr	r3, [fp, #-28]
    e454:	e2833001 	add	r3, r3, #1
    e458:	e50b301c 	str	r3, [fp, #-28]
    e45c:	e51b201c 	ldr	r2, [fp, #-28]
    e460:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    e464:	e1520003 	cmp	r2, r3
    e468:	3affffdc 	bcc	e3e0 <g_sigMath_matrixAddition_bl+0x70>

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    e46c:	e51b3018 	ldr	r3, [fp, #-24]
    e470:	e2833001 	add	r3, r3, #1
    e474:	e50b3018 	str	r3, [fp, #-24]
    e478:	e51b2018 	ldr	r2, [fp, #-24]
    e47c:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    e480:	e1520003 	cmp	r2, r3
    e484:	3affffd2 	bcc	e3d4 <g_sigMath_matrixAddition_bl+0x64>
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    e488:	e3a03000 	mov	r3, #0
	}
}
    e48c:	e1a00003 	mov	r0, r3
    e490:	e24bd010 	sub	sp, fp, #16
    e494:	ecbd8b02 	vpop	{d8}
    e498:	e8bd8810 	pop	{r4, fp, pc}

0000e49c <g_sigMath_matrixSubtraktion_bl>:
 ***********************************************************************/
unsigned int g_sigMath_matrixSubtraktion_bl(double* f_matrixResult_pf64,
		double* f_matrixA_pf64, unsigned int f_nrOfRowsA_ui32,
		unsigned int f_nrOfColsA_ui32, double* f_matrixB_pf64,
		unsigned int f_nrOfRowsB_ui32, unsigned int f_nrOfColsB_ui32)
{
    e49c:	e92d4810 	push	{r4, fp, lr}
    e4a0:	ed2d8b02 	vpush	{d8}
    e4a4:	e28db010 	add	fp, sp, #16
    e4a8:	e24dd01c 	sub	sp, sp, #28
    e4ac:	e50b0020 	str	r0, [fp, #-32]
    e4b0:	e50b1024 	str	r1, [fp, #-36]	; 0x24
    e4b4:	e50b2028 	str	r2, [fp, #-40]	; 0x28
    e4b8:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
	unsigned int l_rowCounter_ui32=0;
    e4bc:	e3a03000 	mov	r3, #0
    e4c0:	e50b3018 	str	r3, [fp, #-24]
	unsigned int l_colCounter_ui32=0;
    e4c4:	e3a03000 	mov	r3, #0
    e4c8:	e50b301c 	str	r3, [fp, #-28]

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
    e4cc:	e51b202c 	ldr	r2, [fp, #-44]	; 0x2c
    e4d0:	e59b300c 	ldr	r3, [fp, #12]
    e4d4:	e1520003 	cmp	r2, r3
    e4d8:	0a000005 	beq	e4f4 <g_sigMath_matrixSubtraktion_bl+0x58>
    e4dc:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    e4e0:	e59b3008 	ldr	r3, [fp, #8]
    e4e4:	e1520003 	cmp	r2, r3
    e4e8:	0a000001 	beq	e4f4 <g_sigMath_matrixSubtraktion_bl+0x58>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    e4ec:	e3a03001 	mov	r3, #1
    e4f0:	ea000030 	b	e5b8 <g_sigMath_matrixSubtraktion_bl+0x11c>
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    e4f4:	e3a03000 	mov	r3, #0
    e4f8:	e50b3018 	str	r3, [fp, #-24]
    e4fc:	ea000028 	b	e5a4 <g_sigMath_matrixSubtraktion_bl+0x108>
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    e500:	e3a03000 	mov	r3, #0
    e504:	e50b301c 	str	r3, [fp, #-28]
    e508:	ea00001e 	b	e588 <g_sigMath_matrixSubtraktion_bl+0xec>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    e50c:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    e510:	e51b1018 	ldr	r1, [fp, #-24]
    e514:	e51b201c 	ldr	r2, [fp, #-28]
    e518:	ebffff28 	bl	e1c0 <m_getIndex_i32>
    e51c:	e1a03000 	mov	r3, r0
    e520:	e1a03183 	lsl	r3, r3, #3
    e524:	e51b2020 	ldr	r2, [fp, #-32]
    e528:	e0824003 	add	r4, r2, r3
							f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-
    e52c:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    e530:	e51b1018 	ldr	r1, [fp, #-24]
    e534:	e51b201c 	ldr	r2, [fp, #-28]
    e538:	ebffff20 	bl	e1c0 <m_getIndex_i32>
    e53c:	e1a03000 	mov	r3, r0
    e540:	e1a03183 	lsl	r3, r3, #3
    e544:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
    e548:	e0823003 	add	r3, r2, r3
    e54c:	ed938b00 	vldr	d8, [r3]
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
    e550:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
    e554:	e51b1018 	ldr	r1, [fp, #-24]
    e558:	e51b201c 	ldr	r2, [fp, #-28]
    e55c:	ebffff17 	bl	e1c0 <m_getIndex_i32>
    e560:	e1a03000 	mov	r3, r0
    e564:	e1a03183 	lsl	r3, r3, #3
    e568:	e59b2004 	ldr	r2, [fp, #4]
    e56c:	e0823003 	add	r3, r2, r3
    e570:	ed937b00 	vldr	d7, [r3]
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
							f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-
    e574:	ee387b47 	vsub.f64	d7, d8, d7
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    e578:	ed847b00 	vstr	d7, [r4]
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    e57c:	e51b301c 	ldr	r3, [fp, #-28]
    e580:	e2833001 	add	r3, r3, #1
    e584:	e50b301c 	str	r3, [fp, #-28]
    e588:	e51b201c 	ldr	r2, [fp, #-28]
    e58c:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    e590:	e1520003 	cmp	r2, r3
    e594:	3affffdc 	bcc	e50c <g_sigMath_matrixSubtraktion_bl+0x70>

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    e598:	e51b3018 	ldr	r3, [fp, #-24]
    e59c:	e2833001 	add	r3, r3, #1
    e5a0:	e50b3018 	str	r3, [fp, #-24]
    e5a4:	e51b2018 	ldr	r2, [fp, #-24]
    e5a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    e5ac:	e1520003 	cmp	r2, r3
    e5b0:	3affffd2 	bcc	e500 <g_sigMath_matrixSubtraktion_bl+0x64>
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
							f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    e5b4:	e3a03000 	mov	r3, #0
	}
}
    e5b8:	e1a00003 	mov	r0, r3
    e5bc:	e24bd010 	sub	sp, fp, #16
    e5c0:	ecbd8b02 	vpop	{d8}
    e5c4:	e8bd8810 	pop	{r4, fp, pc}

0000e5c8 <g_sigMath_matrixTransponiert_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixTransponiert_bl(
		double* f_matrixResult_pf64, double* f_matrix_pf64,
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32)
{
    e5c8:	e92d4810 	push	{r4, fp, lr}
    e5cc:	e28db008 	add	fp, sp, #8
    e5d0:	e24dd01c 	sub	sp, sp, #28
    e5d4:	e50b0018 	str	r0, [fp, #-24]
    e5d8:	e50b101c 	str	r1, [fp, #-28]
    e5dc:	e50b2020 	str	r2, [fp, #-32]
    e5e0:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	unsigned int l_rowCounter_ui32=0;
    e5e4:	e3a03000 	mov	r3, #0
    e5e8:	e50b3010 	str	r3, [fp, #-16]
	unsigned int l_colCounter_ui32=0;
    e5ec:	e3a03000 	mov	r3, #0
    e5f0:	e50b3014 	str	r3, [fp, #-20]

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    e5f4:	e3a03000 	mov	r3, #0
    e5f8:	e50b3010 	str	r3, [fp, #-16]
    e5fc:	ea00001e 	b	e67c <g_sigMath_matrixTransponiert_bl+0xb4>
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    e600:	e3a03000 	mov	r3, #0
    e604:	e50b3014 	str	r3, [fp, #-20]
    e608:	ea000014 	b	e660 <g_sigMath_matrixTransponiert_bl+0x98>
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_colCounter_ui32,l_rowCounter_ui32)]=
    e60c:	e51b0024 	ldr	r0, [fp, #-36]	; 0x24
    e610:	e51b1014 	ldr	r1, [fp, #-20]
    e614:	e51b2010 	ldr	r2, [fp, #-16]
    e618:	ebfffee8 	bl	e1c0 <m_getIndex_i32>
    e61c:	e1a03000 	mov	r3, r0
    e620:	e1a03183 	lsl	r3, r3, #3
    e624:	e51b2018 	ldr	r2, [fp, #-24]
    e628:	e0824003 	add	r4, r2, r3
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
    e62c:	e51b0024 	ldr	r0, [fp, #-36]	; 0x24
    e630:	e51b1010 	ldr	r1, [fp, #-16]
    e634:	e51b2014 	ldr	r2, [fp, #-20]
    e638:	ebfffee0 	bl	e1c0 <m_getIndex_i32>
    e63c:	e1a03000 	mov	r3, r0
    e640:	e1a03183 	lsl	r3, r3, #3
    e644:	e51b201c 	ldr	r2, [fp, #-28]
    e648:	e0823003 	add	r3, r2, r3
    e64c:	e1c320d0 	ldrd	r2, [r3]

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_colCounter_ui32,l_rowCounter_ui32)]=
    e650:	e1c420f0 	strd	r2, [r4]
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    e654:	e51b3014 	ldr	r3, [fp, #-20]
    e658:	e2833001 	add	r3, r3, #1
    e65c:	e50b3014 	str	r3, [fp, #-20]
    e660:	e51b2014 	ldr	r2, [fp, #-20]
    e664:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
    e668:	e1520003 	cmp	r2, r3
    e66c:	3affffe6 	bcc	e60c <g_sigMath_matrixTransponiert_bl+0x44>
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32)
{
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    e670:	e51b3010 	ldr	r3, [fp, #-16]
    e674:	e2833001 	add	r3, r3, #1
    e678:	e50b3010 	str	r3, [fp, #-16]
    e67c:	e51b2010 	ldr	r2, [fp, #-16]
    e680:	e51b3020 	ldr	r3, [fp, #-32]
    e684:	e1520003 	cmp	r2, r3
    e688:	3affffdc 	bcc	e600 <g_sigMath_matrixTransponiert_bl+0x38>
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_colCounter_ui32,l_rowCounter_ui32)]=
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
		}
	}
	return M_SIG_MATRIXLIB_SUCCESS_BL;
    e68c:	e3a03000 	mov	r3, #0
}
    e690:	e1a00003 	mov	r0, r3
    e694:	e24bd008 	sub	sp, fp, #8
    e698:	e8bd8810 	pop	{r4, fp, pc}

0000e69c <g_sigMath_matrixInverse_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixInverse_bl(double* f_matrixResult_pf64,
		double* f_matrixA_pf64, unsigned int f_nrOfRowsA_ui32,
		unsigned int f_nrOfColsA_ui32)
{
    e69c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6a0:	ed2d8b02 	vpush	{d8}
    e6a4:	e28db028 	add	fp, sp, #40	; 0x28
    e6a8:	e24dd0a4 	sub	sp, sp, #164	; 0xa4
    e6ac:	e50b0078 	str	r0, [fp, #-120]	; 0x78
    e6b0:	e50b107c 	str	r1, [fp, #-124]	; 0x7c
    e6b4:	e50b2080 	str	r2, [fp, #-128]	; 0x80
    e6b8:	e50b3084 	str	r3, [fp, #-132]	; 0x84
    e6bc:	e1a0300d 	mov	r3, sp
    e6c0:	e1a0a003 	mov	sl, r3
	int l_rowCounter_ui32=0;
    e6c4:	e3a03000 	mov	r3, #0
    e6c8:	e50b3030 	str	r3, [fp, #-48]	; 0x30
	int l_rowCounterInnerLoop_ui32=0;
    e6cc:	e3a03000 	mov	r3, #0
    e6d0:	e50b3034 	str	r3, [fp, #-52]	; 0x34
	int l_colCounter_ui32=0;
    e6d4:	e3a03000 	mov	r3, #0
    e6d8:	e50b3038 	str	r3, [fp, #-56]	; 0x38
	double l_tempValue_f64=0;
    e6dc:	e3a02000 	mov	r2, #0
    e6e0:	e3a03000 	mov	r3, #0
    e6e4:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	//double l_determinant_f64=0;
	//Matrix for building a lower triangular matrix
	double l_lowerTriangularMatrix_f64[f_nrOfRowsA_ui32][f_nrOfColsA_ui32];
    e6e8:	e51b8084 	ldr	r8, [fp, #-132]	; 0x84
    e6ec:	e51b9080 	ldr	r9, [fp, #-128]	; 0x80
    e6f0:	e1a03008 	mov	r3, r8
    e6f4:	e2433001 	sub	r3, r3, #1
    e6f8:	e50b3048 	str	r3, [fp, #-72]	; 0x48
    e6fc:	e1a02008 	mov	r2, r8
    e700:	e3a03000 	mov	r3, #0
    e704:	e1a05303 	lsl	r5, r3, #6
    e708:	e1855d22 	orr	r5, r5, r2, lsr #26
    e70c:	e1a04302 	lsl	r4, r2, #6
    e710:	e1a03009 	mov	r3, r9
    e714:	e2433001 	sub	r3, r3, #1
    e718:	e50b304c 	str	r3, [fp, #-76]	; 0x4c
    e71c:	e1a00008 	mov	r0, r8
    e720:	e3a01000 	mov	r1, #0
    e724:	e1a02009 	mov	r2, r9
    e728:	e3a03000 	mov	r3, #0
    e72c:	e00e0192 	mul	lr, r2, r1
    e730:	e00c0390 	mul	ip, r0, r3
    e734:	e08ec00c 	add	ip, lr, ip
    e738:	e0832290 	umull	r2, r3, r0, r2
    e73c:	e08c1003 	add	r1, ip, r3
    e740:	e1a03001 	mov	r3, r1
    e744:	e1a07303 	lsl	r7, r3, #6
    e748:	e1877d22 	orr	r7, r7, r2, lsr #26
    e74c:	e1a06302 	lsl	r6, r2, #6
    e750:	e1a00008 	mov	r0, r8
    e754:	e3a01000 	mov	r1, #0
    e758:	e1a02009 	mov	r2, r9
    e75c:	e3a03000 	mov	r3, #0
    e760:	e00e0192 	mul	lr, r2, r1
    e764:	e00c0390 	mul	ip, r0, r3
    e768:	e08ec00c 	add	ip, lr, ip
    e76c:	e0832290 	umull	r2, r3, r0, r2
    e770:	e08c1003 	add	r1, ip, r3
    e774:	e1a03001 	mov	r3, r1
    e778:	e1a01303 	lsl	r1, r3, #6
    e77c:	e50b1088 	str	r1, [fp, #-136]	; 0x88
    e780:	e51b1088 	ldr	r1, [fp, #-136]	; 0x88
    e784:	e1811d22 	orr	r1, r1, r2, lsr #26
    e788:	e50b1088 	str	r1, [fp, #-136]	; 0x88
    e78c:	e1a01302 	lsl	r1, r2, #6
    e790:	e0030899 	mul	r3, r9, r8
    e794:	e1a03183 	lsl	r3, r3, #3
    e798:	e2833007 	add	r3, r3, #7
    e79c:	e2833007 	add	r3, r3, #7
    e7a0:	e1a031a3 	lsr	r3, r3, #3
    e7a4:	e1a03183 	lsl	r3, r3, #3
    e7a8:	e04dd003 	sub	sp, sp, r3
    e7ac:	e28d3010 	add	r3, sp, #16
    e7b0:	e2833007 	add	r3, r3, #7
    e7b4:	e1a031a3 	lsr	r3, r3, #3
    e7b8:	e1a03183 	lsl	r3, r3, #3
    e7bc:	e50b3050 	str	r3, [fp, #-80]	; 0x50
	double* l_lowerTriangularMatrix_pf64=(double*)l_lowerTriangularMatrix_f64;
    e7c0:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
    e7c4:	e50b3054 	str	r3, [fp, #-84]	; 0x54
	//Matrix for solving a system
	double l_lowerInverseTriangularMatrix_f64[f_nrOfRowsA_ui32][f_nrOfColsA_ui32];
    e7c8:	e51b4084 	ldr	r4, [fp, #-132]	; 0x84
    e7cc:	e51b5080 	ldr	r5, [fp, #-128]	; 0x80
    e7d0:	e1a03004 	mov	r3, r4
    e7d4:	e2433001 	sub	r3, r3, #1
    e7d8:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    e7dc:	e1a02004 	mov	r2, r4
    e7e0:	e3a03000 	mov	r3, #0
    e7e4:	e1a01303 	lsl	r1, r3, #6
    e7e8:	e50b1090 	str	r1, [fp, #-144]	; 0x90
    e7ec:	e51b1090 	ldr	r1, [fp, #-144]	; 0x90
    e7f0:	e1811d22 	orr	r1, r1, r2, lsr #26
    e7f4:	e50b1090 	str	r1, [fp, #-144]	; 0x90
    e7f8:	e1a01302 	lsl	r1, r2, #6
    e7fc:	e1a03005 	mov	r3, r5
    e800:	e2433001 	sub	r3, r3, #1
    e804:	e50b305c 	str	r3, [fp, #-92]	; 0x5c
    e808:	e1a00004 	mov	r0, r4
    e80c:	e3a01000 	mov	r1, #0
    e810:	e1a02005 	mov	r2, r5
    e814:	e3a03000 	mov	r3, #0
    e818:	e00e0192 	mul	lr, r2, r1
    e81c:	e00c0390 	mul	ip, r0, r3
    e820:	e08ec00c 	add	ip, lr, ip
    e824:	e0832290 	umull	r2, r3, r0, r2
    e828:	e08c1003 	add	r1, ip, r3
    e82c:	e1a03001 	mov	r3, r1
    e830:	e1a01303 	lsl	r1, r3, #6
    e834:	e50b1098 	str	r1, [fp, #-152]	; 0x98
    e838:	e51b1098 	ldr	r1, [fp, #-152]	; 0x98
    e83c:	e1811d22 	orr	r1, r1, r2, lsr #26
    e840:	e50b1098 	str	r1, [fp, #-152]	; 0x98
    e844:	e1a01302 	lsl	r1, r2, #6
    e848:	e1a02004 	mov	r2, r4
    e84c:	e3a03000 	mov	r3, #0
    e850:	e1a00005 	mov	r0, r5
    e854:	e3a01000 	mov	r1, #0
    e858:	e00e0390 	mul	lr, r0, r3
    e85c:	e00c0192 	mul	ip, r2, r1
    e860:	e08ec00c 	add	ip, lr, ip
    e864:	e0832092 	umull	r2, r3, r2, r0
    e868:	e08c1003 	add	r1, ip, r3
    e86c:	e1a03001 	mov	r3, r1
    e870:	e1a01303 	lsl	r1, r3, #6
    e874:	e50b10a0 	str	r1, [fp, #-160]	; 0xa0
    e878:	e51b10a0 	ldr	r1, [fp, #-160]	; 0xa0
    e87c:	e1811d22 	orr	r1, r1, r2, lsr #26
    e880:	e50b10a0 	str	r1, [fp, #-160]	; 0xa0
    e884:	e1a01302 	lsl	r1, r2, #6
    e888:	e0030495 	mul	r3, r5, r4
    e88c:	e1a03183 	lsl	r3, r3, #3
    e890:	e2833007 	add	r3, r3, #7
    e894:	e2833007 	add	r3, r3, #7
    e898:	e1a031a3 	lsr	r3, r3, #3
    e89c:	e1a03183 	lsl	r3, r3, #3
    e8a0:	e04dd003 	sub	sp, sp, r3
    e8a4:	e28d3010 	add	r3, sp, #16
    e8a8:	e2833007 	add	r3, r3, #7
    e8ac:	e1a031a3 	lsr	r3, r3, #3
    e8b0:	e1a03183 	lsl	r3, r3, #3
    e8b4:	e50b3060 	str	r3, [fp, #-96]	; 0x60
	double* l_lowerInverseTriangularMatrix_pf64=(double*)l_lowerInverseTriangularMatrix_f64;
    e8b8:	e51b3060 	ldr	r3, [fp, #-96]	; 0x60
    e8bc:	e50b3064 	str	r3, [fp, #-100]	; 0x64

	double l_eyeMatrix_f64[f_nrOfRowsA_ui32][f_nrOfColsA_ui32];
    e8c0:	e51bc084 	ldr	ip, [fp, #-132]	; 0x84
    e8c4:	e51be080 	ldr	lr, [fp, #-128]	; 0x80
    e8c8:	e1a0300c 	mov	r3, ip
    e8cc:	e2433001 	sub	r3, r3, #1
    e8d0:	e50b3068 	str	r3, [fp, #-104]	; 0x68
    e8d4:	e1a0200c 	mov	r2, ip
    e8d8:	e3a03000 	mov	r3, #0
    e8dc:	e1a01303 	lsl	r1, r3, #6
    e8e0:	e50b10a8 	str	r1, [fp, #-168]	; 0xa8
    e8e4:	e51b10a8 	ldr	r1, [fp, #-168]	; 0xa8
    e8e8:	e1811d22 	orr	r1, r1, r2, lsr #26
    e8ec:	e50b10a8 	str	r1, [fp, #-168]	; 0xa8
    e8f0:	e1a01302 	lsl	r1, r2, #6
    e8f4:	e1a0300e 	mov	r3, lr
    e8f8:	e2433001 	sub	r3, r3, #1
    e8fc:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    e900:	e1a0000c 	mov	r0, ip
    e904:	e3a01000 	mov	r1, #0
    e908:	e1a0200e 	mov	r2, lr
    e90c:	e3a03000 	mov	r3, #0
    e910:	e0050192 	mul	r5, r2, r1
    e914:	e0040390 	mul	r4, r0, r3
    e918:	e0854004 	add	r4, r5, r4
    e91c:	e0832290 	umull	r2, r3, r0, r2
    e920:	e0841003 	add	r1, r4, r3
    e924:	e1a03001 	mov	r3, r1
    e928:	e1a01303 	lsl	r1, r3, #6
    e92c:	e50b10b0 	str	r1, [fp, #-176]	; 0xb0
    e930:	e51b10b0 	ldr	r1, [fp, #-176]	; 0xb0
    e934:	e1811d22 	orr	r1, r1, r2, lsr #26
    e938:	e50b10b0 	str	r1, [fp, #-176]	; 0xb0
    e93c:	e1a01302 	lsl	r1, r2, #6
    e940:	e1a0000c 	mov	r0, ip
    e944:	e3a01000 	mov	r1, #0
    e948:	e1a0200e 	mov	r2, lr
    e94c:	e3a03000 	mov	r3, #0
    e950:	e0050192 	mul	r5, r2, r1
    e954:	e0040390 	mul	r4, r0, r3
    e958:	e0854004 	add	r4, r5, r4
    e95c:	e0832290 	umull	r2, r3, r0, r2
    e960:	e0841003 	add	r1, r4, r3
    e964:	e1a03001 	mov	r3, r1
    e968:	e1a01303 	lsl	r1, r3, #6
    e96c:	e50b10b8 	str	r1, [fp, #-184]	; 0xb8
    e970:	e51b10b8 	ldr	r1, [fp, #-184]	; 0xb8
    e974:	e1811d22 	orr	r1, r1, r2, lsr #26
    e978:	e50b10b8 	str	r1, [fp, #-184]	; 0xb8
    e97c:	e1a01302 	lsl	r1, r2, #6
    e980:	e0030c9e 	mul	r3, lr, ip
    e984:	e1a03183 	lsl	r3, r3, #3
    e988:	e2833007 	add	r3, r3, #7
    e98c:	e2833007 	add	r3, r3, #7
    e990:	e1a031a3 	lsr	r3, r3, #3
    e994:	e1a03183 	lsl	r3, r3, #3
    e998:	e04dd003 	sub	sp, sp, r3
    e99c:	e28d3010 	add	r3, sp, #16
    e9a0:	e2833007 	add	r3, r3, #7
    e9a4:	e1a031a3 	lsr	r3, r3, #3
    e9a8:	e1a03183 	lsl	r3, r3, #3
    e9ac:	e50b3070 	str	r3, [fp, #-112]	; 0x70
	double* l_eyeMatrix_pf64=(double*)l_eyeMatrix_f64;
    e9b0:	e51b3070 	ldr	r3, [fp, #-112]	; 0x70
    e9b4:	e50b3074 	str	r3, [fp, #-116]	; 0x74

	if(f_nrOfRowsA_ui32!=f_nrOfColsA_ui32)
    e9b8:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
    e9bc:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    e9c0:	e1520003 	cmp	r2, r3
    e9c4:	0a000001 	beq	e9d0 <g_sigMath_matrixInverse_bl+0x334>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    e9c8:	e3a03001 	mov	r3, #1
    e9cc:	ea00013b 	b	eec0 <g_sigMath_matrixInverse_bl+0x824>


	//Cholesky for building the lower triangular matrix
	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    e9d0:	e3a03000 	mov	r3, #0
    e9d4:	e50b3038 	str	r3, [fp, #-56]	; 0x38
    e9d8:	ea0000a8 	b	ec80 <g_sigMath_matrixInverse_bl+0x5e4>
	{
		for(l_rowCounter_ui32=l_colCounter_ui32;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    e9dc:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e9e0:	e50b3030 	str	r3, [fp, #-48]	; 0x30
    e9e4:	ea00009e 	b	ec64 <g_sigMath_matrixInverse_bl+0x5c8>
		{
			if(l_rowCounter_ui32==l_colCounter_ui32)
    e9e8:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    e9ec:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    e9f0:	e1520003 	cmp	r2, r3
    e9f4:	1a00004c 	bne	eb2c <g_sigMath_matrixInverse_bl+0x490>
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
    e9f8:	e3a03000 	mov	r3, #0
    e9fc:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    ea00:	ea000014 	b	ea58 <g_sigMath_matrixInverse_bl+0x3bc>
				{
					l_tempValue_f64+=pow(l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)],2);
    ea04:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    ea08:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    ea0c:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    ea10:	e1a01002 	mov	r1, r2
    ea14:	e1a02003 	mov	r2, r3
    ea18:	ebfffde8 	bl	e1c0 <m_getIndex_i32>
    ea1c:	e1a03000 	mov	r3, r0
    ea20:	e1a03183 	lsl	r3, r3, #3
    ea24:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    ea28:	e0823003 	add	r3, r2, r3
    ea2c:	ed937b00 	vldr	d7, [r3]
    ea30:	eeb00b47 	vmov.f64	d0, d7
    ea34:	ed9f1bab 	vldr	d1, [pc, #684]	; ece8 <g_sigMath_matrixInverse_bl+0x64c>
    ea38:	ebffe7ca 	bl	8968 <_init+0x68>
    ea3c:	eeb07b40 	vmov.f64	d7, d0
    ea40:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
    ea44:	ee367b07 	vadd.f64	d7, d6, d7
    ea48:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc
	{
		for(l_rowCounter_ui32=l_colCounter_ui32;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			if(l_rowCounter_ui32==l_colCounter_ui32)
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
    ea4c:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    ea50:	e2833001 	add	r3, r3, #1
    ea54:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    ea58:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    ea5c:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    ea60:	e1520003 	cmp	r2, r3
    ea64:	baffffe6 	blt	ea04 <g_sigMath_matrixInverse_bl+0x368>
				{
					l_tempValue_f64+=pow(l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)],2);
				}
				if(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64<0)
    ea68:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    ea6c:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    ea70:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    ea74:	e1a01002 	mov	r1, r2
    ea78:	e1a02003 	mov	r2, r3
    ea7c:	ebfffdcf 	bl	e1c0 <m_getIndex_i32>
    ea80:	e1a03000 	mov	r3, r0
    ea84:	e1a03183 	lsl	r3, r3, #3
    ea88:	e51b207c 	ldr	r2, [fp, #-124]	; 0x7c
    ea8c:	e0823003 	add	r3, r2, r3
    ea90:	ed936b00 	vldr	d6, [r3]
    ea94:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    ea98:	ee367b47 	vsub.f64	d7, d6, d7
    ea9c:	eeb57bc0 	vcmpe.f64	d7, #0.0
    eaa0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    eaa4:	5a000001 	bpl	eab0 <g_sigMath_matrixInverse_bl+0x414>
				{return M_SIG_MATRIXLIB_FAILED_BL;}
    eaa8:	e3a03001 	mov	r3, #1
    eaac:	ea000103 	b	eec0 <g_sigMath_matrixInverse_bl+0x824>

				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    eab0:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    eab4:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    eab8:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    eabc:	e1a01002 	mov	r1, r2
    eac0:	e1a02003 	mov	r2, r3
    eac4:	ebfffdbd 	bl	e1c0 <m_getIndex_i32>
    eac8:	e1a03000 	mov	r3, r0
    eacc:	e1a03183 	lsl	r3, r3, #3
    ead0:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    ead4:	e0824003 	add	r4, r2, r3
						sqrt(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64);
    ead8:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    eadc:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    eae0:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    eae4:	e1a01002 	mov	r1, r2
    eae8:	e1a02003 	mov	r2, r3
    eaec:	ebfffdb3 	bl	e1c0 <m_getIndex_i32>
    eaf0:	e1a03000 	mov	r3, r0
    eaf4:	e1a03183 	lsl	r3, r3, #3
    eaf8:	e51b207c 	ldr	r2, [fp, #-124]	; 0x7c
    eafc:	e0823003 	add	r3, r2, r3
    eb00:	ed936b00 	vldr	d6, [r3]
    eb04:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    eb08:	ee367b47 	vsub.f64	d7, d6, d7
    eb0c:	eeb00b47 	vmov.f64	d0, d7
    eb10:	ebffe7a3 	bl	89a4 <_init+0xa4>
    eb14:	eeb07b40 	vmov.f64	d7, d0
					l_tempValue_f64+=pow(l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)],2);
				}
				if(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64<0)
				{return M_SIG_MATRIXLIB_FAILED_BL;}

				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    eb18:	ed847b00 	vstr	d7, [r4]
						sqrt(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64);

				l_tempValue_f64=0;
    eb1c:	e3a02000 	mov	r2, #0
    eb20:	e3a03000 	mov	r3, #0
    eb24:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
    eb28:	ea00004a 	b	ec58 <g_sigMath_matrixInverse_bl+0x5bc>
			}
			else
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
    eb2c:	e3a03000 	mov	r3, #0
    eb30:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    eb34:	ea00001c 	b	ebac <g_sigMath_matrixInverse_bl+0x510>
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
    eb38:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    eb3c:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    eb40:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    eb44:	e1a01002 	mov	r1, r2
    eb48:	e1a02003 	mov	r2, r3
    eb4c:	ebfffd9b 	bl	e1c0 <m_getIndex_i32>
    eb50:	e1a03000 	mov	r3, r0
    eb54:	e1a03183 	lsl	r3, r3, #3
    eb58:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    eb5c:	e0823003 	add	r3, r2, r3
    eb60:	ed938b00 	vldr	d8, [r3]
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
    eb64:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    eb68:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    eb6c:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    eb70:	e1a01002 	mov	r1, r2
    eb74:	e1a02003 	mov	r2, r3
    eb78:	ebfffd90 	bl	e1c0 <m_getIndex_i32>
    eb7c:	e1a03000 	mov	r3, r0
    eb80:	e1a03183 	lsl	r3, r3, #3
    eb84:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    eb88:	e0823003 	add	r3, r2, r3
    eb8c:	ed937b00 	vldr	d7, [r3]
			}
			else
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
    eb90:	ee287b07 	vmul.f64	d7, d8, d7
    eb94:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
    eb98:	ee367b07 	vadd.f64	d7, d6, d7
    eb9c:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc

				l_tempValue_f64=0;
			}
			else
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
    eba0:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    eba4:	e2833001 	add	r3, r3, #1
    eba8:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    ebac:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    ebb0:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    ebb4:	e1520003 	cmp	r2, r3
    ebb8:	baffffde 	blt	eb38 <g_sigMath_matrixInverse_bl+0x49c>
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
				}
				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    ebbc:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    ebc0:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    ebc4:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    ebc8:	e1a01002 	mov	r1, r2
    ebcc:	e1a02003 	mov	r2, r3
    ebd0:	ebfffd7a 	bl	e1c0 <m_getIndex_i32>
    ebd4:	e1a03000 	mov	r3, r0
    ebd8:	e1a03183 	lsl	r3, r3, #3
    ebdc:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    ebe0:	e0824003 	add	r4, r2, r3
										(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64)/
    ebe4:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    ebe8:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    ebec:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    ebf0:	e1a01002 	mov	r1, r2
    ebf4:	e1a02003 	mov	r2, r3
    ebf8:	ebfffd70 	bl	e1c0 <m_getIndex_i32>
    ebfc:	e1a03000 	mov	r3, r0
    ec00:	e1a03183 	lsl	r3, r3, #3
    ec04:	e51b207c 	ldr	r2, [fp, #-124]	; 0x7c
    ec08:	e0823003 	add	r3, r2, r3
    ec0c:	ed936b00 	vldr	d6, [r3]
    ec10:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    ec14:	ee368b47 	vsub.f64	d8, d6, d7
										l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)];
    ec18:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    ec1c:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    ec20:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    ec24:	e1a01002 	mov	r1, r2
    ec28:	e1a02003 	mov	r2, r3
    ec2c:	ebfffd63 	bl	e1c0 <m_getIndex_i32>
    ec30:	e1a03000 	mov	r3, r0
    ec34:	e1a03183 	lsl	r3, r3, #3
    ec38:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    ec3c:	e0823003 	add	r3, r2, r3
    ec40:	ed937b00 	vldr	d7, [r3]
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
				}
				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
										(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64)/
    ec44:	ee887b07 	vdiv.f64	d7, d8, d7
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
				}
				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    ec48:	ed847b00 	vstr	d7, [r4]
										(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64)/
										l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)];
				l_tempValue_f64=0;
    ec4c:	e3a02000 	mov	r2, #0
    ec50:	e3a03000 	mov	r3, #0
    ec54:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc


	//Cholesky for building the lower triangular matrix
	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=l_colCounter_ui32;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    ec58:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    ec5c:	e2833001 	add	r3, r3, #1
    ec60:	e50b3030 	str	r3, [fp, #-48]	; 0x30
    ec64:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    ec68:	e51b3080 	ldr	r3, [fp, #-128]	; 0x80
    ec6c:	e1520003 	cmp	r2, r3
    ec70:	3affff5c 	bcc	e9e8 <g_sigMath_matrixInverse_bl+0x34c>
	if(f_nrOfRowsA_ui32!=f_nrOfColsA_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}


	//Cholesky for building the lower triangular matrix
	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    ec74:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    ec78:	e2833001 	add	r3, r3, #1
    ec7c:	e50b3038 	str	r3, [fp, #-56]	; 0x38
    ec80:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    ec84:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    ec88:	e1520003 	cmp	r2, r3
    ec8c:	3affff52 	bcc	e9dc <g_sigMath_matrixInverse_bl+0x340>
//	}
//	l_determinant_f64=pow(l_determinant_f64,2);

//solve linear system

	if(g_sigMath_matrixEye_bl(l_eyeMatrix_f64[0],f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
    ec90:	e51b3070 	ldr	r3, [fp, #-112]	; 0x70
    ec94:	e1a00003 	mov	r0, r3
    ec98:	e51b1080 	ldr	r1, [fp, #-128]	; 0x80
    ec9c:	e51b2084 	ldr	r2, [fp, #-132]	; 0x84
    eca0:	eb0000f7 	bl	f084 <g_sigMath_matrixEye_bl>
    eca4:	e1a03000 	mov	r3, r0
    eca8:	e3530000 	cmp	r3, #0
    ecac:	0a000001 	beq	ecb8 <g_sigMath_matrixInverse_bl+0x61c>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    ecb0:	e3a03001 	mov	r3, #1
    ecb4:	ea000081 	b	eec0 <g_sigMath_matrixInverse_bl+0x824>
	l_tempValue_f64=0;
    ecb8:	e3a02000 	mov	r2, #0
    ecbc:	e3a03000 	mov	r3, #0
    ecc0:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    ecc4:	e3a03000 	mov	r3, #0
    ecc8:	e50b3038 	str	r3, [fp, #-56]	; 0x38
    eccc:	ea000059 	b	ee38 <g_sigMath_matrixInverse_bl+0x79c>
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    ecd0:	e3a03000 	mov	r3, #0
    ecd4:	e50b3030 	str	r3, [fp, #-48]	; 0x30
    ecd8:	ea00004f 	b	ee1c <g_sigMath_matrixInverse_bl+0x780>
		{
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
    ecdc:	e3a03000 	mov	r3, #0
    ece0:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    ece4:	ea00001e 	b	ed64 <g_sigMath_matrixInverse_bl+0x6c8>
    ece8:	00000000 	.word	0x00000000
    ecec:	40000000 	.word	0x40000000
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
    ecf0:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    ecf4:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    ecf8:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    ecfc:	e1a01002 	mov	r1, r2
    ed00:	e1a02003 	mov	r2, r3
    ed04:	ebfffd2d 	bl	e1c0 <m_getIndex_i32>
    ed08:	e1a03000 	mov	r3, r0
    ed0c:	e1a03183 	lsl	r3, r3, #3
    ed10:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    ed14:	e0823003 	add	r3, r2, r3
    ed18:	ed938b00 	vldr	d8, [r3]
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
    ed1c:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    ed20:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    ed24:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    ed28:	e1a01002 	mov	r1, r2
    ed2c:	e1a02003 	mov	r2, r3
    ed30:	ebfffd22 	bl	e1c0 <m_getIndex_i32>
    ed34:	e1a03000 	mov	r3, r0
    ed38:	e1a03183 	lsl	r3, r3, #3
    ed3c:	e51b2064 	ldr	r2, [fp, #-100]	; 0x64
    ed40:	e0823003 	add	r3, r2, r3
    ed44:	ed937b00 	vldr	d7, [r3]
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
    ed48:	ee287b07 	vmul.f64	d7, d8, d7
    ed4c:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
    ed50:	ee367b47 	vsub.f64	d7, d6, d7
    ed54:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
    ed58:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    ed5c:	e2833001 	add	r3, r3, #1
    ed60:	e50b3034 	str	r3, [fp, #-52]	; 0x34
    ed64:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    ed68:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    ed6c:	e1520003 	cmp	r2, r3
    ed70:	baffffde 	blt	ecf0 <g_sigMath_matrixInverse_bl+0x654>
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
			}
			l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    ed74:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    ed78:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    ed7c:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    ed80:	e1a01002 	mov	r1, r2
    ed84:	e1a02003 	mov	r2, r3
    ed88:	ebfffd0c 	bl	e1c0 <m_getIndex_i32>
    ed8c:	e1a03000 	mov	r3, r0
    ed90:	e1a03183 	lsl	r3, r3, #3
    ed94:	e51b2064 	ldr	r2, [fp, #-100]	; 0x64
    ed98:	e0824003 	add	r4, r2, r3
						(l_eyeMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+l_tempValue_f64)/
    ed9c:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    eda0:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    eda4:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    eda8:	e1a01002 	mov	r1, r2
    edac:	e1a02003 	mov	r2, r3
    edb0:	ebfffd02 	bl	e1c0 <m_getIndex_i32>
    edb4:	e1a03000 	mov	r3, r0
    edb8:	e1a03183 	lsl	r3, r3, #3
    edbc:	e51b2074 	ldr	r2, [fp, #-116]	; 0x74
    edc0:	e0823003 	add	r3, r2, r3
    edc4:	ed936b00 	vldr	d6, [r3]
    edc8:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    edcc:	ee368b07 	vadd.f64	d8, d6, d7
						l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounter_ui32)];
    edd0:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    edd4:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    edd8:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
    eddc:	e1a01002 	mov	r1, r2
    ede0:	e1a02003 	mov	r2, r3
    ede4:	ebfffcf5 	bl	e1c0 <m_getIndex_i32>
    ede8:	e1a03000 	mov	r3, r0
    edec:	e1a03183 	lsl	r3, r3, #3
    edf0:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    edf4:	e0823003 	add	r3, r2, r3
    edf8:	ed937b00 	vldr	d7, [r3]
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
			}
			l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						(l_eyeMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+l_tempValue_f64)/
    edfc:	ee887b07 	vdiv.f64	d7, d8, d7
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
			}
			l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    ee00:	ed847b00 	vstr	d7, [r4]
						(l_eyeMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+l_tempValue_f64)/
						l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounter_ui32)];
			l_tempValue_f64=0;
    ee04:	e3a02000 	mov	r2, #0
    ee08:	e3a03000 	mov	r3, #0
    ee0c:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	l_tempValue_f64=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    ee10:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
    ee14:	e2833001 	add	r3, r3, #1
    ee18:	e50b3030 	str	r3, [fp, #-48]	; 0x30
    ee1c:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
    ee20:	e51b3080 	ldr	r3, [fp, #-128]	; 0x80
    ee24:	e1520003 	cmp	r2, r3
    ee28:	3affffab 	bcc	ecdc <g_sigMath_matrixInverse_bl+0x640>

	if(g_sigMath_matrixEye_bl(l_eyeMatrix_f64[0],f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	l_tempValue_f64=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
    ee2c:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
    ee30:	e2833001 	add	r3, r3, #1
    ee34:	e50b3038 	str	r3, [fp, #-56]	; 0x38
    ee38:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
    ee3c:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    ee40:	e1520003 	cmp	r2, r3
    ee44:	3affffa1 	bcc	ecd0 <g_sigMath_matrixInverse_bl+0x634>
						l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounter_ui32)];
			l_tempValue_f64=0;
		}
	}

	if(g_sigMath_matrixTransponiert_bl((double*)l_lowerTriangularMatrix_f64,(double*)l_lowerInverseTriangularMatrix_f64,
    ee48:	e51b2050 	ldr	r2, [fp, #-80]	; 0x50
    ee4c:	e51b3060 	ldr	r3, [fp, #-96]	; 0x60
    ee50:	e1a00002 	mov	r0, r2
    ee54:	e1a01003 	mov	r1, r3
    ee58:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
    ee5c:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    ee60:	ebfffdd8 	bl	e5c8 <g_sigMath_matrixTransponiert_bl>
    ee64:	e1a03000 	mov	r3, r0
    ee68:	e3530000 	cmp	r3, #0
    ee6c:	0a000001 	beq	ee78 <g_sigMath_matrixInverse_bl+0x7dc>
				f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    ee70:	e3a03001 	mov	r3, #1
    ee74:	ea000011 	b	eec0 <g_sigMath_matrixInverse_bl+0x824>

	if(g_sigMath_matrixMultiplikation_bl((double*)f_matrixResult_pf64,(double*)l_lowerTriangularMatrix_f64 ,
    ee78:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
			f_nrOfRowsA_ui32,f_nrOfColsA_ui32,(double*)l_lowerInverseTriangularMatrix_f64,f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
    ee7c:	e51b2060 	ldr	r2, [fp, #-96]	; 0x60

	if(g_sigMath_matrixTransponiert_bl((double*)l_lowerTriangularMatrix_f64,(double*)l_lowerInverseTriangularMatrix_f64,
				f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}

	if(g_sigMath_matrixMultiplikation_bl((double*)f_matrixResult_pf64,(double*)l_lowerTriangularMatrix_f64 ,
    ee80:	e58d2000 	str	r2, [sp]
    ee84:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
    ee88:	e58d2004 	str	r2, [sp, #4]
    ee8c:	e51b2084 	ldr	r2, [fp, #-132]	; 0x84
    ee90:	e58d2008 	str	r2, [sp, #8]
    ee94:	e51b0078 	ldr	r0, [fp, #-120]	; 0x78
    ee98:	e1a01003 	mov	r1, r3
    ee9c:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
    eea0:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
    eea4:	ebfffcd4 	bl	e1fc <g_sigMath_matrixMultiplikation_bl>
    eea8:	e1a03000 	mov	r3, r0
    eeac:	e3530000 	cmp	r3, #0
    eeb0:	0a000001 	beq	eebc <g_sigMath_matrixInverse_bl+0x820>
			f_nrOfRowsA_ui32,f_nrOfColsA_ui32,(double*)l_lowerInverseTriangularMatrix_f64,f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    eeb4:	e3a03001 	mov	r3, #1
    eeb8:	ea000000 	b	eec0 <g_sigMath_matrixInverse_bl+0x824>

	return M_SIG_MATRIXLIB_SUCCESS_BL;
    eebc:	e3a03000 	mov	r3, #0
    eec0:	e1a0d00a 	mov	sp, sl
}
    eec4:	e1a00003 	mov	r0, r3
    eec8:	e24bd028 	sub	sp, fp, #40	; 0x28
    eecc:	ecbd8b02 	vpop	{d8}
    eed0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000eed4 <g_sigMath_matrixAssignment_bl>:
 ***********************************************************************/
unsigned int g_sigMath_matrixAssignment_bl(double* f_matrixResult_pf64,
		unsigned int f_nrOfRowsResult_ui32,unsigned int f_nrOfColsResult_ui32,
		double* f_matrix_pf64, unsigned int f_nrOfRows_ui32,
		unsigned int f_nrOfCols_ui32)
{
    eed4:	e92d4810 	push	{r4, fp, lr}
    eed8:	e28db008 	add	fp, sp, #8
    eedc:	e24dd01c 	sub	sp, sp, #28
    eee0:	e50b0018 	str	r0, [fp, #-24]
    eee4:	e50b101c 	str	r1, [fp, #-28]
    eee8:	e50b2020 	str	r2, [fp, #-32]
    eeec:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	unsigned int l_rowCounter_ui32=0;
    eef0:	e3a03000 	mov	r3, #0
    eef4:	e50b3010 	str	r3, [fp, #-16]
	unsigned int l_colCounter_ui32=0;
    eef8:	e3a03000 	mov	r3, #0
    eefc:	e50b3014 	str	r3, [fp, #-20]

	if(f_nrOfRows_ui32!=f_nrOfRowsResult_ui32 && f_nrOfCols_ui32!=f_nrOfColsResult_ui32)
    ef00:	e59b2004 	ldr	r2, [fp, #4]
    ef04:	e51b301c 	ldr	r3, [fp, #-28]
    ef08:	e1520003 	cmp	r2, r3
    ef0c:	0a000005 	beq	ef28 <g_sigMath_matrixAssignment_bl+0x54>
    ef10:	e59b2008 	ldr	r2, [fp, #8]
    ef14:	e51b3020 	ldr	r3, [fp, #-32]
    ef18:	e1520003 	cmp	r2, r3
    ef1c:	0a000001 	beq	ef28 <g_sigMath_matrixAssignment_bl+0x54>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
    ef20:	e3a03001 	mov	r3, #1
    ef24:	ea000026 	b	efc4 <g_sigMath_matrixAssignment_bl+0xf0>
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    ef28:	e3a03000 	mov	r3, #0
    ef2c:	e50b3014 	str	r3, [fp, #-20]
    ef30:	ea00001e 	b	efb0 <g_sigMath_matrixAssignment_bl+0xdc>
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    ef34:	e3a03000 	mov	r3, #0
    ef38:	e50b3010 	str	r3, [fp, #-16]
    ef3c:	ea000014 	b	ef94 <g_sigMath_matrixAssignment_bl+0xc0>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    ef40:	e59b0008 	ldr	r0, [fp, #8]
    ef44:	e51b1010 	ldr	r1, [fp, #-16]
    ef48:	e51b2014 	ldr	r2, [fp, #-20]
    ef4c:	ebfffc9b 	bl	e1c0 <m_getIndex_i32>
    ef50:	e1a03000 	mov	r3, r0
    ef54:	e1a03183 	lsl	r3, r3, #3
    ef58:	e51b2018 	ldr	r2, [fp, #-24]
    ef5c:	e0824003 	add	r4, r2, r3
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
    ef60:	e59b0008 	ldr	r0, [fp, #8]
    ef64:	e51b1010 	ldr	r1, [fp, #-16]
    ef68:	e51b2014 	ldr	r2, [fp, #-20]
    ef6c:	ebfffc93 	bl	e1c0 <m_getIndex_i32>
    ef70:	e1a03000 	mov	r3, r0
    ef74:	e1a03183 	lsl	r3, r3, #3
    ef78:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
    ef7c:	e0823003 	add	r3, r2, r3
    ef80:	e1c320d0 	ldrd	r2, [r3]
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
    ef84:	e1c420f0 	strd	r2, [r4]
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    ef88:	e51b3010 	ldr	r3, [fp, #-16]
    ef8c:	e2833001 	add	r3, r3, #1
    ef90:	e50b3010 	str	r3, [fp, #-16]
    ef94:	e51b2010 	ldr	r2, [fp, #-16]
    ef98:	e59b3004 	ldr	r3, [fp, #4]
    ef9c:	e1520003 	cmp	r2, r3
    efa0:	3affffe6 	bcc	ef40 <g_sigMath_matrixAssignment_bl+0x6c>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    efa4:	e51b3014 	ldr	r3, [fp, #-20]
    efa8:	e2833001 	add	r3, r3, #1
    efac:	e50b3014 	str	r3, [fp, #-20]
    efb0:	e51b2014 	ldr	r2, [fp, #-20]
    efb4:	e59b3008 	ldr	r3, [fp, #8]
    efb8:	e1520003 	cmp	r2, r3
    efbc:	3affffdc 	bcc	ef34 <g_sigMath_matrixAssignment_bl+0x60>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    efc0:	e3a03000 	mov	r3, #0
	}
}
    efc4:	e1a00003 	mov	r0, r3
    efc8:	e24bd008 	sub	sp, fp, #8
    efcc:	e8bd8810 	pop	{r4, fp, pc}

0000efd0 <g_sigMath_matrixInitialize_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixInitialize_bl(double* f_matrixResult_pf64,
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32,
		double f_setValue_f64)
{
    efd0:	e92d4800 	push	{fp, lr}
    efd4:	e28db004 	add	fp, sp, #4
    efd8:	e24dd020 	sub	sp, sp, #32
    efdc:	e50b0010 	str	r0, [fp, #-16]
    efe0:	e50b1014 	str	r1, [fp, #-20]
    efe4:	e50b2018 	str	r2, [fp, #-24]
    efe8:	ed0b0b09 	vstr	d0, [fp, #-36]	; 0xffffffdc
	unsigned int l_rowCounter_ui32=0;
    efec:	e3a03000 	mov	r3, #0
    eff0:	e50b3008 	str	r3, [fp, #-8]
	unsigned int l_colCounter_ui32=0;
    eff4:	e3a03000 	mov	r3, #0
    eff8:	e50b300c 	str	r3, [fp, #-12]

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    effc:	e3a03000 	mov	r3, #0
    f000:	e50b300c 	str	r3, [fp, #-12]
    f004:	ea000016 	b	f064 <g_sigMath_matrixInitialize_bl+0x94>
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    f008:	e3a03000 	mov	r3, #0
    f00c:	e50b3008 	str	r3, [fp, #-8]
    f010:	ea00000c 	b	f048 <g_sigMath_matrixInitialize_bl+0x78>
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=f_setValue_f64;
    f014:	e51b0018 	ldr	r0, [fp, #-24]
    f018:	e51b1008 	ldr	r1, [fp, #-8]
    f01c:	e51b200c 	ldr	r2, [fp, #-12]
    f020:	ebfffc66 	bl	e1c0 <m_getIndex_i32>
    f024:	e1a03000 	mov	r3, r0
    f028:	e1a03183 	lsl	r3, r3, #3
    f02c:	e51b2010 	ldr	r2, [fp, #-16]
    f030:	e0821003 	add	r1, r2, r3
    f034:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
    f038:	e1c120f0 	strd	r2, [r1]
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    f03c:	e51b3008 	ldr	r3, [fp, #-8]
    f040:	e2833001 	add	r3, r3, #1
    f044:	e50b3008 	str	r3, [fp, #-8]
    f048:	e51b2008 	ldr	r2, [fp, #-8]
    f04c:	e51b3014 	ldr	r3, [fp, #-20]
    f050:	e1520003 	cmp	r2, r3
    f054:	3affffee 	bcc	f014 <g_sigMath_matrixInitialize_bl+0x44>
		double f_setValue_f64)
{
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    f058:	e51b300c 	ldr	r3, [fp, #-12]
    f05c:	e2833001 	add	r3, r3, #1
    f060:	e50b300c 	str	r3, [fp, #-12]
    f064:	e51b200c 	ldr	r2, [fp, #-12]
    f068:	e51b3018 	ldr	r3, [fp, #-24]
    f06c:	e1520003 	cmp	r2, r3
    f070:	3affffe4 	bcc	f008 <g_sigMath_matrixInitialize_bl+0x38>
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=f_setValue_f64;
		}
	}
	return M_SIG_MATRIXLIB_SUCCESS_BL;
    f074:	e3a03000 	mov	r3, #0

}
    f078:	e1a00003 	mov	r0, r3
    f07c:	e24bd004 	sub	sp, fp, #4
    f080:	e8bd8800 	pop	{fp, pc}

0000f084 <g_sigMath_matrixEye_bl>:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixEye_bl(double* f_matrixResult_pf64,
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32)
{
    f084:	e92d4800 	push	{fp, lr}
    f088:	e28db004 	add	fp, sp, #4
    f08c:	e24dd018 	sub	sp, sp, #24
    f090:	e50b0010 	str	r0, [fp, #-16]
    f094:	e50b1014 	str	r1, [fp, #-20]
    f098:	e50b2018 	str	r2, [fp, #-24]
	unsigned int l_rowCounter_ui32=0;
    f09c:	e3a03000 	mov	r3, #0
    f0a0:	e50b3008 	str	r3, [fp, #-8]
	unsigned int l_colCounter_ui32=0;
    f0a4:	e3a03000 	mov	r3, #0
    f0a8:	e50b300c 	str	r3, [fp, #-12]

	if(f_nrOfRows_ui32!=f_nrOfCols_ui32)
    f0ac:	e51b2014 	ldr	r2, [fp, #-20]
    f0b0:	e51b3018 	ldr	r3, [fp, #-24]
    f0b4:	e1520003 	cmp	r2, r3
    f0b8:	0a000001 	beq	f0c4 <g_sigMath_matrixEye_bl+0x40>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
    f0bc:	e3a03001 	mov	r3, #1
    f0c0:	ea00002f 	b	f184 <g_sigMath_matrixEye_bl+0x100>
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    f0c4:	e3a03000 	mov	r3, #0
    f0c8:	e50b300c 	str	r3, [fp, #-12]
    f0cc:	ea000027 	b	f170 <g_sigMath_matrixEye_bl+0xec>
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    f0d0:	e3a03000 	mov	r3, #0
    f0d4:	e50b3008 	str	r3, [fp, #-8]
    f0d8:	ea00001d 	b	f154 <g_sigMath_matrixEye_bl+0xd0>
			{
				if(l_rowCounter_ui32==l_colCounter_ui32)
    f0dc:	e51b2008 	ldr	r2, [fp, #-8]
    f0e0:	e51b300c 	ldr	r3, [fp, #-12]
    f0e4:	e1520003 	cmp	r2, r3
    f0e8:	1a00000b 	bne	f11c <g_sigMath_matrixEye_bl+0x98>
				{
					f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=1;
    f0ec:	e51b0018 	ldr	r0, [fp, #-24]
    f0f0:	e51b1008 	ldr	r1, [fp, #-8]
    f0f4:	e51b200c 	ldr	r2, [fp, #-12]
    f0f8:	ebfffc30 	bl	e1c0 <m_getIndex_i32>
    f0fc:	e1a03000 	mov	r3, r0
    f100:	e1a03183 	lsl	r3, r3, #3
    f104:	e51b2010 	ldr	r2, [fp, #-16]
    f108:	e0821003 	add	r1, r2, r3
    f10c:	e3a02000 	mov	r2, #0
    f110:	e59f3078 	ldr	r3, [pc, #120]	; f190 <g_sigMath_matrixEye_bl+0x10c>
    f114:	e1c120f0 	strd	r2, [r1]
    f118:	ea00000a 	b	f148 <g_sigMath_matrixEye_bl+0xc4>
				}
				else
				{
					f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=0;
    f11c:	e51b0018 	ldr	r0, [fp, #-24]
    f120:	e51b1008 	ldr	r1, [fp, #-8]
    f124:	e51b200c 	ldr	r2, [fp, #-12]
    f128:	ebfffc24 	bl	e1c0 <m_getIndex_i32>
    f12c:	e1a03000 	mov	r3, r0
    f130:	e1a03183 	lsl	r3, r3, #3
    f134:	e51b2010 	ldr	r2, [fp, #-16]
    f138:	e0821003 	add	r1, r2, r3
    f13c:	e3a02000 	mov	r2, #0
    f140:	e3a03000 	mov	r3, #0
    f144:	e1c120f0 	strd	r2, [r1]
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
    f148:	e51b3008 	ldr	r3, [fp, #-8]
    f14c:	e2833001 	add	r3, r3, #1
    f150:	e50b3008 	str	r3, [fp, #-8]
    f154:	e51b2008 	ldr	r2, [fp, #-8]
    f158:	e51b3014 	ldr	r3, [fp, #-20]
    f15c:	e1520003 	cmp	r2, r3
    f160:	3affffdd 	bcc	f0dc <g_sigMath_matrixEye_bl+0x58>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
    f164:	e51b300c 	ldr	r3, [fp, #-12]
    f168:	e2833001 	add	r3, r3, #1
    f16c:	e50b300c 	str	r3, [fp, #-12]
    f170:	e51b200c 	ldr	r2, [fp, #-12]
    f174:	e51b3018 	ldr	r3, [fp, #-24]
    f178:	e1520003 	cmp	r2, r3
    f17c:	3affffd3 	bcc	f0d0 <g_sigMath_matrixEye_bl+0x4c>
				{
					f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=0;
				}
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
    f180:	e3a03000 	mov	r3, #0
	}
}
    f184:	e1a00003 	mov	r0, r3
    f188:	e24bd004 	sub	sp, fp, #4
    f18c:	e8bd8800 	pop	{fp, pc}
    f190:	3ff00000 	.word	0x3ff00000
    f194:	e1a00000 	nop			; (mov r0, r0)

0000f198 <g_sigOri_getAnglesComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles g_sigOri_getAnglesComplementary_bl()
{
    f198:	e92d4830 	push	{r4, r5, fp, lr}
    f19c:	e28db00c 	add	fp, sp, #12
    f1a0:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_sigOri_arrayOutputAnglesComplementary_st;
    f1a4:	e59f3040 	ldr	r3, [pc, #64]	; f1ec <g_sigOri_getAnglesComplementary_bl+0x54>
    f1a8:	e24bc024 	sub	ip, fp, #36	; 0x24
    f1ac:	e1a0e003 	mov	lr, r3
    f1b0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    f1b4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    f1b8:	e89e0003 	ldm	lr, {r0, r1}
    f1bc:	e88c0003 	stm	ip, {r0, r1}
    f1c0:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    f1c4:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    f1c8:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    f1cc:	ec454b15 	vmov	d5, r4, r5
    f1d0:	ec410b16 	vmov	d6, r0, r1
    f1d4:	ec432b17 	vmov	d7, r2, r3
}
    f1d8:	eeb00b45 	vmov.f64	d0, d5
    f1dc:	eeb01b46 	vmov.f64	d1, d6
    f1e0:	eeb02b47 	vmov.f64	d2, d7
    f1e4:	e24bd00c 	sub	sp, fp, #12
    f1e8:	e8bd8830 	pop	{r4, r5, fp, pc}
    f1ec:	00019a30 	.word	0x00019a30

0000f1f0 <g_sigOri_getPitchComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getPitchComplementary_bl()
{
    f1f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    f1f4:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64;
    f1f8:	e59f3014 	ldr	r3, [pc, #20]	; f214 <g_sigOri_getPitchComplementary_bl+0x24>
    f1fc:	e1c320d8 	ldrd	r2, [r3, #8]
    f200:	ec432b17 	vmov	d7, r2, r3
}
    f204:	eeb00b47 	vmov.f64	d0, d7
    f208:	e24bd000 	sub	sp, fp, #0
    f20c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    f210:	e12fff1e 	bx	lr
    f214:	00019a30 	.word	0x00019a30

0000f218 <g_sigOri_getRollComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getRollComplementary_bl()
{
    f218:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    f21c:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesComplementary_st.roll_f64;
    f220:	e59f3014 	ldr	r3, [pc, #20]	; f23c <g_sigOri_getRollComplementary_bl+0x24>
    f224:	e1c320d0 	ldrd	r2, [r3]
    f228:	ec432b17 	vmov	d7, r2, r3
}
    f22c:	eeb00b47 	vmov.f64	d0, d7
    f230:	e24bd000 	sub	sp, fp, #0
    f234:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    f238:	e12fff1e 	bx	lr
    f23c:	00019a30 	.word	0x00019a30

0000f240 <g_sigOri_getYawComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getYawComplementary_bl()
{
    f240:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    f244:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64;
    f248:	e59f3014 	ldr	r3, [pc, #20]	; f264 <g_sigOri_getYawComplementary_bl+0x24>
    f24c:	e1c321d0 	ldrd	r2, [r3, #16]
    f250:	ec432b17 	vmov	d7, r2, r3
}
    f254:	eeb00b47 	vmov.f64	d0, d7
    f258:	e24bd000 	sub	sp, fp, #0
    f25c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    f260:	e12fff1e 	bx	lr
    f264:	00019a30 	.word	0x00019a30

0000f268 <g_sigOri_getAnglesKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles g_sigOri_getAnglesKalman_bl()
{
    f268:	e92d4830 	push	{r4, r5, fp, lr}
    f26c:	e28db00c 	add	fp, sp, #12
    f270:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_sigOri_arrayOutputAnglesKalman_st;
    f274:	e59f3040 	ldr	r3, [pc, #64]	; f2bc <g_sigOri_getAnglesKalman_bl+0x54>
    f278:	e24bc024 	sub	ip, fp, #36	; 0x24
    f27c:	e1a0e003 	mov	lr, r3
    f280:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    f284:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    f288:	e89e0003 	ldm	lr, {r0, r1}
    f28c:	e88c0003 	stm	ip, {r0, r1}
    f290:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    f294:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    f298:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    f29c:	ec454b15 	vmov	d5, r4, r5
    f2a0:	ec410b16 	vmov	d6, r0, r1
    f2a4:	ec432b17 	vmov	d7, r2, r3
}
    f2a8:	eeb00b45 	vmov.f64	d0, d5
    f2ac:	eeb01b46 	vmov.f64	d1, d6
    f2b0:	eeb02b47 	vmov.f64	d2, d7
    f2b4:	e24bd00c 	sub	sp, fp, #12
    f2b8:	e8bd8830 	pop	{r4, r5, fp, pc}
    f2bc:	000199e8 	.word	0x000199e8

0000f2c0 <g_sigOri_getPitchKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getPitchKalman_bl()
{
    f2c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    f2c4:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesKalman_st.pitch_f64;
    f2c8:	e59f3014 	ldr	r3, [pc, #20]	; f2e4 <g_sigOri_getPitchKalman_bl+0x24>
    f2cc:	e1c320d8 	ldrd	r2, [r3, #8]
    f2d0:	ec432b17 	vmov	d7, r2, r3
}
    f2d4:	eeb00b47 	vmov.f64	d0, d7
    f2d8:	e24bd000 	sub	sp, fp, #0
    f2dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    f2e0:	e12fff1e 	bx	lr
    f2e4:	000199e8 	.word	0x000199e8

0000f2e8 <g_sigOri_getRollKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getRollKalman_bl()
{
    f2e8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    f2ec:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesKalman_st.roll_f64;
    f2f0:	e59f3014 	ldr	r3, [pc, #20]	; f30c <g_sigOri_getRollKalman_bl+0x24>
    f2f4:	e1c320d0 	ldrd	r2, [r3]
    f2f8:	ec432b17 	vmov	d7, r2, r3
}
    f2fc:	eeb00b47 	vmov.f64	d0, d7
    f300:	e24bd000 	sub	sp, fp, #0
    f304:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    f308:	e12fff1e 	bx	lr
    f30c:	000199e8 	.word	0x000199e8

0000f310 <g_sigOri_getYawKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getYawKalman_bl()
{
    f310:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    f314:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesKalman_st.yaw_f64;
    f318:	e59f3014 	ldr	r3, [pc, #20]	; f334 <g_sigOri_getYawKalman_bl+0x24>
    f31c:	e1c321d0 	ldrd	r2, [r3, #16]
    f320:	ec432b17 	vmov	d7, r2, r3
}
    f324:	eeb00b47 	vmov.f64	d0, d7
    f328:	e24bd000 	sub	sp, fp, #0
    f32c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    f330:	e12fff1e 	bx	lr
    f334:	000199e8 	.word	0x000199e8

0000f338 <g_sigOri_initImuSensors_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_sigOri_initImuSensors_bl()
{
    f338:	e92d4800 	push	{fp, lr}
    f33c:	e28db004 	add	fp, sp, #4
	if( g_SigFil_initImuSensors_bl() != 0 )
    f340:	eb000394 	bl	10198 <g_SigFil_initImuSensors_bl>
    f344:	e1a03000 	mov	r3, r0
    f348:	e3530000 	cmp	r3, #0
    f34c:	0a000001 	beq	f358 <g_sigOri_initImuSensors_bl+0x20>
	{return 1;}
    f350:	e3a03001 	mov	r3, #1
    f354:	ea000000 	b	f35c <g_sigOri_initImuSensors_bl+0x24>
	else
	{return 0;}
    f358:	e3a03000 	mov	r3, #0
}
    f35c:	e1a00003 	mov	r0, r3
    f360:	e8bd8800 	pop	{fp, pc}

0000f364 <g_sigOri_initMatrices_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_sigOri_initMatrices_bl()
{
    f364:	e92d4800 	push	{fp, lr}
    f368:	e28db004 	add	fp, sp, #4
	//initialize Pk Matrix
	if(g_sigMath_matrixEye_bl((double*)m_sigOri_matrixPk_rg9f64,3,3)!=0)
    f36c:	e59f00ac 	ldr	r0, [pc, #172]	; f420 <g_sigOri_initMatrices_bl+0xbc>
    f370:	e3a01003 	mov	r1, #3
    f374:	e3a02003 	mov	r2, #3
    f378:	ebffff41 	bl	f084 <g_sigMath_matrixEye_bl>
    f37c:	e1a03000 	mov	r3, r0
    f380:	e3530000 	cmp	r3, #0
    f384:	0a000001 	beq	f390 <g_sigOri_initMatrices_bl+0x2c>
	{return 1;}
    f388:	e3a03001 	mov	r3, #1
    f38c:	ea000021 	b	f418 <g_sigOri_initMatrices_bl+0xb4>

	//initialize an Identity matrix
	if(g_sigMath_matrixEye_bl((double*)m_sigOri_matrixI_rg9f64,3,3)!=0)
    f390:	e59f008c 	ldr	r0, [pc, #140]	; f424 <g_sigOri_initMatrices_bl+0xc0>
    f394:	e3a01003 	mov	r1, #3
    f398:	e3a02003 	mov	r2, #3
    f39c:	ebffff38 	bl	f084 <g_sigMath_matrixEye_bl>
    f3a0:	e1a03000 	mov	r3, r0
    f3a4:	e3530000 	cmp	r3, #0
    f3a8:	0a000001 	beq	f3b4 <g_sigOri_initMatrices_bl+0x50>
	{return 1;}
    f3ac:	e3a03001 	mov	r3, #1
    f3b0:	ea000018 	b	f418 <g_sigOri_initMatrices_bl+0xb4>
	m_sigOri_matrixQ_rg9f64[0][0]=0.005;
	m_sigOri_matrixQ_rg9f64[1][1]=0.005;
	m_sigOri_matrixQ_rg9f64[2][2]=0.0001;*/

	//initialize the measurement noise matrix
		m_sigOri_matrixR_rg9f64[0][0]=0.06;
    f3b4:	e59f106c 	ldr	r1, [pc, #108]	; f428 <g_sigOri_initMatrices_bl+0xc4>
    f3b8:	e59f206c 	ldr	r2, [pc, #108]	; f42c <g_sigOri_initMatrices_bl+0xc8>
    f3bc:	e59f306c 	ldr	r3, [pc, #108]	; f430 <g_sigOri_initMatrices_bl+0xcc>
    f3c0:	e1c120f0 	strd	r2, [r1]
		m_sigOri_matrixR_rg9f64[1][1]=0.1;
    f3c4:	e59f105c 	ldr	r1, [pc, #92]	; f428 <g_sigOri_initMatrices_bl+0xc4>
    f3c8:	e59f2064 	ldr	r2, [pc, #100]	; f434 <g_sigOri_initMatrices_bl+0xd0>
    f3cc:	e59f3064 	ldr	r3, [pc, #100]	; f438 <g_sigOri_initMatrices_bl+0xd4>
    f3d0:	e1c122f0 	strd	r2, [r1, #32]
		m_sigOri_matrixR_rg9f64[2][2]=0.07;
    f3d4:	e59f104c 	ldr	r1, [pc, #76]	; f428 <g_sigOri_initMatrices_bl+0xc4>
    f3d8:	e59f205c 	ldr	r2, [pc, #92]	; f43c <g_sigOri_initMatrices_bl+0xd8>
    f3dc:	e59f305c 	ldr	r3, [pc, #92]	; f440 <g_sigOri_initMatrices_bl+0xdc>
    f3e0:	e1c124f0 	strd	r2, [r1, #64]	; 0x40

		//initialize the process noise matrix
		m_sigOri_matrixQ_rg9f64[0][0]=0.005;
    f3e4:	e59f1058 	ldr	r1, [pc, #88]	; f444 <g_sigOri_initMatrices_bl+0xe0>
    f3e8:	e59f2058 	ldr	r2, [pc, #88]	; f448 <g_sigOri_initMatrices_bl+0xe4>
    f3ec:	e59f3058 	ldr	r3, [pc, #88]	; f44c <g_sigOri_initMatrices_bl+0xe8>
    f3f0:	e1c120f0 	strd	r2, [r1]
		m_sigOri_matrixQ_rg9f64[1][1]=0.005;
    f3f4:	e59f1048 	ldr	r1, [pc, #72]	; f444 <g_sigOri_initMatrices_bl+0xe0>
    f3f8:	e59f2048 	ldr	r2, [pc, #72]	; f448 <g_sigOri_initMatrices_bl+0xe4>
    f3fc:	e59f3048 	ldr	r3, [pc, #72]	; f44c <g_sigOri_initMatrices_bl+0xe8>
    f400:	e1c122f0 	strd	r2, [r1, #32]
		m_sigOri_matrixQ_rg9f64[2][2]=0.005;
    f404:	e59f1038 	ldr	r1, [pc, #56]	; f444 <g_sigOri_initMatrices_bl+0xe0>
    f408:	e59f2038 	ldr	r2, [pc, #56]	; f448 <g_sigOri_initMatrices_bl+0xe4>
    f40c:	e59f3038 	ldr	r3, [pc, #56]	; f44c <g_sigOri_initMatrices_bl+0xe8>
    f410:	e1c124f0 	strd	r2, [r1, #64]	; 0x40


	return 0;
    f414:	e3a03000 	mov	r3, #0
}
    f418:	e1a00003 	mov	r0, r3
    f41c:	e8bd8800 	pop	{fp, pc}
    f420:	00019b68 	.word	0x00019b68
    f424:	00019b20 	.word	0x00019b20
    f428:	00019bb0 	.word	0x00019bb0
    f42c:	eb851eb8 	.word	0xeb851eb8
    f430:	3faeb851 	.word	0x3faeb851
    f434:	9999999a 	.word	0x9999999a
    f438:	3fb99999 	.word	0x3fb99999
    f43c:	1eb851ec 	.word	0x1eb851ec
    f440:	3fb1eb85 	.word	0x3fb1eb85
    f444:	00019bf8 	.word	0x00019bf8
    f448:	47ae147b 	.word	0x47ae147b
    f44c:	3f747ae1 	.word	0x3f747ae1

0000f450 <g_sigOri_initBuildReferenceValues_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigOri_initBuildReferenceValues_bl()
{
    f450:	e92d4800 	push	{fp, lr}
    f454:	e28db004 	add	fp, sp, #4
    f458:	e24dd078 	sub	sp, sp, #120	; 0x78
	double l_barometricValue_f64=0;
    f45c:	e3a02000 	mov	r2, #0
    f460:	e3a03000 	mov	r3, #0
    f464:	e14b20fc 	strd	r2, [fp, #-12]
	double l_GravityValue_f64=0;
    f468:	e3a02000 	mov	r2, #0
    f46c:	e3a03000 	mov	r3, #0
    f470:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	double l_Temperature_f64=0;
    f474:	e3a02000 	mov	r2, #0
    f478:	e3a03000 	mov	r3, #0
    f47c:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	int l_countVar_i32=0;
    f480:	e3a03000 	mov	r3, #0
    f484:	e50b3020 	str	r3, [fp, #-32]
	halImu_orientationValues l_imuValues_st;

// create Reference pressure,Gravity and Temperature as mean value over M_NR_OF_VALUES_OFFSET_I32 values
	for(l_countVar_i32=0;l_countVar_i32<M_NR_OF_VALUES_OFFSET_I32;l_countVar_i32++)
    f488:	e3a03000 	mov	r3, #0
    f48c:	e50b3020 	str	r3, [fp, #-32]
    f490:	ea000012 	b	f4e0 <g_sigOri_initBuildReferenceValues_bl+0x90>
	{
		g_sigFil_readImuData_bl();
    f494:	eb000351 	bl	101e0 <g_sigFil_readImuData_bl>
		l_imuValues_st=g_sigFil_getImuValuesUnfiltered_st();
    f498:	e24b307c 	sub	r3, fp, #124	; 0x7c
    f49c:	e1a00003 	mov	r0, r3
    f4a0:	eb0002e4 	bl	10038 <g_sigFil_getImuValuesUnfiltered_st>
		l_barometricValue_f64+=l_imuValues_st.pressure_f64;
    f4a4:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    f4a8:	ed1b6b03 	vldr	d6, [fp, #-12]
    f4ac:	ee367b07 	vadd.f64	d7, d6, d7
    f4b0:	ed0b7b03 	vstr	d7, [fp, #-12]
		l_GravityValue_f64+=l_imuValues_st.acc.z_f64;
    f4b4:	ed1b7b1b 	vldr	d7, [fp, #-108]	; 0xffffff94
    f4b8:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
    f4bc:	ee367b07 	vadd.f64	d7, d6, d7
    f4c0:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
		l_Temperature_f64+=l_imuValues_st.temperature_f64;
    f4c4:	ed1b7b0d 	vldr	d7, [fp, #-52]	; 0xffffffcc
    f4c8:	ed1b6b07 	vldr	d6, [fp, #-28]	; 0xffffffe4
    f4cc:	ee367b07 	vadd.f64	d7, d6, d7
    f4d0:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4
	double l_Temperature_f64=0;
	int l_countVar_i32=0;
	halImu_orientationValues l_imuValues_st;

// create Reference pressure,Gravity and Temperature as mean value over M_NR_OF_VALUES_OFFSET_I32 values
	for(l_countVar_i32=0;l_countVar_i32<M_NR_OF_VALUES_OFFSET_I32;l_countVar_i32++)
    f4d4:	e51b3020 	ldr	r3, [fp, #-32]
    f4d8:	e2833001 	add	r3, r3, #1
    f4dc:	e50b3020 	str	r3, [fp, #-32]
    f4e0:	e51b3020 	ldr	r3, [fp, #-32]
    f4e4:	e3530ffa 	cmp	r3, #1000	; 0x3e8
    f4e8:	baffffe9 	blt	f494 <g_sigOri_initBuildReferenceValues_bl+0x44>
		l_imuValues_st=g_sigFil_getImuValuesUnfiltered_st();
		l_barometricValue_f64+=l_imuValues_st.pressure_f64;
		l_GravityValue_f64+=l_imuValues_st.acc.z_f64;
		l_Temperature_f64+=l_imuValues_st.temperature_f64;
	}
	m_sigOri_referencePressure_f64 =l_barometricValue_f64/M_NR_OF_VALUES_OFFSET_I32;
    f4ec:	ed1b6b03 	vldr	d6, [fp, #-12]
    f4f0:	ed9f7b0e 	vldr	d7, [pc, #56]	; f530 <g_sigOri_initBuildReferenceValues_bl+0xe0>
    f4f4:	ee867b07 	vdiv.f64	d7, d6, d7
    f4f8:	e59f3038 	ldr	r3, [pc, #56]	; f538 <g_sigOri_initBuildReferenceValues_bl+0xe8>
    f4fc:	ed837b00 	vstr	d7, [r3]
	m_sigOri_referenceGravity_f64=l_GravityValue_f64/M_NR_OF_VALUES_OFFSET_I32;
    f500:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
    f504:	ed9f7b09 	vldr	d7, [pc, #36]	; f530 <g_sigOri_initBuildReferenceValues_bl+0xe0>
    f508:	ee867b07 	vdiv.f64	d7, d6, d7
    f50c:	e59f3028 	ldr	r3, [pc, #40]	; f53c <g_sigOri_initBuildReferenceValues_bl+0xec>
    f510:	ed837b00 	vstr	d7, [r3]
	m_sigOri_referenceTemperature_f64=l_Temperature_f64/M_NR_OF_VALUES_OFFSET_I32;
    f514:	ed1b6b07 	vldr	d6, [fp, #-28]	; 0xffffffe4
    f518:	ed9f7b04 	vldr	d7, [pc, #16]	; f530 <g_sigOri_initBuildReferenceValues_bl+0xe0>
    f51c:	ee867b07 	vdiv.f64	d7, d6, d7
    f520:	e59f3018 	ldr	r3, [pc, #24]	; f540 <g_sigOri_initBuildReferenceValues_bl+0xf0>
    f524:	ed837b00 	vstr	d7, [r3]
}
    f528:	e24bd004 	sub	sp, fp, #4
    f52c:	e8bd8800 	pop	{fp, pc}
    f530:	00000000 	.word	0x00000000
    f534:	408f4000 	.word	0x408f4000
    f538:	00019960 	.word	0x00019960
    f53c:	00019968 	.word	0x00019968
    f540:	00019970 	.word	0x00019970

0000f544 <m_sigOri_getImuData_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void m_sigOri_getImuData_bl()
{
    f544:	e92d4810 	push	{r4, fp, lr}
    f548:	e28db008 	add	fp, sp, #8
    f54c:	e24dd05c 	sub	sp, sp, #92	; 0x5c
	g_sigFil_readImuData_bl();
    f550:	eb000322 	bl	101e0 <g_sigFil_readImuData_bl>
	m_sigori_imuValues_st = g_sigFil_getImuValuesUnfiltered_st();
    f554:	e59f402c 	ldr	r4, [pc, #44]	; f588 <m_sigOri_getImuData_bl+0x44>
    f558:	e24b3064 	sub	r3, fp, #100	; 0x64
    f55c:	e1a00003 	mov	r0, r3
    f560:	eb0002b4 	bl	10038 <g_sigFil_getImuValuesUnfiltered_st>
    f564:	e1a01004 	mov	r1, r4
    f568:	e24b2064 	sub	r2, fp, #100	; 0x64
    f56c:	e3a03058 	mov	r3, #88	; 0x58
    f570:	e1a00001 	mov	r0, r1
    f574:	e1a01002 	mov	r1, r2
    f578:	e1a02003 	mov	r2, r3
    f57c:	ebffe529 	bl	8a28 <_init+0x128>
}
    f580:	e24bd008 	sub	sp, fp, #8
    f584:	e8bd8810 	pop	{r4, fp, pc}
    f588:	00019900 	.word	0x00019900

0000f58c <m_sigOri_calcAccMagAngle_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles m_sigOri_calcAccMagAngle_st()
{
    f58c:	e92d4830 	push	{r4, r5, fp, lr}
    f590:	ed2d8b04 	vpush	{d8-d9}
    f594:	e28db01c 	add	fp, sp, #28
    f598:	e24dd0b0 	sub	sp, sp, #176	; 0xb0
	sigOri_orientationAngles l_angles_f64;
	double l_roll_f64=0;
    f59c:	e3a02000 	mov	r2, #0
    f5a0:	e3a03000 	mov	r3, #0
    f5a4:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	double l_pitch_f64=0;
    f5a8:	e3a02000 	mov	r2, #0
    f5ac:	e3a03000 	mov	r3, #0
    f5b0:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
	double l_yaw_f64=0;
    f5b4:	e3a02000 	mov	r2, #0
    f5b8:	e3a03000 	mov	r3, #0
    f5bc:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	double l_divider_f64=0;
    f5c0:	e3a02000 	mov	r2, #0
    f5c4:	e3a03000 	mov	r3, #0
    f5c8:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4

	double ll_minX_f64=M_SIGORI_MAG_MINX_F64;
    f5cc:	e59f22ec 	ldr	r2, [pc, #748]	; f8c0 <m_sigOri_calcAccMagAngle_st+0x334>
    f5d0:	e59f32ec 	ldr	r3, [pc, #748]	; f8c4 <m_sigOri_calcAccMagAngle_st+0x338>
    f5d4:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	double ll_maxX_f64=M_SIGORI_MAG_MAXX_F64;
    f5d8:	e59f22e8 	ldr	r2, [pc, #744]	; f8c8 <m_sigOri_calcAccMagAngle_st+0x33c>
    f5dc:	e59f32e8 	ldr	r3, [pc, #744]	; f8cc <m_sigOri_calcAccMagAngle_st+0x340>
    f5e0:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
	double ll_minY_f64=M_SIGORI_MAG_MINY_F64;
    f5e4:	e59f22e4 	ldr	r2, [pc, #740]	; f8d0 <m_sigOri_calcAccMagAngle_st+0x344>
    f5e8:	e59f32e4 	ldr	r3, [pc, #740]	; f8d4 <m_sigOri_calcAccMagAngle_st+0x348>
    f5ec:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac
	double ll_maxY_f64=M_SIGORI_MAG_MAXY_F64;
    f5f0:	e59f22e0 	ldr	r2, [pc, #736]	; f8d8 <m_sigOri_calcAccMagAngle_st+0x34c>
    f5f4:	e59f32e0 	ldr	r3, [pc, #736]	; f8dc <m_sigOri_calcAccMagAngle_st+0x350>
    f5f8:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	double ll_minZ_f64=M_SIGORI_MAG_MINZ_F64;
    f5fc:	e59f22dc 	ldr	r2, [pc, #732]	; f8e0 <m_sigOri_calcAccMagAngle_st+0x354>
    f600:	e59f32dc 	ldr	r3, [pc, #732]	; f8e4 <m_sigOri_calcAccMagAngle_st+0x358>
    f604:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
	double ll_maxZ_f64=M_SIGORI_MAG_MAXZ_F64;
    f608:	e59f22d8 	ldr	r2, [pc, #728]	; f8e8 <m_sigOri_calcAccMagAngle_st+0x35c>
    f60c:	e59f32d8 	ldr	r3, [pc, #728]	; f8ec <m_sigOri_calcAccMagAngle_st+0x360>
    f610:	e14b26fc 	strd	r2, [fp, #-108]	; 0xffffff94

	halAccmag_3dDoubleVector l_mag_st;
	
	l_mag_st.x_f64=(m_sigori_imuValues_st.mag.x_f64-ll_minX_f64)/(ll_maxX_f64-ll_minX_f64)*2-1;
    f614:	e59f32d4 	ldr	r3, [pc, #724]	; f8f0 <m_sigOri_calcAccMagAngle_st+0x364>
    f618:	ed936b06 	vldr	d6, [r3, #24]
    f61c:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    f620:	ee366b47 	vsub.f64	d6, d6, d7
    f624:	ed1b5b13 	vldr	d5, [fp, #-76]	; 0xffffffb4
    f628:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
    f62c:	ee357b47 	vsub.f64	d7, d5, d7
    f630:	ee867b07 	vdiv.f64	d7, d6, d7
    f634:	ee376b07 	vadd.f64	d6, d7, d7
    f638:	ed9f7b9c 	vldr	d7, [pc, #624]	; f8b0 <m_sigOri_calcAccMagAngle_st+0x324>
    f63c:	ee367b47 	vsub.f64	d7, d6, d7
    f640:	ed0b7b2d 	vstr	d7, [fp, #-180]	; 0xffffff4c
	l_mag_st.y_f64=(m_sigori_imuValues_st.mag.y_f64-ll_minY_f64)/(ll_maxY_f64-ll_minY_f64)*2-1;
    f644:	e59f32a4 	ldr	r3, [pc, #676]	; f8f0 <m_sigOri_calcAccMagAngle_st+0x364>
    f648:	ed936b08 	vldr	d6, [r3, #32]
    f64c:	ed1b7b15 	vldr	d7, [fp, #-84]	; 0xffffffac
    f650:	ee366b47 	vsub.f64	d6, d6, d7
    f654:	ed1b5b17 	vldr	d5, [fp, #-92]	; 0xffffffa4
    f658:	ed1b7b15 	vldr	d7, [fp, #-84]	; 0xffffffac
    f65c:	ee357b47 	vsub.f64	d7, d5, d7
    f660:	ee867b07 	vdiv.f64	d7, d6, d7
    f664:	ee376b07 	vadd.f64	d6, d7, d7
    f668:	ed9f7b90 	vldr	d7, [pc, #576]	; f8b0 <m_sigOri_calcAccMagAngle_st+0x324>
    f66c:	ee367b47 	vsub.f64	d7, d6, d7
    f670:	ed0b7b2b 	vstr	d7, [fp, #-172]	; 0xffffff54
	l_mag_st.z_f64=(m_sigori_imuValues_st.mag.z_f64-ll_minZ_f64)/(ll_maxZ_f64-ll_minZ_f64)*2-1;
    f674:	e59f3274 	ldr	r3, [pc, #628]	; f8f0 <m_sigOri_calcAccMagAngle_st+0x364>
    f678:	ed936b0a 	vldr	d6, [r3, #40]	; 0x28
    f67c:	ed1b7b19 	vldr	d7, [fp, #-100]	; 0xffffff9c
    f680:	ee366b47 	vsub.f64	d6, d6, d7
    f684:	ed1b5b1b 	vldr	d5, [fp, #-108]	; 0xffffff94
    f688:	ed1b7b19 	vldr	d7, [fp, #-100]	; 0xffffff9c
    f68c:	ee357b47 	vsub.f64	d7, d5, d7
    f690:	ee867b07 	vdiv.f64	d7, d6, d7
    f694:	ee376b07 	vadd.f64	d6, d7, d7
    f698:	ed9f7b84 	vldr	d7, [pc, #528]	; f8b0 <m_sigOri_calcAccMagAngle_st+0x324>
    f69c:	ee367b47 	vsub.f64	d7, d6, d7
    f6a0:	ed0b7b29 	vstr	d7, [fp, #-164]	; 0xffffff5c

	//calculate roll with accelerometer values
	if(m_sigori_imuValues_st.acc.z_f64!=0)
    f6a4:	e59f3244 	ldr	r3, [pc, #580]	; f8f0 <m_sigOri_calcAccMagAngle_st+0x364>
    f6a8:	ed937b04 	vldr	d7, [r3, #16]
    f6ac:	eeb57b40 	vcmp.f64	d7, #0.0
    f6b0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    f6b4:	0a00000c 	beq	f6ec <m_sigOri_calcAccMagAngle_st+0x160>
	{
		l_roll_f64=atan2(m_sigori_imuValues_st.acc.y_f64,m_sigori_imuValues_st.acc.z_f64);
    f6b8:	e59f3230 	ldr	r3, [pc, #560]	; f8f0 <m_sigOri_calcAccMagAngle_st+0x364>
    f6bc:	ed936b02 	vldr	d6, [r3, #8]
    f6c0:	e59f3228 	ldr	r3, [pc, #552]	; f8f0 <m_sigOri_calcAccMagAngle_st+0x364>
    f6c4:	ed937b04 	vldr	d7, [r3, #16]
    f6c8:	eeb00b46 	vmov.f64	d0, d6
    f6cc:	eeb01b47 	vmov.f64	d1, d7
    f6d0:	ebffe4e0 	bl	8a58 <_init+0x158>
    f6d4:	ed0b0b09 	vstr	d0, [fp, #-36]	; 0xffffffdc
		l_angles_f64.roll_f64=-l_roll_f64*M_RAD_TO_DEG_F64;
    f6d8:	ed1b7b09 	vldr	d7, [fp, #-36]	; 0xffffffdc
    f6dc:	eeb16b47 	vneg.f64	d6, d7
    f6e0:	ed9f7b74 	vldr	d7, [pc, #464]	; f8b8 <m_sigOri_calcAccMagAngle_st+0x32c>
    f6e4:	ee267b07 	vmul.f64	d7, d6, d7
    f6e8:	ed0b7b27 	vstr	d7, [fp, #-156]	; 0xffffff64
	}
	//calculate pitch with accelerometer values
	l_divider_f64=m_sigori_imuValues_st.acc.y_f64*sin(l_roll_f64)+m_sigori_imuValues_st.acc.z_f64*cos(l_roll_f64);
    f6ec:	e59f31fc 	ldr	r3, [pc, #508]	; f8f0 <m_sigOri_calcAccMagAngle_st+0x364>
    f6f0:	ed938b02 	vldr	d8, [r3, #8]
    f6f4:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    f6f8:	ebffe4eb 	bl	8aac <_init+0x1ac>
    f6fc:	eeb07b40 	vmov.f64	d7, d0
    f700:	ee288b07 	vmul.f64	d8, d8, d7
    f704:	e59f31e4 	ldr	r3, [pc, #484]	; f8f0 <m_sigOri_calcAccMagAngle_st+0x364>
    f708:	ed939b04 	vldr	d9, [r3, #16]
    f70c:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    f710:	ebffe4c1 	bl	8a1c <_init+0x11c>
    f714:	eeb07b40 	vmov.f64	d7, d0
    f718:	ee297b07 	vmul.f64	d7, d9, d7
    f71c:	ee387b07 	vadd.f64	d7, d8, d7
    f720:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	if(l_divider_f64!=0)
    f724:	ed1b7b0f 	vldr	d7, [fp, #-60]	; 0xffffffc4
    f728:	eeb57b40 	vcmp.f64	d7, #0.0
    f72c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    f730:	0a00000c 	beq	f768 <m_sigOri_calcAccMagAngle_st+0x1dc>
	{
		l_pitch_f64=atan(-m_sigori_imuValues_st.acc.x_f64/l_divider_f64);
    f734:	e59f31b4 	ldr	r3, [pc, #436]	; f8f0 <m_sigOri_calcAccMagAngle_st+0x364>
    f738:	ed937b00 	vldr	d7, [r3]
    f73c:	eeb16b47 	vneg.f64	d6, d7
    f740:	ed1b7b0f 	vldr	d7, [fp, #-60]	; 0xffffffc4
    f744:	ee867b07 	vdiv.f64	d7, d6, d7
    f748:	eeb00b47 	vmov.f64	d0, d7
    f74c:	ebffe49d 	bl	89c8 <_init+0xc8>
    f750:	ed0b0b0b 	vstr	d0, [fp, #-44]	; 0xffffffd4
		l_angles_f64.pitch_f64=-l_pitch_f64*M_RAD_TO_DEG_F64;
    f754:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    f758:	eeb16b47 	vneg.f64	d6, d7
    f75c:	ed9f7b55 	vldr	d7, [pc, #340]	; f8b8 <m_sigOri_calcAccMagAngle_st+0x32c>
    f760:	ee267b07 	vmul.f64	d7, d6, d7
    f764:	ed0b7b25 	vstr	d7, [fp, #-148]	; 0xffffff6c
	}

	//calculate yaw and make a tilt compensation for the eCompass
	l_divider_f64= m_sigori_imuValues_st.mag.x_f64*cos(l_pitch_f64)+
    f768:	e59f3180 	ldr	r3, [pc, #384]	; f8f0 <m_sigOri_calcAccMagAngle_st+0x364>
    f76c:	ed938b06 	vldr	d8, [r3, #24]
    f770:	ed1b0b0b 	vldr	d0, [fp, #-44]	; 0xffffffd4
    f774:	ebffe4a8 	bl	8a1c <_init+0x11c>
    f778:	eeb07b40 	vmov.f64	d7, d0
    f77c:	ee288b07 	vmul.f64	d8, d8, d7
					m_sigori_imuValues_st.mag.y_f64*sin(l_pitch_f64)*sin(l_roll_f64)+
    f780:	e59f3168 	ldr	r3, [pc, #360]	; f8f0 <m_sigOri_calcAccMagAngle_st+0x364>
    f784:	ed939b08 	vldr	d9, [r3, #32]
    f788:	ed1b0b0b 	vldr	d0, [fp, #-44]	; 0xffffffd4
    f78c:	ebffe4c6 	bl	8aac <_init+0x1ac>
    f790:	eeb07b40 	vmov.f64	d7, d0
    f794:	ee299b07 	vmul.f64	d9, d9, d7
    f798:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    f79c:	ebffe4c2 	bl	8aac <_init+0x1ac>
    f7a0:	eeb07b40 	vmov.f64	d7, d0
    f7a4:	ee297b07 	vmul.f64	d7, d9, d7
		l_pitch_f64=atan(-m_sigori_imuValues_st.acc.x_f64/l_divider_f64);
		l_angles_f64.pitch_f64=-l_pitch_f64*M_RAD_TO_DEG_F64;
	}

	//calculate yaw and make a tilt compensation for the eCompass
	l_divider_f64= m_sigori_imuValues_st.mag.x_f64*cos(l_pitch_f64)+
    f7a8:	ee388b07 	vadd.f64	d8, d8, d7
					m_sigori_imuValues_st.mag.y_f64*sin(l_pitch_f64)*sin(l_roll_f64)+
					m_sigori_imuValues_st.mag.z_f64*sin(l_pitch_f64)*cos(l_roll_f64);
    f7ac:	e59f313c 	ldr	r3, [pc, #316]	; f8f0 <m_sigOri_calcAccMagAngle_st+0x364>
    f7b0:	ed939b0a 	vldr	d9, [r3, #40]	; 0x28
    f7b4:	ed1b0b0b 	vldr	d0, [fp, #-44]	; 0xffffffd4
    f7b8:	ebffe4bb 	bl	8aac <_init+0x1ac>
    f7bc:	eeb07b40 	vmov.f64	d7, d0
    f7c0:	ee299b07 	vmul.f64	d9, d9, d7
    f7c4:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    f7c8:	ebffe493 	bl	8a1c <_init+0x11c>
    f7cc:	eeb07b40 	vmov.f64	d7, d0
    f7d0:	ee297b07 	vmul.f64	d7, d9, d7
		l_pitch_f64=atan(-m_sigori_imuValues_st.acc.x_f64/l_divider_f64);
		l_angles_f64.pitch_f64=-l_pitch_f64*M_RAD_TO_DEG_F64;
	}

	//calculate yaw and make a tilt compensation for the eCompass
	l_divider_f64= m_sigori_imuValues_st.mag.x_f64*cos(l_pitch_f64)+
    f7d4:	ee387b07 	vadd.f64	d7, d8, d7
    f7d8:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
					m_sigori_imuValues_st.mag.y_f64*sin(l_pitch_f64)*sin(l_roll_f64)+
					m_sigori_imuValues_st.mag.z_f64*sin(l_pitch_f64)*cos(l_roll_f64);
	if(l_divider_f64!=0)
    f7dc:	ed1b7b0f 	vldr	d7, [fp, #-60]	; 0xffffffc4
    f7e0:	eeb57b40 	vcmp.f64	d7, #0.0
    f7e4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    f7e8:	0a000016 	beq	f848 <m_sigOri_calcAccMagAngle_st+0x2bc>
	{
		l_yaw_f64=atan2(-(-m_sigori_imuValues_st.mag.z_f64*sin(l_roll_f64)+m_sigori_imuValues_st.mag.y_f64*cos(l_roll_f64)),
    f7ec:	e59f30fc 	ldr	r3, [pc, #252]	; f8f0 <m_sigOri_calcAccMagAngle_st+0x364>
    f7f0:	ed937b0a 	vldr	d7, [r3, #40]	; 0x28
    f7f4:	eeb18b47 	vneg.f64	d8, d7
    f7f8:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    f7fc:	ebffe4aa 	bl	8aac <_init+0x1ac>
    f800:	eeb07b40 	vmov.f64	d7, d0
    f804:	ee288b07 	vmul.f64	d8, d8, d7
    f808:	e59f30e0 	ldr	r3, [pc, #224]	; f8f0 <m_sigOri_calcAccMagAngle_st+0x364>
    f80c:	ed939b08 	vldr	d9, [r3, #32]
    f810:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
    f814:	ebffe480 	bl	8a1c <_init+0x11c>
    f818:	eeb07b40 	vmov.f64	d7, d0
    f81c:	ee297b07 	vmul.f64	d7, d9, d7
    f820:	ee387b07 	vadd.f64	d7, d8, d7
    f824:	eeb17b47 	vneg.f64	d7, d7
    f828:	eeb00b47 	vmov.f64	d0, d7
    f82c:	ed1b1b0f 	vldr	d1, [fp, #-60]	; 0xffffffc4
    f830:	ebffe488 	bl	8a58 <_init+0x158>
    f834:	ed0b0b0d 	vstr	d0, [fp, #-52]	; 0xffffffcc
					l_divider_f64);
		l_angles_f64.yaw_f64=l_yaw_f64*M_RAD_TO_DEG_F64;	
    f838:	ed1b6b0d 	vldr	d6, [fp, #-52]	; 0xffffffcc
    f83c:	ed9f7b1d 	vldr	d7, [pc, #116]	; f8b8 <m_sigOri_calcAccMagAngle_st+0x32c>
    f840:	ee267b07 	vmul.f64	d7, d6, d7
    f844:	ed0b7b23 	vstr	d7, [fp, #-140]	; 0xffffff74
			l_yaw_f64=atan2(l_divider_f64,l_mag_st.z_f64*sin(l_pitch_f64)+l_mag_st.x_f64*cos(l_pitch_f64));
			l_angles_f64.yaw_f64=l_yaw_f64*M_RAD_TO_DEG_F64;

		}*/

	m_sigOri_arrayOutputAnglesAccMagCalc_st = l_angles_f64;
    f848:	e59f30a4 	ldr	r3, [pc, #164]	; f8f4 <m_sigOri_calcAccMagAngle_st+0x368>
    f84c:	e1a0c003 	mov	ip, r3
    f850:	e24be09c 	sub	lr, fp, #156	; 0x9c
    f854:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    f858:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    f85c:	e89e0003 	ldm	lr, {r0, r1}
    f860:	e88c0003 	stm	ip, {r0, r1}

	return l_angles_f64;
    f864:	e24bc084 	sub	ip, fp, #132	; 0x84
    f868:	e24be09c 	sub	lr, fp, #156	; 0x9c
    f86c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    f870:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    f874:	e89e0003 	ldm	lr, {r0, r1}
    f878:	e88c0003 	stm	ip, {r0, r1}
    f87c:	e14b48d4 	ldrd	r4, [fp, #-132]	; 0xffffff7c
    f880:	e14b07dc 	ldrd	r0, [fp, #-124]	; 0xffffff84
    f884:	e14b27d4 	ldrd	r2, [fp, #-116]	; 0xffffff8c
    f888:	ec454b15 	vmov	d5, r4, r5
    f88c:	ec410b16 	vmov	d6, r0, r1
    f890:	ec432b17 	vmov	d7, r2, r3
}
    f894:	eeb00b45 	vmov.f64	d0, d5
    f898:	eeb01b46 	vmov.f64	d1, d6
    f89c:	eeb02b47 	vmov.f64	d2, d7
    f8a0:	e24bd01c 	sub	sp, fp, #28
    f8a4:	ecbd8b04 	vpop	{d8-d9}
    f8a8:	e8bd8830 	pop	{r4, r5, fp, pc}
    f8ac:	e1a00000 	nop			; (mov r0, r0)
    f8b0:	00000000 	.word	0x00000000
    f8b4:	3ff00000 	.word	0x3ff00000
    f8b8:	b05cc3e8 	.word	0xb05cc3e8
    f8bc:	404ca5dd 	.word	0x404ca5dd
    f8c0:	9ba5e354 	.word	0x9ba5e354
    f8c4:	c033b0c4 	.word	0xc033b0c4
    f8c8:	eecbfb16 	.word	0xeecbfb16
    f8cc:	4034c3c9 	.word	0x4034c3c9
    f8d0:	3fe5c91d 	.word	0x3fe5c91d
    f8d4:	c030bfa4 	.word	0xc030bfa4
    f8d8:	b98c7e28 	.word	0xb98c7e28
    f8dc:	4035696b 	.word	0x4035696b
    f8e0:	a0902de0 	.word	0xa0902de0
    f8e4:	c02e71f8 	.word	0xc02e71f8
    f8e8:	c5d63886 	.word	0xc5d63886
    f8ec:	4035b46d 	.word	0x4035b46d
    f8f0:	00019900 	.word	0x00019900
    f8f4:	000199a0 	.word	0x000199a0

0000f8f8 <m_sigOri_calcGyroAnglePerStep_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles m_sigOri_calcGyroAnglePerStep_st()
{
    f8f8:	e92d4830 	push	{r4, r5, fp, lr}
    f8fc:	e28db00c 	add	fp, sp, #12
    f900:	e24dd060 	sub	sp, sp, #96	; 0x60
	sigOri_orientationAngles l_angles_f64;
	
	long int time_difference;
	struct timeval gettime_now;
	double l_timestep_f64=0;
    f904:	e3a02000 	mov	r2, #0
    f908:	e3a03000 	mov	r3, #0
    f90c:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	gettimeofday(&gettime_now,(void *)0);
    f910:	e24b3054 	sub	r3, fp, #84	; 0x54
    f914:	e1a00003 	mov	r0, r3
    f918:	e3a01000 	mov	r1, #0
    f91c:	ebffe42c 	bl	89d4 <_init+0xd4>

	time_difference=gettime_now.tv_usec-gettime_old.tv_usec;
    f920:	e51b2050 	ldr	r2, [fp, #-80]	; 0x50
    f924:	e59f30fc 	ldr	r3, [pc, #252]	; fa28 <m_sigOri_calcGyroAnglePerStep_st+0x130>
    f928:	e5933004 	ldr	r3, [r3, #4]
    f92c:	e0633002 	rsb	r3, r3, r2
    f930:	e50b3010 	str	r3, [fp, #-16]
	if(time_difference<0)
    f934:	e51b3010 	ldr	r3, [fp, #-16]
    f938:	e3530000 	cmp	r3, #0
    f93c:	aa000006 	bge	f95c <m_sigOri_calcGyroAnglePerStep_st+0x64>
	{
		time_difference=1000000-gettime_old.tv_usec+gettime_now.tv_usec;
    f940:	e59f30e0 	ldr	r3, [pc, #224]	; fa28 <m_sigOri_calcGyroAnglePerStep_st+0x130>
    f944:	e5933004 	ldr	r3, [r3, #4]
    f948:	e263393d 	rsb	r3, r3, #999424	; 0xf4000
    f94c:	e2833d09 	add	r3, r3, #576	; 0x240
    f950:	e51b2050 	ldr	r2, [fp, #-80]	; 0x50
    f954:	e0833002 	add	r3, r3, r2
    f958:	e50b3010 	str	r3, [fp, #-16]
	}

	l_timestep_f64=(double)(time_difference)*0.000001;
    f95c:	e51b3010 	ldr	r3, [fp, #-16]
    f960:	ee073a90 	vmov	s15, r3
    f964:	eeb86be7 	vcvt.f64.s32	d6, s15
    f968:	ed9f7b2c 	vldr	d7, [pc, #176]	; fa20 <m_sigOri_calcGyroAnglePerStep_st+0x128>
    f96c:	ee267b07 	vmul.f64	d7, d6, d7
    f970:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4

	l_angles_f64.roll_f64=m_sigori_imuValues_st.gyro.roll_f64*l_timestep_f64;
    f974:	e59f30b0 	ldr	r3, [pc, #176]	; fa2c <m_sigOri_calcGyroAnglePerStep_st+0x134>
    f978:	ed936b0c 	vldr	d6, [r3, #48]	; 0x30
    f97c:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
    f980:	ee267b07 	vmul.f64	d7, d6, d7
    f984:	ed0b7b13 	vstr	d7, [fp, #-76]	; 0xffffffb4
	l_angles_f64.pitch_f64=m_sigori_imuValues_st.gyro.pitch_f64*l_timestep_f64;
    f988:	e59f309c 	ldr	r3, [pc, #156]	; fa2c <m_sigOri_calcGyroAnglePerStep_st+0x134>
    f98c:	ed936b0e 	vldr	d6, [r3, #56]	; 0x38
    f990:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
    f994:	ee267b07 	vmul.f64	d7, d6, d7
    f998:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc
	l_angles_f64.yaw_f64=m_sigori_imuValues_st.gyro.yaw_f64*l_timestep_f64;
    f99c:	e59f3088 	ldr	r3, [pc, #136]	; fa2c <m_sigOri_calcGyroAnglePerStep_st+0x134>
    f9a0:	ed936b10 	vldr	d6, [r3, #64]	; 0x40
    f9a4:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
    f9a8:	ee267b07 	vmul.f64	d7, d6, d7
    f9ac:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	gettimeofday(&gettime_old,(void *)0);
    f9b0:	e59f0070 	ldr	r0, [pc, #112]	; fa28 <m_sigOri_calcGyroAnglePerStep_st+0x130>
    f9b4:	e3a01000 	mov	r1, #0
    f9b8:	ebffe405 	bl	89d4 <_init+0xd4>

	m_sigOri_arrayOutputAnglesGyroPerStep_st = l_angles_f64;
    f9bc:	e59f306c 	ldr	r3, [pc, #108]	; fa30 <m_sigOri_calcGyroAnglePerStep_st+0x138>
    f9c0:	e1a0c003 	mov	ip, r3
    f9c4:	e24be04c 	sub	lr, fp, #76	; 0x4c
    f9c8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    f9cc:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    f9d0:	e89e0003 	ldm	lr, {r0, r1}
    f9d4:	e88c0003 	stm	ip, {r0, r1}

	return l_angles_f64;
    f9d8:	e24bc034 	sub	ip, fp, #52	; 0x34
    f9dc:	e24be04c 	sub	lr, fp, #76	; 0x4c
    f9e0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    f9e4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    f9e8:	e89e0003 	ldm	lr, {r0, r1}
    f9ec:	e88c0003 	stm	ip, {r0, r1}
    f9f0:	e14b43d4 	ldrd	r4, [fp, #-52]	; 0xffffffcc
    f9f4:	e14b02dc 	ldrd	r0, [fp, #-44]	; 0xffffffd4
    f9f8:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
    f9fc:	ec454b15 	vmov	d5, r4, r5
    fa00:	ec410b16 	vmov	d6, r0, r1
    fa04:	ec432b17 	vmov	d7, r2, r3
}
    fa08:	eeb00b45 	vmov.f64	d0, d5
    fa0c:	eeb01b46 	vmov.f64	d1, d6
    fa10:	eeb02b47 	vmov.f64	d2, d7
    fa14:	e24bd00c 	sub	sp, fp, #12
    fa18:	e8bd8830 	pop	{r4, r5, fp, pc}
    fa1c:	e1a00000 	nop			; (mov r0, r0)
    fa20:	a0b5ed8d 	.word	0xa0b5ed8d
    fa24:	3eb0c6f7 	.word	0x3eb0c6f7
    fa28:	00019cd0 	.word	0x00019cd0
    fa2c:	00019900 	.word	0x00019900
    fa30:	00019988 	.word	0x00019988

0000fa34 <m_sigOri_calcBarometricHeight_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void m_sigOri_calcBarometricHeight_st()
{
    fa34:	e92d4800 	push	{fp, lr}
    fa38:	ed2d8b02 	vpush	{d8}
    fa3c:	e28db00c 	add	fp, sp, #12
    fa40:	e24dd010 	sub	sp, sp, #16
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
    fa44:	e59f2094 	ldr	r2, [pc, #148]	; fae0 <m_sigOri_calcBarometricHeight_st+0xac>
    fa48:	e59f3094 	ldr	r3, [pc, #148]	; fae4 <m_sigOri_calcBarometricHeight_st+0xb0>
    fa4c:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	double l_Deg2Kelvin_f64=273.15;
    fa50:	e59f2090 	ldr	r2, [pc, #144]	; fae8 <m_sigOri_calcBarometricHeight_st+0xb4>
    fa54:	e59f3090 	ldr	r3, [pc, #144]	; faec <m_sigOri_calcBarometricHeight_st+0xb8>
    fa58:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
    fa5c:	e59f308c 	ldr	r3, [pc, #140]	; faf0 <m_sigOri_calcBarometricHeight_st+0xbc>
    fa60:	ed937b00 	vldr	d7, [r3]
    fa64:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
    fa68:	ee866b07 	vdiv.f64	d6, d6, d7
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
    fa6c:	e59f3080 	ldr	r3, [pc, #128]	; faf4 <m_sigOri_calcBarometricHeight_st+0xc0>
    fa70:	ed935b12 	vldr	d5, [r3, #72]	; 0x48
    fa74:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
    fa78:	ee355b07 	vadd.f64	d5, d5, d7
    fa7c:	e59f3074 	ldr	r3, [pc, #116]	; faf8 <m_sigOri_calcBarometricHeight_st+0xc4>
    fa80:	ed937b00 	vldr	d7, [r3]
    fa84:	ee355b07 	vadd.f64	d5, d5, d7
    fa88:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
    fa8c:	ee355b07 	vadd.f64	d5, d5, d7
    fa90:	ed9f7b10 	vldr	d7, [pc, #64]	; fad8 <m_sigOri_calcBarometricHeight_st+0xa4>
    fa94:	ee857b07 	vdiv.f64	d7, d5, d7
void m_sigOri_calcBarometricHeight_st()
{
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
	double l_Deg2Kelvin_f64=273.15;

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
    fa98:	ee268b07 	vmul.f64	d8, d6, d7
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
			log(m_sigOri_referencePressure_f64/m_sigori_imuValues_st.pressure_f64);
    fa9c:	e59f3058 	ldr	r3, [pc, #88]	; fafc <m_sigOri_calcBarometricHeight_st+0xc8>
    faa0:	ed936b00 	vldr	d6, [r3]
    faa4:	e59f3048 	ldr	r3, [pc, #72]	; faf4 <m_sigOri_calcBarometricHeight_st+0xc0>
    faa8:	ed937b14 	vldr	d7, [r3, #80]	; 0x50
    faac:	ee867b07 	vdiv.f64	d7, d6, d7
    fab0:	eeb00b47 	vmov.f64	d0, d7
    fab4:	ebffe3f3 	bl	8a88 <_init+0x188>
    fab8:	eeb07b40 	vmov.f64	d7, d0
{
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
	double l_Deg2Kelvin_f64=273.15;

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
    fabc:	ee287b07 	vmul.f64	d7, d8, d7
void m_sigOri_calcBarometricHeight_st()
{
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
	double l_Deg2Kelvin_f64=273.15;

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
    fac0:	e59f3038 	ldr	r3, [pc, #56]	; fb00 <m_sigOri_calcBarometricHeight_st+0xcc>
    fac4:	ed837b00 	vstr	d7, [r3]
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
			log(m_sigOri_referencePressure_f64/m_sigori_imuValues_st.pressure_f64);
}
    fac8:	e24bd00c 	sub	sp, fp, #12
    facc:	ecbd8b02 	vpop	{d8}
    fad0:	e8bd8800 	pop	{fp, pc}
    fad4:	e1a00000 	nop			; (mov r0, r0)
    fad8:	00000000 	.word	0x00000000
    fadc:	40000000 	.word	0x40000000
    fae0:	cccccccd 	.word	0xcccccccd
    fae4:	4071f0cc 	.word	0x4071f0cc
    fae8:	66666666 	.word	0x66666666
    faec:	40711266 	.word	0x40711266
    faf0:	00019968 	.word	0x00019968
    faf4:	00019900 	.word	0x00019900
    faf8:	00019970 	.word	0x00019970
    fafc:	00019960 	.word	0x00019960
    fb00:	00019958 	.word	0x00019958

0000fb04 <g_sigOri_calcKalmanOrientation_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigOri_calcKalmanOrientation_bl()
{
    fb04:	e92d4800 	push	{fp, lr}
    fb08:	e28db004 	add	fp, sp, #4
    fb0c:	e24dd0e8 	sub	sp, sp, #232	; 0xe8
	double l_matrixTemp_rg9f64[M_SIGORI_SIZEOFARRAY_UI8][M_SIGORI_SIZEOFARRAY_UI8];
	double l_matrixTemp2_rg9f64[M_SIGORI_SIZEOFARRAY_UI8][M_SIGORI_SIZEOFARRAY_UI8];
	double l_matrixInnovation_rg9f64[M_SIGORI_SIZEOFARRAY_UI8][M_SIGORI_SIZEOFARRAY_UI8];

	//read new data from the IMU
	m_sigOri_getImuData_bl();
    fb10:	ebfffe8b 	bl	f544 <m_sigOri_getImuData_bl>

	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesKalman_st=m_sigOri_calcAccMagAngle_st();
    fb14:	ebfffe9c 	bl	f58c <m_sigOri_calcAccMagAngle_st>
    fb18:	eeb05b40 	vmov.f64	d5, d0
    fb1c:	eeb06b41 	vmov.f64	d6, d1
    fb20:	eeb07b42 	vmov.f64	d7, d2
    fb24:	e59f3314 	ldr	r3, [pc, #788]	; fe40 <g_sigOri_calcKalmanOrientation_bl+0x33c>
    fb28:	ed835b00 	vstr	d5, [r3]
    fb2c:	ed836b02 	vstr	d6, [r3, #8]
    fb30:	ed837b04 	vstr	d7, [r3, #16]
	m_sigOri_arrayGyroAnglesKalman_st=m_sigOri_calcGyroAnglePerStep_st();
    fb34:	ebffff6f 	bl	f8f8 <m_sigOri_calcGyroAnglePerStep_st>
    fb38:	eeb05b40 	vmov.f64	d5, d0
    fb3c:	eeb06b41 	vmov.f64	d6, d1
    fb40:	eeb07b42 	vmov.f64	d7, d2
    fb44:	e59f32f8 	ldr	r3, [pc, #760]	; fe44 <g_sigOri_calcKalmanOrientation_bl+0x340>
    fb48:	ed835b00 	vstr	d5, [r3]
    fb4c:	ed836b02 	vstr	d6, [r3, #8]
    fb50:	ed837b04 	vstr	d7, [r3, #16]

	//set new calculated angles from the sensors in the matrices
	m_sigOri_matrixXnew_rg9f64[0][0]=m_sigOri_arrayAccMagAnglesKalman_st.roll_f64;
    fb54:	e59f32e4 	ldr	r3, [pc, #740]	; fe40 <g_sigOri_calcKalmanOrientation_bl+0x33c>
    fb58:	e1c320d0 	ldrd	r2, [r3]
    fb5c:	e59f12e4 	ldr	r1, [pc, #740]	; fe48 <g_sigOri_calcKalmanOrientation_bl+0x344>
    fb60:	e1c120f0 	strd	r2, [r1]
	m_sigOri_matrixXnew_rg9f64[1][1]=m_sigOri_arrayAccMagAnglesKalman_st.pitch_f64;
    fb64:	e59f32d4 	ldr	r3, [pc, #724]	; fe40 <g_sigOri_calcKalmanOrientation_bl+0x33c>
    fb68:	e1c320d8 	ldrd	r2, [r3, #8]
    fb6c:	e59f12d4 	ldr	r1, [pc, #724]	; fe48 <g_sigOri_calcKalmanOrientation_bl+0x344>
    fb70:	e1c122f0 	strd	r2, [r1, #32]
	m_sigOri_matrixXnew_rg9f64[2][2]=m_sigOri_arrayAccMagAnglesKalman_st.yaw_f64;
    fb74:	e59f32c4 	ldr	r3, [pc, #708]	; fe40 <g_sigOri_calcKalmanOrientation_bl+0x33c>
    fb78:	e1c321d0 	ldrd	r2, [r3, #16]
    fb7c:	e59f12c4 	ldr	r1, [pc, #708]	; fe48 <g_sigOri_calcKalmanOrientation_bl+0x344>
    fb80:	e1c124f0 	strd	r2, [r1, #64]	; 0x40

	m_sigOri_matrixUk_rg9f64[0][0]=m_sigOri_arrayGyroAnglesKalman_st.roll_f64;
    fb84:	e59f32b8 	ldr	r3, [pc, #696]	; fe44 <g_sigOri_calcKalmanOrientation_bl+0x340>
    fb88:	e1c320d0 	ldrd	r2, [r3]
    fb8c:	e59f12b8 	ldr	r1, [pc, #696]	; fe4c <g_sigOri_calcKalmanOrientation_bl+0x348>
    fb90:	e1c120f0 	strd	r2, [r1]
	m_sigOri_matrixUk_rg9f64[1][1]=m_sigOri_arrayGyroAnglesKalman_st.pitch_f64;
    fb94:	e59f32a8 	ldr	r3, [pc, #680]	; fe44 <g_sigOri_calcKalmanOrientation_bl+0x340>
    fb98:	e1c320d8 	ldrd	r2, [r3, #8]
    fb9c:	e59f12a8 	ldr	r1, [pc, #680]	; fe4c <g_sigOri_calcKalmanOrientation_bl+0x348>
    fba0:	e1c122f0 	strd	r2, [r1, #32]
	m_sigOri_matrixUk_rg9f64[2][2]=m_sigOri_arrayGyroAnglesKalman_st.yaw_f64;
    fba4:	e59f3298 	ldr	r3, [pc, #664]	; fe44 <g_sigOri_calcKalmanOrientation_bl+0x340>
    fba8:	e1c321d0 	ldrd	r2, [r3, #16]
    fbac:	e59f1298 	ldr	r1, [pc, #664]	; fe4c <g_sigOri_calcKalmanOrientation_bl+0x348>
    fbb0:	e1c124f0 	strd	r2, [r1, #64]	; 0x40

//PREDICTION
	//state estimation (prediction)
	g_sigMath_matrixAddition_bl((double*) l_matrixTemp_rg9f64,
    fbb4:	e24b304c 	sub	r3, fp, #76	; 0x4c
    fbb8:	e59f228c 	ldr	r2, [pc, #652]	; fe4c <g_sigOri_calcKalmanOrientation_bl+0x348>
    fbbc:	e58d2000 	str	r2, [sp]
    fbc0:	e3a02003 	mov	r2, #3
    fbc4:	e58d2004 	str	r2, [sp, #4]
    fbc8:	e3a02003 	mov	r2, #3
    fbcc:	e58d2008 	str	r2, [sp, #8]
    fbd0:	e1a00003 	mov	r0, r3
    fbd4:	e59f1274 	ldr	r1, [pc, #628]	; fe50 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    fbd8:	e3a02003 	mov	r2, #3
    fbdc:	e3a03003 	mov	r3, #3
    fbe0:	ebfff9e2 	bl	e370 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixXk_rg9f64, 3,3, 
		(double*) m_sigOri_matrixUk_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixXk_rg9f64,3,3,
    fbe4:	e24b304c 	sub	r3, fp, #76	; 0x4c
    fbe8:	e3a02003 	mov	r2, #3
    fbec:	e58d2000 	str	r2, [sp]
    fbf0:	e3a02003 	mov	r2, #3
    fbf4:	e58d2004 	str	r2, [sp, #4]
    fbf8:	e59f0250 	ldr	r0, [pc, #592]	; fe50 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    fbfc:	e3a01003 	mov	r1, #3
    fc00:	e3a02003 	mov	r2, #3
    fc04:	ebfffcb2 	bl	eed4 <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp_rg9f64,3,3);


	//covariance estimation (prediction)
	g_sigMath_matrixAddition_bl((double*) l_matrixTemp_rg9f64,
    fc08:	e24b304c 	sub	r3, fp, #76	; 0x4c
    fc0c:	e59f2240 	ldr	r2, [pc, #576]	; fe54 <g_sigOri_calcKalmanOrientation_bl+0x350>
    fc10:	e58d2000 	str	r2, [sp]
    fc14:	e3a02003 	mov	r2, #3
    fc18:	e58d2004 	str	r2, [sp, #4]
    fc1c:	e3a02003 	mov	r2, #3
    fc20:	e58d2008 	str	r2, [sp, #8]
    fc24:	e1a00003 	mov	r0, r3
    fc28:	e59f1228 	ldr	r1, [pc, #552]	; fe58 <g_sigOri_calcKalmanOrientation_bl+0x354>
    fc2c:	e3a02003 	mov	r2, #3
    fc30:	e3a03003 	mov	r3, #3
    fc34:	ebfff9cd 	bl	e370 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixPk_rg9f64, 3,3, 
		(double*) m_sigOri_matrixQ_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixPk_rg9f64,3,3,
    fc38:	e24b304c 	sub	r3, fp, #76	; 0x4c
    fc3c:	e3a02003 	mov	r2, #3
    fc40:	e58d2000 	str	r2, [sp]
    fc44:	e3a02003 	mov	r2, #3
    fc48:	e58d2004 	str	r2, [sp, #4]
    fc4c:	e59f0204 	ldr	r0, [pc, #516]	; fe58 <g_sigOri_calcKalmanOrientation_bl+0x354>
    fc50:	e3a01003 	mov	r1, #3
    fc54:	e3a02003 	mov	r2, #3
    fc58:	ebfffc9d 	bl	eed4 <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp_rg9f64,3,3);

//UPDATE
	//Innovation (update)
	g_sigMath_matrixSubtraktion_bl((double*) l_matrixInnovation_rg9f64,
    fc5c:	e24b30dc 	sub	r3, fp, #220	; 0xdc
    fc60:	e59f21e8 	ldr	r2, [pc, #488]	; fe50 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    fc64:	e58d2000 	str	r2, [sp]
    fc68:	e3a02003 	mov	r2, #3
    fc6c:	e58d2004 	str	r2, [sp, #4]
    fc70:	e3a02003 	mov	r2, #3
    fc74:	e58d2008 	str	r2, [sp, #8]
    fc78:	e1a00003 	mov	r0, r3
    fc7c:	e59f11c4 	ldr	r1, [pc, #452]	; fe48 <g_sigOri_calcKalmanOrientation_bl+0x344>
    fc80:	e3a02003 	mov	r2, #3
    fc84:	e3a03003 	mov	r3, #3
    fc88:	ebfffa03 	bl	e49c <g_sigMath_matrixSubtraktion_bl>
		(double*) m_sigOri_matrixXnew_rg9f64,3,3, 
		(double*) m_sigOri_matrixXk_rg9f64,3,3);

	//Innovation covariance (update)
	g_sigMath_matrixAddition_bl((double*) m_sigOri_matrixS_rg9f64,
    fc8c:	e59f31c8 	ldr	r3, [pc, #456]	; fe5c <g_sigOri_calcKalmanOrientation_bl+0x358>
    fc90:	e58d3000 	str	r3, [sp]
    fc94:	e3a03003 	mov	r3, #3
    fc98:	e58d3004 	str	r3, [sp, #4]
    fc9c:	e3a03003 	mov	r3, #3
    fca0:	e58d3008 	str	r3, [sp, #8]
    fca4:	e59f01b4 	ldr	r0, [pc, #436]	; fe60 <g_sigOri_calcKalmanOrientation_bl+0x35c>
    fca8:	e59f11a8 	ldr	r1, [pc, #424]	; fe58 <g_sigOri_calcKalmanOrientation_bl+0x354>
    fcac:	e3a02003 	mov	r2, #3
    fcb0:	e3a03003 	mov	r3, #3
    fcb4:	ebfff9ad 	bl	e370 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixPk_rg9f64, 3,3, 
		(double*) m_sigOri_matrixR_rg9f64,3,3);

	//Kalman Gain calculation (update)
	g_sigMath_matrixInverse_bl((double*) l_matrixTemp_rg9f64,
    fcb8:	e24b304c 	sub	r3, fp, #76	; 0x4c
    fcbc:	e1a00003 	mov	r0, r3
    fcc0:	e59f1198 	ldr	r1, [pc, #408]	; fe60 <g_sigOri_calcKalmanOrientation_bl+0x35c>
    fcc4:	e3a02003 	mov	r2, #3
    fcc8:	e3a03003 	mov	r3, #3
    fccc:	ebfffa72 	bl	e69c <g_sigMath_matrixInverse_bl>
		(double*) m_sigOri_matrixS_rg9f64,3,3);
	g_sigMath_matrixMultiplikation_bl(
    fcd0:	e24b304c 	sub	r3, fp, #76	; 0x4c
    fcd4:	e58d3000 	str	r3, [sp]
    fcd8:	e3a03003 	mov	r3, #3
    fcdc:	e58d3004 	str	r3, [sp, #4]
    fce0:	e3a03003 	mov	r3, #3
    fce4:	e58d3008 	str	r3, [sp, #8]
    fce8:	e59f0174 	ldr	r0, [pc, #372]	; fe64 <g_sigOri_calcKalmanOrientation_bl+0x360>
    fcec:	e59f1164 	ldr	r1, [pc, #356]	; fe58 <g_sigOri_calcKalmanOrientation_bl+0x354>
    fcf0:	e3a02003 	mov	r2, #3
    fcf4:	e3a03003 	mov	r3, #3
    fcf8:	ebfff93f 	bl	e1fc <g_sigMath_matrixMultiplikation_bl>
		(double*) m_sigOri_matrixK_rg9f64, 
		(double*) m_sigOri_matrixPk_rg9f64,3,3,
		(double*) l_matrixTemp_rg9f64,3,3);

	//State estimation (update)
	g_sigMath_matrixMultiplikation_bl(
    fcfc:	e24b304c 	sub	r3, fp, #76	; 0x4c
    fd00:	e24b20dc 	sub	r2, fp, #220	; 0xdc
    fd04:	e58d2000 	str	r2, [sp]
    fd08:	e3a02003 	mov	r2, #3
    fd0c:	e58d2004 	str	r2, [sp, #4]
    fd10:	e3a02003 	mov	r2, #3
    fd14:	e58d2008 	str	r2, [sp, #8]
    fd18:	e1a00003 	mov	r0, r3
    fd1c:	e59f1140 	ldr	r1, [pc, #320]	; fe64 <g_sigOri_calcKalmanOrientation_bl+0x360>
    fd20:	e3a02003 	mov	r2, #3
    fd24:	e3a03003 	mov	r3, #3
    fd28:	ebfff933 	bl	e1fc <g_sigMath_matrixMultiplikation_bl>
		(double*) l_matrixTemp_rg9f64, 
		(double*) m_sigOri_matrixK_rg9f64,3,3,
		(double*) l_matrixInnovation_rg9f64,3,3);
	g_sigMath_matrixAddition_bl((double*) l_matrixTemp2_rg9f64,
    fd2c:	e24b3094 	sub	r3, fp, #148	; 0x94
    fd30:	e24b204c 	sub	r2, fp, #76	; 0x4c
    fd34:	e58d2000 	str	r2, [sp]
    fd38:	e3a02003 	mov	r2, #3
    fd3c:	e58d2004 	str	r2, [sp, #4]
    fd40:	e3a02003 	mov	r2, #3
    fd44:	e58d2008 	str	r2, [sp, #8]
    fd48:	e1a00003 	mov	r0, r3
    fd4c:	e59f10fc 	ldr	r1, [pc, #252]	; fe50 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    fd50:	e3a02003 	mov	r2, #3
    fd54:	e3a03003 	mov	r3, #3
    fd58:	ebfff984 	bl	e370 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixXk_rg9f64, 3,3, 
		(double*) l_matrixTemp_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixXk_rg9f64,3,3,
    fd5c:	e24b3094 	sub	r3, fp, #148	; 0x94
    fd60:	e3a02003 	mov	r2, #3
    fd64:	e58d2000 	str	r2, [sp]
    fd68:	e3a02003 	mov	r2, #3
    fd6c:	e58d2004 	str	r2, [sp, #4]
    fd70:	e59f00d8 	ldr	r0, [pc, #216]	; fe50 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    fd74:	e3a01003 	mov	r1, #3
    fd78:	e3a02003 	mov	r2, #3
    fd7c:	ebfffc54 	bl	eed4 <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp2_rg9f64,3,3);

	//Covariance estimation (update)
	g_sigMath_matrixSubtraktion_bl((double*) l_matrixTemp_rg9f64,
    fd80:	e24b304c 	sub	r3, fp, #76	; 0x4c
    fd84:	e59f20d8 	ldr	r2, [pc, #216]	; fe64 <g_sigOri_calcKalmanOrientation_bl+0x360>
    fd88:	e58d2000 	str	r2, [sp]
    fd8c:	e3a02003 	mov	r2, #3
    fd90:	e58d2004 	str	r2, [sp, #4]
    fd94:	e3a02003 	mov	r2, #3
    fd98:	e58d2008 	str	r2, [sp, #8]
    fd9c:	e1a00003 	mov	r0, r3
    fda0:	e59f10c0 	ldr	r1, [pc, #192]	; fe68 <g_sigOri_calcKalmanOrientation_bl+0x364>
    fda4:	e3a02003 	mov	r2, #3
    fda8:	e3a03003 	mov	r3, #3
    fdac:	ebfff9ba 	bl	e49c <g_sigMath_matrixSubtraktion_bl>
		(double*) m_sigOri_matrixI_rg9f64,3,3, 
		(double*) m_sigOri_matrixK_rg9f64,3,3);
	g_sigMath_matrixMultiplikation_bl(
    fdb0:	e24b2094 	sub	r2, fp, #148	; 0x94
    fdb4:	e24b304c 	sub	r3, fp, #76	; 0x4c
    fdb8:	e59f1098 	ldr	r1, [pc, #152]	; fe58 <g_sigOri_calcKalmanOrientation_bl+0x354>
    fdbc:	e58d1000 	str	r1, [sp]
    fdc0:	e3a01003 	mov	r1, #3
    fdc4:	e58d1004 	str	r1, [sp, #4]
    fdc8:	e3a01003 	mov	r1, #3
    fdcc:	e58d1008 	str	r1, [sp, #8]
    fdd0:	e1a00002 	mov	r0, r2
    fdd4:	e1a01003 	mov	r1, r3
    fdd8:	e3a02003 	mov	r2, #3
    fddc:	e3a03003 	mov	r3, #3
    fde0:	ebfff905 	bl	e1fc <g_sigMath_matrixMultiplikation_bl>
		(double*) l_matrixTemp2_rg9f64, 
		(double*) l_matrixTemp_rg9f64,3,3,
		(double*) m_sigOri_matrixPk_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixPk_rg9f64,3,3,
    fde4:	e24b3094 	sub	r3, fp, #148	; 0x94
    fde8:	e3a02003 	mov	r2, #3
    fdec:	e58d2000 	str	r2, [sp]
    fdf0:	e3a02003 	mov	r2, #3
    fdf4:	e58d2004 	str	r2, [sp, #4]
    fdf8:	e59f0058 	ldr	r0, [pc, #88]	; fe58 <g_sigOri_calcKalmanOrientation_bl+0x354>
    fdfc:	e3a01003 	mov	r1, #3
    fe00:	e3a02003 	mov	r2, #3
    fe04:	ebfffc32 	bl	eed4 <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp2_rg9f64,3,3);

//set calculate within this module global
	m_sigOri_arrayOutputAnglesKalman_st.roll_f64=m_sigOri_matrixXk_rg9f64[0][0];
    fe08:	e59f3040 	ldr	r3, [pc, #64]	; fe50 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    fe0c:	e1c320d0 	ldrd	r2, [r3]
    fe10:	e59f1054 	ldr	r1, [pc, #84]	; fe6c <g_sigOri_calcKalmanOrientation_bl+0x368>
    fe14:	e1c120f0 	strd	r2, [r1]
	m_sigOri_arrayOutputAnglesKalman_st.pitch_f64=m_sigOri_matrixXk_rg9f64[1][1];
    fe18:	e59f3030 	ldr	r3, [pc, #48]	; fe50 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    fe1c:	e1c322d0 	ldrd	r2, [r3, #32]
    fe20:	e59f1044 	ldr	r1, [pc, #68]	; fe6c <g_sigOri_calcKalmanOrientation_bl+0x368>
    fe24:	e1c120f8 	strd	r2, [r1, #8]
	m_sigOri_arrayOutputAnglesKalman_st.yaw_f64=m_sigOri_matrixXk_rg9f64[2][2];
    fe28:	e59f3020 	ldr	r3, [pc, #32]	; fe50 <g_sigOri_calcKalmanOrientation_bl+0x34c>
    fe2c:	e1c324d0 	ldrd	r2, [r3, #64]	; 0x40
    fe30:	e59f1034 	ldr	r1, [pc, #52]	; fe6c <g_sigOri_calcKalmanOrientation_bl+0x368>
    fe34:	e1c121f0 	strd	r2, [r1, #16]
}
    fe38:	e24bd004 	sub	sp, fp, #4
    fe3c:	e8bd8800 	pop	{fp, pc}
    fe40:	000199b8 	.word	0x000199b8
    fe44:	000199d0 	.word	0x000199d0
    fe48:	00019a90 	.word	0x00019a90
    fe4c:	00019ad8 	.word	0x00019ad8
    fe50:	00019a48 	.word	0x00019a48
    fe54:	00019bf8 	.word	0x00019bf8
    fe58:	00019b68 	.word	0x00019b68
    fe5c:	00019bb0 	.word	0x00019bb0
    fe60:	00019c40 	.word	0x00019c40
    fe64:	00019c88 	.word	0x00019c88
    fe68:	00019b20 	.word	0x00019b20
    fe6c:	000199e8 	.word	0x000199e8

0000fe70 <g_sigOri_calcComplementaryOrientation_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigOri_calcComplementaryOrientation_bl()
{
    fe70:	e92d4800 	push	{fp, lr}
    fe74:	e28db004 	add	fp, sp, #4
	//read new data from the IMU
	m_sigOri_getImuData_bl();
    fe78:	ebfffdb1 	bl	f544 <m_sigOri_getImuData_bl>
	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesComplementary_st=m_sigOri_calcAccMagAngle_st();
    fe7c:	ebfffdc2 	bl	f58c <m_sigOri_calcAccMagAngle_st>
    fe80:	eeb05b40 	vmov.f64	d5, d0
    fe84:	eeb06b41 	vmov.f64	d6, d1
    fe88:	eeb07b42 	vmov.f64	d7, d2
    fe8c:	e59f30e4 	ldr	r3, [pc, #228]	; ff78 <g_sigOri_calcComplementaryOrientation_bl+0x108>
    fe90:	ed835b00 	vstr	d5, [r3]
    fe94:	ed836b02 	vstr	d6, [r3, #8]
    fe98:	ed837b04 	vstr	d7, [r3, #16]
	m_sigOri_arrayGyroAnglesComplementary_st=m_sigOri_calcGyroAnglePerStep_st();
    fe9c:	ebfffe95 	bl	f8f8 <m_sigOri_calcGyroAnglePerStep_st>
    fea0:	eeb05b40 	vmov.f64	d5, d0
    fea4:	eeb06b41 	vmov.f64	d6, d1
    fea8:	eeb07b42 	vmov.f64	d7, d2
    feac:	e59f30c8 	ldr	r3, [pc, #200]	; ff7c <g_sigOri_calcComplementaryOrientation_bl+0x10c>
    feb0:	ed835b00 	vstr	d5, [r3]
    feb4:	ed836b02 	vstr	d6, [r3, #8]
    feb8:	ed837b04 	vstr	d7, [r3, #16]

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
    febc:	e59f30bc 	ldr	r3, [pc, #188]	; ff80 <g_sigOri_calcComplementaryOrientation_bl+0x110>
    fec0:	ed936b02 	vldr	d6, [r3, #8]
    fec4:	e59f30b0 	ldr	r3, [pc, #176]	; ff7c <g_sigOri_calcComplementaryOrientation_bl+0x10c>
    fec8:	ed937b02 	vldr	d7, [r3, #8]
    fecc:	ee366b07 	vadd.f64	d6, d6, d7
    fed0:	ed9f7b24 	vldr	d7, [pc, #144]	; ff68 <g_sigOri_calcComplementaryOrientation_bl+0xf8>
    fed4:	ee266b07 	vmul.f64	d6, d6, d7
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;
    fed8:	e59f3098 	ldr	r3, [pc, #152]	; ff78 <g_sigOri_calcComplementaryOrientation_bl+0x108>
    fedc:	ed935b02 	vldr	d5, [r3, #8]
    fee0:	ed9f7b22 	vldr	d7, [pc, #136]	; ff70 <g_sigOri_calcComplementaryOrientation_bl+0x100>
    fee4:	ee257b07 	vmul.f64	d7, d5, d7
	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesComplementary_st=m_sigOri_calcAccMagAngle_st();
	m_sigOri_arrayGyroAnglesComplementary_st=m_sigOri_calcGyroAnglePerStep_st();

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
    fee8:	ee367b07 	vadd.f64	d7, d6, d7
	m_sigOri_getImuData_bl();
	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesComplementary_st=m_sigOri_calcAccMagAngle_st();
	m_sigOri_arrayGyroAnglesComplementary_st=m_sigOri_calcGyroAnglePerStep_st();

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
    feec:	e59f308c 	ldr	r3, [pc, #140]	; ff80 <g_sigOri_calcComplementaryOrientation_bl+0x110>
    fef0:	ed837b02 	vstr	d7, [r3, #8]
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
    fef4:	e59f3084 	ldr	r3, [pc, #132]	; ff80 <g_sigOri_calcComplementaryOrientation_bl+0x110>
    fef8:	ed936b00 	vldr	d6, [r3]
    fefc:	e59f3078 	ldr	r3, [pc, #120]	; ff7c <g_sigOri_calcComplementaryOrientation_bl+0x10c>
    ff00:	ed937b00 	vldr	d7, [r3]
    ff04:	ee366b07 	vadd.f64	d6, d6, d7
    ff08:	ed9f7b16 	vldr	d7, [pc, #88]	; ff68 <g_sigOri_calcComplementaryOrientation_bl+0xf8>
    ff0c:	ee266b07 	vmul.f64	d6, d6, d7
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;
    ff10:	e59f3060 	ldr	r3, [pc, #96]	; ff78 <g_sigOri_calcComplementaryOrientation_bl+0x108>
    ff14:	ed935b00 	vldr	d5, [r3]
    ff18:	ed9f7b14 	vldr	d7, [pc, #80]	; ff70 <g_sigOri_calcComplementaryOrientation_bl+0x100>
    ff1c:	ee257b07 	vmul.f64	d7, d5, d7
	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
    ff20:	ee367b07 	vadd.f64	d7, d6, d7

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
    ff24:	e59f3054 	ldr	r3, [pc, #84]	; ff80 <g_sigOri_calcComplementaryOrientation_bl+0x110>
    ff28:	ed837b00 	vstr	d7, [r3]
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64=
		M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64+m_sigOri_arrayGyroAnglesComplementary_st.yaw_f64) +
    ff2c:	e59f304c 	ldr	r3, [pc, #76]	; ff80 <g_sigOri_calcComplementaryOrientation_bl+0x110>
    ff30:	ed936b04 	vldr	d6, [r3, #16]
    ff34:	e59f3040 	ldr	r3, [pc, #64]	; ff7c <g_sigOri_calcComplementaryOrientation_bl+0x10c>
    ff38:	ed937b04 	vldr	d7, [r3, #16]
    ff3c:	ee366b07 	vadd.f64	d6, d6, d7
    ff40:	ed9f7b08 	vldr	d7, [pc, #32]	; ff68 <g_sigOri_calcComplementaryOrientation_bl+0xf8>
    ff44:	ee266b07 	vmul.f64	d6, d6, d7
		(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.yaw_f64;
    ff48:	e59f3028 	ldr	r3, [pc, #40]	; ff78 <g_sigOri_calcComplementaryOrientation_bl+0x108>
    ff4c:	ed935b04 	vldr	d5, [r3, #16]
    ff50:	ed9f7b06 	vldr	d7, [pc, #24]	; ff70 <g_sigOri_calcComplementaryOrientation_bl+0x100>
    ff54:	ee257b07 	vmul.f64	d7, d5, d7
	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64=
		M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64+m_sigOri_arrayGyroAnglesComplementary_st.yaw_f64) +
    ff58:	ee367b07 	vadd.f64	d7, d6, d7

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64=
    ff5c:	e59f301c 	ldr	r3, [pc, #28]	; ff80 <g_sigOri_calcComplementaryOrientation_bl+0x110>
    ff60:	ed837b04 	vstr	d7, [r3, #16]
		M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64+m_sigOri_arrayGyroAnglesComplementary_st.yaw_f64) +
		(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.yaw_f64;
}
    ff64:	e8bd8800 	pop	{fp, pc}
    ff68:	f9db22d1 	.word	0xf9db22d1
    ff6c:	3fec6a7e 	.word	0x3fec6a7e
    ff70:	3126e978 	.word	0x3126e978
    ff74:	3fbcac08 	.word	0x3fbcac08
    ff78:	00019a00 	.word	0x00019a00
    ff7c:	00019a18 	.word	0x00019a18
    ff80:	00019a30 	.word	0x00019a30

0000ff84 <g_sigOri_getAnglesAccMagCalc_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles g_sigOri_getAnglesAccMagCalc_bl()
{
    ff84:	e92d4830 	push	{r4, r5, fp, lr}
    ff88:	e28db00c 	add	fp, sp, #12
    ff8c:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_sigOri_arrayOutputAnglesAccMagCalc_st;
    ff90:	e59f3040 	ldr	r3, [pc, #64]	; ffd8 <g_sigOri_getAnglesAccMagCalc_bl+0x54>
    ff94:	e24bc024 	sub	ip, fp, #36	; 0x24
    ff98:	e1a0e003 	mov	lr, r3
    ff9c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    ffa0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    ffa4:	e89e0003 	ldm	lr, {r0, r1}
    ffa8:	e88c0003 	stm	ip, {r0, r1}
    ffac:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    ffb0:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    ffb4:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    ffb8:	ec454b15 	vmov	d5, r4, r5
    ffbc:	ec410b16 	vmov	d6, r0, r1
    ffc0:	ec432b17 	vmov	d7, r2, r3
}
    ffc4:	eeb00b45 	vmov.f64	d0, d5
    ffc8:	eeb01b46 	vmov.f64	d1, d6
    ffcc:	eeb02b47 	vmov.f64	d2, d7
    ffd0:	e24bd00c 	sub	sp, fp, #12
    ffd4:	e8bd8830 	pop	{r4, r5, fp, pc}
    ffd8:	000199a0 	.word	0x000199a0

0000ffdc <g_sigOri_getAnglesGyroPerStep_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles g_sigOri_getAnglesGyroPerStep_bl()
{
    ffdc:	e92d4830 	push	{r4, r5, fp, lr}
    ffe0:	e28db00c 	add	fp, sp, #12
    ffe4:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_sigOri_arrayOutputAnglesGyroPerStep_st;
    ffe8:	e59f3040 	ldr	r3, [pc, #64]	; 10030 <g_sigOri_getAnglesGyroPerStep_bl+0x54>
    ffec:	e24bc024 	sub	ip, fp, #36	; 0x24
    fff0:	e1a0e003 	mov	lr, r3
    fff4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    fff8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    fffc:	e89e0003 	ldm	lr, {r0, r1}
   10000:	e88c0003 	stm	ip, {r0, r1}
   10004:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
   10008:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
   1000c:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
   10010:	ec454b15 	vmov	d5, r4, r5
   10014:	ec410b16 	vmov	d6, r0, r1
   10018:	ec432b17 	vmov	d7, r2, r3
}
   1001c:	eeb00b45 	vmov.f64	d0, d5
   10020:	eeb01b46 	vmov.f64	d1, d6
   10024:	eeb02b47 	vmov.f64	d2, d7
   10028:	e24bd00c 	sub	sp, fp, #12
   1002c:	e8bd8830 	pop	{r4, r5, fp, pc}
   10030:	00019988 	.word	0x00019988
   10034:	e1a00000 	nop			; (mov r0, r0)

00010038 <g_sigFil_getImuValuesUnfiltered_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halImu_orientationValues g_sigFil_getImuValuesUnfiltered_st()
{
   10038:	e92d4800 	push	{fp, lr}
   1003c:	e28db004 	add	fp, sp, #4
   10040:	e24dd008 	sub	sp, sp, #8
   10044:	e50b0008 	str	r0, [fp, #-8]
	return m_sigFil_imuValues_st;
   10048:	e51b2008 	ldr	r2, [fp, #-8]
   1004c:	e59f3024 	ldr	r3, [pc, #36]	; 10078 <g_sigFil_getImuValuesUnfiltered_st+0x40>
   10050:	e1a01002 	mov	r1, r2
   10054:	e1a02003 	mov	r2, r3
   10058:	e3a03058 	mov	r3, #88	; 0x58
   1005c:	e1a00001 	mov	r0, r1
   10060:	e1a01002 	mov	r1, r2
   10064:	e1a02003 	mov	r2, r3
   10068:	ebffe26e 	bl	8a28 <_init+0x128>
}
   1006c:	e51b0008 	ldr	r0, [fp, #-8]
   10070:	e24bd004 	sub	sp, fp, #4
   10074:	e8bd8800 	pop	{fp, pc}
   10078:	00019cd8 	.word	0x00019cd8

0001007c <m_sigFil_offsetCorrectionGyro_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles m_sigFil_offsetCorrectionGyro_st()
{
   1007c:	e92d4830 	push	{r4, r5, fp, lr}
   10080:	e28db00c 	add	fp, sp, #12
   10084:	e24dd0a8 	sub	sp, sp, #168	; 0xa8
	int i=0;
   10088:	e3a03000 	mov	r3, #0
   1008c:	e50b3010 	str	r3, [fp, #-16]
	sigOri_orientationAngles l_measuredGyroValue_st={0,0,0};
   10090:	e3a02000 	mov	r2, #0
   10094:	e3a03000 	mov	r3, #0
   10098:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
   1009c:	e3a02000 	mov	r2, #0
   100a0:	e3a03000 	mov	r3, #0
   100a4:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4
   100a8:	e3a02000 	mov	r2, #0
   100ac:	e3a03000 	mov	r3, #0
   100b0:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	halImu_orientationValues l_sigFil_imuValues_st;

	for(i=0;i<M_NR_OF_VALUES_FOR_OFFSET_UI8;i++)
   100b4:	e3a03000 	mov	r3, #0
   100b8:	e50b3010 	str	r3, [fp, #-16]
   100bc:	ea000012 	b	1010c <m_sigFil_offsetCorrectionGyro_st+0x90>
	{
		g_halImu_triggerImuReading_bl();
   100c0:	ebfff2fb 	bl	ccb4 <g_halImu_triggerImuReading_bl>
		l_sigFil_imuValues_st = g_halImu_getImuValues_str();
   100c4:	e24b309c 	sub	r3, fp, #156	; 0x9c
   100c8:	e1a00003 	mov	r0, r3
   100cc:	ebfff27a 	bl	cabc <g_halImu_getImuValues_str>

		l_measuredGyroValue_st.roll_f64+=l_sigFil_imuValues_st.gyro.roll_f64;
   100d0:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
   100d4:	ed1b7b1b 	vldr	d7, [fp, #-108]	; 0xffffff94
   100d8:	ee367b07 	vadd.f64	d7, d6, d7
   100dc:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc
		l_measuredGyroValue_st.pitch_f64+=l_sigFil_imuValues_st.gyro.pitch_f64;
   100e0:	ed1b6b0f 	vldr	d6, [fp, #-60]	; 0xffffffc4
   100e4:	ed1b7b19 	vldr	d7, [fp, #-100]	; 0xffffff9c
   100e8:	ee367b07 	vadd.f64	d7, d6, d7
   100ec:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
		l_measuredGyroValue_st.yaw_f64+=l_sigFil_imuValues_st.gyro.yaw_f64;
   100f0:	ed1b6b0d 	vldr	d6, [fp, #-52]	; 0xffffffcc
   100f4:	ed1b7b17 	vldr	d7, [fp, #-92]	; 0xffffffa4
   100f8:	ee367b07 	vadd.f64	d7, d6, d7
   100fc:	ed0b7b0d 	vstr	d7, [fp, #-52]	; 0xffffffcc
{
	int i=0;
	sigOri_orientationAngles l_measuredGyroValue_st={0,0,0};
	halImu_orientationValues l_sigFil_imuValues_st;

	for(i=0;i<M_NR_OF_VALUES_FOR_OFFSET_UI8;i++)
   10100:	e51b3010 	ldr	r3, [fp, #-16]
   10104:	e2833001 	add	r3, r3, #1
   10108:	e50b3010 	str	r3, [fp, #-16]
   1010c:	e51b3010 	ldr	r3, [fp, #-16]
   10110:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   10114:	baffffe9 	blt	100c0 <m_sigFil_offsetCorrectionGyro_st+0x44>
		l_measuredGyroValue_st.roll_f64+=l_sigFil_imuValues_st.gyro.roll_f64;
		l_measuredGyroValue_st.pitch_f64+=l_sigFil_imuValues_st.gyro.pitch_f64;
		l_measuredGyroValue_st.yaw_f64+=l_sigFil_imuValues_st.gyro.yaw_f64;
	}

	l_measuredGyroValue_st.roll_f64=l_measuredGyroValue_st.roll_f64/M_NR_OF_VALUES_FOR_OFFSET_UI8;
   10118:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
   1011c:	ed9f7b1b 	vldr	d7, [pc, #108]	; 10190 <m_sigFil_offsetCorrectionGyro_st+0x114>
   10120:	ee867b07 	vdiv.f64	d7, d6, d7
   10124:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc
	l_measuredGyroValue_st.pitch_f64=l_measuredGyroValue_st.pitch_f64/M_NR_OF_VALUES_FOR_OFFSET_UI8;
   10128:	ed1b6b0f 	vldr	d6, [fp, #-60]	; 0xffffffc4
   1012c:	ed9f7b17 	vldr	d7, [pc, #92]	; 10190 <m_sigFil_offsetCorrectionGyro_st+0x114>
   10130:	ee867b07 	vdiv.f64	d7, d6, d7
   10134:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	l_measuredGyroValue_st.yaw_f64=l_measuredGyroValue_st.yaw_f64/M_NR_OF_VALUES_FOR_OFFSET_UI8;
   10138:	ed1b6b0d 	vldr	d6, [fp, #-52]	; 0xffffffcc
   1013c:	ed9f7b13 	vldr	d7, [pc, #76]	; 10190 <m_sigFil_offsetCorrectionGyro_st+0x114>
   10140:	ee867b07 	vdiv.f64	d7, d6, d7
   10144:	ed0b7b0d 	vstr	d7, [fp, #-52]	; 0xffffffcc

	return l_measuredGyroValue_st;
   10148:	e24bc02c 	sub	ip, fp, #44	; 0x2c
   1014c:	e24be044 	sub	lr, fp, #68	; 0x44
   10150:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   10154:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   10158:	e89e0003 	ldm	lr, {r0, r1}
   1015c:	e88c0003 	stm	ip, {r0, r1}
   10160:	e14b42dc 	ldrd	r4, [fp, #-44]	; 0xffffffd4
   10164:	e14b02d4 	ldrd	r0, [fp, #-36]	; 0xffffffdc
   10168:	e14b21dc 	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1016c:	ec454b15 	vmov	d5, r4, r5
   10170:	ec410b16 	vmov	d6, r0, r1
   10174:	ec432b17 	vmov	d7, r2, r3
}
   10178:	eeb00b45 	vmov.f64	d0, d5
   1017c:	eeb01b46 	vmov.f64	d1, d6
   10180:	eeb02b47 	vmov.f64	d2, d7
   10184:	e24bd00c 	sub	sp, fp, #12
   10188:	e8bd8830 	pop	{r4, r5, fp, pc}
   1018c:	e1a00000 	nop			; (mov r0, r0)
   10190:	00000000 	.word	0x00000000
   10194:	408f4000 	.word	0x408f4000

00010198 <g_SigFil_initImuSensors_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_SigFil_initImuSensors_bl()
{
   10198:	e92d4800 	push	{fp, lr}
   1019c:	e28db004 	add	fp, sp, #4
   101a0:	e24dd008 	sub	sp, sp, #8
	unsigned int l_initState_bl;

	l_initState_bl = g_halImu_initImuSensors_bl();
   101a4:	ebfff255 	bl	cb00 <g_halImu_initImuSensors_bl>
   101a8:	e50b0008 	str	r0, [fp, #-8]
	m_offsetGyro_st=m_sigFil_offsetCorrectionGyro_st();
   101ac:	ebffffb2 	bl	1007c <m_sigFil_offsetCorrectionGyro_st>
   101b0:	eeb05b40 	vmov.f64	d5, d0
   101b4:	eeb06b41 	vmov.f64	d6, d1
   101b8:	eeb07b42 	vmov.f64	d7, d2
   101bc:	e59f3018 	ldr	r3, [pc, #24]	; 101dc <g_SigFil_initImuSensors_bl+0x44>
   101c0:	ed835b00 	vstr	d5, [r3]
   101c4:	ed836b02 	vstr	d6, [r3, #8]
   101c8:	ed837b04 	vstr	d7, [r3, #16]

	return l_initState_bl;
   101cc:	e51b3008 	ldr	r3, [fp, #-8]
}
   101d0:	e1a00003 	mov	r0, r3
   101d4:	e24bd004 	sub	sp, fp, #4
   101d8:	e8bd8800 	pop	{fp, pc}
   101dc:	00019d30 	.word	0x00019d30

000101e0 <g_sigFil_readImuData_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigFil_readImuData_bl()
{
   101e0:	e92d4810 	push	{r4, fp, lr}
   101e4:	e28db008 	add	fp, sp, #8
   101e8:	e24dd05c 	sub	sp, sp, #92	; 0x5c
	g_halImu_triggerImuReading_bl();
   101ec:	ebfff2b0 	bl	ccb4 <g_halImu_triggerImuReading_bl>
	m_sigFil_imuValues_st = g_halImu_getImuValues_str();
   101f0:	e59f40e8 	ldr	r4, [pc, #232]	; 102e0 <g_sigFil_readImuData_bl+0x100>
   101f4:	e24b3064 	sub	r3, fp, #100	; 0x64
   101f8:	e1a00003 	mov	r0, r3
   101fc:	ebfff22e 	bl	cabc <g_halImu_getImuValues_str>
   10200:	e1a01004 	mov	r1, r4
   10204:	e24b2064 	sub	r2, fp, #100	; 0x64
   10208:	e3a03058 	mov	r3, #88	; 0x58
   1020c:	e1a00001 	mov	r0, r1
   10210:	e1a01002 	mov	r1, r2
   10214:	e1a02003 	mov	r2, r3
   10218:	ebffe202 	bl	8a28 <_init+0x128>

	m_sigFil_imuValues_st.acc.z_f64=-m_sigFil_imuValues_st.acc.z_f64;
   1021c:	e59f30bc 	ldr	r3, [pc, #188]	; 102e0 <g_sigFil_readImuData_bl+0x100>
   10220:	ed937b04 	vldr	d7, [r3, #16]
   10224:	eeb17b47 	vneg.f64	d7, d7
   10228:	e59f30b0 	ldr	r3, [pc, #176]	; 102e0 <g_sigFil_readImuData_bl+0x100>
   1022c:	ed837b04 	vstr	d7, [r3, #16]
	m_sigFil_imuValues_st.mag.x_f64=m_sigFil_imuValues_st.mag.x_f64*1000000;
   10230:	e59f30a8 	ldr	r3, [pc, #168]	; 102e0 <g_sigFil_readImuData_bl+0x100>
   10234:	ed936b06 	vldr	d6, [r3, #24]
   10238:	ed9f7b26 	vldr	d7, [pc, #152]	; 102d8 <g_sigFil_readImuData_bl+0xf8>
   1023c:	ee267b07 	vmul.f64	d7, d6, d7
   10240:	e59f3098 	ldr	r3, [pc, #152]	; 102e0 <g_sigFil_readImuData_bl+0x100>
   10244:	ed837b06 	vstr	d7, [r3, #24]
	m_sigFil_imuValues_st.mag.y_f64=m_sigFil_imuValues_st.mag.y_f64*1000000;
   10248:	e59f3090 	ldr	r3, [pc, #144]	; 102e0 <g_sigFil_readImuData_bl+0x100>
   1024c:	ed936b08 	vldr	d6, [r3, #32]
   10250:	ed9f7b20 	vldr	d7, [pc, #128]	; 102d8 <g_sigFil_readImuData_bl+0xf8>
   10254:	ee267b07 	vmul.f64	d7, d6, d7
   10258:	e59f3080 	ldr	r3, [pc, #128]	; 102e0 <g_sigFil_readImuData_bl+0x100>
   1025c:	ed837b08 	vstr	d7, [r3, #32]
	m_sigFil_imuValues_st.mag.z_f64=-m_sigFil_imuValues_st.mag.z_f64*1000000;
   10260:	e59f3078 	ldr	r3, [pc, #120]	; 102e0 <g_sigFil_readImuData_bl+0x100>
   10264:	ed937b0a 	vldr	d7, [r3, #40]	; 0x28
   10268:	eeb16b47 	vneg.f64	d6, d7
   1026c:	ed9f7b19 	vldr	d7, [pc, #100]	; 102d8 <g_sigFil_readImuData_bl+0xf8>
   10270:	ee267b07 	vmul.f64	d7, d6, d7
   10274:	e59f3064 	ldr	r3, [pc, #100]	; 102e0 <g_sigFil_readImuData_bl+0x100>
   10278:	ed837b0a 	vstr	d7, [r3, #40]	; 0x28
	m_sigFil_imuValues_st.gyro.roll_f64=m_sigFil_imuValues_st.gyro.roll_f64-m_offsetGyro_st.roll_f64;
   1027c:	e59f305c 	ldr	r3, [pc, #92]	; 102e0 <g_sigFil_readImuData_bl+0x100>
   10280:	ed936b0c 	vldr	d6, [r3, #48]	; 0x30
   10284:	e59f3058 	ldr	r3, [pc, #88]	; 102e4 <g_sigFil_readImuData_bl+0x104>
   10288:	ed937b00 	vldr	d7, [r3]
   1028c:	ee367b47 	vsub.f64	d7, d6, d7
   10290:	e59f3048 	ldr	r3, [pc, #72]	; 102e0 <g_sigFil_readImuData_bl+0x100>
   10294:	ed837b0c 	vstr	d7, [r3, #48]	; 0x30
	m_sigFil_imuValues_st.gyro.pitch_f64=m_sigFil_imuValues_st.gyro.pitch_f64-m_offsetGyro_st.pitch_f64;
   10298:	e59f3040 	ldr	r3, [pc, #64]	; 102e0 <g_sigFil_readImuData_bl+0x100>
   1029c:	ed936b0e 	vldr	d6, [r3, #56]	; 0x38
   102a0:	e59f303c 	ldr	r3, [pc, #60]	; 102e4 <g_sigFil_readImuData_bl+0x104>
   102a4:	ed937b02 	vldr	d7, [r3, #8]
   102a8:	ee367b47 	vsub.f64	d7, d6, d7
   102ac:	e59f302c 	ldr	r3, [pc, #44]	; 102e0 <g_sigFil_readImuData_bl+0x100>
   102b0:	ed837b0e 	vstr	d7, [r3, #56]	; 0x38
	m_sigFil_imuValues_st.gyro.yaw_f64=m_sigFil_imuValues_st.gyro.yaw_f64-m_offsetGyro_st.yaw_f64;
   102b4:	e59f3024 	ldr	r3, [pc, #36]	; 102e0 <g_sigFil_readImuData_bl+0x100>
   102b8:	ed936b10 	vldr	d6, [r3, #64]	; 0x40
   102bc:	e59f3020 	ldr	r3, [pc, #32]	; 102e4 <g_sigFil_readImuData_bl+0x104>
   102c0:	ed937b04 	vldr	d7, [r3, #16]
   102c4:	ee367b47 	vsub.f64	d7, d6, d7
   102c8:	e59f3010 	ldr	r3, [pc, #16]	; 102e0 <g_sigFil_readImuData_bl+0x100>
   102cc:	ed837b10 	vstr	d7, [r3, #64]	; 0x40

}
   102d0:	e24bd008 	sub	sp, fp, #8
   102d4:	e8bd8810 	pop	{r4, fp, pc}
   102d8:	00000000 	.word	0x00000000
   102dc:	412e8480 	.word	0x412e8480
   102e0:	00019cd8 	.word	0x00019cd8
   102e4:	00019d30 	.word	0x00019d30

000102e8 <__libc_csu_init>:
   102e8:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}
   102ec:	e1a06000 	mov	r6, r0
   102f0:	e59f5048 	ldr	r5, [pc, #72]	; 10340 <__libc_csu_init+0x58>
   102f4:	e59fa048 	ldr	sl, [pc, #72]	; 10344 <__libc_csu_init+0x5c>
   102f8:	e08f5005 	add	r5, pc, r5
   102fc:	e08fa00a 	add	sl, pc, sl
   10300:	e065a00a 	rsb	sl, r5, sl
   10304:	e1a07001 	mov	r7, r1
   10308:	e1a08002 	mov	r8, r2
   1030c:	ebffe17b 	bl	8900 <_init>
   10310:	e1b0a14a 	asrs	sl, sl, #2
   10314:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, sl, pc}
   10318:	e3a04000 	mov	r4, #0
   1031c:	e4953004 	ldr	r3, [r5], #4
   10320:	e1a00006 	mov	r0, r6
   10324:	e1a01007 	mov	r1, r7
   10328:	e1a02008 	mov	r2, r8
   1032c:	e2844001 	add	r4, r4, #1
   10330:	e12fff33 	blx	r3
   10334:	e154000a 	cmp	r4, sl
   10338:	1afffff7 	bne	1031c <__libc_csu_init+0x34>
   1033c:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, sl, pc}
   10340:	00008d00 	.word	0x00008d00
   10344:	00008d00 	.word	0x00008d00

00010348 <__libc_csu_fini>:
   10348:	e12fff1e 	bx	lr

Disassembly of section .fini:

0001034c <_fini>:
   1034c:	e92d4008 	push	{r3, lr}
   10350:	e8bd8008 	pop	{r3, pc}
