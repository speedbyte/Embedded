
HELIKOPTER.elf:     Dateiformat elf32-littlearm

Sektionen:
Idx Name          Größe     VMA       LMA       Datei-Off Ausr.
  0 .interp       00000019  00008134  00008134  00000134  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.ABI-tag 00000020  00008150  00008150  00000150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  00008170  00008170  00000170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .hash         00000180  00008194  00008194  00000194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dynsym       00000390  00008314  00008314  00000314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynstr       000001eb  000086a4  000086a4  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .gnu.version  00000072  00008890  00008890  00000890  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version_r 00000060  00008904  00008904  00000904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rel.dyn      00000010  00008964  00008964  00000964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rel.plt      000001a0  00008974  00008974  00000974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .init         0000000c  00008b14  00008b14  00000b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .plt          00000284  00008b20  00008b20  00000b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text         000092b4  00008da8  00008da8  00000da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .fini         00000008  0001205c  0001205c  0000a05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .rodata       0000090c  00012064  00012064  0000a064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .ARM.exidx    00000008  00012970  00012970  0000a970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame     00000004  00012978  00012978  0000a978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .init_array   00000004  0001b000  0001b000  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 18 .fini_array   00000004  0001b004  0001b004  0000b004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 19 .jcr          00000004  0001b008  0001b008  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 20 .dynamic      00000108  0001b00c  0001b00c  0000b00c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .got          000000e0  0001b114  0001b114  0000b114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 22 .data         000000a4  0001b1f8  0001b1f8  0000b1f8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .bss          00000af4  0001b2a0  0001b2a0  0000b29c  2**3
                  ALLOC
 24 .comment      0000005b  00000000  00000000  0000b29c  2**0
                  CONTENTS, READONLY
 25 .ARM.attributes 00000031  00000000  00000000  0000b2f7  2**0
                  CONTENTS, READONLY
 26 .debug_aranges 00000260  00000000  00000000  0000b328  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_info   00004772  00000000  00000000  0000b588  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_abbrev 00001163  00000000  00000000  0000fcfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_line   000065ce  00000000  00000000  00010e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .debug_frame  00001134  00000000  00000000  0001742c  2**2
                  CONTENTS, READONLY, DEBUGGING
 31 .debug_str    000187ad  00000000  00000000  00018560  2**0
                  CONTENTS, READONLY, DEBUGGING
 32 .debug_macro  00007824  00000000  00000000  00030d0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .init:

00008b14 <_init>:
    8b14:	e92d4008 	push	{r3, lr}
    8b18:	eb0000b1 	bl	8de4 <call_gmon_start>
    8b1c:	e8bd8008 	pop	{r3, pc}

Disassembly of section .plt:

00008b20 <.plt>:
    8b20:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8b24:	e59fe004 	ldr	lr, [pc, #4]	; 8b30 <_init+0x1c>
    8b28:	e08fe00e 	add	lr, pc, lr
    8b2c:	e5bef008 	ldr	pc, [lr, #8]!
    8b30:	000125e4 	.word	0x000125e4
    8b34:	e28fc600 	add	ip, pc, #0, 12
    8b38:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8b3c:	e5bcf5e4 	ldr	pc, [ip, #1508]!	; 0x5e4
    8b40:	e28fc600 	add	ip, pc, #0, 12
    8b44:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8b48:	e5bcf5dc 	ldr	pc, [ip, #1500]!	; 0x5dc
    8b4c:	e28fc600 	add	ip, pc, #0, 12
    8b50:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8b54:	e5bcf5d4 	ldr	pc, [ip, #1492]!	; 0x5d4
    8b58:	e28fc600 	add	ip, pc, #0, 12
    8b5c:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8b60:	e5bcf5cc 	ldr	pc, [ip, #1484]!	; 0x5cc
    8b64:	e28fc600 	add	ip, pc, #0, 12
    8b68:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8b6c:	e5bcf5c4 	ldr	pc, [ip, #1476]!	; 0x5c4
    8b70:	e28fc600 	add	ip, pc, #0, 12
    8b74:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8b78:	e5bcf5bc 	ldr	pc, [ip, #1468]!	; 0x5bc
    8b7c:	e28fc600 	add	ip, pc, #0, 12
    8b80:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8b84:	e5bcf5b4 	ldr	pc, [ip, #1460]!	; 0x5b4
    8b88:	e28fc600 	add	ip, pc, #0, 12
    8b8c:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8b90:	e5bcf5ac 	ldr	pc, [ip, #1452]!	; 0x5ac
    8b94:	e28fc600 	add	ip, pc, #0, 12
    8b98:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8b9c:	e5bcf5a4 	ldr	pc, [ip, #1444]!	; 0x5a4
    8ba0:	e28fc600 	add	ip, pc, #0, 12
    8ba4:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8ba8:	e5bcf59c 	ldr	pc, [ip, #1436]!	; 0x59c
    8bac:	e28fc600 	add	ip, pc, #0, 12
    8bb0:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8bb4:	e5bcf594 	ldr	pc, [ip, #1428]!	; 0x594
    8bb8:	e28fc600 	add	ip, pc, #0, 12
    8bbc:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8bc0:	e5bcf58c 	ldr	pc, [ip, #1420]!	; 0x58c
    8bc4:	e28fc600 	add	ip, pc, #0, 12
    8bc8:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8bcc:	e5bcf584 	ldr	pc, [ip, #1412]!	; 0x584
    8bd0:	e28fc600 	add	ip, pc, #0, 12
    8bd4:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8bd8:	e5bcf57c 	ldr	pc, [ip, #1404]!	; 0x57c
    8bdc:	e28fc600 	add	ip, pc, #0, 12
    8be0:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8be4:	e5bcf574 	ldr	pc, [ip, #1396]!	; 0x574
    8be8:	e28fc600 	add	ip, pc, #0, 12
    8bec:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8bf0:	e5bcf56c 	ldr	pc, [ip, #1388]!	; 0x56c
    8bf4:	e28fc600 	add	ip, pc, #0, 12
    8bf8:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8bfc:	e5bcf564 	ldr	pc, [ip, #1380]!	; 0x564
    8c00:	e28fc600 	add	ip, pc, #0, 12
    8c04:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8c08:	e5bcf55c 	ldr	pc, [ip, #1372]!	; 0x55c
    8c0c:	e28fc600 	add	ip, pc, #0, 12
    8c10:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8c14:	e5bcf554 	ldr	pc, [ip, #1364]!	; 0x554
    8c18:	e28fc600 	add	ip, pc, #0, 12
    8c1c:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8c20:	e5bcf54c 	ldr	pc, [ip, #1356]!	; 0x54c
    8c24:	e28fc600 	add	ip, pc, #0, 12
    8c28:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8c2c:	e5bcf544 	ldr	pc, [ip, #1348]!	; 0x544
    8c30:	e28fc600 	add	ip, pc, #0, 12
    8c34:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8c38:	e5bcf53c 	ldr	pc, [ip, #1340]!	; 0x53c
    8c3c:	e28fc600 	add	ip, pc, #0, 12
    8c40:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8c44:	e5bcf534 	ldr	pc, [ip, #1332]!	; 0x534
    8c48:	e28fc600 	add	ip, pc, #0, 12
    8c4c:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8c50:	e5bcf52c 	ldr	pc, [ip, #1324]!	; 0x52c
    8c54:	e28fc600 	add	ip, pc, #0, 12
    8c58:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8c5c:	e5bcf524 	ldr	pc, [ip, #1316]!	; 0x524
    8c60:	e28fc600 	add	ip, pc, #0, 12
    8c64:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8c68:	e5bcf51c 	ldr	pc, [ip, #1308]!	; 0x51c
    8c6c:	e28fc600 	add	ip, pc, #0, 12
    8c70:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8c74:	e5bcf514 	ldr	pc, [ip, #1300]!	; 0x514
    8c78:	e28fc600 	add	ip, pc, #0, 12
    8c7c:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8c80:	e5bcf50c 	ldr	pc, [ip, #1292]!	; 0x50c
    8c84:	e28fc600 	add	ip, pc, #0, 12
    8c88:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8c8c:	e5bcf504 	ldr	pc, [ip, #1284]!	; 0x504
    8c90:	e28fc600 	add	ip, pc, #0, 12
    8c94:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8c98:	e5bcf4fc 	ldr	pc, [ip, #1276]!	; 0x4fc
    8c9c:	e28fc600 	add	ip, pc, #0, 12
    8ca0:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8ca4:	e5bcf4f4 	ldr	pc, [ip, #1268]!	; 0x4f4
    8ca8:	e28fc600 	add	ip, pc, #0, 12
    8cac:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8cb0:	e5bcf4ec 	ldr	pc, [ip, #1260]!	; 0x4ec
    8cb4:	e28fc600 	add	ip, pc, #0, 12
    8cb8:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8cbc:	e5bcf4e4 	ldr	pc, [ip, #1252]!	; 0x4e4
    8cc0:	e28fc600 	add	ip, pc, #0, 12
    8cc4:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8cc8:	e5bcf4dc 	ldr	pc, [ip, #1244]!	; 0x4dc
    8ccc:	e28fc600 	add	ip, pc, #0, 12
    8cd0:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8cd4:	e5bcf4d4 	ldr	pc, [ip, #1236]!	; 0x4d4
    8cd8:	e28fc600 	add	ip, pc, #0, 12
    8cdc:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8ce0:	e5bcf4cc 	ldr	pc, [ip, #1228]!	; 0x4cc
    8ce4:	e28fc600 	add	ip, pc, #0, 12
    8ce8:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8cec:	e5bcf4c4 	ldr	pc, [ip, #1220]!	; 0x4c4
    8cf0:	e28fc600 	add	ip, pc, #0, 12
    8cf4:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8cf8:	e5bcf4bc 	ldr	pc, [ip, #1212]!	; 0x4bc
    8cfc:	e28fc600 	add	ip, pc, #0, 12
    8d00:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8d04:	e5bcf4b4 	ldr	pc, [ip, #1204]!	; 0x4b4
    8d08:	e28fc600 	add	ip, pc, #0, 12
    8d0c:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8d10:	e5bcf4ac 	ldr	pc, [ip, #1196]!	; 0x4ac
    8d14:	e28fc600 	add	ip, pc, #0, 12
    8d18:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8d1c:	e5bcf4a4 	ldr	pc, [ip, #1188]!	; 0x4a4
    8d20:	e28fc600 	add	ip, pc, #0, 12
    8d24:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8d28:	e5bcf49c 	ldr	pc, [ip, #1180]!	; 0x49c
    8d2c:	e28fc600 	add	ip, pc, #0, 12
    8d30:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8d34:	e5bcf494 	ldr	pc, [ip, #1172]!	; 0x494
    8d38:	e28fc600 	add	ip, pc, #0, 12
    8d3c:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8d40:	e5bcf48c 	ldr	pc, [ip, #1164]!	; 0x48c
    8d44:	e28fc600 	add	ip, pc, #0, 12
    8d48:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8d4c:	e5bcf484 	ldr	pc, [ip, #1156]!	; 0x484
    8d50:	e28fc600 	add	ip, pc, #0, 12
    8d54:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8d58:	e5bcf47c 	ldr	pc, [ip, #1148]!	; 0x47c
    8d5c:	e28fc600 	add	ip, pc, #0, 12
    8d60:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8d64:	e5bcf474 	ldr	pc, [ip, #1140]!	; 0x474
    8d68:	e28fc600 	add	ip, pc, #0, 12
    8d6c:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8d70:	e5bcf46c 	ldr	pc, [ip, #1132]!	; 0x46c
    8d74:	e28fc600 	add	ip, pc, #0, 12
    8d78:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8d7c:	e5bcf464 	ldr	pc, [ip, #1124]!	; 0x464
    8d80:	e28fc600 	add	ip, pc, #0, 12
    8d84:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8d88:	e5bcf45c 	ldr	pc, [ip, #1116]!	; 0x45c
    8d8c:	e28fc600 	add	ip, pc, #0, 12
    8d90:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8d94:	e5bcf454 	ldr	pc, [ip, #1108]!	; 0x454
    8d98:	e28fc600 	add	ip, pc, #0, 12
    8d9c:	e28cca12 	add	ip, ip, #73728	; 0x12000
    8da0:	e5bcf44c 	ldr	pc, [ip, #1100]!	; 0x44c

Disassembly of section .text:

00008da8 <_start>:
    8da8:	e3a0b000 	mov	fp, #0
    8dac:	e3a0e000 	mov	lr, #0
    8db0:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
    8db4:	e1a0200d 	mov	r2, sp
    8db8:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
    8dbc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    8dc0:	e59fc010 	ldr	ip, [pc, #16]	; 8dd8 <_start+0x30>
    8dc4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
    8dc8:	e59f000c 	ldr	r0, [pc, #12]	; 8ddc <_start+0x34>
    8dcc:	e59f300c 	ldr	r3, [pc, #12]	; 8de0 <_start+0x38>
    8dd0:	ebffff63 	bl	8b64 <_init+0x50>
    8dd4:	ebffff59 	bl	8b40 <_init+0x2c>
    8dd8:	00012058 	.word	0x00012058
    8ddc:	00008ed0 	.word	0x00008ed0
    8de0:	00011ff8 	.word	0x00011ff8

00008de4 <call_gmon_start>:
    8de4:	e59f3014 	ldr	r3, [pc, #20]	; 8e00 <call_gmon_start+0x1c>
    8de8:	e59f2014 	ldr	r2, [pc, #20]	; 8e04 <call_gmon_start+0x20>
    8dec:	e08f3003 	add	r3, pc, r3
    8df0:	e7933002 	ldr	r3, [r3, r2]
    8df4:	e3530000 	cmp	r3, #0
    8df8:	012fff1e 	bxeq	lr
    8dfc:	eaffff5b 	b	8b70 <_init+0x5c>
    8e00:	00012320 	.word	0x00012320
    8e04:	000000dc 	.word	0x000000dc

00008e08 <deregister_tm_clones>:
    8e08:	e59f301c 	ldr	r3, [pc, #28]	; 8e2c <deregister_tm_clones+0x24>
    8e0c:	e59f001c 	ldr	r0, [pc, #28]	; 8e30 <deregister_tm_clones+0x28>
    8e10:	e0603003 	rsb	r3, r0, r3
    8e14:	e3530006 	cmp	r3, #6
    8e18:	912fff1e 	bxls	lr
    8e1c:	e59f3010 	ldr	r3, [pc, #16]	; 8e34 <deregister_tm_clones+0x2c>
    8e20:	e3530000 	cmp	r3, #0
    8e24:	012fff1e 	bxeq	lr
    8e28:	e12fff13 	bx	r3
    8e2c:	0001b29f 	.word	0x0001b29f
    8e30:	0001b29c 	.word	0x0001b29c
    8e34:	00000000 	.word	0x00000000

00008e38 <register_tm_clones>:
    8e38:	e59f3024 	ldr	r3, [pc, #36]	; 8e64 <register_tm_clones+0x2c>
    8e3c:	e59f0024 	ldr	r0, [pc, #36]	; 8e68 <register_tm_clones+0x30>
    8e40:	e0603003 	rsb	r3, r0, r3
    8e44:	e1a03143 	asr	r3, r3, #2
    8e48:	e0833fa3 	add	r3, r3, r3, lsr #31
    8e4c:	e1b010c3 	asrs	r1, r3, #1
    8e50:	012fff1e 	bxeq	lr
    8e54:	e59f2010 	ldr	r2, [pc, #16]	; 8e6c <register_tm_clones+0x34>
    8e58:	e3520000 	cmp	r2, #0
    8e5c:	012fff1e 	bxeq	lr
    8e60:	e12fff12 	bx	r2
    8e64:	0001b29c 	.word	0x0001b29c
    8e68:	0001b29c 	.word	0x0001b29c
    8e6c:	00000000 	.word	0x00000000

00008e70 <__do_global_dtors_aux>:
    8e70:	e92d4010 	push	{r4, lr}
    8e74:	e59f4018 	ldr	r4, [pc, #24]	; 8e94 <__do_global_dtors_aux+0x24>
    8e78:	e5d43000 	ldrb	r3, [r4]
    8e7c:	e3530000 	cmp	r3, #0
    8e80:	18bd8010 	popne	{r4, pc}
    8e84:	ebffffdf 	bl	8e08 <deregister_tm_clones>
    8e88:	e3a03001 	mov	r3, #1
    8e8c:	e5c43000 	strb	r3, [r4]
    8e90:	e8bd8010 	pop	{r4, pc}
    8e94:	0001b2a4 	.word	0x0001b2a4

00008e98 <frame_dummy>:
    8e98:	e59f0024 	ldr	r0, [pc, #36]	; 8ec4 <frame_dummy+0x2c>
    8e9c:	e92d4008 	push	{r3, lr}
    8ea0:	e5903000 	ldr	r3, [r0]
    8ea4:	e3530000 	cmp	r3, #0
    8ea8:	0a000003 	beq	8ebc <frame_dummy+0x24>
    8eac:	e59f3014 	ldr	r3, [pc, #20]	; 8ec8 <frame_dummy+0x30>
    8eb0:	e3530000 	cmp	r3, #0
    8eb4:	0a000000 	beq	8ebc <frame_dummy+0x24>
    8eb8:	e12fff33 	blx	r3
    8ebc:	e8bd4008 	pop	{r3, lr}
    8ec0:	eaffffdc 	b	8e38 <register_tm_clones>
    8ec4:	0001b008 	.word	0x0001b008
	...

00008ed0 <main>:


static char str[500];
static char str2[500];

int main() {
    8ed0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ed4:	ed2d8b0c 	vpush	{d8-d13}
    8ed8:	e28db050 	add	fp, sp, #80	; 0x50
    8edc:	e24ddd11 	sub	sp, sp, #1088	; 0x440
    8ee0:	e24dd004 	sub	sp, sp, #4
    8ee4:	e1a0a003 	mov	sl, r3
    8ee8:	e1a0300d 	mov	r3, sp
    8eec:	e50b3420 	str	r3, [fp, #-1056]	; 0x420
	while(1){
		enumTestcases runCommand = 0;
    8ef0:	e3a03000 	mov	r3, #0
    8ef4:	e50b3058 	str	r3, [fp, #-88]	; 0x58
		int testValueLenght =20;
    8ef8:	e3a03014 	mov	r3, #20
    8efc:	e50b3074 	str	r3, [fp, #-116]	; 0x74
		char testValue[testValueLenght];
    8f00:	e51b1074 	ldr	r1, [fp, #-116]	; 0x74
    8f04:	e2413001 	sub	r3, r1, #1
    8f08:	e50b3078 	str	r3, [fp, #-120]	; 0x78
    8f0c:	e1a03001 	mov	r3, r1
    8f10:	e1a02003 	mov	r2, r3
    8f14:	e3a03000 	mov	r3, #0
    8f18:	e1a00183 	lsl	r0, r3, #3
    8f1c:	e50b0428 	str	r0, [fp, #-1064]	; 0x428
    8f20:	e51b0428 	ldr	r0, [fp, #-1064]	; 0x428
    8f24:	e1800ea2 	orr	r0, r0, r2, lsr #29
    8f28:	e50b0428 	str	r0, [fp, #-1064]	; 0x428
    8f2c:	e1a00182 	lsl	r0, r2, #3
    8f30:	e50b042c 	str	r0, [fp, #-1068]	; 0x42c
    8f34:	e1a03001 	mov	r3, r1
    8f38:	e1a02003 	mov	r2, r3
    8f3c:	e3a03000 	mov	r3, #0
    8f40:	e1a00183 	lsl	r0, r3, #3
    8f44:	e50b0430 	str	r0, [fp, #-1072]	; 0x430
    8f48:	e51b0430 	ldr	r0, [fp, #-1072]	; 0x430
    8f4c:	e1800ea2 	orr	r0, r0, r2, lsr #29
    8f50:	e50b0430 	str	r0, [fp, #-1072]	; 0x430
    8f54:	e1a00182 	lsl	r0, r2, #3
    8f58:	e50b0434 	str	r0, [fp, #-1076]	; 0x434
    8f5c:	e1a03001 	mov	r3, r1
    8f60:	e2833007 	add	r3, r3, #7
    8f64:	e1a031a3 	lsr	r3, r3, #3
    8f68:	e1a03183 	lsl	r3, r3, #3
    8f6c:	e04dd003 	sub	sp, sp, r3
    8f70:	e28d3050 	add	r3, sp, #80	; 0x50
    8f74:	e2833000 	add	r3, r3, #0
    8f78:	e50b307c 	str	r3, [fp, #-124]	; 0x7c
		int isSelected = 0;
    8f7c:	e3a03000 	mov	r3, #0
    8f80:	e50b3080 	str	r3, [fp, #-128]	; 0x80

		do{
			sleep(2);
    8f84:	e3a00002 	mov	r0, #2
    8f88:	ebffff5e 	bl	8d08 <_init+0x1f4>
			isSelected = readTestcaseFile(&testValue[0] ,testValueLenght);
    8f8c:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    8f90:	e1a00003 	mov	r0, r3
    8f94:	e51b1074 	ldr	r1, [fp, #-116]	; 0x74
    8f98:	eb000877 	bl	b17c <readTestcaseFile>
    8f9c:	e50b0080 	str	r0, [fp, #-128]	; 0x80
		}while (isSelected != 1);
    8fa0:	e51b3080 	ldr	r3, [fp, #-128]	; 0x80
    8fa4:	e3530001 	cmp	r3, #1
    8fa8:	1afffff5 	bne	8f84 <main+0xb4>

		printf("Received string is %s\n", testValue);
    8fac:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    8fb0:	e59f0f48 	ldr	r0, [pc, #3912]	; 9f00 <main+0x1030>
    8fb4:	e1a01003 	mov	r1, r3
    8fb8:	ebffff3a 	bl	8ca8 <_init+0x194>
		if ( strcmp(testValue,"testadc")  == 0 )
    8fbc:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    8fc0:	e1a00003 	mov	r0, r3
    8fc4:	e59f1f38 	ldr	r1, [pc, #3896]	; 9f04 <main+0x1034>
    8fc8:	ebffff66 	bl	8d68 <_init+0x254>
    8fcc:	e1a03000 	mov	r3, r0
    8fd0:	e3530000 	cmp	r3, #0
    8fd4:	1a000002 	bne	8fe4 <main+0x114>
			runCommand = TESTADC;
    8fd8:	e3a03001 	mov	r3, #1
    8fdc:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    8fe0:	ea0000bc 	b	92d8 <main+0x408>
		else if ( strcmp(testValue,"testbattery")  == 0 )
    8fe4:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    8fe8:	e1a00003 	mov	r0, r3
    8fec:	e59f1f14 	ldr	r1, [pc, #3860]	; 9f08 <main+0x1038>
    8ff0:	ebffff5c 	bl	8d68 <_init+0x254>
    8ff4:	e1a03000 	mov	r3, r0
    8ff8:	e3530000 	cmp	r3, #0
    8ffc:	1a000002 	bne	900c <main+0x13c>
			runCommand = TESTBATTERY;
    9000:	e3a03002 	mov	r3, #2
    9004:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    9008:	ea0000b2 	b	92d8 <main+0x408>
		else if ( strcmp(testValue,"testgps")  == 0 )
    900c:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    9010:	e1a00003 	mov	r0, r3
    9014:	e59f1ef0 	ldr	r1, [pc, #3824]	; 9f0c <main+0x103c>
    9018:	ebffff52 	bl	8d68 <_init+0x254>
    901c:	e1a03000 	mov	r3, r0
    9020:	e3530000 	cmp	r3, #0
    9024:	1a000002 	bne	9034 <main+0x164>
			runCommand = TESTGPS;
    9028:	e3a03003 	mov	r3, #3
    902c:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    9030:	ea0000a8 	b	92d8 <main+0x408>
		else if ( strcmp(testValue,"testimu")  == 0 )
    9034:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    9038:	e1a00003 	mov	r0, r3
    903c:	e59f1ecc 	ldr	r1, [pc, #3788]	; 9f10 <main+0x1040>
    9040:	ebffff48 	bl	8d68 <_init+0x254>
    9044:	e1a03000 	mov	r3, r0
    9048:	e3530000 	cmp	r3, #0
    904c:	1a000002 	bne	905c <main+0x18c>
			runCommand = TESTIMU;
    9050:	e3a03004 	mov	r3, #4
    9054:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    9058:	ea00009e 	b	92d8 <main+0x408>
		else if ( strcmp(testValue,"testlaser")  == 0 )
    905c:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    9060:	e1a00003 	mov	r0, r3
    9064:	e59f1ea8 	ldr	r1, [pc, #3752]	; 9f14 <main+0x1044>
    9068:	ebffff3e 	bl	8d68 <_init+0x254>
    906c:	e1a03000 	mov	r3, r0
    9070:	e3530000 	cmp	r3, #0
    9074:	1a000002 	bne	9084 <main+0x1b4>
			runCommand = TESTLASER;
    9078:	e3a03005 	mov	r3, #5
    907c:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    9080:	ea000094 	b	92d8 <main+0x408>
		else if ( strcmp(testValue,"testuart")  == 0 )
    9084:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    9088:	e1a00003 	mov	r0, r3
    908c:	e59f1e84 	ldr	r1, [pc, #3716]	; 9f18 <main+0x1048>
    9090:	ebffff34 	bl	8d68 <_init+0x254>
    9094:	e1a03000 	mov	r3, r0
    9098:	e3530000 	cmp	r3, #0
    909c:	1a000002 	bne	90ac <main+0x1dc>
			runCommand = TESTUART;
    90a0:	e3a03006 	mov	r3, #6
    90a4:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    90a8:	ea00008a 	b	92d8 <main+0x408>
		else if ( strcmp(testValue,"testmatlabimu")  == 0 )
    90ac:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    90b0:	e1a00003 	mov	r0, r3
    90b4:	e59f1e60 	ldr	r1, [pc, #3680]	; 9f1c <main+0x104c>
    90b8:	ebffff2a 	bl	8d68 <_init+0x254>
    90bc:	e1a03000 	mov	r3, r0
    90c0:	e3530000 	cmp	r3, #0
    90c4:	1a000002 	bne	90d4 <main+0x204>
			runCommand = TESTMATLABIMU;
    90c8:	e3a03007 	mov	r3, #7
    90cc:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    90d0:	ea000080 	b	92d8 <main+0x408>
		else if ( strcmp(testValue,"testmatlabkalman")  == 0 )
    90d4:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    90d8:	e1a00003 	mov	r0, r3
    90dc:	e59f1e3c 	ldr	r1, [pc, #3644]	; 9f20 <main+0x1050>
    90e0:	ebffff20 	bl	8d68 <_init+0x254>
    90e4:	e1a03000 	mov	r3, r0
    90e8:	e3530000 	cmp	r3, #0
    90ec:	1a000002 	bne	90fc <main+0x22c>
			runCommand = TESTMATLABKALMAN;
    90f0:	e3a03008 	mov	r3, #8
    90f4:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    90f8:	ea000076 	b	92d8 <main+0x408>
		else if ( strcmp(testValue,"testaccmag")  == 0 )
    90fc:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    9100:	e1a00003 	mov	r0, r3
    9104:	e59f1e18 	ldr	r1, [pc, #3608]	; 9f24 <main+0x1054>
    9108:	ebffff16 	bl	8d68 <_init+0x254>
    910c:	e1a03000 	mov	r3, r0
    9110:	e3530000 	cmp	r3, #0
    9114:	1a000002 	bne	9124 <main+0x254>
			runCommand = TESTACCMAG;
    9118:	e3a03009 	mov	r3, #9
    911c:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    9120:	ea00006c 	b	92d8 <main+0x408>
		else if ( strcmp(testValue,"testgyro")  == 0 )
    9124:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    9128:	e1a00003 	mov	r0, r3
    912c:	e59f1df4 	ldr	r1, [pc, #3572]	; 9f28 <main+0x1058>
    9130:	ebffff0c 	bl	8d68 <_init+0x254>
    9134:	e1a03000 	mov	r3, r0
    9138:	e3530000 	cmp	r3, #0
    913c:	1a000002 	bne	914c <main+0x27c>
			runCommand = TESTGYRO;
    9140:	e3a0300a 	mov	r3, #10
    9144:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    9148:	ea000062 	b	92d8 <main+0x408>
		else if ( strcmp(testValue,"testbaro")  == 0 )
    914c:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    9150:	e1a00003 	mov	r0, r3
    9154:	e59f1dd0 	ldr	r1, [pc, #3536]	; 9f2c <main+0x105c>
    9158:	ebffff02 	bl	8d68 <_init+0x254>
    915c:	e1a03000 	mov	r3, r0
    9160:	e3530000 	cmp	r3, #0
    9164:	1a000002 	bne	9174 <main+0x2a4>
			runCommand = TESTBARO;
    9168:	e3a0300b 	mov	r3, #11
    916c:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    9170:	ea000058 	b	92d8 <main+0x408>
		else if ( strcmp(testValue,"testmatrixlib")  == 0 )
    9174:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    9178:	e1a00003 	mov	r0, r3
    917c:	e59f1dac 	ldr	r1, [pc, #3500]	; 9f30 <main+0x1060>
    9180:	ebfffef8 	bl	8d68 <_init+0x254>
    9184:	e1a03000 	mov	r3, r0
    9188:	e3530000 	cmp	r3, #0
    918c:	1a000002 	bne	919c <main+0x2cc>
			runCommand = TESTMATRIXLIB;
    9190:	e3a0300c 	mov	r3, #12
    9194:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    9198:	ea00004e 	b	92d8 <main+0x408>
		else if ( strcmp(testValue,"testudp")  == 0 )
    919c:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    91a0:	e1a00003 	mov	r0, r3
    91a4:	e59f1d88 	ldr	r1, [pc, #3464]	; 9f34 <main+0x1064>
    91a8:	ebfffeee 	bl	8d68 <_init+0x254>
    91ac:	e1a03000 	mov	r3, r0
    91b0:	e3530000 	cmp	r3, #0
    91b4:	1a000002 	bne	91c4 <main+0x2f4>
			runCommand = TESTUDP;
    91b8:	e3a0300d 	mov	r3, #13
    91bc:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    91c0:	ea000044 	b	92d8 <main+0x408>
		else if ( strcmp(testValue,"testudptransfer")  == 0 )
    91c4:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    91c8:	e1a00003 	mov	r0, r3
    91cc:	e59f1d64 	ldr	r1, [pc, #3428]	; 9f38 <main+0x1068>
    91d0:	ebfffee4 	bl	8d68 <_init+0x254>
    91d4:	e1a03000 	mov	r3, r0
    91d8:	e3530000 	cmp	r3, #0
    91dc:	1a000002 	bne	91ec <main+0x31c>
			runCommand = TESTUDPTRANSFER;
    91e0:	e3a0300e 	mov	r3, #14
    91e4:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    91e8:	ea00003a 	b	92d8 <main+0x408>
		else if ( strcmp(testValue,"testallangles")  == 0 )
    91ec:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    91f0:	e1a00003 	mov	r0, r3
    91f4:	e59f1d40 	ldr	r1, [pc, #3392]	; 9f3c <main+0x106c>
    91f8:	ebfffeda 	bl	8d68 <_init+0x254>
    91fc:	e1a03000 	mov	r3, r0
    9200:	e3530000 	cmp	r3, #0
    9204:	1a000002 	bne	9214 <main+0x344>
			runCommand = ALLANGLES;
    9208:	e3a0300f 	mov	r3, #15
    920c:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    9210:	ea000030 	b	92d8 <main+0x408>
		else if ( strcmp(testValue,"testallsensordata")  == 0 )
    9214:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    9218:	e1a00003 	mov	r0, r3
    921c:	e59f1d1c 	ldr	r1, [pc, #3356]	; 9f40 <main+0x1070>
    9220:	ebfffed0 	bl	8d68 <_init+0x254>
    9224:	e1a03000 	mov	r3, r0
    9228:	e3530000 	cmp	r3, #0
    922c:	1a000002 	bne	923c <main+0x36c>
				runCommand = TESTALLSENSORDATA;
    9230:	e3a03010 	mov	r3, #16
    9234:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    9238:	ea000026 	b	92d8 <main+0x408>
		else if ( strcmp(testValue,"testmotorpwm")  == 0 )
    923c:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    9240:	e1a00003 	mov	r0, r3
    9244:	e59f1cf8 	ldr	r1, [pc, #3320]	; 9f44 <main+0x1074>
    9248:	ebfffec6 	bl	8d68 <_init+0x254>
    924c:	e1a03000 	mov	r3, r0
    9250:	e3530000 	cmp	r3, #0
    9254:	1a000002 	bne	9264 <main+0x394>
				runCommand = TESTMOTORPWM;
    9258:	e3a03011 	mov	r3, #17
    925c:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    9260:	ea00001c 	b	92d8 <main+0x408>
		else if ( strcmp(testValue,"testmotorisr")  == 0 )
    9264:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    9268:	e1a00003 	mov	r0, r3
    926c:	e59f1cd4 	ldr	r1, [pc, #3284]	; 9f48 <main+0x1078>
    9270:	ebfffebc 	bl	8d68 <_init+0x254>
    9274:	e1a03000 	mov	r3, r0
    9278:	e3530000 	cmp	r3, #0
    927c:	1a000002 	bne	928c <main+0x3bc>
				runCommand = TESTMOTORISR;
    9280:	e3a03012 	mov	r3, #18
    9284:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    9288:	ea000012 	b	92d8 <main+0x408>
		else if ( strcmp(testValue,"testmotortxt")  == 0 )
    928c:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    9290:	e1a00003 	mov	r0, r3
    9294:	e59f1cb0 	ldr	r1, [pc, #3248]	; 9f4c <main+0x107c>
    9298:	ebfffeb2 	bl	8d68 <_init+0x254>
    929c:	e1a03000 	mov	r3, r0
    92a0:	e3530000 	cmp	r3, #0
    92a4:	1a000002 	bne	92b4 <main+0x3e4>
					runCommand = TESTMOTORTXT;
    92a8:	e3a03013 	mov	r3, #19
    92ac:	e50b3058 	str	r3, [fp, #-88]	; 0x58
    92b0:	ea000008 	b	92d8 <main+0x408>
		else if( strcmp(testValue,"testgui") == 0 )
    92b4:	e51b307c 	ldr	r3, [fp, #-124]	; 0x7c
    92b8:	e1a00003 	mov	r0, r3
    92bc:	e59f1c8c 	ldr	r1, [pc, #3212]	; 9f50 <main+0x1080>
    92c0:	ebfffea8 	bl	8d68 <_init+0x254>
    92c4:	e1a03000 	mov	r3, r0
    92c8:	e3530000 	cmp	r3, #0
    92cc:	1a000001 	bne	92d8 <main+0x408>
					runCommand = TESTGUI;
    92d0:	e3a03014 	mov	r3, #20
    92d4:	e50b3058 	str	r3, [fp, #-88]	; 0x58

		switch (runCommand)
    92d8:	e51b3058 	ldr	r3, [fp, #-88]	; 0x58
    92dc:	e2433001 	sub	r3, r3, #1
    92e0:	e3530013 	cmp	r3, #19
    92e4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    92e8:	ea00073f 	b	afec <main+0x211c>
    92ec:	0000933c 	.word	0x0000933c
    92f0:	0000938c 	.word	0x0000938c
    92f4:	000093dc 	.word	0x000093dc
    92f8:	00009408 	.word	0x00009408
    92fc:	000094fc 	.word	0x000094fc
    9300:	0000954c 	.word	0x0000954c
    9304:	000095e4 	.word	0x000095e4
    9308:	000096c4 	.word	0x000096c4
    930c:	0000981c 	.word	0x0000981c
    9310:	00009a14 	.word	0x00009a14
    9314:	00009908 	.word	0x00009908
    9318:	00009b04 	.word	0x00009b04
    931c:	00009c5c 	.word	0x00009c5c
    9320:	00009dfc 	.word	0x00009dfc
    9324:	0000a2f4 	.word	0x0000a2f4
    9328:	0000a65c 	.word	0x0000a65c
    932c:	0000a7ec 	.word	0x0000a7ec
    9330:	0000a8c8 	.word	0x0000a8c8
    9334:	0000adf0 	.word	0x0000adf0
    9338:	0000aff8 	.word	0x0000aff8
		{
			case TESTADC:
			{
				float erg;
				printf("Starting ADC Test\n");
    933c:	e59f0c10 	ldr	r0, [pc, #3088]	; 9f54 <main+0x1084>
    9340:	ebfffe73 	bl	8d14 <_init+0x200>
				erg = g_halADC_get_ui16(1);
    9344:	e3a00001 	mov	r0, #1
    9348:	eb0009b6 	bl	ba28 <g_halADC_get_ui16>
    934c:	ed0b0a21 	vstr	s0, [fp, #-132]	; 0xffffff7c
				if(erg<0)
    9350:	ed5b7a21 	vldr	s15, [fp, #-132]	; 0xffffff7c
    9354:	eef57ac0 	vcmpe.f32	s15, #0.0
    9358:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    935c:	5a000004 	bpl	9374 <main+0x4a4>
				{
					printf("Fehler");
    9360:	e59f0bf0 	ldr	r0, [pc, #3056]	; 9f58 <main+0x1088>
    9364:	ebfffe4f 	bl	8ca8 <_init+0x194>
					return 1;
    9368:	e3a0a001 	mov	sl, #1
    936c:	e3a03000 	mov	r3, #0
    9370:	ea000766 	b	b110 <main+0x2240>
				}
				else
				{
					printf("Ergebniss: %f\n",erg);
    9374:	ed5b7a21 	vldr	s15, [fp, #-132]	; 0xffffff7c
    9378:	eeb77ae7 	vcvt.f64.f32	d7, s15
    937c:	e59f0bd8 	ldr	r0, [pc, #3032]	; 9f5c <main+0x108c>
    9380:	ec532b17 	vmov	r2, r3, d7
    9384:	ebfffe47 	bl	8ca8 <_init+0x194>
				}
				break;
    9388:	ea00075f 	b	b10c <main+0x223c>
			}
			case TESTBATTERY:
			{
				double l_batterLevel_f64=0;
    938c:	e3a02000 	mov	r2, #0
    9390:	e3a03000 	mov	r3, #0
    9394:	e14b28fc 	strd	r2, [fp, #-140]	; 0xffffff74
				printf("Starting Battery Test\n");
    9398:	e59f0bc0 	ldr	r0, [pc, #3008]	; 9f60 <main+0x1090>
    939c:	ebfffe5c 	bl	8d14 <_init+0x200>
				int i = kbhit();
    93a0:	eb000815 	bl	b3fc <kbhit>
    93a4:	e50b0090 	str	r0, [fp, #-144]	; 0x90
				while(i != 'q')
    93a8:	ea000007 	b	93cc <main+0x4fc>
				{
					g_halBatCheck_readBatStatusFromI2C_bl();
    93ac:	eb000a21 	bl	bc38 <g_halBatCheck_readBatStatusFromI2C_bl>
					l_batterLevel_f64=g_halBatCheck_getBatteryStatus_f64();
    93b0:	eb000a16 	bl	bc10 <g_halBatCheck_getBatteryStatus_f64>
    93b4:	ed0b0b23 	vstr	d0, [fp, #-140]	; 0xffffff74
					printf("Measured Voltage: %5.3f\n",l_batterLevel_f64);
    93b8:	e59f0ba4 	ldr	r0, [pc, #2980]	; 9f64 <main+0x1094>
    93bc:	e14b28dc 	ldrd	r2, [fp, #-140]	; 0xffffff74
    93c0:	ebfffe38 	bl	8ca8 <_init+0x194>
					sleep(1);
    93c4:	e3a00001 	mov	r0, #1
    93c8:	ebfffe4e 	bl	8d08 <_init+0x1f4>
			case TESTBATTERY:
			{
				double l_batterLevel_f64=0;
				printf("Starting Battery Test\n");
				int i = kbhit();
				while(i != 'q')
    93cc:	e51b3090 	ldr	r3, [fp, #-144]	; 0x90
    93d0:	e3530071 	cmp	r3, #113	; 0x71
    93d4:	1afffff4 	bne	93ac <main+0x4dc>
					g_halBatCheck_readBatStatusFromI2C_bl();
					l_batterLevel_f64=g_halBatCheck_getBatteryStatus_f64();
					printf("Measured Voltage: %5.3f\n",l_batterLevel_f64);
					sleep(1);
				}
				break;
    93d8:	ea00074b 	b	b10c <main+0x223c>
			}
			case TESTGPS:
			{
				struct strPosition main_longitude;
				struct strPosition main_latitude;
				printf("Starting GPS Test\n");
    93dc:	e59f0b84 	ldr	r0, [pc, #2948]	; 9f68 <main+0x1098>
    93e0:	ebfffe4b 	bl	8d14 <_init+0x200>
				int i = kbhit();
    93e4:	eb000804 	bl	b3fc <kbhit>
    93e8:	e50b0094 	str	r0, [fp, #-148]	; 0x94
				while(i != 'q')
    93ec:	ea000000 	b	93f4 <main+0x524>
				{
					g_halGps_getData_i32();
    93f0:	eb000aef 	bl	bfb4 <g_halGps_getData_i32>
			{
				struct strPosition main_longitude;
				struct strPosition main_latitude;
				printf("Starting GPS Test\n");
				int i = kbhit();
				while(i != 'q')
    93f4:	e51b3094 	ldr	r3, [fp, #-148]	; 0x94
    93f8:	e3530071 	cmp	r3, #113	; 0x71
    93fc:	1afffffb 	bne	93f0 <main+0x520>
				{
					g_halGps_getData_i32();
				}
				break;
    9400:	e1a00000 	nop			; (mov r0, r0)
    9404:	ea000740 	b	b10c <main+0x223c>
			}
			case TESTIMU:
			{
				halImu_orientationValues l_imuMeasurements_st;
				printf("Starting IMU Test\n");
    9408:	e59f0b5c 	ldr	r0, [pc, #2908]	; 9f6c <main+0x109c>
    940c:	ebfffe40 	bl	8d14 <_init+0x200>
				g_halImu_initImuSensors_bl();
    9410:	eb0013b8 	bl	e2f8 <g_halImu_initImuSensors_bl>
				int i = kbhit();
    9414:	eb0007f8 	bl	b3fc <kbhit>
    9418:	e50b0098 	str	r0, [fp, #-152]	; 0x98
				while(i != 'q')
    941c:	ea000031 	b	94e8 <main+0x618>
				{
					g_halImu_triggerImuReading_bl();
    9420:	eb001421 	bl	e4ac <g_halImu_triggerImuReading_bl>
					g_halImu_triggerBaroReading_bl();
    9424:	eb0013ca 	bl	e354 <g_halImu_triggerBaroReading_bl>
					g_halImu_triggerGyroReading_bl();
    9428:	eb0013e3 	bl	e3bc <g_halImu_triggerGyroReading_bl>
					g_halImu_triggerAccReading_bl();
    942c:	eb0013f6 	bl	e40c <g_halImu_triggerAccReading_bl>

					l_imuMeasurements_st=g_halImu_getImuValues_str();
    9430:	e24b3ff1 	sub	r3, fp, #964	; 0x3c4
    9434:	e1a00003 	mov	r0, r3
    9438:	eb00139d 	bl	e2b4 <g_halImu_getImuValues_str>

					printf("Pressure: %5.3f    ;    Temperature:  %5.3f\n",l_imuMeasurements_st.pressure_f64,l_imuMeasurements_st.temperature_f64);
    943c:	e24b3fdd 	sub	r3, fp, #884	; 0x374
    9440:	e1c320d0 	ldrd	r2, [r3]
    9444:	e24b1fdf 	sub	r1, fp, #892	; 0x37c
    9448:	e1c100d0 	ldrd	r0, [r1]
    944c:	e1cd00f0 	strd	r0, [sp]
    9450:	e59f0b18 	ldr	r0, [pc, #2840]	; 9f70 <main+0x10a0>
    9454:	ebfffe13 	bl	8ca8 <_init+0x194>
					printf("roll: %5.3f    ;    pitch:  %5.3f    ;    yaw:  %5.3f\n",l_imuMeasurements_st.gyro.roll_f64, l_imuMeasurements_st.gyro.pitch_f64, l_imuMeasurements_st.gyro.yaw_f64);
    9458:	e24b5fe5 	sub	r5, fp, #916	; 0x394
    945c:	e1c540d0 	ldrd	r4, [r5]
    9460:	e24b1fe3 	sub	r1, fp, #908	; 0x38c
    9464:	e1c100d0 	ldrd	r0, [r1]
    9468:	e24b3fe1 	sub	r3, fp, #900	; 0x384
    946c:	e1c320d0 	ldrd	r2, [r3]
    9470:	e1cd00f0 	strd	r0, [sp]
    9474:	e1cd20f8 	strd	r2, [sp, #8]
    9478:	e59f0af4 	ldr	r0, [pc, #2804]	; 9f74 <main+0x10a4>
    947c:	e1a02004 	mov	r2, r4
    9480:	e1a03005 	mov	r3, r5
    9484:	ebfffe07 	bl	8ca8 <_init+0x194>
					printf("X: %5.3f ; Y:  %5.3f ; Z:  %5.3f\n",l_imuMeasurements_st.acc.x_f64,l_imuMeasurements_st.acc.y_f64,l_imuMeasurements_st.acc.z_f64);
    9488:	e24b5ff1 	sub	r5, fp, #964	; 0x3c4
    948c:	e1c540d0 	ldrd	r4, [r5]
    9490:	e24b1fef 	sub	r1, fp, #956	; 0x3bc
    9494:	e1c100d0 	ldrd	r0, [r1]
    9498:	e24b3fed 	sub	r3, fp, #948	; 0x3b4
    949c:	e1c320d0 	ldrd	r2, [r3]
    94a0:	e1cd00f0 	strd	r0, [sp]
    94a4:	e1cd20f8 	strd	r2, [sp, #8]
    94a8:	e59f0ac8 	ldr	r0, [pc, #2760]	; 9f78 <main+0x10a8>
    94ac:	e1a02004 	mov	r2, r4
    94b0:	e1a03005 	mov	r3, r5
    94b4:	ebfffdfb 	bl	8ca8 <_init+0x194>
					printf("X: %5.10f ; Y:  %5.10f ; Z:  %5.10f\n\n\n\n",l_imuMeasurements_st.mag.x_f64,l_imuMeasurements_st.mag.y_f64,l_imuMeasurements_st.mag.z_f64);
    94b8:	e24b5feb 	sub	r5, fp, #940	; 0x3ac
    94bc:	e1c540d0 	ldrd	r4, [r5]
    94c0:	e24b1fe9 	sub	r1, fp, #932	; 0x3a4
    94c4:	e1c100d0 	ldrd	r0, [r1]
    94c8:	e24b3fe7 	sub	r3, fp, #924	; 0x39c
    94cc:	e1c320d0 	ldrd	r2, [r3]
    94d0:	e1cd00f0 	strd	r0, [sp]
    94d4:	e1cd20f8 	strd	r2, [sp, #8]
    94d8:	e59f0a9c 	ldr	r0, [pc, #2716]	; 9f7c <main+0x10ac>
    94dc:	e1a02004 	mov	r2, r4
    94e0:	e1a03005 	mov	r3, r5
    94e4:	ebfffdef 	bl	8ca8 <_init+0x194>
			{
				halImu_orientationValues l_imuMeasurements_st;
				printf("Starting IMU Test\n");
				g_halImu_initImuSensors_bl();
				int i = kbhit();
				while(i != 'q')
    94e8:	e51b3098 	ldr	r3, [fp, #-152]	; 0x98
    94ec:	e3530071 	cmp	r3, #113	; 0x71
    94f0:	1affffca 	bne	9420 <main+0x550>
					printf("Pressure: %5.3f    ;    Temperature:  %5.3f\n",l_imuMeasurements_st.pressure_f64,l_imuMeasurements_st.temperature_f64);
					printf("roll: %5.3f    ;    pitch:  %5.3f    ;    yaw:  %5.3f\n",l_imuMeasurements_st.gyro.roll_f64, l_imuMeasurements_st.gyro.pitch_f64, l_imuMeasurements_st.gyro.yaw_f64);
					printf("X: %5.3f ; Y:  %5.3f ; Z:  %5.3f\n",l_imuMeasurements_st.acc.x_f64,l_imuMeasurements_st.acc.y_f64,l_imuMeasurements_st.acc.z_f64);
					printf("X: %5.10f ; Y:  %5.10f ; Z:  %5.10f\n\n\n\n",l_imuMeasurements_st.mag.x_f64,l_imuMeasurements_st.mag.y_f64,l_imuMeasurements_st.mag.z_f64);
				}
				break;
    94f4:	e1a00000 	nop			; (mov r0, r0)
    94f8:	ea000703 	b	b10c <main+0x223c>
			}
			case TESTLASER:
			{
				double dist=0;
    94fc:	e3a02000 	mov	r2, #0
    9500:	e3a03000 	mov	r3, #0
    9504:	e14b2af4 	strd	r2, [fp, #-164]	; 0xffffff5c
				printf("Starting LASER Test\n");
    9508:	e59f0a70 	ldr	r0, [pc, #2672]	; 9f80 <main+0x10b0>
    950c:	ebfffe00 	bl	8d14 <_init+0x200>
				int i = kbhit();
    9510:	eb0007b9 	bl	b3fc <kbhit>
    9514:	e50b00a8 	str	r0, [fp, #-168]	; 0xa8
				while(i != 'q')
    9518:	ea000007 	b	953c <main+0x66c>
				{
					g_LIDAR_readDistanceFromI2C_i32();
    951c:	eb001431 	bl	e5e8 <g_LIDAR_readDistanceFromI2C_i32>
					//usleep(100000);

					dist=g_LIDAR_getDistance_f64();
    9520:	eb001426 	bl	e5c0 <g_LIDAR_getDistance_f64>
    9524:	ed0b0b29 	vstr	d0, [fp, #-164]	; 0xffffff5c

					printf("Distance: %4.2f m\n",dist);
    9528:	e59f0a54 	ldr	r0, [pc, #2644]	; 9f84 <main+0x10b4>
    952c:	e14b2ad4 	ldrd	r2, [fp, #-164]	; 0xffffff5c
    9530:	ebfffddc 	bl	8ca8 <_init+0x194>
					usleep(500*1000);
    9534:	e59f0a4c 	ldr	r0, [pc, #2636]	; 9f88 <main+0x10b8>
    9538:	ebfffdaa 	bl	8be8 <_init+0xd4>
			case TESTLASER:
			{
				double dist=0;
				printf("Starting LASER Test\n");
				int i = kbhit();
				while(i != 'q')
    953c:	e51b30a8 	ldr	r3, [fp, #-168]	; 0xa8
    9540:	e3530071 	cmp	r3, #113	; 0x71
    9544:	1afffff4 	bne	951c <main+0x64c>
					dist=g_LIDAR_getDistance_f64();

					printf("Distance: %4.2f m\n",dist);
					usleep(500*1000);
				}
				break;
    9548:	ea0006ef 	b	b10c <main+0x223c>
			}
			case TESTUART:
			{
				char rec_char='z';
    954c:	e3a0307a 	mov	r3, #122	; 0x7a
    9550:	e54b31b5 	strb	r3, [fp, #-437]	; 0x1b5
				char *ptr_rec_char=&rec_char;
    9554:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
    9558:	e2433001 	sub	r3, r3, #1
    955c:	e50b30ac 	str	r3, [fp, #-172]	; 0xac
				printf("Starting UART Test\n");
    9560:	e59f0a24 	ldr	r0, [pc, #2596]	; 9f8c <main+0x10bc>
    9564:	ebfffdea 	bl	8d14 <_init+0x200>
				FILE *fp=(FILE *)-1;
    9568:	e3e03000 	mvn	r3, #0
    956c:	e50b30b0 	str	r3, [fp, #-176]	; 0xb0
				//open file to write received data from GPS
				fp = (FILE *)open("GPS_logging.txt",100 | 01,400);
    9570:	e59f0a18 	ldr	r0, [pc, #2584]	; 9f90 <main+0x10c0>
    9574:	e3a01065 	mov	r1, #101	; 0x65
    9578:	e3a02e19 	mov	r2, #400	; 0x190
    957c:	ebfffd6c 	bl	8b34 <_init+0x20>
    9580:	e1a03000 	mov	r3, r0
    9584:	e50b30b0 	str	r3, [fp, #-176]	; 0xb0
				sleep(1);
    9588:	e3a00001 	mov	r0, #1
    958c:	ebfffddd 	bl	8d08 <_init+0x1f4>
				int i = kbhit();
    9590:	eb000799 	bl	b3fc <kbhit>
    9594:	e50b00b4 	str	r0, [fp, #-180]	; 0xb4
				while(i != 'q')
    9598:	ea00000a 	b	95c8 <main+0x6f8>
				{
					rec_char=g_lldUart_readByte_ch();
    959c:	eb001580 	bl	eba4 <g_lldUart_readByte_ch>
    95a0:	e1a03000 	mov	r3, r0
    95a4:	e54b31b5 	strb	r3, [fp, #-437]	; 0x1b5
					//save read values if filestream is opened
					if (fp != (FILE *)-1)
    95a8:	e51b30b0 	ldr	r3, [fp, #-176]	; 0xb0
    95ac:	e3730001 	cmn	r3, #1
    95b0:	0a000004 	beq	95c8 <main+0x6f8>
					{
						write((int)fp,ptr_rec_char,1);
    95b4:	e51b30b0 	ldr	r3, [fp, #-176]	; 0xb0
    95b8:	e1a00003 	mov	r0, r3
    95bc:	e51b10ac 	ldr	r1, [fp, #-172]	; 0xac
    95c0:	e3a02001 	mov	r2, #1
    95c4:	ebfffd90 	bl	8c0c <_init+0xf8>
				FILE *fp=(FILE *)-1;
				//open file to write received data from GPS
				fp = (FILE *)open("GPS_logging.txt",100 | 01,400);
				sleep(1);
				int i = kbhit();
				while(i != 'q')
    95c8:	e51b30b4 	ldr	r3, [fp, #-180]	; 0xb4
    95cc:	e3530071 	cmp	r3, #113	; 0x71
    95d0:	1afffff1 	bne	959c <main+0x6cc>
					if (fp != (FILE *)-1)
					{
						write((int)fp,ptr_rec_char,1);
					}
				}
				fclose(fp);
    95d4:	e51b00b0 	ldr	r0, [fp, #-176]	; 0xb0
    95d8:	ebfffd6d 	bl	8b94 <_init+0x80>
				break;
    95dc:	e1a00000 	nop			; (mov r0, r0)
    95e0:	ea0006c9 	b	b10c <main+0x223c>
			}
			case TESTMATLABIMU:
			{
				printf("Starting IMU Matlab Test\n");
    95e4:	e59f09a8 	ldr	r0, [pc, #2472]	; 9f94 <main+0x10c4>
    95e8:	ebfffdc9 	bl	8d14 <_init+0x200>
				unsigned char	l_remoteHostAddr_rg4ui8[4] 	= {192,168,22,160};
    95ec:	e59f2a60 	ldr	r2, [pc, #2656]	; a054 <main+0x1184>
    95f0:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
    95f4:	e5920000 	ldr	r0, [r2]
    95f8:	e5830000 	str	r0, [r3]
				unsigned short	l_remoteHostPort_ui16		= 5000;
    95fc:	e59f3a54 	ldr	r3, [pc, #2644]	; a058 <main+0x1188>
    9600:	e14b3bb6 	strh	r3, [fp, #-182]	; 0xffffff4a
				int				l_udpSocket_i32;
				unsigned int	l_sendState_bl;

				// open udp connection
				l_udpSocket_i32 = g_halMatlab_initConnection_i32( l_remoteHostAddr_rg4ui8, l_remoteHostPort_ui16 );
    9604:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
    9608:	e15b3bb6 	ldrh	r3, [fp, #-182]	; 0xffffff4a
    960c:	e1a00002 	mov	r0, r2
    9610:	e1a01003 	mov	r1, r3
    9614:	eb00182b 	bl	f6c8 <g_halMatlab_initConnection_i32>
    9618:	e50b00bc 	str	r0, [fp, #-188]	; 0xbc

				halImu_orientationValues l_imuMeasurements_st;
				g_halImu_initImuSensors_bl();
    961c:	eb001335 	bl	e2f8 <g_halImu_initImuSensors_bl>

				int i = kbhit();
    9620:	eb000775 	bl	b3fc <kbhit>
    9624:	e50b00c0 	str	r0, [fp, #-192]	; 0xc0
				while(i != 'q')
    9628:	ea00001e 	b	96a8 <main+0x7d8>
				{
					g_halImu_triggerImuReading_bl();
    962c:	eb00139e 	bl	e4ac <g_halImu_triggerImuReading_bl>
					g_halImu_triggerBaroReading_bl();
    9630:	eb001347 	bl	e354 <g_halImu_triggerBaroReading_bl>
					g_halImu_triggerGyroReading_bl();
    9634:	eb001360 	bl	e3bc <g_halImu_triggerGyroReading_bl>
					g_halImu_triggerAccReading_bl();
    9638:	eb001373 	bl	e40c <g_halImu_triggerAccReading_bl>

					l_imuMeasurements_st=g_halImu_getImuValues_str();
    963c:	e24b3ff1 	sub	r3, fp, #964	; 0x3c4
    9640:	e1a00003 	mov	r0, r3
    9644:	eb00131a 	bl	e2b4 <g_halImu_getImuValues_str>

					l_sendState_bl = g_halMatlab_sendImuState_bl(l_udpSocket_i32, l_imuMeasurements_st);
    9648:	e1a0100d 	mov	r1, sp
    964c:	e24b2fef 	sub	r2, fp, #956	; 0x3bc
    9650:	e3a03050 	mov	r3, #80	; 0x50
    9654:	e1a00001 	mov	r0, r1
    9658:	e1a01002 	mov	r1, r2
    965c:	e1a02003 	mov	r2, r3
    9660:	ebfffd87 	bl	8c84 <_init+0x170>
    9664:	e24b3ff1 	sub	r3, fp, #964	; 0x3c4
    9668:	e893000c 	ldm	r3, {r2, r3}
    966c:	e51b00bc 	ldr	r0, [fp, #-188]	; 0xbc
    9670:	eb0016c6 	bl	f190 <g_halMatlab_sendImuState_bl>
    9674:	e1a03000 	mov	r3, r0
    9678:	e50b30c4 	str	r3, [fp, #-196]	; 0xc4
					printf("Temp %f\n", l_imuMeasurements_st.temperature_f64);
    967c:	e24b3fdf 	sub	r3, fp, #892	; 0x37c
    9680:	e1c320d0 	ldrd	r2, [r3]
    9684:	e59f090c 	ldr	r0, [pc, #2316]	; 9f98 <main+0x10c8>
    9688:	ebfffd86 	bl	8ca8 <_init+0x194>
					if ( l_sendState_bl != M_HAL_MATLAB_SUCCESS_UI8 )
    968c:	e51b30c4 	ldr	r3, [fp, #-196]	; 0xc4
    9690:	e3530000 	cmp	r3, #0
    9694:	0a000001 	beq	96a0 <main+0x7d0>
					{
						printf("UDP-Packet error\n");
    9698:	e59f09ec 	ldr	r0, [pc, #2540]	; a08c <main+0x11bc>
    969c:	ebfffd9c 	bl	8d14 <_init+0x200>
					}
					usleep( 20000 ); //20ms = 50Hz
    96a0:	e59f09e8 	ldr	r0, [pc, #2536]	; a090 <main+0x11c0>
    96a4:	ebfffd4f 	bl	8be8 <_init+0xd4>

				halImu_orientationValues l_imuMeasurements_st;
				g_halImu_initImuSensors_bl();

				int i = kbhit();
				while(i != 'q')
    96a8:	e51b30c0 	ldr	r3, [fp, #-192]	; 0xc0
    96ac:	e3530071 	cmp	r3, #113	; 0x71
    96b0:	1affffdd 	bne	962c <main+0x75c>
						printf("UDP-Packet error\n");
					}
					usleep( 20000 ); //20ms = 50Hz
				}
				// close udp connection
				g_halMatlab_closeSocket_bl(l_udpSocket_i32);
    96b4:	e51b00bc 	ldr	r0, [fp, #-188]	; 0xbc
    96b8:	eb00181f 	bl	f73c <g_halMatlab_closeSocket_bl>
				break;
    96bc:	e1a00000 	nop			; (mov r0, r0)
    96c0:	ea000691 	b	b10c <main+0x223c>
			}
			case TESTMATLABKALMAN:
			{
				printf("Starting Kalman Orientation Matlab Test\n");
    96c4:	e59f08d0 	ldr	r0, [pc, #2256]	; 9f9c <main+0x10cc>
    96c8:	ebfffd91 	bl	8d14 <_init+0x200>
				unsigned char	l_remoteHostAddr_rg4ui8[4] 	= {192,168,22,160};
    96cc:	e59f2980 	ldr	r2, [pc, #2432]	; a054 <main+0x1184>
    96d0:	e24b3d07 	sub	r3, fp, #448	; 0x1c0
    96d4:	e5920000 	ldr	r0, [r2]
    96d8:	e5830000 	str	r0, [r3]
				unsigned short	l_remoteHostPort_ui16		= 5000;
    96dc:	e59f3974 	ldr	r3, [pc, #2420]	; a058 <main+0x1188>
    96e0:	e14b3cb6 	strh	r3, [fp, #-198]	; 0xffffff3a
				sigOri_orientationAngles	l_kalmanAngles_st;
				sigOri_orientationAngles	l_compAngles_st;
				halImu_orientationValues	l_imuStates_st;

				// open udp connection
				l_udpSocket_i32 = g_halMatlab_initConnection_i32( l_remoteHostAddr_rg4ui8, l_remoteHostPort_ui16 );
    96e4:	e24b2d07 	sub	r2, fp, #448	; 0x1c0
    96e8:	e15b3cb6 	ldrh	r3, [fp, #-198]	; 0xffffff3a
    96ec:	e1a00002 	mov	r0, r2
    96f0:	e1a01003 	mov	r1, r3
    96f4:	eb0017f3 	bl	f6c8 <g_halMatlab_initConnection_i32>
    96f8:	e50b00cc 	str	r0, [fp, #-204]	; 0xcc

				g_sigOri_initMatrices_bl();
    96fc:	eb001e5c 	bl	11074 <g_sigOri_initMatrices_bl>
				g_sigOri_initImuSensors_bl();
    9700:	eb001e50 	bl	11048 <g_sigOri_initImuSensors_bl>

				int i = kbhit();
    9704:	eb00073c 	bl	b3fc <kbhit>
    9708:	e50b00d0 	str	r0, [fp, #-208]	; 0xd0
				while(i != 'q')
    970c:	ea00003b 	b	9800 <main+0x930>
				{
					g_sigOri_calcKalmanOrientation_bl();
    9710:	eb00203f 	bl	11814 <g_sigOri_calcKalmanOrientation_bl>
					g_sigOri_calcComplementaryOrientation_bl();
    9714:	eb002119 	bl	11b80 <g_sigOri_calcComplementaryOrientation_bl>

					l_kalmanAngles_st 	= g_sigOri_getAnglesKalman_bl();
    9718:	eb001e16 	bl	10f78 <g_sigOri_getAnglesKalman_bl>
    971c:	eeb05b40 	vmov.f64	d5, d0
    9720:	eeb06b41 	vmov.f64	d6, d1
    9724:	eeb07b42 	vmov.f64	d7, d2
    9728:	ed0b5b77 	vstr	d5, [fp, #-476]	; 0xfffffe24
    972c:	ed0b6b75 	vstr	d6, [fp, #-468]	; 0xfffffe2c
    9730:	ed0b7b73 	vstr	d7, [fp, #-460]	; 0xfffffe34
					l_compAngles_st		= g_sigOri_getAnglesComplementary_bl();
    9734:	eb001ddb 	bl	10ea8 <g_sigOri_getAnglesComplementary_bl>
    9738:	eeb05b40 	vmov.f64	d5, d0
    973c:	eeb06b41 	vmov.f64	d6, d1
    9740:	eeb07b42 	vmov.f64	d7, d2
    9744:	ed0b5b7d 	vstr	d5, [fp, #-500]	; 0xfffffe0c
    9748:	ed0b6b7b 	vstr	d6, [fp, #-492]	; 0xfffffe14
    974c:	ed0b7b79 	vstr	d7, [fp, #-484]	; 0xfffffe1c
					l_imuStates_st 		= g_halImu_getImuValues_str();
    9750:	e24b3ff1 	sub	r3, fp, #964	; 0x3c4
    9754:	e1a00003 	mov	r0, r3
    9758:	eb0012d5 	bl	e2b4 <g_halImu_getImuValues_str>

					printf("Temp%f\nMag%f",l_imuStates_st.temperature_f64, l_imuStates_st.mag.x_f64);
    975c:	e24b3fdf 	sub	r3, fp, #892	; 0x37c
    9760:	e1c320d0 	ldrd	r2, [r3]
    9764:	e24b1feb 	sub	r1, fp, #940	; 0x3ac
    9768:	e1c100d0 	ldrd	r0, [r1]
    976c:	e1cd00f0 	strd	r0, [sp]
    9770:	e59f0828 	ldr	r0, [pc, #2088]	; 9fa0 <main+0x10d0>
    9774:	ebfffd4b 	bl	8ca8 <_init+0x194>
					l_sendState_bl = g_halMatlab_sendSigAllStates_bl(	l_udpSocket_i32,
    9778:	ed1bdb77 	vldr	d13, [fp, #-476]	; 0xfffffe24
    977c:	ed1bcb75 	vldr	d12, [fp, #-468]	; 0xfffffe2c
    9780:	ed1bbb73 	vldr	d11, [fp, #-460]	; 0xfffffe34
    9784:	ed1bab7d 	vldr	d10, [fp, #-500]	; 0xfffffe0c
    9788:	ed1b9b7b 	vldr	d9, [fp, #-492]	; 0xfffffe14
    978c:	ed1b8b79 	vldr	d8, [fp, #-484]	; 0xfffffe1c
    9790:	e1a0100d 	mov	r1, sp
    9794:	e24b2fef 	sub	r2, fp, #956	; 0x3bc
    9798:	e3a03050 	mov	r3, #80	; 0x50
    979c:	e1a00001 	mov	r0, r1
    97a0:	e1a01002 	mov	r1, r2
    97a4:	e1a02003 	mov	r2, r3
    97a8:	ebfffd35 	bl	8c84 <_init+0x170>
    97ac:	e24b3ff1 	sub	r3, fp, #964	; 0x3c4
    97b0:	e893000c 	ldm	r3, {r2, r3}
    97b4:	e51b00cc 	ldr	r0, [fp, #-204]	; 0xcc
    97b8:	eeb00b4d 	vmov.f64	d0, d13
    97bc:	eeb01b4c 	vmov.f64	d1, d12
    97c0:	eeb02b4b 	vmov.f64	d2, d11
    97c4:	eeb03b4a 	vmov.f64	d3, d10
    97c8:	eeb04b49 	vmov.f64	d4, d9
    97cc:	eeb05b48 	vmov.f64	d5, d8
    97d0:	eb001903 	bl	fbe4 <g_halMatlab_sendSigAllStates_bl>
    97d4:	e50b00d4 	str	r0, [fp, #-212]	; 0xd4
																		l_imuStates_st,
																		l_kalmanAngles_st,
																		l_compAngles_st);
					if ( l_sendState_bl != M_HAL_MATLAB_SUCCESS_UI8 )
    97d8:	e51b30d4 	ldr	r3, [fp, #-212]	; 0xd4
    97dc:	e3530000 	cmp	r3, #0
    97e0:	0a000002 	beq	97f0 <main+0x920>
					{
						printf("UDP-Packet error\n");
    97e4:	e59f08a0 	ldr	r0, [pc, #2208]	; a08c <main+0x11bc>
    97e8:	ebfffd49 	bl	8d14 <_init+0x200>
    97ec:	ea000001 	b	97f8 <main+0x928>
					}
					else
					{
						printf("Sent packet\n");
    97f0:	e59f07ac 	ldr	r0, [pc, #1964]	; 9fa4 <main+0x10d4>
    97f4:	ebfffd46 	bl	8d14 <_init+0x200>
					}
					usleep( 20000 ); //20ms = 50Hz
    97f8:	e59f0890 	ldr	r0, [pc, #2192]	; a090 <main+0x11c0>
    97fc:	ebfffcf9 	bl	8be8 <_init+0xd4>

				g_sigOri_initMatrices_bl();
				g_sigOri_initImuSensors_bl();

				int i = kbhit();
				while(i != 'q')
    9800:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xd0
    9804:	e3530071 	cmp	r3, #113	; 0x71
    9808:	1affffc0 	bne	9710 <main+0x840>
						printf("Sent packet\n");
					}
					usleep( 20000 ); //20ms = 50Hz
				}
				// close udp connection
				g_halMatlab_closeSocket_bl(l_udpSocket_i32);
    980c:	e51b00cc 	ldr	r0, [fp, #-204]	; 0xcc
    9810:	eb0017c9 	bl	f73c <g_halMatlab_closeSocket_bl>
				break;
    9814:	e1a00000 	nop			; (mov r0, r0)
    9818:	ea00063b 	b	b10c <main+0x223c>
			}
			case TESTACCMAG:
			{
				halAccmag_dataContainer l_sensorData_st;
				printf("IMU Acceleration and Compass Test\n");
    981c:	e59f0784 	ldr	r0, [pc, #1924]	; 9fa8 <main+0x10d8>
    9820:	ebfffd3b 	bl	8d14 <_init+0x200>
				if ( g_halAccmag_initSensor_bl() != M_HAL_ACCMAG_SUCCESS_BL )
    9824:	eb000fa0 	bl	d6ac <g_halAccmag_initSensor_bl>
    9828:	e1a03000 	mov	r3, r0
    982c:	e3530000 	cmp	r3, #0
    9830:	0a000003 	beq	9844 <main+0x974>
				{
					printf( "Init failed!\n" );
    9834:	e59f0770 	ldr	r0, [pc, #1904]	; 9fac <main+0x10dc>
    9838:	ebfffd35 	bl	8d14 <_init+0x200>
					return 1;
    983c:	e3a0a001 	mov	sl, #1
    9840:	ea00002e 	b	9900 <main+0xa30>
				}

				int i = kbhit();
    9844:	eb0006ec 	bl	b3fc <kbhit>
    9848:	e50b00d8 	str	r0, [fp, #-216]	; 0xd8
				while(i != 'q')
    984c:	ea000027 	b	98f0 <main+0xa20>
				{
					if ( g_halAccmag_triggerAccUpdate_bl() != M_HAL_ACCMAG_SUCCESS_BL )
    9850:	eb000fbd 	bl	d74c <g_halAccmag_triggerAccUpdate_bl>
    9854:	e1a03000 	mov	r3, r0
    9858:	e3530000 	cmp	r3, #0
    985c:	0a000003 	beq	9870 <main+0x9a0>
					{
						printf( "ACC update failed!\n" );
    9860:	e59f0748 	ldr	r0, [pc, #1864]	; 9fb0 <main+0x10e0>
    9864:	ebfffd2a 	bl	8d14 <_init+0x200>
						return 1;
    9868:	e3a0a001 	mov	sl, #1
    986c:	ea000023 	b	9900 <main+0xa30>
					}
					if ( g_halAccmag_triggerMagUpdate_bl() != M_HAL_ACCMAG_SUCCESS_BL )
    9870:	eb000fbc 	bl	d768 <g_halAccmag_triggerMagUpdate_bl>
    9874:	e1a03000 	mov	r3, r0
    9878:	e3530000 	cmp	r3, #0
    987c:	0a000003 	beq	9890 <main+0x9c0>
					{
						printf( "MAG update failed!\n" );
    9880:	e59f072c 	ldr	r0, [pc, #1836]	; 9fb4 <main+0x10e4>
    9884:	ebfffd22 	bl	8d14 <_init+0x200>
						return 1;
    9888:	e3a0a001 	mov	sl, #1
    988c:	ea00001b 	b	9900 <main+0xa30>
					}

					l_sensorData_st = g_halAccmag_getAccMagContainer_st();
    9890:	e24b3ff1 	sub	r3, fp, #964	; 0x3c4
    9894:	e1a00003 	mov	r0, r3
    9898:	eb000fec 	bl	d850 <g_halAccmag_getAccMagContainer_st>

					printf("Acc - x:%f y:%lf z:%f | Mag - x:%.10f y:%.10f z:%.10f\n",
    989c:	ed1b7bf1 	vldr	d7, [fp, #-964]	; 0xfffffc3c
    98a0:	e24b9fef 	sub	r9, fp, #956	; 0x3bc
    98a4:	e1c980d0 	ldrd	r8, [r9]
    98a8:	e24b7fed 	sub	r7, fp, #948	; 0x3b4
    98ac:	e1c760d0 	ldrd	r6, [r7]
    98b0:	e24b5feb 	sub	r5, fp, #940	; 0x3ac
    98b4:	e1c540d0 	ldrd	r4, [r5]
    98b8:	e24b1fe9 	sub	r1, fp, #932	; 0x3a4
    98bc:	e1c100d0 	ldrd	r0, [r1]
    98c0:	e24b3fe7 	sub	r3, fp, #924	; 0x39c
    98c4:	e1c320d0 	ldrd	r2, [r3]
    98c8:	e1cd80f0 	strd	r8, [sp]
    98cc:	e1cd60f8 	strd	r6, [sp, #8]
    98d0:	e1cd41f0 	strd	r4, [sp, #16]
    98d4:	e1cd01f8 	strd	r0, [sp, #24]
    98d8:	e1cd22f0 	strd	r2, [sp, #32]
    98dc:	e59f06d4 	ldr	r0, [pc, #1748]	; 9fb8 <main+0x10e8>
    98e0:	ec532b17 	vmov	r2, r3, d7
    98e4:	ebfffcef 	bl	8ca8 <_init+0x194>
							l_sensorData_st.mag.x_f64,
							l_sensorData_st.mag.y_f64,
							l_sensorData_st.mag.z_f64
							);

					usleep( 250000 );
    98e8:	e59f06cc 	ldr	r0, [pc, #1740]	; 9fbc <main+0x10ec>
    98ec:	ebfffcbd 	bl	8be8 <_init+0xd4>
					printf( "Init failed!\n" );
					return 1;
				}

				int i = kbhit();
				while(i != 'q')
    98f0:	e51b30d8 	ldr	r3, [fp, #-216]	; 0xd8
    98f4:	e3530071 	cmp	r3, #113	; 0x71
    98f8:	1affffd4 	bne	9850 <main+0x980>
    98fc:	ea000602 	b	b10c <main+0x223c>
    9900:	e3a03000 	mov	r3, #0
    9904:	ea000601 	b	b110 <main+0x2240>
				}
				break;
			}
			case TESTBARO:
			{
				double pressure=0;
    9908:	e3a02000 	mov	r2, #0
    990c:	e3a03000 	mov	r3, #0
    9910:	e14b2ef4 	strd	r2, [fp, #-228]	; 0xffffff1c
				double temp=0;
    9914:	e3a02000 	mov	r2, #0
    9918:	e3a03000 	mov	r3, #0
    991c:	e14b2efc 	strd	r2, [fp, #-236]	; 0xffffff14
				sigOri_orientationAngles GyroValues;
				double Gyrotemp=0;
    9920:	e3a02000 	mov	r2, #0
    9924:	e3a03000 	mov	r3, #0
    9928:	e14b2ff4 	strd	r2, [fp, #-244]	; 0xffffff0c
				g_halBaro_initBaro_i32();
    992c:	eb000fd9 	bl	d898 <g_halBaro_initBaro_i32>
				g_halGyro_initGyro_i32();
    9930:	eb0010be 	bl	dc30 <g_halGyro_initGyro_i32>
				printf("IMU Barometer pressure test");
    9934:	e59f0684 	ldr	r0, [pc, #1668]	; 9fc0 <main+0x10f0>
    9938:	ebfffcda 	bl	8ca8 <_init+0x194>
				int i = kbhit();
    993c:	eb0006ae 	bl	b3fc <kbhit>
    9940:	e50b00f8 	str	r0, [fp, #-248]	; 0xf8
				while(i != 'q')
    9944:	ea00002d 	b	9a00 <main+0xb30>
				{
					g_halBaro_readPressureFromI2C_i32();
    9948:	eb001010 	bl	d990 <g_halBaro_readPressureFromI2C_i32>
					usleep(100000);
    994c:	e59f0670 	ldr	r0, [pc, #1648]	; 9fc4 <main+0x10f4>
    9950:	ebfffca4 	bl	8be8 <_init+0xd4>
					g_halBaro_readTemperatureFromI2C_i32();
    9954:	eb001060 	bl	dadc <g_halBaro_readTemperatureFromI2C_i32>
					usleep(100000);
    9958:	e59f0664 	ldr	r0, [pc, #1636]	; 9fc4 <main+0x10f4>
    995c:	ebfffca1 	bl	8be8 <_init+0xd4>
					pressure=g_halBaro_getPressure_f64();
    9960:	eb000ff6 	bl	d940 <g_halBaro_getPressure_f64>
    9964:	ed0b0b39 	vstr	d0, [fp, #-228]	; 0xffffff1c
					temp=g_halBaro_getTemperature_f64();
    9968:	eb000ffe 	bl	d968 <g_halBaro_getTemperature_f64>
    996c:	ed0b0b3b 	vstr	d0, [fp, #-236]	; 0xffffff14
					printf("Pressure: %5.3f    ;    Temperature:  %5.3f\n",pressure,temp);
    9970:	e14b2edc 	ldrd	r2, [fp, #-236]	; 0xffffff14
    9974:	e1cd20f0 	strd	r2, [sp]
    9978:	e59f05f0 	ldr	r0, [pc, #1520]	; 9f70 <main+0x10a0>
    997c:	e14b2ed4 	ldrd	r2, [fp, #-228]	; 0xffffff1c
    9980:	ebfffcc8 	bl	8ca8 <_init+0x194>
					usleep(100000);
    9984:	e59f0638 	ldr	r0, [pc, #1592]	; 9fc4 <main+0x10f4>
    9988:	ebfffc96 	bl	8be8 <_init+0xd4>


					g_halGyro_readGyroscopeFromI2C_i32();
    998c:	eb0010f1 	bl	dd58 <g_halGyro_readGyroscopeFromI2C_i32>
					usleep(100000);
    9990:	e59f062c 	ldr	r0, [pc, #1580]	; 9fc4 <main+0x10f4>
    9994:	ebfffc93 	bl	8be8 <_init+0xd4>
					g_halGyro_readTemperatureFromI2C_i32();
    9998:	eb001191 	bl	dfe4 <g_halGyro_readTemperatureFromI2C_i32>
					usleep(100000);
    999c:	e59f0620 	ldr	r0, [pc, #1568]	; 9fc4 <main+0x10f4>
    99a0:	ebfffc90 	bl	8be8 <_init+0xd4>
					GyroValues=g_halGyro_getGyroscope_st();
    99a4:	eb0010cb 	bl	dcd8 <g_halGyro_getGyroscope_st>
    99a8:	eeb05b40 	vmov.f64	d5, d0
    99ac:	eeb06b41 	vmov.f64	d6, d1
    99b0:	eeb07b42 	vmov.f64	d7, d2
    99b4:	ed0b5b83 	vstr	d5, [fp, #-524]	; 0xfffffdf4
    99b8:	ed0b6b81 	vstr	d6, [fp, #-516]	; 0xfffffdfc
    99bc:	ed0b7b7f 	vstr	d7, [fp, #-508]	; 0xfffffe04
					Gyrotemp=g_halGyro_getTemperature_f64();
    99c0:	eb0010da 	bl	dd30 <g_halGyro_getTemperature_f64>
    99c4:	ed0b0b3d 	vstr	d0, [fp, #-244]	; 0xffffff0c
					printf("roll: %5.3f    ;    pitch:  %5.3f    ;    yaw:  %5.3f\n",GyroValues.roll_f64, GyroValues.pitch_f64, GyroValues.yaw_f64);
    99c8:	e24b5f83 	sub	r5, fp, #524	; 0x20c
    99cc:	e1c540d0 	ldrd	r4, [r5]
    99d0:	e24b1f81 	sub	r1, fp, #516	; 0x204
    99d4:	e1c100d0 	ldrd	r0, [r1]
    99d8:	e24b3f7f 	sub	r3, fp, #508	; 0x1fc
    99dc:	e1c320d0 	ldrd	r2, [r3]
    99e0:	e1cd00f0 	strd	r0, [sp]
    99e4:	e1cd20f8 	strd	r2, [sp, #8]
    99e8:	e59f0584 	ldr	r0, [pc, #1412]	; 9f74 <main+0x10a4>
    99ec:	e1a02004 	mov	r2, r4
    99f0:	e1a03005 	mov	r3, r5
    99f4:	ebfffcab 	bl	8ca8 <_init+0x194>
					usleep(100000);
    99f8:	e59f05c4 	ldr	r0, [pc, #1476]	; 9fc4 <main+0x10f4>
    99fc:	ebfffc79 	bl	8be8 <_init+0xd4>
				double Gyrotemp=0;
				g_halBaro_initBaro_i32();
				g_halGyro_initGyro_i32();
				printf("IMU Barometer pressure test");
				int i = kbhit();
				while(i != 'q')
    9a00:	e51b30f8 	ldr	r3, [fp, #-248]	; 0xf8
    9a04:	e3530071 	cmp	r3, #113	; 0x71
    9a08:	1affffce 	bne	9948 <main+0xa78>
					GyroValues=g_halGyro_getGyroscope_st();
					Gyrotemp=g_halGyro_getTemperature_f64();
					printf("roll: %5.3f    ;    pitch:  %5.3f    ;    yaw:  %5.3f\n",GyroValues.roll_f64, GyroValues.pitch_f64, GyroValues.yaw_f64);
					usleep(100000);
				}
				break;
    9a0c:	e1a00000 	nop			; (mov r0, r0)
    9a10:	ea0005bd 	b	b10c <main+0x223c>
			}
			case TESTGYRO:
			{
				double pressure=0;
    9a14:	e3a02000 	mov	r2, #0
    9a18:	e3a03000 	mov	r3, #0
    9a1c:	e50b2104 	str	r2, [fp, #-260]	; 0x104
    9a20:	e50b3100 	str	r3, [fp, #-256]	; 0x100
				double temp=0;
    9a24:	e3a02000 	mov	r2, #0
    9a28:	e3a03000 	mov	r3, #0
    9a2c:	e50b210c 	str	r2, [fp, #-268]	; 0x10c
    9a30:	e50b3108 	str	r3, [fp, #-264]	; 0x108
				sigOri_orientationAngles GyroValues;
				double Gyrotemp=0;
    9a34:	e3a02000 	mov	r2, #0
    9a38:	e3a03000 	mov	r3, #0
    9a3c:	e50b2114 	str	r2, [fp, #-276]	; 0x114
    9a40:	e50b3110 	str	r3, [fp, #-272]	; 0x110
				printf("IMU Gyroscope test\n");
    9a44:	e59f057c 	ldr	r0, [pc, #1404]	; 9fc8 <main+0x10f8>
    9a48:	ebfffcb1 	bl	8d14 <_init+0x200>
				g_halBaro_initBaro_i32();
    9a4c:	eb000f91 	bl	d898 <g_halBaro_initBaro_i32>
				g_halGyro_initGyro_i32();
    9a50:	eb001076 	bl	dc30 <g_halGyro_initGyro_i32>
				int i = kbhit();
    9a54:	eb000668 	bl	b3fc <kbhit>
    9a58:	e50b0118 	str	r0, [fp, #-280]	; 0x118
				while(i != 'q')
    9a5c:	ea000023 	b	9af0 <main+0xc20>
				{
					g_halBaro_readPressureFromI2C_i32();
    9a60:	eb000fca 	bl	d990 <g_halBaro_readPressureFromI2C_i32>
					//usleep(100000);
					g_halBaro_readTemperatureFromI2C_i32();
    9a64:	eb00101c 	bl	dadc <g_halBaro_readTemperatureFromI2C_i32>
					//usleep(100000);
					pressure=g_halBaro_getPressure_f64();
    9a68:	eb000fb4 	bl	d940 <g_halBaro_getPressure_f64>
    9a6c:	ed0b0b41 	vstr	d0, [fp, #-260]	; 0xfffffefc
					temp=g_halBaro_getTemperature_f64();
    9a70:	eb000fbc 	bl	d968 <g_halBaro_getTemperature_f64>
    9a74:	ed0b0b43 	vstr	d0, [fp, #-268]	; 0xfffffef4
					printf("Pressure: %5.3f    ;    Temperature:  %5.3f\n",pressure,temp);
    9a78:	e24b3f43 	sub	r3, fp, #268	; 0x10c
    9a7c:	e1c320d0 	ldrd	r2, [r3]
    9a80:	e1cd20f0 	strd	r2, [sp]
    9a84:	e59f04e4 	ldr	r0, [pc, #1252]	; 9f70 <main+0x10a0>
    9a88:	e24b3f41 	sub	r3, fp, #260	; 0x104
    9a8c:	e1c320d0 	ldrd	r2, [r3]
    9a90:	ebfffc84 	bl	8ca8 <_init+0x194>
					//usleep(100000);
					g_halGyro_readGyroscopeFromI2C_i32();
    9a94:	eb0010af 	bl	dd58 <g_halGyro_readGyroscopeFromI2C_i32>
					//usleep(100000);
					g_halGyro_readTemperatureFromI2C_i32();
    9a98:	eb001151 	bl	dfe4 <g_halGyro_readTemperatureFromI2C_i32>
					//usleep(100000);
					GyroValues=g_halGyro_getGyroscope_st();
    9a9c:	eb00108d 	bl	dcd8 <g_halGyro_getGyroscope_st>
    9aa0:	eeb05b40 	vmov.f64	d5, d0
    9aa4:	eeb06b41 	vmov.f64	d6, d1
    9aa8:	eeb07b42 	vmov.f64	d7, d2
    9aac:	ed0b5b89 	vstr	d5, [fp, #-548]	; 0xfffffddc
    9ab0:	ed0b6b87 	vstr	d6, [fp, #-540]	; 0xfffffde4
    9ab4:	ed0b7b85 	vstr	d7, [fp, #-532]	; 0xfffffdec
					Gyrotemp=g_halGyro_getTemperature_f64();
    9ab8:	eb00109c 	bl	dd30 <g_halGyro_getTemperature_f64>
    9abc:	ed0b0b45 	vstr	d0, [fp, #-276]	; 0xfffffeec
					printf("roll: %5.3f    ;    pitch:  %5.3f    ;    yaw:  %5.3f\n",GyroValues.roll_f64, GyroValues.pitch_f64, GyroValues.yaw_f64);
    9ac0:	e24b5f89 	sub	r5, fp, #548	; 0x224
    9ac4:	e1c540d0 	ldrd	r4, [r5]
    9ac8:	e24b1f87 	sub	r1, fp, #540	; 0x21c
    9acc:	e1c100d0 	ldrd	r0, [r1]
    9ad0:	e24b3f85 	sub	r3, fp, #532	; 0x214
    9ad4:	e1c320d0 	ldrd	r2, [r3]
    9ad8:	e1cd00f0 	strd	r0, [sp]
    9adc:	e1cd20f8 	strd	r2, [sp, #8]
    9ae0:	e59f048c 	ldr	r0, [pc, #1164]	; 9f74 <main+0x10a4>
    9ae4:	e1a02004 	mov	r2, r4
    9ae8:	e1a03005 	mov	r3, r5
    9aec:	ebfffc6d 	bl	8ca8 <_init+0x194>
				double Gyrotemp=0;
				printf("IMU Gyroscope test\n");
				g_halBaro_initBaro_i32();
				g_halGyro_initGyro_i32();
				int i = kbhit();
				while(i != 'q')
    9af0:	e51b3118 	ldr	r3, [fp, #-280]	; 0x118
    9af4:	e3530071 	cmp	r3, #113	; 0x71
    9af8:	1affffd8 	bne	9a60 <main+0xb90>
					GyroValues=g_halGyro_getGyroscope_st();
					Gyrotemp=g_halGyro_getTemperature_f64();
					printf("roll: %5.3f    ;    pitch:  %5.3f    ;    yaw:  %5.3f\n",GyroValues.roll_f64, GyroValues.pitch_f64, GyroValues.yaw_f64);
					//usleep(100000);
				}
				break;
    9afc:	e1a00000 	nop			; (mov r0, r0)
    9b00:	ea000581 	b	b10c <main+0x223c>
				//static	double l_MatrixA_f64[1][3]={{1,2,9}};
				static	double l_MatrixB_f64[3][3]={{3,6,7},{2,5,9},{4,6,8}};
				//static	double l_MatrixB_f64[3][2]={{3,6},{2,5},{4,6}};
				static	double l_outputMatrix_f64[3][3]={{0,0,0},{0,0,0},{0,0,0}};
				//static	double l_outputMatrix_f64[3][2]={{0,0},{0,0},{0,0}};
				printf("matrix lib function test\n");
    9b04:	e59f04c0 	ldr	r0, [pc, #1216]	; 9fcc <main+0x10fc>
    9b08:	ebfffc81 	bl	8d14 <_init+0x200>
				int i = kbhit();
    9b0c:	eb00063a 	bl	b3fc <kbhit>
    9b10:	e50b011c 	str	r0, [fp, #-284]	; 0x11c
				while(i != 'q')
    9b14:	ea00004c 	b	9c4c <main+0xd7c>
				{
					g_sigMath_matrixEye_bl((double*)l_outputMatrix_f64,3,3);
    9b18:	e59f04b0 	ldr	r0, [pc, #1200]	; 9fd0 <main+0x1100>
    9b1c:	e3a01003 	mov	r1, #3
    9b20:	e3a02003 	mov	r2, #3
    9b24:	eb001c9a 	bl	10d94 <g_sigMath_matrixEye_bl>
					sleep(1);
    9b28:	e3a00001 	mov	r0, #1
    9b2c:	ebfffc75 	bl	8d08 <_init+0x1f4>
					g_sigMath_matrixInitialize_bl((double*)l_outputMatrix_f64,3,3,1);
    9b30:	e59f0498 	ldr	r0, [pc, #1176]	; 9fd0 <main+0x1100>
    9b34:	e3a01003 	mov	r1, #3
    9b38:	e3a02003 	mov	r2, #3
    9b3c:	ed9f0bed 	vldr	d0, [pc, #948]	; 9ef8 <main+0x1028>
    9b40:	eb001c66 	bl	10ce0 <g_sigMath_matrixInitialize_bl>
					sleep(1);
    9b44:	e3a00001 	mov	r0, #1
    9b48:	ebfffc6e 	bl	8d08 <_init+0x1f4>
					g_sigMath_matrixMultiplikation_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3,(double*)l_MatrixB_f64,3,3);
    9b4c:	e59f3480 	ldr	r3, [pc, #1152]	; 9fd4 <main+0x1104>
    9b50:	e58d3000 	str	r3, [sp]
    9b54:	e3a03003 	mov	r3, #3
    9b58:	e58d3004 	str	r3, [sp, #4]
    9b5c:	e3a03003 	mov	r3, #3
    9b60:	e58d3008 	str	r3, [sp, #8]
    9b64:	e59f0464 	ldr	r0, [pc, #1124]	; 9fd0 <main+0x1100>
    9b68:	e59f1468 	ldr	r1, [pc, #1128]	; 9fd8 <main+0x1108>
    9b6c:	e3a02003 	mov	r2, #3
    9b70:	e3a03003 	mov	r3, #3
    9b74:	eb0018e4 	bl	ff0c <g_sigMath_matrixMultiplikation_bl>
					sleep(1);
    9b78:	e3a00001 	mov	r0, #1
    9b7c:	ebfffc61 	bl	8d08 <_init+0x1f4>
					g_sigMath_matrixAddition_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3,(double*)l_MatrixB_f64,3,3);
    9b80:	e59f344c 	ldr	r3, [pc, #1100]	; 9fd4 <main+0x1104>
    9b84:	e58d3000 	str	r3, [sp]
    9b88:	e3a03003 	mov	r3, #3
    9b8c:	e58d3004 	str	r3, [sp, #4]
    9b90:	e3a03003 	mov	r3, #3
    9b94:	e58d3008 	str	r3, [sp, #8]
    9b98:	e59f0430 	ldr	r0, [pc, #1072]	; 9fd0 <main+0x1100>
    9b9c:	e59f1434 	ldr	r1, [pc, #1076]	; 9fd8 <main+0x1108>
    9ba0:	e3a02003 	mov	r2, #3
    9ba4:	e3a03003 	mov	r3, #3
    9ba8:	eb001934 	bl	10080 <g_sigMath_matrixAddition_bl>
					sleep(1);
    9bac:	e3a00001 	mov	r0, #1
    9bb0:	ebfffc54 	bl	8d08 <_init+0x1f4>
					g_sigMath_matrixSubtraktion_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3,(double*)l_MatrixB_f64,3,3);
    9bb4:	e59f3418 	ldr	r3, [pc, #1048]	; 9fd4 <main+0x1104>
    9bb8:	e58d3000 	str	r3, [sp]
    9bbc:	e3a03003 	mov	r3, #3
    9bc0:	e58d3004 	str	r3, [sp, #4]
    9bc4:	e3a03003 	mov	r3, #3
    9bc8:	e58d3008 	str	r3, [sp, #8]
    9bcc:	e59f03fc 	ldr	r0, [pc, #1020]	; 9fd0 <main+0x1100>
    9bd0:	e59f1400 	ldr	r1, [pc, #1024]	; 9fd8 <main+0x1108>
    9bd4:	e3a02003 	mov	r2, #3
    9bd8:	e3a03003 	mov	r3, #3
    9bdc:	eb001972 	bl	101ac <g_sigMath_matrixSubtraktion_bl>
					sleep(1);
    9be0:	e3a00001 	mov	r0, #1
    9be4:	ebfffc47 	bl	8d08 <_init+0x1f4>
					g_sigMath_matrixAssignment_bl((double*)l_outputMatrix_f64,3,3,(double*)l_MatrixA_f64,3,3);
    9be8:	e3a03003 	mov	r3, #3
    9bec:	e58d3000 	str	r3, [sp]
    9bf0:	e3a03003 	mov	r3, #3
    9bf4:	e58d3004 	str	r3, [sp, #4]
    9bf8:	e59f03d0 	ldr	r0, [pc, #976]	; 9fd0 <main+0x1100>
    9bfc:	e3a01003 	mov	r1, #3
    9c00:	e3a02003 	mov	r2, #3
    9c04:	e59f33cc 	ldr	r3, [pc, #972]	; 9fd8 <main+0x1108>
    9c08:	eb001bf5 	bl	10be4 <g_sigMath_matrixAssignment_bl>
					sleep(1);
    9c0c:	e3a00001 	mov	r0, #1
    9c10:	ebfffc3c 	bl	8d08 <_init+0x1f4>
					g_sigMath_matrixTransponiert_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3);
    9c14:	e59f03b4 	ldr	r0, [pc, #948]	; 9fd0 <main+0x1100>
    9c18:	e59f13b8 	ldr	r1, [pc, #952]	; 9fd8 <main+0x1108>
    9c1c:	e3a02003 	mov	r2, #3
    9c20:	e3a03003 	mov	r3, #3
    9c24:	eb0019ab 	bl	102d8 <g_sigMath_matrixTransponiert_bl>
					sleep(1);
    9c28:	e3a00001 	mov	r0, #1
    9c2c:	ebfffc35 	bl	8d08 <_init+0x1f4>
					g_sigMath_matrixInverse_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3);
    9c30:	e59f0398 	ldr	r0, [pc, #920]	; 9fd0 <main+0x1100>
    9c34:	e59f139c 	ldr	r1, [pc, #924]	; 9fd8 <main+0x1108>
    9c38:	e3a02003 	mov	r2, #3
    9c3c:	e3a03003 	mov	r3, #3
    9c40:	eb0019d9 	bl	103ac <g_sigMath_matrixInverse_bl>
					sleep(1);
    9c44:	e3a00001 	mov	r0, #1
    9c48:	ebfffc2e 	bl	8d08 <_init+0x1f4>
				//static	double l_MatrixB_f64[3][2]={{3,6},{2,5},{4,6}};
				static	double l_outputMatrix_f64[3][3]={{0,0,0},{0,0,0},{0,0,0}};
				//static	double l_outputMatrix_f64[3][2]={{0,0},{0,0},{0,0}};
				printf("matrix lib function test\n");
				int i = kbhit();
				while(i != 'q')
    9c4c:	e51b311c 	ldr	r3, [fp, #-284]	; 0x11c
    9c50:	e3530071 	cmp	r3, #113	; 0x71
    9c54:	1affffaf 	bne	9b18 <main+0xc48>
					g_sigMath_matrixTransponiert_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3);
					sleep(1);
					g_sigMath_matrixInverse_bl((double*)l_outputMatrix_f64,(double*)l_MatrixA_f64,3,3);
					sleep(1);
				}
				break;
    9c58:	ea00052b 	b	b10c <main+0x223c>
			}
			case TESTUDP:
			{
				printf("simple send udp test...");
    9c5c:	e59f0378 	ldr	r0, [pc, #888]	; 9fdc <main+0x110c>
    9c60:	ebfffc10 	bl	8ca8 <_init+0x194>
				int clientSocket;
				char message[20] = "Hello\n";
    9c64:	e59f2374 	ldr	r2, [pc, #884]	; 9fe0 <main+0x1110>
    9c68:	e24b3f8e 	sub	r3, fp, #568	; 0x238
    9c6c:	e8920003 	ldm	r2, {r0, r1}
    9c70:	e5830000 	str	r0, [r3]
    9c74:	e2833004 	add	r3, r3, #4
    9c78:	e1c310b0 	strh	r1, [r3]
    9c7c:	e2833002 	add	r3, r3, #2
    9c80:	e1a02821 	lsr	r2, r1, #16
    9c84:	e5c32000 	strb	r2, [r3]
    9c88:	e24b3e23 	sub	r3, fp, #560	; 0x230
    9c8c:	e2433001 	sub	r3, r3, #1
    9c90:	e3a02000 	mov	r2, #0
    9c94:	e5c32000 	strb	r2, [r3]
    9c98:	e2833001 	add	r3, r3, #1
    9c9c:	e3a02000 	mov	r2, #0
    9ca0:	e5c32000 	strb	r2, [r3]
    9ca4:	e2833001 	add	r3, r3, #1
    9ca8:	e3a02000 	mov	r2, #0
    9cac:	e5c32000 	strb	r2, [r3]
    9cb0:	e2833001 	add	r3, r3, #1
    9cb4:	e3a02000 	mov	r2, #0
    9cb8:	e5c32000 	strb	r2, [r3]
    9cbc:	e2833001 	add	r3, r3, #1
    9cc0:	e3a02000 	mov	r2, #0
    9cc4:	e5c32000 	strb	r2, [r3]
    9cc8:	e2833001 	add	r3, r3, #1
    9ccc:	e3a02000 	mov	r2, #0
    9cd0:	e5c32000 	strb	r2, [r3]
    9cd4:	e2833001 	add	r3, r3, #1
    9cd8:	e3a02000 	mov	r2, #0
    9cdc:	e5c32000 	strb	r2, [r3]
    9ce0:	e2833001 	add	r3, r3, #1
    9ce4:	e3a02000 	mov	r2, #0
    9ce8:	e5c32000 	strb	r2, [r3]
    9cec:	e2833001 	add	r3, r3, #1
    9cf0:	e3a02000 	mov	r2, #0
    9cf4:	e5c32000 	strb	r2, [r3]
    9cf8:	e2833001 	add	r3, r3, #1
    9cfc:	e3a02000 	mov	r2, #0
    9d00:	e5c32000 	strb	r2, [r3]
    9d04:	e2833001 	add	r3, r3, #1
    9d08:	e3a02000 	mov	r2, #0
    9d0c:	e5c32000 	strb	r2, [r3]
    9d10:	e2833001 	add	r3, r3, #1
    9d14:	e3a02000 	mov	r2, #0
    9d18:	e5c32000 	strb	r2, [r3]
    9d1c:	e2833001 	add	r3, r3, #1
    9d20:	e3a02000 	mov	r2, #0
    9d24:	e5c32000 	strb	r2, [r3]
    9d28:	e2833001 	add	r3, r3, #1
				struct sockaddr_in serverAddress;
				socklen_t addressSize;

				/*Create UDP socket*/
				clientSocket = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);
    9d2c:	e3a00002 	mov	r0, #2
    9d30:	e3a01002 	mov	r1, #2
    9d34:	e3a02011 	mov	r2, #17
    9d38:	ebfffbc5 	bl	8c54 <_init+0x140>
    9d3c:	e50b0120 	str	r0, [fp, #-288]	; 0x120

				serverAddress.sin_family = PF_INET;
    9d40:	e59f329c 	ldr	r3, [pc, #668]	; 9fe4 <main+0x1114>
    9d44:	e3a02002 	mov	r2, #2
    9d48:	e24b1054 	sub	r1, fp, #84	; 0x54
    9d4c:	e18120b3 	strh	r2, [r1, r3]
				serverAddress.sin_port = htons(REMOTE_PORT);
    9d50:	e59f0300 	ldr	r0, [pc, #768]	; a058 <main+0x1188>
    9d54:	ebfffb97 	bl	8bb8 <_init+0xa4>
    9d58:	e1a03000 	mov	r3, r0
    9d5c:	e1a02003 	mov	r2, r3
    9d60:	e59f3280 	ldr	r3, [pc, #640]	; 9fe8 <main+0x1118>
    9d64:	e24b0054 	sub	r0, fp, #84	; 0x54
    9d68:	e18020b3 	strh	r2, [r0, r3]
				serverAddress.sin_addr.s_addr = inet_addr(REMOTE_ADDR);
    9d6c:	e59f02b4 	ldr	r0, [pc, #692]	; a028 <main+0x1158>
    9d70:	ebfffb81 	bl	8b7c <_init+0x68>
    9d74:	e1a03000 	mov	r3, r0
    9d78:	e50b3244 	str	r3, [fp, #-580]	; 0x244

				memset(serverAddress.sin_zero, '\0', sizeof(serverAddress.sin_zero));
    9d7c:	e24b3f92 	sub	r3, fp, #584	; 0x248
    9d80:	e2833008 	add	r3, r3, #8
    9d84:	e1a00003 	mov	r0, r3
    9d88:	e3a01000 	mov	r1, #0
    9d8c:	e3a02008 	mov	r2, #8
    9d90:	ebfffb8e 	bl	8bd0 <_init+0xbc>

				/*Initialize size variable to be used later on*/
				addressSize = sizeof(serverAddress);
    9d94:	e3a03010 	mov	r3, #16
    9d98:	e50b3124 	str	r3, [fp, #-292]	; 0x124

				printf("Start Sending Messages\n");
    9d9c:	e59f0248 	ldr	r0, [pc, #584]	; 9fec <main+0x111c>
    9da0:	ebfffbdb 	bl	8d14 <_init+0x200>

				int i = kbhit();
    9da4:	eb000594 	bl	b3fc <kbhit>
    9da8:	e50b0128 	str	r0, [fp, #-296]	; 0x128
				while(i != 'q')
    9dac:	ea00000d 	b	9de8 <main+0xf18>
				{
					sleep(1);
    9db0:	e3a00001 	mov	r0, #1
    9db4:	ebfffbd3 	bl	8d08 <_init+0x1f4>
					/* Send N bytes of BUF on socket FD to peer at address ADDR (which is
					   ADDR_LEN bytes long).  Returns the number sent, or -1 for errors.

					   This function is a cancellation point and therefore not marked with
					   __THROW.  */
					sendto(clientSocket, message, sizeof(message), 0,
    9db8:	e24b3f8e 	sub	r3, fp, #568	; 0x238
    9dbc:	e24b2f92 	sub	r2, fp, #584	; 0x248
    9dc0:	e58d2000 	str	r2, [sp]
    9dc4:	e51b2124 	ldr	r2, [fp, #-292]	; 0x124
    9dc8:	e58d2004 	str	r2, [sp, #4]
    9dcc:	e51b0120 	ldr	r0, [fp, #-288]	; 0x120
    9dd0:	e1a01003 	mov	r1, r3
    9dd4:	e3a02014 	mov	r2, #20
    9dd8:	e3a03000 	mov	r3, #0
    9ddc:	ebfffb72 	bl	8bac <_init+0x98>
							(struct sockaddr *)&serverAddress,addressSize);
					printf("And send again....\n");
    9de0:	e59f0208 	ldr	r0, [pc, #520]	; 9ff0 <main+0x1120>
    9de4:	ebfffbca 	bl	8d14 <_init+0x200>
				addressSize = sizeof(serverAddress);

				printf("Start Sending Messages\n");

				int i = kbhit();
				while(i != 'q')
    9de8:	e51b3128 	ldr	r3, [fp, #-296]	; 0x128
    9dec:	e3530071 	cmp	r3, #113	; 0x71
    9df0:	1affffee 	bne	9db0 <main+0xee0>
					   __THROW.  */
					sendto(clientSocket, message, sizeof(message), 0,
							(struct sockaddr *)&serverAddress,addressSize);
					printf("And send again....\n");
				}
				break;
    9df4:	e1a00000 	nop			; (mov r0, r0)
    9df8:	ea0004c3 	b	b10c <main+0x223c>


				struct timespec					l_timestamp_st;


				printf("Starting Transfer matlab data on udp test\n");
    9dfc:	e59f01f0 	ldr	r0, [pc, #496]	; 9ff4 <main+0x1124>
    9e00:	ebfffbc3 	bl	8d14 <_init+0x200>

				int val=0;
    9e04:	e3a03000 	mov	r3, #0
    9e08:	e50b312c 	str	r3, [fp, #-300]	; 0x12c
				int socketclient = 0;
    9e0c:	e3a03000 	mov	r3, #0
    9e10:	e50b3130 	str	r3, [fp, #-304]	; 0x130
				struct sockaddr_in remoteaddress;

				remoteaddress.sin_family = PF_INET;
    9e14:	e59f31dc 	ldr	r3, [pc, #476]	; 9ff8 <main+0x1128>
    9e18:	e3a02002 	mov	r2, #2
    9e1c:	e24b1054 	sub	r1, fp, #84	; 0x54
    9e20:	e18120b3 	strh	r2, [r1, r3]
				remoteaddress.sin_port = htons(REMOTE_PORT);
    9e24:	e59f022c 	ldr	r0, [pc, #556]	; a058 <main+0x1188>
    9e28:	ebfffb62 	bl	8bb8 <_init+0xa4>
    9e2c:	e1a03000 	mov	r3, r0
    9e30:	e1a02003 	mov	r2, r3
    9e34:	e59f31c0 	ldr	r3, [pc, #448]	; 9ffc <main+0x112c>
    9e38:	e24b0054 	sub	r0, fp, #84	; 0x54
    9e3c:	e18020b3 	strh	r2, [r0, r3]

				(void)inet_aton(REMOTE_ADDR, &remoteaddress.sin_addr); //dot to integer and then host to network byte order
    9e40:	e24b3fa5 	sub	r3, fp, #660	; 0x294
    9e44:	e2833004 	add	r3, r3, #4
    9e48:	e59f01d8 	ldr	r0, [pc, #472]	; a028 <main+0x1158>
    9e4c:	e1a01003 	mov	r1, r3
    9e50:	ebfffb82 	bl	8c60 <_init+0x14c>

				socketclient = socket(PF_INET, SOCK_DGRAM, 0);
    9e54:	e3a00002 	mov	r0, #2
    9e58:	e3a01002 	mov	r1, #2
    9e5c:	e3a02000 	mov	r2, #0
    9e60:	ebfffb7b 	bl	8c54 <_init+0x140>
    9e64:	e50b0130 	str	r0, [fp, #-304]	; 0x130


				g_sigOri_initMatrices_bl();
    9e68:	eb001c81 	bl	11074 <g_sigOri_initMatrices_bl>
				g_sigOri_initImuSensors_bl();
    9e6c:	eb001c75 	bl	11048 <g_sigOri_initImuSensors_bl>

				int i = kbhit();
    9e70:	eb000561 	bl	b3fc <kbhit>
    9e74:	e50b0134 	str	r0, [fp, #-308]	; 0x134
				while(i != 'q')
    9e78:	ea000117 	b	a2dc <main+0x140c>
				{
					g_sigOri_calcKalmanOrientation_bl();
    9e7c:	eb001e64 	bl	11814 <g_sigOri_calcKalmanOrientation_bl>
					g_sigOri_calcComplementaryOrientation_bl();
    9e80:	eb001f3e 	bl	11b80 <g_sigOri_calcComplementaryOrientation_bl>

					l_kalmanAngles_st 	= g_sigOri_getAnglesKalman_bl();
    9e84:	eb001c3b 	bl	10f78 <g_sigOri_getAnglesKalman_bl>
    9e88:	eeb05b40 	vmov.f64	d5, d0
    9e8c:	eeb06b41 	vmov.f64	d6, d1
    9e90:	eeb07b42 	vmov.f64	d7, d2
    9e94:	ed0b5b99 	vstr	d5, [fp, #-612]	; 0xfffffd9c
    9e98:	ed0b6b97 	vstr	d6, [fp, #-604]	; 0xfffffda4
    9e9c:	ed0b7b95 	vstr	d7, [fp, #-596]	; 0xfffffdac
					l_compAngles_st		= g_sigOri_getAnglesComplementary_bl();
    9ea0:	eb001c00 	bl	10ea8 <g_sigOri_getAnglesComplementary_bl>
    9ea4:	eeb05b40 	vmov.f64	d5, d0
    9ea8:	eeb06b41 	vmov.f64	d6, d1
    9eac:	eeb07b42 	vmov.f64	d7, d2
    9eb0:	ed0b5b9f 	vstr	d5, [fp, #-636]	; 0xfffffd84
    9eb4:	ed0b6b9d 	vstr	d6, [fp, #-628]	; 0xfffffd8c
    9eb8:	ed0b7b9b 	vstr	d7, [fp, #-620]	; 0xfffffd94
					l_imuStates_st 		= g_halImu_getImuValues_str();
    9ebc:	e24b3e41 	sub	r3, fp, #1040	; 0x410
    9ec0:	e243300c 	sub	r3, r3, #12
    9ec4:	e1a00003 	mov	r0, r3
    9ec8:	eb0010f9 	bl	e2b4 <g_halImu_getImuValues_str>
					 *                Select 'Cross G++ Linker'->Libraries
					 *                and add the entry 'rt' to 'Libraries (-l)'
					 *
					 *       GCC on the commandline: simply add '-lrt' to your gcc options
					 */
					if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    9ecc:	e24b3fa1 	sub	r3, fp, #644	; 0x284
    9ed0:	e3a00000 	mov	r0, #0
    9ed4:	e1a01003 	mov	r1, r3
    9ed8:	ebfffb1e 	bl	8b58 <_init+0x44>
    9edc:	e1a03000 	mov	r3, r0
    9ee0:	e3530000 	cmp	r3, #0
    9ee4:	0a000070 	beq	a0ac <main+0x11dc>
					{
						return M_HAL_MATLAB_FAILED_UI8;
    9ee8:	e3a0a001 	mov	sl, #1
    9eec:	e3a03000 	mov	r3, #0
    9ef0:	ea000486 	b	b110 <main+0x2240>
    9ef4:	e1a00000 	nop			; (mov r0, r0)
    9ef8:	00000000 	.word	0x00000000
    9efc:	3ff00000 	.word	0x3ff00000
    9f00:	00012068 	.word	0x00012068
    9f04:	00012080 	.word	0x00012080
    9f08:	00012088 	.word	0x00012088
    9f0c:	00012094 	.word	0x00012094
    9f10:	0001209c 	.word	0x0001209c
    9f14:	000120a4 	.word	0x000120a4
    9f18:	000120b0 	.word	0x000120b0
    9f1c:	000120bc 	.word	0x000120bc
    9f20:	000120cc 	.word	0x000120cc
    9f24:	000120e0 	.word	0x000120e0
    9f28:	000120ec 	.word	0x000120ec
    9f2c:	000120f8 	.word	0x000120f8
    9f30:	00012104 	.word	0x00012104
    9f34:	00012114 	.word	0x00012114
    9f38:	0001211c 	.word	0x0001211c
    9f3c:	0001212c 	.word	0x0001212c
    9f40:	0001213c 	.word	0x0001213c
    9f44:	00012150 	.word	0x00012150
    9f48:	00012160 	.word	0x00012160
    9f4c:	00012170 	.word	0x00012170
    9f50:	00012180 	.word	0x00012180
    9f54:	00012188 	.word	0x00012188
    9f58:	0001219c 	.word	0x0001219c
    9f5c:	000121a4 	.word	0x000121a4
    9f60:	000121b4 	.word	0x000121b4
    9f64:	000121cc 	.word	0x000121cc
    9f68:	000121e8 	.word	0x000121e8
    9f6c:	000121fc 	.word	0x000121fc
    9f70:	00012210 	.word	0x00012210
    9f74:	00012240 	.word	0x00012240
    9f78:	00012278 	.word	0x00012278
    9f7c:	0001229c 	.word	0x0001229c
    9f80:	000122c4 	.word	0x000122c4
    9f84:	000122d8 	.word	0x000122d8
    9f88:	0007a120 	.word	0x0007a120
    9f8c:	000122ec 	.word	0x000122ec
    9f90:	00012300 	.word	0x00012300
    9f94:	00012310 	.word	0x00012310
    9f98:	0001232c 	.word	0x0001232c
    9f9c:	0001234c 	.word	0x0001234c
    9fa0:	00012374 	.word	0x00012374
    9fa4:	00012384 	.word	0x00012384
    9fa8:	00012390 	.word	0x00012390
    9fac:	000123b4 	.word	0x000123b4
    9fb0:	000123c4 	.word	0x000123c4
    9fb4:	000123d8 	.word	0x000123d8
    9fb8:	000123ec 	.word	0x000123ec
    9fbc:	0003d090 	.word	0x0003d090
    9fc0:	00012424 	.word	0x00012424
    9fc4:	000186a0 	.word	0x000186a0
    9fc8:	00012440 	.word	0x00012440
    9fcc:	00012454 	.word	0x00012454
    9fd0:	0001b690 	.word	0x0001b690
    9fd4:	0001b248 	.word	0x0001b248
    9fd8:	0001b200 	.word	0x0001b200
    9fdc:	00012470 	.word	0x00012470
    9fe0:	000128a4 	.word	0x000128a4
    9fe4:	fffffe0c 	.word	0xfffffe0c
    9fe8:	fffffe0e 	.word	0xfffffe0e
    9fec:	00012498 	.word	0x00012498
    9ff0:	000124b0 	.word	0x000124b0
    9ff4:	000124c4 	.word	0x000124c4
    9ff8:	fffffdc0 	.word	0xfffffdc0
    9ffc:	fffffdc2 	.word	0xfffffdc2
    a000:	0001251c 	.word	0x0001251c
    a004:	0001252c 	.word	0x0001252c
    a008:	0001253c 	.word	0x0001253c
    a00c:	00012558 	.word	0x00012558
    a010:	0001256c 	.word	0x0001256c
    a014:	0001257c 	.word	0x0001257c
    a018:	0001259c 	.word	0x0001259c
    a01c:	000125c4 	.word	0x000125c4
    a020:	fffffd48 	.word	0xfffffd48
    a024:	fffffd4a 	.word	0xfffffd4a
    a028:	00012488 	.word	0x00012488
    a02c:	000124f0 	.word	0x000124f0
    a030:	00012504 	.word	0x00012504
    a034:	000125f0 	.word	0x000125f0
    a038:	00012624 	.word	0x00012624
    a03c:	0001264c 	.word	0x0001264c
    a040:	0001267c 	.word	0x0001267c
    a044:	000126ac 	.word	0x000126ac
    a048:	0001b2a8 	.word	0x0001b2a8
    a04c:	0000c350 	.word	0x0000c350
    a050:	000126d4 	.word	0x000126d4
    a054:	000128b8 	.word	0x000128b8
    a058:	00001388 	.word	0x00001388
    a05c:	000126f8 	.word	0x000126f8
    a060:	00012704 	.word	0x00012704
    a064:	00012710 	.word	0x00012710
    a068:	0001271c 	.word	0x0001271c
    a06c:	00012728 	.word	0x00012728
    a070:	00012734 	.word	0x00012734
    a074:	00012740 	.word	0x00012740
    a078:	00012750 	.word	0x00012750
    a07c:	00012760 	.word	0x00012760
    a080:	00012770 	.word	0x00012770
    a084:	0001277c 	.word	0x0001277c
    a088:	00012788 	.word	0x00012788
    a08c:	00012338 	.word	0x00012338
    a090:	00004e20 	.word	0x00004e20
    a094:	000127b4 	.word	0x000127b4
    a098:	fffffd40 	.word	0xfffffd40
    a09c:	00002710 	.word	0x00002710
    a0a0:	000127d4 	.word	0x000127d4
    a0a4:	000127f4 	.word	0x000127f4
    a0a8:	00002328 	.word	0x00002328
					}

					clock_gettime(CLOCK_REALTIME, &l_timestamp_st);
    a0ac:	e24b3fa1 	sub	r3, fp, #644	; 0x284
    a0b0:	e3a00000 	mov	r0, #0
    a0b4:	e1a01003 	mov	r1, r3
    a0b8:	ebfffaa6 	bl	8b58 <_init+0x44>

					//assmeble timestamp and
					l_rtCompleteSigPayload_st.timestamp_st 				= l_timestamp_st;
    a0bc:	e24b3ff1 	sub	r3, fp, #964	; 0x3c4
    a0c0:	e24b2fa1 	sub	r2, fp, #644	; 0x284
    a0c4:	e8920003 	ldm	r2, {r0, r1}
    a0c8:	e8830003 	stm	r3, {r0, r1}
					l_rtCompleteSigPayload_st.imuState_st				= l_imuStates_st;
    a0cc:	e24b1fef 	sub	r1, fp, #956	; 0x3bc
    a0d0:	e24b2e41 	sub	r2, fp, #1040	; 0x410
    a0d4:	e242200c 	sub	r2, r2, #12
    a0d8:	e3a03058 	mov	r3, #88	; 0x58
    a0dc:	e1a00001 	mov	r0, r1
    a0e0:	e1a01002 	mov	r1, r2
    a0e4:	e1a02003 	mov	r2, r3
    a0e8:	ebfffae5 	bl	8c84 <_init+0x170>
					l_rtCompleteSigPayload_st.kalmanSigState_st 		= l_kalmanAngles_st;
    a0ec:	e24bcfd9 	sub	ip, fp, #868	; 0x364
    a0f0:	e24bef99 	sub	lr, fp, #612	; 0x264
    a0f4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    a0f8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    a0fc:	e89e0003 	ldm	lr, {r0, r1}
    a100:	e88c0003 	stm	ip, {r0, r1}
					l_rtCompleteSigPayload_st.complementarySigState_st	= l_compAngles_st;
    a104:	e24bcfd3 	sub	ip, fp, #844	; 0x34c
    a108:	e24bef9f 	sub	lr, fp, #636	; 0x27c
    a10c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    a110:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    a114:	e89e0003 	ldm	lr, {r0, r1}
    a118:	e88c0003 	stm	ip, {r0, r1}

					printf("START MEASUREMENT\n");
    a11c:	e51f00f8 	ldr	r0, [pc, #-248]	; a02c <main+0x115c>
    a120:	ebfffafb 	bl	8d14 <_init+0x200>
					sprintf(str, "sec =  %d, nano = %d",
    a124:	e51b33c4 	ldr	r3, [fp, #-964]	; 0x3c4
    a128:	e51bc3c0 	ldr	ip, [fp, #-960]	; 0x3c0
    a12c:	e51f00ec 	ldr	r0, [pc, #-236]	; a048 <main+0x1178>
    a130:	e51f1108 	ldr	r1, [pc, #-264]	; a030 <main+0x1160>
    a134:	e1a02003 	mov	r2, r3
    a138:	e1a0300c 	mov	r3, ip
    a13c:	ebfffb12 	bl	8d8c <_init+0x278>
							l_rtCompleteSigPayload_st.timestamp_st.tv_sec, l_rtCompleteSigPayload_st.timestamp_st.tv_nsec);
					puts(str);
    a140:	e51f0100 	ldr	r0, [pc, #-256]	; a048 <main+0x1178>
    a144:	ebfffaf2 	bl	8d14 <_init+0x200>
					sprintf(str, "acc = %f %f %f",
    a148:	e24b5fef 	sub	r5, fp, #956	; 0x3bc
    a14c:	e1c540d0 	ldrd	r4, [r5]
    a150:	e24b1fed 	sub	r1, fp, #948	; 0x3b4
    a154:	e1c100d0 	ldrd	r0, [r1]
    a158:	e24b3feb 	sub	r3, fp, #940	; 0x3ac
    a15c:	e1c320d0 	ldrd	r2, [r3]
    a160:	e1cd00f0 	strd	r0, [sp]
    a164:	e1cd20f8 	strd	r2, [sp, #8]
    a168:	e51f0128 	ldr	r0, [pc, #-296]	; a048 <main+0x1178>
    a16c:	e51f1174 	ldr	r1, [pc, #-372]	; a000 <main+0x1130>
    a170:	e1a02004 	mov	r2, r4
    a174:	e1a03005 	mov	r3, r5
    a178:	ebfffb03 	bl	8d8c <_init+0x278>
							l_rtCompleteSigPayload_st.imuState_st.acc.x_f64, l_rtCompleteSigPayload_st.imuState_st.acc.y_f64, l_rtCompleteSigPayload_st.imuState_st.acc.z_f64);
					puts(str);
    a17c:	e51f013c 	ldr	r0, [pc, #-316]	; a048 <main+0x1178>
    a180:	ebfffae3 	bl	8d14 <_init+0x200>
					sprintf(str, "mag = %f %f %f",
    a184:	e24b5fe9 	sub	r5, fp, #932	; 0x3a4
    a188:	e1c540d0 	ldrd	r4, [r5]
    a18c:	e24b1fe7 	sub	r1, fp, #924	; 0x39c
    a190:	e1c100d0 	ldrd	r0, [r1]
    a194:	e24b3fe5 	sub	r3, fp, #916	; 0x394
    a198:	e1c320d0 	ldrd	r2, [r3]
    a19c:	e1cd00f0 	strd	r0, [sp]
    a1a0:	e1cd20f8 	strd	r2, [sp, #8]
    a1a4:	e51f0164 	ldr	r0, [pc, #-356]	; a048 <main+0x1178>
    a1a8:	e51f11ac 	ldr	r1, [pc, #-428]	; a004 <main+0x1134>
    a1ac:	e1a02004 	mov	r2, r4
    a1b0:	e1a03005 	mov	r3, r5
    a1b4:	ebfffaf4 	bl	8d8c <_init+0x278>
							l_rtCompleteSigPayload_st.imuState_st.mag.x_f64, l_rtCompleteSigPayload_st.imuState_st.mag.y_f64, l_rtCompleteSigPayload_st.imuState_st.mag.z_f64);
					puts(str);
    a1b8:	e51f0178 	ldr	r0, [pc, #-376]	; a048 <main+0x1178>
    a1bc:	ebfffad4 	bl	8d14 <_init+0x200>
					sprintf(str, "roll %f, pitch %f yaw  %f",
    a1c0:	e24b5fe3 	sub	r5, fp, #908	; 0x38c
    a1c4:	e1c540d0 	ldrd	r4, [r5]
    a1c8:	e24b1fe1 	sub	r1, fp, #900	; 0x384
    a1cc:	e1c100d0 	ldrd	r0, [r1]
    a1d0:	e24b3fdf 	sub	r3, fp, #892	; 0x37c
    a1d4:	e1c320d0 	ldrd	r2, [r3]
    a1d8:	e1cd00f0 	strd	r0, [sp]
    a1dc:	e1cd20f8 	strd	r2, [sp, #8]
    a1e0:	e51f01a0 	ldr	r0, [pc, #-416]	; a048 <main+0x1178>
    a1e4:	e51f11e4 	ldr	r1, [pc, #-484]	; a008 <main+0x1138>
    a1e8:	e1a02004 	mov	r2, r4
    a1ec:	e1a03005 	mov	r3, r5
    a1f0:	ebfffae5 	bl	8d8c <_init+0x278>
							l_rtCompleteSigPayload_st.imuState_st.gyro.roll_f64, l_rtCompleteSigPayload_st.imuState_st.gyro.pitch_f64, l_rtCompleteSigPayload_st.imuState_st.gyro.yaw_f64 );
					puts(str);
    a1f4:	e51f01b4 	ldr	r0, [pc, #-436]	; a048 <main+0x1178>
    a1f8:	ebfffac5 	bl	8d14 <_init+0x200>
					sprintf(str, "temperature = %f",
    a1fc:	e24b3fdd 	sub	r3, fp, #884	; 0x374
    a200:	e1c320d0 	ldrd	r2, [r3]
    a204:	e51f01c4 	ldr	r0, [pc, #-452]	; a048 <main+0x1178>
    a208:	e51f1204 	ldr	r1, [pc, #-516]	; a00c <main+0x113c>
    a20c:	ebfffade 	bl	8d8c <_init+0x278>
							l_rtCompleteSigPayload_st.imuState_st.temperature_f64);
					puts(str);
    a210:	e51f01d0 	ldr	r0, [pc, #-464]	; a048 <main+0x1178>
    a214:	ebfffabe 	bl	8d14 <_init+0x200>
					sprintf(str, "pressure = %f",
    a218:	e24b3fdb 	sub	r3, fp, #876	; 0x36c
    a21c:	e1c320d0 	ldrd	r2, [r3]
    a220:	e51f01e0 	ldr	r0, [pc, #-480]	; a048 <main+0x1178>
    a224:	e51f121c 	ldr	r1, [pc, #-540]	; a010 <main+0x1140>
    a228:	ebfffad7 	bl	8d8c <_init+0x278>
							l_rtCompleteSigPayload_st.imuState_st.pressure_f64);
					puts(str);
    a22c:	e51f01ec 	ldr	r0, [pc, #-492]	; a048 <main+0x1178>
    a230:	ebfffab7 	bl	8d14 <_init+0x200>
					sprintf(str, "KALMAN yaw %f, pitch %f roll %f",
    a234:	e24b5fd5 	sub	r5, fp, #852	; 0x354
    a238:	e1c540d0 	ldrd	r4, [r5]
    a23c:	e24b1fd7 	sub	r1, fp, #860	; 0x35c
    a240:	e1c100d0 	ldrd	r0, [r1]
    a244:	e24b3fd9 	sub	r3, fp, #868	; 0x364
    a248:	e1c320d0 	ldrd	r2, [r3]
    a24c:	e1cd00f0 	strd	r0, [sp]
    a250:	e1cd20f8 	strd	r2, [sp, #8]
    a254:	e51f0214 	ldr	r0, [pc, #-532]	; a048 <main+0x1178>
    a258:	e51f124c 	ldr	r1, [pc, #-588]	; a014 <main+0x1144>
    a25c:	e1a02004 	mov	r2, r4
    a260:	e1a03005 	mov	r3, r5
    a264:	ebfffac8 	bl	8d8c <_init+0x278>
							l_rtCompleteSigPayload_st.kalmanSigState_st.yaw_f64, l_rtCompleteSigPayload_st.kalmanSigState_st.pitch_f64, l_rtCompleteSigPayload_st.kalmanSigState_st.roll_f64);
					puts(str);
    a268:	e51f0228 	ldr	r0, [pc, #-552]	; a048 <main+0x1178>
    a26c:	ebfffaa8 	bl	8d14 <_init+0x200>
					sprintf(str, "COMPLEMENTARY yaw %f, pitch %f roll %f",
    a270:	e24b5fcf 	sub	r5, fp, #828	; 0x33c
    a274:	e1c540d0 	ldrd	r4, [r5]
    a278:	e24b1fd1 	sub	r1, fp, #836	; 0x344
    a27c:	e1c100d0 	ldrd	r0, [r1]
    a280:	e24b3fd3 	sub	r3, fp, #844	; 0x34c
    a284:	e1c320d0 	ldrd	r2, [r3]
    a288:	e1cd00f0 	strd	r0, [sp]
    a28c:	e1cd20f8 	strd	r2, [sp, #8]
    a290:	e51f0250 	ldr	r0, [pc, #-592]	; a048 <main+0x1178>
    a294:	e51f1284 	ldr	r1, [pc, #-644]	; a018 <main+0x1148>
    a298:	e1a02004 	mov	r2, r4
    a29c:	e1a03005 	mov	r3, r5
    a2a0:	ebfffab9 	bl	8d8c <_init+0x278>
							l_rtCompleteSigPayload_st.complementarySigState_st.yaw_f64, l_rtCompleteSigPayload_st.complementarySigState_st.pitch_f64, l_rtCompleteSigPayload_st.complementarySigState_st.roll_f64);
					puts(str);
    a2a4:	e51f0264 	ldr	r0, [pc, #-612]	; a048 <main+0x1178>
    a2a8:	ebfffa99 	bl	8d14 <_init+0x200>

					//printf("Sending time %d and Temperature %f\n", l_rtCompleteSigPayload_st.timestamp_st.tv_sec, l_rtCompleteSigPayload_st.imuState_st.temperature_f64);
					sendto(socketclient, (unsigned char *)&l_rtCompleteSigPayload_st , (size_t)sizeof( l_rtCompleteSigPayload_st ),  0, (struct sockaddr *)&remoteaddress, sizeof(remoteaddress));
    a2ac:	e24b3ff1 	sub	r3, fp, #964	; 0x3c4
    a2b0:	e24b2fa5 	sub	r2, fp, #660	; 0x294
    a2b4:	e58d2000 	str	r2, [sp]
    a2b8:	e3a02010 	mov	r2, #16
    a2bc:	e58d2004 	str	r2, [sp, #4]
    a2c0:	e51b0130 	ldr	r0, [fp, #-304]	; 0x130
    a2c4:	e1a01003 	mov	r1, r3
    a2c8:	e3a02090 	mov	r2, #144	; 0x90
    a2cc:	e3a03000 	mov	r3, #0
    a2d0:	ebfffa35 	bl	8bac <_init+0x98>

					usleep( 50000 ); //20ms = 50Hz
    a2d4:	e51f0290 	ldr	r0, [pc, #-656]	; a04c <main+0x117c>
    a2d8:	ebfffa42 	bl	8be8 <_init+0xd4>

				g_sigOri_initMatrices_bl();
				g_sigOri_initImuSensors_bl();

				int i = kbhit();
				while(i != 'q')
    a2dc:	e51b3134 	ldr	r3, [fp, #-308]	; 0x134
    a2e0:	e3530071 	cmp	r3, #113	; 0x71
    a2e4:	1afffee4 	bne	9e7c <main+0xfac>
					sendto(socketclient, (unsigned char *)&l_rtCompleteSigPayload_st , (size_t)sizeof( l_rtCompleteSigPayload_st ),  0, (struct sockaddr *)&remoteaddress, sizeof(remoteaddress));

					usleep( 50000 ); //20ms = 50Hz
				}
				// close udp connection
				close(socketclient);
    a2e8:	e51b0130 	ldr	r0, [fp, #-304]	; 0x130
    a2ec:	ebfffa73 	bl	8cc0 <_init+0x1ac>
    a2f0:	ea000385 	b	b10c <main+0x223c>

				halMatlab_rtSigRollPitchYawStatePayload	l_rtRollPitchYawSigPayload_st;

				struct timespec					l_timestamp_st;

				printf("Starting Transfer matlab data on all angles\n");
    a2f4:	e51f02e0 	ldr	r0, [pc, #-736]	; a01c <main+0x114c>
    a2f8:	ebfffa85 	bl	8d14 <_init+0x200>

				int val=0;
    a2fc:	e3a03000 	mov	r3, #0
    a300:	e50b3138 	str	r3, [fp, #-312]	; 0x138
				int socketclient = 0;
    a304:	e3a03000 	mov	r3, #0
    a308:	e50b313c 	str	r3, [fp, #-316]	; 0x13c
				struct sockaddr_in remoteaddress;

				remoteaddress.sin_family = PF_INET;
    a30c:	e51f32f4 	ldr	r3, [pc, #-756]	; a020 <main+0x1150>
    a310:	e3a02002 	mov	r2, #2
    a314:	e24b1054 	sub	r1, fp, #84	; 0x54
    a318:	e18120b3 	strh	r2, [r1, r3]
				remoteaddress.sin_port = htons(REMOTE_PORT);
    a31c:	e51f02cc 	ldr	r0, [pc, #-716]	; a058 <main+0x1188>
    a320:	ebfffa24 	bl	8bb8 <_init+0xa4>
    a324:	e1a03000 	mov	r3, r0
    a328:	e1a02003 	mov	r2, r3
    a32c:	e51f3310 	ldr	r3, [pc, #-784]	; a024 <main+0x1154>
    a330:	e24b0054 	sub	r0, fp, #84	; 0x54
    a334:	e18020b3 	strh	r2, [r0, r3]

				(void)inet_aton(REMOTE_ADDR, &remoteaddress.sin_addr); //dot to integer and then host to network byte order
    a338:	e24b3fc3 	sub	r3, fp, #780	; 0x30c
    a33c:	e2833004 	add	r3, r3, #4
    a340:	e51f0320 	ldr	r0, [pc, #-800]	; a028 <main+0x1158>
    a344:	e1a01003 	mov	r1, r3
    a348:	ebfffa44 	bl	8c60 <_init+0x14c>

				socketclient = socket(PF_INET, SOCK_DGRAM, 0);
    a34c:	e3a00002 	mov	r0, #2
    a350:	e3a01002 	mov	r1, #2
    a354:	e3a02000 	mov	r2, #0
    a358:	ebfffa3d 	bl	8c54 <_init+0x140>
    a35c:	e50b013c 	str	r0, [fp, #-316]	; 0x13c

				g_sigOri_initMatrices_bl();
    a360:	eb001b43 	bl	11074 <g_sigOri_initMatrices_bl>
				g_sigOri_initImuSensors_bl();
    a364:	eb001b37 	bl	11048 <g_sigOri_initImuSensors_bl>

				int i = kbhit();
    a368:	eb000423 	bl	b3fc <kbhit>
    a36c:	e50b0140 	str	r0, [fp, #-320]	; 0x140
				while(i != 'q')
    a370:	ea0000b3 	b	a644 <main+0x1774>
				{
					g_sigOri_calcKalmanOrientation_bl();
    a374:	eb001d26 	bl	11814 <g_sigOri_calcKalmanOrientation_bl>
					g_sigOri_calcComplementaryOrientation_bl();
    a378:	eb001e00 	bl	11b80 <g_sigOri_calcComplementaryOrientation_bl>

					l_imuStates_st 		= g_halImu_getImuValues_str();
    a37c:	e24b3e41 	sub	r3, fp, #1040	; 0x410
    a380:	e243300c 	sub	r3, r3, #12
    a384:	e1a00003 	mov	r0, r3
    a388:	eb000fc9 	bl	e2b4 <g_halImu_getImuValues_str>
					l_GyroPerStepAngles_st = g_sigOri_getAnglesGyroPerStep_bl();
    a38c:	eb001e56 	bl	11cec <g_sigOri_getAnglesGyroPerStep_bl>
    a390:	eeb05b40 	vmov.f64	d5, d0
    a394:	eeb06b41 	vmov.f64	d6, d1
    a398:	eeb07b42 	vmov.f64	d7, d2
    a39c:	ed0b5bab 	vstr	d5, [fp, #-684]	; 0xfffffd54
    a3a0:	ed0b6ba9 	vstr	d6, [fp, #-676]	; 0xfffffd5c
    a3a4:	ed0b7ba7 	vstr	d7, [fp, #-668]	; 0xfffffd64
					l_AccMagAngles_st = g_sigOri_getAnglesAccMagCalc_bl();
    a3a8:	eb001e39 	bl	11c94 <g_sigOri_getAnglesAccMagCalc_bl>
    a3ac:	eeb05b40 	vmov.f64	d5, d0
    a3b0:	eeb06b41 	vmov.f64	d6, d1
    a3b4:	eeb07b42 	vmov.f64	d7, d2
    a3b8:	ed0b5bb1 	vstr	d5, [fp, #-708]	; 0xfffffd3c
    a3bc:	ed0b6baf 	vstr	d6, [fp, #-700]	; 0xfffffd44
    a3c0:	ed0b7bad 	vstr	d7, [fp, #-692]	; 0xfffffd4c
					l_kalmanAngles_st 	= g_sigOri_getAnglesKalman_bl();
    a3c4:	eb001aeb 	bl	10f78 <g_sigOri_getAnglesKalman_bl>
    a3c8:	eeb05b40 	vmov.f64	d5, d0
    a3cc:	eeb06b41 	vmov.f64	d6, d1
    a3d0:	eeb07b42 	vmov.f64	d7, d2
    a3d4:	ed0b5bb7 	vstr	d5, [fp, #-732]	; 0xfffffd24
    a3d8:	ed0b6bb5 	vstr	d6, [fp, #-724]	; 0xfffffd2c
    a3dc:	ed0b7bb3 	vstr	d7, [fp, #-716]	; 0xfffffd34
					l_compAngles_st		= g_sigOri_getAnglesComplementary_bl();
    a3e0:	eb001ab0 	bl	10ea8 <g_sigOri_getAnglesComplementary_bl>
    a3e4:	eeb05b40 	vmov.f64	d5, d0
    a3e8:	eeb06b41 	vmov.f64	d6, d1
    a3ec:	eeb07b42 	vmov.f64	d7, d2
    a3f0:	ed0b5bbd 	vstr	d5, [fp, #-756]	; 0xfffffd0c
    a3f4:	ed0b6bbb 	vstr	d6, [fp, #-748]	; 0xfffffd14
    a3f8:	ed0b7bb9 	vstr	d7, [fp, #-740]	; 0xfffffd1c


					if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    a3fc:	e24b3fbf 	sub	r3, fp, #764	; 0x2fc
    a400:	e3a00000 	mov	r0, #0
    a404:	e1a01003 	mov	r1, r3
    a408:	ebfff9d2 	bl	8b58 <_init+0x44>
    a40c:	e1a03000 	mov	r3, r0
    a410:	e3530000 	cmp	r3, #0
    a414:	0a000002 	beq	a424 <main+0x1554>
					{
						return M_HAL_MATLAB_FAILED_UI8;
    a418:	e3a0a001 	mov	sl, #1
    a41c:	e3a03000 	mov	r3, #0
    a420:	ea00033a 	b	b110 <main+0x2240>
					}

					clock_gettime(CLOCK_REALTIME, &l_timestamp_st);
    a424:	e24b3fbf 	sub	r3, fp, #764	; 0x2fc
    a428:	e3a00000 	mov	r0, #0
    a42c:	e1a01003 	mov	r1, r3
    a430:	ebfff9c8 	bl	8b58 <_init+0x44>

					//assmeble timestamp and
					l_rtRollPitchYawSigPayload_st.timestamp_st 				= l_timestamp_st;
    a434:	e24b3ff1 	sub	r3, fp, #964	; 0x3c4
    a438:	e24b2fbf 	sub	r2, fp, #764	; 0x2fc
    a43c:	e8920003 	ldm	r2, {r0, r1}
    a440:	e8830003 	stm	r3, {r0, r1}
					l_rtRollPitchYawSigPayload_st.angularVelocityGyroFromImu_st 		= l_imuStates_st.gyro;
    a444:	e24bcfef 	sub	ip, fp, #956	; 0x3bc
    a448:	e24beffb 	sub	lr, fp, #1004	; 0x3ec
    a44c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    a450:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    a454:	e89e0003 	ldm	lr, {r0, r1}
    a458:	e88c0003 	stm	ip, {r0, r1}
					l_rtRollPitchYawSigPayload_st.angleFromGyroStepCalculation_st	= l_GyroPerStepAngles_st;
    a45c:	e24bcfe9 	sub	ip, fp, #932	; 0x3a4
    a460:	e24befab 	sub	lr, fp, #684	; 0x2ac
    a464:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    a468:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    a46c:	e89e0003 	ldm	lr, {r0, r1}
    a470:	e88c0003 	stm	ip, {r0, r1}
					l_rtRollPitchYawSigPayload_st.angleFromAccMagCalculation_st 		= l_AccMagAngles_st;
    a474:	e24bcfe3 	sub	ip, fp, #908	; 0x38c
    a478:	e24befb1 	sub	lr, fp, #708	; 0x2c4
    a47c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    a480:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    a484:	e89e0003 	ldm	lr, {r0, r1}
    a488:	e88c0003 	stm	ip, {r0, r1}
					l_rtRollPitchYawSigPayload_st.angleFromkalmanSigState_st 		= l_kalmanAngles_st;
    a48c:	e24bcfd7 	sub	ip, fp, #860	; 0x35c
    a490:	e24befb7 	sub	lr, fp, #732	; 0x2dc
    a494:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    a498:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    a49c:	e89e0003 	ldm	lr, {r0, r1}
    a4a0:	e88c0003 	stm	ip, {r0, r1}
					l_rtRollPitchYawSigPayload_st.angleFromcomplementarySigState_st	= l_compAngles_st;
    a4a4:	e24bcfdd 	sub	ip, fp, #884	; 0x374
    a4a8:	e24befbd 	sub	lr, fp, #756	; 0x2f4
    a4ac:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    a4b0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    a4b4:	e89e0003 	ldm	lr, {r0, r1}
    a4b8:	e88c0003 	stm	ip, {r0, r1}


					printf("START MEASUREMENT\n");
    a4bc:	e51f0498 	ldr	r0, [pc, #-1176]	; a02c <main+0x115c>
    a4c0:	ebfffa13 	bl	8d14 <_init+0x200>
					sprintf(str, "sec =  %d, nano = %d",
    a4c4:	e51b33c4 	ldr	r3, [fp, #-964]	; 0x3c4
    a4c8:	e51bc3c0 	ldr	ip, [fp, #-960]	; 0x3c0
    a4cc:	e51f048c 	ldr	r0, [pc, #-1164]	; a048 <main+0x1178>
    a4d0:	e51f14a8 	ldr	r1, [pc, #-1192]	; a030 <main+0x1160>
    a4d4:	e1a02003 	mov	r2, r3
    a4d8:	e1a0300c 	mov	r3, ip
    a4dc:	ebfffa2a 	bl	8d8c <_init+0x278>
							l_rtRollPitchYawSigPayload_st.timestamp_st.tv_sec, l_rtRollPitchYawSigPayload_st.timestamp_st.tv_nsec);
					puts(str);
    a4e0:	e51f04a0 	ldr	r0, [pc, #-1184]	; a048 <main+0x1178>
    a4e4:	ebfffa0a 	bl	8d14 <_init+0x200>
					sprintf(str, "Raw GYro Angular velocity roll %f, pitch %f yaw  %f",
    a4e8:	e24b5fef 	sub	r5, fp, #956	; 0x3bc
    a4ec:	e1c540d0 	ldrd	r4, [r5]
    a4f0:	e24b1fed 	sub	r1, fp, #948	; 0x3b4
    a4f4:	e1c100d0 	ldrd	r0, [r1]
    a4f8:	e24b3feb 	sub	r3, fp, #940	; 0x3ac
    a4fc:	e1c320d0 	ldrd	r2, [r3]
    a500:	e1cd00f0 	strd	r0, [sp]
    a504:	e1cd20f8 	strd	r2, [sp, #8]
    a508:	e51f04c8 	ldr	r0, [pc, #-1224]	; a048 <main+0x1178>
    a50c:	e51f14e0 	ldr	r1, [pc, #-1248]	; a034 <main+0x1164>
    a510:	e1a02004 	mov	r2, r4
    a514:	e1a03005 	mov	r3, r5
    a518:	ebfffa1b 	bl	8d8c <_init+0x278>
							l_rtRollPitchYawSigPayload_st.angularVelocityGyroFromImu_st.roll_f64, l_rtRollPitchYawSigPayload_st.angularVelocityGyroFromImu_st.pitch_f64, l_rtRollPitchYawSigPayload_st.angularVelocityGyroFromImu_st.yaw_f64 );
					puts(str);
    a51c:	e51f04dc 	ldr	r0, [pc, #-1244]	; a048 <main+0x1178>
    a520:	ebfff9fb 	bl	8d14 <_init+0x200>
					sprintf(str, "Gyro Angles roll %f, pitch %f yaw  %f",
    a524:	e24b5fe9 	sub	r5, fp, #932	; 0x3a4
    a528:	e1c540d0 	ldrd	r4, [r5]
    a52c:	e24b1fe7 	sub	r1, fp, #924	; 0x39c
    a530:	e1c100d0 	ldrd	r0, [r1]
    a534:	e24b3fe5 	sub	r3, fp, #916	; 0x394
    a538:	e1c320d0 	ldrd	r2, [r3]
    a53c:	e1cd00f0 	strd	r0, [sp]
    a540:	e1cd20f8 	strd	r2, [sp, #8]
    a544:	e51f0504 	ldr	r0, [pc, #-1284]	; a048 <main+0x1178>
    a548:	e51f1518 	ldr	r1, [pc, #-1304]	; a038 <main+0x1168>
    a54c:	e1a02004 	mov	r2, r4
    a550:	e1a03005 	mov	r3, r5
    a554:	ebfffa0c 	bl	8d8c <_init+0x278>
							l_rtRollPitchYawSigPayload_st.angleFromGyroStepCalculation_st.roll_f64, l_rtRollPitchYawSigPayload_st.angleFromGyroStepCalculation_st.pitch_f64, l_rtRollPitchYawSigPayload_st.angleFromGyroStepCalculation_st.yaw_f64 );
					puts(str);
    a558:	e51f0518 	ldr	r0, [pc, #-1304]	; a048 <main+0x1178>
    a55c:	ebfff9ec 	bl	8d14 <_init+0x200>
					sprintf(str, "ACC MAG CALC Angles roll %f, pitch %f yaw  %f",
    a560:	e24b5fe3 	sub	r5, fp, #908	; 0x38c
    a564:	e1c540d0 	ldrd	r4, [r5]
    a568:	e24b1fe1 	sub	r1, fp, #900	; 0x384
    a56c:	e1c100d0 	ldrd	r0, [r1]
    a570:	e24b3fdf 	sub	r3, fp, #892	; 0x37c
    a574:	e1c320d0 	ldrd	r2, [r3]
    a578:	e1cd00f0 	strd	r0, [sp]
    a57c:	e1cd20f8 	strd	r2, [sp, #8]
    a580:	e51f0540 	ldr	r0, [pc, #-1344]	; a048 <main+0x1178>
    a584:	e51f1550 	ldr	r1, [pc, #-1360]	; a03c <main+0x116c>
    a588:	e1a02004 	mov	r2, r4
    a58c:	e1a03005 	mov	r3, r5
    a590:	ebfff9fd 	bl	8d8c <_init+0x278>
							l_rtRollPitchYawSigPayload_st.angleFromAccMagCalculation_st.roll_f64, l_rtRollPitchYawSigPayload_st.angleFromAccMagCalculation_st.pitch_f64, l_rtRollPitchYawSigPayload_st.angleFromAccMagCalculation_st.yaw_f64 );
					puts(str);
    a594:	e51f0554 	ldr	r0, [pc, #-1364]	; a048 <main+0x1178>
    a598:	ebfff9dd 	bl	8d14 <_init+0x200>
					sprintf(str, "COMPLEMENTARY Angles roll %f, pitch %f yaw %f",
    a59c:	e24b5fdd 	sub	r5, fp, #884	; 0x374
    a5a0:	e1c540d0 	ldrd	r4, [r5]
    a5a4:	e24b1fdb 	sub	r1, fp, #876	; 0x36c
    a5a8:	e1c100d0 	ldrd	r0, [r1]
    a5ac:	e24b3fd9 	sub	r3, fp, #868	; 0x364
    a5b0:	e1c320d0 	ldrd	r2, [r3]
    a5b4:	e1cd00f0 	strd	r0, [sp]
    a5b8:	e1cd20f8 	strd	r2, [sp, #8]
    a5bc:	e51f057c 	ldr	r0, [pc, #-1404]	; a048 <main+0x1178>
    a5c0:	e51f1588 	ldr	r1, [pc, #-1416]	; a040 <main+0x1170>
    a5c4:	e1a02004 	mov	r2, r4
    a5c8:	e1a03005 	mov	r3, r5
    a5cc:	ebfff9ee 	bl	8d8c <_init+0x278>
							l_rtRollPitchYawSigPayload_st.angleFromcomplementarySigState_st.roll_f64, l_rtRollPitchYawSigPayload_st.angleFromcomplementarySigState_st.pitch_f64, l_rtRollPitchYawSigPayload_st.angleFromcomplementarySigState_st.yaw_f64);
					puts(str);
    a5d0:	e51f0590 	ldr	r0, [pc, #-1424]	; a048 <main+0x1178>
    a5d4:	ebfff9ce 	bl	8d14 <_init+0x200>
					sprintf(str, "KALMAN Angles roll %f, pitch %f yaw %f",
    a5d8:	e24b5fd7 	sub	r5, fp, #860	; 0x35c
    a5dc:	e1c540d0 	ldrd	r4, [r5]
    a5e0:	e24b1fd5 	sub	r1, fp, #852	; 0x354
    a5e4:	e1c100d0 	ldrd	r0, [r1]
    a5e8:	e24b3fd3 	sub	r3, fp, #844	; 0x34c
    a5ec:	e1c320d0 	ldrd	r2, [r3]
    a5f0:	e1cd00f0 	strd	r0, [sp]
    a5f4:	e1cd20f8 	strd	r2, [sp, #8]
    a5f8:	e51f05b8 	ldr	r0, [pc, #-1464]	; a048 <main+0x1178>
    a5fc:	e51f15c0 	ldr	r1, [pc, #-1472]	; a044 <main+0x1174>
    a600:	e1a02004 	mov	r2, r4
    a604:	e1a03005 	mov	r3, r5
    a608:	ebfff9df 	bl	8d8c <_init+0x278>
							l_rtRollPitchYawSigPayload_st.angleFromkalmanSigState_st.roll_f64, l_rtRollPitchYawSigPayload_st.angleFromkalmanSigState_st.pitch_f64, l_rtRollPitchYawSigPayload_st.angleFromkalmanSigState_st.yaw_f64);
					puts(str);
    a60c:	e51f05cc 	ldr	r0, [pc, #-1484]	; a048 <main+0x1178>
    a610:	ebfff9bf 	bl	8d14 <_init+0x200>

					sendto(socketclient, (unsigned char *)&l_rtRollPitchYawSigPayload_st , (size_t)sizeof( l_rtRollPitchYawSigPayload_st ),  0, (struct sockaddr *)&remoteaddress, sizeof(remoteaddress));
    a614:	e24b3ff1 	sub	r3, fp, #964	; 0x3c4
    a618:	e24b2fc3 	sub	r2, fp, #780	; 0x30c
    a61c:	e58d2000 	str	r2, [sp]
    a620:	e3a02010 	mov	r2, #16
    a624:	e58d2004 	str	r2, [sp, #4]
    a628:	e51b013c 	ldr	r0, [fp, #-316]	; 0x13c
    a62c:	e1a01003 	mov	r1, r3
    a630:	e3a02080 	mov	r2, #128	; 0x80
    a634:	e3a03000 	mov	r3, #0
    a638:	ebfff95b 	bl	8bac <_init+0x98>

					usleep( 50000 ); //20ms = 50Hz
    a63c:	e51f05f8 	ldr	r0, [pc, #-1528]	; a04c <main+0x117c>
    a640:	ebfff968 	bl	8be8 <_init+0xd4>

				g_sigOri_initMatrices_bl();
				g_sigOri_initImuSensors_bl();

				int i = kbhit();
				while(i != 'q')
    a644:	e51b3140 	ldr	r3, [fp, #-320]	; 0x140
    a648:	e3530071 	cmp	r3, #113	; 0x71
    a64c:	1affff48 	bne	a374 <main+0x14a4>
					sendto(socketclient, (unsigned char *)&l_rtRollPitchYawSigPayload_st , (size_t)sizeof( l_rtRollPitchYawSigPayload_st ),  0, (struct sockaddr *)&remoteaddress, sizeof(remoteaddress));

					usleep( 50000 ); //20ms = 50Hz
				}
				// close udp connection
				close(socketclient);
    a650:	e51b013c 	ldr	r0, [fp, #-316]	; 0x13c
    a654:	ebfff999 	bl	8cc0 <_init+0x1ac>
    a658:	ea0002ab 	b	b10c <main+0x223c>
				break;
			}
			case TESTALLSENSORDATA:
			{
				printf("Starting IMU send all Sensor Values\n");
    a65c:	e51f0614 	ldr	r0, [pc, #-1556]	; a050 <main+0x1180>
    a660:	ebfff9ab 	bl	8d14 <_init+0x200>
				unsigned char	l_remoteHostAddr_rg4ui8[4] 	= {192,168,22,160};
    a664:	e51f2618 	ldr	r2, [pc, #-1560]	; a054 <main+0x1184>
    a668:	e24b3e31 	sub	r3, fp, #784	; 0x310
    a66c:	e5920000 	ldr	r0, [r2]
    a670:	e5830000 	str	r0, [r3]
				unsigned short	l_remoteHostPort_ui16		= 5000;
    a674:	e51f3624 	ldr	r3, [pc, #-1572]	; a058 <main+0x1188>
    a678:	e24b1c02 	sub	r1, fp, #512	; 0x200
    a67c:	e1c13bbe 	strh	r3, [r1, #190]	; 0xbe
				int				l_udpSocket_i32;
				unsigned int	l_sendState_bl;

				// open udp connection
				l_udpSocket_i32 = g_halMatlab_initConnection_i32( l_remoteHostAddr_rg4ui8, l_remoteHostPort_ui16 );
    a680:	e24b2e31 	sub	r2, fp, #784	; 0x310
    a684:	e24b0c02 	sub	r0, fp, #512	; 0x200
    a688:	e1d03bbe 	ldrh	r3, [r0, #190]	; 0xbe
    a68c:	e1a00002 	mov	r0, r2
    a690:	e1a01003 	mov	r1, r3
    a694:	eb00140b 	bl	f6c8 <g_halMatlab_initConnection_i32>
    a698:	e50b0148 	str	r0, [fp, #-328]	; 0x148

				halImu_orientationValues l_imuMeasurements_st;
				g_halImu_initImuSensors_bl();
    a69c:	eb000f15 	bl	e2f8 <g_halImu_initImuSensors_bl>

				int i = kbhit();
    a6a0:	eb000355 	bl	b3fc <kbhit>
    a6a4:	e50b014c 	str	r0, [fp, #-332]	; 0x14c
				while(i != 'q')
    a6a8:	ea000048 	b	a7d0 <main+0x1900>
				{
					g_halImu_triggerImuReading_bl();
    a6ac:	eb000f7e 	bl	e4ac <g_halImu_triggerImuReading_bl>
					g_halImu_triggerBaroReading_bl();
    a6b0:	eb000f27 	bl	e354 <g_halImu_triggerBaroReading_bl>
					g_halImu_triggerGyroReading_bl();
    a6b4:	eb000f40 	bl	e3bc <g_halImu_triggerGyroReading_bl>
					g_halImu_triggerAccReading_bl();
    a6b8:	eb000f53 	bl	e40c <g_halImu_triggerAccReading_bl>

					l_imuMeasurements_st=g_halImu_getImuValues_str();
    a6bc:	e24b3ff1 	sub	r3, fp, #964	; 0x3c4
    a6c0:	e1a00003 	mov	r0, r3
    a6c4:	eb000efa 	bl	e2b4 <g_halImu_getImuValues_str>

					l_sendState_bl = g_halMatlab_sendImuState_bl(l_udpSocket_i32, l_imuMeasurements_st);
    a6c8:	e1a0100d 	mov	r1, sp
    a6cc:	e24b2fef 	sub	r2, fp, #956	; 0x3bc
    a6d0:	e3a03050 	mov	r3, #80	; 0x50
    a6d4:	e1a00001 	mov	r0, r1
    a6d8:	e1a01002 	mov	r1, r2
    a6dc:	e1a02003 	mov	r2, r3
    a6e0:	ebfff967 	bl	8c84 <_init+0x170>
    a6e4:	e24b3ff1 	sub	r3, fp, #964	; 0x3c4
    a6e8:	e893000c 	ldm	r3, {r2, r3}
    a6ec:	e51b0148 	ldr	r0, [fp, #-328]	; 0x148
    a6f0:	eb0012a6 	bl	f190 <g_halMatlab_sendImuState_bl>
    a6f4:	e1a03000 	mov	r3, r0
    a6f8:	e50b3150 	str	r3, [fp, #-336]	; 0x150

					printf("Acc X %f \n", l_imuMeasurements_st.acc.x_f64);
    a6fc:	e24b3ff1 	sub	r3, fp, #964	; 0x3c4
    a700:	e1c320d0 	ldrd	r2, [r3]
    a704:	e51f06b0 	ldr	r0, [pc, #-1712]	; a05c <main+0x118c>
    a708:	ebfff966 	bl	8ca8 <_init+0x194>
					printf("Acc Y %f \n", l_imuMeasurements_st.acc.y_f64);
    a70c:	e24b3fef 	sub	r3, fp, #956	; 0x3bc
    a710:	e1c320d0 	ldrd	r2, [r3]
    a714:	e51f06bc 	ldr	r0, [pc, #-1724]	; a060 <main+0x1190>
    a718:	ebfff962 	bl	8ca8 <_init+0x194>
					printf("Acc Z %f \n", l_imuMeasurements_st.acc.z_f64);
    a71c:	e24b3fed 	sub	r3, fp, #948	; 0x3b4
    a720:	e1c320d0 	ldrd	r2, [r3]
    a724:	e51f06c8 	ldr	r0, [pc, #-1736]	; a064 <main+0x1194>
    a728:	ebfff95e 	bl	8ca8 <_init+0x194>
					printf("Mag X %f \n", l_imuMeasurements_st.mag.x_f64);
    a72c:	e24b3feb 	sub	r3, fp, #940	; 0x3ac
    a730:	e1c320d0 	ldrd	r2, [r3]
    a734:	e51f06d4 	ldr	r0, [pc, #-1748]	; a068 <main+0x1198>
    a738:	ebfff95a 	bl	8ca8 <_init+0x194>
					printf("Mag Y %f \n", l_imuMeasurements_st.mag.y_f64);
    a73c:	e24b3fe9 	sub	r3, fp, #932	; 0x3a4
    a740:	e1c320d0 	ldrd	r2, [r3]
    a744:	e51f06e0 	ldr	r0, [pc, #-1760]	; a06c <main+0x119c>
    a748:	ebfff956 	bl	8ca8 <_init+0x194>
					printf("Mag Z %f \n", l_imuMeasurements_st.mag.z_f64);
    a74c:	e24b3fe7 	sub	r3, fp, #924	; 0x39c
    a750:	e1c320d0 	ldrd	r2, [r3]
    a754:	e51f06ec 	ldr	r0, [pc, #-1772]	; a070 <main+0x11a0>
    a758:	ebfff952 	bl	8ca8 <_init+0x194>
					printf("Gyro yaw %f \n", l_imuMeasurements_st.gyro.yaw_f64);
    a75c:	e24b3fe1 	sub	r3, fp, #900	; 0x384
    a760:	e1c320d0 	ldrd	r2, [r3]
    a764:	e51f06f8 	ldr	r0, [pc, #-1784]	; a074 <main+0x11a4>
    a768:	ebfff94e 	bl	8ca8 <_init+0x194>
					printf("Gyro pitch %f \n", l_imuMeasurements_st.gyro.pitch_f64);
    a76c:	e24b3fe3 	sub	r3, fp, #908	; 0x38c
    a770:	e1c320d0 	ldrd	r2, [r3]
    a774:	e51f0704 	ldr	r0, [pc, #-1796]	; a078 <main+0x11a8>
    a778:	ebfff94a 	bl	8ca8 <_init+0x194>
					printf("Gyro roll %f \n", l_imuMeasurements_st.gyro.roll_f64);
    a77c:	e24b3fe5 	sub	r3, fp, #916	; 0x394
    a780:	e1c320d0 	ldrd	r2, [r3]
    a784:	e51f0710 	ldr	r0, [pc, #-1808]	; a07c <main+0x11ac>
    a788:	ebfff946 	bl	8ca8 <_init+0x194>
					printf("Temp %f \n", l_imuMeasurements_st.temperature_f64);
    a78c:	e24b3fdf 	sub	r3, fp, #892	; 0x37c
    a790:	e1c320d0 	ldrd	r2, [r3]
    a794:	e51f071c 	ldr	r0, [pc, #-1820]	; a080 <main+0x11b0>
    a798:	ebfff942 	bl	8ca8 <_init+0x194>
					printf("Press %f \n", l_imuMeasurements_st.pressure_f64);
    a79c:	e24b3fdd 	sub	r3, fp, #884	; 0x374
    a7a0:	e1c320d0 	ldrd	r2, [r3]
    a7a4:	e51f0728 	ldr	r0, [pc, #-1832]	; a084 <main+0x11b4>
    a7a8:	ebfff93e 	bl	8ca8 <_init+0x194>
					printf("##########################################\n");
    a7ac:	e51f072c 	ldr	r0, [pc, #-1836]	; a088 <main+0x11b8>
    a7b0:	ebfff957 	bl	8d14 <_init+0x200>

					if ( l_sendState_bl != M_HAL_MATLAB_SUCCESS_UI8 )
    a7b4:	e51b3150 	ldr	r3, [fp, #-336]	; 0x150
    a7b8:	e3530000 	cmp	r3, #0
    a7bc:	0a000001 	beq	a7c8 <main+0x18f8>
					{
						printf("UDP-Packet error\n");
    a7c0:	e51f073c 	ldr	r0, [pc, #-1852]	; a08c <main+0x11bc>
    a7c4:	ebfff952 	bl	8d14 <_init+0x200>
					}
					usleep( 20000 ); //20ms = 50Hz
    a7c8:	e51f0740 	ldr	r0, [pc, #-1856]	; a090 <main+0x11c0>
    a7cc:	ebfff905 	bl	8be8 <_init+0xd4>

				halImu_orientationValues l_imuMeasurements_st;
				g_halImu_initImuSensors_bl();

				int i = kbhit();
				while(i != 'q')
    a7d0:	e51b314c 	ldr	r3, [fp, #-332]	; 0x14c
    a7d4:	e3530071 	cmp	r3, #113	; 0x71
    a7d8:	1affffb3 	bne	a6ac <main+0x17dc>
						printf("UDP-Packet error\n");
					}
					usleep( 20000 ); //20ms = 50Hz
				}
			// close udp connection
			g_halMatlab_closeSocket_bl(l_udpSocket_i32);
    a7dc:	e51b0148 	ldr	r0, [fp, #-328]	; 0x148
    a7e0:	eb0013d5 	bl	f73c <g_halMatlab_closeSocket_bl>
			break;
    a7e4:	e1a00000 	nop			; (mov r0, r0)
    a7e8:	ea000247 	b	b10c <main+0x223c>

			case TESTMOTORPWM:
			{
				char BLCtrlADRExecuteOrder[DEFMotorsCount];
				char sendBuffer[1];
				int i ,j = 0;
    a7ec:	e3a03000 	mov	r3, #0
    a7f0:	e50b3060 	str	r3, [fp, #-96]	; 0x60
				unsigned int pwmValue;

				const int STEPSIZE = 5;
    a7f4:	e3a03005 	mov	r3, #5
    a7f8:	e50b3154 	str	r3, [fp, #-340]	; 0x154
				const int MAXPWMVALUE = 0x75;
    a7fc:	e3a03075 	mov	r3, #117	; 0x75
    a800:	e50b3158 	str	r3, [fp, #-344]	; 0x158

				GetBLCtrlADRExecuteOrder(&BLCtrlADRExecuteOrder[0]);
    a804:	e24b3fc5 	sub	r3, fp, #788	; 0x314
    a808:	e1a00003 	mov	r0, r3
    a80c:	eb001240 	bl	f114 <GetBLCtrlADRExecuteOrder>

				printf("Start Testing Motors with PWM");
    a810:	e51f0784 	ldr	r0, [pc, #-1924]	; a094 <main+0x11c4>
    a814:	ebfff923 	bl	8ca8 <_init+0x194>

				while(j != 1)
    a818:	ea000025 	b	a8b4 <main+0x19e4>
				{
					sendBuffer[0]=pwmValue;
    a81c:	e51b3064 	ldr	r3, [fp, #-100]	; 0x64
    a820:	e6ef3073 	uxtb	r3, r3
    a824:	e54b3318 	strb	r3, [fp, #-792]	; 0x318
					for(i = 0; i < DEFMotorsCount ;i++)
    a828:	e3a03000 	mov	r3, #0
    a82c:	e50b305c 	str	r3, [fp, #-92]	; 0x5c
    a830:	ea000010 	b	a878 <main+0x19a8>
					{
						g_lldI2c_WriteI2c_bl(BLCtrlADRExecuteOrder[i],&sendBuffer[0],1);
    a834:	e51f37a4 	ldr	r3, [pc, #-1956]	; a098 <main+0x11c8>
    a838:	e51b205c 	ldr	r2, [fp, #-92]	; 0x5c
    a83c:	e24b1054 	sub	r1, fp, #84	; 0x54
    a840:	e0812002 	add	r2, r1, r2
    a844:	e0823003 	add	r3, r2, r3
    a848:	e5d33000 	ldrb	r3, [r3]
    a84c:	e1a02003 	mov	r2, r3
    a850:	e24b3fc6 	sub	r3, fp, #792	; 0x318
    a854:	e1a00002 	mov	r0, r2
    a858:	e1a01003 	mov	r1, r3
    a85c:	e3a02001 	mov	r2, #1
    a860:	eb000fbc 	bl	e758 <g_lldI2c_WriteI2c_bl>
						usleep(10);//10us delay for HW Driver
    a864:	e3a0000a 	mov	r0, #10
    a868:	ebfff8de 	bl	8be8 <_init+0xd4>
				printf("Start Testing Motors with PWM");

				while(j != 1)
				{
					sendBuffer[0]=pwmValue;
					for(i = 0; i < DEFMotorsCount ;i++)
    a86c:	e51b305c 	ldr	r3, [fp, #-92]	; 0x5c
    a870:	e2833001 	add	r3, r3, #1
    a874:	e50b305c 	str	r3, [fp, #-92]	; 0x5c
    a878:	e51b305c 	ldr	r3, [fp, #-92]	; 0x5c
    a87c:	e3530003 	cmp	r3, #3
    a880:	daffffeb 	ble	a834 <main+0x1964>
					{
						g_lldI2c_WriteI2c_bl(BLCtrlADRExecuteOrder[i],&sendBuffer[0],1);
						usleep(10);//10us delay for HW Driver
					}

					usleep(10000);//10ms
    a884:	e51f07f0 	ldr	r0, [pc, #-2032]	; a09c <main+0x11cc>
    a888:	ebfff8d6 	bl	8be8 <_init+0xd4>

					pwmValue = pwmValue + STEPSIZE;
    a88c:	e51b3154 	ldr	r3, [fp, #-340]	; 0x154
    a890:	e51b2064 	ldr	r2, [fp, #-100]	; 0x64
    a894:	e0823003 	add	r3, r2, r3
    a898:	e50b3064 	str	r3, [fp, #-100]	; 0x64
					if(pwmValue > MAXPWMVALUE )
    a89c:	e51b2158 	ldr	r2, [fp, #-344]	; 0x158
    a8a0:	e51b3064 	ldr	r3, [fp, #-100]	; 0x64
    a8a4:	e1520003 	cmp	r2, r3
    a8a8:	2a000001 	bcs	a8b4 <main+0x19e4>
					{
						j = 1;
    a8ac:	e3a03001 	mov	r3, #1
    a8b0:	e50b3060 	str	r3, [fp, #-96]	; 0x60

				GetBLCtrlADRExecuteOrder(&BLCtrlADRExecuteOrder[0]);

				printf("Start Testing Motors with PWM");

				while(j != 1)
    a8b4:	e51b3060 	ldr	r3, [fp, #-96]	; 0x60
    a8b8:	e3530001 	cmp	r3, #1
    a8bc:	1affffd6 	bne	a81c <main+0x194c>
						j = 1;
					}

				}

			break;
    a8c0:	e1a00000 	nop			; (mov r0, r0)
    a8c4:	ea000210 	b	b10c <main+0x223c>
			}
			case TESTMOTORISR:
					{	//starts with first press of + or - than enter
						//leave with pressing 'q'
						printf("Start Testing Motors with ISR");
    a8c8:	e51f0830 	ldr	r0, [pc, #-2096]	; a0a0 <main+0x11d0>
    a8cc:	ebfff8f5 	bl	8ca8 <_init+0x194>
						InitMotor(9000);
    a8d0:	e51f0830 	ldr	r0, [pc, #-2096]	; a0a8 <main+0x11d8>
    a8d4:	eb0010df 	bl	ec58 <InitMotor>

						int sendValue=DEFMotorSetpointMIN;
    a8d8:	e3a0300a 	mov	r3, #10
    a8dc:	e50b315c 	str	r3, [fp, #-348]	; 0x15c
						int i = kbhit();
    a8e0:	eb0002c5 	bl	b3fc <kbhit>
    a8e4:	e50b0068 	str	r0, [fp, #-104]	; 0x68
						while(i != 'q'){
    a8e8:	ea00013c 	b	ade0 <main+0x1f10>
							if(GetFlagRunSendPwmToMotor() == 1){
    a8ec:	eb0011e3 	bl	f080 <GetFlagRunSendPwmToMotor>
    a8f0:	e1a03000 	mov	r3, r0
    a8f4:	e3530001 	cmp	r3, #1
    a8f8:	1a000000 	bne	a900 <main+0x1a30>
								sendPwmToMotor();
    a8fc:	eb0011e8 	bl	f0a4 <sendPwmToMotor>
							}

							i = kbhit();
    a900:	eb0002bd 	bl	b3fc <kbhit>
    a904:	e50b0068 	str	r0, [fp, #-104]	; 0x68
							int value;
							if(i == '+'){
    a908:	e51b3068 	ldr	r3, [fp, #-104]	; 0x68
    a90c:	e353002b 	cmp	r3, #43	; 0x2b
    a910:	1a000098 	bne	ab78 <main+0x1ca8>
								int k = kbhit();
    a914:	eb0002b8 	bl	b3fc <kbhit>
    a918:	e50b0160 	str	r0, [fp, #-352]	; 0x160
								switch (k){
    a91c:	e51b3160 	ldr	r3, [fp, #-352]	; 0x160
    a920:	e2433030 	sub	r3, r3, #48	; 0x30
    a924:	e3530007 	cmp	r3, #7
    a928:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    a92c:	ea00008f 	b	ab70 <main+0x1ca0>
    a930:	0000a950 	.word	0x0000a950
    a934:	0000a994 	.word	0x0000a994
    a938:	0000a9d8 	.word	0x0000a9d8
    a93c:	0000aa1c 	.word	0x0000aa1c
    a940:	0000aa60 	.word	0x0000aa60
    a944:	0000aaa4 	.word	0x0000aaa4
    a948:	0000aae8 	.word	0x0000aae8
    a94c:	0000ab2c 	.word	0x0000ab2c
								case '0':
									value = GetPwmMotor(0);
    a950:	e3a00000 	mov	r0, #0
    a954:	eb00117b 	bl	ef48 <GetPwmMotor>
    a958:	e50b006c 	str	r0, [fp, #-108]	; 0x6c
									(value < 100) ? value++ : (value=100);
    a95c:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    a960:	e3530063 	cmp	r3, #99	; 0x63
    a964:	ca000003 	bgt	a978 <main+0x1aa8>
    a968:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    a96c:	e2833001 	add	r3, r3, #1
    a970:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    a974:	ea000001 	b	a980 <main+0x1ab0>
    a978:	e3a03064 	mov	r3, #100	; 0x64
    a97c:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
									SetPwmMotor(DEFMotorNo1_PWM, value ,0);
    a980:	e3a00001 	mov	r0, #1
    a984:	e51b106c 	ldr	r1, [fp, #-108]	; 0x6c
    a988:	e3a02000 	mov	r2, #0
    a98c:	eb0010c8 	bl	ecb4 <SetPwmMotor>
									break;
    a990:	ea000077 	b	ab74 <main+0x1ca4>
								case '1':
									value = GetPwmMotor(1);
    a994:	e3a00001 	mov	r0, #1
    a998:	eb00116a 	bl	ef48 <GetPwmMotor>
    a99c:	e50b006c 	str	r0, [fp, #-108]	; 0x6c
									(value < 100)? value++: (value=100);
    a9a0:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    a9a4:	e3530063 	cmp	r3, #99	; 0x63
    a9a8:	ca000003 	bgt	a9bc <main+0x1aec>
    a9ac:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    a9b0:	e2833001 	add	r3, r3, #1
    a9b4:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    a9b8:	ea000001 	b	a9c4 <main+0x1af4>
    a9bc:	e3a03064 	mov	r3, #100	; 0x64
    a9c0:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
									SetPwmMotor(DEFMotorNo2_PWM, value ,0);
    a9c4:	e3a00002 	mov	r0, #2
    a9c8:	e51b106c 	ldr	r1, [fp, #-108]	; 0x6c
    a9cc:	e3a02000 	mov	r2, #0
    a9d0:	eb0010b7 	bl	ecb4 <SetPwmMotor>
									break;
    a9d4:	ea000066 	b	ab74 <main+0x1ca4>
								case '2':
									value = GetPwmMotor(2);
    a9d8:	e3a00002 	mov	r0, #2
    a9dc:	eb001159 	bl	ef48 <GetPwmMotor>
    a9e0:	e50b006c 	str	r0, [fp, #-108]	; 0x6c
									(value < 100)? value++: (value=100);
    a9e4:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    a9e8:	e3530063 	cmp	r3, #99	; 0x63
    a9ec:	ca000003 	bgt	aa00 <main+0x1b30>
    a9f0:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    a9f4:	e2833001 	add	r3, r3, #1
    a9f8:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    a9fc:	ea000001 	b	aa08 <main+0x1b38>
    aa00:	e3a03064 	mov	r3, #100	; 0x64
    aa04:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
									SetPwmMotor(DEFMotorNo3_PWM, value ,0);
    aa08:	e3a00004 	mov	r0, #4
    aa0c:	e51b106c 	ldr	r1, [fp, #-108]	; 0x6c
    aa10:	e3a02000 	mov	r2, #0
    aa14:	eb0010a6 	bl	ecb4 <SetPwmMotor>
									break;
    aa18:	ea000055 	b	ab74 <main+0x1ca4>
								case '3':
									value = GetPwmMotor(3);
    aa1c:	e3a00003 	mov	r0, #3
    aa20:	eb001148 	bl	ef48 <GetPwmMotor>
    aa24:	e50b006c 	str	r0, [fp, #-108]	; 0x6c
									(value < 100)? value++: (value=100);
    aa28:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    aa2c:	e3530063 	cmp	r3, #99	; 0x63
    aa30:	ca000003 	bgt	aa44 <main+0x1b74>
    aa34:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    aa38:	e2833001 	add	r3, r3, #1
    aa3c:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    aa40:	ea000001 	b	aa4c <main+0x1b7c>
    aa44:	e3a03064 	mov	r3, #100	; 0x64
    aa48:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
									SetPwmMotor(DEFMotorNo4_PWM, value ,0);
    aa4c:	e3a00008 	mov	r0, #8
    aa50:	e51b106c 	ldr	r1, [fp, #-108]	; 0x6c
    aa54:	e3a02000 	mov	r2, #0
    aa58:	eb001095 	bl	ecb4 <SetPwmMotor>
									break;
    aa5c:	ea000044 	b	ab74 <main+0x1ca4>
								case '4':
									value = GetPwmMotor(4);
    aa60:	e3a00004 	mov	r0, #4
    aa64:	eb001137 	bl	ef48 <GetPwmMotor>
    aa68:	e50b006c 	str	r0, [fp, #-108]	; 0x6c
									(value < 100)? value++: (value=100);
    aa6c:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    aa70:	e3530063 	cmp	r3, #99	; 0x63
    aa74:	ca000003 	bgt	aa88 <main+0x1bb8>
    aa78:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    aa7c:	e2833001 	add	r3, r3, #1
    aa80:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    aa84:	ea000001 	b	aa90 <main+0x1bc0>
    aa88:	e3a03064 	mov	r3, #100	; 0x64
    aa8c:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
									SetPwmMotor(DEFMotorNo5_PWM, value ,0);
    aa90:	e3a00010 	mov	r0, #16
    aa94:	e51b106c 	ldr	r1, [fp, #-108]	; 0x6c
    aa98:	e3a02000 	mov	r2, #0
    aa9c:	eb001084 	bl	ecb4 <SetPwmMotor>
									break;
    aaa0:	ea000033 	b	ab74 <main+0x1ca4>
								case '5':
									value = GetPwmMotor(5);
    aaa4:	e3a00005 	mov	r0, #5
    aaa8:	eb001126 	bl	ef48 <GetPwmMotor>
    aaac:	e50b006c 	str	r0, [fp, #-108]	; 0x6c
									(value < 100)? value++: (value=100);
    aab0:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    aab4:	e3530063 	cmp	r3, #99	; 0x63
    aab8:	ca000003 	bgt	aacc <main+0x1bfc>
    aabc:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    aac0:	e2833001 	add	r3, r3, #1
    aac4:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    aac8:	ea000001 	b	aad4 <main+0x1c04>
    aacc:	e3a03064 	mov	r3, #100	; 0x64
    aad0:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
									SetPwmMotor(DEFMotorNo6_PWM, value ,0);
    aad4:	e3a00020 	mov	r0, #32
    aad8:	e51b106c 	ldr	r1, [fp, #-108]	; 0x6c
    aadc:	e3a02000 	mov	r2, #0
    aae0:	eb001073 	bl	ecb4 <SetPwmMotor>
									break;
    aae4:	ea000022 	b	ab74 <main+0x1ca4>
								case '6':
									value = GetPwmMotor(6);
    aae8:	e3a00006 	mov	r0, #6
    aaec:	eb001115 	bl	ef48 <GetPwmMotor>
    aaf0:	e50b006c 	str	r0, [fp, #-108]	; 0x6c
									(value < 100)? value++: (value=100);
    aaf4:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    aaf8:	e3530063 	cmp	r3, #99	; 0x63
    aafc:	ca000003 	bgt	ab10 <main+0x1c40>
    ab00:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    ab04:	e2833001 	add	r3, r3, #1
    ab08:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    ab0c:	ea000001 	b	ab18 <main+0x1c48>
    ab10:	e3a03064 	mov	r3, #100	; 0x64
    ab14:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
									SetPwmMotor(DEFMotorNo7_PWM, value ,0);
    ab18:	e3a00040 	mov	r0, #64	; 0x40
    ab1c:	e51b106c 	ldr	r1, [fp, #-108]	; 0x6c
    ab20:	e3a02000 	mov	r2, #0
    ab24:	eb001062 	bl	ecb4 <SetPwmMotor>
									break;
    ab28:	ea000011 	b	ab74 <main+0x1ca4>
								case '7':
									value = GetPwmMotor(7);
    ab2c:	e3a00007 	mov	r0, #7
    ab30:	eb001104 	bl	ef48 <GetPwmMotor>
    ab34:	e50b006c 	str	r0, [fp, #-108]	; 0x6c
									(value < 100)? value++: (value=100);
    ab38:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    ab3c:	e3530063 	cmp	r3, #99	; 0x63
    ab40:	ca000003 	bgt	ab54 <main+0x1c84>
    ab44:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    ab48:	e2833001 	add	r3, r3, #1
    ab4c:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    ab50:	ea000001 	b	ab5c <main+0x1c8c>
    ab54:	e3a03064 	mov	r3, #100	; 0x64
    ab58:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
									SetPwmMotor(DEFMotorNo8_PWM, value ,0);
    ab5c:	e3a00080 	mov	r0, #128	; 0x80
    ab60:	e51b106c 	ldr	r1, [fp, #-108]	; 0x6c
    ab64:	e3a02000 	mov	r2, #0
    ab68:	eb001051 	bl	ecb4 <SetPwmMotor>
									break;
    ab6c:	ea000000 	b	ab74 <main+0x1ca4>
								default:
									break;
    ab70:	e1a00000 	nop			; (mov r0, r0)
    ab74:	ea000099 	b	ade0 <main+0x1f10>
								}
							}else if(i == 45){
    ab78:	e51b3068 	ldr	r3, [fp, #-104]	; 0x68
    ab7c:	e353002d 	cmp	r3, #45	; 0x2d
    ab80:	1a000096 	bne	ade0 <main+0x1f10>
								int k = kbhit();
    ab84:	eb00021c 	bl	b3fc <kbhit>
    ab88:	e50b0164 	str	r0, [fp, #-356]	; 0x164
								switch (k){
    ab8c:	e51b3164 	ldr	r3, [fp, #-356]	; 0x164
    ab90:	e2433030 	sub	r3, r3, #48	; 0x30
    ab94:	e3530007 	cmp	r3, #7
    ab98:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    ab9c:	ea00008f 	b	ade0 <main+0x1f10>
    aba0:	0000abc0 	.word	0x0000abc0
    aba4:	0000ac04 	.word	0x0000ac04
    aba8:	0000ac48 	.word	0x0000ac48
    abac:	0000ac8c 	.word	0x0000ac8c
    abb0:	0000acd0 	.word	0x0000acd0
    abb4:	0000ad14 	.word	0x0000ad14
    abb8:	0000ad58 	.word	0x0000ad58
    abbc:	0000ad9c 	.word	0x0000ad9c
								case '0':
									value = GetPwmMotor(0);
    abc0:	e3a00000 	mov	r0, #0
    abc4:	eb0010df 	bl	ef48 <GetPwmMotor>
    abc8:	e50b006c 	str	r0, [fp, #-108]	; 0x6c
									value > 0? value--: (value=DEFMotorSetpointMIN);
    abcc:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    abd0:	e3530000 	cmp	r3, #0
    abd4:	da000003 	ble	abe8 <main+0x1d18>
    abd8:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    abdc:	e2433001 	sub	r3, r3, #1
    abe0:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    abe4:	ea000001 	b	abf0 <main+0x1d20>
    abe8:	e3a0300a 	mov	r3, #10
    abec:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
									SetPwmMotor(DEFMotorNo1_PWM, value ,0);
    abf0:	e3a00001 	mov	r0, #1
    abf4:	e51b106c 	ldr	r1, [fp, #-108]	; 0x6c
    abf8:	e3a02000 	mov	r2, #0
    abfc:	eb00102c 	bl	ecb4 <SetPwmMotor>
									break;
    ac00:	ea000076 	b	ade0 <main+0x1f10>
								case '1':
									value = GetPwmMotor(1);
    ac04:	e3a00001 	mov	r0, #1
    ac08:	eb0010ce 	bl	ef48 <GetPwmMotor>
    ac0c:	e50b006c 	str	r0, [fp, #-108]	; 0x6c
									value > 0? value--: (value=DEFMotorSetpointMIN);
    ac10:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    ac14:	e3530000 	cmp	r3, #0
    ac18:	da000003 	ble	ac2c <main+0x1d5c>
    ac1c:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    ac20:	e2433001 	sub	r3, r3, #1
    ac24:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    ac28:	ea000001 	b	ac34 <main+0x1d64>
    ac2c:	e3a0300a 	mov	r3, #10
    ac30:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
									SetPwmMotor(DEFMotorNo2_PWM, value ,0);
    ac34:	e3a00002 	mov	r0, #2
    ac38:	e51b106c 	ldr	r1, [fp, #-108]	; 0x6c
    ac3c:	e3a02000 	mov	r2, #0
    ac40:	eb00101b 	bl	ecb4 <SetPwmMotor>
									break;
    ac44:	ea000065 	b	ade0 <main+0x1f10>
								case '2':
									value = GetPwmMotor(2);
    ac48:	e3a00002 	mov	r0, #2
    ac4c:	eb0010bd 	bl	ef48 <GetPwmMotor>
    ac50:	e50b006c 	str	r0, [fp, #-108]	; 0x6c
									value > 0? value--: (value=DEFMotorSetpointMIN);
    ac54:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    ac58:	e3530000 	cmp	r3, #0
    ac5c:	da000003 	ble	ac70 <main+0x1da0>
    ac60:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    ac64:	e2433001 	sub	r3, r3, #1
    ac68:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    ac6c:	ea000001 	b	ac78 <main+0x1da8>
    ac70:	e3a0300a 	mov	r3, #10
    ac74:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
									SetPwmMotor(DEFMotorNo3_PWM, value ,0);
    ac78:	e3a00004 	mov	r0, #4
    ac7c:	e51b106c 	ldr	r1, [fp, #-108]	; 0x6c
    ac80:	e3a02000 	mov	r2, #0
    ac84:	eb00100a 	bl	ecb4 <SetPwmMotor>
									break;
    ac88:	ea000054 	b	ade0 <main+0x1f10>
								case '3':
									value = GetPwmMotor(3);
    ac8c:	e3a00003 	mov	r0, #3
    ac90:	eb0010ac 	bl	ef48 <GetPwmMotor>
    ac94:	e50b006c 	str	r0, [fp, #-108]	; 0x6c
									value > 0? value--: (value=DEFMotorSetpointMIN);
    ac98:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    ac9c:	e3530000 	cmp	r3, #0
    aca0:	da000003 	ble	acb4 <main+0x1de4>
    aca4:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    aca8:	e2433001 	sub	r3, r3, #1
    acac:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    acb0:	ea000001 	b	acbc <main+0x1dec>
    acb4:	e3a0300a 	mov	r3, #10
    acb8:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
									SetPwmMotor(DEFMotorNo4_PWM, value ,0);
    acbc:	e3a00008 	mov	r0, #8
    acc0:	e51b106c 	ldr	r1, [fp, #-108]	; 0x6c
    acc4:	e3a02000 	mov	r2, #0
    acc8:	eb000ff9 	bl	ecb4 <SetPwmMotor>
									break;
    accc:	ea000043 	b	ade0 <main+0x1f10>
								case '4':
									value = GetPwmMotor(4);
    acd0:	e3a00004 	mov	r0, #4
    acd4:	eb00109b 	bl	ef48 <GetPwmMotor>
    acd8:	e50b006c 	str	r0, [fp, #-108]	; 0x6c
									value > 0? value--: (value=DEFMotorSetpointMIN);
    acdc:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    ace0:	e3530000 	cmp	r3, #0
    ace4:	da000003 	ble	acf8 <main+0x1e28>
    ace8:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    acec:	e2433001 	sub	r3, r3, #1
    acf0:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    acf4:	ea000001 	b	ad00 <main+0x1e30>
    acf8:	e3a0300a 	mov	r3, #10
    acfc:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
									SetPwmMotor(DEFMotorNo5_PWM, value ,0);
    ad00:	e3a00010 	mov	r0, #16
    ad04:	e51b106c 	ldr	r1, [fp, #-108]	; 0x6c
    ad08:	e3a02000 	mov	r2, #0
    ad0c:	eb000fe8 	bl	ecb4 <SetPwmMotor>
									break;
    ad10:	ea000032 	b	ade0 <main+0x1f10>
								case '5':
									value = GetPwmMotor(5);
    ad14:	e3a00005 	mov	r0, #5
    ad18:	eb00108a 	bl	ef48 <GetPwmMotor>
    ad1c:	e50b006c 	str	r0, [fp, #-108]	; 0x6c
									value > 0? value--: (value=DEFMotorSetpointMIN);
    ad20:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    ad24:	e3530000 	cmp	r3, #0
    ad28:	da000003 	ble	ad3c <main+0x1e6c>
    ad2c:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    ad30:	e2433001 	sub	r3, r3, #1
    ad34:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    ad38:	ea000001 	b	ad44 <main+0x1e74>
    ad3c:	e3a0300a 	mov	r3, #10
    ad40:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
									SetPwmMotor(DEFMotorNo6_PWM, value ,0);
    ad44:	e3a00020 	mov	r0, #32
    ad48:	e51b106c 	ldr	r1, [fp, #-108]	; 0x6c
    ad4c:	e3a02000 	mov	r2, #0
    ad50:	eb000fd7 	bl	ecb4 <SetPwmMotor>
									break;
    ad54:	ea000021 	b	ade0 <main+0x1f10>
								case '6':
									value = GetPwmMotor(6);
    ad58:	e3a00006 	mov	r0, #6
    ad5c:	eb001079 	bl	ef48 <GetPwmMotor>
    ad60:	e50b006c 	str	r0, [fp, #-108]	; 0x6c
									value > 0? value--: (value=DEFMotorSetpointMIN);
    ad64:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    ad68:	e3530000 	cmp	r3, #0
    ad6c:	da000003 	ble	ad80 <main+0x1eb0>
    ad70:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    ad74:	e2433001 	sub	r3, r3, #1
    ad78:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    ad7c:	ea000001 	b	ad88 <main+0x1eb8>
    ad80:	e3a0300a 	mov	r3, #10
    ad84:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
									SetPwmMotor(DEFMotorNo7_PWM, value ,0);
    ad88:	e3a00040 	mov	r0, #64	; 0x40
    ad8c:	e51b106c 	ldr	r1, [fp, #-108]	; 0x6c
    ad90:	e3a02000 	mov	r2, #0
    ad94:	eb000fc6 	bl	ecb4 <SetPwmMotor>
									break;
    ad98:	ea000010 	b	ade0 <main+0x1f10>
								case '7':
									value = GetPwmMotor(7);
    ad9c:	e3a00007 	mov	r0, #7
    ada0:	eb001068 	bl	ef48 <GetPwmMotor>
    ada4:	e50b006c 	str	r0, [fp, #-108]	; 0x6c
									value > 0? value--: (value=DEFMotorSetpointMIN);
    ada8:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    adac:	e3530000 	cmp	r3, #0
    adb0:	da000003 	ble	adc4 <main+0x1ef4>
    adb4:	e51b306c 	ldr	r3, [fp, #-108]	; 0x6c
    adb8:	e2433001 	sub	r3, r3, #1
    adbc:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
    adc0:	ea000001 	b	adcc <main+0x1efc>
    adc4:	e3a0300a 	mov	r3, #10
    adc8:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
									SetPwmMotor(DEFMotorNo8_PWM, value ,0);
    adcc:	e3a00080 	mov	r0, #128	; 0x80
    add0:	e51b106c 	ldr	r1, [fp, #-108]	; 0x6c
    add4:	e3a02000 	mov	r2, #0
    add8:	eb000fb5 	bl	ecb4 <SetPwmMotor>
									break;
    addc:	e1a00000 	nop			; (mov r0, r0)
						printf("Start Testing Motors with ISR");
						InitMotor(9000);

						int sendValue=DEFMotorSetpointMIN;
						int i = kbhit();
						while(i != 'q'){
    ade0:	e51b3068 	ldr	r3, [fp, #-104]	; 0x68
    ade4:	e3530071 	cmp	r3, #113	; 0x71
    ade8:	1afffebf 	bne	a8ec <main+0x1a1c>
								}
							}
							/* Do Other Things*/
						}

					break;
    adec:	ea0000c6 	b	b10c <main+0x223c>
    adf0:	e1a0300d 	mov	r3, sp
    adf4:	e1a05003 	mov	r5, r3
					}

			case TESTMOTORTXT:
					{
						FILE *testFile;
						int lineLenght =80;
    adf8:	e3a03050 	mov	r3, #80	; 0x50
    adfc:	e50b3168 	str	r3, [fp, #-360]	; 0x168
						char line[lineLenght];
    ae00:	e51b4168 	ldr	r4, [fp, #-360]	; 0x168
    ae04:	e2443001 	sub	r3, r4, #1
    ae08:	e50b316c 	str	r3, [fp, #-364]	; 0x16c
    ae0c:	e1a03004 	mov	r3, r4
    ae10:	e1a02003 	mov	r2, r3
    ae14:	e3a03000 	mov	r3, #0
    ae18:	e1a00183 	lsl	r0, r3, #3
    ae1c:	e50b0438 	str	r0, [fp, #-1080]	; 0x438
    ae20:	e51b1438 	ldr	r1, [fp, #-1080]	; 0x438
    ae24:	e1811ea2 	orr	r1, r1, r2, lsr #29
    ae28:	e50b1438 	str	r1, [fp, #-1080]	; 0x438
    ae2c:	e1a00182 	lsl	r0, r2, #3
    ae30:	e50b043c 	str	r0, [fp, #-1084]	; 0x43c
    ae34:	e1a03004 	mov	r3, r4
    ae38:	e1a02003 	mov	r2, r3
    ae3c:	e3a03000 	mov	r3, #0
    ae40:	e1a01183 	lsl	r1, r3, #3
    ae44:	e50b1440 	str	r1, [fp, #-1088]	; 0x440
    ae48:	e51b0440 	ldr	r0, [fp, #-1088]	; 0x440
    ae4c:	e1800ea2 	orr	r0, r0, r2, lsr #29
    ae50:	e50b0440 	str	r0, [fp, #-1088]	; 0x440
    ae54:	e1a01182 	lsl	r1, r2, #3
    ae58:	e50b1444 	str	r1, [fp, #-1092]	; 0x444
    ae5c:	e1a03004 	mov	r3, r4
    ae60:	e2833007 	add	r3, r3, #7
    ae64:	e1a031a3 	lsr	r3, r3, #3
    ae68:	e1a03183 	lsl	r3, r3, #3
    ae6c:	e04dd003 	sub	sp, sp, r3
    ae70:	e28d3050 	add	r3, sp, #80	; 0x50
    ae74:	e2833000 	add	r3, r3, #0
    ae78:	e50b3170 	str	r3, [fp, #-368]	; 0x170
						int delayS=1;
    ae7c:	e3a03001 	mov	r3, #1
    ae80:	e50b3070 	str	r3, [fp, #-112]	; 0x70
						time_t timeStamp , currentTime;


						printf("Start Testing Motors reading txt file\n");
    ae84:	e51f0de8 	ldr	r0, [pc, #-3560]	; a0a4 <main+0x11d4>
    ae88:	ebfff7a1 	bl	8d14 <_init+0x200>

						InitMotor(9000);
    ae8c:	e51f0dec 	ldr	r0, [pc, #-3564]	; a0a8 <main+0x11d8>
    ae90:	eb000f70 	bl	ec58 <InitMotor>

						//Wait 1 Sec
						time(&timeStamp);
    ae94:	e24b3fc7 	sub	r3, fp, #796	; 0x31c
    ae98:	e1a00003 	mov	r0, r3
    ae9c:	ebfff78d 	bl	8cd8 <_init+0x1c4>
						time(&currentTime);
    aea0:	e24b3e32 	sub	r3, fp, #800	; 0x320
    aea4:	e1a00003 	mov	r0, r3
    aea8:	ebfff78a 	bl	8cd8 <_init+0x1c4>
						if( difftime(currentTime, timeStamp) >= 1){
    aeac:	e51b3320 	ldr	r3, [fp, #-800]	; 0x320
    aeb0:	e51b231c 	ldr	r2, [fp, #-796]	; 0x31c
    aeb4:	e1a00003 	mov	r0, r3
    aeb8:	e1a01002 	mov	r1, r2
    aebc:	ebfff7af 	bl	8d80 <_init+0x26c>
    aec0:	eeb06b40 	vmov.f64	d6, d0
    aec4:	ed9f7b9b 	vldr	d7, [pc, #620]	; b138 <main+0x2268>
    aec8:	eeb46bc7 	vcmpe.f64	d6, d7
    aecc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    aed0:	ba000004 	blt	aee8 <main+0x2018>
							if(GetFlagRunSendPwmToMotor() == 1){
    aed4:	eb001069 	bl	f080 <GetFlagRunSendPwmToMotor>
    aed8:	e1a03000 	mov	r3, r0
    aedc:	e3530001 	cmp	r3, #1
    aee0:	1a000000 	bne	aee8 <main+0x2018>
								sendPwmToMotor();
    aee4:	eb00106e 	bl	f0a4 <sendPwmToMotor>
							}
						}
						if ((testFile = fopen("/home/pi/testfiles/MotorTest.txt", "r")) == NULL){
    aee8:	e59f0250 	ldr	r0, [pc, #592]	; b140 <main+0x2270>
    aeec:	e59f1250 	ldr	r1, [pc, #592]	; b144 <main+0x2274>
    aef0:	ebfff733 	bl	8bc4 <_init+0xb0>
    aef4:	e50b0174 	str	r0, [fp, #-372]	; 0x174
    aef8:	e51b3174 	ldr	r3, [fp, #-372]	; 0x174
    aefc:	e3530000 	cmp	r3, #0
    af00:	1a000007 	bne	af24 <main+0x2054>
							fprintf(stderr, "File kann nicht geöffnet werden");
    af04:	e59f323c 	ldr	r3, [pc, #572]	; b148 <main+0x2278>
    af08:	e5933000 	ldr	r3, [r3]
    af0c:	e59f0238 	ldr	r0, [pc, #568]	; b14c <main+0x227c>
    af10:	e3a01001 	mov	r1, #1
    af14:	e3a02020 	mov	r2, #32
    af18:	ebfff76b 	bl	8ccc <_init+0x1b8>
							exit(0);
    af1c:	e3a00000 	mov	r0, #0
    af20:	ebfff793 	bl	8d74 <_init+0x260>
						}

						time(&timeStamp);
    af24:	e24b3fc7 	sub	r3, fp, #796	; 0x31c
    af28:	e1a00003 	mov	r0, r3
    af2c:	ebfff769 	bl	8cd8 <_init+0x1c4>

						while(1){ // test ends when end of file reached
							if(GetFlagRunSendPwmToMotor() == 1){
    af30:	eb001052 	bl	f080 <GetFlagRunSendPwmToMotor>
    af34:	e1a03000 	mov	r3, r0
    af38:	e3530001 	cmp	r3, #1
    af3c:	1a000000 	bne	af44 <main+0x2074>
								sendPwmToMotor();
    af40:	eb001057 	bl	f0a4 <sendPwmToMotor>
							}

							time(&currentTime);
    af44:	e24b3e32 	sub	r3, fp, #800	; 0x320
    af48:	e1a00003 	mov	r0, r3
    af4c:	ebfff761 	bl	8cd8 <_init+0x1c4>
							if( difftime(currentTime, timeStamp) >= delayS){
    af50:	e51b3320 	ldr	r3, [fp, #-800]	; 0x320
    af54:	e51b231c 	ldr	r2, [fp, #-796]	; 0x31c
    af58:	e1a00003 	mov	r0, r3
    af5c:	e1a01002 	mov	r1, r2
    af60:	ebfff786 	bl	8d80 <_init+0x26c>
    af64:	eeb06b40 	vmov.f64	d6, d0
    af68:	e51b3070 	ldr	r3, [fp, #-112]	; 0x70
    af6c:	ee053a90 	vmov	s11, r3
    af70:	eeb87be5 	vcvt.f64.s32	d7, s11
    af74:	eeb46bc7 	vcmpe.f64	d6, d7
    af78:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    af7c:	aa000000 	bge	af84 <main+0x20b4>
									delayS = decodeline(&line[0], sizeof(line));
								}else{
									break;
								}
							}
						}
    af80:	eaffffea 	b	af30 <main+0x2060>
								sendPwmToMotor();
							}

							time(&currentTime);
							if( difftime(currentTime, timeStamp) >= delayS){
								time(&timeStamp);
    af84:	e24b3fc7 	sub	r3, fp, #796	; 0x31c
    af88:	e1a00003 	mov	r0, r3
    af8c:	ebfff751 	bl	8cd8 <_init+0x1c4>
								if((fgets(line, lineLenght, testFile)) != NULL)
    af90:	e51b3170 	ldr	r3, [fp, #-368]	; 0x170
    af94:	e1a00003 	mov	r0, r3
    af98:	e51b1168 	ldr	r1, [fp, #-360]	; 0x168
    af9c:	e51b2174 	ldr	r2, [fp, #-372]	; 0x174
    afa0:	ebfff6fe 	bl	8ba0 <_init+0x8c>
    afa4:	e1a03000 	mov	r3, r0
    afa8:	e3530000 	cmp	r3, #0
    afac:	0a00000a 	beq	afdc <main+0x210c>
								{
									printf("\n%s", line);
    afb0:	e51b3170 	ldr	r3, [fp, #-368]	; 0x170
    afb4:	e59f0194 	ldr	r0, [pc, #404]	; b150 <main+0x2280>
    afb8:	e1a01003 	mov	r1, r3
    afbc:	ebfff739 	bl	8ca8 <_init+0x194>
									delayS = decodeline(&line[0], sizeof(line));
    afc0:	e51b3170 	ldr	r3, [fp, #-368]	; 0x170
    afc4:	e1a02004 	mov	r2, r4
    afc8:	e1a00003 	mov	r0, r3
    afcc:	e1a01002 	mov	r1, r2
    afd0:	eb000134 	bl	b4a8 <decodeline>
    afd4:	e50b0070 	str	r0, [fp, #-112]	; 0x70
								}else{
									break;
								}
							}
						}
    afd8:	eaffffd4 	b	af30 <main+0x2060>
								if((fgets(line, lineLenght, testFile)) != NULL)
								{
									printf("\n%s", line);
									delayS = decodeline(&line[0], sizeof(line));
								}else{
									break;
    afdc:	e1a00000 	nop			; (mov r0, r0)
							}
						}



						break;
    afe0:	e1a00000 	nop			; (mov r0, r0)
    afe4:	e1a0d005 	mov	sp, r5
    afe8:	ea000047 	b	b10c <main+0x223c>
					}

			default:
			case TESTEND:
			{
				printf("Nothing found");
    afec:	e59f0160 	ldr	r0, [pc, #352]	; b154 <main+0x2284>
    aff0:	ebfff72c 	bl	8ca8 <_init+0x194>
				break;
    aff4:	ea000044 	b	b10c <main+0x223c>
			}


		case TESTGUI:
					{
						printf("Sending random numbers to test gui");
    aff8:	e59f0158 	ldr	r0, [pc, #344]	; b158 <main+0x2288>
    affc:	ebfff729 	bl	8ca8 <_init+0x194>

						struct sockaddr_in serverAddress;
						socklen_t addressSize;

						/*Create UDP socket*/
						clientSocket = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);
    b000:	e3a00002 	mov	r0, #2
    b004:	e3a01002 	mov	r1, #2
    b008:	e3a02011 	mov	r2, #17
    b00c:	ebfff710 	bl	8c54 <_init+0x140>
    b010:	e50b0178 	str	r0, [fp, #-376]	; 0x178

						serverAddress.sin_family = PF_INET;
    b014:	e59f3140 	ldr	r3, [pc, #320]	; b15c <main+0x228c>
    b018:	e3a02002 	mov	r2, #2
    b01c:	e24b0054 	sub	r0, fp, #84	; 0x54
    b020:	e18020b3 	strh	r2, [r0, r3]
						serverAddress.sin_port = htons(REMOTE_PORT);
    b024:	e59f0134 	ldr	r0, [pc, #308]	; b160 <main+0x2290>
    b028:	ebfff6e2 	bl	8bb8 <_init+0xa4>
    b02c:	e1a03000 	mov	r3, r0
    b030:	e1a02003 	mov	r2, r3
    b034:	e59f3128 	ldr	r3, [pc, #296]	; b164 <main+0x2294>
    b038:	e24b1054 	sub	r1, fp, #84	; 0x54
    b03c:	e18120b3 	strh	r2, [r1, r3]
						serverAddress.sin_addr.s_addr = inet_addr(REMOTE_ADDR);
    b040:	e59f0120 	ldr	r0, [pc, #288]	; b168 <main+0x2298>
    b044:	ebfff6cc 	bl	8b7c <_init+0x68>
    b048:	e1a03000 	mov	r3, r0
    b04c:	e50b332c 	str	r3, [fp, #-812]	; 0x32c

						memset(serverAddress.sin_zero, '\0', sizeof(serverAddress.sin_zero));
    b050:	e24b3e33 	sub	r3, fp, #816	; 0x330
    b054:	e2833008 	add	r3, r3, #8
    b058:	e1a00003 	mov	r0, r3
    b05c:	e3a01000 	mov	r1, #0
    b060:	e3a02008 	mov	r2, #8
    b064:	ebfff6d9 	bl	8bd0 <_init+0xbc>

						/*Initialize size variable to be used later on*/
						addressSize = sizeof(serverAddress);
    b068:	e3a03010 	mov	r3, #16
    b06c:	e50b317c 	str	r3, [fp, #-380]	; 0x17c

						printf("Start Sending Messages\n");
    b070:	e59f00f4 	ldr	r0, [pc, #244]	; b16c <main+0x229c>
    b074:	ebfff726 	bl	8d14 <_init+0x200>

						int i = kbhit();
    b078:	eb0000df 	bl	b3fc <kbhit>
    b07c:	e50b0180 	str	r0, [fp, #-384]	; 0x180
						while(i != 'q')
    b080:	ea00001d 	b	b0fc <main+0x222c>
						{
							sleep(1);
    b084:	e3a00001 	mov	r0, #1
    b088:	ebfff71e 	bl	8d08 <_init+0x1f4>

							int random = rand()%150;
    b08c:	ebfff72f 	bl	8d50 <_init+0x23c>
    b090:	e1a03000 	mov	r3, r0
    b094:	e59f20d4 	ldr	r2, [pc, #212]	; b170 <main+0x22a0>
    b098:	e0c20392 	smull	r0, r2, r2, r3
    b09c:	e1a01242 	asr	r1, r2, #4
    b0a0:	e1a02fc3 	asr	r2, r3, #31
    b0a4:	e0622001 	rsb	r2, r2, r1
    b0a8:	e3a01096 	mov	r1, #150	; 0x96
    b0ac:	e0020291 	mul	r2, r1, r2
    b0b0:	e0623003 	rsb	r3, r2, r3
    b0b4:	e50b3184 	str	r3, [fp, #-388]	; 0x184
							char randomToSend[3];



							sprintf(randomToSend,"%d\n",random);
    b0b8:	e24b3fcd 	sub	r3, fp, #820	; 0x334
    b0bc:	e1a00003 	mov	r0, r3
    b0c0:	e59f10ac 	ldr	r1, [pc, #172]	; b174 <main+0x22a4>
    b0c4:	e51b2184 	ldr	r2, [fp, #-388]	; 0x184
    b0c8:	ebfff72f 	bl	8d8c <_init+0x278>


							sendto(clientSocket, randomToSend, sizeof(randomToSend), 0,
    b0cc:	e24b3fcd 	sub	r3, fp, #820	; 0x334
    b0d0:	e24b2e33 	sub	r2, fp, #816	; 0x330
    b0d4:	e58d2000 	str	r2, [sp]
    b0d8:	e51b217c 	ldr	r2, [fp, #-380]	; 0x17c
    b0dc:	e58d2004 	str	r2, [sp, #4]
    b0e0:	e51b0178 	ldr	r0, [fp, #-376]	; 0x178
    b0e4:	e1a01003 	mov	r1, r3
    b0e8:	e3a02003 	mov	r2, #3
    b0ec:	e3a03000 	mov	r3, #0
    b0f0:	ebfff6ad 	bl	8bac <_init+0x98>
									(struct sockaddr *)&serverAddress,addressSize);
							printf("And send again....\n");
    b0f4:	e59f007c 	ldr	r0, [pc, #124]	; b178 <main+0x22a8>
    b0f8:	ebfff705 	bl	8d14 <_init+0x200>
						addressSize = sizeof(serverAddress);

						printf("Start Sending Messages\n");

						int i = kbhit();
						while(i != 'q')
    b0fc:	e51b3180 	ldr	r3, [fp, #-384]	; 0x180
    b100:	e3530071 	cmp	r3, #113	; 0x71
    b104:	1affffde 	bne	b084 <main+0x21b4>
							sendto(clientSocket, randomToSend, sizeof(randomToSend), 0,
									(struct sockaddr *)&serverAddress,addressSize);
							printf("And send again....\n");

						}
						break;
    b108:	e1a00000 	nop			; (mov r0, r0)
    b10c:	e3a03001 	mov	r3, #1
    b110:	e51bd420 	ldr	sp, [fp, #-1056]	; 0x420
    b114:	e3530001 	cmp	r3, #1
    b118:	1a000000 	bne	b120 <main+0x2250>
					}
		}
	}//end while(1)
    b11c:	eafff771 	b	8ee8 <main+0x18>
    b120:	e1a0300a 	mov	r3, sl
	return 0;
}
    b124:	e1a00003 	mov	r0, r3
    b128:	e24bd050 	sub	sp, fp, #80	; 0x50
    b12c:	ecbd8b0c 	vpop	{d8-d13}
    b130:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b134:	e1a00000 	nop			; (mov r0, r0)
    b138:	00000000 	.word	0x00000000
    b13c:	3ff00000 	.word	0x3ff00000
    b140:	0001281c 	.word	0x0001281c
    b144:	00012840 	.word	0x00012840
    b148:	0001b2a0 	.word	0x0001b2a0
    b14c:	00012844 	.word	0x00012844
    b150:	00012868 	.word	0x00012868
    b154:	0001286c 	.word	0x0001286c
    b158:	0001287c 	.word	0x0001287c
    b15c:	fffffd24 	.word	0xfffffd24
    b160:	00001388 	.word	0x00001388
    b164:	fffffd26 	.word	0xfffffd26
    b168:	00012488 	.word	0x00012488
    b16c:	00012498 	.word	0x00012498
    b170:	1b4e81b5 	.word	0x1b4e81b5
    b174:	000128a0 	.word	0x000128a0
    b178:	000124b0 	.word	0x000124b0

0000b17c <readTestcaseFile>:



int readTestcaseFile(char testcase[] , int lenght){
    b17c:	e92d4870 	push	{r4, r5, r6, fp, lr}
    b180:	e28db010 	add	fp, sp, #16
    b184:	e24dd044 	sub	sp, sp, #68	; 0x44
    b188:	e50b0050 	str	r0, [fp, #-80]	; 0x50
    b18c:	e50b1054 	str	r1, [fp, #-84]	; 0x54
    b190:	e1a0100d 	mov	r1, sp
    b194:	e1a06001 	mov	r6, r1
	FILE *testCasesFile;
	int isSelected =0;
    b198:	e3a01000 	mov	r1, #0
    b19c:	e50b101c 	str	r1, [fp, #-28]
	char* stringToken;
	char charIsSelected[lenght];
    b1a0:	e51bc054 	ldr	ip, [fp, #-84]	; 0x54
    b1a4:	e24c1001 	sub	r1, ip, #1
    b1a8:	e50b1020 	str	r1, [fp, #-32]
    b1ac:	e1a0100c 	mov	r1, ip
    b1b0:	e1a00001 	mov	r0, r1
    b1b4:	e3a01000 	mov	r1, #0
    b1b8:	e1a05181 	lsl	r5, r1, #3
    b1bc:	e1855ea0 	orr	r5, r5, r0, lsr #29
    b1c0:	e1a04180 	lsl	r4, r0, #3
    b1c4:	e1a0100c 	mov	r1, ip
    b1c8:	e1a00001 	mov	r0, r1
    b1cc:	e3a01000 	mov	r1, #0
    b1d0:	e1a03181 	lsl	r3, r1, #3
    b1d4:	e1833ea0 	orr	r3, r3, r0, lsr #29
    b1d8:	e1a02180 	lsl	r2, r0, #3
    b1dc:	e1a0300c 	mov	r3, ip
    b1e0:	e2833007 	add	r3, r3, #7
    b1e4:	e1a031a3 	lsr	r3, r3, #3
    b1e8:	e1a03183 	lsl	r3, r3, #3
    b1ec:	e04dd003 	sub	sp, sp, r3
    b1f0:	e1a0300d 	mov	r3, sp
    b1f4:	e2833000 	add	r3, r3, #0
    b1f8:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	char fullLine[30];
	int i;

	if ((testCasesFile = fopen("/home/pi/testfiles/_Testcases", "r+")) == NULL){
    b1fc:	e59f01e4 	ldr	r0, [pc, #484]	; b3e8 <readTestcaseFile+0x26c>
    b200:	e59f11e4 	ldr	r1, [pc, #484]	; b3ec <readTestcaseFile+0x270>
    b204:	ebfff66e 	bl	8bc4 <_init+0xb0>
    b208:	e50b0028 	str	r0, [fp, #-40]	; 0x28
    b20c:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    b210:	e3530000 	cmp	r3, #0
    b214:	1a000007 	bne	b238 <readTestcaseFile+0xbc>
		fprintf(stderr, "File kann nicht geöffnet werden (w+)");
    b218:	e59f31d0 	ldr	r3, [pc, #464]	; b3f0 <readTestcaseFile+0x274>
    b21c:	e5933000 	ldr	r3, [r3]
    b220:	e59f01cc 	ldr	r0, [pc, #460]	; b3f4 <readTestcaseFile+0x278>
    b224:	e3a01001 	mov	r1, #1
    b228:	e3a02025 	mov	r2, #37	; 0x25
    b22c:	ebfff6a6 	bl	8ccc <_init+0x1b8>
		exit(0);
    b230:	e3a00000 	mov	r0, #0
    b234:	ebfff6ce 	bl	8d74 <_init+0x260>
	}

	while((fgets(testcase, lenght, testCasesFile)) != NULL){
    b238:	ea00005e 	b	b3b8 <readTestcaseFile+0x23c>
		stringToken= strtok(testcase, "=\n");
    b23c:	e51b0050 	ldr	r0, [fp, #-80]	; 0x50
    b240:	e59f11b0 	ldr	r1, [pc, #432]	; b3f8 <readTestcaseFile+0x27c>
    b244:	ebfff6ac 	bl	8cfc <_init+0x1e8>
    b248:	e50b002c 	str	r0, [fp, #-44]	; 0x2c
		strcpy(testcase, stringToken);
    b24c:	e51b0050 	ldr	r0, [fp, #-80]	; 0x50
    b250:	e51b102c 	ldr	r1, [fp, #-44]	; 0x2c
    b254:	ebfff690 	bl	8c9c <_init+0x188>

		stringToken= strtok(NULL, "=\n");
    b258:	e3a00000 	mov	r0, #0
    b25c:	e59f1194 	ldr	r1, [pc, #404]	; b3f8 <readTestcaseFile+0x27c>
    b260:	ebfff6a5 	bl	8cfc <_init+0x1e8>
    b264:	e50b002c 	str	r0, [fp, #-44]	; 0x2c
		strcpy(charIsSelected, stringToken);
    b268:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
    b26c:	e1a00003 	mov	r0, r3
    b270:	e51b102c 	ldr	r1, [fp, #-44]	; 0x2c
    b274:	ebfff688 	bl	8c9c <_init+0x188>
		isSelected = charIsSelected[0] - '0';
    b278:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
    b27c:	e5d33000 	ldrb	r3, [r3]
    b280:	e2433030 	sub	r3, r3, #48	; 0x30
    b284:	e50b301c 	str	r3, [fp, #-28]

		if(isSelected == 1){
    b288:	e51b301c 	ldr	r3, [fp, #-28]
    b28c:	e3530001 	cmp	r3, #1
    b290:	1a000048 	bne	b3b8 <readTestcaseFile+0x23c>
			strcpy(fullLine,testcase);
    b294:	e24b304c 	sub	r3, fp, #76	; 0x4c
    b298:	e1a00003 	mov	r0, r3
    b29c:	e51b1050 	ldr	r1, [fp, #-80]	; 0x50
    b2a0:	ebfff67d 	bl	8c9c <_init+0x188>
			for (i =0 ; i < sizeof(fullLine);i++){
    b2a4:	e3a03000 	mov	r3, #0
    b2a8:	e50b3018 	str	r3, [fp, #-24]
    b2ac:	ea000030 	b	b374 <readTestcaseFile+0x1f8>
				if(fullLine[i] == '\0'){
    b2b0:	e3e03037 	mvn	r3, #55	; 0x37
    b2b4:	e51b2018 	ldr	r2, [fp, #-24]
    b2b8:	e24b1014 	sub	r1, fp, #20
    b2bc:	e0812002 	add	r2, r1, r2
    b2c0:	e0823003 	add	r3, r2, r3
    b2c4:	e5d33000 	ldrb	r3, [r3]
    b2c8:	e3530000 	cmp	r3, #0
    b2cc:	1a000025 	bne	b368 <readTestcaseFile+0x1ec>
					fullLine[i]= '=';
    b2d0:	e3e03037 	mvn	r3, #55	; 0x37
    b2d4:	e51b2018 	ldr	r2, [fp, #-24]
    b2d8:	e24b1014 	sub	r1, fp, #20
    b2dc:	e0812002 	add	r2, r1, r2
    b2e0:	e0823003 	add	r3, r2, r3
    b2e4:	e3a0203d 	mov	r2, #61	; 0x3d
    b2e8:	e5c32000 	strb	r2, [r3]
					i++;
    b2ec:	e51b3018 	ldr	r3, [fp, #-24]
    b2f0:	e2833001 	add	r3, r3, #1
    b2f4:	e50b3018 	str	r3, [fp, #-24]
					fullLine[i]= '1'; //Set to 1 if you dont want to set the test to 0 in _testcase
    b2f8:	e3e03037 	mvn	r3, #55	; 0x37
    b2fc:	e51b2018 	ldr	r2, [fp, #-24]
    b300:	e24b1014 	sub	r1, fp, #20
    b304:	e0812002 	add	r2, r1, r2
    b308:	e0823003 	add	r3, r2, r3
    b30c:	e3a02031 	mov	r2, #49	; 0x31
    b310:	e5c32000 	strb	r2, [r3]
					i++;
    b314:	e51b3018 	ldr	r3, [fp, #-24]
    b318:	e2833001 	add	r3, r3, #1
    b31c:	e50b3018 	str	r3, [fp, #-24]
					fullLine[i]= '\n';
    b320:	e3e03037 	mvn	r3, #55	; 0x37
    b324:	e51b2018 	ldr	r2, [fp, #-24]
    b328:	e24b1014 	sub	r1, fp, #20
    b32c:	e0812002 	add	r2, r1, r2
    b330:	e0823003 	add	r3, r2, r3
    b334:	e3a0200a 	mov	r2, #10
    b338:	e5c32000 	strb	r2, [r3]
					i++;
    b33c:	e51b3018 	ldr	r3, [fp, #-24]
    b340:	e2833001 	add	r3, r3, #1
    b344:	e50b3018 	str	r3, [fp, #-24]
					fullLine[i]= '\0';
    b348:	e3e03037 	mvn	r3, #55	; 0x37
    b34c:	e51b2018 	ldr	r2, [fp, #-24]
    b350:	e24b1014 	sub	r1, fp, #20
    b354:	e0812002 	add	r2, r1, r2
    b358:	e0823003 	add	r3, r2, r3
    b35c:	e3a02000 	mov	r2, #0
    b360:	e5c32000 	strb	r2, [r3]
					break;
    b364:	ea000005 	b	b380 <readTestcaseFile+0x204>
		strcpy(charIsSelected, stringToken);
		isSelected = charIsSelected[0] - '0';

		if(isSelected == 1){
			strcpy(fullLine,testcase);
			for (i =0 ; i < sizeof(fullLine);i++){
    b368:	e51b3018 	ldr	r3, [fp, #-24]
    b36c:	e2833001 	add	r3, r3, #1
    b370:	e50b3018 	str	r3, [fp, #-24]
    b374:	e51b3018 	ldr	r3, [fp, #-24]
    b378:	e353001d 	cmp	r3, #29
    b37c:	9affffcb 	bls	b2b0 <readTestcaseFile+0x134>
					fullLine[i]= '\0';
					break;
				}//if
			}//for
			//Change Postion of seek
			fseek(testCasesFile, -i, SEEK_CUR);
    b380:	e51b3018 	ldr	r3, [fp, #-24]
    b384:	e2633000 	rsb	r3, r3, #0
    b388:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
    b38c:	e1a01003 	mov	r1, r3
    b390:	e3a02001 	mov	r2, #1
    b394:	ebfff625 	bl	8c30 <_init+0x11c>
			//Write line
			fputs(fullLine , testCasesFile);
    b398:	e24b304c 	sub	r3, fp, #76	; 0x4c
    b39c:	e1a00003 	mov	r0, r3
    b3a0:	e51b1028 	ldr	r1, [fp, #-40]	; 0x28
    b3a4:	ebfff67b 	bl	8d98 <_init+0x284>
			fclose(testCasesFile);
    b3a8:	e51b0028 	ldr	r0, [fp, #-40]	; 0x28
    b3ac:	ebfff5f8 	bl	8b94 <_init+0x80>
			return 1;
    b3b0:	e3a03001 	mov	r3, #1
    b3b4:	ea000007 	b	b3d8 <readTestcaseFile+0x25c>
	if ((testCasesFile = fopen("/home/pi/testfiles/_Testcases", "r+")) == NULL){
		fprintf(stderr, "File kann nicht geöffnet werden (w+)");
		exit(0);
	}

	while((fgets(testcase, lenght, testCasesFile)) != NULL){
    b3b8:	e51b0050 	ldr	r0, [fp, #-80]	; 0x50
    b3bc:	e51b1054 	ldr	r1, [fp, #-84]	; 0x54
    b3c0:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    b3c4:	ebfff5f5 	bl	8ba0 <_init+0x8c>
    b3c8:	e1a03000 	mov	r3, r0
    b3cc:	e3530000 	cmp	r3, #0
    b3d0:	1affff99 	bne	b23c <readTestcaseFile+0xc0>
			fclose(testCasesFile);
			return 1;
		}//if
	}//while( not end of file read)
	/* Not Testcase selected*/
	return 0;
    b3d4:	e3a03000 	mov	r3, #0
    b3d8:	e1a0d006 	mov	sp, r6

}
    b3dc:	e1a00003 	mov	r0, r3
    b3e0:	e24bd010 	sub	sp, fp, #16
    b3e4:	e8bd8870 	pop	{r4, r5, r6, fp, pc}
    b3e8:	000128bc 	.word	0x000128bc
    b3ec:	000128dc 	.word	0x000128dc
    b3f0:	0001b2a0 	.word	0x0001b2a0
    b3f4:	000128e0 	.word	0x000128e0
    b3f8:	00012908 	.word	0x00012908

0000b3fc <kbhit>:


#include <termios.h>

int kbhit(void)
{
    b3fc:	e92d4800 	push	{fp, lr}
    b400:	e28db004 	add	fp, sp, #4
    b404:	e24dd080 	sub	sp, sp, #128	; 0x80
	struct termios term, oterm;
	  int fd = 0;
    b408:	e3a03000 	mov	r3, #0
    b40c:	e50b3008 	str	r3, [fp, #-8]
	  int c = 0;
    b410:	e3a03000 	mov	r3, #0
    b414:	e50b300c 	str	r3, [fp, #-12]
	  tcgetattr(fd, &oterm);
    b418:	e24b3084 	sub	r3, fp, #132	; 0x84
    b41c:	e51b0008 	ldr	r0, [fp, #-8]
    b420:	e1a01003 	mov	r1, r3
    b424:	ebfff604 	bl	8c3c <_init+0x128>
	  memcpy(&term, &oterm, sizeof(term));
    b428:	e24bc048 	sub	ip, fp, #72	; 0x48
    b42c:	e24be084 	sub	lr, fp, #132	; 0x84
    b430:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    b434:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    b438:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    b43c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    b440:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    b444:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    b448:	e89e0007 	ldm	lr, {r0, r1, r2}
    b44c:	e88c0007 	stm	ip, {r0, r1, r2}
	  term.c_lflag = term.c_lflag & (!ICANON);
    b450:	e3a03000 	mov	r3, #0
    b454:	e50b303c 	str	r3, [fp, #-60]	; 0x3c
	  term.c_cc[VMIN] = 0;
    b458:	e3a03000 	mov	r3, #0
    b45c:	e54b3031 	strb	r3, [fp, #-49]	; 0x31
	  term.c_cc[VTIME] = 1;
    b460:	e3a03001 	mov	r3, #1
    b464:	e54b3032 	strb	r3, [fp, #-50]	; 0x32
	  tcsetattr(fd, TCSANOW, &term);
    b468:	e24b3048 	sub	r3, fp, #72	; 0x48
    b46c:	e51b0008 	ldr	r0, [fp, #-8]
    b470:	e3a01000 	mov	r1, #0
    b474:	e1a02003 	mov	r2, r3
    b478:	ebfff62b 	bl	8d2c <_init+0x218>
	  c = getchar();
    b47c:	ebfff5b2 	bl	8b4c <_init+0x38>
    b480:	e50b000c 	str	r0, [fp, #-12]
	  tcsetattr(fd, TCSANOW, &oterm);
    b484:	e24b3084 	sub	r3, fp, #132	; 0x84
    b488:	e51b0008 	ldr	r0, [fp, #-8]
    b48c:	e3a01000 	mov	r1, #0
    b490:	e1a02003 	mov	r2, r3
    b494:	ebfff624 	bl	8d2c <_init+0x218>
	  return c; // gibt -1 zurück, wenn kein Zeichen gelesen wurde
    b498:	e51b300c 	ldr	r3, [fp, #-12]
}
    b49c:	e1a00003 	mov	r0, r3
    b4a0:	e24bd004 	sub	sp, fp, #4
    b4a4:	e8bd8800 	pop	{fp, pc}

0000b4a8 <decodeline>:


int decodeline(char line[], int lineLenght){
    b4a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4ac:	e28db020 	add	fp, sp, #32
    b4b0:	e24dd05c 	sub	sp, sp, #92	; 0x5c
    b4b4:	e50b0060 	str	r0, [fp, #-96]	; 0x60
    b4b8:	e50b1064 	str	r1, [fp, #-100]	; 0x64
    b4bc:	e1a0300d 	mov	r3, sp
    b4c0:	e1a0a003 	mov	sl, r3
	int motorNumber;
	char controllChar;
	int pwmValue;
	int offsetPwmValue=0;
    b4c4:	e3a03000 	mov	r3, #0
    b4c8:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
	int delay=0;
    b4cc:	e3a03000 	mov	r3, #0
    b4d0:	e50b3028 	str	r3, [fp, #-40]	; 0x28
	char *pNext;
	char* stringToken;

	char charMotorNumber[lineLenght];
    b4d4:	e51b1064 	ldr	r1, [fp, #-100]	; 0x64
    b4d8:	e2413001 	sub	r3, r1, #1
    b4dc:	e50b3030 	str	r3, [fp, #-48]	; 0x30
    b4e0:	e1a03001 	mov	r3, r1
    b4e4:	e1a02003 	mov	r2, r3
    b4e8:	e3a03000 	mov	r3, #0
    b4ec:	e1a00183 	lsl	r0, r3, #3
    b4f0:	e50b0068 	str	r0, [fp, #-104]	; 0x68
    b4f4:	e51b0068 	ldr	r0, [fp, #-104]	; 0x68
    b4f8:	e1800ea2 	orr	r0, r0, r2, lsr #29
    b4fc:	e50b0068 	str	r0, [fp, #-104]	; 0x68
    b500:	e1a00182 	lsl	r0, r2, #3
    b504:	e1a03001 	mov	r3, r1
    b508:	e1a02003 	mov	r2, r3
    b50c:	e3a03000 	mov	r3, #0
    b510:	e1a00183 	lsl	r0, r3, #3
    b514:	e50b0070 	str	r0, [fp, #-112]	; 0x70
    b518:	e51b0070 	ldr	r0, [fp, #-112]	; 0x70
    b51c:	e1800ea2 	orr	r0, r0, r2, lsr #29
    b520:	e50b0070 	str	r0, [fp, #-112]	; 0x70
    b524:	e1a00182 	lsl	r0, r2, #3
    b528:	e1a03001 	mov	r3, r1
    b52c:	e2833007 	add	r3, r3, #7
    b530:	e1a031a3 	lsr	r3, r3, #3
    b534:	e1a03183 	lsl	r3, r3, #3
    b538:	e04dd003 	sub	sp, sp, r3
    b53c:	e1a0300d 	mov	r3, sp
    b540:	e2833000 	add	r3, r3, #0
    b544:	e50b3034 	str	r3, [fp, #-52]	; 0x34
	char charPwmValue[lineLenght];
    b548:	e51b1064 	ldr	r1, [fp, #-100]	; 0x64
    b54c:	e2413001 	sub	r3, r1, #1
    b550:	e50b3038 	str	r3, [fp, #-56]	; 0x38
    b554:	e1a03001 	mov	r3, r1
    b558:	e1a02003 	mov	r2, r3
    b55c:	e3a03000 	mov	r3, #0
    b560:	e1a00183 	lsl	r0, r3, #3
    b564:	e50b0078 	str	r0, [fp, #-120]	; 0x78
    b568:	e51b0078 	ldr	r0, [fp, #-120]	; 0x78
    b56c:	e1800ea2 	orr	r0, r0, r2, lsr #29
    b570:	e50b0078 	str	r0, [fp, #-120]	; 0x78
    b574:	e1a00182 	lsl	r0, r2, #3
    b578:	e1a03001 	mov	r3, r1
    b57c:	e1a02003 	mov	r2, r3
    b580:	e3a03000 	mov	r3, #0
    b584:	e1a09183 	lsl	r9, r3, #3
    b588:	e1899ea2 	orr	r9, r9, r2, lsr #29
    b58c:	e1a08182 	lsl	r8, r2, #3
    b590:	e1a03001 	mov	r3, r1
    b594:	e2833007 	add	r3, r3, #7
    b598:	e1a031a3 	lsr	r3, r3, #3
    b59c:	e1a03183 	lsl	r3, r3, #3
    b5a0:	e04dd003 	sub	sp, sp, r3
    b5a4:	e1a0300d 	mov	r3, sp
    b5a8:	e2833000 	add	r3, r3, #0
    b5ac:	e50b303c 	str	r3, [fp, #-60]	; 0x3c
	char charDelay[lineLenght];
    b5b0:	e51b1064 	ldr	r1, [fp, #-100]	; 0x64
    b5b4:	e2413001 	sub	r3, r1, #1
    b5b8:	e50b3040 	str	r3, [fp, #-64]	; 0x40
    b5bc:	e1a03001 	mov	r3, r1
    b5c0:	e1a02003 	mov	r2, r3
    b5c4:	e3a03000 	mov	r3, #0
    b5c8:	e1a07183 	lsl	r7, r3, #3
    b5cc:	e1877ea2 	orr	r7, r7, r2, lsr #29
    b5d0:	e1a06182 	lsl	r6, r2, #3
    b5d4:	e1a03001 	mov	r3, r1
    b5d8:	e1a02003 	mov	r2, r3
    b5dc:	e3a03000 	mov	r3, #0
    b5e0:	e1a05183 	lsl	r5, r3, #3
    b5e4:	e1855ea2 	orr	r5, r5, r2, lsr #29
    b5e8:	e1a04182 	lsl	r4, r2, #3
    b5ec:	e1a03001 	mov	r3, r1
    b5f0:	e2833007 	add	r3, r3, #7
    b5f4:	e1a031a3 	lsr	r3, r3, #3
    b5f8:	e1a03183 	lsl	r3, r3, #3
    b5fc:	e04dd003 	sub	sp, sp, r3
    b600:	e1a0300d 	mov	r3, sp
    b604:	e2833000 	add	r3, r3, #0
    b608:	e50b3044 	str	r3, [fp, #-68]	; 0x44

	if(line[0] == '#'){
    b60c:	e51b3060 	ldr	r3, [fp, #-96]	; 0x60
    b610:	e5d33000 	ldrb	r3, [r3]
    b614:	e3530023 	cmp	r3, #35	; 0x23
    b618:	1a0000d8 	bne	b980 <decodeline+0x4d8>
		controllChar = line[2];
    b61c:	e51b3060 	ldr	r3, [fp, #-96]	; 0x60
    b620:	e5d33002 	ldrb	r3, [r3, #2]
    b624:	e54b3045 	strb	r3, [fp, #-69]	; 0x45

		stringToken= strtok(line, "#+-=;\n");
    b628:	e51b0060 	ldr	r0, [fp, #-96]	; 0x60
    b62c:	e59f1360 	ldr	r1, [pc, #864]	; b994 <decodeline+0x4ec>
    b630:	ebfff5b1 	bl	8cfc <_init+0x1e8>
    b634:	e50b004c 	str	r0, [fp, #-76]	; 0x4c
		strcpy(charMotorNumber, stringToken);
    b638:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    b63c:	e1a00003 	mov	r0, r3
    b640:	e51b104c 	ldr	r1, [fp, #-76]	; 0x4c
    b644:	ebfff594 	bl	8c9c <_init+0x188>
		motorNumber = charMotorNumber[0] - '0';
    b648:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    b64c:	e5d33000 	ldrb	r3, [r3]
    b650:	e2433030 	sub	r3, r3, #48	; 0x30
    b654:	e50b3050 	str	r3, [fp, #-80]	; 0x50

		stringToken = strtok (NULL, "#+-=;\n");
    b658:	e3a00000 	mov	r0, #0
    b65c:	e59f1330 	ldr	r1, [pc, #816]	; b994 <decodeline+0x4ec>
    b660:	ebfff5a5 	bl	8cfc <_init+0x1e8>
    b664:	e50b004c 	str	r0, [fp, #-76]	; 0x4c
		strcpy(charPwmValue, stringToken);
    b668:	e51b303c 	ldr	r3, [fp, #-60]	; 0x3c
    b66c:	e1a00003 	mov	r0, r3
    b670:	e51b104c 	ldr	r1, [fp, #-76]	; 0x4c
    b674:	ebfff588 	bl	8c9c <_init+0x188>
		pwmValue = strtol(charPwmValue , &pNext, 10);
    b678:	e51b203c 	ldr	r2, [fp, #-60]	; 0x3c
    b67c:	e24b3058 	sub	r3, fp, #88	; 0x58
    b680:	e1a00002 	mov	r0, r2
    b684:	e1a01003 	mov	r1, r3
    b688:	e3a0200a 	mov	r2, #10
    b68c:	ebfff57f 	bl	8c90 <_init+0x17c>
    b690:	e50b0054 	str	r0, [fp, #-84]	; 0x54

		stringToken = strtok (NULL, "#+-=;\n");
    b694:	e3a00000 	mov	r0, #0
    b698:	e59f12f4 	ldr	r1, [pc, #756]	; b994 <decodeline+0x4ec>
    b69c:	ebfff596 	bl	8cfc <_init+0x1e8>
    b6a0:	e50b004c 	str	r0, [fp, #-76]	; 0x4c
		strcpy(charDelay, stringToken);
    b6a4:	e51b3044 	ldr	r3, [fp, #-68]	; 0x44
    b6a8:	e1a00003 	mov	r0, r3
    b6ac:	e51b104c 	ldr	r1, [fp, #-76]	; 0x4c
    b6b0:	ebfff579 	bl	8c9c <_init+0x188>
		delay = strtol(charDelay , &pNext, 10);
    b6b4:	e51b2044 	ldr	r2, [fp, #-68]	; 0x44
    b6b8:	e24b3058 	sub	r3, fp, #88	; 0x58
    b6bc:	e1a00002 	mov	r0, r2
    b6c0:	e1a01003 	mov	r1, r3
    b6c4:	e3a0200a 	mov	r2, #10
    b6c8:	ebfff570 	bl	8c90 <_init+0x17c>
    b6cc:	e50b0028 	str	r0, [fp, #-40]	; 0x28

		printf("pwmValue : %i", pwmValue);
    b6d0:	e59f02c0 	ldr	r0, [pc, #704]	; b998 <decodeline+0x4f0>
    b6d4:	e51b1054 	ldr	r1, [fp, #-84]	; 0x54
    b6d8:	ebfff572 	bl	8ca8 <_init+0x194>

		switch(motorNumber){
    b6dc:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
    b6e0:	e353000e 	cmp	r3, #14
    b6e4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b6e8:	ea0000a0 	b	b970 <decodeline+0x4c8>
    b6ec:	0000b728 	.word	0x0000b728
    b6f0:	0000b754 	.word	0x0000b754
    b6f4:	0000b780 	.word	0x0000b780
    b6f8:	0000b7ac 	.word	0x0000b7ac
    b6fc:	0000b7d8 	.word	0x0000b7d8
    b700:	0000b804 	.word	0x0000b804
    b704:	0000b830 	.word	0x0000b830
    b708:	0000b85c 	.word	0x0000b85c
    b70c:	0000b970 	.word	0x0000b970
    b710:	0000b970 	.word	0x0000b970
    b714:	0000b970 	.word	0x0000b970
    b718:	0000b970 	.word	0x0000b970
    b71c:	0000b888 	.word	0x0000b888
    b720:	0000b970 	.word	0x0000b970
    b724:	0000b8fc 	.word	0x0000b8fc
			case 0:
				pwmValue = calcPwmValue(controllChar , motorNumber, pwmValue);
    b728:	e55b3045 	ldrb	r3, [fp, #-69]	; 0x45
    b72c:	e1a00003 	mov	r0, r3
    b730:	e51b1050 	ldr	r1, [fp, #-80]	; 0x50
    b734:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    b738:	eb000098 	bl	b9a0 <calcPwmValue>
    b73c:	e50b0054 	str	r0, [fp, #-84]	; 0x54
				SetPwmMotor(DEFMotorNo1_PWM, pwmValue, 0);
    b740:	e3a00001 	mov	r0, #1
    b744:	e51b1054 	ldr	r1, [fp, #-84]	; 0x54
    b748:	e3a02000 	mov	r2, #0
    b74c:	eb000d58 	bl	ecb4 <SetPwmMotor>
				break;
    b750:	ea000087 	b	b974 <decodeline+0x4cc>
			case 1:
				pwmValue = calcPwmValue(controllChar , motorNumber, pwmValue);
    b754:	e55b3045 	ldrb	r3, [fp, #-69]	; 0x45
    b758:	e1a00003 	mov	r0, r3
    b75c:	e51b1050 	ldr	r1, [fp, #-80]	; 0x50
    b760:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    b764:	eb00008d 	bl	b9a0 <calcPwmValue>
    b768:	e50b0054 	str	r0, [fp, #-84]	; 0x54
				SetPwmMotor(DEFMotorNo2_PWM, pwmValue, 0);
    b76c:	e3a00002 	mov	r0, #2
    b770:	e51b1054 	ldr	r1, [fp, #-84]	; 0x54
    b774:	e3a02000 	mov	r2, #0
    b778:	eb000d4d 	bl	ecb4 <SetPwmMotor>
				break;
    b77c:	ea00007c 	b	b974 <decodeline+0x4cc>
			case 2:
				pwmValue = calcPwmValue(controllChar , motorNumber, pwmValue);
    b780:	e55b3045 	ldrb	r3, [fp, #-69]	; 0x45
    b784:	e1a00003 	mov	r0, r3
    b788:	e51b1050 	ldr	r1, [fp, #-80]	; 0x50
    b78c:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    b790:	eb000082 	bl	b9a0 <calcPwmValue>
    b794:	e50b0054 	str	r0, [fp, #-84]	; 0x54
				SetPwmMotor(DEFMotorNo3_PWM, pwmValue, 0);
    b798:	e3a00004 	mov	r0, #4
    b79c:	e51b1054 	ldr	r1, [fp, #-84]	; 0x54
    b7a0:	e3a02000 	mov	r2, #0
    b7a4:	eb000d42 	bl	ecb4 <SetPwmMotor>
				break;
    b7a8:	ea000071 	b	b974 <decodeline+0x4cc>
			case 3:
				pwmValue = calcPwmValue(controllChar , motorNumber, pwmValue);
    b7ac:	e55b3045 	ldrb	r3, [fp, #-69]	; 0x45
    b7b0:	e1a00003 	mov	r0, r3
    b7b4:	e51b1050 	ldr	r1, [fp, #-80]	; 0x50
    b7b8:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    b7bc:	eb000077 	bl	b9a0 <calcPwmValue>
    b7c0:	e50b0054 	str	r0, [fp, #-84]	; 0x54
				SetPwmMotor(DEFMotorNo4_PWM, pwmValue, 0);
    b7c4:	e3a00008 	mov	r0, #8
    b7c8:	e51b1054 	ldr	r1, [fp, #-84]	; 0x54
    b7cc:	e3a02000 	mov	r2, #0
    b7d0:	eb000d37 	bl	ecb4 <SetPwmMotor>
				break;
    b7d4:	ea000066 	b	b974 <decodeline+0x4cc>
			case 4:
				pwmValue = calcPwmValue(controllChar , motorNumber, pwmValue);
    b7d8:	e55b3045 	ldrb	r3, [fp, #-69]	; 0x45
    b7dc:	e1a00003 	mov	r0, r3
    b7e0:	e51b1050 	ldr	r1, [fp, #-80]	; 0x50
    b7e4:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    b7e8:	eb00006c 	bl	b9a0 <calcPwmValue>
    b7ec:	e50b0054 	str	r0, [fp, #-84]	; 0x54
				SetPwmMotor(DEFMotorNo5_PWM, pwmValue, 0);
    b7f0:	e3a00010 	mov	r0, #16
    b7f4:	e51b1054 	ldr	r1, [fp, #-84]	; 0x54
    b7f8:	e3a02000 	mov	r2, #0
    b7fc:	eb000d2c 	bl	ecb4 <SetPwmMotor>
				break;
    b800:	ea00005b 	b	b974 <decodeline+0x4cc>
			case 5:
				pwmValue = calcPwmValue(controllChar , motorNumber, pwmValue);
    b804:	e55b3045 	ldrb	r3, [fp, #-69]	; 0x45
    b808:	e1a00003 	mov	r0, r3
    b80c:	e51b1050 	ldr	r1, [fp, #-80]	; 0x50
    b810:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    b814:	eb000061 	bl	b9a0 <calcPwmValue>
    b818:	e50b0054 	str	r0, [fp, #-84]	; 0x54
				SetPwmMotor(DEFMotorNo6_PWM, pwmValue, 0);
    b81c:	e3a00020 	mov	r0, #32
    b820:	e51b1054 	ldr	r1, [fp, #-84]	; 0x54
    b824:	e3a02000 	mov	r2, #0
    b828:	eb000d21 	bl	ecb4 <SetPwmMotor>
				break;
    b82c:	ea000050 	b	b974 <decodeline+0x4cc>
			case 6:
				pwmValue = calcPwmValue(controllChar , motorNumber, pwmValue);
    b830:	e55b3045 	ldrb	r3, [fp, #-69]	; 0x45
    b834:	e1a00003 	mov	r0, r3
    b838:	e51b1050 	ldr	r1, [fp, #-80]	; 0x50
    b83c:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    b840:	eb000056 	bl	b9a0 <calcPwmValue>
    b844:	e50b0054 	str	r0, [fp, #-84]	; 0x54
				SetPwmMotor(DEFMotorNo7_PWM, pwmValue, 0);
    b848:	e3a00040 	mov	r0, #64	; 0x40
    b84c:	e51b1054 	ldr	r1, [fp, #-84]	; 0x54
    b850:	e3a02000 	mov	r2, #0
    b854:	eb000d16 	bl	ecb4 <SetPwmMotor>
				break;
    b858:	ea000045 	b	b974 <decodeline+0x4cc>
			case 7:
				pwmValue = calcPwmValue(controllChar , motorNumber, pwmValue);
    b85c:	e55b3045 	ldrb	r3, [fp, #-69]	; 0x45
    b860:	e1a00003 	mov	r0, r3
    b864:	e51b1050 	ldr	r1, [fp, #-80]	; 0x50
    b868:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    b86c:	eb00004b 	bl	b9a0 <calcPwmValue>
    b870:	e50b0054 	str	r0, [fp, #-84]	; 0x54
				SetPwmMotor(DEFMotorNo8_PWM, pwmValue, 0);
    b874:	e3a00080 	mov	r0, #128	; 0x80
    b878:	e51b1054 	ldr	r1, [fp, #-84]	; 0x54
    b87c:	e3a02000 	mov	r2, #0
    b880:	eb000d0b 	bl	ecb4 <SetPwmMotor>
				break;
    b884:	ea00003a 	b	b974 <decodeline+0x4cc>
			case 12: // CW'>'
				if(controllChar == '='){
    b888:	e55b3045 	ldrb	r3, [fp, #-69]	; 0x45
    b88c:	e353003d 	cmp	r3, #61	; 0x3d
    b890:	1a000004 	bne	b8a8 <decodeline+0x400>
					SetPwmMotor(DEFMotorCW_PWM, pwmValue, 0);
    b894:	e3a00055 	mov	r0, #85	; 0x55
    b898:	e51b1054 	ldr	r1, [fp, #-84]	; 0x54
    b89c:	e3a02000 	mov	r2, #0
    b8a0:	eb000d03 	bl	ecb4 <SetPwmMotor>
						SetPwmMotor(DEFMotorNo5_PWM, offsetPwmValue, 0);
						offsetPwmValue = calcPwmValue( controllChar , 6, pwmValue);
						SetPwmMotor(DEFMotorNo7_PWM, offsetPwmValue, 0);
					#endif
				}
				break;
    b8a4:	ea000032 	b	b974 <decodeline+0x4cc>
			case 12: // CW'>'
				if(controllChar == '='){
					SetPwmMotor(DEFMotorCW_PWM, pwmValue, 0);
				}else{

					offsetPwmValue = calcPwmValue( controllChar , 0, pwmValue);
    b8a8:	e55b3045 	ldrb	r3, [fp, #-69]	; 0x45
    b8ac:	e1a00003 	mov	r0, r3
    b8b0:	e3a01000 	mov	r1, #0
    b8b4:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    b8b8:	eb000038 	bl	b9a0 <calcPwmValue>
    b8bc:	e50b002c 	str	r0, [fp, #-44]	; 0x2c
					SetPwmMotor(DEFMotorNo1_PWM, offsetPwmValue, 0);
    b8c0:	e3a00001 	mov	r0, #1
    b8c4:	e51b102c 	ldr	r1, [fp, #-44]	; 0x2c
    b8c8:	e3a02000 	mov	r2, #0
    b8cc:	eb000cf8 	bl	ecb4 <SetPwmMotor>
					offsetPwmValue = calcPwmValue( controllChar , 2, pwmValue);
    b8d0:	e55b3045 	ldrb	r3, [fp, #-69]	; 0x45
    b8d4:	e1a00003 	mov	r0, r3
    b8d8:	e3a01002 	mov	r1, #2
    b8dc:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    b8e0:	eb00002e 	bl	b9a0 <calcPwmValue>
    b8e4:	e50b002c 	str	r0, [fp, #-44]	; 0x2c
					SetPwmMotor(DEFMotorNo3_PWM, offsetPwmValue, 0);
    b8e8:	e3a00004 	mov	r0, #4
    b8ec:	e51b102c 	ldr	r1, [fp, #-44]	; 0x2c
    b8f0:	e3a02000 	mov	r2, #0
    b8f4:	eb000cee 	bl	ecb4 <SetPwmMotor>
						SetPwmMotor(DEFMotorNo5_PWM, offsetPwmValue, 0);
						offsetPwmValue = calcPwmValue( controllChar , 6, pwmValue);
						SetPwmMotor(DEFMotorNo7_PWM, offsetPwmValue, 0);
					#endif
				}
				break;
    b8f8:	ea00001d 	b	b974 <decodeline+0x4cc>
			case 14: // '<' CCW
				if(controllChar == '='){
    b8fc:	e55b3045 	ldrb	r3, [fp, #-69]	; 0x45
    b900:	e353003d 	cmp	r3, #61	; 0x3d
    b904:	1a000004 	bne	b91c <decodeline+0x474>
					SetPwmMotor(DEFMotorCCW_PWM, pwmValue, 0);
    b908:	e3a000aa 	mov	r0, #170	; 0xaa
    b90c:	e51b1054 	ldr	r1, [fp, #-84]	; 0x54
    b910:	e3a02000 	mov	r2, #0
    b914:	eb000ce6 	bl	ecb4 <SetPwmMotor>
						SetPwmMotor(DEFMotorNo6_PWM, offsetPwmValue, 0);
						offsetPwmValue = calcPwmValue( controllChar , 7, pwmValue);
						SetPwmMotor(DEFMotorNo8_PWM, offsetPwmValue, 0);
					#endif
				}
				break;
    b918:	ea000015 	b	b974 <decodeline+0x4cc>
				break;
			case 14: // '<' CCW
				if(controllChar == '='){
					SetPwmMotor(DEFMotorCCW_PWM, pwmValue, 0);
				}else{
					offsetPwmValue = calcPwmValue( controllChar , 1, pwmValue);
    b91c:	e55b3045 	ldrb	r3, [fp, #-69]	; 0x45
    b920:	e1a00003 	mov	r0, r3
    b924:	e3a01001 	mov	r1, #1
    b928:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    b92c:	eb00001b 	bl	b9a0 <calcPwmValue>
    b930:	e50b002c 	str	r0, [fp, #-44]	; 0x2c
					SetPwmMotor(DEFMotorNo2_PWM, offsetPwmValue, 0);
    b934:	e3a00002 	mov	r0, #2
    b938:	e51b102c 	ldr	r1, [fp, #-44]	; 0x2c
    b93c:	e3a02000 	mov	r2, #0
    b940:	eb000cdb 	bl	ecb4 <SetPwmMotor>
					offsetPwmValue = calcPwmValue( controllChar , 3, pwmValue);
    b944:	e55b3045 	ldrb	r3, [fp, #-69]	; 0x45
    b948:	e1a00003 	mov	r0, r3
    b94c:	e3a01003 	mov	r1, #3
    b950:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
    b954:	eb000011 	bl	b9a0 <calcPwmValue>
    b958:	e50b002c 	str	r0, [fp, #-44]	; 0x2c
					SetPwmMotor(DEFMotorNo4_PWM, offsetPwmValue, 0);
    b95c:	e3a00008 	mov	r0, #8
    b960:	e51b102c 	ldr	r1, [fp, #-44]	; 0x2c
    b964:	e3a02000 	mov	r2, #0
    b968:	eb000cd1 	bl	ecb4 <SetPwmMotor>
						SetPwmMotor(DEFMotorNo6_PWM, offsetPwmValue, 0);
						offsetPwmValue = calcPwmValue( controllChar , 7, pwmValue);
						SetPwmMotor(DEFMotorNo8_PWM, offsetPwmValue, 0);
					#endif
				}
				break;
    b96c:	ea000000 	b	b974 <decodeline+0x4cc>
			default:
				break;
    b970:	e1a00000 	nop			; (mov r0, r0)
		}//switch
		printf("motorNumber : %i", motorNumber);
    b974:	e59f0020 	ldr	r0, [pc, #32]	; b99c <decodeline+0x4f4>
    b978:	e51b1050 	ldr	r1, [fp, #-80]	; 0x50
    b97c:	ebfff4c9 	bl	8ca8 <_init+0x194>
	}//if
	return delay;
    b980:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    b984:	e1a0d00a 	mov	sp, sl
}
    b988:	e1a00003 	mov	r0, r3
    b98c:	e24bd020 	sub	sp, fp, #32
    b990:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b994:	0001290c 	.word	0x0001290c
    b998:	00012914 	.word	0x00012914
    b99c:	00012924 	.word	0x00012924

0000b9a0 <calcPwmValue>:


int calcPwmValue(char controllChar , int motorNumber, int pwmValue){
    b9a0:	e92d4800 	push	{fp, lr}
    b9a4:	e28db004 	add	fp, sp, #4
    b9a8:	e24dd010 	sub	sp, sp, #16
    b9ac:	e1a03000 	mov	r3, r0
    b9b0:	e50b100c 	str	r1, [fp, #-12]
    b9b4:	e50b2010 	str	r2, [fp, #-16]
    b9b8:	e54b3005 	strb	r3, [fp, #-5]
	switch(controllChar){
    b9bc:	e55b3005 	ldrb	r3, [fp, #-5]
    b9c0:	e353002d 	cmp	r3, #45	; 0x2d
    b9c4:	0a00000b 	beq	b9f8 <calcPwmValue+0x58>
    b9c8:	e353003d 	cmp	r3, #61	; 0x3d
    b9cc:	0a000010 	beq	ba14 <calcPwmValue+0x74>
    b9d0:	e353002b 	cmp	r3, #43	; 0x2b
    b9d4:	0a000000 	beq	b9dc <calcPwmValue+0x3c>
					pwmValue = GetPwmMotor(motorNumber)-pwmValue;
					break;
				case '=':
					break;
				default:
					break;
    b9d8:	ea00000e 	b	ba18 <calcPwmValue+0x78>


int calcPwmValue(char controllChar , int motorNumber, int pwmValue){
	switch(controllChar){
				case '+':
					pwmValue = GetPwmMotor(motorNumber)+pwmValue;
    b9dc:	e51b000c 	ldr	r0, [fp, #-12]
    b9e0:	eb000d58 	bl	ef48 <GetPwmMotor>
    b9e4:	e1a03000 	mov	r3, r0
    b9e8:	e51b2010 	ldr	r2, [fp, #-16]
    b9ec:	e0823003 	add	r3, r2, r3
    b9f0:	e50b3010 	str	r3, [fp, #-16]
					break;
    b9f4:	ea000007 	b	ba18 <calcPwmValue+0x78>
				case '-':
					pwmValue = GetPwmMotor(motorNumber)-pwmValue;
    b9f8:	e51b000c 	ldr	r0, [fp, #-12]
    b9fc:	eb000d51 	bl	ef48 <GetPwmMotor>
    ba00:	e1a02000 	mov	r2, r0
    ba04:	e51b3010 	ldr	r3, [fp, #-16]
    ba08:	e0633002 	rsb	r3, r3, r2
    ba0c:	e50b3010 	str	r3, [fp, #-16]
					break;
    ba10:	ea000000 	b	ba18 <calcPwmValue+0x78>
				case '=':
					break;
    ba14:	e1a00000 	nop			; (mov r0, r0)
				default:
					break;
		}
	return pwmValue;
    ba18:	e51b3010 	ldr	r3, [fp, #-16]
}
    ba1c:	e1a00003 	mov	r0, r3
    ba20:	e24bd004 	sub	sp, fp, #4
    ba24:	e8bd8800 	pop	{fp, pc}

0000ba28 <g_halADC_get_ui16>:
 * 2015/05/08 mabrgs00:
 *  Error handling from I2C included
 *
 * \endinternal
 ***********************************************************************/
float g_halADC_get_ui16(unsigned char l_input_ui8){
    ba28:	e92d4800 	push	{fp, lr}
    ba2c:	e28db004 	add	fp, sp, #4
    ba30:	e24dd018 	sub	sp, sp, #24
    ba34:	e1a03000 	mov	r3, r0
    ba38:	e54b3015 	strb	r3, [fp, #-21]

  unsigned char l_address_ui8 = 0x49;		// Address of our device on the I2C bus
    ba3c:	e3a03049 	mov	r3, #73	; 0x49
    ba40:	e54b3006 	strb	r3, [fp, #-6]
  unsigned char l_mux_ui8;			// Config value depening on input
  unsigned short l_val_ui16;			// (Converted) result of ADC
  unsigned char l_checkerror_bl;			// Variable to store return value

  // Setting Config according to select Input
  switch(l_input_ui8){			   	// Standard: 1100 0011  (Bit 15-8) Input A0
    ba44:	e55b3015 	ldrb	r3, [fp, #-21]
    ba48:	e2433001 	sub	r3, r3, #1
    ba4c:	e3530003 	cmp	r3, #3
    ba50:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    ba54:	ea00000f 	b	ba98 <g_halADC_get_ui16+0x70>
    ba58:	0000ba68 	.word	0x0000ba68
    ba5c:	0000ba74 	.word	0x0000ba74
    ba60:	0000ba80 	.word	0x0000ba80
    ba64:	0000ba8c 	.word	0x0000ba8c
	case 1: l_mux_ui8 = 0xC2; break;	// Input: A0	
    ba68:	e3e0303d 	mvn	r3, #61	; 0x3d
    ba6c:	e54b3005 	strb	r3, [fp, #-5]
    ba70:	ea00000a 	b	baa0 <g_halADC_get_ui16+0x78>
	case 2: l_mux_ui8 = 0xD2; break;	
    ba74:	e3e0302d 	mvn	r3, #45	; 0x2d
    ba78:	e54b3005 	strb	r3, [fp, #-5]
    ba7c:	ea000007 	b	baa0 <g_halADC_get_ui16+0x78>
	case 3: l_mux_ui8 = 0xE2; break;	
    ba80:	e3e0301d 	mvn	r3, #29
    ba84:	e54b3005 	strb	r3, [fp, #-5]
    ba88:	ea000004 	b	baa0 <g_halADC_get_ui16+0x78>
	case 4: l_mux_ui8 = 0xF2; break;	// Input: A3
    ba8c:	e3e0300d 	mvn	r3, #13
    ba90:	e54b3005 	strb	r3, [fp, #-5]
    ba94:	ea000001 	b	baa0 <g_halADC_get_ui16+0x78>
	default: l_mux_ui8 = 0xC2; 			
    ba98:	e3e0303d 	mvn	r3, #61	; 0x3d
    ba9c:	e54b3005 	strb	r3, [fp, #-5]
  // First Hex depends on Starting Conversion + the Input, which Pin to read A0-3
  // Second Value is PGA (001)=+-4,099V and continuous Mode (0)


  // These three bytes are written to the ADS1015 to set the config register and start the conversion 
  l_writeBuf_rg24[0] = 1;		// This sets the pointer register to write two bytes to the config register
    baa0:	e3a03001 	mov	r3, #1
    baa4:	e54b3010 	strb	r3, [fp, #-16]
  l_writeBuf_rg24[1] = l_mux_ui8;   	// This sets the 8 MSBs of the config register (bits 15-8) to 11000011
    baa8:	e55b3005 	ldrb	r3, [fp, #-5]
    baac:	e54b300f 	strb	r3, [fp, #-15]
  l_writeBuf_rg24[2] = 0x23;  		// This sets the 8 LSBs of the config register (bits  7-0) to 00100011   
    bab0:	e3a03023 	mov	r3, #35	; 0x23
    bab4:	e54b300e 	strb	r3, [fp, #-14]
  // First Hex is sample Rate. (001) sets to 250SPS + Comp Mode (0)
  // Second Hex is Comp. config. (0011) disable the comparator


  // Initialize the buffer used to read data from the ADS1015 to 0
  l_readBuf_rg16[0]= 0;		
    bab8:	e3a03000 	mov	r3, #0
    babc:	e54b3014 	strb	r3, [fp, #-20]
  l_readBuf_rg16[1]= 0;
    bac0:	e3a03000 	mov	r3, #0
    bac4:	e54b3013 	strb	r3, [fp, #-19]
  
  // Write l_writeBuf_rg24 to the ADS1015, the 3 specifies the number of bytes we are writing,
  // this begins a continuous conversion
  l_checkerror_bl = g_lldI2c_WriteI2c_bl(l_address_ui8,l_writeBuf_rg24,3);
    bac8:	e55b2006 	ldrb	r2, [fp, #-6]
    bacc:	e24b3010 	sub	r3, fp, #16
    bad0:	e1a00002 	mov	r0, r2
    bad4:	e1a01003 	mov	r1, r3
    bad8:	e3a02003 	mov	r2, #3
    badc:	eb000b1d 	bl	e758 <g_lldI2c_WriteI2c_bl>
    bae0:	e1a03000 	mov	r3, r0
    bae4:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    bae8:	e55b3007 	ldrb	r3, [fp, #-7]
    baec:	e3530001 	cmp	r3, #1
    baf0:	1a000001 	bne	bafc <g_halADC_get_ui16+0xd4>
	{
	return -1;
    baf4:	eddf7a43 	vldr	s15, [pc, #268]	; bc08 <g_halADC_get_ui16+0x1e0>
    baf8:	ea00003b 	b	bbec <g_halADC_get_ui16+0x1c4>
	}

  // Read the config register into readBuf
  l_checkerror_bl = g_lldI2c_ReadI2c_bl(l_address_ui8,l_readBuf_rg16,2);
    bafc:	e55b2006 	ldrb	r2, [fp, #-6]
    bb00:	e24b3014 	sub	r3, fp, #20
    bb04:	e1a00002 	mov	r0, r2
    bb08:	e1a01003 	mov	r1, r3
    bb0c:	e3a02002 	mov	r2, #2
    bb10:	eb000b48 	bl	e838 <g_lldI2c_ReadI2c_bl>
    bb14:	e1a03000 	mov	r3, r0
    bb18:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    bb1c:	e55b3007 	ldrb	r3, [fp, #-7]
    bb20:	e3530001 	cmp	r3, #1
    bb24:	1a000001 	bne	bb30 <g_halADC_get_ui16+0x108>
	{
	return -1;
    bb28:	eddf7a36 	vldr	s15, [pc, #216]	; bc08 <g_halADC_get_ui16+0x1e0>
    bb2c:	ea00002e 	b	bbec <g_halADC_get_ui16+0x1c4>
	}	
	
  // Set pointer register to 0 to read from the conversion register
  l_writeBuf_rg24[0] = 0;			
    bb30:	e3a03000 	mov	r3, #0
    bb34:	e54b3010 	strb	r3, [fp, #-16]
  l_checkerror_bl = g_lldI2c_WriteI2c_bl(l_address_ui8, l_writeBuf_rg24,1);
    bb38:	e55b2006 	ldrb	r2, [fp, #-6]
    bb3c:	e24b3010 	sub	r3, fp, #16
    bb40:	e1a00002 	mov	r0, r2
    bb44:	e1a01003 	mov	r1, r3
    bb48:	e3a02001 	mov	r2, #1
    bb4c:	eb000b01 	bl	e758 <g_lldI2c_WriteI2c_bl>
    bb50:	e1a03000 	mov	r3, r0
    bb54:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    bb58:	e55b3007 	ldrb	r3, [fp, #-7]
    bb5c:	e3530001 	cmp	r3, #1
    bb60:	1a000001 	bne	bb6c <g_halADC_get_ui16+0x144>
	{
	return -1;
    bb64:	eddf7a27 	vldr	s15, [pc, #156]	; bc08 <g_halADC_get_ui16+0x1e0>
    bb68:	ea00001f 	b	bbec <g_halADC_get_ui16+0x1c4>
	}

  // Read the contents of the conversion register into readBuf		
  l_checkerror_bl = g_lldI2c_ReadI2c_bl(l_address_ui8,l_readBuf_rg16,2);	
    bb6c:	e55b2006 	ldrb	r2, [fp, #-6]
    bb70:	e24b3014 	sub	r3, fp, #20
    bb74:	e1a00002 	mov	r0, r2
    bb78:	e1a01003 	mov	r1, r3
    bb7c:	e3a02002 	mov	r2, #2
    bb80:	eb000b2c 	bl	e838 <g_lldI2c_ReadI2c_bl>
    bb84:	e1a03000 	mov	r3, r0
    bb88:	e54b3007 	strb	r3, [fp, #-7]
  if (l_checkerror_bl == 1)
    bb8c:	e55b3007 	ldrb	r3, [fp, #-7]
    bb90:	e3530001 	cmp	r3, #1
    bb94:	1a000001 	bne	bba0 <g_halADC_get_ui16+0x178>
	{
	return -1;
    bb98:	eddf7a1a 	vldr	s15, [pc, #104]	; bc08 <g_halADC_get_ui16+0x1e0>
    bb9c:	ea000012 	b	bbec <g_halADC_get_ui16+0x1c4>
	}

  // Combine the two bytes of readBuf into a single 16 bit result 
  l_val_ui16 = l_readBuf_rg16[0] << 8 | l_readBuf_rg16[1];	
    bba0:	e55b3014 	ldrb	r3, [fp, #-20]
    bba4:	e1a03403 	lsl	r3, r3, #8
    bba8:	e6ff2073 	uxth	r2, r3
    bbac:	e55b3013 	ldrb	r3, [fp, #-19]
    bbb0:	e1823003 	orr	r3, r2, r3
    bbb4:	e6ff3073 	uxth	r3, r3
    bbb8:	e14b30ba 	strh	r3, [fp, #-10]
  l_val_ui16 = l_val_ui16 >> 4; 
    bbbc:	e15b30ba 	ldrh	r3, [fp, #-10]
    bbc0:	e1a03223 	lsr	r3, r3, #4
    bbc4:	e14b30ba 	strh	r3, [fp, #-10]

  return((float)l_val_ui16*4.096/2047.0);
    bbc8:	e15b30ba 	ldrh	r3, [fp, #-10]
    bbcc:	ee073a10 	vmov	s14, r3
    bbd0:	eef87a47 	vcvt.f32.u32	s15, s14
    bbd4:	eeb76ae7 	vcvt.f64.f32	d6, s15
    bbd8:	ed9f7b06 	vldr	d7, [pc, #24]	; bbf8 <g_halADC_get_ui16+0x1d0>
    bbdc:	ee266b07 	vmul.f64	d6, d6, d7
    bbe0:	ed9f7b06 	vldr	d7, [pc, #24]	; bc00 <g_halADC_get_ui16+0x1d8>
    bbe4:	ee867b07 	vdiv.f64	d7, d6, d7
    bbe8:	eef77bc7 	vcvt.f32.f64	s15, d7

}
    bbec:	eeb00a67 	vmov.f32	s0, s15
    bbf0:	e24bd004 	sub	sp, fp, #4
    bbf4:	e8bd8800 	pop	{fp, pc}
    bbf8:	d2f1a9fc 	.word	0xd2f1a9fc
    bbfc:	4010624d 	.word	0x4010624d
    bc00:	00000000 	.word	0x00000000
    bc04:	409ffc00 	.word	0x409ffc00
    bc08:	bf800000 	.word	0xbf800000
    bc0c:	e1a00000 	nop			; (mov r0, r0)

0000bc10 <g_halBatCheck_getBatteryStatus_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halBatCheck_getBatteryStatus_f64(void)
{
    bc10:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    bc14:	e28db000 	add	fp, sp, #0
	return m_batteryLevel_f64;
    bc18:	e59f3014 	ldr	r3, [pc, #20]	; bc34 <g_halBatCheck_getBatteryStatus_f64+0x24>
    bc1c:	e1c320d0 	ldrd	r2, [r3]
    bc20:	ec432b17 	vmov	d7, r2, r3
}
    bc24:	eeb00b47 	vmov.f64	d0, d7
    bc28:	e24bd000 	sub	sp, fp, #0
    bc2c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    bc30:	e12fff1e 	bx	lr
    bc34:	0001b6d8 	.word	0x0001b6d8

0000bc38 <g_halBatCheck_readBatStatusFromI2C_bl>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
unsigned int  g_halBatCheck_readBatStatusFromI2C_bl(void)
{
    bc38:	e92d4800 	push	{fp, lr}
    bc3c:	e28db004 	add	fp, sp, #4
    bc40:	e24dd008 	sub	sp, sp, #8
	double l_batteryLevel_f64;

	l_batteryLevel_f64=g_halADC_get_ui16(M_HAL_BATCHECK_ADC_INPUT_PORT_UI8);
    bc44:	e3a00001 	mov	r0, #1
    bc48:	ebffff76 	bl	ba28 <g_halADC_get_ui16>
    bc4c:	eef07a40 	vmov.f32	s15, s0
    bc50:	eeb77ae7 	vcvt.f64.f32	d7, s15
    bc54:	ed0b7b03 	vstr	d7, [fp, #-12]

	if(l_batteryLevel_f64<=0)
    bc58:	ed1b7b03 	vldr	d7, [fp, #-12]
    bc5c:	eeb57bc0 	vcmpe.f64	d7, #0.0
    bc60:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    bc64:	8a000001 	bhi	bc70 <g_halBatCheck_readBatStatusFromI2C_bl+0x38>
	{return M_HAL_BATCHECK_FAILED_BL;}
    bc68:	e3a03001 	mov	r3, #1
    bc6c:	ea000003 	b	bc80 <g_halBatCheck_readBatStatusFromI2C_bl+0x48>

	m_batteryLevel_f64=l_batteryLevel_f64;
    bc70:	e59f1014 	ldr	r1, [pc, #20]	; bc8c <g_halBatCheck_readBatStatusFromI2C_bl+0x54>
    bc74:	e14b20dc 	ldrd	r2, [fp, #-12]
    bc78:	e1c120f0 	strd	r2, [r1]

	return M_HAL_BATCHECK_SUCCESS_BL;
    bc7c:	e3a03000 	mov	r3, #0
}
    bc80:	e1a00003 	mov	r0, r3
    bc84:	e24bd004 	sub	sp, fp, #4
    bc88:	e8bd8800 	pop	{fp, pc}
    bc8c:	0001b6d8 	.word	0x0001b6d8

0000bc90 <g_halGps_getTime_ui32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
unsigned int g_halGps_getTime_ui32(void)
{
    bc90:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    bc94:	e28db000 	add	fp, sp, #0
	return l_time_ui32;
    bc98:	e59f3010 	ldr	r3, [pc, #16]	; bcb0 <g_halGps_getTime_ui32+0x20>
    bc9c:	e5933000 	ldr	r3, [r3]
}
    bca0:	e1a00003 	mov	r0, r3
    bca4:	e24bd000 	sub	sp, fp, #0
    bca8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    bcac:	e12fff1e 	bx	lr
    bcb0:	0001b710 	.word	0x0001b710

0000bcb4 <g_halGps_getLongitude_st>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
struct strPosition g_halGps_getLongitude_st(void)
{
    bcb4:	e92d4800 	push	{fp, lr}
    bcb8:	e28db004 	add	fp, sp, #4
    bcbc:	e24dd008 	sub	sp, sp, #8
    bcc0:	e50b0008 	str	r0, [fp, #-8]
	return l_gps_longitude_st;
    bcc4:	e51b2008 	ldr	r2, [fp, #-8]
    bcc8:	e59f3020 	ldr	r3, [pc, #32]	; bcf0 <g_halGps_getLongitude_st+0x3c>
    bccc:	e1a0c002 	mov	ip, r2
    bcd0:	e1a0e003 	mov	lr, r3
    bcd4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    bcd8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    bcdc:	e89e0003 	ldm	lr, {r0, r1}
    bce0:	e88c0003 	stm	ip, {r0, r1}
}
    bce4:	e51b0008 	ldr	r0, [fp, #-8]
    bce8:	e24bd004 	sub	sp, fp, #4
    bcec:	e8bd8800 	pop	{fp, pc}
    bcf0:	0001b6e0 	.word	0x0001b6e0

0000bcf4 <g_halGps_getLatitude_st>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
struct strPosition g_halGps_getLatitude_st(void)
{
    bcf4:	e92d4800 	push	{fp, lr}
    bcf8:	e28db004 	add	fp, sp, #4
    bcfc:	e24dd008 	sub	sp, sp, #8
    bd00:	e50b0008 	str	r0, [fp, #-8]
	return l_gps_latitude_st;
    bd04:	e51b2008 	ldr	r2, [fp, #-8]
    bd08:	e59f3020 	ldr	r3, [pc, #32]	; bd30 <g_halGps_getLatitude_st+0x3c>
    bd0c:	e1a0c002 	mov	ip, r2
    bd10:	e1a0e003 	mov	lr, r3
    bd14:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    bd18:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    bd1c:	e89e0003 	ldm	lr, {r0, r1}
    bd20:	e88c0003 	stm	ip, {r0, r1}
}
    bd24:	e51b0008 	ldr	r0, [fp, #-8]
    bd28:	e24bd004 	sub	sp, fp, #4
    bd2c:	e8bd8800 	pop	{fp, pc}
    bd30:	0001b6f8 	.word	0x0001b6f8

0000bd34 <g_halGps_getFix_ch>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
char g_halGps_getFix_ch(void)
{
    bd34:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    bd38:	e28db000 	add	fp, sp, #0
	return l_fix_ch;
    bd3c:	e59f3010 	ldr	r3, [pc, #16]	; bd54 <g_halGps_getFix_ch+0x20>
    bd40:	e5d33000 	ldrb	r3, [r3]
}
    bd44:	e1a00003 	mov	r0, r3
    bd48:	e24bd000 	sub	sp, fp, #0
    bd4c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    bd50:	e12fff1e 	bx	lr
    bd54:	0001b714 	.word	0x0001b714

0000bd58 <g_halGps_getVelocity_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getVelocity_f64(void)
{
    bd58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    bd5c:	e28db000 	add	fp, sp, #0
	return l_velocity_f64;
    bd60:	e59f3014 	ldr	r3, [pc, #20]	; bd7c <g_halGps_getVelocity_f64+0x24>
    bd64:	e1c320d0 	ldrd	r2, [r3]
    bd68:	ec432b17 	vmov	d7, r2, r3
}
    bd6c:	eeb00b47 	vmov.f64	d0, d7
    bd70:	e24bd000 	sub	sp, fp, #0
    bd74:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    bd78:	e12fff1e 	bx	lr
    bd7c:	0001b718 	.word	0x0001b718

0000bd80 <g_halGps_getDirection_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getDirection_f64(void)
{
    bd80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    bd84:	e28db000 	add	fp, sp, #0
	return l_direction_f64;
    bd88:	e59f3014 	ldr	r3, [pc, #20]	; bda4 <g_halGps_getDirection_f64+0x24>
    bd8c:	e1c320d0 	ldrd	r2, [r3]
    bd90:	ec432b17 	vmov	d7, r2, r3
}
    bd94:	eeb00b47 	vmov.f64	d0, d7
    bd98:	e24bd000 	sub	sp, fp, #0
    bd9c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    bda0:	e12fff1e 	bx	lr
    bda4:	0001b720 	.word	0x0001b720

0000bda8 <g_halGps_getDate_ui32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
unsigned int g_halGps_getDate_ui32(void)
{
    bda8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    bdac:	e28db000 	add	fp, sp, #0
	return l_date_ui32;
    bdb0:	e59f3010 	ldr	r3, [pc, #16]	; bdc8 <g_halGps_getDate_ui32+0x20>
    bdb4:	e5933000 	ldr	r3, [r3]
}
    bdb8:	e1a00003 	mov	r0, r3
    bdbc:	e24bd000 	sub	sp, fp, #0
    bdc0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    bdc4:	e12fff1e 	bx	lr
    bdc8:	0001b728 	.word	0x0001b728

0000bdcc <g_halGps_getHeight_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getHeight_f64(void)
{
    bdcc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    bdd0:	e28db000 	add	fp, sp, #0
	return l_height_f64;
    bdd4:	e59f3014 	ldr	r3, [pc, #20]	; bdf0 <g_halGps_getHeight_f64+0x24>
    bdd8:	e1c320d0 	ldrd	r2, [r3]
    bddc:	ec432b17 	vmov	d7, r2, r3
}
    bde0:	eeb00b47 	vmov.f64	d0, d7
    bde4:	e24bd000 	sub	sp, fp, #0
    bde8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    bdec:	e12fff1e 	bx	lr
    bdf0:	0001b730 	.word	0x0001b730

0000bdf4 <g_halGps_getGeoid_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGps_getGeoid_f64(void)
{
    bdf4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    bdf8:	e28db000 	add	fp, sp, #0
	return l_geoid_f64;
    bdfc:	e59f3014 	ldr	r3, [pc, #20]	; be18 <g_halGps_getGeoid_f64+0x24>
    be00:	e1c320d0 	ldrd	r2, [r3]
    be04:	ec432b17 	vmov	d7, r2, r3
}
    be08:	eeb00b47 	vmov.f64	d0, d7
    be0c:	e24bd000 	sub	sp, fp, #0
    be10:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    be14:	e12fff1e 	bx	lr
    be18:	0001b738 	.word	0x0001b738

0000be1c <l_resetMessage1Values_vd>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void l_resetMessage1Values_vd(void)
{
    be1c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    be20:	e28db000 	add	fp, sp, #0
	l_time_ui32=0;
    be24:	e59f3098 	ldr	r3, [pc, #152]	; bec4 <l_resetMessage1Values_vd+0xa8>
    be28:	e3a02000 	mov	r2, #0
    be2c:	e5832000 	str	r2, [r3]
	l_gps_longitude_st.l_degree_ui32=0;
    be30:	e59f3090 	ldr	r3, [pc, #144]	; bec8 <l_resetMessage1Values_vd+0xac>
    be34:	e3a02000 	mov	r2, #0
    be38:	e5832000 	str	r2, [r3]
	l_gps_longitude_st.l_minutes_ui32=0;
    be3c:	e59f3084 	ldr	r3, [pc, #132]	; bec8 <l_resetMessage1Values_vd+0xac>
    be40:	e3a02000 	mov	r2, #0
    be44:	e5832004 	str	r2, [r3, #4]
	l_gps_longitude_st.l_seconds_f64=0;
    be48:	e59f1078 	ldr	r1, [pc, #120]	; bec8 <l_resetMessage1Values_vd+0xac>
    be4c:	e3a02000 	mov	r2, #0
    be50:	e3a03000 	mov	r3, #0
    be54:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_longitude_st.l_cardinalDirection_ch=' ';
    be58:	e59f3068 	ldr	r3, [pc, #104]	; bec8 <l_resetMessage1Values_vd+0xac>
    be5c:	e3a02020 	mov	r2, #32
    be60:	e5c32010 	strb	r2, [r3, #16]
	l_gps_latitude_st.l_degree_ui32=0;
    be64:	e59f3060 	ldr	r3, [pc, #96]	; becc <l_resetMessage1Values_vd+0xb0>
    be68:	e3a02000 	mov	r2, #0
    be6c:	e5832000 	str	r2, [r3]
	l_gps_latitude_st.l_minutes_ui32=0;
    be70:	e59f3054 	ldr	r3, [pc, #84]	; becc <l_resetMessage1Values_vd+0xb0>
    be74:	e3a02000 	mov	r2, #0
    be78:	e5832004 	str	r2, [r3, #4]
	l_gps_latitude_st.l_seconds_f64=0;
    be7c:	e59f1048 	ldr	r1, [pc, #72]	; becc <l_resetMessage1Values_vd+0xb0>
    be80:	e3a02000 	mov	r2, #0
    be84:	e3a03000 	mov	r3, #0
    be88:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_latitude_st.l_cardinalDirection_ch=' ';
    be8c:	e59f3038 	ldr	r3, [pc, #56]	; becc <l_resetMessage1Values_vd+0xb0>
    be90:	e3a02020 	mov	r2, #32
    be94:	e5c32010 	strb	r2, [r3, #16]
	l_height_f64=0;
    be98:	e59f1030 	ldr	r1, [pc, #48]	; bed0 <l_resetMessage1Values_vd+0xb4>
    be9c:	e3a02000 	mov	r2, #0
    bea0:	e3a03000 	mov	r3, #0
    bea4:	e1c120f0 	strd	r2, [r1]
	l_geoid_f64=0;
    bea8:	e59f1024 	ldr	r1, [pc, #36]	; bed4 <l_resetMessage1Values_vd+0xb8>
    beac:	e3a02000 	mov	r2, #0
    beb0:	e3a03000 	mov	r3, #0
    beb4:	e1c120f0 	strd	r2, [r1]
}
    beb8:	e24bd000 	sub	sp, fp, #0
    bebc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    bec0:	e12fff1e 	bx	lr
    bec4:	0001b710 	.word	0x0001b710
    bec8:	0001b6e0 	.word	0x0001b6e0
    becc:	0001b6f8 	.word	0x0001b6f8
    bed0:	0001b730 	.word	0x0001b730
    bed4:	0001b738 	.word	0x0001b738

0000bed8 <l_resetMessage2Values_vd>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
void l_resetMessage2Values_vd(void)
{
    bed8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    bedc:	e28db000 	add	fp, sp, #0
	l_time_ui32=0;
    bee0:	e59f30b0 	ldr	r3, [pc, #176]	; bf98 <l_resetMessage2Values_vd+0xc0>
    bee4:	e3a02000 	mov	r2, #0
    bee8:	e5832000 	str	r2, [r3]
	l_fix_ch=' ';
    beec:	e59f30a8 	ldr	r3, [pc, #168]	; bf9c <l_resetMessage2Values_vd+0xc4>
    bef0:	e3a02020 	mov	r2, #32
    bef4:	e5c32000 	strb	r2, [r3]
	l_gps_longitude_st.l_degree_ui32=0;
    bef8:	e59f30a0 	ldr	r3, [pc, #160]	; bfa0 <l_resetMessage2Values_vd+0xc8>
    befc:	e3a02000 	mov	r2, #0
    bf00:	e5832000 	str	r2, [r3]
	l_gps_longitude_st.l_minutes_ui32=0;
    bf04:	e59f3094 	ldr	r3, [pc, #148]	; bfa0 <l_resetMessage2Values_vd+0xc8>
    bf08:	e3a02000 	mov	r2, #0
    bf0c:	e5832004 	str	r2, [r3, #4]
	l_gps_longitude_st.l_seconds_f64=0;
    bf10:	e59f1088 	ldr	r1, [pc, #136]	; bfa0 <l_resetMessage2Values_vd+0xc8>
    bf14:	e3a02000 	mov	r2, #0
    bf18:	e3a03000 	mov	r3, #0
    bf1c:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_longitude_st.l_cardinalDirection_ch=' ';
    bf20:	e59f3078 	ldr	r3, [pc, #120]	; bfa0 <l_resetMessage2Values_vd+0xc8>
    bf24:	e3a02020 	mov	r2, #32
    bf28:	e5c32010 	strb	r2, [r3, #16]
	l_gps_latitude_st.l_degree_ui32=0;
    bf2c:	e59f3070 	ldr	r3, [pc, #112]	; bfa4 <l_resetMessage2Values_vd+0xcc>
    bf30:	e3a02000 	mov	r2, #0
    bf34:	e5832000 	str	r2, [r3]
	l_gps_latitude_st.l_minutes_ui32=0;
    bf38:	e59f3064 	ldr	r3, [pc, #100]	; bfa4 <l_resetMessage2Values_vd+0xcc>
    bf3c:	e3a02000 	mov	r2, #0
    bf40:	e5832004 	str	r2, [r3, #4]
	l_gps_latitude_st.l_seconds_f64=0;
    bf44:	e59f1058 	ldr	r1, [pc, #88]	; bfa4 <l_resetMessage2Values_vd+0xcc>
    bf48:	e3a02000 	mov	r2, #0
    bf4c:	e3a03000 	mov	r3, #0
    bf50:	e1c120f8 	strd	r2, [r1, #8]
	l_gps_latitude_st.l_cardinalDirection_ch=' ';
    bf54:	e59f3048 	ldr	r3, [pc, #72]	; bfa4 <l_resetMessage2Values_vd+0xcc>
    bf58:	e3a02020 	mov	r2, #32
    bf5c:	e5c32010 	strb	r2, [r3, #16]
	l_velocity_f64=0;
    bf60:	e59f1040 	ldr	r1, [pc, #64]	; bfa8 <l_resetMessage2Values_vd+0xd0>
    bf64:	e3a02000 	mov	r2, #0
    bf68:	e3a03000 	mov	r3, #0
    bf6c:	e1c120f0 	strd	r2, [r1]
	l_direction_f64=0;
    bf70:	e59f1034 	ldr	r1, [pc, #52]	; bfac <l_resetMessage2Values_vd+0xd4>
    bf74:	e3a02000 	mov	r2, #0
    bf78:	e3a03000 	mov	r3, #0
    bf7c:	e1c120f0 	strd	r2, [r1]
	l_date_ui32=0;
    bf80:	e59f3028 	ldr	r3, [pc, #40]	; bfb0 <l_resetMessage2Values_vd+0xd8>
    bf84:	e3a02000 	mov	r2, #0
    bf88:	e5832000 	str	r2, [r3]
}
    bf8c:	e24bd000 	sub	sp, fp, #0
    bf90:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    bf94:	e12fff1e 	bx	lr
    bf98:	0001b710 	.word	0x0001b710
    bf9c:	0001b714 	.word	0x0001b714
    bfa0:	0001b6e0 	.word	0x0001b6e0
    bfa4:	0001b6f8 	.word	0x0001b6f8
    bfa8:	0001b718 	.word	0x0001b718
    bfac:	0001b720 	.word	0x0001b720
    bfb0:	0001b728 	.word	0x0001b728

0000bfb4 <g_halGps_getData_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGps_getData_i32(void)
{
    bfb4:	e92d4800 	push	{fp, lr}
    bfb8:	e28db004 	add	fp, sp, #4

	l_rec_Data_ch=g_lldUart_readByte_ch();
    bfbc:	eb000af8 	bl	eba4 <g_lldUart_readByte_ch>
    bfc0:	e1a03000 	mov	r3, r0
    bfc4:	e1a02003 	mov	r2, r3
    bfc8:	e59f38e0 	ldr	r3, [pc, #2272]	; c8b0 <g_halGps_getData_i32+0x8fc>
    bfcc:	e5c32000 	strb	r2, [r3]

	if(!l_message_position_ch)//check which message is received
    bfd0:	e59f38c4 	ldr	r3, [pc, #2244]	; c89c <g_halGps_getData_i32+0x8e8>
    bfd4:	e5d33000 	ldrb	r3, [r3]
    bfd8:	e3530000 	cmp	r3, #0
    bfdc:	1a0000a6 	bne	c27c <g_halGps_getData_i32+0x2c8>
	{
		if(l_rec_Data_ch=='$')
    bfe0:	e59f38c8 	ldr	r3, [pc, #2248]	; c8b0 <g_halGps_getData_i32+0x8fc>
    bfe4:	e5d33000 	ldrb	r3, [r3]
    bfe8:	e3530024 	cmp	r3, #36	; 0x24
    bfec:	1a00000b 	bne	c020 <g_halGps_getData_i32+0x6c>
		{l_header_position_ch=1;l_succeded_i32=0;l_succeded_i32++;}
    bff0:	e59f38a8 	ldr	r3, [pc, #2216]	; c8a0 <g_halGps_getData_i32+0x8ec>
    bff4:	e3a02001 	mov	r2, #1
    bff8:	e5c32000 	strb	r2, [r3]
    bffc:	e59f38b0 	ldr	r3, [pc, #2224]	; c8b4 <g_halGps_getData_i32+0x900>
    c000:	e3a02000 	mov	r2, #0
    c004:	e5832000 	str	r2, [r3]
    c008:	e59f38a4 	ldr	r3, [pc, #2212]	; c8b4 <g_halGps_getData_i32+0x900>
    c00c:	e5933000 	ldr	r3, [r3]
    c010:	e2832001 	add	r2, r3, #1
    c014:	e59f3898 	ldr	r3, [pc, #2200]	; c8b4 <g_halGps_getData_i32+0x900>
    c018:	e5832000 	str	r2, [r3]
    c01c:	ea000413 	b	d070 <g_halGps_getData_i32+0x10bc>
		else if (l_header_position_ch==1 && l_rec_Data_ch=='G')
    c020:	e59f3878 	ldr	r3, [pc, #2168]	; c8a0 <g_halGps_getData_i32+0x8ec>
    c024:	e5d33000 	ldrb	r3, [r3]
    c028:	e3530001 	cmp	r3, #1
    c02c:	1a00000c 	bne	c064 <g_halGps_getData_i32+0xb0>
    c030:	e59f3878 	ldr	r3, [pc, #2168]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c034:	e5d33000 	ldrb	r3, [r3]
    c038:	e3530047 	cmp	r3, #71	; 0x47
    c03c:	1a000008 	bne	c064 <g_halGps_getData_i32+0xb0>
		{l_header_position_ch=2;l_succeded_i32++;}
    c040:	e59f3858 	ldr	r3, [pc, #2136]	; c8a0 <g_halGps_getData_i32+0x8ec>
    c044:	e3a02002 	mov	r2, #2
    c048:	e5c32000 	strb	r2, [r3]
    c04c:	e59f3860 	ldr	r3, [pc, #2144]	; c8b4 <g_halGps_getData_i32+0x900>
    c050:	e5933000 	ldr	r3, [r3]
    c054:	e2832001 	add	r2, r3, #1
    c058:	e59f3854 	ldr	r3, [pc, #2132]	; c8b4 <g_halGps_getData_i32+0x900>
    c05c:	e5832000 	str	r2, [r3]
    c060:	ea000084 	b	c278 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==2 && l_rec_Data_ch=='P')
    c064:	e59f3834 	ldr	r3, [pc, #2100]	; c8a0 <g_halGps_getData_i32+0x8ec>
    c068:	e5d33000 	ldrb	r3, [r3]
    c06c:	e3530002 	cmp	r3, #2
    c070:	1a00000c 	bne	c0a8 <g_halGps_getData_i32+0xf4>
    c074:	e59f3834 	ldr	r3, [pc, #2100]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c078:	e5d33000 	ldrb	r3, [r3]
    c07c:	e3530050 	cmp	r3, #80	; 0x50
    c080:	1a000008 	bne	c0a8 <g_halGps_getData_i32+0xf4>
		{l_header_position_ch=3;l_succeded_i32++;}
    c084:	e59f3814 	ldr	r3, [pc, #2068]	; c8a0 <g_halGps_getData_i32+0x8ec>
    c088:	e3a02003 	mov	r2, #3
    c08c:	e5c32000 	strb	r2, [r3]
    c090:	e59f381c 	ldr	r3, [pc, #2076]	; c8b4 <g_halGps_getData_i32+0x900>
    c094:	e5933000 	ldr	r3, [r3]
    c098:	e2832001 	add	r2, r3, #1
    c09c:	e59f3810 	ldr	r3, [pc, #2064]	; c8b4 <g_halGps_getData_i32+0x900>
    c0a0:	e5832000 	str	r2, [r3]
    c0a4:	ea000073 	b	c278 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==3 && l_rec_Data_ch=='G')
    c0a8:	e59f37f0 	ldr	r3, [pc, #2032]	; c8a0 <g_halGps_getData_i32+0x8ec>
    c0ac:	e5d33000 	ldrb	r3, [r3]
    c0b0:	e3530003 	cmp	r3, #3
    c0b4:	1a00000c 	bne	c0ec <g_halGps_getData_i32+0x138>
    c0b8:	e59f37f0 	ldr	r3, [pc, #2032]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c0bc:	e5d33000 	ldrb	r3, [r3]
    c0c0:	e3530047 	cmp	r3, #71	; 0x47
    c0c4:	1a000008 	bne	c0ec <g_halGps_getData_i32+0x138>
		{l_header_position_ch=14;l_succeded_i32++;}
    c0c8:	e59f37d0 	ldr	r3, [pc, #2000]	; c8a0 <g_halGps_getData_i32+0x8ec>
    c0cc:	e3a0200e 	mov	r2, #14
    c0d0:	e5c32000 	strb	r2, [r3]
    c0d4:	e59f37d8 	ldr	r3, [pc, #2008]	; c8b4 <g_halGps_getData_i32+0x900>
    c0d8:	e5933000 	ldr	r3, [r3]
    c0dc:	e2832001 	add	r2, r3, #1
    c0e0:	e59f37cc 	ldr	r3, [pc, #1996]	; c8b4 <g_halGps_getData_i32+0x900>
    c0e4:	e5832000 	str	r2, [r3]
    c0e8:	ea000062 	b	c278 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==3 && l_rec_Data_ch=='R')
    c0ec:	e59f37ac 	ldr	r3, [pc, #1964]	; c8a0 <g_halGps_getData_i32+0x8ec>
    c0f0:	e5d33000 	ldrb	r3, [r3]
    c0f4:	e3530003 	cmp	r3, #3
    c0f8:	1a00000c 	bne	c130 <g_halGps_getData_i32+0x17c>
    c0fc:	e59f37ac 	ldr	r3, [pc, #1964]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c100:	e5d33000 	ldrb	r3, [r3]
    c104:	e3530052 	cmp	r3, #82	; 0x52
    c108:	1a000008 	bne	c130 <g_halGps_getData_i32+0x17c>
		{l_header_position_ch=24;l_succeded_i32++;}
    c10c:	e59f378c 	ldr	r3, [pc, #1932]	; c8a0 <g_halGps_getData_i32+0x8ec>
    c110:	e3a02018 	mov	r2, #24
    c114:	e5c32000 	strb	r2, [r3]
    c118:	e59f3794 	ldr	r3, [pc, #1940]	; c8b4 <g_halGps_getData_i32+0x900>
    c11c:	e5933000 	ldr	r3, [r3]
    c120:	e2832001 	add	r2, r3, #1
    c124:	e59f3788 	ldr	r3, [pc, #1928]	; c8b4 <g_halGps_getData_i32+0x900>
    c128:	e5832000 	str	r2, [r3]
    c12c:	ea000051 	b	c278 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==14 && l_rec_Data_ch=='G')
    c130:	e59f3768 	ldr	r3, [pc, #1896]	; c8a0 <g_halGps_getData_i32+0x8ec>
    c134:	e5d33000 	ldrb	r3, [r3]
    c138:	e353000e 	cmp	r3, #14
    c13c:	1a00000c 	bne	c174 <g_halGps_getData_i32+0x1c0>
    c140:	e59f3768 	ldr	r3, [pc, #1896]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c144:	e5d33000 	ldrb	r3, [r3]
    c148:	e3530047 	cmp	r3, #71	; 0x47
    c14c:	1a000008 	bne	c174 <g_halGps_getData_i32+0x1c0>
		{l_header_position_ch=15;l_succeded_i32++;}
    c150:	e59f3748 	ldr	r3, [pc, #1864]	; c8a0 <g_halGps_getData_i32+0x8ec>
    c154:	e3a0200f 	mov	r2, #15
    c158:	e5c32000 	strb	r2, [r3]
    c15c:	e59f3750 	ldr	r3, [pc, #1872]	; c8b4 <g_halGps_getData_i32+0x900>
    c160:	e5933000 	ldr	r3, [r3]
    c164:	e2832001 	add	r2, r3, #1
    c168:	e59f3744 	ldr	r3, [pc, #1860]	; c8b4 <g_halGps_getData_i32+0x900>
    c16c:	e5832000 	str	r2, [r3]
    c170:	ea000040 	b	c278 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==24 && l_rec_Data_ch=='M')
    c174:	e59f3724 	ldr	r3, [pc, #1828]	; c8a0 <g_halGps_getData_i32+0x8ec>
    c178:	e5d33000 	ldrb	r3, [r3]
    c17c:	e3530018 	cmp	r3, #24
    c180:	1a00000c 	bne	c1b8 <g_halGps_getData_i32+0x204>
    c184:	e59f3724 	ldr	r3, [pc, #1828]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c188:	e5d33000 	ldrb	r3, [r3]
    c18c:	e353004d 	cmp	r3, #77	; 0x4d
    c190:	1a000008 	bne	c1b8 <g_halGps_getData_i32+0x204>
		{l_header_position_ch=25;l_succeded_i32++;}
    c194:	e59f3704 	ldr	r3, [pc, #1796]	; c8a0 <g_halGps_getData_i32+0x8ec>
    c198:	e3a02019 	mov	r2, #25
    c19c:	e5c32000 	strb	r2, [r3]
    c1a0:	e59f370c 	ldr	r3, [pc, #1804]	; c8b4 <g_halGps_getData_i32+0x900>
    c1a4:	e5933000 	ldr	r3, [r3]
    c1a8:	e2832001 	add	r2, r3, #1
    c1ac:	e59f3700 	ldr	r3, [pc, #1792]	; c8b4 <g_halGps_getData_i32+0x900>
    c1b0:	e5832000 	str	r2, [r3]
    c1b4:	ea00002f 	b	c278 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==15 && l_rec_Data_ch=='A')
    c1b8:	e59f36e0 	ldr	r3, [pc, #1760]	; c8a0 <g_halGps_getData_i32+0x8ec>
    c1bc:	e5d33000 	ldrb	r3, [r3]
    c1c0:	e353000f 	cmp	r3, #15
    c1c4:	1a000013 	bne	c218 <g_halGps_getData_i32+0x264>
    c1c8:	e59f36e0 	ldr	r3, [pc, #1760]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c1cc:	e5d33000 	ldrb	r3, [r3]
    c1d0:	e3530041 	cmp	r3, #65	; 0x41
    c1d4:	1a00000f 	bne	c218 <g_halGps_getData_i32+0x264>
		{	l_message_ch=1;l_resetMessage1Values_vd();l_data_position_ch=0;l_message_position_ch=1; l_succeded_i32++;}
    c1d8:	e59f36a8 	ldr	r3, [pc, #1704]	; c888 <g_halGps_getData_i32+0x8d4>
    c1dc:	e3a02001 	mov	r2, #1
    c1e0:	e5c32000 	strb	r2, [r3]
    c1e4:	ebffff0c 	bl	be1c <l_resetMessage1Values_vd>
    c1e8:	e59f36b4 	ldr	r3, [pc, #1716]	; c8a4 <g_halGps_getData_i32+0x8f0>
    c1ec:	e3a02000 	mov	r2, #0
    c1f0:	e5c32000 	strb	r2, [r3]
    c1f4:	e59f36a0 	ldr	r3, [pc, #1696]	; c89c <g_halGps_getData_i32+0x8e8>
    c1f8:	e3a02001 	mov	r2, #1
    c1fc:	e5c32000 	strb	r2, [r3]
    c200:	e59f36ac 	ldr	r3, [pc, #1708]	; c8b4 <g_halGps_getData_i32+0x900>
    c204:	e5933000 	ldr	r3, [r3]
    c208:	e2832001 	add	r2, r3, #1
    c20c:	e59f36a0 	ldr	r3, [pc, #1696]	; c8b4 <g_halGps_getData_i32+0x900>
    c210:	e5832000 	str	r2, [r3]
    c214:	ea000017 	b	c278 <g_halGps_getData_i32+0x2c4>
		else if (l_header_position_ch==25 && l_rec_Data_ch=='C')
    c218:	e59f3680 	ldr	r3, [pc, #1664]	; c8a0 <g_halGps_getData_i32+0x8ec>
    c21c:	e5d33000 	ldrb	r3, [r3]
    c220:	e3530019 	cmp	r3, #25
    c224:	1a000391 	bne	d070 <g_halGps_getData_i32+0x10bc>
    c228:	e59f3680 	ldr	r3, [pc, #1664]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c22c:	e5d33000 	ldrb	r3, [r3]
    c230:	e3530043 	cmp	r3, #67	; 0x43
    c234:	1a00038d 	bne	d070 <g_halGps_getData_i32+0x10bc>
		{	l_message_ch=2;l_resetMessage2Values_vd();l_data_position_ch=0; l_message_position_ch=1; l_succeded_i32++;}
    c238:	e59f3648 	ldr	r3, [pc, #1608]	; c888 <g_halGps_getData_i32+0x8d4>
    c23c:	e3a02002 	mov	r2, #2
    c240:	e5c32000 	strb	r2, [r3]
    c244:	ebffff23 	bl	bed8 <l_resetMessage2Values_vd>
    c248:	e59f3654 	ldr	r3, [pc, #1620]	; c8a4 <g_halGps_getData_i32+0x8f0>
    c24c:	e3a02000 	mov	r2, #0
    c250:	e5c32000 	strb	r2, [r3]
    c254:	e59f3640 	ldr	r3, [pc, #1600]	; c89c <g_halGps_getData_i32+0x8e8>
    c258:	e3a02001 	mov	r2, #1
    c25c:	e5c32000 	strb	r2, [r3]
    c260:	e59f364c 	ldr	r3, [pc, #1612]	; c8b4 <g_halGps_getData_i32+0x900>
    c264:	e5933000 	ldr	r3, [r3]
    c268:	e2832001 	add	r2, r3, #1
    c26c:	e59f3640 	ldr	r3, [pc, #1600]	; c8b4 <g_halGps_getData_i32+0x900>
    c270:	e5832000 	str	r2, [r3]
    c274:	ea00037d 	b	d070 <g_halGps_getData_i32+0x10bc>
    c278:	ea00037c 	b	d070 <g_halGps_getData_i32+0x10bc>
	}
	else
	{
		switch (l_message_ch)//check data within the two important messages
    c27c:	e59f3604 	ldr	r3, [pc, #1540]	; c888 <g_halGps_getData_i32+0x8d4>
    c280:	e5d33000 	ldrb	r3, [r3]
    c284:	e3530001 	cmp	r3, #1
    c288:	0a000002 	beq	c298 <g_halGps_getData_i32+0x2e4>
    c28c:	e3530002 	cmp	r3, #2
    c290:	0a0001ab 	beq	c944 <g_halGps_getData_i32+0x990>
    c294:	ea000375 	b	d070 <g_halGps_getData_i32+0x10bc>
		{
		case 1://$GPGGA ,205003.000 ,4841.9261 ,N ,00918.7276 ,E ,1 ,06 ,1.12 ,283.5 ,M ,48.0 ,M , ,*6D        38
			switch (l_rec_Data_ch)
    c298:	e59f3610 	ldr	r3, [pc, #1552]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c29c:	e5d33000 	ldrb	r3, [r3]
    c2a0:	e353000a 	cmp	r3, #10
    c2a4:	0a00000e 	beq	c2e4 <g_halGps_getData_i32+0x330>
    c2a8:	e353002c 	cmp	r3, #44	; 0x2c
    c2ac:	1a000018 	bne	c314 <g_halGps_getData_i32+0x360>
			{
			case ',':
				l_data_position_ch++;
    c2b0:	e59f35ec 	ldr	r3, [pc, #1516]	; c8a4 <g_halGps_getData_i32+0x8f0>
    c2b4:	e5d33000 	ldrb	r3, [r3]
    c2b8:	e2833001 	add	r3, r3, #1
    c2bc:	e6ef2073 	uxtb	r2, r3
    c2c0:	e59f35dc 	ldr	r3, [pc, #1500]	; c8a4 <g_halGps_getData_i32+0x8f0>
    c2c4:	e5c32000 	strb	r2, [r3]
				l_fieldpointer_i32=0;
    c2c8:	e59f35e8 	ldr	r3, [pc, #1512]	; c8b8 <g_halGps_getData_i32+0x904>
    c2cc:	e3a02000 	mov	r2, #0
    c2d0:	e5832000 	str	r2, [r3]
				l_decimal_place_factor_i32=10;
    c2d4:	e59f35bc 	ldr	r3, [pc, #1468]	; c898 <g_halGps_getData_i32+0x8e4>
    c2d8:	e3a0200a 	mov	r2, #10
    c2dc:	e5832000 	str	r2, [r3]
				break;
    c2e0:	ea000196 	b	c940 <g_halGps_getData_i32+0x98c>
			case 10://LF found
				l_succeded_i32=l_succeded_i32+100;	//short comment
    c2e4:	e59f35c8 	ldr	r3, [pc, #1480]	; c8b4 <g_halGps_getData_i32+0x900>
    c2e8:	e5933000 	ldr	r3, [r3]
    c2ec:	e2832064 	add	r2, r3, #100	; 0x64
    c2f0:	e59f35bc 	ldr	r3, [pc, #1468]	; c8b4 <g_halGps_getData_i32+0x900>
    c2f4:	e5832000 	str	r2, [r3]
				l_message_position_ch=0;
    c2f8:	e59f359c 	ldr	r3, [pc, #1436]	; c89c <g_halGps_getData_i32+0x8e8>
    c2fc:	e3a02000 	mov	r2, #0
    c300:	e5c32000 	strb	r2, [r3]
				l_header_position_ch=0;
    c304:	e59f3594 	ldr	r3, [pc, #1428]	; c8a0 <g_halGps_getData_i32+0x8ec>
    c308:	e3a02000 	mov	r2, #0
    c30c:	e5c32000 	strb	r2, [r3]
				break;
    c310:	ea00018a 	b	c940 <g_halGps_getData_i32+0x98c>
			default:
				switch (l_data_position_ch)
    c314:	e59f3588 	ldr	r3, [pc, #1416]	; c8a4 <g_halGps_getData_i32+0x8f0>
    c318:	e5d33000 	ldrb	r3, [r3]
    c31c:	e2433001 	sub	r3, r3, #1
    c320:	e353000a 	cmp	r3, #10
    c324:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c328:	ea000183 	b	c93c <g_halGps_getData_i32+0x988>
    c32c:	0000c358 	.word	0x0000c358
    c330:	0000c3c8 	.word	0x0000c3c8
    c334:	0000c504 	.word	0x0000c504
    c338:	0000c550 	.word	0x0000c550
    c33c:	0000c68c 	.word	0x0000c68c
    c340:	0000c93c 	.word	0x0000c93c
    c344:	0000c93c 	.word	0x0000c93c
    c348:	0000c93c 	.word	0x0000c93c
    c34c:	0000c6d8 	.word	0x0000c6d8
    c350:	0000c93c 	.word	0x0000c93c
    c354:	0000c7e4 	.word	0x0000c7e4
				{
				case 1://Time
					if(l_fieldpointer_i32<6)
    c358:	e59f3558 	ldr	r3, [pc, #1368]	; c8b8 <g_halGps_getData_i32+0x904>
    c35c:	e5933000 	ldr	r3, [r3]
    c360:	e3530005 	cmp	r3, #5
    c364:	ca000011 	bgt	c3b0 <g_halGps_getData_i32+0x3fc>
					{
						l_time_ui32=l_time_ui32*10+(l_rec_Data_ch-48);
    c368:	e59f3538 	ldr	r3, [pc, #1336]	; c8a8 <g_halGps_getData_i32+0x8f4>
    c36c:	e5932000 	ldr	r2, [r3]
    c370:	e1a03002 	mov	r3, r2
    c374:	e1a03103 	lsl	r3, r3, #2
    c378:	e0833002 	add	r3, r3, r2
    c37c:	e1a03083 	lsl	r3, r3, #1
    c380:	e1a02003 	mov	r2, r3
    c384:	e59f3524 	ldr	r3, [pc, #1316]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c388:	e5d33000 	ldrb	r3, [r3]
    c38c:	e0823003 	add	r3, r2, r3
    c390:	e2432030 	sub	r2, r3, #48	; 0x30
    c394:	e59f350c 	ldr	r3, [pc, #1292]	; c8a8 <g_halGps_getData_i32+0x8f4>
    c398:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    c39c:	e59f3510 	ldr	r3, [pc, #1296]	; c8b4 <g_halGps_getData_i32+0x900>
    c3a0:	e5933000 	ldr	r3, [r3]
    c3a4:	e2832001 	add	r2, r3, #1
    c3a8:	e59f3504 	ldr	r3, [pc, #1284]	; c8b4 <g_halGps_getData_i32+0x900>
    c3ac:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    c3b0:	e59f3500 	ldr	r3, [pc, #1280]	; c8b8 <g_halGps_getData_i32+0x904>
    c3b4:	e5933000 	ldr	r3, [r3]
    c3b8:	e2832001 	add	r2, r3, #1
    c3bc:	e59f34f4 	ldr	r3, [pc, #1268]	; c8b8 <g_halGps_getData_i32+0x904>
    c3c0:	e5832000 	str	r2, [r3]
					break;
    c3c4:	ea00015c 	b	c93c <g_halGps_getData_i32+0x988>
				case 2://Latitude
					if(l_fieldpointer_i32<2)
    c3c8:	e59f34e8 	ldr	r3, [pc, #1256]	; c8b8 <g_halGps_getData_i32+0x904>
    c3cc:	e5933000 	ldr	r3, [r3]
    c3d0:	e3530001 	cmp	r3, #1
    c3d4:	ca000012 	bgt	c424 <g_halGps_getData_i32+0x470>
					{
						l_gps_latitude_st.l_degree_ui32=l_gps_latitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    c3d8:	e59f34dc 	ldr	r3, [pc, #1244]	; c8bc <g_halGps_getData_i32+0x908>
    c3dc:	e5932000 	ldr	r2, [r3]
    c3e0:	e1a03002 	mov	r3, r2
    c3e4:	e1a03103 	lsl	r3, r3, #2
    c3e8:	e0833002 	add	r3, r3, r2
    c3ec:	e1a03083 	lsl	r3, r3, #1
    c3f0:	e1a02003 	mov	r2, r3
    c3f4:	e59f34b4 	ldr	r3, [pc, #1204]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c3f8:	e5d33000 	ldrb	r3, [r3]
    c3fc:	e0823003 	add	r3, r2, r3
    c400:	e2432030 	sub	r2, r3, #48	; 0x30
    c404:	e59f34b0 	ldr	r3, [pc, #1200]	; c8bc <g_halGps_getData_i32+0x908>
    c408:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    c40c:	e59f34a0 	ldr	r3, [pc, #1184]	; c8b4 <g_halGps_getData_i32+0x900>
    c410:	e5933000 	ldr	r3, [r3]
    c414:	e2832001 	add	r2, r3, #1
    c418:	e59f3494 	ldr	r3, [pc, #1172]	; c8b4 <g_halGps_getData_i32+0x900>
    c41c:	e5832000 	str	r2, [r3]
    c420:	ea000031 	b	c4ec <g_halGps_getData_i32+0x538>
					}
					else if(l_fieldpointer_i32<4)
    c424:	e59f348c 	ldr	r3, [pc, #1164]	; c8b8 <g_halGps_getData_i32+0x904>
    c428:	e5933000 	ldr	r3, [r3]
    c42c:	e3530003 	cmp	r3, #3
    c430:	ca000012 	bgt	c480 <g_halGps_getData_i32+0x4cc>
					{
						l_gps_latitude_st.l_minutes_ui32=l_gps_latitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    c434:	e59f3480 	ldr	r3, [pc, #1152]	; c8bc <g_halGps_getData_i32+0x908>
    c438:	e5932004 	ldr	r2, [r3, #4]
    c43c:	e1a03002 	mov	r3, r2
    c440:	e1a03103 	lsl	r3, r3, #2
    c444:	e0833002 	add	r3, r3, r2
    c448:	e1a03083 	lsl	r3, r3, #1
    c44c:	e1a02003 	mov	r2, r3
    c450:	e59f3458 	ldr	r3, [pc, #1112]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c454:	e5d33000 	ldrb	r3, [r3]
    c458:	e0823003 	add	r3, r2, r3
    c45c:	e2432030 	sub	r2, r3, #48	; 0x30
    c460:	e59f3454 	ldr	r3, [pc, #1108]	; c8bc <g_halGps_getData_i32+0x908>
    c464:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    c468:	e59f3444 	ldr	r3, [pc, #1092]	; c8b4 <g_halGps_getData_i32+0x900>
    c46c:	e5933000 	ldr	r3, [r3]
    c470:	e2832001 	add	r2, r3, #1
    c474:	e59f3438 	ldr	r3, [pc, #1080]	; c8b4 <g_halGps_getData_i32+0x900>
    c478:	e5832000 	str	r2, [r3]
    c47c:	ea00001a 	b	c4ec <g_halGps_getData_i32+0x538>
					}
					else if(l_fieldpointer_i32>=5 && l_fieldpointer_i32<9)
    c480:	e59f3430 	ldr	r3, [pc, #1072]	; c8b8 <g_halGps_getData_i32+0x904>
    c484:	e5933000 	ldr	r3, [r3]
    c488:	e3530004 	cmp	r3, #4
    c48c:	da000016 	ble	c4ec <g_halGps_getData_i32+0x538>
    c490:	e59f3420 	ldr	r3, [pc, #1056]	; c8b8 <g_halGps_getData_i32+0x904>
    c494:	e5933000 	ldr	r3, [r3]
    c498:	e3530008 	cmp	r3, #8
    c49c:	ca000012 	bgt	c4ec <g_halGps_getData_i32+0x538>
					{
						l_gps_latitude_st.l_seconds_f64=l_gps_latitude_st.l_seconds_f64*10+(l_rec_Data_ch-48)*0.006;
    c4a0:	e59f3414 	ldr	r3, [pc, #1044]	; c8bc <g_halGps_getData_i32+0x908>
    c4a4:	ed936b02 	vldr	d6, [r3, #8]
    c4a8:	ed9f7bf2 	vldr	d7, [pc, #968]	; c878 <g_halGps_getData_i32+0x8c4>
    c4ac:	ee266b07 	vmul.f64	d6, d6, d7
    c4b0:	e59f33f8 	ldr	r3, [pc, #1016]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c4b4:	e5d33000 	ldrb	r3, [r3]
    c4b8:	e2433030 	sub	r3, r3, #48	; 0x30
    c4bc:	ee073a90 	vmov	s15, r3
    c4c0:	eeb85be7 	vcvt.f64.s32	d5, s15
    c4c4:	ed9f7bed 	vldr	d7, [pc, #948]	; c880 <g_halGps_getData_i32+0x8cc>
    c4c8:	ee257b07 	vmul.f64	d7, d5, d7
    c4cc:	ee367b07 	vadd.f64	d7, d6, d7
    c4d0:	e59f33e4 	ldr	r3, [pc, #996]	; c8bc <g_halGps_getData_i32+0x908>
    c4d4:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    c4d8:	e59f33d4 	ldr	r3, [pc, #980]	; c8b4 <g_halGps_getData_i32+0x900>
    c4dc:	e5933000 	ldr	r3, [r3]
    c4e0:	e2832001 	add	r2, r3, #1
    c4e4:	e59f33c8 	ldr	r3, [pc, #968]	; c8b4 <g_halGps_getData_i32+0x900>
    c4e8:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    c4ec:	e59f33c4 	ldr	r3, [pc, #964]	; c8b8 <g_halGps_getData_i32+0x904>
    c4f0:	e5933000 	ldr	r3, [r3]
    c4f4:	e2832001 	add	r2, r3, #1
    c4f8:	e59f33b8 	ldr	r3, [pc, #952]	; c8b8 <g_halGps_getData_i32+0x904>
    c4fc:	e5832000 	str	r2, [r3]
					break;
    c500:	ea00010d 	b	c93c <g_halGps_getData_i32+0x988>
				case 3://cardinal direction
					if(l_fieldpointer_i32<1)
    c504:	e59f33ac 	ldr	r3, [pc, #940]	; c8b8 <g_halGps_getData_i32+0x904>
    c508:	e5933000 	ldr	r3, [r3]
    c50c:	e3530000 	cmp	r3, #0
    c510:	ca000008 	bgt	c538 <g_halGps_getData_i32+0x584>
					{
						l_gps_latitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    c514:	e59f3394 	ldr	r3, [pc, #916]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c518:	e5d32000 	ldrb	r2, [r3]
    c51c:	e59f3398 	ldr	r3, [pc, #920]	; c8bc <g_halGps_getData_i32+0x908>
    c520:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    c524:	e59f3388 	ldr	r3, [pc, #904]	; c8b4 <g_halGps_getData_i32+0x900>
    c528:	e5933000 	ldr	r3, [r3]
    c52c:	e2832001 	add	r2, r3, #1
    c530:	e59f337c 	ldr	r3, [pc, #892]	; c8b4 <g_halGps_getData_i32+0x900>
    c534:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    c538:	e59f3378 	ldr	r3, [pc, #888]	; c8b8 <g_halGps_getData_i32+0x904>
    c53c:	e5933000 	ldr	r3, [r3]
    c540:	e2832001 	add	r2, r3, #1
    c544:	e59f336c 	ldr	r3, [pc, #876]	; c8b8 <g_halGps_getData_i32+0x904>
    c548:	e5832000 	str	r2, [r3]
					break;
    c54c:	ea0000fa 	b	c93c <g_halGps_getData_i32+0x988>
				case 4://Longitude
					if(l_fieldpointer_i32<3)
    c550:	e59f3360 	ldr	r3, [pc, #864]	; c8b8 <g_halGps_getData_i32+0x904>
    c554:	e5933000 	ldr	r3, [r3]
    c558:	e3530002 	cmp	r3, #2
    c55c:	ca000012 	bgt	c5ac <g_halGps_getData_i32+0x5f8>
					{
						l_gps_longitude_st.l_degree_ui32=l_gps_longitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    c560:	e59f3324 	ldr	r3, [pc, #804]	; c88c <g_halGps_getData_i32+0x8d8>
    c564:	e5932000 	ldr	r2, [r3]
    c568:	e1a03002 	mov	r3, r2
    c56c:	e1a03103 	lsl	r3, r3, #2
    c570:	e0833002 	add	r3, r3, r2
    c574:	e1a03083 	lsl	r3, r3, #1
    c578:	e1a02003 	mov	r2, r3
    c57c:	e59f332c 	ldr	r3, [pc, #812]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c580:	e5d33000 	ldrb	r3, [r3]
    c584:	e0823003 	add	r3, r2, r3
    c588:	e2432030 	sub	r2, r3, #48	; 0x30
    c58c:	e59f32f8 	ldr	r3, [pc, #760]	; c88c <g_halGps_getData_i32+0x8d8>
    c590:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    c594:	e59f3318 	ldr	r3, [pc, #792]	; c8b4 <g_halGps_getData_i32+0x900>
    c598:	e5933000 	ldr	r3, [r3]
    c59c:	e2832001 	add	r2, r3, #1
    c5a0:	e59f330c 	ldr	r3, [pc, #780]	; c8b4 <g_halGps_getData_i32+0x900>
    c5a4:	e5832000 	str	r2, [r3]
    c5a8:	ea000031 	b	c674 <g_halGps_getData_i32+0x6c0>
					}
					else if(l_fieldpointer_i32<5)
    c5ac:	e59f3304 	ldr	r3, [pc, #772]	; c8b8 <g_halGps_getData_i32+0x904>
    c5b0:	e5933000 	ldr	r3, [r3]
    c5b4:	e3530004 	cmp	r3, #4
    c5b8:	ca000012 	bgt	c608 <g_halGps_getData_i32+0x654>
					{
						l_gps_longitude_st.l_minutes_ui32=l_gps_longitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    c5bc:	e59f32c8 	ldr	r3, [pc, #712]	; c88c <g_halGps_getData_i32+0x8d8>
    c5c0:	e5932004 	ldr	r2, [r3, #4]
    c5c4:	e1a03002 	mov	r3, r2
    c5c8:	e1a03103 	lsl	r3, r3, #2
    c5cc:	e0833002 	add	r3, r3, r2
    c5d0:	e1a03083 	lsl	r3, r3, #1
    c5d4:	e1a02003 	mov	r2, r3
    c5d8:	e59f32d0 	ldr	r3, [pc, #720]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c5dc:	e5d33000 	ldrb	r3, [r3]
    c5e0:	e0823003 	add	r3, r2, r3
    c5e4:	e2432030 	sub	r2, r3, #48	; 0x30
    c5e8:	e59f329c 	ldr	r3, [pc, #668]	; c88c <g_halGps_getData_i32+0x8d8>
    c5ec:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    c5f0:	e59f32bc 	ldr	r3, [pc, #700]	; c8b4 <g_halGps_getData_i32+0x900>
    c5f4:	e5933000 	ldr	r3, [r3]
    c5f8:	e2832001 	add	r2, r3, #1
    c5fc:	e59f32b0 	ldr	r3, [pc, #688]	; c8b4 <g_halGps_getData_i32+0x900>
    c600:	e5832000 	str	r2, [r3]
    c604:	ea00001a 	b	c674 <g_halGps_getData_i32+0x6c0>
					}
					else if(l_fieldpointer_i32>=6 && l_fieldpointer_i32<10)
    c608:	e59f32a8 	ldr	r3, [pc, #680]	; c8b8 <g_halGps_getData_i32+0x904>
    c60c:	e5933000 	ldr	r3, [r3]
    c610:	e3530005 	cmp	r3, #5
    c614:	da000016 	ble	c674 <g_halGps_getData_i32+0x6c0>
    c618:	e59f3298 	ldr	r3, [pc, #664]	; c8b8 <g_halGps_getData_i32+0x904>
    c61c:	e5933000 	ldr	r3, [r3]
    c620:	e3530009 	cmp	r3, #9
    c624:	ca000012 	bgt	c674 <g_halGps_getData_i32+0x6c0>
					{
						l_gps_longitude_st.l_seconds_f64=l_gps_longitude_st.l_seconds_f64*10+(l_rec_Data_ch-48)*0.006;
    c628:	e59f325c 	ldr	r3, [pc, #604]	; c88c <g_halGps_getData_i32+0x8d8>
    c62c:	ed936b02 	vldr	d6, [r3, #8]
    c630:	ed9f7b90 	vldr	d7, [pc, #576]	; c878 <g_halGps_getData_i32+0x8c4>
    c634:	ee266b07 	vmul.f64	d6, d6, d7
    c638:	e59f3270 	ldr	r3, [pc, #624]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c63c:	e5d33000 	ldrb	r3, [r3]
    c640:	e2433030 	sub	r3, r3, #48	; 0x30
    c644:	ee073a90 	vmov	s15, r3
    c648:	eeb85be7 	vcvt.f64.s32	d5, s15
    c64c:	ed9f7b8b 	vldr	d7, [pc, #556]	; c880 <g_halGps_getData_i32+0x8cc>
    c650:	ee257b07 	vmul.f64	d7, d5, d7
    c654:	ee367b07 	vadd.f64	d7, d6, d7
    c658:	e59f322c 	ldr	r3, [pc, #556]	; c88c <g_halGps_getData_i32+0x8d8>
    c65c:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    c660:	e59f324c 	ldr	r3, [pc, #588]	; c8b4 <g_halGps_getData_i32+0x900>
    c664:	e5933000 	ldr	r3, [r3]
    c668:	e2832001 	add	r2, r3, #1
    c66c:	e59f3240 	ldr	r3, [pc, #576]	; c8b4 <g_halGps_getData_i32+0x900>
    c670:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    c674:	e59f323c 	ldr	r3, [pc, #572]	; c8b8 <g_halGps_getData_i32+0x904>
    c678:	e5933000 	ldr	r3, [r3]
    c67c:	e2832001 	add	r2, r3, #1
    c680:	e59f3230 	ldr	r3, [pc, #560]	; c8b8 <g_halGps_getData_i32+0x904>
    c684:	e5832000 	str	r2, [r3]
					break;
    c688:	ea0000ab 	b	c93c <g_halGps_getData_i32+0x988>
				case 5://cardinal direction
					if(l_fieldpointer_i32<1)
    c68c:	e59f3224 	ldr	r3, [pc, #548]	; c8b8 <g_halGps_getData_i32+0x904>
    c690:	e5933000 	ldr	r3, [r3]
    c694:	e3530000 	cmp	r3, #0
    c698:	ca000008 	bgt	c6c0 <g_halGps_getData_i32+0x70c>
					{
						l_gps_longitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    c69c:	e59f320c 	ldr	r3, [pc, #524]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c6a0:	e5d32000 	ldrb	r2, [r3]
    c6a4:	e59f31e0 	ldr	r3, [pc, #480]	; c88c <g_halGps_getData_i32+0x8d8>
    c6a8:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    c6ac:	e59f3200 	ldr	r3, [pc, #512]	; c8b4 <g_halGps_getData_i32+0x900>
    c6b0:	e5933000 	ldr	r3, [r3]
    c6b4:	e2832001 	add	r2, r3, #1
    c6b8:	e59f31f4 	ldr	r3, [pc, #500]	; c8b4 <g_halGps_getData_i32+0x900>
    c6bc:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    c6c0:	e59f31f0 	ldr	r3, [pc, #496]	; c8b8 <g_halGps_getData_i32+0x904>
    c6c4:	e5933000 	ldr	r3, [r3]
    c6c8:	e2832001 	add	r2, r3, #1
    c6cc:	e59f31e4 	ldr	r3, [pc, #484]	; c8b8 <g_halGps_getData_i32+0x904>
    c6d0:	e5832000 	str	r2, [r3]
					break;
    c6d4:	ea000098 	b	c93c <g_halGps_getData_i32+0x988>
				case 9://Height
					if(l_rec_Data_ch!='.' && l_fieldpointer_i32==0)
    c6d8:	e59f31d0 	ldr	r3, [pc, #464]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c6dc:	e5d33000 	ldrb	r3, [r3]
    c6e0:	e353002e 	cmp	r3, #46	; 0x2e
    c6e4:	0a000015 	beq	c740 <g_halGps_getData_i32+0x78c>
    c6e8:	e59f31c8 	ldr	r3, [pc, #456]	; c8b8 <g_halGps_getData_i32+0x904>
    c6ec:	e5933000 	ldr	r3, [r3]
    c6f0:	e3530000 	cmp	r3, #0
    c6f4:	1a000011 	bne	c740 <g_halGps_getData_i32+0x78c>
					{
						l_height_f64=l_height_f64*10+(double)(l_rec_Data_ch-48);
    c6f8:	e59f3190 	ldr	r3, [pc, #400]	; c890 <g_halGps_getData_i32+0x8dc>
    c6fc:	ed936b00 	vldr	d6, [r3]
    c700:	ed9f7b5c 	vldr	d7, [pc, #368]	; c878 <g_halGps_getData_i32+0x8c4>
    c704:	ee266b07 	vmul.f64	d6, d6, d7
    c708:	e59f31a0 	ldr	r3, [pc, #416]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c70c:	e5d33000 	ldrb	r3, [r3]
    c710:	e2433030 	sub	r3, r3, #48	; 0x30
    c714:	ee053a90 	vmov	s11, r3
    c718:	eeb87be5 	vcvt.f64.s32	d7, s11
    c71c:	ee367b07 	vadd.f64	d7, d6, d7
    c720:	e59f3168 	ldr	r3, [pc, #360]	; c890 <g_halGps_getData_i32+0x8dc>
    c724:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    c728:	e59f3184 	ldr	r3, [pc, #388]	; c8b4 <g_halGps_getData_i32+0x900>
    c72c:	e5933000 	ldr	r3, [r3]
    c730:	e2832001 	add	r2, r3, #1
    c734:	e59f3178 	ldr	r3, [pc, #376]	; c8b4 <g_halGps_getData_i32+0x900>
    c738:	e5832000 	str	r2, [r3]
    c73c:	ea000027 	b	c7e0 <g_halGps_getData_i32+0x82c>

					}
					else if (l_rec_Data_ch=='.')
    c740:	e59f3168 	ldr	r3, [pc, #360]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c744:	e5d33000 	ldrb	r3, [r3]
    c748:	e353002e 	cmp	r3, #46	; 0x2e
    c74c:	1a000005 	bne	c768 <g_halGps_getData_i32+0x7b4>
					{
						l_fieldpointer_i32++;
    c750:	e59f3160 	ldr	r3, [pc, #352]	; c8b8 <g_halGps_getData_i32+0x904>
    c754:	e5933000 	ldr	r3, [r3]
    c758:	e2832001 	add	r2, r3, #1
    c75c:	e59f3154 	ldr	r3, [pc, #340]	; c8b8 <g_halGps_getData_i32+0x904>
    c760:	e5832000 	str	r2, [r3]
    c764:	ea00001d 	b	c7e0 <g_halGps_getData_i32+0x82c>
					}
					else
					{
						l_height_f64=l_height_f64+(double)(l_rec_Data_ch-48)/l_decimal_place_factor_i32;
    c768:	e59f3140 	ldr	r3, [pc, #320]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c76c:	e5d33000 	ldrb	r3, [r3]
    c770:	e2433030 	sub	r3, r3, #48	; 0x30
    c774:	ee073a90 	vmov	s15, r3
    c778:	eeb86be7 	vcvt.f64.s32	d6, s15
    c77c:	e59f3114 	ldr	r3, [pc, #276]	; c898 <g_halGps_getData_i32+0x8e4>
    c780:	e5933000 	ldr	r3, [r3]
    c784:	ee053a90 	vmov	s11, r3
    c788:	eeb87be5 	vcvt.f64.s32	d7, s11
    c78c:	ee866b07 	vdiv.f64	d6, d6, d7
    c790:	e59f30f8 	ldr	r3, [pc, #248]	; c890 <g_halGps_getData_i32+0x8dc>
    c794:	ed937b00 	vldr	d7, [r3]
    c798:	ee367b07 	vadd.f64	d7, d6, d7
    c79c:	e59f30ec 	ldr	r3, [pc, #236]	; c890 <g_halGps_getData_i32+0x8dc>
    c7a0:	ed837b00 	vstr	d7, [r3]
						l_decimal_place_factor_i32=l_decimal_place_factor_i32*10;
    c7a4:	e59f30ec 	ldr	r3, [pc, #236]	; c898 <g_halGps_getData_i32+0x8e4>
    c7a8:	e5932000 	ldr	r2, [r3]
    c7ac:	e1a03002 	mov	r3, r2
    c7b0:	e1a03103 	lsl	r3, r3, #2
    c7b4:	e0833002 	add	r3, r3, r2
    c7b8:	e1a03083 	lsl	r3, r3, #1
    c7bc:	e1a02003 	mov	r2, r3
    c7c0:	e59f30d0 	ldr	r3, [pc, #208]	; c898 <g_halGps_getData_i32+0x8e4>
    c7c4:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    c7c8:	e59f30e4 	ldr	r3, [pc, #228]	; c8b4 <g_halGps_getData_i32+0x900>
    c7cc:	e5933000 	ldr	r3, [r3]
    c7d0:	e2832001 	add	r2, r3, #1
    c7d4:	e59f30d8 	ldr	r3, [pc, #216]	; c8b4 <g_halGps_getData_i32+0x900>
    c7d8:	e5832000 	str	r2, [r3]
					}
					break;
    c7dc:	ea000056 	b	c93c <g_halGps_getData_i32+0x988>
    c7e0:	ea000055 	b	c93c <g_halGps_getData_i32+0x988>
				case 11://Geoid
					if(l_rec_Data_ch!='.' && l_fieldpointer_i32==0)
    c7e4:	e59f30c4 	ldr	r3, [pc, #196]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c7e8:	e5d33000 	ldrb	r3, [r3]
    c7ec:	e353002e 	cmp	r3, #46	; 0x2e
    c7f0:	0a000015 	beq	c84c <g_halGps_getData_i32+0x898>
    c7f4:	e59f30bc 	ldr	r3, [pc, #188]	; c8b8 <g_halGps_getData_i32+0x904>
    c7f8:	e5933000 	ldr	r3, [r3]
    c7fc:	e3530000 	cmp	r3, #0
    c800:	1a000011 	bne	c84c <g_halGps_getData_i32+0x898>
					{
						l_geoid_f64=l_geoid_f64*10+(double)(l_rec_Data_ch-48);
    c804:	e59f3088 	ldr	r3, [pc, #136]	; c894 <g_halGps_getData_i32+0x8e0>
    c808:	ed936b00 	vldr	d6, [r3]
    c80c:	ed9f7b19 	vldr	d7, [pc, #100]	; c878 <g_halGps_getData_i32+0x8c4>
    c810:	ee266b07 	vmul.f64	d6, d6, d7
    c814:	e59f3094 	ldr	r3, [pc, #148]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c818:	e5d33000 	ldrb	r3, [r3]
    c81c:	e2433030 	sub	r3, r3, #48	; 0x30
    c820:	ee053a90 	vmov	s11, r3
    c824:	eeb87be5 	vcvt.f64.s32	d7, s11
    c828:	ee367b07 	vadd.f64	d7, d6, d7
    c82c:	e59f3060 	ldr	r3, [pc, #96]	; c894 <g_halGps_getData_i32+0x8e0>
    c830:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    c834:	e59f3078 	ldr	r3, [pc, #120]	; c8b4 <g_halGps_getData_i32+0x900>
    c838:	e5933000 	ldr	r3, [r3]
    c83c:	e2832001 	add	r2, r3, #1
    c840:	e59f306c 	ldr	r3, [pc, #108]	; c8b4 <g_halGps_getData_i32+0x900>
    c844:	e5832000 	str	r2, [r3]
    c848:	ea00003a 	b	c938 <g_halGps_getData_i32+0x984>

					}
					else if (l_rec_Data_ch=='.')
    c84c:	e59f305c 	ldr	r3, [pc, #92]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c850:	e5d33000 	ldrb	r3, [r3]
    c854:	e353002e 	cmp	r3, #46	; 0x2e
    c858:	1a000018 	bne	c8c0 <g_halGps_getData_i32+0x90c>
					{
						l_fieldpointer_i32++;
    c85c:	e59f3054 	ldr	r3, [pc, #84]	; c8b8 <g_halGps_getData_i32+0x904>
    c860:	e5933000 	ldr	r3, [r3]
    c864:	e2832001 	add	r2, r3, #1
    c868:	e59f3048 	ldr	r3, [pc, #72]	; c8b8 <g_halGps_getData_i32+0x904>
    c86c:	e5832000 	str	r2, [r3]
    c870:	ea000030 	b	c938 <g_halGps_getData_i32+0x984>
    c874:	e1a00000 	nop			; (mov r0, r0)
    c878:	00000000 	.word	0x00000000
    c87c:	40240000 	.word	0x40240000
    c880:	bc6a7efa 	.word	0xbc6a7efa
    c884:	3f789374 	.word	0x3f789374
    c888:	0001b741 	.word	0x0001b741
    c88c:	0001b6e0 	.word	0x0001b6e0
    c890:	0001b730 	.word	0x0001b730
    c894:	0001b738 	.word	0x0001b738
    c898:	0001b294 	.word	0x0001b294
    c89c:	0001b743 	.word	0x0001b743
    c8a0:	0001b740 	.word	0x0001b740
    c8a4:	0001b742 	.word	0x0001b742
    c8a8:	0001b710 	.word	0x0001b710
    c8ac:	0001b714 	.word	0x0001b714
    c8b0:	0001b290 	.word	0x0001b290
    c8b4:	0001b748 	.word	0x0001b748
    c8b8:	0001b744 	.word	0x0001b744
    c8bc:	0001b6f8 	.word	0x0001b6f8
					}
					else
					{
						l_geoid_f64=l_geoid_f64+(double)(l_rec_Data_ch-48)/l_decimal_place_factor_i32;
    c8c0:	e51f3018 	ldr	r3, [pc, #-24]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c8c4:	e5d33000 	ldrb	r3, [r3]
    c8c8:	e2433030 	sub	r3, r3, #48	; 0x30
    c8cc:	ee073a90 	vmov	s15, r3
    c8d0:	eeb86be7 	vcvt.f64.s32	d6, s15
    c8d4:	e51f3044 	ldr	r3, [pc, #-68]	; c898 <g_halGps_getData_i32+0x8e4>
    c8d8:	e5933000 	ldr	r3, [r3]
    c8dc:	ee053a90 	vmov	s11, r3
    c8e0:	eeb87be5 	vcvt.f64.s32	d7, s11
    c8e4:	ee866b07 	vdiv.f64	d6, d6, d7
    c8e8:	e51f305c 	ldr	r3, [pc, #-92]	; c894 <g_halGps_getData_i32+0x8e0>
    c8ec:	ed937b00 	vldr	d7, [r3]
    c8f0:	ee367b07 	vadd.f64	d7, d6, d7
    c8f4:	e51f3068 	ldr	r3, [pc, #-104]	; c894 <g_halGps_getData_i32+0x8e0>
    c8f8:	ed837b00 	vstr	d7, [r3]
						l_decimal_place_factor_i32=l_decimal_place_factor_i32*10;
    c8fc:	e51f306c 	ldr	r3, [pc, #-108]	; c898 <g_halGps_getData_i32+0x8e4>
    c900:	e5932000 	ldr	r2, [r3]
    c904:	e1a03002 	mov	r3, r2
    c908:	e1a03103 	lsl	r3, r3, #2
    c90c:	e0833002 	add	r3, r3, r2
    c910:	e1a03083 	lsl	r3, r3, #1
    c914:	e1a02003 	mov	r2, r3
    c918:	e51f3088 	ldr	r3, [pc, #-136]	; c898 <g_halGps_getData_i32+0x8e4>
    c91c:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    c920:	e51f3074 	ldr	r3, [pc, #-116]	; c8b4 <g_halGps_getData_i32+0x900>
    c924:	e5933000 	ldr	r3, [r3]
    c928:	e2832001 	add	r2, r3, #1
    c92c:	e51f3080 	ldr	r3, [pc, #-128]	; c8b4 <g_halGps_getData_i32+0x900>
    c930:	e5832000 	str	r2, [r3]
					}
					break;
    c934:	eaffffff 	b	c938 <g_halGps_getData_i32+0x984>
    c938:	e1a00000 	nop			; (mov r0, r0)
				}
				break;
    c93c:	e1a00000 	nop			; (mov r0, r0)
			}
			break;
    c940:	ea0001ca 	b	d070 <g_halGps_getData_i32+0x10bc>


		case 2://$GPRMC ,205003.000 ,A ,4841.9261 ,N ,00918.7276 ,E ,0.33 ,184.26 ,100415 , , , A*63      44- 46
			switch (l_rec_Data_ch)
    c944:	e51f309c 	ldr	r3, [pc, #-156]	; c8b0 <g_halGps_getData_i32+0x8fc>
    c948:	e5d33000 	ldrb	r3, [r3]
    c94c:	e353000a 	cmp	r3, #10
    c950:	0a00000e 	beq	c990 <g_halGps_getData_i32+0x9dc>
    c954:	e353002c 	cmp	r3, #44	; 0x2c
    c958:	1a000018 	bne	c9c0 <g_halGps_getData_i32+0xa0c>
			{
			case ',':
				l_data_position_ch++;
    c95c:	e51f30c0 	ldr	r3, [pc, #-192]	; c8a4 <g_halGps_getData_i32+0x8f0>
    c960:	e5d33000 	ldrb	r3, [r3]
    c964:	e2833001 	add	r3, r3, #1
    c968:	e6ef2073 	uxtb	r2, r3
    c96c:	e51f30d0 	ldr	r3, [pc, #-208]	; c8a4 <g_halGps_getData_i32+0x8f0>
    c970:	e5c32000 	strb	r2, [r3]
				l_fieldpointer_i32=0;
    c974:	e51f30c4 	ldr	r3, [pc, #-196]	; c8b8 <g_halGps_getData_i32+0x904>
    c978:	e3a02000 	mov	r2, #0
    c97c:	e5832000 	str	r2, [r3]
				l_decimal_place_factor_i32=10;
    c980:	e51f30f0 	ldr	r3, [pc, #-240]	; c898 <g_halGps_getData_i32+0x8e4>
    c984:	e3a0200a 	mov	r2, #10
    c988:	e5832000 	str	r2, [r3]
				break;
    c98c:	ea0001b6 	b	d06c <g_halGps_getData_i32+0x10b8>
			case 10://LF found
				l_succeded_i32=l_succeded_i32+200;
    c990:	e51f30e4 	ldr	r3, [pc, #-228]	; c8b4 <g_halGps_getData_i32+0x900>
    c994:	e5933000 	ldr	r3, [r3]
    c998:	e28320c8 	add	r2, r3, #200	; 0xc8
    c99c:	e51f30f0 	ldr	r3, [pc, #-240]	; c8b4 <g_halGps_getData_i32+0x900>
    c9a0:	e5832000 	str	r2, [r3]
				l_message_position_ch=0;
    c9a4:	e51f3110 	ldr	r3, [pc, #-272]	; c89c <g_halGps_getData_i32+0x8e8>
    c9a8:	e3a02000 	mov	r2, #0
    c9ac:	e5c32000 	strb	r2, [r3]
				l_header_position_ch=0;
    c9b0:	e51f3118 	ldr	r3, [pc, #-280]	; c8a0 <g_halGps_getData_i32+0x8ec>
    c9b4:	e3a02000 	mov	r2, #0
    c9b8:	e5c32000 	strb	r2, [r3]
				break;
    c9bc:	ea0001aa 	b	d06c <g_halGps_getData_i32+0x10b8>
			default:
				switch (l_data_position_ch)
    c9c0:	e51f3124 	ldr	r3, [pc, #-292]	; c8a4 <g_halGps_getData_i32+0x8f0>
    c9c4:	e5d33000 	ldrb	r3, [r3]
    c9c8:	e2433001 	sub	r3, r3, #1
    c9cc:	e3530008 	cmp	r3, #8
    c9d0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c9d4:	ea0001a3 	b	d068 <g_halGps_getData_i32+0x10b4>
    c9d8:	0000c9fc 	.word	0x0000c9fc
    c9dc:	0000ca6c 	.word	0x0000ca6c
    c9e0:	0000cab8 	.word	0x0000cab8
    c9e4:	0000cbf4 	.word	0x0000cbf4
    c9e8:	0000cc40 	.word	0x0000cc40
    c9ec:	0000cd7c 	.word	0x0000cd7c
    c9f0:	0000cdc8 	.word	0x0000cdc8
    c9f4:	0000ceac 	.word	0x0000ceac
    c9f8:	0000cff8 	.word	0x0000cff8
				{
				case 1://Time
					if(l_fieldpointer_i32<6)
    c9fc:	e51f314c 	ldr	r3, [pc, #-332]	; c8b8 <g_halGps_getData_i32+0x904>
    ca00:	e5933000 	ldr	r3, [r3]
    ca04:	e3530005 	cmp	r3, #5
    ca08:	ca000011 	bgt	ca54 <g_halGps_getData_i32+0xaa0>
					{
						l_time_ui32=l_time_ui32*10+(l_rec_Data_ch-48);
    ca0c:	e51f316c 	ldr	r3, [pc, #-364]	; c8a8 <g_halGps_getData_i32+0x8f4>
    ca10:	e5932000 	ldr	r2, [r3]
    ca14:	e1a03002 	mov	r3, r2
    ca18:	e1a03103 	lsl	r3, r3, #2
    ca1c:	e0833002 	add	r3, r3, r2
    ca20:	e1a03083 	lsl	r3, r3, #1
    ca24:	e1a02003 	mov	r2, r3
    ca28:	e51f3180 	ldr	r3, [pc, #-384]	; c8b0 <g_halGps_getData_i32+0x8fc>
    ca2c:	e5d33000 	ldrb	r3, [r3]
    ca30:	e0823003 	add	r3, r2, r3
    ca34:	e2432030 	sub	r2, r3, #48	; 0x30
    ca38:	e51f3198 	ldr	r3, [pc, #-408]	; c8a8 <g_halGps_getData_i32+0x8f4>
    ca3c:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    ca40:	e51f3194 	ldr	r3, [pc, #-404]	; c8b4 <g_halGps_getData_i32+0x900>
    ca44:	e5933000 	ldr	r3, [r3]
    ca48:	e2832001 	add	r2, r3, #1
    ca4c:	e51f31a0 	ldr	r3, [pc, #-416]	; c8b4 <g_halGps_getData_i32+0x900>
    ca50:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    ca54:	e51f31a4 	ldr	r3, [pc, #-420]	; c8b8 <g_halGps_getData_i32+0x904>
    ca58:	e5933000 	ldr	r3, [r3]
    ca5c:	e2832001 	add	r2, r3, #1
    ca60:	e51f31b0 	ldr	r3, [pc, #-432]	; c8b8 <g_halGps_getData_i32+0x904>
    ca64:	e5832000 	str	r2, [r3]
					break;
    ca68:	ea00017e 	b	d068 <g_halGps_getData_i32+0x10b4>
				case 2://Fix
					if(l_fieldpointer_i32<2)
    ca6c:	e51f31bc 	ldr	r3, [pc, #-444]	; c8b8 <g_halGps_getData_i32+0x904>
    ca70:	e5933000 	ldr	r3, [r3]
    ca74:	e3530001 	cmp	r3, #1
    ca78:	ca000008 	bgt	caa0 <g_halGps_getData_i32+0xaec>
					{
						l_fix_ch=l_rec_Data_ch;
    ca7c:	e51f31d4 	ldr	r3, [pc, #-468]	; c8b0 <g_halGps_getData_i32+0x8fc>
    ca80:	e5d32000 	ldrb	r2, [r3]
    ca84:	e51f31e0 	ldr	r3, [pc, #-480]	; c8ac <g_halGps_getData_i32+0x8f8>
    ca88:	e5c32000 	strb	r2, [r3]
						l_succeded_i32++;
    ca8c:	e51f31e0 	ldr	r3, [pc, #-480]	; c8b4 <g_halGps_getData_i32+0x900>
    ca90:	e5933000 	ldr	r3, [r3]
    ca94:	e2832001 	add	r2, r3, #1
    ca98:	e51f31ec 	ldr	r3, [pc, #-492]	; c8b4 <g_halGps_getData_i32+0x900>
    ca9c:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    caa0:	e51f31f0 	ldr	r3, [pc, #-496]	; c8b8 <g_halGps_getData_i32+0x904>
    caa4:	e5933000 	ldr	r3, [r3]
    caa8:	e2832001 	add	r2, r3, #1
    caac:	e51f31fc 	ldr	r3, [pc, #-508]	; c8b8 <g_halGps_getData_i32+0x904>
    cab0:	e5832000 	str	r2, [r3]
					break;
    cab4:	ea00016b 	b	d068 <g_halGps_getData_i32+0x10b4>
				case 3://Latitude
					if(l_fieldpointer_i32<2)
    cab8:	e51f3208 	ldr	r3, [pc, #-520]	; c8b8 <g_halGps_getData_i32+0x904>
    cabc:	e5933000 	ldr	r3, [r3]
    cac0:	e3530001 	cmp	r3, #1
    cac4:	ca000012 	bgt	cb14 <g_halGps_getData_i32+0xb60>
					{
						l_gps_latitude_st.l_degree_ui32=l_gps_latitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    cac8:	e51f3214 	ldr	r3, [pc, #-532]	; c8bc <g_halGps_getData_i32+0x908>
    cacc:	e5932000 	ldr	r2, [r3]
    cad0:	e1a03002 	mov	r3, r2
    cad4:	e1a03103 	lsl	r3, r3, #2
    cad8:	e0833002 	add	r3, r3, r2
    cadc:	e1a03083 	lsl	r3, r3, #1
    cae0:	e1a02003 	mov	r2, r3
    cae4:	e51f323c 	ldr	r3, [pc, #-572]	; c8b0 <g_halGps_getData_i32+0x8fc>
    cae8:	e5d33000 	ldrb	r3, [r3]
    caec:	e0823003 	add	r3, r2, r3
    caf0:	e2432030 	sub	r2, r3, #48	; 0x30
    caf4:	e51f3240 	ldr	r3, [pc, #-576]	; c8bc <g_halGps_getData_i32+0x908>
    caf8:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    cafc:	e51f3250 	ldr	r3, [pc, #-592]	; c8b4 <g_halGps_getData_i32+0x900>
    cb00:	e5933000 	ldr	r3, [r3]
    cb04:	e2832001 	add	r2, r3, #1
    cb08:	e51f325c 	ldr	r3, [pc, #-604]	; c8b4 <g_halGps_getData_i32+0x900>
    cb0c:	e5832000 	str	r2, [r3]
    cb10:	ea000031 	b	cbdc <g_halGps_getData_i32+0xc28>
					}
					else if(l_fieldpointer_i32<4)
    cb14:	e51f3264 	ldr	r3, [pc, #-612]	; c8b8 <g_halGps_getData_i32+0x904>
    cb18:	e5933000 	ldr	r3, [r3]
    cb1c:	e3530003 	cmp	r3, #3
    cb20:	ca000012 	bgt	cb70 <g_halGps_getData_i32+0xbbc>
					{
						l_gps_latitude_st.l_minutes_ui32=l_gps_latitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    cb24:	e51f3270 	ldr	r3, [pc, #-624]	; c8bc <g_halGps_getData_i32+0x908>
    cb28:	e5932004 	ldr	r2, [r3, #4]
    cb2c:	e1a03002 	mov	r3, r2
    cb30:	e1a03103 	lsl	r3, r3, #2
    cb34:	e0833002 	add	r3, r3, r2
    cb38:	e1a03083 	lsl	r3, r3, #1
    cb3c:	e1a02003 	mov	r2, r3
    cb40:	e51f3298 	ldr	r3, [pc, #-664]	; c8b0 <g_halGps_getData_i32+0x8fc>
    cb44:	e5d33000 	ldrb	r3, [r3]
    cb48:	e0823003 	add	r3, r2, r3
    cb4c:	e2432030 	sub	r2, r3, #48	; 0x30
    cb50:	e51f329c 	ldr	r3, [pc, #-668]	; c8bc <g_halGps_getData_i32+0x908>
    cb54:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    cb58:	e51f32ac 	ldr	r3, [pc, #-684]	; c8b4 <g_halGps_getData_i32+0x900>
    cb5c:	e5933000 	ldr	r3, [r3]
    cb60:	e2832001 	add	r2, r3, #1
    cb64:	e51f32b8 	ldr	r3, [pc, #-696]	; c8b4 <g_halGps_getData_i32+0x900>
    cb68:	e5832000 	str	r2, [r3]
    cb6c:	ea00001a 	b	cbdc <g_halGps_getData_i32+0xc28>
					}
					else if(l_fieldpointer_i32>=5 && l_fieldpointer_i32<9)
    cb70:	e51f32c0 	ldr	r3, [pc, #-704]	; c8b8 <g_halGps_getData_i32+0x904>
    cb74:	e5933000 	ldr	r3, [r3]
    cb78:	e3530004 	cmp	r3, #4
    cb7c:	da000016 	ble	cbdc <g_halGps_getData_i32+0xc28>
    cb80:	e51f32d0 	ldr	r3, [pc, #-720]	; c8b8 <g_halGps_getData_i32+0x904>
    cb84:	e5933000 	ldr	r3, [r3]
    cb88:	e3530008 	cmp	r3, #8
    cb8c:	ca000012 	bgt	cbdc <g_halGps_getData_i32+0xc28>
					{
						l_gps_latitude_st.l_seconds_f64=l_gps_latitude_st.l_seconds_f64*10+(double)(l_rec_Data_ch-48)*0.006;
    cb90:	e51f32dc 	ldr	r3, [pc, #-732]	; c8bc <g_halGps_getData_i32+0x908>
    cb94:	ed936b02 	vldr	d6, [r3, #8]
    cb98:	ed9f7be8 	vldr	d7, [pc, #928]	; cf40 <g_halGps_getData_i32+0xf8c>
    cb9c:	ee266b07 	vmul.f64	d6, d6, d7
    cba0:	e59f33c4 	ldr	r3, [pc, #964]	; cf6c <g_halGps_getData_i32+0xfb8>
    cba4:	e5d33000 	ldrb	r3, [r3]
    cba8:	e2433030 	sub	r3, r3, #48	; 0x30
    cbac:	ee073a90 	vmov	s15, r3
    cbb0:	eeb85be7 	vcvt.f64.s32	d5, s15
    cbb4:	ed9f7be3 	vldr	d7, [pc, #908]	; cf48 <g_halGps_getData_i32+0xf94>
    cbb8:	ee257b07 	vmul.f64	d7, d5, d7
    cbbc:	ee367b07 	vadd.f64	d7, d6, d7
    cbc0:	e59f3390 	ldr	r3, [pc, #912]	; cf58 <g_halGps_getData_i32+0xfa4>
    cbc4:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    cbc8:	e59f33a8 	ldr	r3, [pc, #936]	; cf78 <g_halGps_getData_i32+0xfc4>
    cbcc:	e5933000 	ldr	r3, [r3]
    cbd0:	e2832001 	add	r2, r3, #1
    cbd4:	e59f339c 	ldr	r3, [pc, #924]	; cf78 <g_halGps_getData_i32+0xfc4>
    cbd8:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    cbdc:	e59f3390 	ldr	r3, [pc, #912]	; cf74 <g_halGps_getData_i32+0xfc0>
    cbe0:	e5933000 	ldr	r3, [r3]
    cbe4:	e2832001 	add	r2, r3, #1
    cbe8:	e59f3384 	ldr	r3, [pc, #900]	; cf74 <g_halGps_getData_i32+0xfc0>
    cbec:	e5832000 	str	r2, [r3]
					break;
    cbf0:	ea00011c 	b	d068 <g_halGps_getData_i32+0x10b4>
				case 4://cardinal direction
					if(l_fieldpointer_i32<1)
    cbf4:	e59f3378 	ldr	r3, [pc, #888]	; cf74 <g_halGps_getData_i32+0xfc0>
    cbf8:	e5933000 	ldr	r3, [r3]
    cbfc:	e3530000 	cmp	r3, #0
    cc00:	ca000008 	bgt	cc28 <g_halGps_getData_i32+0xc74>
					{
						l_gps_latitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    cc04:	e59f3360 	ldr	r3, [pc, #864]	; cf6c <g_halGps_getData_i32+0xfb8>
    cc08:	e5d32000 	ldrb	r2, [r3]
    cc0c:	e59f3344 	ldr	r3, [pc, #836]	; cf58 <g_halGps_getData_i32+0xfa4>
    cc10:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    cc14:	e59f335c 	ldr	r3, [pc, #860]	; cf78 <g_halGps_getData_i32+0xfc4>
    cc18:	e5933000 	ldr	r3, [r3]
    cc1c:	e2832001 	add	r2, r3, #1
    cc20:	e59f3350 	ldr	r3, [pc, #848]	; cf78 <g_halGps_getData_i32+0xfc4>
    cc24:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    cc28:	e59f3344 	ldr	r3, [pc, #836]	; cf74 <g_halGps_getData_i32+0xfc0>
    cc2c:	e5933000 	ldr	r3, [r3]
    cc30:	e2832001 	add	r2, r3, #1
    cc34:	e59f3338 	ldr	r3, [pc, #824]	; cf74 <g_halGps_getData_i32+0xfc0>
    cc38:	e5832000 	str	r2, [r3]
					break;
    cc3c:	ea000109 	b	d068 <g_halGps_getData_i32+0x10b4>
				case 5://Longitude
					if(l_fieldpointer_i32<3)
    cc40:	e59f332c 	ldr	r3, [pc, #812]	; cf74 <g_halGps_getData_i32+0xfc0>
    cc44:	e5933000 	ldr	r3, [r3]
    cc48:	e3530002 	cmp	r3, #2
    cc4c:	ca000012 	bgt	cc9c <g_halGps_getData_i32+0xce8>
					{
						l_gps_longitude_st.l_degree_ui32=l_gps_longitude_st.l_degree_ui32*10+(l_rec_Data_ch-48);
    cc50:	e59f3304 	ldr	r3, [pc, #772]	; cf5c <g_halGps_getData_i32+0xfa8>
    cc54:	e5932000 	ldr	r2, [r3]
    cc58:	e1a03002 	mov	r3, r2
    cc5c:	e1a03103 	lsl	r3, r3, #2
    cc60:	e0833002 	add	r3, r3, r2
    cc64:	e1a03083 	lsl	r3, r3, #1
    cc68:	e1a02003 	mov	r2, r3
    cc6c:	e59f32f8 	ldr	r3, [pc, #760]	; cf6c <g_halGps_getData_i32+0xfb8>
    cc70:	e5d33000 	ldrb	r3, [r3]
    cc74:	e0823003 	add	r3, r2, r3
    cc78:	e2432030 	sub	r2, r3, #48	; 0x30
    cc7c:	e59f32d8 	ldr	r3, [pc, #728]	; cf5c <g_halGps_getData_i32+0xfa8>
    cc80:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    cc84:	e59f32ec 	ldr	r3, [pc, #748]	; cf78 <g_halGps_getData_i32+0xfc4>
    cc88:	e5933000 	ldr	r3, [r3]
    cc8c:	e2832001 	add	r2, r3, #1
    cc90:	e59f32e0 	ldr	r3, [pc, #736]	; cf78 <g_halGps_getData_i32+0xfc4>
    cc94:	e5832000 	str	r2, [r3]
    cc98:	ea000031 	b	cd64 <g_halGps_getData_i32+0xdb0>
					}
					else if(l_fieldpointer_i32<5)
    cc9c:	e59f32d0 	ldr	r3, [pc, #720]	; cf74 <g_halGps_getData_i32+0xfc0>
    cca0:	e5933000 	ldr	r3, [r3]
    cca4:	e3530004 	cmp	r3, #4
    cca8:	ca000012 	bgt	ccf8 <g_halGps_getData_i32+0xd44>
					{
						l_gps_longitude_st.l_minutes_ui32=l_gps_longitude_st.l_minutes_ui32*10+(l_rec_Data_ch-48);
    ccac:	e59f32a8 	ldr	r3, [pc, #680]	; cf5c <g_halGps_getData_i32+0xfa8>
    ccb0:	e5932004 	ldr	r2, [r3, #4]
    ccb4:	e1a03002 	mov	r3, r2
    ccb8:	e1a03103 	lsl	r3, r3, #2
    ccbc:	e0833002 	add	r3, r3, r2
    ccc0:	e1a03083 	lsl	r3, r3, #1
    ccc4:	e1a02003 	mov	r2, r3
    ccc8:	e59f329c 	ldr	r3, [pc, #668]	; cf6c <g_halGps_getData_i32+0xfb8>
    cccc:	e5d33000 	ldrb	r3, [r3]
    ccd0:	e0823003 	add	r3, r2, r3
    ccd4:	e2432030 	sub	r2, r3, #48	; 0x30
    ccd8:	e59f327c 	ldr	r3, [pc, #636]	; cf5c <g_halGps_getData_i32+0xfa8>
    ccdc:	e5832004 	str	r2, [r3, #4]
						l_succeded_i32++;
    cce0:	e59f3290 	ldr	r3, [pc, #656]	; cf78 <g_halGps_getData_i32+0xfc4>
    cce4:	e5933000 	ldr	r3, [r3]
    cce8:	e2832001 	add	r2, r3, #1
    ccec:	e59f3284 	ldr	r3, [pc, #644]	; cf78 <g_halGps_getData_i32+0xfc4>
    ccf0:	e5832000 	str	r2, [r3]
    ccf4:	ea00001a 	b	cd64 <g_halGps_getData_i32+0xdb0>
					}
					else if(l_fieldpointer_i32>=6 && l_fieldpointer_i32<10)
    ccf8:	e59f3274 	ldr	r3, [pc, #628]	; cf74 <g_halGps_getData_i32+0xfc0>
    ccfc:	e5933000 	ldr	r3, [r3]
    cd00:	e3530005 	cmp	r3, #5
    cd04:	da000016 	ble	cd64 <g_halGps_getData_i32+0xdb0>
    cd08:	e59f3264 	ldr	r3, [pc, #612]	; cf74 <g_halGps_getData_i32+0xfc0>
    cd0c:	e5933000 	ldr	r3, [r3]
    cd10:	e3530009 	cmp	r3, #9
    cd14:	ca000012 	bgt	cd64 <g_halGps_getData_i32+0xdb0>
					{
						l_gps_longitude_st.l_seconds_f64=l_gps_longitude_st.l_seconds_f64*10+(double)(l_rec_Data_ch-48)*0.006;
    cd18:	e59f323c 	ldr	r3, [pc, #572]	; cf5c <g_halGps_getData_i32+0xfa8>
    cd1c:	ed936b02 	vldr	d6, [r3, #8]
    cd20:	ed9f7b86 	vldr	d7, [pc, #536]	; cf40 <g_halGps_getData_i32+0xf8c>
    cd24:	ee266b07 	vmul.f64	d6, d6, d7
    cd28:	e59f323c 	ldr	r3, [pc, #572]	; cf6c <g_halGps_getData_i32+0xfb8>
    cd2c:	e5d33000 	ldrb	r3, [r3]
    cd30:	e2433030 	sub	r3, r3, #48	; 0x30
    cd34:	ee073a90 	vmov	s15, r3
    cd38:	eeb85be7 	vcvt.f64.s32	d5, s15
    cd3c:	ed9f7b81 	vldr	d7, [pc, #516]	; cf48 <g_halGps_getData_i32+0xf94>
    cd40:	ee257b07 	vmul.f64	d7, d5, d7
    cd44:	ee367b07 	vadd.f64	d7, d6, d7
    cd48:	e59f320c 	ldr	r3, [pc, #524]	; cf5c <g_halGps_getData_i32+0xfa8>
    cd4c:	ed837b02 	vstr	d7, [r3, #8]
						l_succeded_i32++;
    cd50:	e59f3220 	ldr	r3, [pc, #544]	; cf78 <g_halGps_getData_i32+0xfc4>
    cd54:	e5933000 	ldr	r3, [r3]
    cd58:	e2832001 	add	r2, r3, #1
    cd5c:	e59f3214 	ldr	r3, [pc, #532]	; cf78 <g_halGps_getData_i32+0xfc4>
    cd60:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    cd64:	e59f3208 	ldr	r3, [pc, #520]	; cf74 <g_halGps_getData_i32+0xfc0>
    cd68:	e5933000 	ldr	r3, [r3]
    cd6c:	e2832001 	add	r2, r3, #1
    cd70:	e59f31fc 	ldr	r3, [pc, #508]	; cf74 <g_halGps_getData_i32+0xfc0>
    cd74:	e5832000 	str	r2, [r3]
					break;
    cd78:	ea0000ba 	b	d068 <g_halGps_getData_i32+0x10b4>
				case 6://cardinal direction
					if(l_fieldpointer_i32<1)
    cd7c:	e59f31f0 	ldr	r3, [pc, #496]	; cf74 <g_halGps_getData_i32+0xfc0>
    cd80:	e5933000 	ldr	r3, [r3]
    cd84:	e3530000 	cmp	r3, #0
    cd88:	ca000008 	bgt	cdb0 <g_halGps_getData_i32+0xdfc>
					{
						l_gps_longitude_st.l_cardinalDirection_ch=l_rec_Data_ch;
    cd8c:	e59f31d8 	ldr	r3, [pc, #472]	; cf6c <g_halGps_getData_i32+0xfb8>
    cd90:	e5d32000 	ldrb	r2, [r3]
    cd94:	e59f31c0 	ldr	r3, [pc, #448]	; cf5c <g_halGps_getData_i32+0xfa8>
    cd98:	e5c32010 	strb	r2, [r3, #16]
						l_succeded_i32++;
    cd9c:	e59f31d4 	ldr	r3, [pc, #468]	; cf78 <g_halGps_getData_i32+0xfc4>
    cda0:	e5933000 	ldr	r3, [r3]
    cda4:	e2832001 	add	r2, r3, #1
    cda8:	e59f31c8 	ldr	r3, [pc, #456]	; cf78 <g_halGps_getData_i32+0xfc4>
    cdac:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    cdb0:	e59f31bc 	ldr	r3, [pc, #444]	; cf74 <g_halGps_getData_i32+0xfc0>
    cdb4:	e5933000 	ldr	r3, [r3]
    cdb8:	e2832001 	add	r2, r3, #1
    cdbc:	e59f31b0 	ldr	r3, [pc, #432]	; cf74 <g_halGps_getData_i32+0xfc0>
    cdc0:	e5832000 	str	r2, [r3]
					break;
    cdc4:	ea0000a7 	b	d068 <g_halGps_getData_i32+0x10b4>
				case 7://Velocity
					if(l_fieldpointer_i32<1)
    cdc8:	e59f31a4 	ldr	r3, [pc, #420]	; cf74 <g_halGps_getData_i32+0xfc0>
    cdcc:	e5933000 	ldr	r3, [r3]
    cdd0:	e3530000 	cmp	r3, #0
    cdd4:	ca000013 	bgt	ce28 <g_halGps_getData_i32+0xe74>
					{
						l_velocity_f64=l_velocity_f64*10+(double)(l_rec_Data_ch-48)*0.01;
    cdd8:	e59f3180 	ldr	r3, [pc, #384]	; cf60 <g_halGps_getData_i32+0xfac>
    cddc:	ed936b00 	vldr	d6, [r3]
    cde0:	ed9f7b56 	vldr	d7, [pc, #344]	; cf40 <g_halGps_getData_i32+0xf8c>
    cde4:	ee266b07 	vmul.f64	d6, d6, d7
    cde8:	e59f317c 	ldr	r3, [pc, #380]	; cf6c <g_halGps_getData_i32+0xfb8>
    cdec:	e5d33000 	ldrb	r3, [r3]
    cdf0:	e2433030 	sub	r3, r3, #48	; 0x30
    cdf4:	ee073a90 	vmov	s15, r3
    cdf8:	eeb85be7 	vcvt.f64.s32	d5, s15
    cdfc:	ed9f7b53 	vldr	d7, [pc, #332]	; cf50 <g_halGps_getData_i32+0xf9c>
    ce00:	ee257b07 	vmul.f64	d7, d5, d7
    ce04:	ee367b07 	vadd.f64	d7, d6, d7
    ce08:	e59f3150 	ldr	r3, [pc, #336]	; cf60 <g_halGps_getData_i32+0xfac>
    ce0c:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    ce10:	e59f3160 	ldr	r3, [pc, #352]	; cf78 <g_halGps_getData_i32+0xfc4>
    ce14:	e5933000 	ldr	r3, [r3]
    ce18:	e2832001 	add	r2, r3, #1
    ce1c:	e59f3154 	ldr	r3, [pc, #340]	; cf78 <g_halGps_getData_i32+0xfc4>
    ce20:	e5832000 	str	r2, [r3]
    ce24:	ea00001a 	b	ce94 <g_halGps_getData_i32+0xee0>
					}
					else if(l_fieldpointer_i32>=2 && l_fieldpointer_i32<4)
    ce28:	e59f3144 	ldr	r3, [pc, #324]	; cf74 <g_halGps_getData_i32+0xfc0>
    ce2c:	e5933000 	ldr	r3, [r3]
    ce30:	e3530001 	cmp	r3, #1
    ce34:	da000016 	ble	ce94 <g_halGps_getData_i32+0xee0>
    ce38:	e59f3134 	ldr	r3, [pc, #308]	; cf74 <g_halGps_getData_i32+0xfc0>
    ce3c:	e5933000 	ldr	r3, [r3]
    ce40:	e3530003 	cmp	r3, #3
    ce44:	ca000012 	bgt	ce94 <g_halGps_getData_i32+0xee0>
					{
						l_velocity_f64=l_velocity_f64*10+(double)(l_rec_Data_ch-48)*0.01;
    ce48:	e59f3110 	ldr	r3, [pc, #272]	; cf60 <g_halGps_getData_i32+0xfac>
    ce4c:	ed936b00 	vldr	d6, [r3]
    ce50:	ed9f7b3a 	vldr	d7, [pc, #232]	; cf40 <g_halGps_getData_i32+0xf8c>
    ce54:	ee266b07 	vmul.f64	d6, d6, d7
    ce58:	e59f310c 	ldr	r3, [pc, #268]	; cf6c <g_halGps_getData_i32+0xfb8>
    ce5c:	e5d33000 	ldrb	r3, [r3]
    ce60:	e2433030 	sub	r3, r3, #48	; 0x30
    ce64:	ee073a90 	vmov	s15, r3
    ce68:	eeb85be7 	vcvt.f64.s32	d5, s15
    ce6c:	ed9f7b37 	vldr	d7, [pc, #220]	; cf50 <g_halGps_getData_i32+0xf9c>
    ce70:	ee257b07 	vmul.f64	d7, d5, d7
    ce74:	ee367b07 	vadd.f64	d7, d6, d7
    ce78:	e59f30e0 	ldr	r3, [pc, #224]	; cf60 <g_halGps_getData_i32+0xfac>
    ce7c:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    ce80:	e59f30f0 	ldr	r3, [pc, #240]	; cf78 <g_halGps_getData_i32+0xfc4>
    ce84:	e5933000 	ldr	r3, [r3]
    ce88:	e2832001 	add	r2, r3, #1
    ce8c:	e59f30e4 	ldr	r3, [pc, #228]	; cf78 <g_halGps_getData_i32+0xfc4>
    ce90:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    ce94:	e59f30d8 	ldr	r3, [pc, #216]	; cf74 <g_halGps_getData_i32+0xfc0>
    ce98:	e5933000 	ldr	r3, [r3]
    ce9c:	e2832001 	add	r2, r3, #1
    cea0:	e59f30cc 	ldr	r3, [pc, #204]	; cf74 <g_halGps_getData_i32+0xfc0>
    cea4:	e5832000 	str	r2, [r3]
					break;
    cea8:	ea00006e 	b	d068 <g_halGps_getData_i32+0x10b4>
				case 8://Direction
					if(l_rec_Data_ch!='.' && l_fieldpointer_i32==0)
    ceac:	e59f30b8 	ldr	r3, [pc, #184]	; cf6c <g_halGps_getData_i32+0xfb8>
    ceb0:	e5d33000 	ldrb	r3, [r3]
    ceb4:	e353002e 	cmp	r3, #46	; 0x2e
    ceb8:	0a000015 	beq	cf14 <g_halGps_getData_i32+0xf60>
    cebc:	e59f30b0 	ldr	r3, [pc, #176]	; cf74 <g_halGps_getData_i32+0xfc0>
    cec0:	e5933000 	ldr	r3, [r3]
    cec4:	e3530000 	cmp	r3, #0
    cec8:	1a000011 	bne	cf14 <g_halGps_getData_i32+0xf60>
					{
						l_direction_f64=l_direction_f64*10+(double)(l_rec_Data_ch-48);
    cecc:	e59f3090 	ldr	r3, [pc, #144]	; cf64 <g_halGps_getData_i32+0xfb0>
    ced0:	ed936b00 	vldr	d6, [r3]
    ced4:	ed9f7b19 	vldr	d7, [pc, #100]	; cf40 <g_halGps_getData_i32+0xf8c>
    ced8:	ee266b07 	vmul.f64	d6, d6, d7
    cedc:	e59f3088 	ldr	r3, [pc, #136]	; cf6c <g_halGps_getData_i32+0xfb8>
    cee0:	e5d33000 	ldrb	r3, [r3]
    cee4:	e2433030 	sub	r3, r3, #48	; 0x30
    cee8:	ee053a90 	vmov	s11, r3
    ceec:	eeb87be5 	vcvt.f64.s32	d7, s11
    cef0:	ee367b07 	vadd.f64	d7, d6, d7
    cef4:	e59f3068 	ldr	r3, [pc, #104]	; cf64 <g_halGps_getData_i32+0xfb0>
    cef8:	ed837b00 	vstr	d7, [r3]
						l_succeded_i32++;
    cefc:	e59f3074 	ldr	r3, [pc, #116]	; cf78 <g_halGps_getData_i32+0xfc4>
    cf00:	e5933000 	ldr	r3, [r3]
    cf04:	e2832001 	add	r2, r3, #1
    cf08:	e59f3068 	ldr	r3, [pc, #104]	; cf78 <g_halGps_getData_i32+0xfc4>
    cf0c:	e5832000 	str	r2, [r3]
    cf10:	ea000037 	b	cff4 <g_halGps_getData_i32+0x1040>

					}
					else if (l_rec_Data_ch=='.')
    cf14:	e59f3050 	ldr	r3, [pc, #80]	; cf6c <g_halGps_getData_i32+0xfb8>
    cf18:	e5d33000 	ldrb	r3, [r3]
    cf1c:	e353002e 	cmp	r3, #46	; 0x2e
    cf20:	1a000015 	bne	cf7c <g_halGps_getData_i32+0xfc8>
					{
						l_fieldpointer_i32++;
    cf24:	e59f3048 	ldr	r3, [pc, #72]	; cf74 <g_halGps_getData_i32+0xfc0>
    cf28:	e5933000 	ldr	r3, [r3]
    cf2c:	e2832001 	add	r2, r3, #1
    cf30:	e59f303c 	ldr	r3, [pc, #60]	; cf74 <g_halGps_getData_i32+0xfc0>
    cf34:	e5832000 	str	r2, [r3]
    cf38:	ea00002d 	b	cff4 <g_halGps_getData_i32+0x1040>
    cf3c:	e1a00000 	nop			; (mov r0, r0)
    cf40:	00000000 	.word	0x00000000
    cf44:	40240000 	.word	0x40240000
    cf48:	bc6a7efa 	.word	0xbc6a7efa
    cf4c:	3f789374 	.word	0x3f789374
    cf50:	47ae147b 	.word	0x47ae147b
    cf54:	3f847ae1 	.word	0x3f847ae1
    cf58:	0001b6f8 	.word	0x0001b6f8
    cf5c:	0001b6e0 	.word	0x0001b6e0
    cf60:	0001b718 	.word	0x0001b718
    cf64:	0001b720 	.word	0x0001b720
    cf68:	0001b294 	.word	0x0001b294
    cf6c:	0001b290 	.word	0x0001b290
    cf70:	0001b728 	.word	0x0001b728
    cf74:	0001b744 	.word	0x0001b744
    cf78:	0001b748 	.word	0x0001b748
					}
					else
					{
						l_direction_f64=l_direction_f64+(double)(l_rec_Data_ch-48)/l_decimal_place_factor_i32;
    cf7c:	e51f3018 	ldr	r3, [pc, #-24]	; cf6c <g_halGps_getData_i32+0xfb8>
    cf80:	e5d33000 	ldrb	r3, [r3]
    cf84:	e2433030 	sub	r3, r3, #48	; 0x30
    cf88:	ee073a90 	vmov	s15, r3
    cf8c:	eeb86be7 	vcvt.f64.s32	d6, s15
    cf90:	e51f3030 	ldr	r3, [pc, #-48]	; cf68 <g_halGps_getData_i32+0xfb4>
    cf94:	e5933000 	ldr	r3, [r3]
    cf98:	ee053a90 	vmov	s11, r3
    cf9c:	eeb87be5 	vcvt.f64.s32	d7, s11
    cfa0:	ee866b07 	vdiv.f64	d6, d6, d7
    cfa4:	e51f3048 	ldr	r3, [pc, #-72]	; cf64 <g_halGps_getData_i32+0xfb0>
    cfa8:	ed937b00 	vldr	d7, [r3]
    cfac:	ee367b07 	vadd.f64	d7, d6, d7
    cfb0:	e51f3054 	ldr	r3, [pc, #-84]	; cf64 <g_halGps_getData_i32+0xfb0>
    cfb4:	ed837b00 	vstr	d7, [r3]
						l_decimal_place_factor_i32=l_decimal_place_factor_i32*10;
    cfb8:	e51f3058 	ldr	r3, [pc, #-88]	; cf68 <g_halGps_getData_i32+0xfb4>
    cfbc:	e5932000 	ldr	r2, [r3]
    cfc0:	e1a03002 	mov	r3, r2
    cfc4:	e1a03103 	lsl	r3, r3, #2
    cfc8:	e0833002 	add	r3, r3, r2
    cfcc:	e1a03083 	lsl	r3, r3, #1
    cfd0:	e1a02003 	mov	r2, r3
    cfd4:	e51f3074 	ldr	r3, [pc, #-116]	; cf68 <g_halGps_getData_i32+0xfb4>
    cfd8:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    cfdc:	e51f306c 	ldr	r3, [pc, #-108]	; cf78 <g_halGps_getData_i32+0xfc4>
    cfe0:	e5933000 	ldr	r3, [r3]
    cfe4:	e2832001 	add	r2, r3, #1
    cfe8:	e51f3078 	ldr	r3, [pc, #-120]	; cf78 <g_halGps_getData_i32+0xfc4>
    cfec:	e5832000 	str	r2, [r3]
					}
					break;
    cff0:	ea00001c 	b	d068 <g_halGps_getData_i32+0x10b4>
    cff4:	ea00001b 	b	d068 <g_halGps_getData_i32+0x10b4>
				case 9://Date
					if(l_fieldpointer_i32<6)
    cff8:	e51f308c 	ldr	r3, [pc, #-140]	; cf74 <g_halGps_getData_i32+0xfc0>
    cffc:	e5933000 	ldr	r3, [r3]
    d000:	e3530005 	cmp	r3, #5
    d004:	ca000011 	bgt	d050 <g_halGps_getData_i32+0x109c>
					{
						l_date_ui32=l_date_ui32*10+(l_rec_Data_ch-48);
    d008:	e51f30a0 	ldr	r3, [pc, #-160]	; cf70 <g_halGps_getData_i32+0xfbc>
    d00c:	e5932000 	ldr	r2, [r3]
    d010:	e1a03002 	mov	r3, r2
    d014:	e1a03103 	lsl	r3, r3, #2
    d018:	e0833002 	add	r3, r3, r2
    d01c:	e1a03083 	lsl	r3, r3, #1
    d020:	e1a02003 	mov	r2, r3
    d024:	e51f30c0 	ldr	r3, [pc, #-192]	; cf6c <g_halGps_getData_i32+0xfb8>
    d028:	e5d33000 	ldrb	r3, [r3]
    d02c:	e0823003 	add	r3, r2, r3
    d030:	e2432030 	sub	r2, r3, #48	; 0x30
    d034:	e51f30cc 	ldr	r3, [pc, #-204]	; cf70 <g_halGps_getData_i32+0xfbc>
    d038:	e5832000 	str	r2, [r3]
						l_succeded_i32++;
    d03c:	e51f30cc 	ldr	r3, [pc, #-204]	; cf78 <g_halGps_getData_i32+0xfc4>
    d040:	e5933000 	ldr	r3, [r3]
    d044:	e2832001 	add	r2, r3, #1
    d048:	e51f30d8 	ldr	r3, [pc, #-216]	; cf78 <g_halGps_getData_i32+0xfc4>
    d04c:	e5832000 	str	r2, [r3]
					}
					l_fieldpointer_i32++;
    d050:	e51f30e4 	ldr	r3, [pc, #-228]	; cf74 <g_halGps_getData_i32+0xfc0>
    d054:	e5933000 	ldr	r3, [r3]
    d058:	e2832001 	add	r2, r3, #1
    d05c:	e51f30f0 	ldr	r3, [pc, #-240]	; cf74 <g_halGps_getData_i32+0xfc0>
    d060:	e5832000 	str	r2, [r3]
					break;
    d064:	e1a00000 	nop			; (mov r0, r0)
				}
				break;
    d068:	e1a00000 	nop			; (mov r0, r0)
			}
			break;
    d06c:	e1a00000 	nop			; (mov r0, r0)
		}
	}
	return(l_succeded_i32);
    d070:	e51f3100 	ldr	r3, [pc, #-256]	; cf78 <g_halGps_getData_i32+0xfc4>
    d074:	e5933000 	ldr	r3, [r3]
}
    d078:	e1a00003 	mov	r0, r3
    d07c:	e8bd8800 	pop	{fp, pc}

0000d080 <l_readI2cByte_ui8>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline unsigned char l_readI2cByte_ui8( unsigned char f_registerAddr_ui8 )
{
    d080:	e92d4800 	push	{fp, lr}
    d084:	e28db004 	add	fp, sp, #4
    d088:	e24dd010 	sub	sp, sp, #16
    d08c:	e1a03000 	mov	r3, r0
    d090:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char	l_registerAddr_ui8 = 0;
    d094:	e3a03000 	mov	r3, #0
    d098:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char	l_recvDataByte_ui8 = 0;
    d09c:	e3a03000 	mov	r3, #0
    d0a0:	e54b3006 	strb	r3, [fp, #-6]

	/*
	 * ensure single byte read (MSB of register address shall be 0)
	 * -> Mask MSB to zero!
	 */
	l_registerAddr_ui8 = f_registerAddr_ui8 & 0b01111111;
    d0a4:	e55b300d 	ldrb	r3, [fp, #-13]
    d0a8:	e203307f 	and	r3, r3, #127	; 0x7f
    d0ac:	e6ef3073 	uxtb	r3, r3
    d0b0:	e54b3005 	strb	r3, [fp, #-5]

	//write register request to I2C
	if ( g_lldI2c_WriteI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, &l_registerAddr_ui8, 1) != M_HAL_ACCMAG_SUCCESS_BL )
    d0b4:	e24b3005 	sub	r3, fp, #5
    d0b8:	e3a0001e 	mov	r0, #30
    d0bc:	e1a01003 	mov	r1, r3
    d0c0:	e3a02001 	mov	r2, #1
    d0c4:	eb0005a3 	bl	e758 <g_lldI2c_WriteI2c_bl>
    d0c8:	e1a03000 	mov	r3, r0
    d0cc:	e3530000 	cmp	r3, #0
    d0d0:	0a000001 	beq	d0dc <l_readI2cByte_ui8+0x5c>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    d0d4:	e3a03001 	mov	r3, #1
    d0d8:	ea00000a 	b	d108 <l_readI2cByte_ui8+0x88>
	}

	//read requested register data
	if ( g_lldI2c_ReadI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, &l_recvDataByte_ui8, 1) != M_HAL_ACCMAG_SUCCESS_BL )
    d0dc:	e24b3006 	sub	r3, fp, #6
    d0e0:	e3a0001e 	mov	r0, #30
    d0e4:	e1a01003 	mov	r1, r3
    d0e8:	e3a02001 	mov	r2, #1
    d0ec:	eb0005d1 	bl	e838 <g_lldI2c_ReadI2c_bl>
    d0f0:	e1a03000 	mov	r3, r0
    d0f4:	e3530000 	cmp	r3, #0
    d0f8:	0a000001 	beq	d104 <l_readI2cByte_ui8+0x84>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    d0fc:	e3a03001 	mov	r3, #1
    d100:	ea000000 	b	d108 <l_readI2cByte_ui8+0x88>
	}

	return l_recvDataByte_ui8;
    d104:	e55b3006 	ldrb	r3, [fp, #-6]
}
    d108:	e1a00003 	mov	r0, r3
    d10c:	e24bd004 	sub	sp, fp, #4
    d110:	e8bd8800 	pop	{fp, pc}

0000d114 <l_readI2cByteStream_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline unsigned int l_readI2cByteStream_bl( unsigned char f_startRegisterAddr_ui8, const unsigned char* f_readDestinationBuffer_pui8, unsigned int f_numOfBytesToRead_ui32 )
{
    d114:	e92d4800 	push	{fp, lr}
    d118:	e28db004 	add	fp, sp, #4
    d11c:	e24dd018 	sub	sp, sp, #24
    d120:	e1a03000 	mov	r3, r0
    d124:	e50b1014 	str	r1, [fp, #-20]
    d128:	e50b2018 	str	r2, [fp, #-24]
    d12c:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char	l_registerAddr_ui8 	= 0;
    d130:	e3a03000 	mov	r3, #0
    d134:	e54b3005 	strb	r3, [fp, #-5]

	// ensure at least one data byte to read
	if (f_numOfBytesToRead_ui32 < 1)
    d138:	e51b3018 	ldr	r3, [fp, #-24]
    d13c:	e3530000 	cmp	r3, #0
    d140:	1a000001 	bne	d14c <l_readI2cByteStream_bl+0x38>
	{
		return M_HAL_ACCMAG_FAILED_BL;
    d144:	e3a03001 	mov	r3, #1
    d148:	ea000018 	b	d1b0 <l_readI2cByteStream_bl+0x9c>
	 * ensure byte stream reading (MSB of register address shall be 1)
	 *   -> Mask MSB to one!
	 *   -> LSM303D will auto-increment the register address for each byte
	 *      of data
	 */
	l_registerAddr_ui8 = f_startRegisterAddr_ui8 | 0b10000000;
    d14c:	e55b300d 	ldrb	r3, [fp, #-13]
    d150:	e1e03c83 	mvn	r3, r3, lsl #25
    d154:	e1e03ca3 	mvn	r3, r3, lsr #25
    d158:	e6ef3073 	uxtb	r3, r3
    d15c:	e54b3005 	strb	r3, [fp, #-5]

	//write register request to I2C
	if ( g_lldI2c_WriteI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, &l_registerAddr_ui8, 1) != M_HAL_ACCMAG_SUCCESS_BL )
    d160:	e24b3005 	sub	r3, fp, #5
    d164:	e3a0001e 	mov	r0, #30
    d168:	e1a01003 	mov	r1, r3
    d16c:	e3a02001 	mov	r2, #1
    d170:	eb000578 	bl	e758 <g_lldI2c_WriteI2c_bl>
    d174:	e1a03000 	mov	r3, r0
    d178:	e3530000 	cmp	r3, #0
    d17c:	0a000001 	beq	d188 <l_readI2cByteStream_bl+0x74>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    d180:	e3a03001 	mov	r3, #1
    d184:	ea000009 	b	d1b0 <l_readI2cByteStream_bl+0x9c>
	}

	//read requested registers to I2C
	if ( g_lldI2c_ReadI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, f_readDestinationBuffer_pui8, f_numOfBytesToRead_ui32) != M_HAL_ACCMAG_SUCCESS_BL )
    d188:	e3a0001e 	mov	r0, #30
    d18c:	e51b1014 	ldr	r1, [fp, #-20]
    d190:	e51b2018 	ldr	r2, [fp, #-24]
    d194:	eb0005a7 	bl	e838 <g_lldI2c_ReadI2c_bl>
    d198:	e1a03000 	mov	r3, r0
    d19c:	e3530000 	cmp	r3, #0
    d1a0:	0a000001 	beq	d1ac <l_readI2cByteStream_bl+0x98>
	{
		// error in I2C access
		return M_HAL_ACCMAG_FAILED_BL;
    d1a4:	e3a03001 	mov	r3, #1
    d1a8:	ea000000 	b	d1b0 <l_readI2cByteStream_bl+0x9c>
	}

	return M_HAL_ACCMAG_SUCCESS_BL;
    d1ac:	e3a03000 	mov	r3, #0
}
    d1b0:	e1a00003 	mov	r0, r3
    d1b4:	e24bd004 	sub	sp, fp, #4
    d1b8:	e8bd8800 	pop	{fp, pc}

0000d1bc <l_writeI2cByteStream_bl>:
 * - changed malloc/free approach to fixed size array (with define to set
 *   size of array in header)
 * \endinternal
 ***********************************************************************/
static inline unsigned int l_writeI2cByteStream_bl( unsigned char f_startRegisterAddr_ui8, const unsigned char* const f_byteStreamToWrite_pui8, unsigned int f_numOfBytes_ui32 )
{
    d1bc:	e92d4800 	push	{fp, lr}
    d1c0:	e28db004 	add	fp, sp, #4
    d1c4:	e24dd028 	sub	sp, sp, #40	; 0x28
    d1c8:	e1a03000 	mov	r3, r0
    d1cc:	e50b1024 	str	r1, [fp, #-36]	; 0x24
    d1d0:	e50b2028 	str	r2, [fp, #-40]	; 0x28
    d1d4:	e54b301d 	strb	r3, [fp, #-29]
	unsigned int	l_writeSucceeded_bl 	= M_HAL_ACCMAG_SUCCESS_BL; 	// success state as default
    d1d8:	e3a03000 	mov	r3, #0
    d1dc:	e50b3008 	str	r3, [fp, #-8]
	unsigned char 	l_bufCtr_ui8			= 0;						// loop counter to assemble payload and register address
    d1e0:	e3a03000 	mov	r3, #0
    d1e4:	e54b3009 	strb	r3, [fp, #-9]
	/*
	 * - ensure at least one data byte to write
	 * - prevent a buffer overflow of l_byteStreamBuffer_rgXui8
	 *   --> payload data bytes + register address (subaddress)
	 */
	if ( 		(f_numOfBytes_ui32 < 1)
    d1e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    d1ec:	e3530000 	cmp	r3, #0
    d1f0:	0a000002 	beq	d200 <l_writeI2cByteStream_bl+0x44>
			||  (f_numOfBytes_ui32 > M_HAL_ACCMAG_WRITE_BYTESTREAM_BUFFER_SIZE_UI8-1) )
    d1f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    d1f8:	e353000b 	cmp	r3, #11
    d1fc:	9a000001 	bls	d208 <l_writeI2cByteStream_bl+0x4c>
	{
		return M_HAL_ACCMAG_FAILED_BL;
    d200:	e3a03001 	mov	r3, #1
    d204:	ea000026 	b	d2a4 <l_writeI2cByteStream_bl+0xe8>
	 *     -> LSM303D will auto-increment the register address for each byte
	 *        of data
	 * (2) copy data to write to local buffer, start at second byte position
	 *     (first byte position is the register address)
	 */
	l_byteStreamBuffer_rgXui8[0] = f_startRegisterAddr_ui8 | 0b10000000;
    d208:	e55b301d 	ldrb	r3, [fp, #-29]
    d20c:	e1e03c83 	mvn	r3, r3, lsl #25
    d210:	e1e03ca3 	mvn	r3, r3, lsr #25
    d214:	e6ef3073 	uxtb	r3, r3
    d218:	e54b3018 	strb	r3, [fp, #-24]
	for(l_bufCtr_ui8=0; l_bufCtr_ui8 < f_numOfBytes_ui32; l_bufCtr_ui8++)
    d21c:	e3a03000 	mov	r3, #0
    d220:	e54b3009 	strb	r3, [fp, #-9]
    d224:	ea00000d 	b	d260 <l_writeI2cByteStream_bl+0xa4>
	{
		l_byteStreamBuffer_rgXui8[l_bufCtr_ui8+1] = f_byteStreamToWrite_pui8[l_bufCtr_ui8];
    d228:	e55b3009 	ldrb	r3, [fp, #-9]
    d22c:	e2831001 	add	r1, r3, #1
    d230:	e55b3009 	ldrb	r3, [fp, #-9]
    d234:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
    d238:	e0823003 	add	r3, r2, r3
    d23c:	e5d32000 	ldrb	r2, [r3]
    d240:	e3e03013 	mvn	r3, #19
    d244:	e24b0004 	sub	r0, fp, #4
    d248:	e0801001 	add	r1, r0, r1
    d24c:	e0813003 	add	r3, r1, r3
    d250:	e5c32000 	strb	r2, [r3]
	 *        of data
	 * (2) copy data to write to local buffer, start at second byte position
	 *     (first byte position is the register address)
	 */
	l_byteStreamBuffer_rgXui8[0] = f_startRegisterAddr_ui8 | 0b10000000;
	for(l_bufCtr_ui8=0; l_bufCtr_ui8 < f_numOfBytes_ui32; l_bufCtr_ui8++)
    d254:	e55b3009 	ldrb	r3, [fp, #-9]
    d258:	e2833001 	add	r3, r3, #1
    d25c:	e54b3009 	strb	r3, [fp, #-9]
    d260:	e55b2009 	ldrb	r2, [fp, #-9]
    d264:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    d268:	e1520003 	cmp	r2, r3
    d26c:	3affffed 	bcc	d228 <l_writeI2cByteStream_bl+0x6c>
	{
		l_byteStreamBuffer_rgXui8[l_bufCtr_ui8+1] = f_byteStreamToWrite_pui8[l_bufCtr_ui8];
	}

	//write register to I2C
	if ( g_lldI2c_WriteI2c_bl(M_HAL_ACCMAG_I2CADDR_UI8, l_byteStreamBuffer_rgXui8, f_numOfBytes_ui32 + 1) != M_HAL_ACCMAG_SUCCESS_BL )
    d270:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
    d274:	e2833001 	add	r3, r3, #1
    d278:	e24b2018 	sub	r2, fp, #24
    d27c:	e3a0001e 	mov	r0, #30
    d280:	e1a01002 	mov	r1, r2
    d284:	e1a02003 	mov	r2, r3
    d288:	eb000532 	bl	e758 <g_lldI2c_WriteI2c_bl>
    d28c:	e1a03000 	mov	r3, r0
    d290:	e3530000 	cmp	r3, #0
    d294:	0a000001 	beq	d2a0 <l_writeI2cByteStream_bl+0xe4>
	{
		// error in I2C access
		l_writeSucceeded_bl = M_HAL_ACCMAG_FAILED_BL;
    d298:	e3a03001 	mov	r3, #1
    d29c:	e50b3008 	str	r3, [fp, #-8]
	}

	return l_writeSucceeded_bl;
    d2a0:	e51b3008 	ldr	r3, [fp, #-8]
}
    d2a4:	e1a00003 	mov	r0, r3
    d2a8:	e24bd004 	sub	sp, fp, #4
    d2ac:	e8bd8800 	pop	{fp, pc}

0000d2b0 <l_twoCompOf16Bit_ui16>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline signed short l_twoCompOf16Bit_ui16( unsigned char f_lsb_ui8, unsigned char f_msb_ui8 )
{
    d2b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    d2b4:	e28db000 	add	fp, sp, #0
    d2b8:	e24dd014 	sub	sp, sp, #20
    d2bc:	e1a02000 	mov	r2, r0
    d2c0:	e1a03001 	mov	r3, r1
    d2c4:	e54b200d 	strb	r2, [fp, #-13]
    d2c8:	e54b300e 	strb	r3, [fp, #-14]
	signed short	l_compOfTwo_ui16 = 0; //init variable with zeros
    d2cc:	e3a03000 	mov	r3, #0
    d2d0:	e14b30b6 	strh	r3, [fp, #-6]
	 * 2. invert 16bit
	 * 3. add 1 to 16bit value
	 * 4. mask only 16bit range (to avoid overflows)
	 * --> conversion of two's complement
	 */
	l_compOfTwo_ui16 = (signed short)( ( ~((int)(f_msb_ui8 << 8) + (int)(f_lsb_ui8)) + (int)1 ) & (int)0xFFFF );
    d2d4:	e55b300e 	ldrb	r3, [fp, #-14]
    d2d8:	e6ff3073 	uxth	r3, r3
    d2dc:	e1a03403 	lsl	r3, r3, #8
    d2e0:	e6ff2073 	uxth	r2, r3
    d2e4:	e55b300d 	ldrb	r3, [fp, #-13]
    d2e8:	e6ff3073 	uxth	r3, r3
    d2ec:	e0823003 	add	r3, r2, r3
    d2f0:	e6ff3073 	uxth	r3, r3
    d2f4:	e2633000 	rsb	r3, r3, #0
    d2f8:	e6ff3073 	uxth	r3, r3
    d2fc:	e14b30b6 	strh	r3, [fp, #-6]

	return l_compOfTwo_ui16;
    d300:	e15b30b6 	ldrh	r3, [fp, #-6]
    d304:	e6bf3073 	sxth	r3, r3
}
    d308:	e1a00003 	mov	r0, r3
    d30c:	e24bd000 	sub	sp, fp, #0
    d310:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    d314:	e12fff1e 	bx	lr

0000d318 <l_convertMagRawToSIUnit_f64>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline double l_convertMagRawToSIUnit_f64( signed short f_rawMagVal_i16, unsigned char f_scalingValueGauss_ui8 )
{
    d318:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    d31c:	e28db000 	add	fp, sp, #0
    d320:	e24dd01c 	sub	sp, sp, #28
    d324:	e1a02000 	mov	r2, r0
    d328:	e1a03001 	mov	r3, r1
    d32c:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
    d330:	e54b3017 	strb	r3, [fp, #-23]
	double			l_outputValue_f64 = 0;
    d334:	e3a02000 	mov	r2, #0
    d338:	e3a03000 	mov	r3, #0
    d33c:	e14b20fc 	strd	r2, [fp, #-12]
	const double	l_gaussToSI_f64 = 0.1E-3;	//1Gauss = 0.1mT = 0.1*10^(-3)T
    d340:	e59f2060 	ldr	r2, [pc, #96]	; d3a8 <l_convertMagRawToSIUnit_f64+0x90>
    d344:	e59f3060 	ldr	r3, [pc, #96]	; d3ac <l_convertMagRawToSIUnit_f64+0x94>
    d348:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

	// unitless [-1,1]
	l_outputValue_f64 = (double)f_rawMagVal_i16 / (double)SHRT_MAX;
    d34c:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
    d350:	ee053a90 	vmov	s11, r3
    d354:	eeb86be5 	vcvt.f64.s32	d6, s11
    d358:	ed9f7b10 	vldr	d7, [pc, #64]	; d3a0 <l_convertMagRawToSIUnit_f64+0x88>
    d35c:	ee867b07 	vdiv.f64	d7, d6, d7
    d360:	ed0b7b03 	vstr	d7, [fp, #-12]

	// Units: 1 * T*Gauss^(-1) * Gauss = m*s^(-2)
	l_outputValue_f64 = l_outputValue_f64 * l_gaussToSI_f64 * (double)f_scalingValueGauss_ui8;
    d364:	ed1b6b03 	vldr	d6, [fp, #-12]
    d368:	ed1b7b05 	vldr	d7, [fp, #-20]	; 0xffffffec
    d36c:	ee266b07 	vmul.f64	d6, d6, d7
    d370:	e55b3017 	ldrb	r3, [fp, #-23]
    d374:	ee053a90 	vmov	s11, r3
    d378:	eeb87b65 	vcvt.f64.u32	d7, s11
    d37c:	ee267b07 	vmul.f64	d7, d6, d7
    d380:	ed0b7b03 	vstr	d7, [fp, #-12]

	return l_outputValue_f64;	//Tesla
    d384:	e14b20dc 	ldrd	r2, [fp, #-12]
    d388:	ec432b17 	vmov	d7, r2, r3
}
    d38c:	eeb00b47 	vmov.f64	d0, d7
    d390:	e24bd000 	sub	sp, fp, #0
    d394:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    d398:	e12fff1e 	bx	lr
    d39c:	e1a00000 	nop			; (mov r0, r0)
    d3a0:	00000000 	.word	0x00000000
    d3a4:	40dfffc0 	.word	0x40dfffc0
    d3a8:	eb1c432d 	.word	0xeb1c432d
    d3ac:	3f1a36e2 	.word	0x3f1a36e2

0000d3b0 <l_convertAccRawToSIUnit_f64>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline double l_convertAccRawToSIUnit_f64( signed short f_rawAccVal_i16, unsigned char f_scalingValueG_ui8 )
{
    d3b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    d3b4:	e28db000 	add	fp, sp, #0
    d3b8:	e24dd01c 	sub	sp, sp, #28
    d3bc:	e1a02000 	mov	r2, r0
    d3c0:	e1a03001 	mov	r3, r1
    d3c4:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
    d3c8:	e54b3017 	strb	r3, [fp, #-23]
	double			l_outputValue_f64 	= 0;
    d3cc:	e3a02000 	mov	r2, #0
    d3d0:	e3a03000 	mov	r3, #0
    d3d4:	e14b20fc 	strd	r2, [fp, #-12]
	const double	l_gravityConst_f64 	= 9.81; // m*(s^-2) per G
    d3d8:	e59f2060 	ldr	r2, [pc, #96]	; d440 <l_convertAccRawToSIUnit_f64+0x90>
    d3dc:	e59f3060 	ldr	r3, [pc, #96]	; d444 <l_convertAccRawToSIUnit_f64+0x94>
    d3e0:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

	// unitless [-1,1]
	l_outputValue_f64 = (double)f_scalingValueG_ui8 * (double)f_rawAccVal_i16 / (double)SHRT_MAX;
    d3e4:	e55b3017 	ldrb	r3, [fp, #-23]
    d3e8:	ee053a90 	vmov	s11, r3
    d3ec:	eeb86b65 	vcvt.f64.u32	d6, s11
    d3f0:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
    d3f4:	ee053a90 	vmov	s11, r3
    d3f8:	eeb87be5 	vcvt.f64.s32	d7, s11
    d3fc:	ee266b07 	vmul.f64	d6, d6, d7
    d400:	ed9f7b0c 	vldr	d7, [pc, #48]	; d438 <l_convertAccRawToSIUnit_f64+0x88>
    d404:	ee867b07 	vdiv.f64	d7, d6, d7
    d408:	ed0b7b03 	vstr	d7, [fp, #-12]

	// Units: 1 * m*s^(-2)*G^(-1) * G = m*s^(-2)
	l_outputValue_f64 = l_outputValue_f64 * l_gravityConst_f64;
    d40c:	ed1b6b03 	vldr	d6, [fp, #-12]
    d410:	ed1b7b05 	vldr	d7, [fp, #-20]	; 0xffffffec
    d414:	ee267b07 	vmul.f64	d7, d6, d7
    d418:	ed0b7b03 	vstr	d7, [fp, #-12]

	return l_outputValue_f64;  // m*(s^-2)
    d41c:	e14b20dc 	ldrd	r2, [fp, #-12]
    d420:	ec432b17 	vmov	d7, r2, r3
}
    d424:	eeb00b47 	vmov.f64	d0, d7
    d428:	e24bd000 	sub	sp, fp, #0
    d42c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    d430:	e12fff1e 	bx	lr
    d434:	e1a00000 	nop			; (mov r0, r0)
    d438:	00000000 	.word	0x00000000
    d43c:	40dfffc0 	.word	0x40dfffc0
    d440:	51eb851f 	.word	0x51eb851f
    d444:	40239eb8 	.word	0x40239eb8

0000d448 <l_updateSensorState_vd>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static inline unsigned int l_updateSensorState_vd( halAccmag_sensorSelect f_sensor_en )
{
    d448:	e92d4800 	push	{fp, lr}
    d44c:	e28db004 	add	fp, sp, #4
    d450:	e24dd048 	sub	sp, sp, #72	; 0x48
    d454:	e50b0048 	str	r0, [fp, #-72]	; 0x48
	halAccmag_3dDoubleVector	l_accBuffer_st;
	halAccmag_3dDoubleVector	l_magBuffer_st;
	unsigned char				l_readBuffer_rg6ui8[6];
	signed short				l_tempComponent_i16 = 0;
    d458:	e3a03000 	mov	r3, #0
    d45c:	e14b30ba 	strh	r3, [fp, #-10]
	unsigned int				l_successState_bl = M_HAL_ACCMAG_SUCCESS_BL;
    d460:	e3a03000 	mov	r3, #0
    d464:	e50b3008 	str	r3, [fp, #-8]

	//init local data buffers with current values
	l_accBuffer_st = m_halAccmag_sensorState_st.acc;
    d468:	e59f3238 	ldr	r3, [pc, #568]	; d6a8 <l_updateSensorState_vd+0x260>
    d46c:	e24bc024 	sub	ip, fp, #36	; 0x24
    d470:	e1a0e003 	mov	lr, r3
    d474:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    d478:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    d47c:	e89e0003 	ldm	lr, {r0, r1}
    d480:	e88c0003 	stm	ip, {r0, r1}
	l_magBuffer_st = m_halAccmag_sensorState_st.mag;
    d484:	e59f321c 	ldr	r3, [pc, #540]	; d6a8 <l_updateSensorState_vd+0x260>
    d488:	e24bc03c 	sub	ip, fp, #60	; 0x3c
    d48c:	e283e018 	add	lr, r3, #24
    d490:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    d494:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    d498:	e89e0003 	ldm	lr, {r0, r1}
    d49c:	e88c0003 	stm	ip, {r0, r1}
	 *   (Byte 3) Y-Component, LSB
	 *   (Byte 4) Y-Component, MSB
	 *   (Byte 5) Z-Component, LSB
	 *   (Byte 6) Z-Component, MSB
	 */
	if ( (f_sensor_en == SENSOR_ACC_EN) || (f_sensor_en == SENSOR_BOTH_EN) )
    d4a0:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    d4a4:	e3530000 	cmp	r3, #0
    d4a8:	0a000002 	beq	d4b8 <l_updateSensorState_vd+0x70>
    d4ac:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    d4b0:	e3530002 	cmp	r3, #2
    d4b4:	1a000031 	bne	d580 <l_updateSensorState_vd+0x138>
	{
		if ( l_readI2cByteStream_bl(M_HAL_ACCMAG_OUT_X_L_A_UI8,l_readBuffer_rg6ui8, 6) == M_HAL_ACCMAG_SUCCESS_BL )
    d4b8:	e24b3044 	sub	r3, fp, #68	; 0x44
    d4bc:	e3a00028 	mov	r0, #40	; 0x28
    d4c0:	e1a01003 	mov	r1, r3
    d4c4:	e3a02006 	mov	r2, #6
    d4c8:	ebffff11 	bl	d114 <l_readI2cByteStream_bl>
    d4cc:	e1a03000 	mov	r3, r0
    d4d0:	e3530000 	cmp	r3, #0
    d4d4:	1a000027 	bne	d578 <l_updateSensorState_vd+0x130>
		{
			// x-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[0], l_readBuffer_rg6ui8[1]);
    d4d8:	e55b2044 	ldrb	r2, [fp, #-68]	; 0x44
    d4dc:	e55b3043 	ldrb	r3, [fp, #-67]	; 0x43
    d4e0:	e1a00002 	mov	r0, r2
    d4e4:	e1a01003 	mov	r1, r3
    d4e8:	ebffff70 	bl	d2b0 <l_twoCompOf16Bit_ui16>
    d4ec:	e1a03000 	mov	r3, r0
    d4f0:	e14b30ba 	strh	r3, [fp, #-10]
			l_accBuffer_st.x_f64 = l_convertAccRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_ACCSCALE_UI8 );
    d4f4:	e15b30fa 	ldrsh	r3, [fp, #-10]
    d4f8:	e1a00003 	mov	r0, r3
    d4fc:	e3a01008 	mov	r1, #8
    d500:	ebffffaa 	bl	d3b0 <l_convertAccRawToSIUnit_f64>
    d504:	eeb07b40 	vmov.f64	d7, d0
    d508:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc

			// y-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[2], l_readBuffer_rg6ui8[3]);
    d50c:	e55b2042 	ldrb	r2, [fp, #-66]	; 0x42
    d510:	e55b3041 	ldrb	r3, [fp, #-65]	; 0x41
    d514:	e1a00002 	mov	r0, r2
    d518:	e1a01003 	mov	r1, r3
    d51c:	ebffff63 	bl	d2b0 <l_twoCompOf16Bit_ui16>
    d520:	e1a03000 	mov	r3, r0
    d524:	e14b30ba 	strh	r3, [fp, #-10]
			l_accBuffer_st.y_f64 = l_convertAccRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_ACCSCALE_UI8 );
    d528:	e15b30fa 	ldrsh	r3, [fp, #-10]
    d52c:	e1a00003 	mov	r0, r3
    d530:	e3a01008 	mov	r1, #8
    d534:	ebffff9d 	bl	d3b0 <l_convertAccRawToSIUnit_f64>
    d538:	eeb07b40 	vmov.f64	d7, d0
    d53c:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4

			// z-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[4], l_readBuffer_rg6ui8[5]);
    d540:	e55b2040 	ldrb	r2, [fp, #-64]	; 0x40
    d544:	e55b303f 	ldrb	r3, [fp, #-63]	; 0x3f
    d548:	e1a00002 	mov	r0, r2
    d54c:	e1a01003 	mov	r1, r3
    d550:	ebffff56 	bl	d2b0 <l_twoCompOf16Bit_ui16>
    d554:	e1a03000 	mov	r3, r0
    d558:	e14b30ba 	strh	r3, [fp, #-10]
			l_accBuffer_st.z_f64 = l_convertAccRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_ACCSCALE_UI8 );
    d55c:	e15b30fa 	ldrsh	r3, [fp, #-10]
    d560:	e1a00003 	mov	r0, r3
    d564:	e3a01008 	mov	r1, #8
    d568:	ebffff90 	bl	d3b0 <l_convertAccRawToSIUnit_f64>
    d56c:	eeb07b40 	vmov.f64	d7, d0
    d570:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
    d574:	ea000001 	b	d580 <l_updateSensorState_vd+0x138>
		}else{
			l_successState_bl = M_HAL_ACCMAG_FAILED_BL;
    d578:	e3a03001 	mov	r3, #1
    d57c:	e50b3008 	str	r3, [fp, #-8]
	 *   (Byte 3) Y-Component, LSB
	 *   (Byte 4) Y-Component, MSB
	 *   (Byte 5) Z-Component, LSB
	 *   (Byte 6) Z-Component, MSB
	 */
	if ( (f_sensor_en == SENSOR_MAG_EN) || (f_sensor_en == SENSOR_BOTH_EN) )
    d580:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    d584:	e3530001 	cmp	r3, #1
    d588:	0a000002 	beq	d598 <l_updateSensorState_vd+0x150>
    d58c:	e51b3048 	ldr	r3, [fp, #-72]	; 0x48
    d590:	e3530002 	cmp	r3, #2
    d594:	1a000031 	bne	d660 <l_updateSensorState_vd+0x218>
	{
		if ( l_readI2cByteStream_bl(M_HAL_ACCMAG_OUT_X_L_M_UI8,l_readBuffer_rg6ui8, 6) == M_HAL_ACCMAG_SUCCESS_BL )
    d598:	e24b3044 	sub	r3, fp, #68	; 0x44
    d59c:	e3a00008 	mov	r0, #8
    d5a0:	e1a01003 	mov	r1, r3
    d5a4:	e3a02006 	mov	r2, #6
    d5a8:	ebfffed9 	bl	d114 <l_readI2cByteStream_bl>
    d5ac:	e1a03000 	mov	r3, r0
    d5b0:	e3530000 	cmp	r3, #0
    d5b4:	1a000027 	bne	d658 <l_updateSensorState_vd+0x210>
		{
			// x-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[0], l_readBuffer_rg6ui8[1]);
    d5b8:	e55b2044 	ldrb	r2, [fp, #-68]	; 0x44
    d5bc:	e55b3043 	ldrb	r3, [fp, #-67]	; 0x43
    d5c0:	e1a00002 	mov	r0, r2
    d5c4:	e1a01003 	mov	r1, r3
    d5c8:	ebffff38 	bl	d2b0 <l_twoCompOf16Bit_ui16>
    d5cc:	e1a03000 	mov	r3, r0
    d5d0:	e14b30ba 	strh	r3, [fp, #-10]
			l_magBuffer_st.x_f64 = l_convertMagRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_MAGSCALE_UI8 );
    d5d4:	e15b30fa 	ldrsh	r3, [fp, #-10]
    d5d8:	e1a00003 	mov	r0, r3
    d5dc:	e3a01004 	mov	r1, #4
    d5e0:	ebffff4c 	bl	d318 <l_convertMagRawToSIUnit_f64>
    d5e4:	eeb07b40 	vmov.f64	d7, d0
    d5e8:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4

			// y-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[2], l_readBuffer_rg6ui8[3]);
    d5ec:	e55b2042 	ldrb	r2, [fp, #-66]	; 0x42
    d5f0:	e55b3041 	ldrb	r3, [fp, #-65]	; 0x41
    d5f4:	e1a00002 	mov	r0, r2
    d5f8:	e1a01003 	mov	r1, r3
    d5fc:	ebffff2b 	bl	d2b0 <l_twoCompOf16Bit_ui16>
    d600:	e1a03000 	mov	r3, r0
    d604:	e14b30ba 	strh	r3, [fp, #-10]
			l_magBuffer_st.y_f64 = l_convertMagRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_MAGSCALE_UI8 );
    d608:	e15b30fa 	ldrsh	r3, [fp, #-10]
    d60c:	e1a00003 	mov	r0, r3
    d610:	e3a01004 	mov	r1, #4
    d614:	ebffff3f 	bl	d318 <l_convertMagRawToSIUnit_f64>
    d618:	eeb07b40 	vmov.f64	d7, d0
    d61c:	ed0b7b0d 	vstr	d7, [fp, #-52]	; 0xffffffcc

			// z-component
			l_tempComponent_i16 = l_twoCompOf16Bit_ui16(l_readBuffer_rg6ui8[4], l_readBuffer_rg6ui8[5]);
    d620:	e55b2040 	ldrb	r2, [fp, #-64]	; 0x40
    d624:	e55b303f 	ldrb	r3, [fp, #-63]	; 0x3f
    d628:	e1a00002 	mov	r0, r2
    d62c:	e1a01003 	mov	r1, r3
    d630:	ebffff1e 	bl	d2b0 <l_twoCompOf16Bit_ui16>
    d634:	e1a03000 	mov	r3, r0
    d638:	e14b30ba 	strh	r3, [fp, #-10]
			l_magBuffer_st.z_f64 = l_convertMagRawToSIUnit_f64( l_tempComponent_i16, M_HAL_ACCMAG_MAGSCALE_UI8 );
    d63c:	e15b30fa 	ldrsh	r3, [fp, #-10]
    d640:	e1a00003 	mov	r0, r3
    d644:	e3a01004 	mov	r1, #4
    d648:	ebffff32 	bl	d318 <l_convertMagRawToSIUnit_f64>
    d64c:	eeb07b40 	vmov.f64	d7, d0
    d650:	ed0b7b0b 	vstr	d7, [fp, #-44]	; 0xffffffd4
    d654:	ea000001 	b	d660 <l_updateSensorState_vd+0x218>
		}else{
			l_successState_bl = M_HAL_ACCMAG_FAILED_BL;
    d658:	e3a03001 	mov	r3, #1
    d65c:	e50b3008 	str	r3, [fp, #-8]
		}
	}

	// update sensor state storage values
	m_halAccmag_sensorState_st.acc = l_accBuffer_st;
    d660:	e59f3040 	ldr	r3, [pc, #64]	; d6a8 <l_updateSensorState_vd+0x260>
    d664:	e1a0c003 	mov	ip, r3
    d668:	e24be024 	sub	lr, fp, #36	; 0x24
    d66c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    d670:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    d674:	e89e0003 	ldm	lr, {r0, r1}
    d678:	e88c0003 	stm	ip, {r0, r1}
	m_halAccmag_sensorState_st.mag = l_magBuffer_st;
    d67c:	e59f3024 	ldr	r3, [pc, #36]	; d6a8 <l_updateSensorState_vd+0x260>
    d680:	e283c018 	add	ip, r3, #24
    d684:	e24be03c 	sub	lr, fp, #60	; 0x3c
    d688:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    d68c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    d690:	e89e0003 	ldm	lr, {r0, r1}
    d694:	e88c0003 	stm	ip, {r0, r1}

	return l_successState_bl;
    d698:	e51b3008 	ldr	r3, [fp, #-8]
}
    d69c:	e1a00003 	mov	r0, r3
    d6a0:	e24bd004 	sub	sp, fp, #4
    d6a4:	e8bd8800 	pop	{fp, pc}
    d6a8:	0001b750 	.word	0x0001b750

0000d6ac <g_halAccmag_initSensor_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_initSensor_bl(void)
{
    d6ac:	e92d4800 	push	{fp, lr}
    d6b0:	e28db004 	add	fp, sp, #4
    d6b4:	e24dd008 	sub	sp, sp, #8
	unsigned char l_configRegisters_rg8ui8[8];	//buffer for 8 control register bytes

	//Identify sensor
	if ( l_readI2cByte_ui8( M_HAL_ACCMAG_WHO_AM_I_UI8 ) != M_HAL_ACCMAG_WHO_AM_I_PATTERN_UI8 )
    d6b8:	e3a0000f 	mov	r0, #15
    d6bc:	ebfffe6f 	bl	d080 <l_readI2cByte_ui8>
    d6c0:	e1a03000 	mov	r3, r0
    d6c4:	e3530049 	cmp	r3, #73	; 0x49
    d6c8:	0a000001 	beq	d6d4 <g_halAccmag_initSensor_bl+0x28>
	{
		// sensor could not be identified --> abort initialization
		return M_HAL_ACCMAG_FAILED_BL;
    d6cc:	e3a03001 	mov	r3, #1
    d6d0:	ea00001a 	b	d740 <g_halAccmag_initSensor_bl+0x94>

	/*
	 * ACCELEROMETER
	 */
	// CTRL0: no FIFO (default values)
	l_configRegisters_rg8ui8[0] = 0b00000000;
    d6d4:	e3a03000 	mov	r3, #0
    d6d8:	e54b300c 	strb	r3, [fp, #-12]

	// CTRL1: Enable accelerometer, 800Hz sampling
	l_configRegisters_rg8ui8[1] = (		M_HAL_ACCMAG_CTRL1_MASK_AXEN_UI8
    d6dc:	e3e03068 	mvn	r3, #104	; 0x68
    d6e0:	e54b300b 	strb	r3, [fp, #-11]
			| 	M_HAL_ACCMAG_CTRL1_MASK_AYEN_UI8
			|	M_HAL_ACCMAG_CTRL1_MASK_AZEN_UI8
			| 	M_HAL_ACCMAG_CTRL1_MASK_ACC_RATE_800HZ_UI8);

	// CTRL2 register (default values): Set scale +/-8G (accelerometer) & Anti-Alias-Filter ~200Hz
	l_configRegisters_rg8ui8[2] = ( 	M_HAL_ACCMAG_CTRL2_MASK_ACC_SCALE_8G_UI8
    d6e4:	e3a03058 	mov	r3, #88	; 0x58
    d6e8:	e54b300a 	strb	r3, [fp, #-10]
									| 	M_HAL_ACCMAG_CTRL2_MASK_ACC_BANDWIDTH_194HZ_UI8 );

	// CTRL3 register (default values): Disable all interrupts
	l_configRegisters_rg8ui8[3] = 0b00000000;
    d6ec:	e3a03000 	mov	r3, #0
    d6f0:	e54b3009 	strb	r3, [fp, #-9]

	//CTRL4 register (default values)
	l_configRegisters_rg8ui8[4] = 0b00000000;
    d6f4:	e3a03000 	mov	r3, #0
    d6f8:	e54b3008 	strb	r3, [fp, #-8]

	/*
	 * MAGNETOMETER
	 */
	// CTRL5 register: Disable Temp.-sensor, set high-resolution, set 100Hz data rate
	l_configRegisters_rg8ui8[5] = (		M_HAL_ACCMAG_CTRL5_MASK_MAG_RES_HIGH_UI8
    d6fc:	e3a03074 	mov	r3, #116	; 0x74
    d700:	e54b3007 	strb	r3, [fp, #-7]
			| 	M_HAL_ACCMAG_CTRL5_MASK_MAG_RATE_100HZ_UI8 );

	// CTRL6 register: set scale +/-0.4mT
	l_configRegisters_rg8ui8[6] = M_HAL_ACCMAG_CTRL6_MASK_MAG_SCALE_4GAUSS_UI8;
    d704:	e3a03040 	mov	r3, #64	; 0x40
    d708:	e54b3006 	strb	r3, [fp, #-6]

	// CTRL7 register (default values): set continuous-conversion mode (magnetometer)
	l_configRegisters_rg8ui8[7] = M_HAL_ACCMAG_CTRL7_MASK_MAG_SENSMODE_CONTINOUS_UI8;
    d70c:	e3a03000 	mov	r3, #0
    d710:	e54b3005 	strb	r3, [fp, #-5]


	// send config
	if ( l_writeI2cByteStream_bl(M_HAL_ACCMAG_CTRL0_UI8, l_configRegisters_rg8ui8, sizeof(l_configRegisters_rg8ui8) ) == M_HAL_ACCMAG_FAILED_BL )
    d714:	e24b300c 	sub	r3, fp, #12
    d718:	e3a0001f 	mov	r0, #31
    d71c:	e1a01003 	mov	r1, r3
    d720:	e3a02008 	mov	r2, #8
    d724:	ebfffea4 	bl	d1bc <l_writeI2cByteStream_bl>
    d728:	e1a03000 	mov	r3, r0
    d72c:	e3530001 	cmp	r3, #1
    d730:	1a000001 	bne	d73c <g_halAccmag_initSensor_bl+0x90>
	{
		// setting register CTRL1 failed
		return M_HAL_ACCMAG_FAILED_BL;
    d734:	e3a03001 	mov	r3, #1
    d738:	ea000000 	b	d740 <g_halAccmag_initSensor_bl+0x94>
	}

	return M_HAL_ACCMAG_SUCCESS_BL;
    d73c:	e3a03000 	mov	r3, #0
}
    d740:	e1a00003 	mov	r0, r3
    d744:	e24bd004 	sub	sp, fp, #4
    d748:	e8bd8800 	pop	{fp, pc}

0000d74c <g_halAccmag_triggerAccUpdate_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_triggerAccUpdate_bl( void )
{
    d74c:	e92d4800 	push	{fp, lr}
    d750:	e28db004 	add	fp, sp, #4
	return l_updateSensorState_vd(SENSOR_ACC_EN);
    d754:	e3a00000 	mov	r0, #0
    d758:	ebffff3a 	bl	d448 <l_updateSensorState_vd>
    d75c:	e1a03000 	mov	r3, r0
}
    d760:	e1a00003 	mov	r0, r3
    d764:	e8bd8800 	pop	{fp, pc}

0000d768 <g_halAccmag_triggerMagUpdate_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_triggerMagUpdate_bl( void )
{
    d768:	e92d4800 	push	{fp, lr}
    d76c:	e28db004 	add	fp, sp, #4
	return l_updateSensorState_vd(SENSOR_MAG_EN);
    d770:	e3a00001 	mov	r0, #1
    d774:	ebffff33 	bl	d448 <l_updateSensorState_vd>
    d778:	e1a03000 	mov	r3, r0
}
    d77c:	e1a00003 	mov	r0, r3
    d780:	e8bd8800 	pop	{fp, pc}

0000d784 <g_halAccmag_triggerFullUpdate_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halAccmag_triggerFullUpdate_bl( void )
{
    d784:	e92d4800 	push	{fp, lr}
    d788:	e28db004 	add	fp, sp, #4
	return l_updateSensorState_vd(SENSOR_BOTH_EN);
    d78c:	e3a00002 	mov	r0, #2
    d790:	ebffff2c 	bl	d448 <l_updateSensorState_vd>
    d794:	e1a03000 	mov	r3, r0
}
    d798:	e1a00003 	mov	r0, r3
    d79c:	e8bd8800 	pop	{fp, pc}

0000d7a0 <g_halAccmag_getAccVector_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halAccmag_3dDoubleVector g_halAccmag_getAccVector_st( void )
{
    d7a0:	e92d4830 	push	{r4, r5, fp, lr}
    d7a4:	e28db00c 	add	fp, sp, #12
    d7a8:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_halAccmag_sensorState_st.acc;
    d7ac:	e59f3040 	ldr	r3, [pc, #64]	; d7f4 <g_halAccmag_getAccVector_st+0x54>
    d7b0:	e24bc024 	sub	ip, fp, #36	; 0x24
    d7b4:	e1a0e003 	mov	lr, r3
    d7b8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    d7bc:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    d7c0:	e89e0003 	ldm	lr, {r0, r1}
    d7c4:	e88c0003 	stm	ip, {r0, r1}
    d7c8:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    d7cc:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    d7d0:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    d7d4:	ec454b15 	vmov	d5, r4, r5
    d7d8:	ec410b16 	vmov	d6, r0, r1
    d7dc:	ec432b17 	vmov	d7, r2, r3
}
    d7e0:	eeb00b45 	vmov.f64	d0, d5
    d7e4:	eeb01b46 	vmov.f64	d1, d6
    d7e8:	eeb02b47 	vmov.f64	d2, d7
    d7ec:	e24bd00c 	sub	sp, fp, #12
    d7f0:	e8bd8830 	pop	{r4, r5, fp, pc}
    d7f4:	0001b750 	.word	0x0001b750

0000d7f8 <g_halAccmag_getMagVector_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halAccmag_3dDoubleVector g_halAccmag_getMagVector_st( void )
{
    d7f8:	e92d4830 	push	{r4, r5, fp, lr}
    d7fc:	e28db00c 	add	fp, sp, #12
    d800:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_halAccmag_sensorState_st.mag;
    d804:	e59f3040 	ldr	r3, [pc, #64]	; d84c <g_halAccmag_getMagVector_st+0x54>
    d808:	e24bc024 	sub	ip, fp, #36	; 0x24
    d80c:	e283e018 	add	lr, r3, #24
    d810:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    d814:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    d818:	e89e0003 	ldm	lr, {r0, r1}
    d81c:	e88c0003 	stm	ip, {r0, r1}
    d820:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    d824:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    d828:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    d82c:	ec454b15 	vmov	d5, r4, r5
    d830:	ec410b16 	vmov	d6, r0, r1
    d834:	ec432b17 	vmov	d7, r2, r3
}
    d838:	eeb00b45 	vmov.f64	d0, d5
    d83c:	eeb01b46 	vmov.f64	d1, d6
    d840:	eeb02b47 	vmov.f64	d2, d7
    d844:	e24bd00c 	sub	sp, fp, #12
    d848:	e8bd8830 	pop	{r4, r5, fp, pc}
    d84c:	0001b750 	.word	0x0001b750

0000d850 <g_halAccmag_getAccMagContainer_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halAccmag_dataContainer	g_halAccmag_getAccMagContainer_st( void )
{
    d850:	e92d4800 	push	{fp, lr}
    d854:	e28db004 	add	fp, sp, #4
    d858:	e24dd008 	sub	sp, sp, #8
    d85c:	e50b0008 	str	r0, [fp, #-8]
	return m_halAccmag_sensorState_st;
    d860:	e51b2008 	ldr	r2, [fp, #-8]
    d864:	e59f3028 	ldr	r3, [pc, #40]	; d894 <g_halAccmag_getAccMagContainer_st+0x44>
    d868:	e1a0c002 	mov	ip, r2
    d86c:	e1a0e003 	mov	lr, r3
    d870:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    d874:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    d878:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    d87c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    d880:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
    d884:	e88c000f 	stm	ip, {r0, r1, r2, r3}
}
    d888:	e51b0008 	ldr	r0, [fp, #-8]
    d88c:	e24bd004 	sub	sp, fp, #4
    d890:	e8bd8800 	pop	{fp, pc}
    d894:	0001b750 	.word	0x0001b750

0000d898 <g_halBaro_initBaro_i32>:
 * 2015/05/19 juscgs00:
 * - removed unused local variable 'l_ReadBuffer_ui8' (compiler warning)
 * \endinternal
 ********************************************************************** */
int g_halBaro_initBaro_i32(void)
{
    d898:	e92d4800 	push	{fp, lr}
    d89c:	e28db004 	add	fp, sp, #4
	static unsigned char l_WriteBuffer_ui8[3];

	//RES_CONF(0x10)
	l_WriteBuffer_ui8[0]=M_HAL_BARO_SINGLE_FLAG_UI8 | M_HAL_BARO_RES_CONF_UI8;
    d8a0:	e59f3090 	ldr	r3, [pc, #144]	; d938 <g_halBaro_initBaro_i32+0xa0>
    d8a4:	e3a02010 	mov	r2, #16
    d8a8:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]= M_HAL_BARO_TEMP_RES_CONF_128_UI8 | M_HAL_BARO_PRES_RES_CONF_512_UI8;
    d8ac:	e59f3084 	ldr	r3, [pc, #132]	; d938 <g_halBaro_initBaro_i32+0xa0>
    d8b0:	e3a0207a 	mov	r2, #122	; 0x7a
    d8b4:	e5c32001 	strb	r2, [r3, #1]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
    d8b8:	e3a0005c 	mov	r0, #92	; 0x5c
    d8bc:	e59f1074 	ldr	r1, [pc, #116]	; d938 <g_halBaro_initBaro_i32+0xa0>
    d8c0:	e3a02002 	mov	r2, #2
    d8c4:	eb0003a3 	bl	e758 <g_lldI2c_WriteI2c_bl>
    d8c8:	e1a03000 	mov	r3, r0
    d8cc:	e3530000 	cmp	r3, #0
    d8d0:	0a000001 	beq	d8dc <g_halBaro_initBaro_i32+0x44>
	{return -1;}
    d8d4:	e3e03000 	mvn	r3, #0
    d8d8:	ea000014 	b	d930 <g_halBaro_initBaro_i32+0x98>

	usleep(100000);
    d8dc:	e59f0058 	ldr	r0, [pc, #88]	; d93c <g_halBaro_initBaro_i32+0xa4>
    d8e0:	ebffecc0 	bl	8be8 <_init+0xd4>

	//CTRL_REG1(0x20) = 0b11000100		setting Speed of Pressure to 25Hz and Temperature to 1Hz
										//REMARK: setting both Sensors to the same value did not work!!!
	//CTRL_REG2(0x21) = 0b10000000
	l_WriteBuffer_ui8[0]=M_HAL_BARO_MULTIPLE_FLAG_UI8 | M_HAL_BARO_CTRL_REG1_UI8;
    d8e4:	e59f304c 	ldr	r3, [pc, #76]	; d938 <g_halBaro_initBaro_i32+0xa0>
    d8e8:	e3e0205f 	mvn	r2, #95	; 0x5f
    d8ec:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]=M_HAL_BARO_CTRL_REG1_PD_UI8|M_HAL_BARO_CTRL_REG1_DATARATE_P25HZ_T1HZ_UI8;
    d8f0:	e59f3040 	ldr	r3, [pc, #64]	; d938 <g_halBaro_initBaro_i32+0xa0>
    d8f4:	e3e0203f 	mvn	r2, #63	; 0x3f
    d8f8:	e5c32001 	strb	r2, [r3, #1]
	l_WriteBuffer_ui8[2]=M_HAL_BARO_CTRL_REG2_BOOT_UI8;
    d8fc:	e59f3034 	ldr	r3, [pc, #52]	; d938 <g_halBaro_initBaro_i32+0xa0>
    d900:	e3e0207f 	mvn	r2, #127	; 0x7f
    d904:	e5c32002 	strb	r2, [r3, #2]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
    d908:	e3a0005c 	mov	r0, #92	; 0x5c
    d90c:	e59f1024 	ldr	r1, [pc, #36]	; d938 <g_halBaro_initBaro_i32+0xa0>
    d910:	e3a02003 	mov	r2, #3
    d914:	eb00038f 	bl	e758 <g_lldI2c_WriteI2c_bl>
    d918:	e1a03000 	mov	r3, r0
    d91c:	e3530000 	cmp	r3, #0
    d920:	0a000001 	beq	d92c <g_halBaro_initBaro_i32+0x94>
	{return -1;}
    d924:	e3e03000 	mvn	r3, #0
    d928:	ea000000 	b	d930 <g_halBaro_initBaro_i32+0x98>

	return 0;
    d92c:	e3a03000 	mov	r3, #0
}
    d930:	e1a00003 	mov	r0, r3
    d934:	e8bd8800 	pop	{fp, pc}
    d938:	0001b790 	.word	0x0001b790
    d93c:	000186a0 	.word	0x000186a0

0000d940 <g_halBaro_getPressure_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halBaro_getPressure_f64(void)
{
    d940:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    d944:	e28db000 	add	fp, sp, #0
	return m_pressure_f64;
    d948:	e59f3014 	ldr	r3, [pc, #20]	; d964 <g_halBaro_getPressure_f64+0x24>
    d94c:	e1c320d0 	ldrd	r2, [r3]
    d950:	ec432b17 	vmov	d7, r2, r3
}
    d954:	eeb00b47 	vmov.f64	d0, d7
    d958:	e24bd000 	sub	sp, fp, #0
    d95c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    d960:	e12fff1e 	bx	lr
    d964:	0001b788 	.word	0x0001b788

0000d968 <g_halBaro_getTemperature_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halBaro_getTemperature_f64(void)
{
    d968:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    d96c:	e28db000 	add	fp, sp, #0
	return m_temperature_f64;
    d970:	e59f3014 	ldr	r3, [pc, #20]	; d98c <g_halBaro_getTemperature_f64+0x24>
    d974:	e1c320d0 	ldrd	r2, [r3]
    d978:	ec432b17 	vmov	d7, r2, r3
}
    d97c:	eeb00b47 	vmov.f64	d0, d7
    d980:	e24bd000 	sub	sp, fp, #0
    d984:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    d988:	e12fff1e 	bx	lr
    d98c:	0001b780 	.word	0x0001b780

0000d990 <g_halBaro_readPressureFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halBaro_readPressureFromI2C_i32(void)
{
    d990:	e92d4800 	push	{fp, lr}
    d994:	e28db004 	add	fp, sp, #4
    d998:	e24dd010 	sub	sp, sp, #16
	unsigned char l_ReadBuffer_ui8[3]={0,0,0};
    d99c:	e3a03000 	mov	r3, #0
    d9a0:	e54b300c 	strb	r3, [fp, #-12]
    d9a4:	e3a03000 	mov	r3, #0
    d9a8:	e54b300b 	strb	r3, [fp, #-11]
    d9ac:	e3a03000 	mov	r3, #0
    d9b0:	e54b300a 	strb	r3, [fp, #-10]
	unsigned char l_rotatedReadBuffer_ui8[3]={0,0,0};
    d9b4:	e3a03000 	mov	r3, #0
    d9b8:	e54b3010 	strb	r3, [fp, #-16]
    d9bc:	e3a03000 	mov	r3, #0
    d9c0:	e54b300f 	strb	r3, [fp, #-15]
    d9c4:	e3a03000 	mov	r3, #0
    d9c8:	e54b300e 	strb	r3, [fp, #-14]
	unsigned char l_WriteBuffer_ui8[3];
	int l_countVariable_i32=0;
    d9cc:	e3a03000 	mov	r3, #0
    d9d0:	e50b3008 	str	r3, [fp, #-8]

	//maybe check STATUS_REG if new value is available

	//set SUB Address to Pressure register PRESS_OUT_XL and activate multiple read
	l_WriteBuffer_ui8[0]=M_HAL_BARO_MULTIPLE_FLAG_UI8 | M_HAL_BARO_PRESS_OUT_XL_UI8;
    d9d4:	e3e03057 	mvn	r3, #87	; 0x57
    d9d8:	e54b3014 	strb	r3, [fp, #-20]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    d9dc:	e24b3014 	sub	r3, fp, #20
    d9e0:	e3a0005c 	mov	r0, #92	; 0x5c
    d9e4:	e1a01003 	mov	r1, r3
    d9e8:	e3a02001 	mov	r2, #1
    d9ec:	eb000359 	bl	e758 <g_lldI2c_WriteI2c_bl>
    d9f0:	e1a03000 	mov	r3, r0
    d9f4:	e3530000 	cmp	r3, #0
    d9f8:	0a000001 	beq	da04 <g_halBaro_readPressureFromI2C_i32+0x74>
	{return -1;}
    d9fc:	e3e03000 	mvn	r3, #0
    da00:	ea00002f 	b	dac4 <g_halBaro_readPressureFromI2C_i32+0x134>


	//Read from PRESS_OUT_XL(0x28),PRESS_OUT_L(0x29),PRESS_OUT_H(0x2A)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
    da04:	e24b300c 	sub	r3, fp, #12
    da08:	e3a0005c 	mov	r0, #92	; 0x5c
    da0c:	e1a01003 	mov	r1, r3
    da10:	e3a02003 	mov	r2, #3
    da14:	eb000387 	bl	e838 <g_lldI2c_ReadI2c_bl>
    da18:	e1a03000 	mov	r3, r0
    da1c:	e3530000 	cmp	r3, #0
    da20:	0a000001 	beq	da2c <g_halBaro_readPressureFromI2C_i32+0x9c>
	{return -1;}
    da24:	e3e03000 	mvn	r3, #0
    da28:	ea000025 	b	dac4 <g_halBaro_readPressureFromI2C_i32+0x134>
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<3;l_countVariable_i32++)
    da2c:	e3a03000 	mov	r3, #0
    da30:	e50b3008 	str	r3, [fp, #-8]
    da34:	ea00000f 	b	da78 <g_halBaro_readPressureFromI2C_i32+0xe8>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[2-l_countVariable_i32];
    da38:	e51b3008 	ldr	r3, [fp, #-8]
    da3c:	e2632002 	rsb	r2, r3, #2
    da40:	e3e03007 	mvn	r3, #7
    da44:	e24b0004 	sub	r0, fp, #4
    da48:	e0802002 	add	r2, r0, r2
    da4c:	e0823003 	add	r3, r2, r3
    da50:	e5d32000 	ldrb	r2, [r3]
    da54:	e3e0300b 	mvn	r3, #11
    da58:	e51b1008 	ldr	r1, [fp, #-8]
    da5c:	e24b0004 	sub	r0, fp, #4
    da60:	e0801001 	add	r1, r0, r1
    da64:	e0813003 	add	r3, r1, r3
    da68:	e5c32000 	strb	r2, [r3]
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
	{return -1;}
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<3;l_countVariable_i32++)
    da6c:	e51b3008 	ldr	r3, [fp, #-8]
    da70:	e2833001 	add	r3, r3, #1
    da74:	e50b3008 	str	r3, [fp, #-8]
    da78:	e51b3008 	ldr	r3, [fp, #-8]
    da7c:	e3530002 	cmp	r3, #2
    da80:	daffffec 	ble	da38 <g_halBaro_readPressureFromI2C_i32+0xa8>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[2-l_countVariable_i32];
		}

		m_pressure_f64=(double)g_halLib_twoComplement2Int(l_rotatedReadBuffer_ui8,3);
    da84:	e24b3010 	sub	r3, fp, #16
    da88:	e1a00003 	mov	r0, r3
    da8c:	e3a01003 	mov	r1, #3
    da90:	eb000184 	bl	e0a8 <g_halLib_twoComplement2Int>
    da94:	e1a03000 	mov	r3, r0
    da98:	ee063a90 	vmov	s13, r3
    da9c:	eeb87be6 	vcvt.f64.s32	d7, s13
    daa0:	e59f3030 	ldr	r3, [pc, #48]	; dad8 <g_halBaro_readPressureFromI2C_i32+0x148>
    daa4:	ed837b00 	vstr	d7, [r3]
		m_pressure_f64=m_pressure_f64/4096;
    daa8:	e59f3028 	ldr	r3, [pc, #40]	; dad8 <g_halBaro_readPressureFromI2C_i32+0x148>
    daac:	ed936b00 	vldr	d6, [r3]
    dab0:	ed9f7b06 	vldr	d7, [pc, #24]	; dad0 <g_halBaro_readPressureFromI2C_i32+0x140>
    dab4:	ee867b07 	vdiv.f64	d7, d6, d7
    dab8:	e59f3018 	ldr	r3, [pc, #24]	; dad8 <g_halBaro_readPressureFromI2C_i32+0x148>
    dabc:	ed837b00 	vstr	d7, [r3]
	}

	return 0;
    dac0:	e3a03000 	mov	r3, #0
}
    dac4:	e1a00003 	mov	r0, r3
    dac8:	e24bd004 	sub	sp, fp, #4
    dacc:	e8bd8800 	pop	{fp, pc}
    dad0:	00000000 	.word	0x00000000
    dad4:	40b00000 	.word	0x40b00000
    dad8:	0001b788 	.word	0x0001b788

0000dadc <g_halBaro_readTemperatureFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halBaro_readTemperatureFromI2C_i32(void)
{
    dadc:	e92d4800 	push	{fp, lr}
    dae0:	e28db004 	add	fp, sp, #4
    dae4:	e24dd010 	sub	sp, sp, #16
	unsigned char l_ReadBuffer_ui8[2]={0,0};
    dae8:	e3a03000 	mov	r3, #0
    daec:	e54b300c 	strb	r3, [fp, #-12]
    daf0:	e3a03000 	mov	r3, #0
    daf4:	e54b300b 	strb	r3, [fp, #-11]
	unsigned char l_rotatedReadBuffer_ui8[2]={0,0};
    daf8:	e3a03000 	mov	r3, #0
    dafc:	e54b3010 	strb	r3, [fp, #-16]
    db00:	e3a03000 	mov	r3, #0
    db04:	e54b300f 	strb	r3, [fp, #-15]
	unsigned char l_WriteBuffer_ui8[3];
	int l_countVariable_i32=0;
    db08:	e3a03000 	mov	r3, #0
    db0c:	e50b3008 	str	r3, [fp, #-8]

	//maybe check STATUS_REG if new value is available

	//set SUB Address to Temperature register PRESS_OUT_XL and activate multiple read
	l_WriteBuffer_ui8[0]=M_HAL_BARO_MULTIPLE_FLAG_UI8 | M_HAL_BARO_TEMP_OUT_L_UI8;
    db10:	e3e03054 	mvn	r3, #84	; 0x54
    db14:	e54b3014 	strb	r3, [fp, #-20]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    db18:	e24b3014 	sub	r3, fp, #20
    db1c:	e3a0005c 	mov	r0, #92	; 0x5c
    db20:	e1a01003 	mov	r1, r3
    db24:	e3a02001 	mov	r2, #1
    db28:	eb00030a 	bl	e758 <g_lldI2c_WriteI2c_bl>
    db2c:	e1a03000 	mov	r3, r0
    db30:	e3530000 	cmp	r3, #0
    db34:	0a000001 	beq	db40 <g_halBaro_readTemperatureFromI2C_i32+0x64>
	{return -1;}
    db38:	e3e03000 	mvn	r3, #0
    db3c:	ea000031 	b	dc08 <g_halBaro_readTemperatureFromI2C_i32+0x12c>


	//Read from TEMP_OUT_L (2Bh), TEMP_OUT_H (2Ch)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
    db40:	e24b300c 	sub	r3, fp, #12
    db44:	e3a0005c 	mov	r0, #92	; 0x5c
    db48:	e1a01003 	mov	r1, r3
    db4c:	e3a02002 	mov	r2, #2
    db50:	eb000338 	bl	e838 <g_lldI2c_ReadI2c_bl>
    db54:	e1a03000 	mov	r3, r0
    db58:	e3530000 	cmp	r3, #0
    db5c:	0a000001 	beq	db68 <g_halBaro_readTemperatureFromI2C_i32+0x8c>
	{return -1;}
    db60:	e3e03000 	mvn	r3, #0
    db64:	ea000027 	b	dc08 <g_halBaro_readTemperatureFromI2C_i32+0x12c>
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    db68:	e3a03000 	mov	r3, #0
    db6c:	e50b3008 	str	r3, [fp, #-8]
    db70:	ea00000f 	b	dbb4 <g_halBaro_readTemperatureFromI2C_i32+0xd8>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
    db74:	e51b3008 	ldr	r3, [fp, #-8]
    db78:	e2632001 	rsb	r2, r3, #1
    db7c:	e3e03007 	mvn	r3, #7
    db80:	e24b0004 	sub	r0, fp, #4
    db84:	e0802002 	add	r2, r0, r2
    db88:	e0823003 	add	r3, r2, r3
    db8c:	e5d32000 	ldrb	r2, [r3]
    db90:	e3e0300b 	mvn	r3, #11
    db94:	e51b1008 	ldr	r1, [fp, #-8]
    db98:	e24b0004 	sub	r0, fp, #4
    db9c:	e0801001 	add	r1, r0, r1
    dba0:	e0813003 	add	r3, r1, r3
    dba4:	e5c32000 	strb	r2, [r3]
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_BARO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
	{return -1;}
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    dba8:	e51b3008 	ldr	r3, [fp, #-8]
    dbac:	e2833001 	add	r3, r3, #1
    dbb0:	e50b3008 	str	r3, [fp, #-8]
    dbb4:	e51b3008 	ldr	r3, [fp, #-8]
    dbb8:	e3530001 	cmp	r3, #1
    dbbc:	daffffec 	ble	db74 <g_halBaro_readTemperatureFromI2C_i32+0x98>
		{
			l_rotatedReadBuffer_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
		}

		m_temperature_f64=(double)g_halLib_twoComplement2Int(l_rotatedReadBuffer_ui8,2);
    dbc0:	e24b3010 	sub	r3, fp, #16
    dbc4:	e1a00003 	mov	r0, r3
    dbc8:	e3a01002 	mov	r1, #2
    dbcc:	eb000135 	bl	e0a8 <g_halLib_twoComplement2Int>
    dbd0:	e1a03000 	mov	r3, r0
    dbd4:	ee063a90 	vmov	s13, r3
    dbd8:	eeb87be6 	vcvt.f64.s32	d7, s13
    dbdc:	e59f3044 	ldr	r3, [pc, #68]	; dc28 <g_halBaro_readTemperatureFromI2C_i32+0x14c>
    dbe0:	ed837b00 	vstr	d7, [r3]
		m_temperature_f64=42.5+m_temperature_f64/480;
    dbe4:	e59f303c 	ldr	r3, [pc, #60]	; dc28 <g_halBaro_readTemperatureFromI2C_i32+0x14c>
    dbe8:	ed936b00 	vldr	d6, [r3]
    dbec:	ed9f7b09 	vldr	d7, [pc, #36]	; dc18 <g_halBaro_readTemperatureFromI2C_i32+0x13c>
    dbf0:	ee866b07 	vdiv.f64	d6, d6, d7
    dbf4:	ed9f7b09 	vldr	d7, [pc, #36]	; dc20 <g_halBaro_readTemperatureFromI2C_i32+0x144>
    dbf8:	ee367b07 	vadd.f64	d7, d6, d7
    dbfc:	e59f3024 	ldr	r3, [pc, #36]	; dc28 <g_halBaro_readTemperatureFromI2C_i32+0x14c>
    dc00:	ed837b00 	vstr	d7, [r3]
	}

	return 0;
    dc04:	e3a03000 	mov	r3, #0
}
    dc08:	e1a00003 	mov	r0, r3
    dc0c:	e24bd004 	sub	sp, fp, #4
    dc10:	e8bd8800 	pop	{fp, pc}
    dc14:	e1a00000 	nop			; (mov r0, r0)
    dc18:	00000000 	.word	0x00000000
    dc1c:	407e0000 	.word	0x407e0000
    dc20:	00000000 	.word	0x00000000
    dc24:	40454000 	.word	0x40454000
    dc28:	0001b780 	.word	0x0001b780
    dc2c:	e1a00000 	nop			; (mov r0, r0)

0000dc30 <g_halGyro_initGyro_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGyro_initGyro_i32(void)
{
    dc30:	e92d4800 	push	{fp, lr}
    dc34:	e28db004 	add	fp, sp, #4

	//Bypass mode -> maybe Dynamic Stream if enough bandwidth on I2C is left

	//CTRL1 (20h)= 0b11101111 ODR=800Hz Cut-Off frequency=not used
	//CTRL2 (21h)= 0b00100000 HPF=normal mode; Cut-Off frequency=56Hz
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_MULTIPLE_READ_FLAG_UI8 | M_HAL_GYRO_CTRL1_UI8;
    dc38:	e59f3090 	ldr	r3, [pc, #144]	; dcd0 <g_halGyro_initGyro_i32+0xa0>
    dc3c:	e3e0205f 	mvn	r2, #95	; 0x5f
    dc40:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]=M_HAL_GYRO_CTRL1_DR0_DR1_UI8 | M_HAL_GYRO_CTRL1_BW1_UI8 | M_HAL_GYRO_CTRL1_NORMAL_UI8;
    dc44:	e59f3084 	ldr	r3, [pc, #132]	; dcd0 <g_halGyro_initGyro_i32+0xa0>
    dc48:	e3e02010 	mvn	r2, #16
    dc4c:	e5c32001 	strb	r2, [r3, #1]
	l_WriteBuffer_ui8[2]=M_HAL_GYRO_CTRL2_HPF_NORMAL_MODE_UI8;
    dc50:	e59f3078 	ldr	r3, [pc, #120]	; dcd0 <g_halGyro_initGyro_i32+0xa0>
    dc54:	e3a02020 	mov	r2, #32
    dc58:	e5c32002 	strb	r2, [r3, #2]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_THREE_UI8)!=0)
    dc5c:	e3a0006a 	mov	r0, #106	; 0x6a
    dc60:	e59f1068 	ldr	r1, [pc, #104]	; dcd0 <g_halGyro_initGyro_i32+0xa0>
    dc64:	e3a02003 	mov	r2, #3
    dc68:	eb0002ba 	bl	e758 <g_lldI2c_WriteI2c_bl>
    dc6c:	e1a03000 	mov	r3, r0
    dc70:	e3530000 	cmp	r3, #0
    dc74:	0a000001 	beq	dc80 <g_halGyro_initGyro_i32+0x50>
	{return -1;}
    dc78:	e3e03000 	mvn	r3, #0
    dc7c:	ea000011 	b	dcc8 <g_halGyro_initGyro_i32+0x98>

	usleep(100000);
    dc80:	e59f004c 	ldr	r0, [pc, #76]	; dcd4 <g_halGyro_initGyro_i32+0xa4>
    dc84:	ebffebd7 	bl	8be8 <_init+0xd4>

	//CTRL4 (23h)= 0b00010000
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_SINGLE_READ_FLAG_UI8 | M_HAL_GYRO_CTRL4_UI8;
    dc88:	e59f3040 	ldr	r3, [pc, #64]	; dcd0 <g_halGyro_initGyro_i32+0xa0>
    dc8c:	e3a02023 	mov	r2, #35	; 0x23
    dc90:	e5c32000 	strb	r2, [r3]
	l_WriteBuffer_ui8[1]=M_HAL_GYRO_CTRL4_SCALE_500DPS_UI8;
    dc94:	e59f3034 	ldr	r3, [pc, #52]	; dcd0 <g_halGyro_initGyro_i32+0xa0>
    dc98:	e3a02010 	mov	r2, #16
    dc9c:	e5c32001 	strb	r2, [r3, #1]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_TWO_UI8)!=0)
    dca0:	e3a0006a 	mov	r0, #106	; 0x6a
    dca4:	e59f1024 	ldr	r1, [pc, #36]	; dcd0 <g_halGyro_initGyro_i32+0xa0>
    dca8:	e3a02002 	mov	r2, #2
    dcac:	eb0002a9 	bl	e758 <g_lldI2c_WriteI2c_bl>
    dcb0:	e1a03000 	mov	r3, r0
    dcb4:	e3530000 	cmp	r3, #0
    dcb8:	0a000001 	beq	dcc4 <g_halGyro_initGyro_i32+0x94>
	{return -1;}
    dcbc:	e3e03000 	mvn	r3, #0
    dcc0:	ea000000 	b	dcc8 <g_halGyro_initGyro_i32+0x98>

	return 0;
    dcc4:	e3a03000 	mov	r3, #0
}
    dcc8:	e1a00003 	mov	r0, r3
    dccc:	e8bd8800 	pop	{fp, pc}
    dcd0:	0001b7b8 	.word	0x0001b7b8
    dcd4:	000186a0 	.word	0x000186a0

0000dcd8 <g_halGyro_getGyroscope_st>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
sigOri_orientationAngles g_halGyro_getGyroscope_st(void)
{
    dcd8:	e92d4830 	push	{r4, r5, fp, lr}
    dcdc:	e28db00c 	add	fp, sp, #12
    dce0:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_rotation_str;
    dce4:	e59f3040 	ldr	r3, [pc, #64]	; dd2c <g_halGyro_getGyroscope_st+0x54>
    dce8:	e24bc024 	sub	ip, fp, #36	; 0x24
    dcec:	e1a0e003 	mov	lr, r3
    dcf0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    dcf4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    dcf8:	e89e0003 	ldm	lr, {r0, r1}
    dcfc:	e88c0003 	stm	ip, {r0, r1}
    dd00:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
    dd04:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
    dd08:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    dd0c:	ec454b15 	vmov	d5, r4, r5
    dd10:	ec410b16 	vmov	d6, r0, r1
    dd14:	ec432b17 	vmov	d7, r2, r3
}
    dd18:	eeb00b45 	vmov.f64	d0, d5
    dd1c:	eeb01b46 	vmov.f64	d1, d6
    dd20:	eeb02b47 	vmov.f64	d2, d7
    dd24:	e24bd00c 	sub	sp, fp, #12
    dd28:	e8bd8830 	pop	{r4, r5, fp, pc}
    dd2c:	0001b798 	.word	0x0001b798

0000dd30 <g_halGyro_getTemperature_f64>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
double g_halGyro_getTemperature_f64(void)
{
    dd30:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    dd34:	e28db000 	add	fp, sp, #0
	return m_halGyro_temperature_f64;
    dd38:	e59f3014 	ldr	r3, [pc, #20]	; dd54 <g_halGyro_getTemperature_f64+0x24>
    dd3c:	e1c320d0 	ldrd	r2, [r3]
    dd40:	ec432b17 	vmov	d7, r2, r3
}
    dd44:	eeb00b47 	vmov.f64	d0, d7
    dd48:	e24bd000 	sub	sp, fp, #0
    dd4c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    dd50:	e12fff1e 	bx	lr
    dd54:	0001b7b0 	.word	0x0001b7b0

0000dd58 <g_halGyro_readGyroscopeFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGyro_readGyroscopeFromI2C_i32(void)
{
    dd58:	e92d4800 	push	{fp, lr}
    dd5c:	e28db004 	add	fp, sp, #4
    dd60:	e24dd040 	sub	sp, sp, #64	; 0x40
	unsigned char l_ReadBuffer_ui8[6]={0,0,0,0,0,0};
    dd64:	e3a03000 	mov	r3, #0
    dd68:	e54b3034 	strb	r3, [fp, #-52]	; 0x34
    dd6c:	e3a03000 	mov	r3, #0
    dd70:	e54b3033 	strb	r3, [fp, #-51]	; 0x33
    dd74:	e3a03000 	mov	r3, #0
    dd78:	e54b3032 	strb	r3, [fp, #-50]	; 0x32
    dd7c:	e3a03000 	mov	r3, #0
    dd80:	e54b3031 	strb	r3, [fp, #-49]	; 0x31
    dd84:	e3a03000 	mov	r3, #0
    dd88:	e54b3030 	strb	r3, [fp, #-48]	; 0x30
    dd8c:	e3a03000 	mov	r3, #0
    dd90:	e54b302f 	strb	r3, [fp, #-47]	; 0x2f
	unsigned char l_xRegister_ui8[2]={0,0};
    dd94:	e3a03000 	mov	r3, #0
    dd98:	e54b3038 	strb	r3, [fp, #-56]	; 0x38
    dd9c:	e3a03000 	mov	r3, #0
    dda0:	e54b3037 	strb	r3, [fp, #-55]	; 0x37
	unsigned char l_yRegister_ui8[2]={0,0};
    dda4:	e3a03000 	mov	r3, #0
    dda8:	e54b303c 	strb	r3, [fp, #-60]	; 0x3c
    ddac:	e3a03000 	mov	r3, #0
    ddb0:	e54b303b 	strb	r3, [fp, #-59]	; 0x3b
	unsigned char l_zRegister_ui8[2]={0,0};
    ddb4:	e3a03000 	mov	r3, #0
    ddb8:	e54b3040 	strb	r3, [fp, #-64]	; 0x40
    ddbc:	e3a03000 	mov	r3, #0
    ddc0:	e54b303f 	strb	r3, [fp, #-63]	; 0x3f
	double l_xValue_ui8=0;
    ddc4:	e3a02000 	mov	r2, #0
    ddc8:	e3a03000 	mov	r3, #0
    ddcc:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	double l_yValue_ui8=0;
    ddd0:	e3a02000 	mov	r2, #0
    ddd4:	e3a03000 	mov	r3, #0
    ddd8:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	double l_zValue_ui8=0;
    dddc:	e3a02000 	mov	r2, #0
    dde0:	e3a03000 	mov	r3, #0
    dde4:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	unsigned char l_WriteBuffer_ui8[3];
	int l_countVariable_i32=0;
    dde8:	e3a03000 	mov	r3, #0
    ddec:	e50b3008 	str	r3, [fp, #-8]
	//500dps in init set
	double l_factorRaw2Out_f64=(double)500.0/32767.0;
    ddf0:	e59f21e0 	ldr	r2, [pc, #480]	; dfd8 <g_halGyro_readGyroscopeFromI2C_i32+0x280>
    ddf4:	e59f31e0 	ldr	r3, [pc, #480]	; dfdc <g_halGyro_readGyroscopeFromI2C_i32+0x284>
    ddf8:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4


	//maybe check if new value is available; STATUS (27h) -->ZYXDA

	//set SUB Address to X register OUT_X_L and activate multiple read
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_MULTIPLE_READ_FLAG_UI8 | M_HAL_GYRO_OUT_X_L_UI8;
    ddfc:	e3e03057 	mvn	r3, #87	; 0x57
    de00:	e54b3044 	strb	r3, [fp, #-68]	; 0x44
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    de04:	e24b3044 	sub	r3, fp, #68	; 0x44
    de08:	e3a0006a 	mov	r0, #106	; 0x6a
    de0c:	e1a01003 	mov	r1, r3
    de10:	e3a02001 	mov	r2, #1
    de14:	eb00024f 	bl	e758 <g_lldI2c_WriteI2c_bl>
    de18:	e1a03000 	mov	r3, r0
    de1c:	e3530000 	cmp	r3, #0
    de20:	0a000001 	beq	de2c <g_halGyro_readGyroscopeFromI2C_i32+0xd4>
	{return -1;}
    de24:	e3e03000 	mvn	r3, #0
    de28:	ea000067 	b	dfcc <g_halGyro_readGyroscopeFromI2C_i32+0x274>

	//Read from OUT_X_L (28h), OUT_X_H (29h), OUT_Y_L (2Ah), OUT_Y_H (2Bh), OUT_Z_L (2Ch), OUT_Z_H (2Dh)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_SIX_UI8)!=0)
    de2c:	e24b3034 	sub	r3, fp, #52	; 0x34
    de30:	e3a0006a 	mov	r0, #106	; 0x6a
    de34:	e1a01003 	mov	r1, r3
    de38:	e3a02006 	mov	r2, #6
    de3c:	eb00027d 	bl	e838 <g_lldI2c_ReadI2c_bl>
    de40:	e1a03000 	mov	r3, r0
    de44:	e3530000 	cmp	r3, #0
    de48:	0a000001 	beq	de54 <g_halGyro_readGyroscopeFromI2C_i32+0xfc>
	{return -1;}
    de4c:	e3e03000 	mvn	r3, #0
    de50:	ea00005d 	b	dfcc <g_halGyro_readGyroscopeFromI2C_i32+0x274>
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    de54:	e3a03000 	mov	r3, #0
    de58:	e50b3008 	str	r3, [fp, #-8]
    de5c:	ea000029 	b	df08 <g_halGyro_readGyroscopeFromI2C_i32+0x1b0>
		{
			l_xRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
    de60:	e51b3008 	ldr	r3, [fp, #-8]
    de64:	e2632001 	rsb	r2, r3, #1
    de68:	e3e0302f 	mvn	r3, #47	; 0x2f
    de6c:	e24b0004 	sub	r0, fp, #4
    de70:	e0802002 	add	r2, r0, r2
    de74:	e0823003 	add	r3, r2, r3
    de78:	e5d32000 	ldrb	r2, [r3]
    de7c:	e3e03033 	mvn	r3, #51	; 0x33
    de80:	e51b1008 	ldr	r1, [fp, #-8]
    de84:	e24b0004 	sub	r0, fp, #4
    de88:	e0801001 	add	r1, r0, r1
    de8c:	e0813003 	add	r3, r1, r3
    de90:	e5c32000 	strb	r2, [r3]
			l_yRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[3-l_countVariable_i32];
    de94:	e51b3008 	ldr	r3, [fp, #-8]
    de98:	e2632003 	rsb	r2, r3, #3
    de9c:	e3e0302f 	mvn	r3, #47	; 0x2f
    dea0:	e24b1004 	sub	r1, fp, #4
    dea4:	e0812002 	add	r2, r1, r2
    dea8:	e0823003 	add	r3, r2, r3
    deac:	e5d32000 	ldrb	r2, [r3]
    deb0:	e3e03037 	mvn	r3, #55	; 0x37
    deb4:	e51b1008 	ldr	r1, [fp, #-8]
    deb8:	e24b0004 	sub	r0, fp, #4
    debc:	e0801001 	add	r1, r0, r1
    dec0:	e0813003 	add	r3, r1, r3
    dec4:	e5c32000 	strb	r2, [r3]
			l_zRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[5-l_countVariable_i32];
    dec8:	e51b3008 	ldr	r3, [fp, #-8]
    decc:	e2632005 	rsb	r2, r3, #5
    ded0:	e3e0302f 	mvn	r3, #47	; 0x2f
    ded4:	e24b1004 	sub	r1, fp, #4
    ded8:	e0812002 	add	r2, r1, r2
    dedc:	e0823003 	add	r3, r2, r3
    dee0:	e5d32000 	ldrb	r2, [r3]
    dee4:	e3e0303b 	mvn	r3, #59	; 0x3b
    dee8:	e51b1008 	ldr	r1, [fp, #-8]
    deec:	e24b0004 	sub	r0, fp, #4
    def0:	e0801001 	add	r1, r0, r1
    def4:	e0813003 	add	r3, r1, r3
    def8:	e5c32000 	strb	r2, [r3]
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_SIX_UI8)!=0)
	{return -1;}
	else
	{
		//move MSB to position 0
		for(l_countVariable_i32=0;l_countVariable_i32<2;l_countVariable_i32++)
    defc:	e51b3008 	ldr	r3, [fp, #-8]
    df00:	e2833001 	add	r3, r3, #1
    df04:	e50b3008 	str	r3, [fp, #-8]
    df08:	e51b3008 	ldr	r3, [fp, #-8]
    df0c:	e3530001 	cmp	r3, #1
    df10:	daffffd2 	ble	de60 <g_halGyro_readGyroscopeFromI2C_i32+0x108>
			l_xRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[1-l_countVariable_i32];
			l_yRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[3-l_countVariable_i32];
			l_zRegister_ui8[l_countVariable_i32]=l_ReadBuffer_ui8[5-l_countVariable_i32];
		}

		l_xValue_ui8=(double)g_halLib_twoComplement2Int(l_xRegister_ui8,2);
    df14:	e24b3038 	sub	r3, fp, #56	; 0x38
    df18:	e1a00003 	mov	r0, r3
    df1c:	e3a01002 	mov	r1, #2
    df20:	eb000060 	bl	e0a8 <g_halLib_twoComplement2Int>
    df24:	e1a03000 	mov	r3, r0
    df28:	ee063a90 	vmov	s13, r3
    df2c:	eeb87be6 	vcvt.f64.s32	d7, s13
    df30:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
		l_yValue_ui8=(double)g_halLib_twoComplement2Int(l_yRegister_ui8,2);
    df34:	e24b303c 	sub	r3, fp, #60	; 0x3c
    df38:	e1a00003 	mov	r0, r3
    df3c:	e3a01002 	mov	r1, #2
    df40:	eb000058 	bl	e0a8 <g_halLib_twoComplement2Int>
    df44:	e1a03000 	mov	r3, r0
    df48:	ee063a90 	vmov	s13, r3
    df4c:	eeb87be6 	vcvt.f64.s32	d7, s13
    df50:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4
		l_zValue_ui8=(double)g_halLib_twoComplement2Int(l_zRegister_ui8,2);
    df54:	e24b3040 	sub	r3, fp, #64	; 0x40
    df58:	e1a00003 	mov	r0, r3
    df5c:	e3a01002 	mov	r1, #2
    df60:	eb000050 	bl	e0a8 <g_halLib_twoComplement2Int>
    df64:	e1a03000 	mov	r3, r0
    df68:	ee063a90 	vmov	s13, r3
    df6c:	eeb87be6 	vcvt.f64.s32	d7, s13
    df70:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc

		l_xValue_ui8=l_xValue_ui8*l_factorRaw2Out_f64;
    df74:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
    df78:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    df7c:	ee267b07 	vmul.f64	d7, d6, d7
    df80:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
		l_yValue_ui8=l_yValue_ui8*l_factorRaw2Out_f64;
    df84:	ed1b6b07 	vldr	d6, [fp, #-28]	; 0xffffffe4
    df88:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    df8c:	ee267b07 	vmul.f64	d7, d6, d7
    df90:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4
		l_zValue_ui8=l_zValue_ui8*l_factorRaw2Out_f64;
    df94:	ed1b6b09 	vldr	d6, [fp, #-36]	; 0xffffffdc
    df98:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
    df9c:	ee267b07 	vmul.f64	d7, d6, d7
    dfa0:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc

		m_rotation_str.roll_f64=l_xValue_ui8;
    dfa4:	e59f1034 	ldr	r1, [pc, #52]	; dfe0 <g_halGyro_readGyroscopeFromI2C_i32+0x288>
    dfa8:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
    dfac:	e1c120f0 	strd	r2, [r1]
		m_rotation_str.pitch_f64=l_yValue_ui8;
    dfb0:	e59f1028 	ldr	r1, [pc, #40]	; dfe0 <g_halGyro_readGyroscopeFromI2C_i32+0x288>
    dfb4:	e14b21dc 	ldrd	r2, [fp, #-28]	; 0xffffffe4
    dfb8:	e1c120f8 	strd	r2, [r1, #8]
		m_rotation_str.yaw_f64=l_zValue_ui8;
    dfbc:	e59f101c 	ldr	r1, [pc, #28]	; dfe0 <g_halGyro_readGyroscopeFromI2C_i32+0x288>
    dfc0:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
    dfc4:	e1c121f0 	strd	r2, [r1, #16]
	}

	return 0;
    dfc8:	e3a03000 	mov	r3, #0
}
    dfcc:	e1a00003 	mov	r0, r3
    dfd0:	e24bd004 	sub	sp, fp, #4
    dfd4:	e8bd8800 	pop	{fp, pc}
    dfd8:	807d00fa 	.word	0x807d00fa
    dfdc:	3f8f403e 	.word	0x3f8f403e
    dfe0:	0001b798 	.word	0x0001b798

0000dfe4 <g_halGyro_readTemperatureFromI2C_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_halGyro_readTemperatureFromI2C_i32(void)
{
    dfe4:	e92d4800 	push	{fp, lr}
    dfe8:	e28db004 	add	fp, sp, #4
    dfec:	e24dd008 	sub	sp, sp, #8
	unsigned char l_ReadBuffer_ui8[2]={0,0};
    dff0:	e3a03000 	mov	r3, #0
    dff4:	e54b3008 	strb	r3, [fp, #-8]
    dff8:	e3a03000 	mov	r3, #0
    dffc:	e54b3007 	strb	r3, [fp, #-7]
	unsigned char l_WriteBuffer_ui8[3];

	//set SUB Address to OUT_TEMP register and activate single read
	l_WriteBuffer_ui8[0]=M_HAL_GYRO_SINGLE_READ_FLAG_UI8 | M_HAL_GYRO_OUT_TEMP_UI8;
    e000:	e3a03026 	mov	r3, #38	; 0x26
    e004:	e54b300c 	strb	r3, [fp, #-12]
	if(g_lldI2c_WriteI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_WriteBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    e008:	e24b300c 	sub	r3, fp, #12
    e00c:	e3a0006a 	mov	r0, #106	; 0x6a
    e010:	e1a01003 	mov	r1, r3
    e014:	e3a02001 	mov	r2, #1
    e018:	eb0001ce 	bl	e758 <g_lldI2c_WriteI2c_bl>
    e01c:	e1a03000 	mov	r3, r0
    e020:	e3530000 	cmp	r3, #0
    e024:	0a000001 	beq	e030 <g_halGyro_readTemperatureFromI2C_i32+0x4c>
	{return -1;}
    e028:	e3e03000 	mvn	r3, #0
    e02c:	ea000015 	b	e088 <g_halGyro_readTemperatureFromI2C_i32+0xa4>

	//Read from OUT_TEMP (26h)
	if(g_lldI2c_ReadI2c_bl(M_I2C_SLAVE_ADDRESS_GYRO_UI8, l_ReadBuffer_ui8, M_HAL_BARO_NR_OF_BYTES_ONE_UI8)!=0)
    e030:	e24b3008 	sub	r3, fp, #8
    e034:	e3a0006a 	mov	r0, #106	; 0x6a
    e038:	e1a01003 	mov	r1, r3
    e03c:	e3a02001 	mov	r2, #1
    e040:	eb0001fc 	bl	e838 <g_lldI2c_ReadI2c_bl>
    e044:	e1a03000 	mov	r3, r0
    e048:	e3530000 	cmp	r3, #0
    e04c:	0a000001 	beq	e058 <g_halGyro_readTemperatureFromI2C_i32+0x74>
	{return -1;}
    e050:	e3e03000 	mvn	r3, #0
    e054:	ea00000b 	b	e088 <g_halGyro_readTemperatureFromI2C_i32+0xa4>
	else
	{
		m_halGyro_temperature_f64=(double)(M_HAL_GYRO_TEMP_OFFSET_UI8)-(double)(g_halLib_twoComplement2Int(l_ReadBuffer_ui8,1));
    e058:	e24b3008 	sub	r3, fp, #8
    e05c:	e1a00003 	mov	r0, r3
    e060:	e3a01001 	mov	r1, #1
    e064:	eb00000f 	bl	e0a8 <g_halLib_twoComplement2Int>
    e068:	e1a03000 	mov	r3, r0
    e06c:	ee063a90 	vmov	s13, r3
    e070:	eeb87be6 	vcvt.f64.s32	d7, s13
    e074:	ed9f6b07 	vldr	d6, [pc, #28]	; e098 <g_halGyro_readTemperatureFromI2C_i32+0xb4>
    e078:	ee367b47 	vsub.f64	d7, d6, d7
    e07c:	e59f301c 	ldr	r3, [pc, #28]	; e0a0 <g_halGyro_readTemperatureFromI2C_i32+0xbc>
    e080:	ed837b00 	vstr	d7, [r3]
	}

	return 0;
    e084:	e3a03000 	mov	r3, #0
}
    e088:	e1a00003 	mov	r0, r3
    e08c:	e24bd004 	sub	sp, fp, #4
    e090:	e8bd8800 	pop	{fp, pc}
    e094:	e1a00000 	nop			; (mov r0, r0)
    e098:	00000000 	.word	0x00000000
    e09c:	403b0000 	.word	0x403b0000
    e0a0:	0001b7b0 	.word	0x0001b7b0
    e0a4:	e1a00000 	nop			; (mov r0, r0)

0000e0a8 <g_halLib_twoComplement2Int>:
 */

#include "Hal_Lib.h"

int g_halLib_twoComplement2Int(unsigned char* f_buffer_ui8,unsigned int f_nrOfBytes_ui32)
{
    e0a8:	e92d4830 	push	{r4, r5, fp, lr}
    e0ac:	e28db00c 	add	fp, sp, #12
    e0b0:	e24dd020 	sub	sp, sp, #32
    e0b4:	e50b0028 	str	r0, [fp, #-40]	; 0x28
    e0b8:	e50b102c 	str	r1, [fp, #-44]	; 0x2c
    e0bc:	e1a0100d 	mov	r1, sp
    e0c0:	e1a0e001 	mov	lr, r1
	int l_countVariable_i32=0;
    e0c4:	e3a01000 	mov	r1, #0
    e0c8:	e50b1010 	str	r1, [fp, #-16]
	int l_result_i32=0;
    e0cc:	e3a01000 	mov	r1, #0
    e0d0:	e50b1014 	str	r1, [fp, #-20]
	unsigned char l_shift_ui8=0;
    e0d4:	e3a01000 	mov	r1, #0
    e0d8:	e54b1015 	strb	r1, [fp, #-21]
	unsigned int l_buffer_ui8[f_nrOfBytes_ui32];
    e0dc:	e51bc02c 	ldr	ip, [fp, #-44]	; 0x2c
    e0e0:	e1a0100c 	mov	r1, ip
    e0e4:	e2411001 	sub	r1, r1, #1
    e0e8:	e50b101c 	str	r1, [fp, #-28]
    e0ec:	e1a0000c 	mov	r0, ip
    e0f0:	e3a01000 	mov	r1, #0
    e0f4:	e1a05281 	lsl	r5, r1, #5
    e0f8:	e1855da0 	orr	r5, r5, r0, lsr #27
    e0fc:	e1a04280 	lsl	r4, r0, #5
    e100:	e1a0000c 	mov	r0, ip
    e104:	e3a01000 	mov	r1, #0
    e108:	e1a03281 	lsl	r3, r1, #5
    e10c:	e1833da0 	orr	r3, r3, r0, lsr #27
    e110:	e1a02280 	lsl	r2, r0, #5
    e114:	e1a0310c 	lsl	r3, ip, #2
    e118:	e2833003 	add	r3, r3, #3
    e11c:	e2833007 	add	r3, r3, #7
    e120:	e1a031a3 	lsr	r3, r3, #3
    e124:	e1a03183 	lsl	r3, r3, #3
    e128:	e04dd003 	sub	sp, sp, r3
    e12c:	e1a0300d 	mov	r3, sp
    e130:	e2833003 	add	r3, r3, #3
    e134:	e1a03123 	lsr	r3, r3, #2
    e138:	e1a03103 	lsl	r3, r3, #2
    e13c:	e50b3020 	str	r3, [fp, #-32]

	//copy Parameter buffer to local buffer
	for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    e140:	e3a03000 	mov	r3, #0
    e144:	e50b3010 	str	r3, [fp, #-16]
    e148:	ea00000a 	b	e178 <g_halLib_twoComplement2Int+0xd0>
	{
		l_buffer_ui8[l_countVariable_i32]=*(f_buffer_ui8+l_countVariable_i32);
    e14c:	e51b3010 	ldr	r3, [fp, #-16]
    e150:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
    e154:	e0823003 	add	r3, r2, r3
    e158:	e5d33000 	ldrb	r3, [r3]
    e15c:	e1a01003 	mov	r1, r3
    e160:	e51b3020 	ldr	r3, [fp, #-32]
    e164:	e51b2010 	ldr	r2, [fp, #-16]
    e168:	e7831102 	str	r1, [r3, r2, lsl #2]
	int l_result_i32=0;
	unsigned char l_shift_ui8=0;
	unsigned int l_buffer_ui8[f_nrOfBytes_ui32];

	//copy Parameter buffer to local buffer
	for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    e16c:	e51b3010 	ldr	r3, [fp, #-16]
    e170:	e2833001 	add	r3, r3, #1
    e174:	e50b3010 	str	r3, [fp, #-16]
    e178:	e51b2010 	ldr	r2, [fp, #-16]
    e17c:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    e180:	e2433001 	sub	r3, r3, #1
    e184:	e1520003 	cmp	r2, r3
    e188:	9affffef 	bls	e14c <g_halLib_twoComplement2Int+0xa4>
	{
		l_buffer_ui8[l_countVariable_i32]=*(f_buffer_ui8+l_countVariable_i32);
	}
//
	//if number is negative
	if ((l_buffer_ui8[0]& M_MASK_NEGATIVE_UI8)!=0)
    e18c:	e51b3020 	ldr	r3, [fp, #-32]
    e190:	e5933000 	ldr	r3, [r3]
    e194:	e2033080 	and	r3, r3, #128	; 0x80
    e198:	e3530000 	cmp	r3, #0
    e19c:	0a000023 	beq	e230 <g_halLib_twoComplement2Int+0x188>
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    e1a0:	e3a03000 	mov	r3, #0
    e1a4:	e50b3010 	str	r3, [fp, #-16]
    e1a8:	ea000014 	b	e200 <g_halLib_twoComplement2Int+0x158>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
    e1ac:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    e1b0:	e6ef2073 	uxtb	r2, r3
    e1b4:	e51b3010 	ldr	r3, [fp, #-16]
    e1b8:	e6ef3073 	uxtb	r3, r3
    e1bc:	e0633002 	rsb	r3, r3, r2
    e1c0:	e6ef3073 	uxtb	r3, r3
    e1c4:	e2433001 	sub	r3, r3, #1
    e1c8:	e54b3015 	strb	r3, [fp, #-21]
			l_result_i32=l_result_i32+(((l_buffer_ui8[l_countVariable_i32])^255)<<(l_shift_ui8*8));
    e1cc:	e51b3020 	ldr	r3, [fp, #-32]
    e1d0:	e51b2010 	ldr	r2, [fp, #-16]
    e1d4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    e1d8:	e22320ff 	eor	r2, r3, #255	; 0xff
    e1dc:	e55b3015 	ldrb	r3, [fp, #-21]
    e1e0:	e1a03183 	lsl	r3, r3, #3
    e1e4:	e1a02312 	lsl	r2, r2, r3
    e1e8:	e51b3014 	ldr	r3, [fp, #-20]
    e1ec:	e0823003 	add	r3, r2, r3
    e1f0:	e50b3014 	str	r3, [fp, #-20]
	}
//
	//if number is negative
	if ((l_buffer_ui8[0]& M_MASK_NEGATIVE_UI8)!=0)
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    e1f4:	e51b3010 	ldr	r3, [fp, #-16]
    e1f8:	e2833001 	add	r3, r3, #1
    e1fc:	e50b3010 	str	r3, [fp, #-16]
    e200:	e51b2010 	ldr	r2, [fp, #-16]
    e204:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    e208:	e2433001 	sub	r3, r3, #1
    e20c:	e1520003 	cmp	r2, r3
    e210:	9affffe5 	bls	e1ac <g_halLib_twoComplement2Int+0x104>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
			l_result_i32=l_result_i32+(((l_buffer_ui8[l_countVariable_i32])^255)<<(l_shift_ui8*8));
		}
		l_result_i32=l_result_i32+1;
    e214:	e51b3014 	ldr	r3, [fp, #-20]
    e218:	e2833001 	add	r3, r3, #1
    e21c:	e50b3014 	str	r3, [fp, #-20]
		l_result_i32=l_result_i32*-1;
    e220:	e51b3014 	ldr	r3, [fp, #-20]
    e224:	e2633000 	rsb	r3, r3, #0
    e228:	e50b3014 	str	r3, [fp, #-20]
    e22c:	ea00001b 	b	e2a0 <g_halLib_twoComplement2Int+0x1f8>
	}
	else
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    e230:	e3a03000 	mov	r3, #0
    e234:	e50b3010 	str	r3, [fp, #-16]
    e238:	ea000013 	b	e28c <g_halLib_twoComplement2Int+0x1e4>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
    e23c:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    e240:	e6ef2073 	uxtb	r2, r3
    e244:	e51b3010 	ldr	r3, [fp, #-16]
    e248:	e6ef3073 	uxtb	r3, r3
    e24c:	e0633002 	rsb	r3, r3, r2
    e250:	e6ef3073 	uxtb	r3, r3
    e254:	e2433001 	sub	r3, r3, #1
    e258:	e54b3015 	strb	r3, [fp, #-21]
			l_result_i32=l_result_i32+(l_buffer_ui8[l_countVariable_i32]<<l_shift_ui8*8);
    e25c:	e51b3020 	ldr	r3, [fp, #-32]
    e260:	e51b2010 	ldr	r2, [fp, #-16]
    e264:	e7932102 	ldr	r2, [r3, r2, lsl #2]
    e268:	e55b3015 	ldrb	r3, [fp, #-21]
    e26c:	e1a03183 	lsl	r3, r3, #3
    e270:	e1a02312 	lsl	r2, r2, r3
    e274:	e51b3014 	ldr	r3, [fp, #-20]
    e278:	e0823003 	add	r3, r2, r3
    e27c:	e50b3014 	str	r3, [fp, #-20]
		l_result_i32=l_result_i32+1;
		l_result_i32=l_result_i32*-1;
	}
	else
	{
		for(l_countVariable_i32=0;l_countVariable_i32<=f_nrOfBytes_ui32-1;l_countVariable_i32++)
    e280:	e51b3010 	ldr	r3, [fp, #-16]
    e284:	e2833001 	add	r3, r3, #1
    e288:	e50b3010 	str	r3, [fp, #-16]
    e28c:	e51b2010 	ldr	r2, [fp, #-16]
    e290:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
    e294:	e2433001 	sub	r3, r3, #1
    e298:	e1520003 	cmp	r2, r3
    e29c:	9affffe6 	bls	e23c <g_halLib_twoComplement2Int+0x194>
		{
			l_shift_ui8=f_nrOfBytes_ui32-1-l_countVariable_i32;
			l_result_i32=l_result_i32+(l_buffer_ui8[l_countVariable_i32]<<l_shift_ui8*8);
		}
	}
	return l_result_i32;
    e2a0:	e51b3014 	ldr	r3, [fp, #-20]
    e2a4:	e1a0d00e 	mov	sp, lr
}
    e2a8:	e1a00003 	mov	r0, r3
    e2ac:	e24bd00c 	sub	sp, fp, #12
    e2b0:	e8bd8830 	pop	{r4, r5, fp, pc}

0000e2b4 <g_halImu_getImuValues_str>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halImu_orientationValues g_halImu_getImuValues_str(void)
{
    e2b4:	e92d4800 	push	{fp, lr}
    e2b8:	e28db004 	add	fp, sp, #4
    e2bc:	e24dd008 	sub	sp, sp, #8
    e2c0:	e50b0008 	str	r0, [fp, #-8]
	return m_halImu_imuValues_st;
    e2c4:	e51b2008 	ldr	r2, [fp, #-8]
    e2c8:	e59f3024 	ldr	r3, [pc, #36]	; e2f4 <g_halImu_getImuValues_str+0x40>
    e2cc:	e1a01002 	mov	r1, r2
    e2d0:	e1a02003 	mov	r2, r3
    e2d4:	e3a03058 	mov	r3, #88	; 0x58
    e2d8:	e1a00001 	mov	r0, r1
    e2dc:	e1a01002 	mov	r1, r2
    e2e0:	e1a02003 	mov	r2, r3
    e2e4:	ebffea66 	bl	8c84 <_init+0x170>
}
    e2e8:	e51b0008 	ldr	r0, [fp, #-8]
    e2ec:	e24bd004 	sub	sp, fp, #4
    e2f0:	e8bd8800 	pop	{fp, pc}
    e2f4:	0001b7c0 	.word	0x0001b7c0

0000e2f8 <g_halImu_initImuSensors_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_initImuSensors_bl(void)
{
    e2f8:	e92d4800 	push	{fp, lr}
    e2fc:	e28db004 	add	fp, sp, #4
	// initialize Acceleration and electrical Compass chip
	if(g_halAccmag_initSensor_bl()!=0)
    e300:	ebfffce9 	bl	d6ac <g_halAccmag_initSensor_bl>
    e304:	e1a03000 	mov	r3, r0
    e308:	e3530000 	cmp	r3, #0
    e30c:	0a000001 	beq	e318 <g_halImu_initImuSensors_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    e310:	e3a03001 	mov	r3, #1
    e314:	ea00000c 	b	e34c <g_halImu_initImuSensors_bl+0x54>

	// initialize Barometer chip
	if(g_halBaro_initBaro_i32()!=0)
    e318:	ebfffd5e 	bl	d898 <g_halBaro_initBaro_i32>
    e31c:	e1a03000 	mov	r3, r0
    e320:	e3530000 	cmp	r3, #0
    e324:	0a000001 	beq	e330 <g_halImu_initImuSensors_bl+0x38>
	{return M_HAL_IMU_FAILED_BL;}
    e328:	e3a03001 	mov	r3, #1
    e32c:	ea000006 	b	e34c <g_halImu_initImuSensors_bl+0x54>

	// initialize Gyroscope chip
	if(g_halGyro_initGyro_i32()!=0)
    e330:	ebfffe3e 	bl	dc30 <g_halGyro_initGyro_i32>
    e334:	e1a03000 	mov	r3, r0
    e338:	e3530000 	cmp	r3, #0
    e33c:	0a000001 	beq	e348 <g_halImu_initImuSensors_bl+0x50>
	{return M_HAL_IMU_FAILED_BL;}
    e340:	e3a03001 	mov	r3, #1
    e344:	ea000000 	b	e34c <g_halImu_initImuSensors_bl+0x54>

	return M_HAL_IMU_SUCCESS_BL;
    e348:	e3a03000 	mov	r3, #0
}
    e34c:	e1a00003 	mov	r0, r3
    e350:	e8bd8800 	pop	{fp, pc}

0000e354 <g_halImu_triggerBaroReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerBaroReading_bl(void)
{
    e354:	e92d4800 	push	{fp, lr}
    e358:	e28db004 	add	fp, sp, #4
	if(g_halBaro_readPressureFromI2C_i32()!=0)
    e35c:	ebfffd8b 	bl	d990 <g_halBaro_readPressureFromI2C_i32>
    e360:	e1a03000 	mov	r3, r0
    e364:	e3530000 	cmp	r3, #0
    e368:	0a000001 	beq	e374 <g_halImu_triggerBaroReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    e36c:	e3a03001 	mov	r3, #1
    e370:	ea00000e 	b	e3b0 <g_halImu_triggerBaroReading_bl+0x5c>

	if(g_halBaro_readTemperatureFromI2C_i32()!=0)
    e374:	ebfffdd8 	bl	dadc <g_halBaro_readTemperatureFromI2C_i32>
    e378:	e1a03000 	mov	r3, r0
    e37c:	e3530000 	cmp	r3, #0
    e380:	0a000001 	beq	e38c <g_halImu_triggerBaroReading_bl+0x38>
	{return M_HAL_IMU_FAILED_BL;}
    e384:	e3a03001 	mov	r3, #1
    e388:	ea000008 	b	e3b0 <g_halImu_triggerBaroReading_bl+0x5c>

	m_halImu_imuValues_st.pressure_f64=g_halBaro_getPressure_f64();
    e38c:	ebfffd6b 	bl	d940 <g_halBaro_getPressure_f64>
    e390:	eeb07b40 	vmov.f64	d7, d0
    e394:	e59f301c 	ldr	r3, [pc, #28]	; e3b8 <g_halImu_triggerBaroReading_bl+0x64>
    e398:	ed837b14 	vstr	d7, [r3, #80]	; 0x50
	m_halImu_imuValues_st.temperature_f64=g_halBaro_getTemperature_f64();
    e39c:	ebfffd71 	bl	d968 <g_halBaro_getTemperature_f64>
    e3a0:	eeb07b40 	vmov.f64	d7, d0
    e3a4:	e59f300c 	ldr	r3, [pc, #12]	; e3b8 <g_halImu_triggerBaroReading_bl+0x64>
    e3a8:	ed837b12 	vstr	d7, [r3, #72]	; 0x48

	return M_HAL_IMU_SUCCESS_BL;
    e3ac:	e3a03000 	mov	r3, #0
}
    e3b0:	e1a00003 	mov	r0, r3
    e3b4:	e8bd8800 	pop	{fp, pc}
    e3b8:	0001b7c0 	.word	0x0001b7c0

0000e3bc <g_halImu_triggerGyroReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerGyroReading_bl(void)
{
    e3bc:	e92d4818 	push	{r3, r4, fp, lr}
    e3c0:	e28db00c 	add	fp, sp, #12
	if(g_halGyro_readGyroscopeFromI2C_i32()!=0)
    e3c4:	ebfffe63 	bl	dd58 <g_halGyro_readGyroscopeFromI2C_i32>
    e3c8:	e1a03000 	mov	r3, r0
    e3cc:	e3530000 	cmp	r3, #0
    e3d0:	0a000001 	beq	e3dc <g_halImu_triggerGyroReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    e3d4:	e3a03001 	mov	r3, #1
    e3d8:	ea000008 	b	e400 <g_halImu_triggerGyroReading_bl+0x44>

	m_halImu_imuValues_st.gyro=g_halGyro_getGyroscope_st();
    e3dc:	e59f4024 	ldr	r4, [pc, #36]	; e408 <g_halImu_triggerGyroReading_bl+0x4c>
    e3e0:	ebfffe3c 	bl	dcd8 <g_halGyro_getGyroscope_st>
    e3e4:	eeb05b40 	vmov.f64	d5, d0
    e3e8:	eeb06b41 	vmov.f64	d6, d1
    e3ec:	eeb07b42 	vmov.f64	d7, d2
    e3f0:	ed845b0c 	vstr	d5, [r4, #48]	; 0x30
    e3f4:	ed846b0e 	vstr	d6, [r4, #56]	; 0x38
    e3f8:	ed847b10 	vstr	d7, [r4, #64]	; 0x40

	return M_HAL_IMU_SUCCESS_BL;
    e3fc:	e3a03000 	mov	r3, #0
}
    e400:	e1a00003 	mov	r0, r3
    e404:	e8bd8818 	pop	{r3, r4, fp, pc}
    e408:	0001b7c0 	.word	0x0001b7c0

0000e40c <g_halImu_triggerAccReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerAccReading_bl(void)
{
    e40c:	e92d4818 	push	{r3, r4, fp, lr}
    e410:	e28db00c 	add	fp, sp, #12
	if(g_halAccmag_triggerAccUpdate_bl()!=0)
    e414:	ebfffccc 	bl	d74c <g_halAccmag_triggerAccUpdate_bl>
    e418:	e1a03000 	mov	r3, r0
    e41c:	e3530000 	cmp	r3, #0
    e420:	0a000001 	beq	e42c <g_halImu_triggerAccReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    e424:	e3a03001 	mov	r3, #1
    e428:	ea000008 	b	e450 <g_halImu_triggerAccReading_bl+0x44>

	m_halImu_imuValues_st.acc=g_halAccmag_getAccVector_st();
    e42c:	e59f4024 	ldr	r4, [pc, #36]	; e458 <g_halImu_triggerAccReading_bl+0x4c>
    e430:	ebfffcda 	bl	d7a0 <g_halAccmag_getAccVector_st>
    e434:	eeb05b40 	vmov.f64	d5, d0
    e438:	eeb06b41 	vmov.f64	d6, d1
    e43c:	eeb07b42 	vmov.f64	d7, d2
    e440:	ed845b00 	vstr	d5, [r4]
    e444:	ed846b02 	vstr	d6, [r4, #8]
    e448:	ed847b04 	vstr	d7, [r4, #16]

	return M_HAL_IMU_SUCCESS_BL;
    e44c:	e3a03000 	mov	r3, #0
}
    e450:	e1a00003 	mov	r0, r3
    e454:	e8bd8818 	pop	{r3, r4, fp, pc}
    e458:	0001b7c0 	.word	0x0001b7c0

0000e45c <g_halImu_triggerMagReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerMagReading_bl(void)
{
    e45c:	e92d4818 	push	{r3, r4, fp, lr}
    e460:	e28db00c 	add	fp, sp, #12
	if(g_halAccmag_triggerMagUpdate_bl()!=0)
    e464:	ebfffcbf 	bl	d768 <g_halAccmag_triggerMagUpdate_bl>
    e468:	e1a03000 	mov	r3, r0
    e46c:	e3530000 	cmp	r3, #0
    e470:	0a000001 	beq	e47c <g_halImu_triggerMagReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    e474:	e3a03001 	mov	r3, #1
    e478:	ea000008 	b	e4a0 <g_halImu_triggerMagReading_bl+0x44>

	m_halImu_imuValues_st.mag=g_halAccmag_getMagVector_st();
    e47c:	e59f4024 	ldr	r4, [pc, #36]	; e4a8 <g_halImu_triggerMagReading_bl+0x4c>
    e480:	ebfffcdc 	bl	d7f8 <g_halAccmag_getMagVector_st>
    e484:	eeb05b40 	vmov.f64	d5, d0
    e488:	eeb06b41 	vmov.f64	d6, d1
    e48c:	eeb07b42 	vmov.f64	d7, d2
    e490:	ed845b06 	vstr	d5, [r4, #24]
    e494:	ed846b08 	vstr	d6, [r4, #32]
    e498:	ed847b0a 	vstr	d7, [r4, #40]	; 0x28

	return M_HAL_IMU_SUCCESS_BL;
    e49c:	e3a03000 	mov	r3, #0
}
    e4a0:	e1a00003 	mov	r0, r3
    e4a4:	e8bd8818 	pop	{r3, r4, fp, pc}
    e4a8:	0001b7c0 	.word	0x0001b7c0

0000e4ac <g_halImu_triggerImuReading_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halImu_triggerImuReading_bl(void)
{
    e4ac:	e92d4818 	push	{r3, r4, fp, lr}
    e4b0:	e28db00c 	add	fp, sp, #12
	if(g_halBaro_readPressureFromI2C_i32()!=0)
    e4b4:	ebfffd35 	bl	d990 <g_halBaro_readPressureFromI2C_i32>
    e4b8:	e1a03000 	mov	r3, r0
    e4bc:	e3530000 	cmp	r3, #0
    e4c0:	0a000001 	beq	e4cc <g_halImu_triggerImuReading_bl+0x20>
	{return M_HAL_IMU_FAILED_BL;}
    e4c4:	e3a03001 	mov	r3, #1
    e4c8:	ea000038 	b	e5b0 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halBaro_readTemperatureFromI2C_i32()!=0)
    e4cc:	ebfffd82 	bl	dadc <g_halBaro_readTemperatureFromI2C_i32>
    e4d0:	e1a03000 	mov	r3, r0
    e4d4:	e3530000 	cmp	r3, #0
    e4d8:	0a000001 	beq	e4e4 <g_halImu_triggerImuReading_bl+0x38>
	{return M_HAL_IMU_FAILED_BL;}
    e4dc:	e3a03001 	mov	r3, #1
    e4e0:	ea000032 	b	e5b0 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halGyro_readGyroscopeFromI2C_i32()!=0)
    e4e4:	ebfffe1b 	bl	dd58 <g_halGyro_readGyroscopeFromI2C_i32>
    e4e8:	e1a03000 	mov	r3, r0
    e4ec:	e3530000 	cmp	r3, #0
    e4f0:	0a000001 	beq	e4fc <g_halImu_triggerImuReading_bl+0x50>
	{return M_HAL_IMU_FAILED_BL;}
    e4f4:	e3a03001 	mov	r3, #1
    e4f8:	ea00002c 	b	e5b0 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halAccmag_triggerAccUpdate_bl()!=0)
    e4fc:	ebfffc92 	bl	d74c <g_halAccmag_triggerAccUpdate_bl>
    e500:	e1a03000 	mov	r3, r0
    e504:	e3530000 	cmp	r3, #0
    e508:	0a000001 	beq	e514 <g_halImu_triggerImuReading_bl+0x68>
	{return M_HAL_IMU_FAILED_BL;}
    e50c:	e3a03001 	mov	r3, #1
    e510:	ea000026 	b	e5b0 <g_halImu_triggerImuReading_bl+0x104>

	if(g_halAccmag_triggerMagUpdate_bl()!=0)
    e514:	ebfffc93 	bl	d768 <g_halAccmag_triggerMagUpdate_bl>
    e518:	e1a03000 	mov	r3, r0
    e51c:	e3530000 	cmp	r3, #0
    e520:	0a000001 	beq	e52c <g_halImu_triggerImuReading_bl+0x80>
	{return M_HAL_IMU_FAILED_BL;}
    e524:	e3a03001 	mov	r3, #1
    e528:	ea000020 	b	e5b0 <g_halImu_triggerImuReading_bl+0x104>

	m_halImu_imuValues_st.mag=g_halAccmag_getMagVector_st();
    e52c:	e59f4084 	ldr	r4, [pc, #132]	; e5b8 <g_halImu_triggerImuReading_bl+0x10c>
    e530:	ebfffcb0 	bl	d7f8 <g_halAccmag_getMagVector_st>
    e534:	eeb05b40 	vmov.f64	d5, d0
    e538:	eeb06b41 	vmov.f64	d6, d1
    e53c:	eeb07b42 	vmov.f64	d7, d2
    e540:	ed845b06 	vstr	d5, [r4, #24]
    e544:	ed846b08 	vstr	d6, [r4, #32]
    e548:	ed847b0a 	vstr	d7, [r4, #40]	; 0x28
	m_halImu_imuValues_st.acc=g_halAccmag_getAccVector_st();
    e54c:	e59f4064 	ldr	r4, [pc, #100]	; e5b8 <g_halImu_triggerImuReading_bl+0x10c>
    e550:	ebfffc92 	bl	d7a0 <g_halAccmag_getAccVector_st>
    e554:	eeb05b40 	vmov.f64	d5, d0
    e558:	eeb06b41 	vmov.f64	d6, d1
    e55c:	eeb07b42 	vmov.f64	d7, d2
    e560:	ed845b00 	vstr	d5, [r4]
    e564:	ed846b02 	vstr	d6, [r4, #8]
    e568:	ed847b04 	vstr	d7, [r4, #16]
	m_halImu_imuValues_st.gyro=g_halGyro_getGyroscope_st();
    e56c:	e59f4044 	ldr	r4, [pc, #68]	; e5b8 <g_halImu_triggerImuReading_bl+0x10c>
    e570:	ebfffdd8 	bl	dcd8 <g_halGyro_getGyroscope_st>
    e574:	eeb05b40 	vmov.f64	d5, d0
    e578:	eeb06b41 	vmov.f64	d6, d1
    e57c:	eeb07b42 	vmov.f64	d7, d2
    e580:	ed845b0c 	vstr	d5, [r4, #48]	; 0x30
    e584:	ed846b0e 	vstr	d6, [r4, #56]	; 0x38
    e588:	ed847b10 	vstr	d7, [r4, #64]	; 0x40
	m_halImu_imuValues_st.pressure_f64=g_halBaro_getPressure_f64();
    e58c:	ebfffceb 	bl	d940 <g_halBaro_getPressure_f64>
    e590:	eeb07b40 	vmov.f64	d7, d0
    e594:	e59f301c 	ldr	r3, [pc, #28]	; e5b8 <g_halImu_triggerImuReading_bl+0x10c>
    e598:	ed837b14 	vstr	d7, [r3, #80]	; 0x50
	m_halImu_imuValues_st.temperature_f64=g_halBaro_getTemperature_f64();
    e59c:	ebfffcf1 	bl	d968 <g_halBaro_getTemperature_f64>
    e5a0:	eeb07b40 	vmov.f64	d7, d0
    e5a4:	e59f300c 	ldr	r3, [pc, #12]	; e5b8 <g_halImu_triggerImuReading_bl+0x10c>
    e5a8:	ed837b12 	vstr	d7, [r3, #72]	; 0x48

	return M_HAL_IMU_SUCCESS_BL;
    e5ac:	e3a03000 	mov	r3, #0
}
    e5b0:	e1a00003 	mov	r0, r3
    e5b4:	e8bd8818 	pop	{r3, r4, fp, pc}
    e5b8:	0001b7c0 	.word	0x0001b7c0
    e5bc:	00000000 	.word	0x00000000

0000e5c0 <g_LIDAR_getDistance_f64>:
 *
 * \endinternal
 ********************************************************************** */

double g_LIDAR_getDistance_f64(void)
{
    e5c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    e5c4:	e28db000 	add	fp, sp, #0
	return m_distance_f64;
    e5c8:	e59f3014 	ldr	r3, [pc, #20]	; e5e4 <g_LIDAR_getDistance_f64+0x24>
    e5cc:	e1c320d0 	ldrd	r2, [r3]
    e5d0:	ec432b17 	vmov	d7, r2, r3
}
    e5d4:	eeb00b47 	vmov.f64	d0, d7
    e5d8:	e24bd000 	sub	sp, fp, #0
    e5dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    e5e0:	e12fff1e 	bx	lr
    e5e4:	0001b818 	.word	0x0001b818

0000e5e8 <g_LIDAR_readDistanceFromI2C_i32>:
 *
 * \endinternal
 ********************************************************************** */

int g_LIDAR_readDistanceFromI2C_i32(void)
{
    e5e8:	e92d4800 	push	{fp, lr}
    e5ec:	e28db004 	add	fp, sp, #4
    e5f0:	e24dd010 	sub	sp, sp, #16
unsigned char l_ReadBuffer_ui8[2]={0,0};
    e5f4:	e3a03000 	mov	r3, #0
    e5f8:	e54b300c 	strb	r3, [fp, #-12]
    e5fc:	e3a03000 	mov	r3, #0
    e600:	e54b300b 	strb	r3, [fp, #-11]
unsigned char l_WriteBuffer_ui8[2]={0,0};
    e604:	e3a03000 	mov	r3, #0
    e608:	e54b3010 	strb	r3, [fp, #-16]
    e60c:	e3a03000 	mov	r3, #0
    e610:	e54b300f 	strb	r3, [fp, #-15]
int l_DistInCm_i32 =  0;
    e614:	e3a03000 	mov	r3, #0
    e618:	e50b3008 	str	r3, [fp, #-8]

//Trigger Measurement of Distance (DC stabnilization cycle, Signal Acquisition, DataProcessing)
l_WriteBuffer_ui8[0]=0x00; 								//write Reg 0x00
    e61c:	e3a03000 	mov	r3, #0
    e620:	e54b3010 	strb	r3, [fp, #-16]
l_WriteBuffer_ui8[1]=0x04; 								//with value 0x04
    e624:	e3a03004 	mov	r3, #4
    e628:	e54b300f 	strb	r3, [fp, #-15]
if(g_lldI2c_WriteI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, l_WriteBuffer_ui8, 2)!=0)
    e62c:	e24b3010 	sub	r3, fp, #16
    e630:	e3a00062 	mov	r0, #98	; 0x62
    e634:	e1a01003 	mov	r1, r3
    e638:	e3a02002 	mov	r2, #2
    e63c:	eb0000b5 	bl	e918 <g_lldI2c_WriteI2c0_bl>
    e640:	e1a03000 	mov	r3, r0
    e644:	e3530000 	cmp	r3, #0
    e648:	0a000001 	beq	e654 <g_LIDAR_readDistanceFromI2C_i32+0x6c>
{
return -1;
    e64c:	e3e03000 	mvn	r3, #0
    e650:	ea000038 	b	e738 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Waiting Time for Acquisition
usleep(20*1000);
    e654:	e59f00f4 	ldr	r0, [pc, #244]	; e750 <g_LIDAR_readDistanceFromI2C_i32+0x168>
    e658:	ebffe962 	bl	8be8 <_init+0xd4>


//Set Acquisition count cycle to 255
l_WriteBuffer_ui8[0]=0x02;
    e65c:	e3a03002 	mov	r3, #2
    e660:	e54b3010 	strb	r3, [fp, #-16]
l_WriteBuffer_ui8[1]=0xFF;
    e664:	e3e03000 	mvn	r3, #0
    e668:	e54b300f 	strb	r3, [fp, #-15]
if(g_lldI2c_WriteI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, l_WriteBuffer_ui8, 2)!=0)
    e66c:	e24b3010 	sub	r3, fp, #16
    e670:	e3a00062 	mov	r0, #98	; 0x62
    e674:	e1a01003 	mov	r1, r3
    e678:	e3a02002 	mov	r2, #2
    e67c:	eb0000a5 	bl	e918 <g_lldI2c_WriteI2c0_bl>
    e680:	e1a03000 	mov	r3, r0
    e684:	e3530000 	cmp	r3, #0
    e688:	0a000001 	beq	e694 <g_LIDAR_readDistanceFromI2C_i32+0xac>
{
return -1;
    e68c:	e3e03000 	mvn	r3, #0
    e690:	ea000028 	b	e738 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Set Reg 0x8f as Output-Register
l_WriteBuffer_ui8[0]=0x8f;
    e694:	e3e03070 	mvn	r3, #112	; 0x70
    e698:	e54b3010 	strb	r3, [fp, #-16]
if(g_lldI2c_WriteI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, l_WriteBuffer_ui8, 1)!=0)
    e69c:	e24b3010 	sub	r3, fp, #16
    e6a0:	e3a00062 	mov	r0, #98	; 0x62
    e6a4:	e1a01003 	mov	r1, r3
    e6a8:	e3a02001 	mov	r2, #1
    e6ac:	eb000099 	bl	e918 <g_lldI2c_WriteI2c0_bl>
    e6b0:	e1a03000 	mov	r3, r0
    e6b4:	e3530000 	cmp	r3, #0
    e6b8:	0a000001 	beq	e6c4 <g_LIDAR_readDistanceFromI2C_i32+0xdc>
{
return -1;
    e6bc:	e3e03000 	mvn	r3, #0
    e6c0:	ea00001c 	b	e738 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Read 2-Byte Distance in cm from Register 0x8f
if(g_lldI2c_ReadI2c0_bl(M_I2C_SLAVE_ADDRESS_LIDAR_UI8, (l_ReadBuffer_ui8), 2)!=0)
    e6c4:	e24b300c 	sub	r3, fp, #12
    e6c8:	e3a00062 	mov	r0, #98	; 0x62
    e6cc:	e1a01003 	mov	r1, r3
    e6d0:	e3a02002 	mov	r2, #2
    e6d4:	eb0000c7 	bl	e9f8 <g_lldI2c_ReadI2c0_bl>
    e6d8:	e1a03000 	mov	r3, r0
    e6dc:	e3530000 	cmp	r3, #0
    e6e0:	0a000001 	beq	e6ec <g_LIDAR_readDistanceFromI2C_i32+0x104>
{
return -1;
    e6e4:	e3e03000 	mvn	r3, #0
    e6e8:	ea000012 	b	e738 <g_LIDAR_readDistanceFromI2C_i32+0x150>
}

//Conversion from int(cm) to double(m)
l_DistInCm_i32 = *l_ReadBuffer_ui8 << 8;
    e6ec:	e55b300c 	ldrb	r3, [fp, #-12]
    e6f0:	e1a03403 	lsl	r3, r3, #8
    e6f4:	e50b3008 	str	r3, [fp, #-8]
l_DistInCm_i32 |= *(l_ReadBuffer_ui8+1);
    e6f8:	e55b300b 	ldrb	r3, [fp, #-11]
    e6fc:	e51b2008 	ldr	r2, [fp, #-8]
    e700:	e1823003 	orr	r3, r2, r3
    e704:	e50b3008 	str	r3, [fp, #-8]
m_distance_f64 = (double)l_DistInCm_i32;
    e708:	e51b3008 	ldr	r3, [fp, #-8]
    e70c:	ee063a90 	vmov	s13, r3
    e710:	eeb87be6 	vcvt.f64.s32	d7, s13
    e714:	e59f3038 	ldr	r3, [pc, #56]	; e754 <g_LIDAR_readDistanceFromI2C_i32+0x16c>
    e718:	ed837b00 	vstr	d7, [r3]
m_distance_f64 = (m_distance_f64/100);
    e71c:	e59f3030 	ldr	r3, [pc, #48]	; e754 <g_LIDAR_readDistanceFromI2C_i32+0x16c>
    e720:	ed936b00 	vldr	d6, [r3]
    e724:	ed9f7b07 	vldr	d7, [pc, #28]	; e748 <g_LIDAR_readDistanceFromI2C_i32+0x160>
    e728:	ee867b07 	vdiv.f64	d7, d6, d7
    e72c:	e59f3020 	ldr	r3, [pc, #32]	; e754 <g_LIDAR_readDistanceFromI2C_i32+0x16c>
    e730:	ed837b00 	vstr	d7, [r3]
//printf("Distance: %d / %.2f\n",l_DistInCm_i32,m_distance_f64);
//usleep(500*1000);


return 0;
    e734:	e3a03000 	mov	r3, #0
}
    e738:	e1a00003 	mov	r0, r3
    e73c:	e24bd004 	sub	sp, fp, #4
    e740:	e8bd8800 	pop	{fp, pc}
    e744:	e1a00000 	nop			; (mov r0, r0)
    e748:	00000000 	.word	0x00000000
    e74c:	40590000 	.word	0x40590000
    e750:	00004e20 	.word	0x00004e20
    e754:	0001b818 	.word	0x0001b818

0000e758 <g_lldI2c_WriteI2c_bl>:
 * 2015/05/06 phwogs00:
 * Changed variable and function names in order to guideline
 * \endinternal
 ***********************************************************************/
unsigned int g_lldI2c_WriteI2c_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_i2cWriteBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    e758:	e92d4800 	push	{fp, lr}
    e75c:	e28db004 	add	fp, sp, #4
    e760:	e24dd018 	sub	sp, sp, #24
    e764:	e1a03000 	mov	r3, r0
    e768:	e50b1014 	str	r1, [fp, #-20]
    e76c:	e50b2018 	str	r2, [fp, #-24]
    e770:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_returnOfWrittenBytes_ui8 	= 0;
    e774:	e3a03000 	mov	r3, #0
    e778:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_WriteRetryCounter_ui8 	= 0;
    e77c:	e3a03000 	mov	r3, #0
    e780:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 				= 0;
    e784:	e3a03000 	mov	r3, #0
    e788:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C_DEV_UI8, O_RDWR);
    e78c:	e59f009c 	ldr	r0, [pc, #156]	; e830 <g_lldI2c_WriteI2c_bl+0xd8>
    e790:	e3a01002 	mov	r1, #2
    e794:	ebffe8e6 	bl	8b34 <_init+0x20>
    e798:	e1a03000 	mov	r3, r0
    e79c:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    e7a0:	e51b200c 	ldr	r2, [fp, #-12]
    e7a4:	e55b300d 	ldrb	r3, [fp, #-13]
    e7a8:	e1a00002 	mov	r0, r2
    e7ac:	e59f1080 	ldr	r1, [pc, #128]	; e834 <g_lldI2c_WriteI2c_bl+0xdc>
    e7b0:	e1a02003 	mov	r2, r3
    e7b4:	ebffe92c 	bl	8c6c <_init+0x158>

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    e7b8:	ea000009 	b	e7e4 <g_lldI2c_WriteI2c_bl+0x8c>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    e7bc:	e51b300c 	ldr	r3, [fp, #-12]
    e7c0:	e1a00003 	mov	r0, r3
    e7c4:	e51b1014 	ldr	r1, [fp, #-20]
    e7c8:	e51b2018 	ldr	r2, [fp, #-24]
    e7cc:	ebffe90e 	bl	8c0c <_init+0xf8>
    e7d0:	e1a03000 	mov	r3, r0
    e7d4:	e54b3005 	strb	r3, [fp, #-5]
		l_WriteRetryCounter_ui8++;
    e7d8:	e55b3006 	ldrb	r3, [fp, #-6]
    e7dc:	e2833001 	add	r3, r3, #1
    e7e0:	e54b3006 	strb	r3, [fp, #-6]

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    e7e4:	e55b2005 	ldrb	r2, [fp, #-5]
    e7e8:	e51b3018 	ldr	r3, [fp, #-24]
    e7ec:	e1520003 	cmp	r2, r3
    e7f0:	0a000002 	beq	e800 <g_lldI2c_WriteI2c_bl+0xa8>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    e7f4:	e55b3006 	ldrb	r3, [fp, #-6]
    e7f8:	e3530002 	cmp	r3, #2
    e7fc:	9affffee 	bls	e7bc <g_lldI2c_WriteI2c_bl+0x64>
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_WriteRetryCounter_ui8++;
	}

	if(l_WriteRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    e800:	e55b3006 	ldrb	r3, [fp, #-6]
    e804:	e3530002 	cmp	r3, #2
    e808:	9a000001 	bls	e814 <g_lldI2c_WriteI2c_bl+0xbc>
	{
		return 1;
    e80c:	e3a03001 	mov	r3, #1
    e810:	ea000003 	b	e824 <g_lldI2c_WriteI2c_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    e814:	e51b300c 	ldr	r3, [fp, #-12]
    e818:	e1a00003 	mov	r0, r3
    e81c:	ebffe927 	bl	8cc0 <_init+0x1ac>
	{
		/*ERROR HANDLER*/
		return 1;
	}

	return 0;
    e820:	e3a03000 	mov	r3, #0
}
    e824:	e1a00003 	mov	r0, r3
    e828:	e24bd004 	sub	sp, fp, #4
    e82c:	e8bd8800 	pop	{fp, pc}
    e830:	00012938 	.word	0x00012938
    e834:	00000703 	.word	0x00000703

0000e838 <g_lldI2c_ReadI2c_bl>:
 * Changed variable and function names in order to guideline
 *   *
 * \endinternal
 ***********************************************************************/ 
unsigned int g_lldI2c_ReadI2c_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_lldI2c_i2cReadBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    e838:	e92d4800 	push	{fp, lr}
    e83c:	e28db004 	add	fp, sp, #4
    e840:	e24dd018 	sub	sp, sp, #24
    e844:	e1a03000 	mov	r3, r0
    e848:	e50b1014 	str	r1, [fp, #-20]
    e84c:	e50b2018 	str	r2, [fp, #-24]
    e850:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_ReturnOfReadBytes_ui8 = 0;
    e854:	e3a03000 	mov	r3, #0
    e858:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_ReadRetryCounter_ui8 	= 0;
    e85c:	e3a03000 	mov	r3, #0
    e860:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 			= 0;
    e864:	e3a03000 	mov	r3, #0
    e868:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C_DEV_UI8, O_RDWR);   //Open I2C device
    e86c:	e59f009c 	ldr	r0, [pc, #156]	; e910 <g_lldI2c_ReadI2c_bl+0xd8>
    e870:	e3a01002 	mov	r1, #2
    e874:	ebffe8ae 	bl	8b34 <_init+0x20>
    e878:	e1a03000 	mov	r3, r0
    e87c:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    e880:	e51b200c 	ldr	r2, [fp, #-12]
    e884:	e55b300d 	ldrb	r3, [fp, #-13]
    e888:	e1a00002 	mov	r0, r2
    e88c:	e59f1080 	ldr	r1, [pc, #128]	; e914 <g_lldI2c_ReadI2c_bl+0xdc>
    e890:	e1a02003 	mov	r2, r3
    e894:	ebffe8f4 	bl	8c6c <_init+0x158>

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    e898:	ea000009 	b	e8c4 <g_lldI2c_ReadI2c_bl+0x8c>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    e89c:	e51b300c 	ldr	r3, [fp, #-12]
    e8a0:	e1a00003 	mov	r0, r3
    e8a4:	e51b1014 	ldr	r1, [fp, #-20]
    e8a8:	e51b2018 	ldr	r2, [fp, #-24]
    e8ac:	ebffe8d3 	bl	8c00 <_init+0xec>
    e8b0:	e1a03000 	mov	r3, r0
    e8b4:	e54b3005 	strb	r3, [fp, #-5]
		l_ReadRetryCounter_ui8++;
    e8b8:	e55b3006 	ldrb	r3, [fp, #-6]
    e8bc:	e2833001 	add	r3, r3, #1
    e8c0:	e54b3006 	strb	r3, [fp, #-6]
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    e8c4:	e55b2005 	ldrb	r2, [fp, #-5]
    e8c8:	e51b3018 	ldr	r3, [fp, #-24]
    e8cc:	e1520003 	cmp	r2, r3
    e8d0:	0a000002 	beq	e8e0 <g_lldI2c_ReadI2c_bl+0xa8>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    e8d4:	e55b3006 	ldrb	r3, [fp, #-6]
    e8d8:	e3530002 	cmp	r3, #2
    e8dc:	9affffee 	bls	e89c <g_lldI2c_ReadI2c_bl+0x64>
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_ReadRetryCounter_ui8++;
	}

	if(l_ReadRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    e8e0:	e55b3006 	ldrb	r3, [fp, #-6]
    e8e4:	e3530002 	cmp	r3, #2
    e8e8:	9a000001 	bls	e8f4 <g_lldI2c_ReadI2c_bl+0xbc>
	{
		return 1;
    e8ec:	e3a03001 	mov	r3, #1
    e8f0:	ea000003 	b	e904 <g_lldI2c_ReadI2c_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    e8f4:	e51b300c 	ldr	r3, [fp, #-12]
    e8f8:	e1a00003 	mov	r0, r3
    e8fc:	ebffe8ef 	bl	8cc0 <_init+0x1ac>
	if(l_i2cFile_ui32 < 0)
	{
		/*ERROR HANDLER*/
		return 1;
	}
	return(0);
    e900:	e3a03000 	mov	r3, #0

}
    e904:	e1a00003 	mov	r0, r3
    e908:	e24bd004 	sub	sp, fp, #4
    e90c:	e8bd8800 	pop	{fp, pc}
    e910:	00012938 	.word	0x00012938
    e914:	00000703 	.word	0x00000703

0000e918 <g_lldI2c_WriteI2c0_bl>:
 *
 * 
 * \endinternal
 ***********************************************************************/
unsigned int g_lldI2c_WriteI2c0_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_i2cWriteBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    e918:	e92d4800 	push	{fp, lr}
    e91c:	e28db004 	add	fp, sp, #4
    e920:	e24dd018 	sub	sp, sp, #24
    e924:	e1a03000 	mov	r3, r0
    e928:	e50b1014 	str	r1, [fp, #-20]
    e92c:	e50b2018 	str	r2, [fp, #-24]
    e930:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_returnOfWrittenBytes_ui8 	= 0;
    e934:	e3a03000 	mov	r3, #0
    e938:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_WriteRetryCounter_ui8 	= 0;
    e93c:	e3a03000 	mov	r3, #0
    e940:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 				= 0;
    e944:	e3a03000 	mov	r3, #0
    e948:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C0_DEV_UI8, O_RDWR);
    e94c:	e59f009c 	ldr	r0, [pc, #156]	; e9f0 <g_lldI2c_WriteI2c0_bl+0xd8>
    e950:	e3a01002 	mov	r1, #2
    e954:	ebffe876 	bl	8b34 <_init+0x20>
    e958:	e1a03000 	mov	r3, r0
    e95c:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    e960:	e51b200c 	ldr	r2, [fp, #-12]
    e964:	e55b300d 	ldrb	r3, [fp, #-13]
    e968:	e1a00002 	mov	r0, r2
    e96c:	e59f1080 	ldr	r1, [pc, #128]	; e9f4 <g_lldI2c_WriteI2c0_bl+0xdc>
    e970:	e1a02003 	mov	r2, r3
    e974:	ebffe8bc 	bl	8c6c <_init+0x158>

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    e978:	ea000009 	b	e9a4 <g_lldI2c_WriteI2c0_bl+0x8c>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    e97c:	e51b300c 	ldr	r3, [fp, #-12]
    e980:	e1a00003 	mov	r0, r3
    e984:	e51b1014 	ldr	r1, [fp, #-20]
    e988:	e51b2018 	ldr	r2, [fp, #-24]
    e98c:	ebffe89e 	bl	8c0c <_init+0xf8>
    e990:	e1a03000 	mov	r3, r0
    e994:	e54b3005 	strb	r3, [fp, #-5]
		l_WriteRetryCounter_ui8++;
    e998:	e55b3006 	ldrb	r3, [fp, #-6]
    e99c:	e2833001 	add	r3, r3, #1
    e9a0:	e54b3006 	strb	r3, [fp, #-6]

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	//Write Buffer to I2C Slave Device
	while(		(l_returnOfWrittenBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    e9a4:	e55b2005 	ldrb	r2, [fp, #-5]
    e9a8:	e51b3018 	ldr	r3, [fp, #-24]
    e9ac:	e1520003 	cmp	r2, r3
    e9b0:	0a000002 	beq	e9c0 <g_lldI2c_WriteI2c0_bl+0xa8>
			&& 	(l_WriteRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    e9b4:	e55b3006 	ldrb	r3, [fp, #-6]
    e9b8:	e3530002 	cmp	r3, #2
    e9bc:	9affffee 	bls	e97c <g_lldI2c_WriteI2c0_bl+0x64>
	{
		l_returnOfWrittenBytes_ui8 = write(l_i2cFile_ui32, f_i2cWriteBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_WriteRetryCounter_ui8++;
	}

	if(l_WriteRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    e9c0:	e55b3006 	ldrb	r3, [fp, #-6]
    e9c4:	e3530002 	cmp	r3, #2
    e9c8:	9a000001 	bls	e9d4 <g_lldI2c_WriteI2c0_bl+0xbc>
	{
		return 1;
    e9cc:	e3a03001 	mov	r3, #1
    e9d0:	ea000003 	b	e9e4 <g_lldI2c_WriteI2c0_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    e9d4:	e51b300c 	ldr	r3, [fp, #-12]
    e9d8:	e1a00003 	mov	r0, r3
    e9dc:	ebffe8b7 	bl	8cc0 <_init+0x1ac>
	{
		/*ERROR HANDLER*/
		return 1;
	}

	return 0;
    e9e0:	e3a03000 	mov	r3, #0
}
    e9e4:	e1a00003 	mov	r0, r3
    e9e8:	e24bd004 	sub	sp, fp, #4
    e9ec:	e8bd8800 	pop	{fp, pc}
    e9f0:	00012944 	.word	0x00012944
    e9f4:	00000703 	.word	0x00000703

0000e9f8 <g_lldI2c_ReadI2c0_bl>:
 * 
 * 
 *  * \endinternal
 ***********************************************************************/ 
unsigned int g_lldI2c_ReadI2c0_bl(unsigned char f_lldI2c_i2cSlaveAddress_ui8, const unsigned char* f_lldI2c_i2cReadBuffer_pui8, unsigned int f_i2cNumOfDataBytes_ui32)
{
    e9f8:	e92d4800 	push	{fp, lr}
    e9fc:	e28db004 	add	fp, sp, #4
    ea00:	e24dd018 	sub	sp, sp, #24
    ea04:	e1a03000 	mov	r3, r0
    ea08:	e50b1014 	str	r1, [fp, #-20]
    ea0c:	e50b2018 	str	r2, [fp, #-24]
    ea10:	e54b300d 	strb	r3, [fp, #-13]
	unsigned char 	l_ReturnOfReadBytes_ui8 = 0;
    ea14:	e3a03000 	mov	r3, #0
    ea18:	e54b3005 	strb	r3, [fp, #-5]
	unsigned char 	l_ReadRetryCounter_ui8 	= 0;
    ea1c:	e3a03000 	mov	r3, #0
    ea20:	e54b3006 	strb	r3, [fp, #-6]
	unsigned int 	l_i2cFile_ui32 			= 0;
    ea24:	e3a03000 	mov	r3, #0
    ea28:	e50b300c 	str	r3, [fp, #-12]

	//Open I2C device
	l_i2cFile_ui32 = open(M_HAL_LLDI2C_I2C0_DEV_UI8, O_RDWR);   //Open I2C device
    ea2c:	e59f009c 	ldr	r0, [pc, #156]	; ead0 <g_lldI2c_ReadI2c0_bl+0xd8>
    ea30:	e3a01002 	mov	r1, #2
    ea34:	ebffe83e 	bl	8b34 <_init+0x20>
    ea38:	e1a03000 	mov	r3, r0
    ea3c:	e50b300c 	str	r3, [fp, #-12]
		/*ERROR HANDLER*/
		return 1;
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);
    ea40:	e51b200c 	ldr	r2, [fp, #-12]
    ea44:	e55b300d 	ldrb	r3, [fp, #-13]
    ea48:	e1a00002 	mov	r0, r2
    ea4c:	e59f1080 	ldr	r1, [pc, #128]	; ead4 <g_lldI2c_ReadI2c0_bl+0xdc>
    ea50:	e1a02003 	mov	r2, r3
    ea54:	ebffe884 	bl	8c6c <_init+0x158>

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    ea58:	ea000009 	b	ea84 <g_lldI2c_ReadI2c0_bl+0x8c>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
    ea5c:	e51b300c 	ldr	r3, [fp, #-12]
    ea60:	e1a00003 	mov	r0, r3
    ea64:	e51b1014 	ldr	r1, [fp, #-20]
    ea68:	e51b2018 	ldr	r2, [fp, #-24]
    ea6c:	ebffe863 	bl	8c00 <_init+0xec>
    ea70:	e1a03000 	mov	r3, r0
    ea74:	e54b3005 	strb	r3, [fp, #-5]
		l_ReadRetryCounter_ui8++;
    ea78:	e55b3006 	ldrb	r3, [fp, #-6]
    ea7c:	e2833001 	add	r3, r3, #1
    ea80:	e54b3006 	strb	r3, [fp, #-6]
	}

	//Specify the address of the I2C Slave to communicate with
	ioctl(l_i2cFile_ui32, I2C_SLAVE, f_lldI2c_i2cSlaveAddress_ui8);

	while(		(l_ReturnOfReadBytes_ui8 != f_i2cNumOfDataBytes_ui32)
    ea84:	e55b2005 	ldrb	r2, [fp, #-5]
    ea88:	e51b3018 	ldr	r3, [fp, #-24]
    ea8c:	e1520003 	cmp	r2, r3
    ea90:	0a000002 	beq	eaa0 <g_lldI2c_ReadI2c0_bl+0xa8>
			&& 	(l_ReadRetryCounter_ui8 < M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8) )
    ea94:	e55b3006 	ldrb	r3, [fp, #-6]
    ea98:	e3530002 	cmp	r3, #2
    ea9c:	9affffee 	bls	ea5c <g_lldI2c_ReadI2c0_bl+0x64>
	{
		l_ReturnOfReadBytes_ui8 = read(l_i2cFile_ui32, (void *)f_lldI2c_i2cReadBuffer_pui8, f_i2cNumOfDataBytes_ui32);
		l_ReadRetryCounter_ui8++;
	}

	if(l_ReadRetryCounter_ui8 >= M_HAL_LLDI2C_TRANSMISSION_RETRYNUM_UI8)
    eaa0:	e55b3006 	ldrb	r3, [fp, #-6]
    eaa4:	e3530002 	cmp	r3, #2
    eaa8:	9a000001 	bls	eab4 <g_lldI2c_ReadI2c0_bl+0xbc>
	{
		return 1;
    eaac:	e3a03001 	mov	r3, #1
    eab0:	ea000003 	b	eac4 <g_lldI2c_ReadI2c0_bl+0xcc>
	}

	//Close I2C device
	close(l_i2cFile_ui32);
    eab4:	e51b300c 	ldr	r3, [fp, #-12]
    eab8:	e1a00003 	mov	r0, r3
    eabc:	ebffe87f 	bl	8cc0 <_init+0x1ac>
	if(l_i2cFile_ui32 < 0)
	{
		/*ERROR HANDLER*/
		return 1;
	}
	return(0);
    eac0:	e3a03000 	mov	r3, #0

}
    eac4:	e1a00003 	mov	r0, r3
    eac8:	e24bd004 	sub	sp, fp, #4
    eacc:	e8bd8800 	pop	{fp, pc}
    ead0:	00012944 	.word	0x00012944
    ead4:	00000703 	.word	0x00000703

0000ead8 <g_lldUart_uartOpen_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_lldUart_uartOpen_i32(void)
{
    ead8:	e92d4800 	push	{fp, lr}
    eadc:	e28db004 	add	fp, sp, #4
    eae0:	e24dd040 	sub	sp, sp, #64	; 0x40
	l_filestream_i32 = open("/dev/ttyAMA0", O_RDWR | O_NOCTTY | O_NDELAY);
    eae4:	e59f00a8 	ldr	r0, [pc, #168]	; eb94 <g_lldUart_uartOpen_i32+0xbc>
    eae8:	e59f10a8 	ldr	r1, [pc, #168]	; eb98 <g_lldUart_uartOpen_i32+0xc0>
    eaec:	ebffe810 	bl	8b34 <_init+0x20>
    eaf0:	e1a02000 	mov	r2, r0
    eaf4:	e59f30a0 	ldr	r3, [pc, #160]	; eb9c <g_lldUart_uartOpen_i32+0xc4>
    eaf8:	e5832000 	str	r2, [r3]
	if (l_filestream_i32 == -1)
    eafc:	e59f3098 	ldr	r3, [pc, #152]	; eb9c <g_lldUart_uartOpen_i32+0xc4>
    eb00:	e5933000 	ldr	r3, [r3]
    eb04:	e3730001 	cmn	r3, #1
    eb08:	1a000001 	bne	eb14 <g_lldUart_uartOpen_i32+0x3c>
	{
		//Error UART can not be opened
		return(-1);
    eb0c:	e3e03000 	mvn	r3, #0
    eb10:	ea00001c 	b	eb88 <g_lldUart_uartOpen_i32+0xb0>
	}
	struct termios l_options_st;
	tcgetattr(l_filestream_i32, &l_options_st);
    eb14:	e59f3080 	ldr	r3, [pc, #128]	; eb9c <g_lldUart_uartOpen_i32+0xc4>
    eb18:	e5932000 	ldr	r2, [r3]
    eb1c:	e24b3040 	sub	r3, fp, #64	; 0x40
    eb20:	e1a00002 	mov	r0, r2
    eb24:	e1a01003 	mov	r1, r3
    eb28:	ebffe843 	bl	8c3c <_init+0x128>
	l_options_st.c_cflag = B9600 | CS8 | CLOCAL | CREAD;
    eb2c:	e59f306c 	ldr	r3, [pc, #108]	; eba0 <g_lldUart_uartOpen_i32+0xc8>
    eb30:	e50b3038 	str	r3, [fp, #-56]	; 0x38
	l_options_st.c_iflag = IGNPAR;
    eb34:	e3a03004 	mov	r3, #4
    eb38:	e50b3040 	str	r3, [fp, #-64]	; 0x40
	l_options_st.c_oflag = 0;
    eb3c:	e3a03000 	mov	r3, #0
    eb40:	e50b303c 	str	r3, [fp, #-60]	; 0x3c
	l_options_st.c_lflag = 0;
    eb44:	e3a03000 	mov	r3, #0
    eb48:	e50b3034 	str	r3, [fp, #-52]	; 0x34
	tcflush(l_filestream_i32, TCIFLUSH);
    eb4c:	e59f3048 	ldr	r3, [pc, #72]	; eb9c <g_lldUart_uartOpen_i32+0xc4>
    eb50:	e5933000 	ldr	r3, [r3]
    eb54:	e1a00003 	mov	r0, r3
    eb58:	e3a01000 	mov	r1, #0
    eb5c:	ebffe839 	bl	8c48 <_init+0x134>
	tcsetattr(l_filestream_i32, TCSANOW, &l_options_st);
    eb60:	e59f3034 	ldr	r3, [pc, #52]	; eb9c <g_lldUart_uartOpen_i32+0xc4>
    eb64:	e5932000 	ldr	r2, [r3]
    eb68:	e24b3040 	sub	r3, fp, #64	; 0x40
    eb6c:	e1a00002 	mov	r0, r2
    eb70:	e3a01000 	mov	r1, #0
    eb74:	e1a02003 	mov	r2, r3
    eb78:	ebffe86b 	bl	8d2c <_init+0x218>
	sleep(3);
    eb7c:	e3a00003 	mov	r0, #3
    eb80:	ebffe860 	bl	8d08 <_init+0x1f4>
	return(0);
    eb84:	e3a03000 	mov	r3, #0
}
    eb88:	e1a00003 	mov	r0, r3
    eb8c:	e24bd004 	sub	sp, fp, #4
    eb90:	e8bd8800 	pop	{fp, pc}
    eb94:	00012950 	.word	0x00012950
    eb98:	00000902 	.word	0x00000902
    eb9c:	0001b298 	.word	0x0001b298
    eba0:	000008bd 	.word	0x000008bd

0000eba4 <g_lldUart_readByte_ch>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
char g_lldUart_readByte_ch(void)
{
    eba4:	e92d4800 	push	{fp, lr}
    eba8:	e28db004 	add	fp, sp, #4
    ebac:	e24dd008 	sub	sp, sp, #8
	char l_recChar_ch='0';
    ebb0:	e3a03030 	mov	r3, #48	; 0x30
    ebb4:	e54b3009 	strb	r3, [fp, #-9]
	ssize_t l_nrReadBytes_ssize=0;
    ebb8:	e3a03000 	mov	r3, #0
    ebbc:	e50b3008 	str	r3, [fp, #-8]

	if (l_filestream_i32 == -1)
    ebc0:	e59f3064 	ldr	r3, [pc, #100]	; ec2c <g_lldUart_readByte_ch+0x88>
    ebc4:	e5933000 	ldr	r3, [r3]
    ebc8:	e3730001 	cmn	r3, #1
    ebcc:	1a000000 	bne	ebd4 <g_lldUart_readByte_ch+0x30>
	{
		g_lldUart_uartOpen_i32();
    ebd0:	ebffffc0 	bl	ead8 <g_lldUart_uartOpen_i32>
	}

	//read new values if l_filestream_i32 is opened
	if (l_filestream_i32 != -1)
    ebd4:	e59f3050 	ldr	r3, [pc, #80]	; ec2c <g_lldUart_readByte_ch+0x88>
    ebd8:	e5933000 	ldr	r3, [r3]
    ebdc:	e3730001 	cmn	r3, #1
    ebe0:	0a00000d 	beq	ec1c <g_lldUart_readByte_ch+0x78>
	{
		while (l_nrReadBytes_ssize!=1)
    ebe4:	ea000007 	b	ec08 <g_lldUart_readByte_ch+0x64>
		{ l_nrReadBytes_ssize=read(l_filestream_i32, &l_recChar_ch, 1);}
    ebe8:	e59f303c 	ldr	r3, [pc, #60]	; ec2c <g_lldUart_readByte_ch+0x88>
    ebec:	e5932000 	ldr	r2, [r3]
    ebf0:	e24b3009 	sub	r3, fp, #9
    ebf4:	e1a00002 	mov	r0, r2
    ebf8:	e1a01003 	mov	r1, r3
    ebfc:	e3a02001 	mov	r2, #1
    ec00:	ebffe7fe 	bl	8c00 <_init+0xec>
    ec04:	e50b0008 	str	r0, [fp, #-8]
	}

	//read new values if l_filestream_i32 is opened
	if (l_filestream_i32 != -1)
	{
		while (l_nrReadBytes_ssize!=1)
    ec08:	e51b3008 	ldr	r3, [fp, #-8]
    ec0c:	e3530001 	cmp	r3, #1
    ec10:	1afffff4 	bne	ebe8 <g_lldUart_readByte_ch+0x44>
		{ l_nrReadBytes_ssize=read(l_filestream_i32, &l_recChar_ch, 1);}
		return l_recChar_ch;
    ec14:	e55b3009 	ldrb	r3, [fp, #-9]
    ec18:	ea000000 	b	ec20 <g_lldUart_readByte_ch+0x7c>
	}
	return(-1);
    ec1c:	e3a030ff 	mov	r3, #255	; 0xff
}
    ec20:	e1a00003 	mov	r0, r3
    ec24:	e24bd004 	sub	sp, fp, #4
    ec28:	e8bd8800 	pop	{fp, pc}
    ec2c:	0001b298 	.word	0x0001b298

0000ec30 <g_lldUart_uartClose_i32>:
 * CHANGELOG:
 *
 * \endinternal
 ********************************************************************** */
int g_lldUart_uartClose_i32(void)
{
    ec30:	e92d4800 	push	{fp, lr}
    ec34:	e28db004 	add	fp, sp, #4
	close(l_filestream_i32);
    ec38:	e59f3014 	ldr	r3, [pc, #20]	; ec54 <g_lldUart_uartClose_i32+0x24>
    ec3c:	e5933000 	ldr	r3, [r3]
    ec40:	e1a00003 	mov	r0, r3
    ec44:	ebffe81d 	bl	8cc0 <_init+0x1ac>
	return(0);
    ec48:	e3a03000 	mov	r3, #0
}
    ec4c:	e1a00003 	mov	r0, r3
    ec50:	e8bd8800 	pop	{fp, pc}
    ec54:	0001b298 	.word	0x0001b298

0000ec58 <InitMotor>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
*****************************************************************/
void InitMotor(int microSeconds){
    ec58:	e92d4800 	push	{fp, lr}
    ec5c:	e28db004 	add	fp, sp, #4
    ec60:	e24dd008 	sub	sp, sp, #8
    ec64:	e50b0008 	str	r0, [fp, #-8]
	SetFlagRunSendPwmToMotor(0);
    ec68:	e3a00000 	mov	r0, #0
    ec6c:	eb0000e7 	bl	f010 <SetFlagRunSendPwmToMotor>
	SetMotorExecutionOrder();
    ec70:	eb000009 	bl	ec9c <SetMotorExecutionOrder>
	SetPwmMotor(DEFMotorALL_PWM, DEFMotorSetpointMIN, 0);
    ec74:	e3a000ff 	mov	r0, #255	; 0xff
    ec78:	e3a0100a 	mov	r1, #10
    ec7c:	e3a02000 	mov	r2, #0
    ec80:	eb00000b 	bl	ecb4 <SetPwmMotor>
	//Last one always initMotorTimer()
	InitMotorTimer(microSeconds);
    ec84:	e51b0008 	ldr	r0, [fp, #-8]
    ec88:	eb0000c0 	bl	ef90 <InitMotorTimer>
	SetFlagRunSendPwmToMotor(1);
    ec8c:	e3a00001 	mov	r0, #1
    ec90:	eb0000de 	bl	f010 <SetFlagRunSendPwmToMotor>
}
    ec94:	e24bd004 	sub	sp, fp, #4
    ec98:	e8bd8800 	pop	{fp, pc}

0000ec9c <SetMotorExecutionOrder>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
 *****************************************************************/
void SetMotorExecutionOrder(){
    ec9c:	e92d4800 	push	{fp, lr}
    eca0:	e28db004 	add	fp, sp, #4
	GetBLCtrlADRExecuteOrder(&BLCtrlADRExecuteOrder[0]);
    eca4:	e59f0004 	ldr	r0, [pc, #4]	; ecb0 <SetMotorExecutionOrder+0x14>
    eca8:	eb000119 	bl	f114 <GetBLCtrlADRExecuteOrder>
}
    ecac:	e8bd8800 	pop	{fp, pc}
    ecb0:	0001bd8c 	.word	0x0001bd8c

0000ecb4 <SetPwmMotor>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
*****************************************************************/
void SetPwmMotor(char toSet , int pwmValue, int forceSend){
    ecb4:	e92d4800 	push	{fp, lr}
    ecb8:	e28db004 	add	fp, sp, #4
    ecbc:	e24dd018 	sub	sp, sp, #24
    ecc0:	e1a03000 	mov	r3, r0
    ecc4:	e50b1014 	str	r1, [fp, #-20]
    ecc8:	e50b2018 	str	r2, [fp, #-24]
    eccc:	e54b300d 	strb	r3, [fp, #-13]
	int i=0;
    ecd0:	e3a03000 	mov	r3, #0
    ecd4:	e50b3008 	str	r3, [fp, #-8]
	pwmValue = pwmValue >= DEFMotorSetpointMIN ? pwmValue :  DEFMotorSetpointMIN;
    ecd8:	e51b3014 	ldr	r3, [fp, #-20]
    ecdc:	e353000a 	cmp	r3, #10
    ece0:	a1a03003 	movge	r3, r3
    ece4:	b3a0300a 	movlt	r3, #10
    ece8:	e50b3014 	str	r3, [fp, #-20]
	pwmValue = pwmValue <= DEFMotorSetpointMAX ?  pwmValue :  DEFMotorSetpointMAX;
    ecec:	e51b3014 	ldr	r3, [fp, #-20]
    ecf0:	e35300ff 	cmp	r3, #255	; 0xff
    ecf4:	b1a03003 	movlt	r3, r3
    ecf8:	a3a030ff 	movge	r3, #255	; 0xff
    ecfc:	e50b3014 	str	r3, [fp, #-20]
	while(toSet != 0 && i < DEFMotorsCount){
    ed00:	ea000010 	b	ed48 <SetPwmMotor+0x94>

			if(toSet%2){
    ed04:	e55b300d 	ldrb	r3, [fp, #-13]
    ed08:	e2033001 	and	r3, r3, #1
    ed0c:	e6ef3073 	uxtb	r3, r3
    ed10:	e3530000 	cmp	r3, #0
    ed14:	0a000005 	beq	ed30 <SetPwmMotor+0x7c>
				PWMValue[i]= pwmValue;
    ed18:	e51b3014 	ldr	r3, [fp, #-20]
    ed1c:	e6ef2073 	uxtb	r2, r3
    ed20:	e59f1054 	ldr	r1, [pc, #84]	; ed7c <SetPwmMotor+0xc8>
    ed24:	e51b3008 	ldr	r3, [fp, #-8]
    ed28:	e0813003 	add	r3, r1, r3
    ed2c:	e5c32000 	strb	r2, [r3]
			}
			toSet= toSet >>1;
    ed30:	e55b300d 	ldrb	r3, [fp, #-13]
    ed34:	e1a030a3 	lsr	r3, r3, #1
    ed38:	e54b300d 	strb	r3, [fp, #-13]
			i++;
    ed3c:	e51b3008 	ldr	r3, [fp, #-8]
    ed40:	e2833001 	add	r3, r3, #1
    ed44:	e50b3008 	str	r3, [fp, #-8]
*****************************************************************/
void SetPwmMotor(char toSet , int pwmValue, int forceSend){
	int i=0;
	pwmValue = pwmValue >= DEFMotorSetpointMIN ? pwmValue :  DEFMotorSetpointMIN;
	pwmValue = pwmValue <= DEFMotorSetpointMAX ?  pwmValue :  DEFMotorSetpointMAX;
	while(toSet != 0 && i < DEFMotorsCount){
    ed48:	e55b300d 	ldrb	r3, [fp, #-13]
    ed4c:	e3530000 	cmp	r3, #0
    ed50:	0a000002 	beq	ed60 <SetPwmMotor+0xac>
    ed54:	e51b3008 	ldr	r3, [fp, #-8]
    ed58:	e3530003 	cmp	r3, #3
    ed5c:	daffffe8 	ble	ed04 <SetPwmMotor+0x50>
				PWMValue[i]= pwmValue;
			}
			toSet= toSet >>1;
			i++;
		}
		if(forceSend != 0){
    ed60:	e51b3018 	ldr	r3, [fp, #-24]
    ed64:	e3530000 	cmp	r3, #0
    ed68:	0a000001 	beq	ed74 <SetPwmMotor+0xc0>
			SetFlagRunSendPwmToMotor(1);
    ed6c:	e3a00001 	mov	r0, #1
    ed70:	eb0000a6 	bl	f010 <SetFlagRunSendPwmToMotor>
	}
}
    ed74:	e24bd004 	sub	sp, fp, #4
    ed78:	e8bd8800 	pop	{fp, pc}
    ed7c:	0001bd88 	.word	0x0001bd88

0000ed80 <AddPwmMotor>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
 *****************************************************************/
void AddPwmMotor(char toSet , int pwmValue, int forceSend){
    ed80:	e92d4800 	push	{fp, lr}
    ed84:	e28db004 	add	fp, sp, #4
    ed88:	e24dd018 	sub	sp, sp, #24
    ed8c:	e1a03000 	mov	r3, r0
    ed90:	e50b1014 	str	r1, [fp, #-20]
    ed94:	e50b2018 	str	r2, [fp, #-24]
    ed98:	e54b300d 	strb	r3, [fp, #-13]
	int i=0;
    ed9c:	e3a03000 	mov	r3, #0
    eda0:	e50b3008 	str	r3, [fp, #-8]

	while(toSet != 0 && i < DEFMotorsCount){
    eda4:	ea000020 	b	ee2c <AddPwmMotor+0xac>

			if(toSet%2){
    eda8:	e55b300d 	ldrb	r3, [fp, #-13]
    edac:	e2033001 	and	r3, r3, #1
    edb0:	e6ef3073 	uxtb	r3, r3
    edb4:	e3530000 	cmp	r3, #0
    edb8:	0a000015 	beq	ee14 <AddPwmMotor+0x94>
				pwmValue = pwmValue+GetPwmMotor(i);
    edbc:	e51b0008 	ldr	r0, [fp, #-8]
    edc0:	eb000060 	bl	ef48 <GetPwmMotor>
    edc4:	e1a03000 	mov	r3, r0
    edc8:	e51b2014 	ldr	r2, [fp, #-20]
    edcc:	e0823003 	add	r3, r2, r3
    edd0:	e50b3014 	str	r3, [fp, #-20]
				pwmValue = pwmValue >= DEFMotorSetpointMIN ? pwmValue :  DEFMotorSetpointMIN;
    edd4:	e51b3014 	ldr	r3, [fp, #-20]
    edd8:	e353000a 	cmp	r3, #10
    eddc:	a1a03003 	movge	r3, r3
    ede0:	b3a0300a 	movlt	r3, #10
    ede4:	e50b3014 	str	r3, [fp, #-20]
				pwmValue = pwmValue <= DEFMotorSetpointMAX ?  pwmValue :  DEFMotorSetpointMAX;
    ede8:	e51b3014 	ldr	r3, [fp, #-20]
    edec:	e35300ff 	cmp	r3, #255	; 0xff
    edf0:	b1a03003 	movlt	r3, r3
    edf4:	a3a030ff 	movge	r3, #255	; 0xff
    edf8:	e50b3014 	str	r3, [fp, #-20]
				PWMValue[i]= pwmValue;
    edfc:	e51b3014 	ldr	r3, [fp, #-20]
    ee00:	e6ef2073 	uxtb	r2, r3
    ee04:	e59f1054 	ldr	r1, [pc, #84]	; ee60 <AddPwmMotor+0xe0>
    ee08:	e51b3008 	ldr	r3, [fp, #-8]
    ee0c:	e0813003 	add	r3, r1, r3
    ee10:	e5c32000 	strb	r2, [r3]
			}
			toSet= toSet >>1;
    ee14:	e55b300d 	ldrb	r3, [fp, #-13]
    ee18:	e1a030a3 	lsr	r3, r3, #1
    ee1c:	e54b300d 	strb	r3, [fp, #-13]
			i++;
    ee20:	e51b3008 	ldr	r3, [fp, #-8]
    ee24:	e2833001 	add	r3, r3, #1
    ee28:	e50b3008 	str	r3, [fp, #-8]
 * \endinternal
 *****************************************************************/
void AddPwmMotor(char toSet , int pwmValue, int forceSend){
	int i=0;

	while(toSet != 0 && i < DEFMotorsCount){
    ee2c:	e55b300d 	ldrb	r3, [fp, #-13]
    ee30:	e3530000 	cmp	r3, #0
    ee34:	0a000002 	beq	ee44 <AddPwmMotor+0xc4>
    ee38:	e51b3008 	ldr	r3, [fp, #-8]
    ee3c:	e3530003 	cmp	r3, #3
    ee40:	daffffd8 	ble	eda8 <AddPwmMotor+0x28>
				PWMValue[i]= pwmValue;
			}
			toSet= toSet >>1;
			i++;
		}
		if(forceSend != 0){
    ee44:	e51b3018 	ldr	r3, [fp, #-24]
    ee48:	e3530000 	cmp	r3, #0
    ee4c:	0a000001 	beq	ee58 <AddPwmMotor+0xd8>
			SetFlagRunSendPwmToMotor(1);
    ee50:	e3a00001 	mov	r0, #1
    ee54:	eb00006d 	bl	f010 <SetFlagRunSendPwmToMotor>
	}
}
    ee58:	e24bd004 	sub	sp, fp, #4
    ee5c:	e8bd8800 	pop	{fp, pc}
    ee60:	0001bd88 	.word	0x0001bd88

0000ee64 <SubbPwmMotor>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
*****************************************************************/
void SubbPwmMotor(char toSet , int pwmValue, int forceSend){
    ee64:	e92d4800 	push	{fp, lr}
    ee68:	e28db004 	add	fp, sp, #4
    ee6c:	e24dd018 	sub	sp, sp, #24
    ee70:	e1a03000 	mov	r3, r0
    ee74:	e50b1014 	str	r1, [fp, #-20]
    ee78:	e50b2018 	str	r2, [fp, #-24]
    ee7c:	e54b300d 	strb	r3, [fp, #-13]
	int i=0;
    ee80:	e3a03000 	mov	r3, #0
    ee84:	e50b3008 	str	r3, [fp, #-8]

	while(toSet != 0 && i < DEFMotorsCount){
    ee88:	ea000020 	b	ef10 <SubbPwmMotor+0xac>

			if(toSet%2){
    ee8c:	e55b300d 	ldrb	r3, [fp, #-13]
    ee90:	e2033001 	and	r3, r3, #1
    ee94:	e6ef3073 	uxtb	r3, r3
    ee98:	e3530000 	cmp	r3, #0
    ee9c:	0a000015 	beq	eef8 <SubbPwmMotor+0x94>
				pwmValue = GetPwmMotor(i)- pwmValue;
    eea0:	e51b0008 	ldr	r0, [fp, #-8]
    eea4:	eb000027 	bl	ef48 <GetPwmMotor>
    eea8:	e1a02000 	mov	r2, r0
    eeac:	e51b3014 	ldr	r3, [fp, #-20]
    eeb0:	e0633002 	rsb	r3, r3, r2
    eeb4:	e50b3014 	str	r3, [fp, #-20]
				pwmValue = pwmValue >= DEFMotorSetpointMIN ? pwmValue :  DEFMotorSetpointMIN;
    eeb8:	e51b3014 	ldr	r3, [fp, #-20]
    eebc:	e353000a 	cmp	r3, #10
    eec0:	a1a03003 	movge	r3, r3
    eec4:	b3a0300a 	movlt	r3, #10
    eec8:	e50b3014 	str	r3, [fp, #-20]
				pwmValue = pwmValue <= DEFMotorSetpointMAX ?  pwmValue :  DEFMotorSetpointMAX;
    eecc:	e51b3014 	ldr	r3, [fp, #-20]
    eed0:	e35300ff 	cmp	r3, #255	; 0xff
    eed4:	b1a03003 	movlt	r3, r3
    eed8:	a3a030ff 	movge	r3, #255	; 0xff
    eedc:	e50b3014 	str	r3, [fp, #-20]
				PWMValue[i]= pwmValue;
    eee0:	e51b3014 	ldr	r3, [fp, #-20]
    eee4:	e6ef2073 	uxtb	r2, r3
    eee8:	e59f1054 	ldr	r1, [pc, #84]	; ef44 <SubbPwmMotor+0xe0>
    eeec:	e51b3008 	ldr	r3, [fp, #-8]
    eef0:	e0813003 	add	r3, r1, r3
    eef4:	e5c32000 	strb	r2, [r3]
			}
			toSet= toSet >>1;
    eef8:	e55b300d 	ldrb	r3, [fp, #-13]
    eefc:	e1a030a3 	lsr	r3, r3, #1
    ef00:	e54b300d 	strb	r3, [fp, #-13]
			i++;
    ef04:	e51b3008 	ldr	r3, [fp, #-8]
    ef08:	e2833001 	add	r3, r3, #1
    ef0c:	e50b3008 	str	r3, [fp, #-8]
 * \endinternal
*****************************************************************/
void SubbPwmMotor(char toSet , int pwmValue, int forceSend){
	int i=0;

	while(toSet != 0 && i < DEFMotorsCount){
    ef10:	e55b300d 	ldrb	r3, [fp, #-13]
    ef14:	e3530000 	cmp	r3, #0
    ef18:	0a000002 	beq	ef28 <SubbPwmMotor+0xc4>
    ef1c:	e51b3008 	ldr	r3, [fp, #-8]
    ef20:	e3530003 	cmp	r3, #3
    ef24:	daffffd8 	ble	ee8c <SubbPwmMotor+0x28>
				PWMValue[i]= pwmValue;
			}
			toSet= toSet >>1;
			i++;
		}
		if(forceSend != 0){
    ef28:	e51b3018 	ldr	r3, [fp, #-24]
    ef2c:	e3530000 	cmp	r3, #0
    ef30:	0a000001 	beq	ef3c <SubbPwmMotor+0xd8>
			SetFlagRunSendPwmToMotor(1);
    ef34:	e3a00001 	mov	r0, #1
    ef38:	eb000034 	bl	f010 <SetFlagRunSendPwmToMotor>
	}
}
    ef3c:	e24bd004 	sub	sp, fp, #4
    ef40:	e8bd8800 	pop	{fp, pc}
    ef44:	0001bd88 	.word	0x0001bd88

0000ef48 <GetPwmMotor>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
 *****************************************************************/
int GetPwmMotor(int motorNumber){
    ef48:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    ef4c:	e28db000 	add	fp, sp, #0
    ef50:	e24dd00c 	sub	sp, sp, #12
    ef54:	e50b0008 	str	r0, [fp, #-8]
	return motorNumber < DEFMotorsCount ? PWMValue[motorNumber]: 0;
    ef58:	e51b3008 	ldr	r3, [fp, #-8]
    ef5c:	e3530003 	cmp	r3, #3
    ef60:	ca000004 	bgt	ef78 <GetPwmMotor+0x30>
    ef64:	e59f2020 	ldr	r2, [pc, #32]	; ef8c <GetPwmMotor+0x44>
    ef68:	e51b3008 	ldr	r3, [fp, #-8]
    ef6c:	e0823003 	add	r3, r2, r3
    ef70:	e5d33000 	ldrb	r3, [r3]
    ef74:	ea000000 	b	ef7c <GetPwmMotor+0x34>
    ef78:	e3a03000 	mov	r3, #0
}
    ef7c:	e1a00003 	mov	r0, r3
    ef80:	e24bd000 	sub	sp, fp, #0
    ef84:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    ef88:	e12fff1e 	bx	lr
    ef8c:	0001bd88 	.word	0x0001bd88

0000ef90 <InitMotorTimer>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
 *****************************************************************/
void InitMotorTimer(int microSeconds){
    ef90:	e92d4800 	push	{fp, lr}
    ef94:	e28db004 	add	fp, sp, #4
    ef98:	e24dd0a8 	sub	sp, sp, #168	; 0xa8
    ef9c:	e50b00a8 	str	r0, [fp, #-168]	; 0xa8

	struct sigaction sa;
	struct itimerval timer;

	//Creates Signal, if signal Rising a_handler called
	memset(&sa, 0 , sizeof(sa));
    efa0:	e24b3090 	sub	r3, fp, #144	; 0x90
    efa4:	e1a00003 	mov	r0, r3
    efa8:	e3a01000 	mov	r1, #0
    efac:	e3a0208c 	mov	r2, #140	; 0x8c
    efb0:	ebffe706 	bl	8bd0 <_init+0xbc>
	sa.sa_handler = &IsrSetFlag;
    efb4:	e59f3050 	ldr	r3, [pc, #80]	; f00c <InitMotorTimer+0x7c>
    efb8:	e50b3090 	str	r3, [fp, #-144]	; 0x90
	sigaction(SIGVTALRM, &sa, NULL);
    efbc:	e24b3090 	sub	r3, fp, #144	; 0x90
    efc0:	e3a0001a 	mov	r0, #26
    efc4:	e1a01003 	mov	r1, r3
    efc8:	e3a02000 	mov	r2, #0
    efcc:	ebffe744 	bl	8ce4 <_init+0x1d0>

	//Expire the Timer after:
	timer.it_value.tv_sec = 0;
    efd0:	e3a03000 	mov	r3, #0
    efd4:	e50b3098 	str	r3, [fp, #-152]	; 0x98
	timer.it_value.tv_usec = 0;
    efd8:	e3a03000 	mov	r3, #0
    efdc:	e50b3094 	str	r3, [fp, #-148]	; 0x94
	//And every ... after that:
	timer.it_interval.tv_sec = 0;
    efe0:	e3a03000 	mov	r3, #0
    efe4:	e50b30a0 	str	r3, [fp, #-160]	; 0xa0
	timer.it_interval.tv_usec = microSeconds;
    efe8:	e51b30a8 	ldr	r3, [fp, #-168]	; 0xa8
    efec:	e50b309c 	str	r3, [fp, #-156]	; 0x9c
	//upon expiration the signal SIGVTALRM raised
	setitimer(ITIMER_VIRTUAL, &timer , NULL);
    eff0:	e24b30a0 	sub	r3, fp, #160	; 0xa0
    eff4:	e3a00001 	mov	r0, #1
    eff8:	e1a01003 	mov	r1, r3
    effc:	e3a02000 	mov	r2, #0
    f000:	ebffe6f5 	bl	8bdc <_init+0xc8>
}
    f004:	e24bd004 	sub	sp, fp, #4
    f008:	e8bd8800 	pop	{fp, pc}
    f00c:	0000f05c 	.word	0x0000f05c

0000f010 <SetFlagRunSendPwmToMotor>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
 *****************************************************************/
void SetFlagRunSendPwmToMotor(char value){
    f010:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    f014:	e28db000 	add	fp, sp, #0
    f018:	e24dd00c 	sub	sp, sp, #12
    f01c:	e1a03000 	mov	r3, r0
    f020:	e54b3005 	strb	r3, [fp, #-5]
	if(value == 1){
    f024:	e55b3005 	ldrb	r3, [fp, #-5]
    f028:	e3530001 	cmp	r3, #1
    f02c:	1a000003 	bne	f040 <SetFlagRunSendPwmToMotor+0x30>
		flagRunSendPwmToMotor=value;
    f030:	e59f3020 	ldr	r3, [pc, #32]	; f058 <SetFlagRunSendPwmToMotor+0x48>
    f034:	e55b2005 	ldrb	r2, [fp, #-5]
    f038:	e5c32000 	strb	r2, [r3]
    f03c:	ea000002 	b	f04c <SetFlagRunSendPwmToMotor+0x3c>
	}else{
		flagRunSendPwmToMotor=0;
    f040:	e59f3010 	ldr	r3, [pc, #16]	; f058 <SetFlagRunSendPwmToMotor+0x48>
    f044:	e3a02000 	mov	r2, #0
    f048:	e5c32000 	strb	r2, [r3]
	}
}
    f04c:	e24bd000 	sub	sp, fp, #0
    f050:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    f054:	e12fff1e 	bx	lr
    f058:	0001bd90 	.word	0x0001bd90

0000f05c <IsrSetFlag>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
*****************************************************************/
void IsrSetFlag(){
    f05c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    f060:	e28db000 	add	fp, sp, #0
	flagRunSendPwmToMotor=1;
    f064:	e59f3010 	ldr	r3, [pc, #16]	; f07c <IsrSetFlag+0x20>
    f068:	e3a02001 	mov	r2, #1
    f06c:	e5c32000 	strb	r2, [r3]
}
    f070:	e24bd000 	sub	sp, fp, #0
    f074:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    f078:	e12fff1e 	bx	lr
    f07c:	0001bd90 	.word	0x0001bd90

0000f080 <GetFlagRunSendPwmToMotor>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
*****************************************************************/
char GetFlagRunSendPwmToMotor(){
    f080:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    f084:	e28db000 	add	fp, sp, #0
	return flagRunSendPwmToMotor;
    f088:	e59f3010 	ldr	r3, [pc, #16]	; f0a0 <GetFlagRunSendPwmToMotor+0x20>
    f08c:	e5d33000 	ldrb	r3, [r3]
}
    f090:	e1a00003 	mov	r0, r3
    f094:	e24bd000 	sub	sp, fp, #0
    f098:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    f09c:	e12fff1e 	bx	lr
    f0a0:	0001bd90 	.word	0x0001bd90

0000f0a4 <sendPwmToMotor>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
*****************************************************************/
void sendPwmToMotor(){
    f0a4:	e92d4800 	push	{fp, lr}
    f0a8:	e28db004 	add	fp, sp, #4
    f0ac:	e24dd008 	sub	sp, sp, #8
	int i;
	for(i = 0; i < DEFMotorsCount ;i++)
    f0b0:	e3a03000 	mov	r3, #0
    f0b4:	e50b3008 	str	r3, [fp, #-8]
    f0b8:	ea00000e 	b	f0f8 <sendPwmToMotor+0x54>
	{
		g_lldI2c_WriteI2c_bl(BLCtrlADRExecuteOrder[i],&PWMValue[i],1);
    f0bc:	e59f2048 	ldr	r2, [pc, #72]	; f10c <sendPwmToMotor+0x68>
    f0c0:	e51b3008 	ldr	r3, [fp, #-8]
    f0c4:	e0823003 	add	r3, r2, r3
    f0c8:	e5d33000 	ldrb	r3, [r3]
    f0cc:	e1a02003 	mov	r2, r3
    f0d0:	e51b1008 	ldr	r1, [fp, #-8]
    f0d4:	e59f3034 	ldr	r3, [pc, #52]	; f110 <sendPwmToMotor+0x6c>
    f0d8:	e0813003 	add	r3, r1, r3
    f0dc:	e1a00002 	mov	r0, r2
    f0e0:	e1a01003 	mov	r1, r3
    f0e4:	e3a02001 	mov	r2, #1
    f0e8:	ebfffd9a 	bl	e758 <g_lldI2c_WriteI2c_bl>
 *
 * \endinternal
*****************************************************************/
void sendPwmToMotor(){
	int i;
	for(i = 0; i < DEFMotorsCount ;i++)
    f0ec:	e51b3008 	ldr	r3, [fp, #-8]
    f0f0:	e2833001 	add	r3, r3, #1
    f0f4:	e50b3008 	str	r3, [fp, #-8]
    f0f8:	e51b3008 	ldr	r3, [fp, #-8]
    f0fc:	e3530003 	cmp	r3, #3
    f100:	daffffed 	ble	f0bc <sendPwmToMotor+0x18>
	{
		g_lldI2c_WriteI2c_bl(BLCtrlADRExecuteOrder[i],&PWMValue[i],1);
	}
}
    f104:	e24bd004 	sub	sp, fp, #4
    f108:	e8bd8800 	pop	{fp, pc}
    f10c:	0001bd8c 	.word	0x0001bd8c
    f110:	0001bd88 	.word	0x0001bd88

0000f114 <GetBLCtrlADRExecuteOrder>:
 * \internal
 * CHANGELOG:
 *
 * \endinternal
*****************************************************************/
void GetBLCtrlADRExecuteOrder(char BLCtrlADRExecuteOrder[]){
    f114:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    f118:	e28db000 	add	fp, sp, #0
    f11c:	e24dd01c 	sub	sp, sp, #28
    f120:	e50b0018 	str	r0, [fp, #-24]
#if defined(Quadro_X) || defined(Quadro_Plus)
	int BLCTRLADR[4] = {DEFMotorNo1_BLCtrlADR, DEFMotorNo2_BLCtrlADR, DEFMotorNo3_BLCtrlADR, DEFMotorNo4_BLCtrlADR};
    f124:	e59f3060 	ldr	r3, [pc, #96]	; f18c <GetBLCtrlADRExecuteOrder+0x78>
    f128:	e24bc014 	sub	ip, fp, #20
    f12c:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    f130:	e88c000f 	stm	ip, {r0, r1, r2, r3}

	BLCtrlADRExecuteOrder[DEFMotorNo1_OrderIDX ]=BLCTRLADR[0];
    f134:	e51b3014 	ldr	r3, [fp, #-20]
    f138:	e6ef2073 	uxtb	r2, r3
    f13c:	e51b3018 	ldr	r3, [fp, #-24]
    f140:	e5c32000 	strb	r2, [r3]
					BLCtrlADRExecuteOrder[DEFMotorNo2_OrderIDX]=BLCTRLADR[1];
    f144:	e51b3018 	ldr	r3, [fp, #-24]
    f148:	e2833002 	add	r3, r3, #2
    f14c:	e51b2010 	ldr	r2, [fp, #-16]
    f150:	e6ef2072 	uxtb	r2, r2
    f154:	e5c32000 	strb	r2, [r3]
					BLCtrlADRExecuteOrder[DEFMotorNo3_OrderIDX]=BLCTRLADR[2];
    f158:	e51b3018 	ldr	r3, [fp, #-24]
    f15c:	e2833001 	add	r3, r3, #1
    f160:	e51b200c 	ldr	r2, [fp, #-12]
    f164:	e6ef2072 	uxtb	r2, r2
    f168:	e5c32000 	strb	r2, [r3]
					BLCtrlADRExecuteOrder[DEFMotorNo4_OrderIDX]=BLCTRLADR[3];
    f16c:	e51b3018 	ldr	r3, [fp, #-24]
    f170:	e2833003 	add	r3, r3, #3
    f174:	e51b2008 	ldr	r2, [fp, #-8]
    f178:	e6ef2072 	uxtb	r2, r2
    f17c:	e5c32000 	strb	r2, [r3]
	BLCtrlADRExecuteOrder[DEFMotorNo6_OrderIDX]=BLCTRLADR[5];
	BLCtrlADRExecuteOrder[DEFMotorNo7_OrderIDX]=BLCTRLADR[6];
	BLCtrlADRExecuteOrder[DEFMotorNo8_OrderIDX]=BLCTRLADR[7];

#endif
}
    f180:	e24bd000 	sub	sp, fp, #0
    f184:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    f188:	e12fff1e 	bx	lr
    f18c:	00012960 	.word	0x00012960

0000f190 <g_halMatlab_sendImuState_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_sendImuState_bl(	int f_socketHandler_i32,
											halImu_orientationValues f_imuState_st) {
    f190:	e24dd008 	sub	sp, sp, #8
    f194:	e92d4800 	push	{fp, lr}
    f198:	e28db004 	add	fp, sp, #4
    f19c:	e24dd070 	sub	sp, sp, #112	; 0x70
    f1a0:	e50b0070 	str	r0, [fp, #-112]	; 0x70
    f1a4:	e28b1004 	add	r1, fp, #4
    f1a8:	e881000c 	stm	r1, {r2, r3}
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    f1ac:	e24b306c 	sub	r3, fp, #108	; 0x6c
    f1b0:	e3a00000 	mov	r0, #0
    f1b4:	e1a01003 	mov	r1, r3
    f1b8:	ebffe666 	bl	8b58 <_init+0x44>
    f1bc:	e1a03000 	mov	r3, r0
    f1c0:	e3530000 	cmp	r3, #0
    f1c4:	0a000001 	beq	f1d0 <g_halMatlab_sendImuState_bl+0x40>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    f1c8:	e3a03001 	mov	r3, #1
    f1cc:	ea000010 	b	f214 <g_halMatlab_sendImuState_bl+0x84>
	}

	//assmeble timestamp and
	l_rtImuPayload_st.timestamp_st 	= l_timestamp_st;
    f1d0:	e24b3064 	sub	r3, fp, #100	; 0x64
    f1d4:	e24b206c 	sub	r2, fp, #108	; 0x6c
    f1d8:	e8920003 	ldm	r2, {r0, r1}
    f1dc:	e8830003 	stm	r3, {r0, r1}
	l_rtImuPayload_st.imuState_st	= f_imuState_st;
    f1e0:	e24b105c 	sub	r1, fp, #92	; 0x5c
    f1e4:	e28b2004 	add	r2, fp, #4
    f1e8:	e3a03058 	mov	r3, #88	; 0x58
    f1ec:	e1a00001 	mov	r0, r1
    f1f0:	e1a01002 	mov	r1, r2
    f1f4:	e1a02003 	mov	r2, r3
    f1f8:	ebffe6a1 	bl	8c84 <_init+0x170>

	return g_halMatlab_sendPacket_bl( 	f_socketHandler_i32,
    f1fc:	e24b3064 	sub	r3, fp, #100	; 0x64
    f200:	e51b0070 	ldr	r0, [fp, #-112]	; 0x70
    f204:	e1a01003 	mov	r1, r3
    f208:	e3a02060 	mov	r2, #96	; 0x60
    f20c:	eb000175 	bl	f7e8 <g_halMatlab_sendPacket_bl>
    f210:	e1a03000 	mov	r3, r0
										(unsigned char*)&l_rtImuPayload_st,
										sizeof( l_rtImuPayload_st ) );
}
    f214:	e1a00003 	mov	r0, r3
    f218:	e24bd004 	sub	sp, fp, #4
    f21c:	e8bd4800 	pop	{fp, lr}
    f220:	e28dd008 	add	sp, sp, #8
    f224:	e12fff1e 	bx	lr

0000f228 <g_halMatlab_recvImuStateAndTime_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halMatlab_rtImuPayload g_halMatlab_recvImuStateAndTime_bl(int f_socketHandler_i32) {
    f228:	e92d4800 	push	{fp, lr}
    f22c:	e28db004 	add	fp, sp, #4
    f230:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
    f234:	e50b00d0 	str	r0, [fp, #-208]	; 0xd0
    f238:	e50b10d4 	str	r1, [fp, #-212]	; 0xd4
	halMatlab_rtImuPayload 		l_recvImuState_st;
	unsigned char				l_recvBuffer_rgXui8[ sizeof(halMatlab_rtImuPayload) ];
	unsigned int				l_recvBytesNumber_ui32;

	// zero all values
	l_recvImuState_st.timestamp_st.tv_sec 	= 0;
    f23c:	e3a03000 	mov	r3, #0
    f240:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
	l_recvImuState_st.timestamp_st.tv_nsec 	= 0;
    f244:	e3a03000 	mov	r3, #0
    f248:	e50b3068 	str	r3, [fp, #-104]	; 0x68

	l_recvImuState_st.imuState_st.acc.x_f64 = 0;
    f24c:	e3a02000 	mov	r2, #0
    f250:	e3a03000 	mov	r3, #0
    f254:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
	l_recvImuState_st.imuState_st.acc.y_f64 = 0;
    f258:	e3a02000 	mov	r2, #0
    f25c:	e3a03000 	mov	r3, #0
    f260:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	l_recvImuState_st.imuState_st.acc.z_f64 = 0;
    f264:	e3a02000 	mov	r2, #0
    f268:	e3a03000 	mov	r3, #0
    f26c:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac

	l_recvImuState_st.imuState_st.gyro.pitch_f64 = 0;
    f270:	e3a02000 	mov	r2, #0
    f274:	e3a03000 	mov	r3, #0
    f278:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
	l_recvImuState_st.imuState_st.gyro.roll_f64 = 0;
    f27c:	e3a02000 	mov	r2, #0
    f280:	e3a03000 	mov	r3, #0
    f284:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	l_recvImuState_st.imuState_st.gyro.yaw_f64 = 0;
    f288:	e3a02000 	mov	r2, #0
    f28c:	e3a03000 	mov	r3, #0
    f290:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc

	l_recvImuState_st.imuState_st.mag.x_f64 = 0;
    f294:	e3a02000 	mov	r2, #0
    f298:	e3a03000 	mov	r3, #0
    f29c:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
	l_recvImuState_st.imuState_st.mag.y_f64 = 0;
    f2a0:	e3a02000 	mov	r2, #0
    f2a4:	e3a03000 	mov	r3, #0
    f2a8:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	l_recvImuState_st.imuState_st.mag.z_f64 = 0;
    f2ac:	e3a02000 	mov	r2, #0
    f2b0:	e3a03000 	mov	r3, #0
    f2b4:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4

	l_recvImuState_st.imuState_st.pressure_f64 = 0;
    f2b8:	e3a02000 	mov	r2, #0
    f2bc:	e3a03000 	mov	r3, #0
    f2c0:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	l_recvImuState_st.imuState_st.temperature_f64 = 0;
    f2c4:	e3a02000 	mov	r2, #0
    f2c8:	e3a03000 	mov	r3, #0
    f2cc:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    f2d0:	e24b30cc 	sub	r3, fp, #204	; 0xcc
    f2d4:	e51b00d4 	ldr	r0, [fp, #-212]	; 0xd4
    f2d8:	e1a01003 	mov	r1, r3
    f2dc:	e3a02060 	mov	r2, #96	; 0x60
    f2e0:	eb00019f 	bl	f964 <g_halMatlab_recvPacket_ui32>
    f2e4:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halMatlab_rtImuPayload) );

	if ( l_recvBytesNumber_ui32 == sizeof(halMatlab_rtImuPayload) )
    f2e8:	e51b3008 	ldr	r3, [fp, #-8]
    f2ec:	e3530060 	cmp	r3, #96	; 0x60
    f2f0:	1a000005 	bne	f30c <g_halMatlab_recvImuStateAndTime_bl+0xe4>
	{
		memcpy( &l_recvImuState_st, &l_recvBuffer_rgXui8, sizeof(halMatlab_rtImuPayload));
    f2f4:	e24b206c 	sub	r2, fp, #108	; 0x6c
    f2f8:	e24b30cc 	sub	r3, fp, #204	; 0xcc
    f2fc:	e1a00002 	mov	r0, r2
    f300:	e1a01003 	mov	r1, r3
    f304:	e3a02060 	mov	r2, #96	; 0x60
    f308:	ebffe65d 	bl	8c84 <_init+0x170>
	}

	return l_recvImuState_st;
    f30c:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xd0
    f310:	e1a01003 	mov	r1, r3
    f314:	e24b206c 	sub	r2, fp, #108	; 0x6c
    f318:	e3a03060 	mov	r3, #96	; 0x60
    f31c:	e1a00001 	mov	r0, r1
    f320:	e1a01002 	mov	r1, r2
    f324:	e1a02003 	mov	r2, r3
    f328:	ebffe655 	bl	8c84 <_init+0x170>
}
    f32c:	e51b00d0 	ldr	r0, [fp, #-208]	; 0xd0
    f330:	e24bd004 	sub	sp, fp, #4
    f334:	e8bd8800 	pop	{fp, pc}

0000f338 <g_halMatlab_recvImuState_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halImu_orientationValues g_halMatlab_recvImuState_bl(int f_socketHandler_i32) {
    f338:	e92d4800 	push	{fp, lr}
    f33c:	e28db004 	add	fp, sp, #4
    f340:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
    f344:	e50b00c8 	str	r0, [fp, #-200]	; 0xc8
    f348:	e50b10cc 	str	r1, [fp, #-204]	; 0xcc
	halImu_orientationValues 		l_recvImuState_st;
	unsigned char				l_recvBuffer_rgXui8[ sizeof(halMatlab_rtImuPayload) ];
	unsigned int				l_recvBytesNumber_ui32;

	l_recvImuState_st.acc.x_f64 = 0;
    f34c:	e3a02000 	mov	r2, #0
    f350:	e3a03000 	mov	r3, #0
    f354:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
	l_recvImuState_st.acc.y_f64 = 0;
    f358:	e3a02000 	mov	r2, #0
    f35c:	e3a03000 	mov	r3, #0
    f360:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	l_recvImuState_st.acc.z_f64 = 0;
    f364:	e3a02000 	mov	r2, #0
    f368:	e3a03000 	mov	r3, #0
    f36c:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac

	l_recvImuState_st.gyro.pitch_f64 = 0;
    f370:	e3a02000 	mov	r2, #0
    f374:	e3a03000 	mov	r3, #0
    f378:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
	l_recvImuState_st.gyro.roll_f64 = 0;
    f37c:	e3a02000 	mov	r2, #0
    f380:	e3a03000 	mov	r3, #0
    f384:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	l_recvImuState_st.gyro.yaw_f64 = 0;
    f388:	e3a02000 	mov	r2, #0
    f38c:	e3a03000 	mov	r3, #0
    f390:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc

	l_recvImuState_st.mag.x_f64 = 0;
    f394:	e3a02000 	mov	r2, #0
    f398:	e3a03000 	mov	r3, #0
    f39c:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
	l_recvImuState_st.mag.y_f64 = 0;
    f3a0:	e3a02000 	mov	r2, #0
    f3a4:	e3a03000 	mov	r3, #0
    f3a8:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	l_recvImuState_st.mag.z_f64 = 0;
    f3ac:	e3a02000 	mov	r2, #0
    f3b0:	e3a03000 	mov	r3, #0
    f3b4:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4

	l_recvImuState_st.pressure_f64 = 0;
    f3b8:	e3a02000 	mov	r2, #0
    f3bc:	e3a03000 	mov	r3, #0
    f3c0:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	l_recvImuState_st.temperature_f64 = 0;
    f3c4:	e3a02000 	mov	r2, #0
    f3c8:	e3a03000 	mov	r3, #0
    f3cc:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    f3d0:	e24b30c4 	sub	r3, fp, #196	; 0xc4
    f3d4:	e51b00cc 	ldr	r0, [fp, #-204]	; 0xcc
    f3d8:	e1a01003 	mov	r1, r3
    f3dc:	e3a02058 	mov	r2, #88	; 0x58
    f3e0:	eb00015f 	bl	f964 <g_halMatlab_recvPacket_ui32>
    f3e4:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halImu_orientationValues) );

	if ( l_recvBytesNumber_ui32 == sizeof(halImu_orientationValues) )
    f3e8:	e51b3008 	ldr	r3, [fp, #-8]
    f3ec:	e3530058 	cmp	r3, #88	; 0x58
    f3f0:	1a000005 	bne	f40c <g_halMatlab_recvImuState_bl+0xd4>
	{
		memcpy( &l_recvImuState_st, &l_recvBuffer_rgXui8, sizeof(halImu_orientationValues));
    f3f4:	e24b2064 	sub	r2, fp, #100	; 0x64
    f3f8:	e24b30c4 	sub	r3, fp, #196	; 0xc4
    f3fc:	e1a00002 	mov	r0, r2
    f400:	e1a01003 	mov	r1, r3
    f404:	e3a02058 	mov	r2, #88	; 0x58
    f408:	ebffe61d 	bl	8c84 <_init+0x170>
	}

	return l_recvImuState_st;
    f40c:	e51b30c8 	ldr	r3, [fp, #-200]	; 0xc8
    f410:	e1a01003 	mov	r1, r3
    f414:	e24b2064 	sub	r2, fp, #100	; 0x64
    f418:	e3a03058 	mov	r3, #88	; 0x58
    f41c:	e1a00001 	mov	r0, r1
    f420:	e1a01002 	mov	r1, r2
    f424:	e1a02003 	mov	r2, r3
    f428:	ebffe615 	bl	8c84 <_init+0x170>
}
    f42c:	e51b00c8 	ldr	r0, [fp, #-200]	; 0xc8
    f430:	e24bd004 	sub	sp, fp, #4
    f434:	e8bd8800 	pop	{fp, pc}

0000f438 <l_findFreeSocketSlot_i16>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static signed short l_findFreeSocketSlot_i16(void)
{
    f438:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    f43c:	e28db000 	add	fp, sp, #0
    f440:	e24dd00c 	sub	sp, sp, #12
	signed short l_socketIndex_i16 = 0;
    f444:	e3a03000 	mov	r3, #0
    f448:	e14b30b6 	strh	r3, [fp, #-6]

	// find empty slot in socket library
	while( 		(m_socketManagementBuffer_rg8st[l_socketIndex_i16].socketHandler_i32 > 0)
    f44c:	ea000002 	b	f45c <l_findFreeSocketSlot_i16+0x24>
			&& 	(l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8) )
	{
		l_socketIndex_i16++;
    f450:	e15b30b6 	ldrh	r3, [fp, #-6]
    f454:	e2833001 	add	r3, r3, #1
    f458:	e14b30b6 	strh	r3, [fp, #-6]
static signed short l_findFreeSocketSlot_i16(void)
{
	signed short l_socketIndex_i16 = 0;

	// find empty slot in socket library
	while( 		(m_socketManagementBuffer_rg8st[l_socketIndex_i16].socketHandler_i32 > 0)
    f45c:	e15b20f6 	ldrsh	r2, [fp, #-6]
    f460:	e59f005c 	ldr	r0, [pc, #92]	; f4c4 <l_findFreeSocketSlot_i16+0x8c>
    f464:	e3a01020 	mov	r1, #32
    f468:	e1a03002 	mov	r3, r2
    f46c:	e1a03183 	lsl	r3, r3, #3
    f470:	e0833002 	add	r3, r3, r2
    f474:	e1a03103 	lsl	r3, r3, #2
    f478:	e0803003 	add	r3, r0, r3
    f47c:	e0833001 	add	r3, r3, r1
    f480:	e5933000 	ldr	r3, [r3]
    f484:	e3530000 	cmp	r3, #0
    f488:	da000002 	ble	f498 <l_findFreeSocketSlot_i16+0x60>
			&& 	(l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8) )
    f48c:	e15b30f6 	ldrsh	r3, [fp, #-6]
    f490:	e3530007 	cmp	r3, #7
    f494:	daffffed 	ble	f450 <l_findFreeSocketSlot_i16+0x18>
	{
		l_socketIndex_i16++;
	}

	// if all slots are occupied, do not open a new one
	if (l_socketIndex_i16 >= M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8)
    f498:	e15b30f6 	ldrsh	r3, [fp, #-6]
    f49c:	e3530007 	cmp	r3, #7
    f4a0:	da000001 	ble	f4ac <l_findFreeSocketSlot_i16+0x74>
	{
		return M_HAL_MATLAB_ERROR_I8;
    f4a4:	e59f301c 	ldr	r3, [pc, #28]	; f4c8 <l_findFreeSocketSlot_i16+0x90>
    f4a8:	ea000000 	b	f4b0 <l_findFreeSocketSlot_i16+0x78>
	}

	return l_socketIndex_i16;
    f4ac:	e15b30b6 	ldrh	r3, [fp, #-6]
    f4b0:	e6bf3073 	sxth	r3, r3
}
    f4b4:	e1a00003 	mov	r0, r3
    f4b8:	e24bd000 	sub	sp, fp, #0
    f4bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    f4c0:	e12fff1e 	bx	lr
    f4c4:	0001b820 	.word	0x0001b820
    f4c8:	0000ffff 	.word	0x0000ffff

0000f4cc <l_findSocket_i16>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
static signed short l_findSocket_i16(signed int f_socketHandler_i32)
{
    f4cc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    f4d0:	e28db000 	add	fp, sp, #0
    f4d4:	e24dd014 	sub	sp, sp, #20
    f4d8:	e50b0010 	str	r0, [fp, #-16]
	signed short l_socketIndex_i16 = 0;
    f4dc:	e3a03000 	mov	r3, #0
    f4e0:	e14b30b6 	strh	r3, [fp, #-6]

	if (f_socketHandler_i32 <= 0 )
    f4e4:	e51b3010 	ldr	r3, [fp, #-16]
    f4e8:	e3530000 	cmp	r3, #0
    f4ec:	ca000001 	bgt	f4f8 <l_findSocket_i16+0x2c>
	{
		return M_HAL_MATLAB_ERROR_I8;
    f4f0:	e59f3088 	ldr	r3, [pc, #136]	; f580 <l_findSocket_i16+0xb4>
    f4f4:	ea00001c 	b	f56c <l_findSocket_i16+0xa0>
	}

	// find socket handler
	for( l_socketIndex_i16=0; l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8; l_socketIndex_i16++ )
    f4f8:	e3a03000 	mov	r3, #0
    f4fc:	e14b30b6 	strh	r3, [fp, #-6]
    f500:	ea000010 	b	f548 <l_findSocket_i16+0x7c>
	{
		if ( m_socketManagementBuffer_rg8st[l_socketIndex_i16].socketHandler_i32 == f_socketHandler_i32 )
    f504:	e15b20f6 	ldrsh	r2, [fp, #-6]
    f508:	e59f0074 	ldr	r0, [pc, #116]	; f584 <l_findSocket_i16+0xb8>
    f50c:	e3a01020 	mov	r1, #32
    f510:	e1a03002 	mov	r3, r2
    f514:	e1a03183 	lsl	r3, r3, #3
    f518:	e0833002 	add	r3, r3, r2
    f51c:	e1a03103 	lsl	r3, r3, #2
    f520:	e0803003 	add	r3, r0, r3
    f524:	e0833001 	add	r3, r3, r1
    f528:	e5932000 	ldr	r2, [r3]
    f52c:	e51b3010 	ldr	r3, [fp, #-16]
    f530:	e1520003 	cmp	r2, r3
    f534:	1a000000 	bne	f53c <l_findSocket_i16+0x70>
		{
			break;
    f538:	ea000005 	b	f554 <l_findSocket_i16+0x88>
	{
		return M_HAL_MATLAB_ERROR_I8;
	}

	// find socket handler
	for( l_socketIndex_i16=0; l_socketIndex_i16 < M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8; l_socketIndex_i16++ )
    f53c:	e15b30b6 	ldrh	r3, [fp, #-6]
    f540:	e2833001 	add	r3, r3, #1
    f544:	e14b30b6 	strh	r3, [fp, #-6]
    f548:	e15b30f6 	ldrsh	r3, [fp, #-6]
    f54c:	e3530007 	cmp	r3, #7
    f550:	daffffeb 	ble	f504 <l_findSocket_i16+0x38>
			break;
		}
	}

	// if all slots are occupied, do not open a new one
	if (l_socketIndex_i16 >= M_HAL_MATLAB_MAX_NUM_OF_SOCKETS_UI8)
    f554:	e15b30f6 	ldrsh	r3, [fp, #-6]
    f558:	e3530007 	cmp	r3, #7
    f55c:	da000001 	ble	f568 <l_findSocket_i16+0x9c>
	{
		return M_HAL_MATLAB_ERROR_I8;
    f560:	e59f3018 	ldr	r3, [pc, #24]	; f580 <l_findSocket_i16+0xb4>
    f564:	ea000000 	b	f56c <l_findSocket_i16+0xa0>
	}

	return l_socketIndex_i16;
    f568:	e15b30b6 	ldrh	r3, [fp, #-6]
    f56c:	e6bf3073 	sxth	r3, r3
}
    f570:	e1a00003 	mov	r0, r3
    f574:	e24bd000 	sub	sp, fp, #0
    f578:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    f57c:	e12fff1e 	bx	lr
    f580:	0000ffff 	.word	0x0000ffff
    f584:	0001b820 	.word	0x0001b820

0000f588 <g_halMatlab_initSocket_i32>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
int g_halMatlab_initSocket_i32(	unsigned short f_udpListenPort_ui16 )
{
    f588:	e92d4800 	push	{fp, lr}
    f58c:	e28db004 	add	fp, sp, #4
    f590:	e24dd010 	sub	sp, sp, #16
    f594:	e1a03000 	mov	r3, r0
    f598:	e14b30be 	strh	r3, [fp, #-14]
	signed short 			l_socketSlotCtr_i16 = 0;
    f59c:	e3a03000 	mov	r3, #0
    f5a0:	e14b30b6 	strh	r3, [fp, #-6]
	halMatlab_socketData* 	l_freeSocketSlot_pst;
#ifdef _WIN32
    WSADATA wsa;
#endif
    
	if ( (l_socketSlotCtr_i16 = l_findFreeSocketSlot_i16()) < 0)
    f5a4:	ebffffa3 	bl	f438 <l_findFreeSocketSlot_i16>
    f5a8:	e1a03000 	mov	r3, r0
    f5ac:	e14b30b6 	strh	r3, [fp, #-6]
    f5b0:	e15b30f6 	ldrsh	r3, [fp, #-6]
    f5b4:	e3530000 	cmp	r3, #0
    f5b8:	aa000001 	bge	f5c4 <g_halMatlab_initSocket_i32+0x3c>
	{
		return M_HAL_MATLAB_ERROR_I8;
    f5bc:	e3e03000 	mvn	r3, #0
    f5c0:	ea00003c 	b	f6b8 <g_halMatlab_initSocket_i32+0x130>
	}


	l_freeSocketSlot_pst = &m_socketManagementBuffer_rg8st[l_socketSlotCtr_i16];
    f5c4:	e15b20f6 	ldrsh	r2, [fp, #-6]
    f5c8:	e1a03002 	mov	r3, r2
    f5cc:	e1a03183 	lsl	r3, r3, #3
    f5d0:	e0833002 	add	r3, r3, r2
    f5d4:	e1a03103 	lsl	r3, r3, #2
    f5d8:	e59f20e4 	ldr	r2, [pc, #228]	; f6c4 <g_halMatlab_initSocket_i32+0x13c>
    f5dc:	e0833002 	add	r3, r3, r2
    f5e0:	e50b300c 	str	r3, [fp, #-12]
	{
		return M_HAL_MATLAB_ERROR_I8;
	}
#endif
	// open socket
	if ( (l_freeSocketSlot_pst->socketHandler_i32 = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1 )
    f5e4:	e3a00002 	mov	r0, #2
    f5e8:	e3a01002 	mov	r1, #2
    f5ec:	e3a02011 	mov	r2, #17
    f5f0:	ebffe597 	bl	8c54 <_init+0x140>
    f5f4:	e1a02000 	mov	r2, r0
    f5f8:	e51b300c 	ldr	r3, [fp, #-12]
    f5fc:	e5832020 	str	r2, [r3, #32]
    f600:	e51b300c 	ldr	r3, [fp, #-12]
    f604:	e5933020 	ldr	r3, [r3, #32]
    f608:	e3730001 	cmn	r3, #1
    f60c:	1a000004 	bne	f624 <g_halMatlab_initSocket_i32+0x9c>
	{
		l_freeSocketSlot_pst->socketHandler_i32 = 0;
    f610:	e51b300c 	ldr	r3, [fp, #-12]
    f614:	e3a02000 	mov	r2, #0
    f618:	e5832020 	str	r2, [r3, #32]
		return M_HAL_MATLAB_ERROR_I8;
    f61c:	e3e03000 	mvn	r3, #0
    f620:	ea000024 	b	f6b8 <g_halMatlab_initSocket_i32+0x130>
	}

	// bind ip
	// -->zero out the structure
	memset(	(char*)&(l_freeSocketSlot_pst->sockAddrListen_st), 0, sizeof(l_freeSocketSlot_pst->sockAddrListen_st) );
    f624:	e51b300c 	ldr	r3, [fp, #-12]
    f628:	e1a00003 	mov	r0, r3
    f62c:	e3a01000 	mov	r1, #0
    f630:	e3a02010 	mov	r2, #16
    f634:	ebffe565 	bl	8bd0 <_init+0xbc>

	l_freeSocketSlot_pst->sockAddrListen_st.sin_family 		= AF_INET;
    f638:	e51b300c 	ldr	r3, [fp, #-12]
    f63c:	e3a02002 	mov	r2, #2
    f640:	e1c320b0 	strh	r2, [r3]
	l_freeSocketSlot_pst->sockAddrListen_st.sin_port 		= htons((uint16_t)f_udpListenPort_ui16);
    f644:	e15b30be 	ldrh	r3, [fp, #-14]
    f648:	e1a00003 	mov	r0, r3
    f64c:	ebffe559 	bl	8bb8 <_init+0xa4>
    f650:	e1a03000 	mov	r3, r0
    f654:	e1a02003 	mov	r2, r3
    f658:	e51b300c 	ldr	r3, [fp, #-12]
    f65c:	e1c320b2 	strh	r2, [r3, #2]
	l_freeSocketSlot_pst->sockAddrListen_st.sin_addr.s_addr = htonl(INADDR_ANY);
    f660:	e3a00000 	mov	r0, #0
    f664:	ebffe5b3 	bl	8d38 <_init+0x224>
    f668:	e1a02000 	mov	r2, r0
    f66c:	e51b300c 	ldr	r3, [fp, #-12]
    f670:	e5832004 	str	r2, [r3, #4]

	//bind socket to port
	if( bind(	l_freeSocketSlot_pst->socketHandler_i32 ,
    f674:	e51b300c 	ldr	r3, [fp, #-12]
    f678:	e5932020 	ldr	r2, [r3, #32]
				(struct sockaddr*)&(l_freeSocketSlot_pst->sockAddrListen_st),
    f67c:	e51b300c 	ldr	r3, [fp, #-12]
	l_freeSocketSlot_pst->sockAddrListen_st.sin_family 		= AF_INET;
	l_freeSocketSlot_pst->sockAddrListen_st.sin_port 		= htons((uint16_t)f_udpListenPort_ui16);
	l_freeSocketSlot_pst->sockAddrListen_st.sin_addr.s_addr = htonl(INADDR_ANY);

	//bind socket to port
	if( bind(	l_freeSocketSlot_pst->socketHandler_i32 ,
    f680:	e1a00002 	mov	r0, r2
    f684:	e1a01003 	mov	r1, r3
    f688:	e3a02010 	mov	r2, #16
    f68c:	ebffe588 	bl	8cb4 <_init+0x1a0>
    f690:	e1a03000 	mov	r3, r0
    f694:	e3730001 	cmn	r3, #1
    f698:	1a000004 	bne	f6b0 <g_halMatlab_initSocket_i32+0x128>
				(struct sockaddr*)&(l_freeSocketSlot_pst->sockAddrListen_st),
				sizeof(l_freeSocketSlot_pst->sockAddrListen_st)
				)
		== -1 )
	{
		l_freeSocketSlot_pst->socketHandler_i32 = 0;
    f69c:	e51b300c 	ldr	r3, [fp, #-12]
    f6a0:	e3a02000 	mov	r2, #0
    f6a4:	e5832020 	str	r2, [r3, #32]
		return M_HAL_MATLAB_ERROR_I8;
    f6a8:	e3e03000 	mvn	r3, #0
    f6ac:	ea000001 	b	f6b8 <g_halMatlab_initSocket_i32+0x130>
	}

	return l_freeSocketSlot_pst->socketHandler_i32;
    f6b0:	e51b300c 	ldr	r3, [fp, #-12]
    f6b4:	e5933020 	ldr	r3, [r3, #32]
}
    f6b8:	e1a00003 	mov	r0, r3
    f6bc:	e24bd004 	sub	sp, fp, #4
    f6c0:	e8bd8800 	pop	{fp, pc}
    f6c4:	0001b820 	.word	0x0001b820

0000f6c8 <g_halMatlab_initConnection_i32>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
int 	g_halMatlab_initConnection_i32(const unsigned char* const f_destIpv4_rg4ui8, unsigned short f_udpConnectionPort_ui16 )
{
    f6c8:	e92d4800 	push	{fp, lr}
    f6cc:	e28db004 	add	fp, sp, #4
    f6d0:	e24dd010 	sub	sp, sp, #16
    f6d4:	e50b0010 	str	r0, [fp, #-16]
    f6d8:	e1a03001 	mov	r3, r1
    f6dc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
	int	l_socketHandler_i32;

	// create socket
	if ( ( l_socketHandler_i32 = g_halMatlab_initSocket_i32(f_udpConnectionPort_ui16) ) <= 0 )
    f6e0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    f6e4:	e1a00003 	mov	r0, r3
    f6e8:	ebffffa6 	bl	f588 <g_halMatlab_initSocket_i32>
    f6ec:	e50b0008 	str	r0, [fp, #-8]
    f6f0:	e51b3008 	ldr	r3, [fp, #-8]
    f6f4:	e3530000 	cmp	r3, #0
    f6f8:	ca000001 	bgt	f704 <g_halMatlab_initConnection_i32+0x3c>
	{
		// error occurred
		return M_HAL_MATLAB_ERROR_I8;
    f6fc:	e3e03000 	mvn	r3, #0
    f700:	ea00000a 	b	f730 <g_halMatlab_initConnection_i32+0x68>
	 *                        |  >Local machine>  |
	 *  ----------------------+  >sends to 5000>  +-----------------------
	 *     Local machine                               Remote machine
	 *
	 */
	if ( g_halMatlab_configSocket_bl(l_socketHandler_i32, f_destIpv4_rg4ui8, f_udpConnectionPort_ui16) != M_HAL_MATLAB_SUCCESS_UI8 )
    f704:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
    f708:	e51b0008 	ldr	r0, [fp, #-8]
    f70c:	e51b1010 	ldr	r1, [fp, #-16]
    f710:	e1a02003 	mov	r2, r3
    f714:	eb0000c2 	bl	fa24 <g_halMatlab_configSocket_bl>
    f718:	e1a03000 	mov	r3, r0
    f71c:	e3530000 	cmp	r3, #0
    f720:	0a000001 	beq	f72c <g_halMatlab_initConnection_i32+0x64>
	{
		// error occurred
		return M_HAL_MATLAB_ERROR_I8;
    f724:	e3e03000 	mvn	r3, #0
    f728:	ea000000 	b	f730 <g_halMatlab_initConnection_i32+0x68>
	}

	return l_socketHandler_i32;
    f72c:	e51b3008 	ldr	r3, [fp, #-8]
}
    f730:	e1a00003 	mov	r0, r3
    f734:	e24bd004 	sub	sp, fp, #4
    f738:	e8bd8800 	pop	{fp, pc}

0000f73c <g_halMatlab_closeSocket_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_closeSocket_bl(int f_socketHandler_i32)
{
    f73c:	e92d4800 	push	{fp, lr}
    f740:	e28db004 	add	fp, sp, #4
    f744:	e24dd010 	sub	sp, sp, #16
    f748:	e50b0010 	str	r0, [fp, #-16]
	signed short l_socketSlotNumber_i16 = 0;
    f74c:	e3a03000 	mov	r3, #0
    f750:	e14b30b6 	strh	r3, [fp, #-6]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    f754:	e51b0010 	ldr	r0, [fp, #-16]
    f758:	ebffff5b 	bl	f4cc <l_findSocket_i16>
    f75c:	e1a03000 	mov	r3, r0
    f760:	e14b30b6 	strh	r3, [fp, #-6]
    f764:	e15b30f6 	ldrsh	r3, [fp, #-6]
    f768:	e3530000 	cmp	r3, #0
    f76c:	aa000001 	bge	f778 <g_halMatlab_closeSocket_bl+0x3c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    f770:	e3a03001 	mov	r3, #1
    f774:	ea000017 	b	f7d8 <g_halMatlab_closeSocket_bl+0x9c>
	}

#ifdef __linux__
	/* close socket */
	close( m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16].socketHandler_i32 );
    f778:	e15b20f6 	ldrsh	r2, [fp, #-6]
    f77c:	e59f0060 	ldr	r0, [pc, #96]	; f7e4 <g_halMatlab_closeSocket_bl+0xa8>
    f780:	e3a01020 	mov	r1, #32
    f784:	e1a03002 	mov	r3, r2
    f788:	e1a03183 	lsl	r3, r3, #3
    f78c:	e0833002 	add	r3, r3, r2
    f790:	e1a03103 	lsl	r3, r3, #2
    f794:	e0803003 	add	r3, r0, r3
    f798:	e0833001 	add	r3, r3, r1
    f79c:	e5933000 	ldr	r3, [r3]
    f7a0:	e1a00003 	mov	r0, r3
    f7a4:	ebffe545 	bl	8cc0 <_init+0x1ac>
#elif _WIN32
    closesocket(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16].socketHandler_i32);
    WSACleanup();
#endif
	/* free slot */
	m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16].socketHandler_i32 = 0;
    f7a8:	e15b20f6 	ldrsh	r2, [fp, #-6]
    f7ac:	e59f0030 	ldr	r0, [pc, #48]	; f7e4 <g_halMatlab_closeSocket_bl+0xa8>
    f7b0:	e3a01020 	mov	r1, #32
    f7b4:	e1a03002 	mov	r3, r2
    f7b8:	e1a03183 	lsl	r3, r3, #3
    f7bc:	e0833002 	add	r3, r3, r2
    f7c0:	e1a03103 	lsl	r3, r3, #2
    f7c4:	e0803003 	add	r3, r0, r3
    f7c8:	e0833001 	add	r3, r3, r1
    f7cc:	e3a02000 	mov	r2, #0
    f7d0:	e5832000 	str	r2, [r3]

	return M_HAL_MATLAB_SUCCESS_UI8;
    f7d4:	e3a03000 	mov	r3, #0
}
    f7d8:	e1a00003 	mov	r0, r3
    f7dc:	e24bd004 	sub	sp, fp, #4
    f7e0:	e8bd8800 	pop	{fp, pc}
    f7e4:	0001b820 	.word	0x0001b820

0000f7e8 <g_halMatlab_sendPacket_bl>:
 ***********************************************************************/
unsigned int g_halMatlab_sendPacket_bl(	int f_socketHandler_i32,
										const unsigned char* const f_sendBuffer_pui8,
										unsigned int f_sendBufferSize_ui32
										)
{
    f7e8:	e92d4800 	push	{fp, lr}
    f7ec:	e28db004 	add	fp, sp, #4
    f7f0:	e24dd028 	sub	sp, sp, #40	; 0x28
    f7f4:	e50b0018 	str	r0, [fp, #-24]
    f7f8:	e50b101c 	str	r1, [fp, #-28]
    f7fc:	e50b2020 	str	r2, [fp, #-32]
	int						l_sendSuccess_i32		= -1;
    f800:	e3e03000 	mvn	r3, #0
    f804:	e50b3008 	str	r3, [fp, #-8]
	signed short 			l_socketSlotNumber_i16 	= 0;
    f808:	e3a03000 	mov	r3, #0
    f80c:	e14b30ba 	strh	r3, [fp, #-10]
	halMatlab_socketData* 	l_socketConfig_pst		= 0;
    f810:	e3a03000 	mov	r3, #0
    f814:	e50b3010 	str	r3, [fp, #-16]
	unsigned int			l_socketStructSize_ui32	= 0;
    f818:	e3a03000 	mov	r3, #0
    f81c:	e50b3014 	str	r3, [fp, #-20]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    f820:	e51b0018 	ldr	r0, [fp, #-24]
    f824:	ebffff28 	bl	f4cc <l_findSocket_i16>
    f828:	e1a03000 	mov	r3, r0
    f82c:	e14b30ba 	strh	r3, [fp, #-10]
    f830:	e15b30fa 	ldrsh	r3, [fp, #-10]
    f834:	e3530000 	cmp	r3, #0
    f838:	aa000001 	bge	f844 <g_halMatlab_sendPacket_bl+0x5c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    f83c:	e3a03001 	mov	r3, #1
    f840:	ea00001a 	b	f8b0 <g_halMatlab_sendPacket_bl+0xc8>
	}

	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);
    f844:	e15b20fa 	ldrsh	r2, [fp, #-10]
    f848:	e1a03002 	mov	r3, r2
    f84c:	e1a03183 	lsl	r3, r3, #3
    f850:	e0833002 	add	r3, r3, r2
    f854:	e1a03103 	lsl	r3, r3, #2
    f858:	e59f205c 	ldr	r2, [pc, #92]	; f8bc <g_halMatlab_sendPacket_bl+0xd4>
    f85c:	e0833002 	add	r3, r3, r2
    f860:	e50b3010 	str	r3, [fp, #-16]

	// send telegram
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
    f864:	e3a03010 	mov	r3, #16
    f868:	e50b3014 	str	r3, [fp, #-20]
	l_sendSuccess_i32 = sendto(	f_socketHandler_i32,
								f_sendBuffer_pui8,
								f_sendBufferSize_ui32,
								0 ,
								(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
    f86c:	e51b3010 	ldr	r3, [fp, #-16]
    f870:	e2833010 	add	r3, r3, #16
	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);

	// send telegram
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
	l_sendSuccess_i32 = sendto(	f_socketHandler_i32,
    f874:	e58d3000 	str	r3, [sp]
    f878:	e51b3014 	ldr	r3, [fp, #-20]
    f87c:	e58d3004 	str	r3, [sp, #4]
    f880:	e51b0018 	ldr	r0, [fp, #-24]
    f884:	e51b101c 	ldr	r1, [fp, #-28]
    f888:	e51b2020 	ldr	r2, [fp, #-32]
    f88c:	e3a03000 	mov	r3, #0
    f890:	ebffe4c5 	bl	8bac <_init+0x98>
    f894:	e50b0008 	str	r0, [fp, #-8]
								f_sendBufferSize_ui32,
								0 ,
								(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
								l_socketStructSize_ui32 );

	if ( l_sendSuccess_i32 == M_HAL_MATLAB_ERROR_I8 )
    f898:	e51b3008 	ldr	r3, [fp, #-8]
    f89c:	e3730001 	cmn	r3, #1
    f8a0:	1a000001 	bne	f8ac <g_halMatlab_sendPacket_bl+0xc4>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    f8a4:	e3a03001 	mov	r3, #1
    f8a8:	ea000000 	b	f8b0 <g_halMatlab_sendPacket_bl+0xc8>
	}else{
		return M_HAL_MATLAB_SUCCESS_UI8;
    f8ac:	e3a03000 	mov	r3, #0
	}
}
    f8b0:	e1a00003 	mov	r0, r3
    f8b4:	e24bd004 	sub	sp, fp, #4
    f8b8:	e8bd8800 	pop	{fp, pc}
    f8bc:	0001b820 	.word	0x0001b820

0000f8c0 <g_halMatlab_sendRtDataPacket_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_sendRtDataPacket_bl(	int f_socketHandler_i32,
												const unsigned char* const f_sendBuffer_pui8,
												unsigned int f_sendBufferSize_ui32)
{
    f8c0:	e92d4800 	push	{fp, lr}
    f8c4:	e28db004 	add	fp, sp, #4
    f8c8:	e24dde22 	sub	sp, sp, #544	; 0x220
    f8cc:	e50b0218 	str	r0, [fp, #-536]	; 0x218
    f8d0:	e50b121c 	str	r1, [fp, #-540]	; 0x21c
    f8d4:	e50b2220 	str	r2, [fp, #-544]	; 0x220
	struct timespec			l_timestamp_st;
	unsigned char			l_sendBuffer_rgXi8[M_HAL_MATLAB_SEND_BUFFER_SIZE_UI16];
	unsigned int			l_sizePayload_ui32		= 0;
    f8d8:	e3a03000 	mov	r3, #0
    f8dc:	e50b3008 	str	r3, [fp, #-8]
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    f8e0:	e24b3010 	sub	r3, fp, #16
    f8e4:	e3a00000 	mov	r0, #0
    f8e8:	e1a01003 	mov	r1, r3
    f8ec:	ebffe499 	bl	8b58 <_init+0x44>
    f8f0:	e1a03000 	mov	r3, r0
    f8f4:	e3530000 	cmp	r3, #0
    f8f8:	0a000001 	beq	f904 <g_halMatlab_sendRtDataPacket_bl+0x44>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    f8fc:	e3a03001 	mov	r3, #1
    f900:	ea000014 	b	f958 <g_halMatlab_sendRtDataPacket_bl+0x98>
	}

	// add timestamp to payload data
	memcpy(	l_sendBuffer_rgXi8,
    f904:	e24b2e21 	sub	r2, fp, #528	; 0x210
    f908:	e24b3010 	sub	r3, fp, #16
    f90c:	e1a00002 	mov	r0, r2
    f910:	e1a01003 	mov	r1, r3
    f914:	e3a02008 	mov	r2, #8
    f918:	ebffe4d9 	bl	8c84 <_init+0x170>
			&l_timestamp_st,
			sizeof(l_timestamp_st) );
	memcpy(	(l_sendBuffer_rgXi8+sizeof(l_timestamp_st)),
    f91c:	e24b3e21 	sub	r3, fp, #528	; 0x210
    f920:	e2833008 	add	r3, r3, #8
    f924:	e1a00003 	mov	r0, r3
    f928:	e51b121c 	ldr	r1, [fp, #-540]	; 0x21c
    f92c:	e51b2220 	ldr	r2, [fp, #-544]	; 0x220
    f930:	ebffe4d3 	bl	8c84 <_init+0x170>
			f_sendBuffer_pui8,
			f_sendBufferSize_ui32 );

	// adjust size of telegram's payload (due to added timestamp)
	l_sizePayload_ui32 = f_sendBufferSize_ui32 + sizeof(l_timestamp_st);
    f934:	e51b3220 	ldr	r3, [fp, #-544]	; 0x220
    f938:	e2833008 	add	r3, r3, #8
    f93c:	e50b3008 	str	r3, [fp, #-8]

	return g_halMatlab_sendPacket_bl(f_socketHandler_i32, l_sendBuffer_rgXi8, l_sizePayload_ui32);
    f940:	e24b3e21 	sub	r3, fp, #528	; 0x210
    f944:	e51b0218 	ldr	r0, [fp, #-536]	; 0x218
    f948:	e1a01003 	mov	r1, r3
    f94c:	e51b2008 	ldr	r2, [fp, #-8]
    f950:	ebffffa4 	bl	f7e8 <g_halMatlab_sendPacket_bl>
    f954:	e1a03000 	mov	r3, r0
}
    f958:	e1a00003 	mov	r0, r3
    f95c:	e24bd004 	sub	sp, fp, #4
    f960:	e8bd8800 	pop	{fp, pc}

0000f964 <g_halMatlab_recvPacket_ui32>:
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_recvPacket_ui32( int f_socketHandler_i32,
		unsigned char* const f_recvBuffer_pui8,
		unsigned int f_recvBufferSize_ui32)
{
    f964:	e92d4800 	push	{fp, lr}
    f968:	e28db004 	add	fp, sp, #4
    f96c:	e24dd028 	sub	sp, sp, #40	; 0x28
    f970:	e50b0018 	str	r0, [fp, #-24]
    f974:	e50b101c 	str	r1, [fp, #-28]
    f978:	e50b2020 	str	r2, [fp, #-32]
	signed short 			l_socketSlotNumber_i16 	= 0;
    f97c:	e3a03000 	mov	r3, #0
    f980:	e14b30b6 	strh	r3, [fp, #-6]
	halMatlab_socketData* 	l_socketConfig_pst		= 0;
    f984:	e3a03000 	mov	r3, #0
    f988:	e50b300c 	str	r3, [fp, #-12]
	int						l_recvFromFlag_i32		= 0;	// blocking behavior (standard)
    f98c:	e3a03000 	mov	r3, #0
    f990:	e50b3010 	str	r3, [fp, #-16]
	unsigned int			l_socketStructSize_ui32	= 0;
    f994:	e3a03000 	mov	r3, #0
    f998:	e50b3014 	str	r3, [fp, #-20]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    f99c:	e51b0018 	ldr	r0, [fp, #-24]
    f9a0:	ebfffec9 	bl	f4cc <l_findSocket_i16>
    f9a4:	e1a03000 	mov	r3, r0
    f9a8:	e14b30b6 	strh	r3, [fp, #-6]
    f9ac:	e15b30f6 	ldrsh	r3, [fp, #-6]
    f9b0:	e3530000 	cmp	r3, #0
    f9b4:	aa000001 	bge	f9c0 <g_halMatlab_recvPacket_ui32+0x5c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    f9b8:	e3a03001 	mov	r3, #1
    f9bc:	ea000014 	b	fa14 <g_halMatlab_recvPacket_ui32+0xb0>
	}

	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);
    f9c0:	e15b20f6 	ldrsh	r2, [fp, #-6]
    f9c4:	e1a03002 	mov	r3, r2
    f9c8:	e1a03183 	lsl	r3, r3, #3
    f9cc:	e0833002 	add	r3, r3, r2
    f9d0:	e1a03103 	lsl	r3, r3, #2
    f9d4:	e59f2044 	ldr	r2, [pc, #68]	; fa20 <g_halMatlab_recvPacket_ui32+0xbc>
    f9d8:	e0833002 	add	r3, r3, r2
    f9dc:	e50b300c 	str	r3, [fp, #-12]
//		// blocking behavior (standard)
//		l_recvFromFlag_i32 = 0;
//	}

	// recv telegram (blocking!)
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
    f9e0:	e3a03010 	mov	r3, #16
    f9e4:	e50b3014 	str	r3, [fp, #-20]
	return recvfrom(	f_socketHandler_i32,
						f_recvBuffer_pui8,
						f_recvBufferSize_ui32,
						l_recvFromFlag_i32,
						(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
    f9e8:	e51b300c 	ldr	r3, [fp, #-12]
    f9ec:	e2833010 	add	r3, r3, #16
//		l_recvFromFlag_i32 = 0;
//	}

	// recv telegram (blocking!)
	l_socketStructSize_ui32 = sizeof(l_socketConfig_pst->sockAddrRemote_st);
	return recvfrom(	f_socketHandler_i32,
    f9f0:	e58d3000 	str	r3, [sp]
    f9f4:	e24b3014 	sub	r3, fp, #20
    f9f8:	e58d3004 	str	r3, [sp, #4]
    f9fc:	e51b0018 	ldr	r0, [fp, #-24]
    fa00:	e51b101c 	ldr	r1, [fp, #-28]
    fa04:	e51b2020 	ldr	r2, [fp, #-32]
    fa08:	e51b3010 	ldr	r3, [fp, #-16]
    fa0c:	ebffe4d2 	bl	8d5c <_init+0x248>
    fa10:	e1a03000 	mov	r3, r0
						f_recvBuffer_pui8,
						f_recvBufferSize_ui32,
						l_recvFromFlag_i32,
						(struct sockaddr *)&l_socketConfig_pst->sockAddrRemote_st,
						&l_socketStructSize_ui32);
}
    fa14:	e1a00003 	mov	r0, r3
    fa18:	e24bd004 	sub	sp, fp, #4
    fa1c:	e8bd8800 	pop	{fp, pc}
    fa20:	0001b820 	.word	0x0001b820

0000fa24 <g_halMatlab_configSocket_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_configSocket_bl(	int f_socketHandler_i32,
		const unsigned char* const f_destIpv4_rg4ui8,
		unsigned short f_destPort_ui16)
{
    fa24:	e92d4800 	push	{fp, lr}
    fa28:	e28db004 	add	fp, sp, #4
    fa2c:	e24dd020 	sub	sp, sp, #32
    fa30:	e50b0018 	str	r0, [fp, #-24]
    fa34:	e50b101c 	str	r1, [fp, #-28]
    fa38:	e1a03002 	mov	r3, r2
    fa3c:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
	signed short 			l_socketSlotNumber_i16 	= 0;
    fa40:	e3a03000 	mov	r3, #0
    fa44:	e14b30b6 	strh	r3, [fp, #-6]
	halMatlab_socketData* 	l_socketConfig_pst		= 0;
    fa48:	e3a03000 	mov	r3, #0
    fa4c:	e50b300c 	str	r3, [fp, #-12]
	unsigned int			l_ipv4Addr_ui32			= 0;
    fa50:	e3a03000 	mov	r3, #0
    fa54:	e50b3010 	str	r3, [fp, #-16]

	// get slot number of requested socket handler
	if ( ( l_socketSlotNumber_i16 = l_findSocket_i16(f_socketHandler_i32) ) < 0 )
    fa58:	e51b0018 	ldr	r0, [fp, #-24]
    fa5c:	ebfffe9a 	bl	f4cc <l_findSocket_i16>
    fa60:	e1a03000 	mov	r3, r0
    fa64:	e14b30b6 	strh	r3, [fp, #-6]
    fa68:	e15b30f6 	ldrsh	r3, [fp, #-6]
    fa6c:	e3530000 	cmp	r3, #0
    fa70:	aa000001 	bge	fa7c <g_halMatlab_configSocket_bl+0x58>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    fa74:	e3a03001 	mov	r3, #1
    fa78:	ea00002f 	b	fb3c <g_halMatlab_configSocket_bl+0x118>
	}

	// get a pointer to the specific socket config data (for code-readability)
	l_socketConfig_pst = &(m_socketManagementBuffer_rg8st[l_socketSlotNumber_i16]);
    fa7c:	e15b20f6 	ldrsh	r2, [fp, #-6]
    fa80:	e1a03002 	mov	r3, r2
    fa84:	e1a03183 	lsl	r3, r3, #3
    fa88:	e0833002 	add	r3, r3, r2
    fa8c:	e1a03103 	lsl	r3, r3, #2
    fa90:	e59f20b0 	ldr	r2, [pc, #176]	; fb48 <g_halMatlab_configSocket_bl+0x124>
    fa94:	e0833002 	add	r3, r3, r2
    fa98:	e50b300c 	str	r3, [fp, #-12]

	// set values in l_socketConfig_pst->sockAddrRemote_st
	memset((char*) &l_socketConfig_pst->sockAddrRemote_st, 0, sizeof(l_socketConfig_pst->sockAddrRemote_st));
    fa9c:	e51b300c 	ldr	r3, [fp, #-12]
    faa0:	e2833010 	add	r3, r3, #16
    faa4:	e1a00003 	mov	r0, r3
    faa8:	e3a01000 	mov	r1, #0
    faac:	e3a02010 	mov	r2, #16
    fab0:	ebffe446 	bl	8bd0 <_init+0xbc>
	l_socketConfig_pst->sockAddrRemote_st.sin_family = AF_INET;
    fab4:	e51b300c 	ldr	r3, [fp, #-12]
    fab8:	e3a02002 	mov	r2, #2
    fabc:	e1c321b0 	strh	r2, [r3, #16]
	l_socketConfig_pst->sockAddrRemote_st.sin_port = htons(f_destPort_ui16);
    fac0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
    fac4:	e1a00003 	mov	r0, r3
    fac8:	ebffe43a 	bl	8bb8 <_init+0xa4>
    facc:	e1a03000 	mov	r3, r0
    fad0:	e1a02003 	mov	r2, r3
    fad4:	e51b300c 	ldr	r3, [fp, #-12]
    fad8:	e1c321b2 	strh	r2, [r3, #18]

	// assemble 4 bytes of IPv4 address into one 32bit value
	l_ipv4Addr_ui32 = 		( f_destIpv4_rg4ui8[0] << 24 )
    fadc:	e51b301c 	ldr	r3, [fp, #-28]
    fae0:	e5d33000 	ldrb	r3, [r3]
    fae4:	e1a02c03 	lsl	r2, r3, #24
						+ 	( f_destIpv4_rg4ui8[1] << 16 )
    fae8:	e51b301c 	ldr	r3, [fp, #-28]
    faec:	e2833001 	add	r3, r3, #1
    faf0:	e5d33000 	ldrb	r3, [r3]
    faf4:	e1a03803 	lsl	r3, r3, #16
    faf8:	e0822003 	add	r2, r2, r3
						+ 	( f_destIpv4_rg4ui8[2] << 8 )
    fafc:	e51b301c 	ldr	r3, [fp, #-28]
    fb00:	e2833002 	add	r3, r3, #2
    fb04:	e5d33000 	ldrb	r3, [r3]
    fb08:	e1a03403 	lsl	r3, r3, #8
    fb0c:	e0822003 	add	r2, r2, r3
						+ 	( f_destIpv4_rg4ui8[3] );
    fb10:	e51b301c 	ldr	r3, [fp, #-28]
    fb14:	e2833003 	add	r3, r3, #3
    fb18:	e5d33000 	ldrb	r3, [r3]
    fb1c:	e0823003 	add	r3, r2, r3
	memset((char*) &l_socketConfig_pst->sockAddrRemote_st, 0, sizeof(l_socketConfig_pst->sockAddrRemote_st));
	l_socketConfig_pst->sockAddrRemote_st.sin_family = AF_INET;
	l_socketConfig_pst->sockAddrRemote_st.sin_port = htons(f_destPort_ui16);

	// assemble 4 bytes of IPv4 address into one 32bit value
	l_ipv4Addr_ui32 = 		( f_destIpv4_rg4ui8[0] << 24 )
    fb20:	e50b3010 	str	r3, [fp, #-16]
						+ 	( f_destIpv4_rg4ui8[1] << 16 )
						+ 	( f_destIpv4_rg4ui8[2] << 8 )
						+ 	( f_destIpv4_rg4ui8[3] );

	l_socketConfig_pst->sockAddrRemote_st.sin_addr.s_addr = htonl( l_ipv4Addr_ui32 );
    fb24:	e51b0010 	ldr	r0, [fp, #-16]
    fb28:	ebffe482 	bl	8d38 <_init+0x224>
    fb2c:	e1a02000 	mov	r2, r0
    fb30:	e51b300c 	ldr	r3, [fp, #-12]
    fb34:	e5832014 	str	r2, [r3, #20]

	return M_HAL_MATLAB_SUCCESS_UI8;
    fb38:	e3a03000 	mov	r3, #0
}
    fb3c:	e1a00003 	mov	r0, r3
    fb40:	e24bd004 	sub	sp, fp, #4
    fb44:	e8bd8800 	pop	{fp, pc}
    fb48:	0001b820 	.word	0x0001b820

0000fb4c <g_halMatlab_sendSigState_bl>:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_halMatlab_sendSigState_bl(	int f_socketHandler_i32,
											sigOri_orientationAngles f_sigState_st )
{
    fb4c:	e92d4800 	push	{fp, lr}
    fb50:	e28db004 	add	fp, sp, #4
    fb54:	e24dd048 	sub	sp, sp, #72	; 0x48
    fb58:	e50b0030 	str	r0, [fp, #-48]	; 0x30
    fb5c:	eeb05b40 	vmov.f64	d5, d0
    fb60:	eeb06b41 	vmov.f64	d6, d1
    fb64:	eeb07b42 	vmov.f64	d7, d2
    fb68:	ed0b5b13 	vstr	d5, [fp, #-76]	; 0xffffffb4
    fb6c:	ed0b6b11 	vstr	d6, [fp, #-68]	; 0xffffffbc
    fb70:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    fb74:	e24b302c 	sub	r3, fp, #44	; 0x2c
    fb78:	e3a00000 	mov	r0, #0
    fb7c:	e1a01003 	mov	r1, r3
    fb80:	ebffe3f4 	bl	8b58 <_init+0x44>
    fb84:	e1a03000 	mov	r3, r0
    fb88:	e3530000 	cmp	r3, #0
    fb8c:	0a000001 	beq	fb98 <g_halMatlab_sendSigState_bl+0x4c>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    fb90:	e3a03001 	mov	r3, #1
    fb94:	ea00000f 	b	fbd8 <g_halMatlab_sendSigState_bl+0x8c>
	}

	//assmeble timestamp and
	l_rtSigPayload_st.timestamp_st 	= l_timestamp_st;
    fb98:	e24b3024 	sub	r3, fp, #36	; 0x24
    fb9c:	e24b202c 	sub	r2, fp, #44	; 0x2c
    fba0:	e8920003 	ldm	r2, {r0, r1}
    fba4:	e8830003 	stm	r3, {r0, r1}
	l_rtSigPayload_st.sigState_st	= f_sigState_st;
    fba8:	e24bc01c 	sub	ip, fp, #28
    fbac:	e24be04c 	sub	lr, fp, #76	; 0x4c
    fbb0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    fbb4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    fbb8:	e89e0003 	ldm	lr, {r0, r1}
    fbbc:	e88c0003 	stm	ip, {r0, r1}

	return g_halMatlab_sendPacket_bl( 	f_socketHandler_i32,
    fbc0:	e24b3024 	sub	r3, fp, #36	; 0x24
    fbc4:	e51b0030 	ldr	r0, [fp, #-48]	; 0x30
    fbc8:	e1a01003 	mov	r1, r3
    fbcc:	e3a02020 	mov	r2, #32
    fbd0:	ebffff04 	bl	f7e8 <g_halMatlab_sendPacket_bl>
    fbd4:	e1a03000 	mov	r3, r0
										(unsigned char*)&l_rtSigPayload_st,
										sizeof( l_rtSigPayload_st ) );
}
    fbd8:	e1a00003 	mov	r0, r3
    fbdc:	e24bd004 	sub	sp, fp, #4
    fbe0:	e8bd8800 	pop	{fp, pc}

0000fbe4 <g_halMatlab_sendSigAllStates_bl>:
 ***********************************************************************/
unsigned int g_halMatlab_sendSigAllStates_bl(	int f_socketHandler_i32,
												halImu_orientationValues f_rawImuState_st,
												sigOri_orientationAngles f_sigKalmanState_st,
												sigOri_orientationAngles f_sigComplementaryState_st )
{
    fbe4:	e24dd008 	sub	sp, sp, #8
    fbe8:	e92d4800 	push	{fp, lr}
    fbec:	e28db004 	add	fp, sp, #4
    fbf0:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
    fbf4:	e50b00a0 	str	r0, [fp, #-160]	; 0xa0
    fbf8:	e28b1004 	add	r1, fp, #4
    fbfc:	e881000c 	stm	r1, {r2, r3}
    fc00:	eeb06b44 	vmov.f64	d6, d4
    fc04:	eeb07b45 	vmov.f64	d7, d5
    fc08:	ed0b0b2f 	vstr	d0, [fp, #-188]	; 0xffffff44
    fc0c:	ed0b1b2d 	vstr	d1, [fp, #-180]	; 0xffffff4c
    fc10:	ed0b2b2b 	vstr	d2, [fp, #-172]	; 0xffffff54
    fc14:	ed0b3b35 	vstr	d3, [fp, #-212]	; 0xffffff2c
    fc18:	ed0b6b33 	vstr	d6, [fp, #-204]	; 0xffffff34
    fc1c:	ed0b7b31 	vstr	d7, [fp, #-196]	; 0xffffff3c
	 *                Select 'Cross G++ Linker'->Libraries
	 *                and add the entry 'rt' to 'Libraries (-l)'
	 *
	 *       GCC on the commandline: simply add '-lrt' to your gcc options
	 */
	if ( clock_gettime(CLOCK_REALTIME, &l_timestamp_st) != M_HAL_MATLAB_SUCCESS_UI8)
    fc20:	e24b309c 	sub	r3, fp, #156	; 0x9c
    fc24:	e3a00000 	mov	r0, #0
    fc28:	e1a01003 	mov	r1, r3
    fc2c:	ebffe3c9 	bl	8b58 <_init+0x44>
    fc30:	e1a03000 	mov	r3, r0
    fc34:	e3530000 	cmp	r3, #0
    fc38:	0a000001 	beq	fc44 <g_halMatlab_sendSigAllStates_bl+0x60>
	{
		return M_HAL_MATLAB_FAILED_UI8;
    fc3c:	e3a03001 	mov	r3, #1
    fc40:	ea00001c 	b	fcb8 <g_halMatlab_sendSigAllStates_bl+0xd4>
	}

	//assmeble timestamp and
	l_rtCompleteSigPayload_st.timestamp_st 				= l_timestamp_st;
    fc44:	e24b3094 	sub	r3, fp, #148	; 0x94
    fc48:	e24b209c 	sub	r2, fp, #156	; 0x9c
    fc4c:	e8920003 	ldm	r2, {r0, r1}
    fc50:	e8830003 	stm	r3, {r0, r1}
	l_rtCompleteSigPayload_st.imuState_st				= f_rawImuState_st;
    fc54:	e24b108c 	sub	r1, fp, #140	; 0x8c
    fc58:	e28b2004 	add	r2, fp, #4
    fc5c:	e3a03058 	mov	r3, #88	; 0x58
    fc60:	e1a00001 	mov	r0, r1
    fc64:	e1a01002 	mov	r1, r2
    fc68:	e1a02003 	mov	r2, r3
    fc6c:	ebffe404 	bl	8c84 <_init+0x170>
	l_rtCompleteSigPayload_st.kalmanSigState_st 		= f_sigKalmanState_st;
    fc70:	e24bc034 	sub	ip, fp, #52	; 0x34
    fc74:	e24be0bc 	sub	lr, fp, #188	; 0xbc
    fc78:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    fc7c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    fc80:	e89e0003 	ldm	lr, {r0, r1}
    fc84:	e88c0003 	stm	ip, {r0, r1}
	l_rtCompleteSigPayload_st.complementarySigState_st	= f_sigComplementaryState_st;
    fc88:	e24bc01c 	sub	ip, fp, #28
    fc8c:	e24be0d4 	sub	lr, fp, #212	; 0xd4
    fc90:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    fc94:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    fc98:	e89e0003 	ldm	lr, {r0, r1}
    fc9c:	e88c0003 	stm	ip, {r0, r1}

	return g_halMatlab_sendPacket_bl( 	f_socketHandler_i32,
    fca0:	e24b3094 	sub	r3, fp, #148	; 0x94
    fca4:	e51b00a0 	ldr	r0, [fp, #-160]	; 0xa0
    fca8:	e1a01003 	mov	r1, r3
    fcac:	e3a02090 	mov	r2, #144	; 0x90
    fcb0:	ebfffecc 	bl	f7e8 <g_halMatlab_sendPacket_bl>
    fcb4:	e1a03000 	mov	r3, r0
										(unsigned char*)&l_rtCompleteSigPayload_st,
										sizeof( l_rtCompleteSigPayload_st ) );
}
    fcb8:	e1a00003 	mov	r0, r3
    fcbc:	e24bd004 	sub	sp, fp, #4
    fcc0:	e8bd4800 	pop	{fp, lr}
    fcc4:	e28dd008 	add	sp, sp, #8
    fcc8:	e12fff1e 	bx	lr

0000fccc <g_halMatlab_recvSigState_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halMatlab_rtSigPayload g_halMatlab_recvSigState_bl( int f_socketHandler_i32 ) {
    fccc:	e92d4800 	push	{fp, lr}
    fcd0:	e28db004 	add	fp, sp, #4
    fcd4:	e24dd050 	sub	sp, sp, #80	; 0x50
    fcd8:	e50b0050 	str	r0, [fp, #-80]	; 0x50
    fcdc:	e50b1054 	str	r1, [fp, #-84]	; 0x54
	halMatlab_rtSigPayload 		l_recvSigState_st;
	unsigned char				l_recvBuffer_rgXui8[ sizeof(halMatlab_rtSigPayload) ];
	unsigned int				l_recvBytesNumber_ui32;

	// zero all values
	l_recvSigState_st.timestamp_st.tv_sec 	= 0;
    fce0:	e3a03000 	mov	r3, #0
    fce4:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
	l_recvSigState_st.timestamp_st.tv_nsec 	= 0;
    fce8:	e3a03000 	mov	r3, #0
    fcec:	e50b3028 	str	r3, [fp, #-40]	; 0x28

	l_recvSigState_st.sigState_st.roll_f64 	= 0;
    fcf0:	e3a02000 	mov	r2, #0
    fcf4:	e3a03000 	mov	r3, #0
    fcf8:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	l_recvSigState_st.sigState_st.pitch_f64 = 0;
    fcfc:	e3a02000 	mov	r2, #0
    fd00:	e3a03000 	mov	r3, #0
    fd04:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	l_recvSigState_st.sigState_st.yaw_f64 	= 0;
    fd08:	e3a02000 	mov	r2, #0
    fd0c:	e3a03000 	mov	r3, #0
    fd10:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec


	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    fd14:	e24b304c 	sub	r3, fp, #76	; 0x4c
    fd18:	e51b0054 	ldr	r0, [fp, #-84]	; 0x54
    fd1c:	e1a01003 	mov	r1, r3
    fd20:	e3a02020 	mov	r2, #32
    fd24:	ebffff0e 	bl	f964 <g_halMatlab_recvPacket_ui32>
    fd28:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halMatlab_rtSigPayload) );

	if ( l_recvBytesNumber_ui32 == sizeof(halMatlab_rtSigPayload) )
    fd2c:	e51b3008 	ldr	r3, [fp, #-8]
    fd30:	e3530020 	cmp	r3, #32
    fd34:	1a000005 	bne	fd50 <g_halMatlab_recvSigState_bl+0x84>
	{
		memcpy( &l_recvSigState_st, &l_recvBuffer_rgXui8, sizeof(halMatlab_rtSigPayload));
    fd38:	e24b202c 	sub	r2, fp, #44	; 0x2c
    fd3c:	e24b304c 	sub	r3, fp, #76	; 0x4c
    fd40:	e1a00002 	mov	r0, r2
    fd44:	e1a01003 	mov	r1, r3
    fd48:	e3a02020 	mov	r2, #32
    fd4c:	ebffe3cc 	bl	8c84 <_init+0x170>
	}

	return l_recvSigState_st;
    fd50:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
    fd54:	e1a0c003 	mov	ip, r3
    fd58:	e24be02c 	sub	lr, fp, #44	; 0x2c
    fd5c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
    fd60:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
    fd64:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
    fd68:	e88c000f 	stm	ip, {r0, r1, r2, r3}
}
    fd6c:	e51b0050 	ldr	r0, [fp, #-80]	; 0x50
    fd70:	e24bd004 	sub	sp, fp, #4
    fd74:	e8bd8800 	pop	{fp, pc}

0000fd78 <g_halMatlab_recvSigAllStates_bl>:
 * \internal
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halMatlab_rtSigAllStatePayload g_halMatlab_recvSigAllStates_bl( int f_socketHandler_i32 ) {
    fd78:	e92d4800 	push	{fp, lr}
    fd7c:	e28db004 	add	fp, sp, #4
    fd80:	e24dde13 	sub	sp, sp, #304	; 0x130
    fd84:	e50b0130 	str	r0, [fp, #-304]	; 0x130
    fd88:	e50b1134 	str	r1, [fp, #-308]	; 0x134
	halMatlab_rtSigAllStatePayload 		l_recvSigAllStates_st;
	unsigned char				              l_recvBuffer_rgXui8[ sizeof(halMatlab_rtSigAllStatePayload) ];
	unsigned int				              l_recvBytesNumber_ui32;

	// zero all values
	l_recvSigAllStates_st.timestamp_st.tv_sec 	= 0;
    fd8c:	e3a03000 	mov	r3, #0
    fd90:	e50b309c 	str	r3, [fp, #-156]	; 0x9c
	l_recvSigAllStates_st.timestamp_st.tv_nsec 	= 0;
    fd94:	e3a03000 	mov	r3, #0
    fd98:	e50b3098 	str	r3, [fp, #-152]	; 0x98

    l_recvSigAllStates_st.imuState_st.acc.x_f64       = 0;
    fd9c:	e3a02000 	mov	r2, #0
    fda0:	e3a03000 	mov	r3, #0
    fda4:	e14b29f4 	strd	r2, [fp, #-148]	; 0xffffff6c
    l_recvSigAllStates_st.imuState_st.acc.y_f64       = 0;
    fda8:	e3a02000 	mov	r2, #0
    fdac:	e3a03000 	mov	r3, #0
    fdb0:	e14b28fc 	strd	r2, [fp, #-140]	; 0xffffff74
    l_recvSigAllStates_st.imuState_st.acc.z_f64       = 0;
    fdb4:	e3a02000 	mov	r2, #0
    fdb8:	e3a03000 	mov	r3, #0
    fdbc:	e14b28f4 	strd	r2, [fp, #-132]	; 0xffffff7c
  
    l_recvSigAllStates_st.imuState_st.mag.x_f64       = 0;
    fdc0:	e3a02000 	mov	r2, #0
    fdc4:	e3a03000 	mov	r3, #0
    fdc8:	e14b27fc 	strd	r2, [fp, #-124]	; 0xffffff84
    l_recvSigAllStates_st.imuState_st.mag.y_f64       = 0;
    fdcc:	e3a02000 	mov	r2, #0
    fdd0:	e3a03000 	mov	r3, #0
    fdd4:	e14b27f4 	strd	r2, [fp, #-116]	; 0xffffff8c
    l_recvSigAllStates_st.imuState_st.mag.z_f64       = 0;
    fdd8:	e3a02000 	mov	r2, #0
    fddc:	e3a03000 	mov	r3, #0
    fde0:	e14b26fc 	strd	r2, [fp, #-108]	; 0xffffff94
  
	l_recvSigAllStates_st.imuState_st.gyro.roll_f64 	= 0;
    fde4:	e3a02000 	mov	r2, #0
    fde8:	e3a03000 	mov	r3, #0
    fdec:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
    l_recvSigAllStates_st.imuState_st.gyro.pitch_f64  = 0;
    fdf0:	e3a02000 	mov	r2, #0
    fdf4:	e3a03000 	mov	r3, #0
    fdf8:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	l_recvSigAllStates_st.imuState_st.gyro.yaw_f64 	  = 0;
    fdfc:	e3a02000 	mov	r2, #0
    fe00:	e3a03000 	mov	r3, #0
    fe04:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac
  
    l_recvSigAllStates_st.imuState_st.temperature_f64 = 0;
    fe08:	e3a02000 	mov	r2, #0
    fe0c:	e3a03000 	mov	r3, #0
    fe10:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
    l_recvSigAllStates_st.imuState_st.pressure_f64    = 0;
    fe14:	e3a02000 	mov	r2, #0
    fe18:	e3a03000 	mov	r3, #0
    fe1c:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
  
	l_recvSigAllStates_st.kalmanSigState_st.roll_f64 	= 0;
    fe20:	e3a02000 	mov	r2, #0
    fe24:	e3a03000 	mov	r3, #0
    fe28:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4
	l_recvSigAllStates_st.kalmanSigState_st.pitch_f64 = 0;
    fe2c:	e3a02000 	mov	r2, #0
    fe30:	e3a03000 	mov	r3, #0
    fe34:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	l_recvSigAllStates_st.kalmanSigState_st.yaw_f64 	= 0;
    fe38:	e3a02000 	mov	r2, #0
    fe3c:	e3a03000 	mov	r3, #0
    fe40:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4

	l_recvSigAllStates_st.complementarySigState_st.roll_f64 	= 0;
    fe44:	e3a02000 	mov	r2, #0
    fe48:	e3a03000 	mov	r3, #0
    fe4c:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
    l_recvSigAllStates_st.complementarySigState_st.pitch_f64 = 0;
    fe50:	e3a02000 	mov	r2, #0
    fe54:	e3a03000 	mov	r3, #0
    fe58:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	l_recvSigAllStates_st.complementarySigState_st.yaw_f64 	= 0;
    fe5c:	e3a02000 	mov	r2, #0
    fe60:	e3a03000 	mov	r3, #0
    fe64:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec

	// receive packet
	l_recvBytesNumber_ui32 = g_halMatlab_recvPacket_ui32(	f_socketHandler_i32,
    fe68:	e24b3f4b 	sub	r3, fp, #300	; 0x12c
    fe6c:	e51b0134 	ldr	r0, [fp, #-308]	; 0x134
    fe70:	e1a01003 	mov	r1, r3
    fe74:	e3a02090 	mov	r2, #144	; 0x90
    fe78:	ebfffeb9 	bl	f964 <g_halMatlab_recvPacket_ui32>
    fe7c:	e50b0008 	str	r0, [fp, #-8]
															l_recvBuffer_rgXui8,
															sizeof(halMatlab_rtSigAllStatePayload) );

	if ( l_recvBytesNumber_ui32 == sizeof(halMatlab_rtSigAllStatePayload) )
    fe80:	e51b3008 	ldr	r3, [fp, #-8]
    fe84:	e3530090 	cmp	r3, #144	; 0x90
    fe88:	1a000005 	bne	fea4 <g_halMatlab_recvSigAllStates_bl+0x12c>
	{
		memcpy( &l_recvSigAllStates_st, &l_recvBuffer_rgXui8, sizeof(halMatlab_rtSigAllStatePayload));
    fe8c:	e24b209c 	sub	r2, fp, #156	; 0x9c
    fe90:	e24b3f4b 	sub	r3, fp, #300	; 0x12c
    fe94:	e1a00002 	mov	r0, r2
    fe98:	e1a01003 	mov	r1, r3
    fe9c:	e3a02090 	mov	r2, #144	; 0x90
    fea0:	ebffe377 	bl	8c84 <_init+0x170>
	}

	return l_recvSigAllStates_st;
    fea4:	e51b3130 	ldr	r3, [fp, #-304]	; 0x130
    fea8:	e1a01003 	mov	r1, r3
    feac:	e24b209c 	sub	r2, fp, #156	; 0x9c
    feb0:	e3a03090 	mov	r3, #144	; 0x90
    feb4:	e1a00001 	mov	r0, r1
    feb8:	e1a01002 	mov	r1, r2
    febc:	e1a02003 	mov	r2, r3
    fec0:	ebffe36f 	bl	8c84 <_init+0x170>
}
    fec4:	e51b0130 	ldr	r0, [fp, #-304]	; 0x130
    fec8:	e24bd004 	sub	sp, fp, #4
    fecc:	e8bd8800 	pop	{fp, pc}

0000fed0 <m_getIndex_i32>:
#include <math.h>
//memcpy(dest, src, strlen(src)+1);


unsigned int m_getIndex_i32(unsigned int f_maxCol_ui32,unsigned int f_row_ui32,unsigned int f_col_ui32)
{
    fed0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    fed4:	e28db000 	add	fp, sp, #0
    fed8:	e24dd014 	sub	sp, sp, #20
    fedc:	e50b0008 	str	r0, [fp, #-8]
    fee0:	e50b100c 	str	r1, [fp, #-12]
    fee4:	e50b2010 	str	r2, [fp, #-16]
	return (f_maxCol_ui32*f_row_ui32+f_col_ui32);
    fee8:	e51b3008 	ldr	r3, [fp, #-8]
    feec:	e51b200c 	ldr	r2, [fp, #-12]
    fef0:	e0020392 	mul	r2, r2, r3
    fef4:	e51b3010 	ldr	r3, [fp, #-16]
    fef8:	e0823003 	add	r3, r2, r3
}
    fefc:	e1a00003 	mov	r0, r3
    ff00:	e24bd000 	sub	sp, fp, #0
    ff04:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    ff08:	e12fff1e 	bx	lr

0000ff0c <g_sigMath_matrixMultiplikation_bl>:
unsigned int g_sigMath_matrixMultiplikation_bl(
		double* f_matrixResult_pf64, double* f_matrixA_pf64,
		unsigned int f_nrOfRowsA_ui32, unsigned int f_nrOfColsA_ui32,
		double* f_matrixB_pf64, unsigned int f_nrOfRowsB_ui32,
		unsigned int f_nrOfColsB_ui32)
{
    ff0c:	e92d4800 	push	{fp, lr}
    ff10:	ed2d8b02 	vpush	{d8}
    ff14:	e28db00c 	add	fp, sp, #12
    ff18:	e24dd028 	sub	sp, sp, #40	; 0x28
    ff1c:	e50b0028 	str	r0, [fp, #-40]	; 0x28
    ff20:	e50b102c 	str	r1, [fp, #-44]	; 0x2c
    ff24:	e50b2030 	str	r2, [fp, #-48]	; 0x30
    ff28:	e50b3034 	str	r3, [fp, #-52]	; 0x34
	unsigned int l_rowCounter_ui32=0;
    ff2c:	e3a03000 	mov	r3, #0
    ff30:	e50b3010 	str	r3, [fp, #-16]
	unsigned int l_colCounter_ui32=0;
    ff34:	e3a03000 	mov	r3, #0
    ff38:	e50b3014 	str	r3, [fp, #-20]
	unsigned int l_innerCounter_ui32=0;
    ff3c:	e3a03000 	mov	r3, #0
    ff40:	e50b3018 	str	r3, [fp, #-24]
	double l_temporalStorage_f64=0;
    ff44:	e3a02000 	mov	r2, #0
    ff48:	e3a03000 	mov	r3, #0
    ff4c:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc

	if(f_nrOfColsA_ui32!=f_nrOfRowsB_ui32)
    ff50:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
    ff54:	e59b3008 	ldr	r3, [fp, #8]
    ff58:	e1520003 	cmp	r2, r3
    ff5c:	0a000001 	beq	ff68 <g_sigMath_matrixMultiplikation_bl+0x5c>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
    ff60:	e3a03001 	mov	r3, #1
    ff64:	ea000041 	b	10070 <g_sigMath_matrixMultiplikation_bl+0x164>
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
    ff68:	e3a03000 	mov	r3, #0
    ff6c:	e50b3010 	str	r3, [fp, #-16]
    ff70:	ea000039 	b	1005c <g_sigMath_matrixMultiplikation_bl+0x150>
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
    ff74:	e3a03000 	mov	r3, #0
    ff78:	e50b3014 	str	r3, [fp, #-20]
    ff7c:	ea00002f 	b	10040 <g_sigMath_matrixMultiplikation_bl+0x134>
			{
				for(l_innerCounter_ui32=0;l_innerCounter_ui32<f_nrOfColsA_ui32;l_innerCounter_ui32++)
    ff80:	e3a03000 	mov	r3, #0
    ff84:	e50b3018 	str	r3, [fp, #-24]
    ff88:	ea000018 	b	fff0 <g_sigMath_matrixMultiplikation_bl+0xe4>
				{
					l_temporalStorage_f64+=f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_innerCounter_ui32)]*
    ff8c:	e51b0034 	ldr	r0, [fp, #-52]	; 0x34
    ff90:	e51b1010 	ldr	r1, [fp, #-16]
    ff94:	e51b2018 	ldr	r2, [fp, #-24]
    ff98:	ebffffcc 	bl	fed0 <m_getIndex_i32>
    ff9c:	e1a03000 	mov	r3, r0
    ffa0:	e1a03183 	lsl	r3, r3, #3
    ffa4:	e51b202c 	ldr	r2, [fp, #-44]	; 0x2c
    ffa8:	e0823003 	add	r3, r2, r3
    ffac:	ed938b00 	vldr	d8, [r3]
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_innerCounter_ui32,l_colCounter_ui32)];
    ffb0:	e59b000c 	ldr	r0, [fp, #12]
    ffb4:	e51b1018 	ldr	r1, [fp, #-24]
    ffb8:	e51b2014 	ldr	r2, [fp, #-20]
    ffbc:	ebffffc3 	bl	fed0 <m_getIndex_i32>
    ffc0:	e1a03000 	mov	r3, r0
    ffc4:	e1a03183 	lsl	r3, r3, #3
    ffc8:	e59b2004 	ldr	r2, [fp, #4]
    ffcc:	e0823003 	add	r3, r2, r3
    ffd0:	ed937b00 	vldr	d7, [r3]
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
			{
				for(l_innerCounter_ui32=0;l_innerCounter_ui32<f_nrOfColsA_ui32;l_innerCounter_ui32++)
				{
					l_temporalStorage_f64+=f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_innerCounter_ui32)]*
    ffd4:	ee287b07 	vmul.f64	d7, d8, d7
    ffd8:	ed1b6b09 	vldr	d6, [fp, #-36]	; 0xffffffdc
    ffdc:	ee367b07 	vadd.f64	d7, d6, d7
    ffe0:	ed0b7b09 	vstr	d7, [fp, #-36]	; 0xffffffdc
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
			{
				for(l_innerCounter_ui32=0;l_innerCounter_ui32<f_nrOfColsA_ui32;l_innerCounter_ui32++)
    ffe4:	e51b3018 	ldr	r3, [fp, #-24]
    ffe8:	e2833001 	add	r3, r3, #1
    ffec:	e50b3018 	str	r3, [fp, #-24]
    fff0:	e51b2018 	ldr	r2, [fp, #-24]
    fff4:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
    fff8:	e1520003 	cmp	r2, r3
    fffc:	3affffe2 	bcc	ff8c <g_sigMath_matrixMultiplikation_bl+0x80>
				{
					l_temporalStorage_f64+=f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_innerCounter_ui32)]*
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_innerCounter_ui32,l_colCounter_ui32)];
				}
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=l_temporalStorage_f64;
   10000:	e59b000c 	ldr	r0, [fp, #12]
   10004:	e51b1010 	ldr	r1, [fp, #-16]
   10008:	e51b2014 	ldr	r2, [fp, #-20]
   1000c:	ebffffaf 	bl	fed0 <m_getIndex_i32>
   10010:	e1a03000 	mov	r3, r0
   10014:	e1a03183 	lsl	r3, r3, #3
   10018:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
   1001c:	e0821003 	add	r1, r2, r3
   10020:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
   10024:	e1c120f0 	strd	r2, [r1]
				l_temporalStorage_f64=0;
   10028:	e3a02000 	mov	r2, #0
   1002c:	e3a03000 	mov	r3, #0
   10030:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsB_ui32;l_colCounter_ui32++)
   10034:	e51b3014 	ldr	r3, [fp, #-20]
   10038:	e2833001 	add	r3, r3, #1
   1003c:	e50b3014 	str	r3, [fp, #-20]
   10040:	e51b2014 	ldr	r2, [fp, #-20]
   10044:	e59b300c 	ldr	r3, [fp, #12]
   10048:	e1520003 	cmp	r2, r3
   1004c:	3affffcb 	bcc	ff80 <g_sigMath_matrixMultiplikation_bl+0x74>

	if(f_nrOfColsA_ui32!=f_nrOfRowsB_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
   10050:	e51b3010 	ldr	r3, [fp, #-16]
   10054:	e2833001 	add	r3, r3, #1
   10058:	e50b3010 	str	r3, [fp, #-16]
   1005c:	e51b2010 	ldr	r2, [fp, #-16]
   10060:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
   10064:	e1520003 	cmp	r2, r3
   10068:	3affffc1 	bcc	ff74 <g_sigMath_matrixMultiplikation_bl+0x68>
				}
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsB_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=l_temporalStorage_f64;
				l_temporalStorage_f64=0;
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
   1006c:	e3a03000 	mov	r3, #0
	}
}
   10070:	e1a00003 	mov	r0, r3
   10074:	e24bd00c 	sub	sp, fp, #12
   10078:	ecbd8b02 	vpop	{d8}
   1007c:	e8bd8800 	pop	{fp, pc}

00010080 <g_sigMath_matrixAddition_bl>:
 ***********************************************************************/
unsigned int g_sigMath_matrixAddition_bl(double* f_matrixResult_pf64,
		double* f_matrixA_pf64, unsigned int f_nrOfRowsA_ui32,
		unsigned int f_nrOfColsA_ui32, double* f_matrixB_pf64,
		unsigned int f_nrOfRowsB_ui32, unsigned int f_nrOfColsB_ui32)
		{
   10080:	e92d4810 	push	{r4, fp, lr}
   10084:	ed2d8b02 	vpush	{d8}
   10088:	e28db010 	add	fp, sp, #16
   1008c:	e24dd01c 	sub	sp, sp, #28
   10090:	e50b0020 	str	r0, [fp, #-32]
   10094:	e50b1024 	str	r1, [fp, #-36]	; 0x24
   10098:	e50b2028 	str	r2, [fp, #-40]	; 0x28
   1009c:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
	unsigned int l_rowCounter_ui32=0;
   100a0:	e3a03000 	mov	r3, #0
   100a4:	e50b3018 	str	r3, [fp, #-24]
	unsigned int l_colCounter_ui32=0;
   100a8:	e3a03000 	mov	r3, #0
   100ac:	e50b301c 	str	r3, [fp, #-28]

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
   100b0:	e51b202c 	ldr	r2, [fp, #-44]	; 0x2c
   100b4:	e59b300c 	ldr	r3, [fp, #12]
   100b8:	e1520003 	cmp	r2, r3
   100bc:	0a000005 	beq	100d8 <g_sigMath_matrixAddition_bl+0x58>
   100c0:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
   100c4:	e59b3008 	ldr	r3, [fp, #8]
   100c8:	e1520003 	cmp	r2, r3
   100cc:	0a000001 	beq	100d8 <g_sigMath_matrixAddition_bl+0x58>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
   100d0:	e3a03001 	mov	r3, #1
   100d4:	ea000030 	b	1019c <g_sigMath_matrixAddition_bl+0x11c>
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
   100d8:	e3a03000 	mov	r3, #0
   100dc:	e50b3018 	str	r3, [fp, #-24]
   100e0:	ea000028 	b	10188 <g_sigMath_matrixAddition_bl+0x108>
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
   100e4:	e3a03000 	mov	r3, #0
   100e8:	e50b301c 	str	r3, [fp, #-28]
   100ec:	ea00001e 	b	1016c <g_sigMath_matrixAddition_bl+0xec>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
   100f0:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
   100f4:	e51b1018 	ldr	r1, [fp, #-24]
   100f8:	e51b201c 	ldr	r2, [fp, #-28]
   100fc:	ebffff73 	bl	fed0 <m_getIndex_i32>
   10100:	e1a03000 	mov	r3, r0
   10104:	e1a03183 	lsl	r3, r3, #3
   10108:	e51b2020 	ldr	r2, [fp, #-32]
   1010c:	e0824003 	add	r4, r2, r3
						f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+
   10110:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
   10114:	e51b1018 	ldr	r1, [fp, #-24]
   10118:	e51b201c 	ldr	r2, [fp, #-28]
   1011c:	ebffff6b 	bl	fed0 <m_getIndex_i32>
   10120:	e1a03000 	mov	r3, r0
   10124:	e1a03183 	lsl	r3, r3, #3
   10128:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
   1012c:	e0823003 	add	r3, r2, r3
   10130:	ed938b00 	vldr	d8, [r3]
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
   10134:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
   10138:	e51b1018 	ldr	r1, [fp, #-24]
   1013c:	e51b201c 	ldr	r2, [fp, #-28]
   10140:	ebffff62 	bl	fed0 <m_getIndex_i32>
   10144:	e1a03000 	mov	r3, r0
   10148:	e1a03183 	lsl	r3, r3, #3
   1014c:	e59b2004 	ldr	r2, [fp, #4]
   10150:	e0823003 	add	r3, r2, r3
   10154:	ed937b00 	vldr	d7, [r3]
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+
   10158:	ee387b07 	vadd.f64	d7, d8, d7
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
   1015c:	ed847b00 	vstr	d7, [r4]
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
   10160:	e51b301c 	ldr	r3, [fp, #-28]
   10164:	e2833001 	add	r3, r3, #1
   10168:	e50b301c 	str	r3, [fp, #-28]
   1016c:	e51b201c 	ldr	r2, [fp, #-28]
   10170:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
   10174:	e1520003 	cmp	r2, r3
   10178:	3affffdc 	bcc	100f0 <g_sigMath_matrixAddition_bl+0x70>

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
   1017c:	e51b3018 	ldr	r3, [fp, #-24]
   10180:	e2833001 	add	r3, r3, #1
   10184:	e50b3018 	str	r3, [fp, #-24]
   10188:	e51b2018 	ldr	r2, [fp, #-24]
   1018c:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
   10190:	e1520003 	cmp	r2, r3
   10194:	3affffd2 	bcc	100e4 <g_sigMath_matrixAddition_bl+0x64>
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
   10198:	e3a03000 	mov	r3, #0
	}
}
   1019c:	e1a00003 	mov	r0, r3
   101a0:	e24bd010 	sub	sp, fp, #16
   101a4:	ecbd8b02 	vpop	{d8}
   101a8:	e8bd8810 	pop	{r4, fp, pc}

000101ac <g_sigMath_matrixSubtraktion_bl>:
 ***********************************************************************/
unsigned int g_sigMath_matrixSubtraktion_bl(double* f_matrixResult_pf64,
		double* f_matrixA_pf64, unsigned int f_nrOfRowsA_ui32,
		unsigned int f_nrOfColsA_ui32, double* f_matrixB_pf64,
		unsigned int f_nrOfRowsB_ui32, unsigned int f_nrOfColsB_ui32)
{
   101ac:	e92d4810 	push	{r4, fp, lr}
   101b0:	ed2d8b02 	vpush	{d8}
   101b4:	e28db010 	add	fp, sp, #16
   101b8:	e24dd01c 	sub	sp, sp, #28
   101bc:	e50b0020 	str	r0, [fp, #-32]
   101c0:	e50b1024 	str	r1, [fp, #-36]	; 0x24
   101c4:	e50b2028 	str	r2, [fp, #-40]	; 0x28
   101c8:	e50b302c 	str	r3, [fp, #-44]	; 0x2c
	unsigned int l_rowCounter_ui32=0;
   101cc:	e3a03000 	mov	r3, #0
   101d0:	e50b3018 	str	r3, [fp, #-24]
	unsigned int l_colCounter_ui32=0;
   101d4:	e3a03000 	mov	r3, #0
   101d8:	e50b301c 	str	r3, [fp, #-28]

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
   101dc:	e51b202c 	ldr	r2, [fp, #-44]	; 0x2c
   101e0:	e59b300c 	ldr	r3, [fp, #12]
   101e4:	e1520003 	cmp	r2, r3
   101e8:	0a000005 	beq	10204 <g_sigMath_matrixSubtraktion_bl+0x58>
   101ec:	e51b2028 	ldr	r2, [fp, #-40]	; 0x28
   101f0:	e59b3008 	ldr	r3, [fp, #8]
   101f4:	e1520003 	cmp	r2, r3
   101f8:	0a000001 	beq	10204 <g_sigMath_matrixSubtraktion_bl+0x58>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
   101fc:	e3a03001 	mov	r3, #1
   10200:	ea000030 	b	102c8 <g_sigMath_matrixSubtraktion_bl+0x11c>
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
   10204:	e3a03000 	mov	r3, #0
   10208:	e50b3018 	str	r3, [fp, #-24]
   1020c:	ea000028 	b	102b4 <g_sigMath_matrixSubtraktion_bl+0x108>
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
   10210:	e3a03000 	mov	r3, #0
   10214:	e50b301c 	str	r3, [fp, #-28]
   10218:	ea00001e 	b	10298 <g_sigMath_matrixSubtraktion_bl+0xec>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
   1021c:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
   10220:	e51b1018 	ldr	r1, [fp, #-24]
   10224:	e51b201c 	ldr	r2, [fp, #-28]
   10228:	ebffff28 	bl	fed0 <m_getIndex_i32>
   1022c:	e1a03000 	mov	r3, r0
   10230:	e1a03183 	lsl	r3, r3, #3
   10234:	e51b2020 	ldr	r2, [fp, #-32]
   10238:	e0824003 	add	r4, r2, r3
							f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-
   1023c:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
   10240:	e51b1018 	ldr	r1, [fp, #-24]
   10244:	e51b201c 	ldr	r2, [fp, #-28]
   10248:	ebffff20 	bl	fed0 <m_getIndex_i32>
   1024c:	e1a03000 	mov	r3, r0
   10250:	e1a03183 	lsl	r3, r3, #3
   10254:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
   10258:	e0823003 	add	r3, r2, r3
   1025c:	ed938b00 	vldr	d8, [r3]
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
   10260:	e51b002c 	ldr	r0, [fp, #-44]	; 0x2c
   10264:	e51b1018 	ldr	r1, [fp, #-24]
   10268:	e51b201c 	ldr	r2, [fp, #-28]
   1026c:	ebffff17 	bl	fed0 <m_getIndex_i32>
   10270:	e1a03000 	mov	r3, r0
   10274:	e1a03183 	lsl	r3, r3, #3
   10278:	e59b2004 	ldr	r2, [fp, #4]
   1027c:	e0823003 	add	r3, r2, r3
   10280:	ed937b00 	vldr	d7, [r3]
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
							f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-
   10284:	ee387b47 	vsub.f64	d7, d8, d7
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
   10288:	ed847b00 	vstr	d7, [r4]
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
   1028c:	e51b301c 	ldr	r3, [fp, #-28]
   10290:	e2833001 	add	r3, r3, #1
   10294:	e50b301c 	str	r3, [fp, #-28]
   10298:	e51b201c 	ldr	r2, [fp, #-28]
   1029c:	e51b302c 	ldr	r3, [fp, #-44]	; 0x2c
   102a0:	e1520003 	cmp	r2, r3
   102a4:	3affffdc 	bcc	1021c <g_sigMath_matrixSubtraktion_bl+0x70>

	if(f_nrOfColsA_ui32!=f_nrOfColsB_ui32 && f_nrOfRowsA_ui32!=f_nrOfRowsB_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	else
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
   102a8:	e51b3018 	ldr	r3, [fp, #-24]
   102ac:	e2833001 	add	r3, r3, #1
   102b0:	e50b3018 	str	r3, [fp, #-24]
   102b4:	e51b2018 	ldr	r2, [fp, #-24]
   102b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0x28
   102bc:	e1520003 	cmp	r2, r3
   102c0:	3affffd2 	bcc	10210 <g_sigMath_matrixSubtraktion_bl+0x64>
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
							f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-
							f_matrixB_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
   102c4:	e3a03000 	mov	r3, #0
	}
}
   102c8:	e1a00003 	mov	r0, r3
   102cc:	e24bd010 	sub	sp, fp, #16
   102d0:	ecbd8b02 	vpop	{d8}
   102d4:	e8bd8810 	pop	{r4, fp, pc}

000102d8 <g_sigMath_matrixTransponiert_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixTransponiert_bl(
		double* f_matrixResult_pf64, double* f_matrix_pf64,
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32)
{
   102d8:	e92d4810 	push	{r4, fp, lr}
   102dc:	e28db008 	add	fp, sp, #8
   102e0:	e24dd01c 	sub	sp, sp, #28
   102e4:	e50b0018 	str	r0, [fp, #-24]
   102e8:	e50b101c 	str	r1, [fp, #-28]
   102ec:	e50b2020 	str	r2, [fp, #-32]
   102f0:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	unsigned int l_rowCounter_ui32=0;
   102f4:	e3a03000 	mov	r3, #0
   102f8:	e50b3010 	str	r3, [fp, #-16]
	unsigned int l_colCounter_ui32=0;
   102fc:	e3a03000 	mov	r3, #0
   10300:	e50b3014 	str	r3, [fp, #-20]

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
   10304:	e3a03000 	mov	r3, #0
   10308:	e50b3010 	str	r3, [fp, #-16]
   1030c:	ea00001e 	b	1038c <g_sigMath_matrixTransponiert_bl+0xb4>
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
   10310:	e3a03000 	mov	r3, #0
   10314:	e50b3014 	str	r3, [fp, #-20]
   10318:	ea000014 	b	10370 <g_sigMath_matrixTransponiert_bl+0x98>
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_colCounter_ui32,l_rowCounter_ui32)]=
   1031c:	e51b0024 	ldr	r0, [fp, #-36]	; 0x24
   10320:	e51b1014 	ldr	r1, [fp, #-20]
   10324:	e51b2010 	ldr	r2, [fp, #-16]
   10328:	ebfffee8 	bl	fed0 <m_getIndex_i32>
   1032c:	e1a03000 	mov	r3, r0
   10330:	e1a03183 	lsl	r3, r3, #3
   10334:	e51b2018 	ldr	r2, [fp, #-24]
   10338:	e0824003 	add	r4, r2, r3
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
   1033c:	e51b0024 	ldr	r0, [fp, #-36]	; 0x24
   10340:	e51b1010 	ldr	r1, [fp, #-16]
   10344:	e51b2014 	ldr	r2, [fp, #-20]
   10348:	ebfffee0 	bl	fed0 <m_getIndex_i32>
   1034c:	e1a03000 	mov	r3, r0
   10350:	e1a03183 	lsl	r3, r3, #3
   10354:	e51b201c 	ldr	r2, [fp, #-28]
   10358:	e0823003 	add	r3, r2, r3
   1035c:	e1c320d0 	ldrd	r2, [r3]

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_colCounter_ui32,l_rowCounter_ui32)]=
   10360:	e1c420f0 	strd	r2, [r4]
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
   10364:	e51b3014 	ldr	r3, [fp, #-20]
   10368:	e2833001 	add	r3, r3, #1
   1036c:	e50b3014 	str	r3, [fp, #-20]
   10370:	e51b2014 	ldr	r2, [fp, #-20]
   10374:	e51b3024 	ldr	r3, [fp, #-36]	; 0x24
   10378:	e1520003 	cmp	r2, r3
   1037c:	3affffe6 	bcc	1031c <g_sigMath_matrixTransponiert_bl+0x44>
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32)
{
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
   10380:	e51b3010 	ldr	r3, [fp, #-16]
   10384:	e2833001 	add	r3, r3, #1
   10388:	e50b3010 	str	r3, [fp, #-16]
   1038c:	e51b2010 	ldr	r2, [fp, #-16]
   10390:	e51b3020 	ldr	r3, [fp, #-32]
   10394:	e1520003 	cmp	r2, r3
   10398:	3affffdc 	bcc	10310 <g_sigMath_matrixTransponiert_bl+0x38>
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_colCounter_ui32,l_rowCounter_ui32)]=
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
		}
	}
	return M_SIG_MATRIXLIB_SUCCESS_BL;
   1039c:	e3a03000 	mov	r3, #0
}
   103a0:	e1a00003 	mov	r0, r3
   103a4:	e24bd008 	sub	sp, fp, #8
   103a8:	e8bd8810 	pop	{r4, fp, pc}

000103ac <g_sigMath_matrixInverse_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixInverse_bl(double* f_matrixResult_pf64,
		double* f_matrixA_pf64, unsigned int f_nrOfRowsA_ui32,
		unsigned int f_nrOfColsA_ui32)
{
   103ac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   103b0:	ed2d8b02 	vpush	{d8}
   103b4:	e28db028 	add	fp, sp, #40	; 0x28
   103b8:	e24dd0a4 	sub	sp, sp, #164	; 0xa4
   103bc:	e50b0078 	str	r0, [fp, #-120]	; 0x78
   103c0:	e50b107c 	str	r1, [fp, #-124]	; 0x7c
   103c4:	e50b2080 	str	r2, [fp, #-128]	; 0x80
   103c8:	e50b3084 	str	r3, [fp, #-132]	; 0x84
   103cc:	e1a0300d 	mov	r3, sp
   103d0:	e1a0a003 	mov	sl, r3
	int l_rowCounter_ui32=0;
   103d4:	e3a03000 	mov	r3, #0
   103d8:	e50b3030 	str	r3, [fp, #-48]	; 0x30
	int l_rowCounterInnerLoop_ui32=0;
   103dc:	e3a03000 	mov	r3, #0
   103e0:	e50b3034 	str	r3, [fp, #-52]	; 0x34
	int l_colCounter_ui32=0;
   103e4:	e3a03000 	mov	r3, #0
   103e8:	e50b3038 	str	r3, [fp, #-56]	; 0x38
	double l_tempValue_f64=0;
   103ec:	e3a02000 	mov	r2, #0
   103f0:	e3a03000 	mov	r3, #0
   103f4:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	//double l_determinant_f64=0;
	//Matrix for building a lower triangular matrix
	double l_lowerTriangularMatrix_f64[f_nrOfRowsA_ui32][f_nrOfColsA_ui32];
   103f8:	e51b8084 	ldr	r8, [fp, #-132]	; 0x84
   103fc:	e51b9080 	ldr	r9, [fp, #-128]	; 0x80
   10400:	e1a03008 	mov	r3, r8
   10404:	e2433001 	sub	r3, r3, #1
   10408:	e50b3048 	str	r3, [fp, #-72]	; 0x48
   1040c:	e1a02008 	mov	r2, r8
   10410:	e3a03000 	mov	r3, #0
   10414:	e1a05303 	lsl	r5, r3, #6
   10418:	e1855d22 	orr	r5, r5, r2, lsr #26
   1041c:	e1a04302 	lsl	r4, r2, #6
   10420:	e1a03009 	mov	r3, r9
   10424:	e2433001 	sub	r3, r3, #1
   10428:	e50b304c 	str	r3, [fp, #-76]	; 0x4c
   1042c:	e1a00008 	mov	r0, r8
   10430:	e3a01000 	mov	r1, #0
   10434:	e1a02009 	mov	r2, r9
   10438:	e3a03000 	mov	r3, #0
   1043c:	e00e0192 	mul	lr, r2, r1
   10440:	e00c0390 	mul	ip, r0, r3
   10444:	e08ec00c 	add	ip, lr, ip
   10448:	e0832290 	umull	r2, r3, r0, r2
   1044c:	e08c1003 	add	r1, ip, r3
   10450:	e1a03001 	mov	r3, r1
   10454:	e1a07303 	lsl	r7, r3, #6
   10458:	e1877d22 	orr	r7, r7, r2, lsr #26
   1045c:	e1a06302 	lsl	r6, r2, #6
   10460:	e1a00008 	mov	r0, r8
   10464:	e3a01000 	mov	r1, #0
   10468:	e1a02009 	mov	r2, r9
   1046c:	e3a03000 	mov	r3, #0
   10470:	e00e0192 	mul	lr, r2, r1
   10474:	e00c0390 	mul	ip, r0, r3
   10478:	e08ec00c 	add	ip, lr, ip
   1047c:	e0832290 	umull	r2, r3, r0, r2
   10480:	e08c1003 	add	r1, ip, r3
   10484:	e1a03001 	mov	r3, r1
   10488:	e1a01303 	lsl	r1, r3, #6
   1048c:	e50b1088 	str	r1, [fp, #-136]	; 0x88
   10490:	e51b1088 	ldr	r1, [fp, #-136]	; 0x88
   10494:	e1811d22 	orr	r1, r1, r2, lsr #26
   10498:	e50b1088 	str	r1, [fp, #-136]	; 0x88
   1049c:	e1a01302 	lsl	r1, r2, #6
   104a0:	e0030899 	mul	r3, r9, r8
   104a4:	e1a03183 	lsl	r3, r3, #3
   104a8:	e2833007 	add	r3, r3, #7
   104ac:	e2833007 	add	r3, r3, #7
   104b0:	e1a031a3 	lsr	r3, r3, #3
   104b4:	e1a03183 	lsl	r3, r3, #3
   104b8:	e04dd003 	sub	sp, sp, r3
   104bc:	e28d3010 	add	r3, sp, #16
   104c0:	e2833007 	add	r3, r3, #7
   104c4:	e1a031a3 	lsr	r3, r3, #3
   104c8:	e1a03183 	lsl	r3, r3, #3
   104cc:	e50b3050 	str	r3, [fp, #-80]	; 0x50
	double* l_lowerTriangularMatrix_pf64=(double*)l_lowerTriangularMatrix_f64;
   104d0:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
   104d4:	e50b3054 	str	r3, [fp, #-84]	; 0x54
	//Matrix for solving a system
	double l_lowerInverseTriangularMatrix_f64[f_nrOfRowsA_ui32][f_nrOfColsA_ui32];
   104d8:	e51b4084 	ldr	r4, [fp, #-132]	; 0x84
   104dc:	e51b5080 	ldr	r5, [fp, #-128]	; 0x80
   104e0:	e1a03004 	mov	r3, r4
   104e4:	e2433001 	sub	r3, r3, #1
   104e8:	e50b3058 	str	r3, [fp, #-88]	; 0x58
   104ec:	e1a02004 	mov	r2, r4
   104f0:	e3a03000 	mov	r3, #0
   104f4:	e1a01303 	lsl	r1, r3, #6
   104f8:	e50b1090 	str	r1, [fp, #-144]	; 0x90
   104fc:	e51b1090 	ldr	r1, [fp, #-144]	; 0x90
   10500:	e1811d22 	orr	r1, r1, r2, lsr #26
   10504:	e50b1090 	str	r1, [fp, #-144]	; 0x90
   10508:	e1a01302 	lsl	r1, r2, #6
   1050c:	e1a03005 	mov	r3, r5
   10510:	e2433001 	sub	r3, r3, #1
   10514:	e50b305c 	str	r3, [fp, #-92]	; 0x5c
   10518:	e1a00004 	mov	r0, r4
   1051c:	e3a01000 	mov	r1, #0
   10520:	e1a02005 	mov	r2, r5
   10524:	e3a03000 	mov	r3, #0
   10528:	e00e0192 	mul	lr, r2, r1
   1052c:	e00c0390 	mul	ip, r0, r3
   10530:	e08ec00c 	add	ip, lr, ip
   10534:	e0832290 	umull	r2, r3, r0, r2
   10538:	e08c1003 	add	r1, ip, r3
   1053c:	e1a03001 	mov	r3, r1
   10540:	e1a01303 	lsl	r1, r3, #6
   10544:	e50b1098 	str	r1, [fp, #-152]	; 0x98
   10548:	e51b1098 	ldr	r1, [fp, #-152]	; 0x98
   1054c:	e1811d22 	orr	r1, r1, r2, lsr #26
   10550:	e50b1098 	str	r1, [fp, #-152]	; 0x98
   10554:	e1a01302 	lsl	r1, r2, #6
   10558:	e1a02004 	mov	r2, r4
   1055c:	e3a03000 	mov	r3, #0
   10560:	e1a00005 	mov	r0, r5
   10564:	e3a01000 	mov	r1, #0
   10568:	e00e0390 	mul	lr, r0, r3
   1056c:	e00c0192 	mul	ip, r2, r1
   10570:	e08ec00c 	add	ip, lr, ip
   10574:	e0832092 	umull	r2, r3, r2, r0
   10578:	e08c1003 	add	r1, ip, r3
   1057c:	e1a03001 	mov	r3, r1
   10580:	e1a01303 	lsl	r1, r3, #6
   10584:	e50b10a0 	str	r1, [fp, #-160]	; 0xa0
   10588:	e51b10a0 	ldr	r1, [fp, #-160]	; 0xa0
   1058c:	e1811d22 	orr	r1, r1, r2, lsr #26
   10590:	e50b10a0 	str	r1, [fp, #-160]	; 0xa0
   10594:	e1a01302 	lsl	r1, r2, #6
   10598:	e0030495 	mul	r3, r5, r4
   1059c:	e1a03183 	lsl	r3, r3, #3
   105a0:	e2833007 	add	r3, r3, #7
   105a4:	e2833007 	add	r3, r3, #7
   105a8:	e1a031a3 	lsr	r3, r3, #3
   105ac:	e1a03183 	lsl	r3, r3, #3
   105b0:	e04dd003 	sub	sp, sp, r3
   105b4:	e28d3010 	add	r3, sp, #16
   105b8:	e2833007 	add	r3, r3, #7
   105bc:	e1a031a3 	lsr	r3, r3, #3
   105c0:	e1a03183 	lsl	r3, r3, #3
   105c4:	e50b3060 	str	r3, [fp, #-96]	; 0x60
	double* l_lowerInverseTriangularMatrix_pf64=(double*)l_lowerInverseTriangularMatrix_f64;
   105c8:	e51b3060 	ldr	r3, [fp, #-96]	; 0x60
   105cc:	e50b3064 	str	r3, [fp, #-100]	; 0x64

	double l_eyeMatrix_f64[f_nrOfRowsA_ui32][f_nrOfColsA_ui32];
   105d0:	e51bc084 	ldr	ip, [fp, #-132]	; 0x84
   105d4:	e51be080 	ldr	lr, [fp, #-128]	; 0x80
   105d8:	e1a0300c 	mov	r3, ip
   105dc:	e2433001 	sub	r3, r3, #1
   105e0:	e50b3068 	str	r3, [fp, #-104]	; 0x68
   105e4:	e1a0200c 	mov	r2, ip
   105e8:	e3a03000 	mov	r3, #0
   105ec:	e1a01303 	lsl	r1, r3, #6
   105f0:	e50b10a8 	str	r1, [fp, #-168]	; 0xa8
   105f4:	e51b10a8 	ldr	r1, [fp, #-168]	; 0xa8
   105f8:	e1811d22 	orr	r1, r1, r2, lsr #26
   105fc:	e50b10a8 	str	r1, [fp, #-168]	; 0xa8
   10600:	e1a01302 	lsl	r1, r2, #6
   10604:	e1a0300e 	mov	r3, lr
   10608:	e2433001 	sub	r3, r3, #1
   1060c:	e50b306c 	str	r3, [fp, #-108]	; 0x6c
   10610:	e1a0000c 	mov	r0, ip
   10614:	e3a01000 	mov	r1, #0
   10618:	e1a0200e 	mov	r2, lr
   1061c:	e3a03000 	mov	r3, #0
   10620:	e0050192 	mul	r5, r2, r1
   10624:	e0040390 	mul	r4, r0, r3
   10628:	e0854004 	add	r4, r5, r4
   1062c:	e0832290 	umull	r2, r3, r0, r2
   10630:	e0841003 	add	r1, r4, r3
   10634:	e1a03001 	mov	r3, r1
   10638:	e1a01303 	lsl	r1, r3, #6
   1063c:	e50b10b0 	str	r1, [fp, #-176]	; 0xb0
   10640:	e51b10b0 	ldr	r1, [fp, #-176]	; 0xb0
   10644:	e1811d22 	orr	r1, r1, r2, lsr #26
   10648:	e50b10b0 	str	r1, [fp, #-176]	; 0xb0
   1064c:	e1a01302 	lsl	r1, r2, #6
   10650:	e1a0000c 	mov	r0, ip
   10654:	e3a01000 	mov	r1, #0
   10658:	e1a0200e 	mov	r2, lr
   1065c:	e3a03000 	mov	r3, #0
   10660:	e0050192 	mul	r5, r2, r1
   10664:	e0040390 	mul	r4, r0, r3
   10668:	e0854004 	add	r4, r5, r4
   1066c:	e0832290 	umull	r2, r3, r0, r2
   10670:	e0841003 	add	r1, r4, r3
   10674:	e1a03001 	mov	r3, r1
   10678:	e1a01303 	lsl	r1, r3, #6
   1067c:	e50b10b8 	str	r1, [fp, #-184]	; 0xb8
   10680:	e51b10b8 	ldr	r1, [fp, #-184]	; 0xb8
   10684:	e1811d22 	orr	r1, r1, r2, lsr #26
   10688:	e50b10b8 	str	r1, [fp, #-184]	; 0xb8
   1068c:	e1a01302 	lsl	r1, r2, #6
   10690:	e0030c9e 	mul	r3, lr, ip
   10694:	e1a03183 	lsl	r3, r3, #3
   10698:	e2833007 	add	r3, r3, #7
   1069c:	e2833007 	add	r3, r3, #7
   106a0:	e1a031a3 	lsr	r3, r3, #3
   106a4:	e1a03183 	lsl	r3, r3, #3
   106a8:	e04dd003 	sub	sp, sp, r3
   106ac:	e28d3010 	add	r3, sp, #16
   106b0:	e2833007 	add	r3, r3, #7
   106b4:	e1a031a3 	lsr	r3, r3, #3
   106b8:	e1a03183 	lsl	r3, r3, #3
   106bc:	e50b3070 	str	r3, [fp, #-112]	; 0x70
	double* l_eyeMatrix_pf64=(double*)l_eyeMatrix_f64;
   106c0:	e51b3070 	ldr	r3, [fp, #-112]	; 0x70
   106c4:	e50b3074 	str	r3, [fp, #-116]	; 0x74

	if(f_nrOfRowsA_ui32!=f_nrOfColsA_ui32)
   106c8:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
   106cc:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
   106d0:	e1520003 	cmp	r2, r3
   106d4:	0a000001 	beq	106e0 <g_sigMath_matrixInverse_bl+0x334>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
   106d8:	e3a03001 	mov	r3, #1
   106dc:	ea00013b 	b	10bd0 <g_sigMath_matrixInverse_bl+0x824>


	//Cholesky for building the lower triangular matrix
	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
   106e0:	e3a03000 	mov	r3, #0
   106e4:	e50b3038 	str	r3, [fp, #-56]	; 0x38
   106e8:	ea0000a8 	b	10990 <g_sigMath_matrixInverse_bl+0x5e4>
	{
		for(l_rowCounter_ui32=l_colCounter_ui32;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
   106ec:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
   106f0:	e50b3030 	str	r3, [fp, #-48]	; 0x30
   106f4:	ea00009e 	b	10974 <g_sigMath_matrixInverse_bl+0x5c8>
		{
			if(l_rowCounter_ui32==l_colCounter_ui32)
   106f8:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
   106fc:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
   10700:	e1520003 	cmp	r2, r3
   10704:	1a00004c 	bne	1083c <g_sigMath_matrixInverse_bl+0x490>
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
   10708:	e3a03000 	mov	r3, #0
   1070c:	e50b3034 	str	r3, [fp, #-52]	; 0x34
   10710:	ea000014 	b	10768 <g_sigMath_matrixInverse_bl+0x3bc>
				{
					l_tempValue_f64+=pow(l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)],2);
   10714:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
   10718:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
   1071c:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
   10720:	e1a01002 	mov	r1, r2
   10724:	e1a02003 	mov	r2, r3
   10728:	ebfffde8 	bl	fed0 <m_getIndex_i32>
   1072c:	e1a03000 	mov	r3, r0
   10730:	e1a03183 	lsl	r3, r3, #3
   10734:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
   10738:	e0823003 	add	r3, r2, r3
   1073c:	ed937b00 	vldr	d7, [r3]
   10740:	eeb00b47 	vmov.f64	d0, d7
   10744:	ed9f1bab 	vldr	d1, [pc, #684]	; 109f8 <g_sigMath_matrixInverse_bl+0x64c>
   10748:	ebffe10e 	bl	8b88 <_init+0x74>
   1074c:	eeb07b40 	vmov.f64	d7, d0
   10750:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
   10754:	ee367b07 	vadd.f64	d7, d6, d7
   10758:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc
	{
		for(l_rowCounter_ui32=l_colCounter_ui32;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			if(l_rowCounter_ui32==l_colCounter_ui32)
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
   1075c:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
   10760:	e2833001 	add	r3, r3, #1
   10764:	e50b3034 	str	r3, [fp, #-52]	; 0x34
   10768:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
   1076c:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
   10770:	e1520003 	cmp	r2, r3
   10774:	baffffe6 	blt	10714 <g_sigMath_matrixInverse_bl+0x368>
				{
					l_tempValue_f64+=pow(l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)],2);
				}
				if(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64<0)
   10778:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
   1077c:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
   10780:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
   10784:	e1a01002 	mov	r1, r2
   10788:	e1a02003 	mov	r2, r3
   1078c:	ebfffdcf 	bl	fed0 <m_getIndex_i32>
   10790:	e1a03000 	mov	r3, r0
   10794:	e1a03183 	lsl	r3, r3, #3
   10798:	e51b207c 	ldr	r2, [fp, #-124]	; 0x7c
   1079c:	e0823003 	add	r3, r2, r3
   107a0:	ed936b00 	vldr	d6, [r3]
   107a4:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
   107a8:	ee367b47 	vsub.f64	d7, d6, d7
   107ac:	eeb57bc0 	vcmpe.f64	d7, #0.0
   107b0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   107b4:	5a000001 	bpl	107c0 <g_sigMath_matrixInverse_bl+0x414>
				{return M_SIG_MATRIXLIB_FAILED_BL;}
   107b8:	e3a03001 	mov	r3, #1
   107bc:	ea000103 	b	10bd0 <g_sigMath_matrixInverse_bl+0x824>

				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
   107c0:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
   107c4:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
   107c8:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
   107cc:	e1a01002 	mov	r1, r2
   107d0:	e1a02003 	mov	r2, r3
   107d4:	ebfffdbd 	bl	fed0 <m_getIndex_i32>
   107d8:	e1a03000 	mov	r3, r0
   107dc:	e1a03183 	lsl	r3, r3, #3
   107e0:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
   107e4:	e0824003 	add	r4, r2, r3
						sqrt(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64);
   107e8:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
   107ec:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
   107f0:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
   107f4:	e1a01002 	mov	r1, r2
   107f8:	e1a02003 	mov	r2, r3
   107fc:	ebfffdb3 	bl	fed0 <m_getIndex_i32>
   10800:	e1a03000 	mov	r3, r0
   10804:	e1a03183 	lsl	r3, r3, #3
   10808:	e51b207c 	ldr	r2, [fp, #-124]	; 0x7c
   1080c:	e0823003 	add	r3, r2, r3
   10810:	ed936b00 	vldr	d6, [r3]
   10814:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
   10818:	ee367b47 	vsub.f64	d7, d6, d7
   1081c:	eeb00b47 	vmov.f64	d0, d7
   10820:	ebffe0f3 	bl	8bf4 <_init+0xe0>
   10824:	eeb07b40 	vmov.f64	d7, d0
					l_tempValue_f64+=pow(l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)],2);
				}
				if(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64<0)
				{return M_SIG_MATRIXLIB_FAILED_BL;}

				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
   10828:	ed847b00 	vstr	d7, [r4]
						sqrt(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64);

				l_tempValue_f64=0;
   1082c:	e3a02000 	mov	r2, #0
   10830:	e3a03000 	mov	r3, #0
   10834:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
   10838:	ea00004a 	b	10968 <g_sigMath_matrixInverse_bl+0x5bc>
			}
			else
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
   1083c:	e3a03000 	mov	r3, #0
   10840:	e50b3034 	str	r3, [fp, #-52]	; 0x34
   10844:	ea00001c 	b	108bc <g_sigMath_matrixInverse_bl+0x510>
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
   10848:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
   1084c:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
   10850:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
   10854:	e1a01002 	mov	r1, r2
   10858:	e1a02003 	mov	r2, r3
   1085c:	ebfffd9b 	bl	fed0 <m_getIndex_i32>
   10860:	e1a03000 	mov	r3, r0
   10864:	e1a03183 	lsl	r3, r3, #3
   10868:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
   1086c:	e0823003 	add	r3, r2, r3
   10870:	ed938b00 	vldr	d8, [r3]
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
   10874:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
   10878:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
   1087c:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
   10880:	e1a01002 	mov	r1, r2
   10884:	e1a02003 	mov	r2, r3
   10888:	ebfffd90 	bl	fed0 <m_getIndex_i32>
   1088c:	e1a03000 	mov	r3, r0
   10890:	e1a03183 	lsl	r3, r3, #3
   10894:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
   10898:	e0823003 	add	r3, r2, r3
   1089c:	ed937b00 	vldr	d7, [r3]
			}
			else
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
   108a0:	ee287b07 	vmul.f64	d7, d8, d7
   108a4:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
   108a8:	ee367b07 	vadd.f64	d7, d6, d7
   108ac:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc

				l_tempValue_f64=0;
			}
			else
			{
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
   108b0:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
   108b4:	e2833001 	add	r3, r3, #1
   108b8:	e50b3034 	str	r3, [fp, #-52]	; 0x34
   108bc:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
   108c0:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
   108c4:	e1520003 	cmp	r2, r3
   108c8:	baffffde 	blt	10848 <g_sigMath_matrixInverse_bl+0x49c>
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
				}
				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
   108cc:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
   108d0:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
   108d4:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
   108d8:	e1a01002 	mov	r1, r2
   108dc:	e1a02003 	mov	r2, r3
   108e0:	ebfffd7a 	bl	fed0 <m_getIndex_i32>
   108e4:	e1a03000 	mov	r3, r0
   108e8:	e1a03183 	lsl	r3, r3, #3
   108ec:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
   108f0:	e0824003 	add	r4, r2, r3
										(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64)/
   108f4:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
   108f8:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
   108fc:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
   10900:	e1a01002 	mov	r1, r2
   10904:	e1a02003 	mov	r2, r3
   10908:	ebfffd70 	bl	fed0 <m_getIndex_i32>
   1090c:	e1a03000 	mov	r3, r0
   10910:	e1a03183 	lsl	r3, r3, #3
   10914:	e51b207c 	ldr	r2, [fp, #-124]	; 0x7c
   10918:	e0823003 	add	r3, r2, r3
   1091c:	ed936b00 	vldr	d6, [r3]
   10920:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
   10924:	ee368b47 	vsub.f64	d8, d6, d7
										l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)];
   10928:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
   1092c:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
   10930:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
   10934:	e1a01002 	mov	r1, r2
   10938:	e1a02003 	mov	r2, r3
   1093c:	ebfffd63 	bl	fed0 <m_getIndex_i32>
   10940:	e1a03000 	mov	r3, r0
   10944:	e1a03183 	lsl	r3, r3, #3
   10948:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
   1094c:	e0823003 	add	r3, r2, r3
   10950:	ed937b00 	vldr	d7, [r3]
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
				}
				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
										(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64)/
   10954:	ee887b07 	vdiv.f64	d7, d8, d7
				for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_colCounter_ui32;l_rowCounterInnerLoop_ui32++)
				{
					l_tempValue_f64+=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
							l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_rowCounterInnerLoop_ui32)];
				}
				l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
   10958:	ed847b00 	vstr	d7, [r4]
										(f_matrixA_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]-l_tempValue_f64)/
										l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_colCounter_ui32,l_colCounter_ui32)];
				l_tempValue_f64=0;
   1095c:	e3a02000 	mov	r2, #0
   10960:	e3a03000 	mov	r3, #0
   10964:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc


	//Cholesky for building the lower triangular matrix
	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=l_colCounter_ui32;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
   10968:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
   1096c:	e2833001 	add	r3, r3, #1
   10970:	e50b3030 	str	r3, [fp, #-48]	; 0x30
   10974:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
   10978:	e51b3080 	ldr	r3, [fp, #-128]	; 0x80
   1097c:	e1520003 	cmp	r2, r3
   10980:	3affff5c 	bcc	106f8 <g_sigMath_matrixInverse_bl+0x34c>
	if(f_nrOfRowsA_ui32!=f_nrOfColsA_ui32)
	{return M_SIG_MATRIXLIB_FAILED_BL;}


	//Cholesky for building the lower triangular matrix
	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
   10984:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
   10988:	e2833001 	add	r3, r3, #1
   1098c:	e50b3038 	str	r3, [fp, #-56]	; 0x38
   10990:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
   10994:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
   10998:	e1520003 	cmp	r2, r3
   1099c:	3affff52 	bcc	106ec <g_sigMath_matrixInverse_bl+0x340>
//	}
//	l_determinant_f64=pow(l_determinant_f64,2);

//solve linear system

	if(g_sigMath_matrixEye_bl(l_eyeMatrix_f64[0],f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
   109a0:	e51b3070 	ldr	r3, [fp, #-112]	; 0x70
   109a4:	e1a00003 	mov	r0, r3
   109a8:	e51b1080 	ldr	r1, [fp, #-128]	; 0x80
   109ac:	e51b2084 	ldr	r2, [fp, #-132]	; 0x84
   109b0:	eb0000f7 	bl	10d94 <g_sigMath_matrixEye_bl>
   109b4:	e1a03000 	mov	r3, r0
   109b8:	e3530000 	cmp	r3, #0
   109bc:	0a000001 	beq	109c8 <g_sigMath_matrixInverse_bl+0x61c>
	{return M_SIG_MATRIXLIB_FAILED_BL;}
   109c0:	e3a03001 	mov	r3, #1
   109c4:	ea000081 	b	10bd0 <g_sigMath_matrixInverse_bl+0x824>
	l_tempValue_f64=0;
   109c8:	e3a02000 	mov	r2, #0
   109cc:	e3a03000 	mov	r3, #0
   109d0:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
   109d4:	e3a03000 	mov	r3, #0
   109d8:	e50b3038 	str	r3, [fp, #-56]	; 0x38
   109dc:	ea000059 	b	10b48 <g_sigMath_matrixInverse_bl+0x79c>
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
   109e0:	e3a03000 	mov	r3, #0
   109e4:	e50b3030 	str	r3, [fp, #-48]	; 0x30
   109e8:	ea00004f 	b	10b2c <g_sigMath_matrixInverse_bl+0x780>
		{
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
   109ec:	e3a03000 	mov	r3, #0
   109f0:	e50b3034 	str	r3, [fp, #-52]	; 0x34
   109f4:	ea00001e 	b	10a74 <g_sigMath_matrixInverse_bl+0x6c8>
   109f8:	00000000 	.word	0x00000000
   109fc:	40000000 	.word	0x40000000
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
   10a00:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
   10a04:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
   10a08:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
   10a0c:	e1a01002 	mov	r1, r2
   10a10:	e1a02003 	mov	r2, r3
   10a14:	ebfffd2d 	bl	fed0 <m_getIndex_i32>
   10a18:	e1a03000 	mov	r3, r0
   10a1c:	e1a03183 	lsl	r3, r3, #3
   10a20:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
   10a24:	e0823003 	add	r3, r2, r3
   10a28:	ed938b00 	vldr	d8, [r3]
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
   10a2c:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
   10a30:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
   10a34:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
   10a38:	e1a01002 	mov	r1, r2
   10a3c:	e1a02003 	mov	r2, r3
   10a40:	ebfffd22 	bl	fed0 <m_getIndex_i32>
   10a44:	e1a03000 	mov	r3, r0
   10a48:	e1a03183 	lsl	r3, r3, #3
   10a4c:	e51b2064 	ldr	r2, [fp, #-100]	; 0x64
   10a50:	e0823003 	add	r3, r2, r3
   10a54:	ed937b00 	vldr	d7, [r3]
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
   10a58:	ee287b07 	vmul.f64	d7, d8, d7
   10a5c:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
   10a60:	ee367b47 	vsub.f64	d7, d6, d7
   10a64:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
		{
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
   10a68:	e51b3034 	ldr	r3, [fp, #-52]	; 0x34
   10a6c:	e2833001 	add	r3, r3, #1
   10a70:	e50b3034 	str	r3, [fp, #-52]	; 0x34
   10a74:	e51b2034 	ldr	r2, [fp, #-52]	; 0x34
   10a78:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
   10a7c:	e1520003 	cmp	r2, r3
   10a80:	baffffde 	blt	10a00 <g_sigMath_matrixInverse_bl+0x654>
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
			}
			l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
   10a84:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
   10a88:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
   10a8c:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
   10a90:	e1a01002 	mov	r1, r2
   10a94:	e1a02003 	mov	r2, r3
   10a98:	ebfffd0c 	bl	fed0 <m_getIndex_i32>
   10a9c:	e1a03000 	mov	r3, r0
   10aa0:	e1a03183 	lsl	r3, r3, #3
   10aa4:	e51b2064 	ldr	r2, [fp, #-100]	; 0x64
   10aa8:	e0824003 	add	r4, r2, r3
						(l_eyeMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+l_tempValue_f64)/
   10aac:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
   10ab0:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
   10ab4:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
   10ab8:	e1a01002 	mov	r1, r2
   10abc:	e1a02003 	mov	r2, r3
   10ac0:	ebfffd02 	bl	fed0 <m_getIndex_i32>
   10ac4:	e1a03000 	mov	r3, r0
   10ac8:	e1a03183 	lsl	r3, r3, #3
   10acc:	e51b2074 	ldr	r2, [fp, #-116]	; 0x74
   10ad0:	e0823003 	add	r3, r2, r3
   10ad4:	ed936b00 	vldr	d6, [r3]
   10ad8:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
   10adc:	ee368b07 	vadd.f64	d8, d6, d7
						l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounter_ui32)];
   10ae0:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
   10ae4:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
   10ae8:	e51b0084 	ldr	r0, [fp, #-132]	; 0x84
   10aec:	e1a01002 	mov	r1, r2
   10af0:	e1a02003 	mov	r2, r3
   10af4:	ebfffcf5 	bl	fed0 <m_getIndex_i32>
   10af8:	e1a03000 	mov	r3, r0
   10afc:	e1a03183 	lsl	r3, r3, #3
   10b00:	e51b2054 	ldr	r2, [fp, #-84]	; 0x54
   10b04:	e0823003 	add	r3, r2, r3
   10b08:	ed937b00 	vldr	d7, [r3]
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
			}
			l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						(l_eyeMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+l_tempValue_f64)/
   10b0c:	ee887b07 	vdiv.f64	d7, d8, d7
			for(l_rowCounterInnerLoop_ui32=0;l_rowCounterInnerLoop_ui32<l_rowCounter_ui32;l_rowCounterInnerLoop_ui32++)
			{
				l_tempValue_f64-=l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounterInnerLoop_ui32)]*
						l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounterInnerLoop_ui32,l_colCounter_ui32)];
			}
			l_lowerInverseTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
   10b10:	ed847b00 	vstr	d7, [r4]
						(l_eyeMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_colCounter_ui32)]+l_tempValue_f64)/
						l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounter_ui32)];
			l_tempValue_f64=0;
   10b14:	e3a02000 	mov	r2, #0
   10b18:	e3a03000 	mov	r3, #0
   10b1c:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	l_tempValue_f64=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRowsA_ui32;l_rowCounter_ui32++)
   10b20:	e51b3030 	ldr	r3, [fp, #-48]	; 0x30
   10b24:	e2833001 	add	r3, r3, #1
   10b28:	e50b3030 	str	r3, [fp, #-48]	; 0x30
   10b2c:	e51b2030 	ldr	r2, [fp, #-48]	; 0x30
   10b30:	e51b3080 	ldr	r3, [fp, #-128]	; 0x80
   10b34:	e1520003 	cmp	r2, r3
   10b38:	3affffab 	bcc	109ec <g_sigMath_matrixInverse_bl+0x640>

	if(g_sigMath_matrixEye_bl(l_eyeMatrix_f64[0],f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
	l_tempValue_f64=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfColsA_ui32;l_colCounter_ui32++)
   10b3c:	e51b3038 	ldr	r3, [fp, #-56]	; 0x38
   10b40:	e2833001 	add	r3, r3, #1
   10b44:	e50b3038 	str	r3, [fp, #-56]	; 0x38
   10b48:	e51b2038 	ldr	r2, [fp, #-56]	; 0x38
   10b4c:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
   10b50:	e1520003 	cmp	r2, r3
   10b54:	3affffa1 	bcc	109e0 <g_sigMath_matrixInverse_bl+0x634>
						l_lowerTriangularMatrix_pf64[m_getIndex_i32(f_nrOfColsA_ui32,l_rowCounter_ui32,l_rowCounter_ui32)];
			l_tempValue_f64=0;
		}
	}

	if(g_sigMath_matrixTransponiert_bl((double*)l_lowerTriangularMatrix_f64,(double*)l_lowerInverseTriangularMatrix_f64,
   10b58:	e51b2050 	ldr	r2, [fp, #-80]	; 0x50
   10b5c:	e51b3060 	ldr	r3, [fp, #-96]	; 0x60
   10b60:	e1a00002 	mov	r0, r2
   10b64:	e1a01003 	mov	r1, r3
   10b68:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
   10b6c:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
   10b70:	ebfffdd8 	bl	102d8 <g_sigMath_matrixTransponiert_bl>
   10b74:	e1a03000 	mov	r3, r0
   10b78:	e3530000 	cmp	r3, #0
   10b7c:	0a000001 	beq	10b88 <g_sigMath_matrixInverse_bl+0x7dc>
				f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
   10b80:	e3a03001 	mov	r3, #1
   10b84:	ea000011 	b	10bd0 <g_sigMath_matrixInverse_bl+0x824>

	if(g_sigMath_matrixMultiplikation_bl((double*)f_matrixResult_pf64,(double*)l_lowerTriangularMatrix_f64 ,
   10b88:	e51b3050 	ldr	r3, [fp, #-80]	; 0x50
			f_nrOfRowsA_ui32,f_nrOfColsA_ui32,(double*)l_lowerInverseTriangularMatrix_f64,f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
   10b8c:	e51b2060 	ldr	r2, [fp, #-96]	; 0x60

	if(g_sigMath_matrixTransponiert_bl((double*)l_lowerTriangularMatrix_f64,(double*)l_lowerInverseTriangularMatrix_f64,
				f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}

	if(g_sigMath_matrixMultiplikation_bl((double*)f_matrixResult_pf64,(double*)l_lowerTriangularMatrix_f64 ,
   10b90:	e58d2000 	str	r2, [sp]
   10b94:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
   10b98:	e58d2004 	str	r2, [sp, #4]
   10b9c:	e51b2084 	ldr	r2, [fp, #-132]	; 0x84
   10ba0:	e58d2008 	str	r2, [sp, #8]
   10ba4:	e51b0078 	ldr	r0, [fp, #-120]	; 0x78
   10ba8:	e1a01003 	mov	r1, r3
   10bac:	e51b2080 	ldr	r2, [fp, #-128]	; 0x80
   10bb0:	e51b3084 	ldr	r3, [fp, #-132]	; 0x84
   10bb4:	ebfffcd4 	bl	ff0c <g_sigMath_matrixMultiplikation_bl>
   10bb8:	e1a03000 	mov	r3, r0
   10bbc:	e3530000 	cmp	r3, #0
   10bc0:	0a000001 	beq	10bcc <g_sigMath_matrixInverse_bl+0x820>
			f_nrOfRowsA_ui32,f_nrOfColsA_ui32,(double*)l_lowerInverseTriangularMatrix_f64,f_nrOfRowsA_ui32,f_nrOfColsA_ui32)!=0)
	{return M_SIG_MATRIXLIB_FAILED_BL;}
   10bc4:	e3a03001 	mov	r3, #1
   10bc8:	ea000000 	b	10bd0 <g_sigMath_matrixInverse_bl+0x824>

	return M_SIG_MATRIXLIB_SUCCESS_BL;
   10bcc:	e3a03000 	mov	r3, #0
   10bd0:	e1a0d00a 	mov	sp, sl
}
   10bd4:	e1a00003 	mov	r0, r3
   10bd8:	e24bd028 	sub	sp, fp, #40	; 0x28
   10bdc:	ecbd8b02 	vpop	{d8}
   10be0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010be4 <g_sigMath_matrixAssignment_bl>:
 ***********************************************************************/
unsigned int g_sigMath_matrixAssignment_bl(double* f_matrixResult_pf64,
		unsigned int f_nrOfRowsResult_ui32,unsigned int f_nrOfColsResult_ui32,
		double* f_matrix_pf64, unsigned int f_nrOfRows_ui32,
		unsigned int f_nrOfCols_ui32)
{
   10be4:	e92d4810 	push	{r4, fp, lr}
   10be8:	e28db008 	add	fp, sp, #8
   10bec:	e24dd01c 	sub	sp, sp, #28
   10bf0:	e50b0018 	str	r0, [fp, #-24]
   10bf4:	e50b101c 	str	r1, [fp, #-28]
   10bf8:	e50b2020 	str	r2, [fp, #-32]
   10bfc:	e50b3024 	str	r3, [fp, #-36]	; 0x24
	unsigned int l_rowCounter_ui32=0;
   10c00:	e3a03000 	mov	r3, #0
   10c04:	e50b3010 	str	r3, [fp, #-16]
	unsigned int l_colCounter_ui32=0;
   10c08:	e3a03000 	mov	r3, #0
   10c0c:	e50b3014 	str	r3, [fp, #-20]

	if(f_nrOfRows_ui32!=f_nrOfRowsResult_ui32 && f_nrOfCols_ui32!=f_nrOfColsResult_ui32)
   10c10:	e59b2004 	ldr	r2, [fp, #4]
   10c14:	e51b301c 	ldr	r3, [fp, #-28]
   10c18:	e1520003 	cmp	r2, r3
   10c1c:	0a000005 	beq	10c38 <g_sigMath_matrixAssignment_bl+0x54>
   10c20:	e59b2008 	ldr	r2, [fp, #8]
   10c24:	e51b3020 	ldr	r3, [fp, #-32]
   10c28:	e1520003 	cmp	r2, r3
   10c2c:	0a000001 	beq	10c38 <g_sigMath_matrixAssignment_bl+0x54>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
   10c30:	e3a03001 	mov	r3, #1
   10c34:	ea000026 	b	10cd4 <g_sigMath_matrixAssignment_bl+0xf0>
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
   10c38:	e3a03000 	mov	r3, #0
   10c3c:	e50b3014 	str	r3, [fp, #-20]
   10c40:	ea00001e 	b	10cc0 <g_sigMath_matrixAssignment_bl+0xdc>
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
   10c44:	e3a03000 	mov	r3, #0
   10c48:	e50b3010 	str	r3, [fp, #-16]
   10c4c:	ea000014 	b	10ca4 <g_sigMath_matrixAssignment_bl+0xc0>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
   10c50:	e59b0008 	ldr	r0, [fp, #8]
   10c54:	e51b1010 	ldr	r1, [fp, #-16]
   10c58:	e51b2014 	ldr	r2, [fp, #-20]
   10c5c:	ebfffc9b 	bl	fed0 <m_getIndex_i32>
   10c60:	e1a03000 	mov	r3, r0
   10c64:	e1a03183 	lsl	r3, r3, #3
   10c68:	e51b2018 	ldr	r2, [fp, #-24]
   10c6c:	e0824003 	add	r4, r2, r3
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
   10c70:	e59b0008 	ldr	r0, [fp, #8]
   10c74:	e51b1010 	ldr	r1, [fp, #-16]
   10c78:	e51b2014 	ldr	r2, [fp, #-20]
   10c7c:	ebfffc93 	bl	fed0 <m_getIndex_i32>
   10c80:	e1a03000 	mov	r3, r0
   10c84:	e1a03183 	lsl	r3, r3, #3
   10c88:	e51b2024 	ldr	r2, [fp, #-36]	; 0x24
   10c8c:	e0823003 	add	r3, r2, r3
   10c90:	e1c320d0 	ldrd	r2, [r3]
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
   10c94:	e1c420f0 	strd	r2, [r4]
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
   10c98:	e51b3010 	ldr	r3, [fp, #-16]
   10c9c:	e2833001 	add	r3, r3, #1
   10ca0:	e50b3010 	str	r3, [fp, #-16]
   10ca4:	e51b2010 	ldr	r2, [fp, #-16]
   10ca8:	e59b3004 	ldr	r3, [fp, #4]
   10cac:	e1520003 	cmp	r2, r3
   10cb0:	3affffe6 	bcc	10c50 <g_sigMath_matrixAssignment_bl+0x6c>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
   10cb4:	e51b3014 	ldr	r3, [fp, #-20]
   10cb8:	e2833001 	add	r3, r3, #1
   10cbc:	e50b3014 	str	r3, [fp, #-20]
   10cc0:	e51b2014 	ldr	r2, [fp, #-20]
   10cc4:	e59b3008 	ldr	r3, [fp, #8]
   10cc8:	e1520003 	cmp	r2, r3
   10ccc:	3affffdc 	bcc	10c44 <g_sigMath_matrixAssignment_bl+0x60>
			{
				f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=
						f_matrix_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)];
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
   10cd0:	e3a03000 	mov	r3, #0
	}
}
   10cd4:	e1a00003 	mov	r0, r3
   10cd8:	e24bd008 	sub	sp, fp, #8
   10cdc:	e8bd8810 	pop	{r4, fp, pc}

00010ce0 <g_sigMath_matrixInitialize_bl>:
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixInitialize_bl(double* f_matrixResult_pf64,
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32,
		double f_setValue_f64)
{
   10ce0:	e92d4800 	push	{fp, lr}
   10ce4:	e28db004 	add	fp, sp, #4
   10ce8:	e24dd020 	sub	sp, sp, #32
   10cec:	e50b0010 	str	r0, [fp, #-16]
   10cf0:	e50b1014 	str	r1, [fp, #-20]
   10cf4:	e50b2018 	str	r2, [fp, #-24]
   10cf8:	ed0b0b09 	vstr	d0, [fp, #-36]	; 0xffffffdc
	unsigned int l_rowCounter_ui32=0;
   10cfc:	e3a03000 	mov	r3, #0
   10d00:	e50b3008 	str	r3, [fp, #-8]
	unsigned int l_colCounter_ui32=0;
   10d04:	e3a03000 	mov	r3, #0
   10d08:	e50b300c 	str	r3, [fp, #-12]

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
   10d0c:	e3a03000 	mov	r3, #0
   10d10:	e50b300c 	str	r3, [fp, #-12]
   10d14:	ea000016 	b	10d74 <g_sigMath_matrixInitialize_bl+0x94>
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
   10d18:	e3a03000 	mov	r3, #0
   10d1c:	e50b3008 	str	r3, [fp, #-8]
   10d20:	ea00000c 	b	10d58 <g_sigMath_matrixInitialize_bl+0x78>
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=f_setValue_f64;
   10d24:	e51b0018 	ldr	r0, [fp, #-24]
   10d28:	e51b1008 	ldr	r1, [fp, #-8]
   10d2c:	e51b200c 	ldr	r2, [fp, #-12]
   10d30:	ebfffc66 	bl	fed0 <m_getIndex_i32>
   10d34:	e1a03000 	mov	r3, r0
   10d38:	e1a03183 	lsl	r3, r3, #3
   10d3c:	e51b2010 	ldr	r2, [fp, #-16]
   10d40:	e0821003 	add	r1, r2, r3
   10d44:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
   10d48:	e1c120f0 	strd	r2, [r1]
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
	{
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
   10d4c:	e51b3008 	ldr	r3, [fp, #-8]
   10d50:	e2833001 	add	r3, r3, #1
   10d54:	e50b3008 	str	r3, [fp, #-8]
   10d58:	e51b2008 	ldr	r2, [fp, #-8]
   10d5c:	e51b3014 	ldr	r3, [fp, #-20]
   10d60:	e1520003 	cmp	r2, r3
   10d64:	3affffee 	bcc	10d24 <g_sigMath_matrixInitialize_bl+0x44>
		double f_setValue_f64)
{
	unsigned int l_rowCounter_ui32=0;
	unsigned int l_colCounter_ui32=0;

	for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
   10d68:	e51b300c 	ldr	r3, [fp, #-12]
   10d6c:	e2833001 	add	r3, r3, #1
   10d70:	e50b300c 	str	r3, [fp, #-12]
   10d74:	e51b200c 	ldr	r2, [fp, #-12]
   10d78:	e51b3018 	ldr	r3, [fp, #-24]
   10d7c:	e1520003 	cmp	r2, r3
   10d80:	3affffe4 	bcc	10d18 <g_sigMath_matrixInitialize_bl+0x38>
		for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
		{
			f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=f_setValue_f64;
		}
	}
	return M_SIG_MATRIXLIB_SUCCESS_BL;
   10d84:	e3a03000 	mov	r3, #0

}
   10d88:	e1a00003 	mov	r0, r3
   10d8c:	e24bd004 	sub	sp, fp, #4
   10d90:	e8bd8800 	pop	{fp, pc}

00010d94 <g_sigMath_matrixEye_bl>:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_sigMath_matrixEye_bl(double* f_matrixResult_pf64,
		unsigned int f_nrOfRows_ui32, unsigned int f_nrOfCols_ui32)
{
   10d94:	e92d4800 	push	{fp, lr}
   10d98:	e28db004 	add	fp, sp, #4
   10d9c:	e24dd018 	sub	sp, sp, #24
   10da0:	e50b0010 	str	r0, [fp, #-16]
   10da4:	e50b1014 	str	r1, [fp, #-20]
   10da8:	e50b2018 	str	r2, [fp, #-24]
	unsigned int l_rowCounter_ui32=0;
   10dac:	e3a03000 	mov	r3, #0
   10db0:	e50b3008 	str	r3, [fp, #-8]
	unsigned int l_colCounter_ui32=0;
   10db4:	e3a03000 	mov	r3, #0
   10db8:	e50b300c 	str	r3, [fp, #-12]

	if(f_nrOfRows_ui32!=f_nrOfCols_ui32)
   10dbc:	e51b2014 	ldr	r2, [fp, #-20]
   10dc0:	e51b3018 	ldr	r3, [fp, #-24]
   10dc4:	e1520003 	cmp	r2, r3
   10dc8:	0a000001 	beq	10dd4 <g_sigMath_matrixEye_bl+0x40>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
   10dcc:	e3a03001 	mov	r3, #1
   10dd0:	ea00002f 	b	10e94 <g_sigMath_matrixEye_bl+0x100>
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
   10dd4:	e3a03000 	mov	r3, #0
   10dd8:	e50b300c 	str	r3, [fp, #-12]
   10ddc:	ea000027 	b	10e80 <g_sigMath_matrixEye_bl+0xec>
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
   10de0:	e3a03000 	mov	r3, #0
   10de4:	e50b3008 	str	r3, [fp, #-8]
   10de8:	ea00001d 	b	10e64 <g_sigMath_matrixEye_bl+0xd0>
			{
				if(l_rowCounter_ui32==l_colCounter_ui32)
   10dec:	e51b2008 	ldr	r2, [fp, #-8]
   10df0:	e51b300c 	ldr	r3, [fp, #-12]
   10df4:	e1520003 	cmp	r2, r3
   10df8:	1a00000b 	bne	10e2c <g_sigMath_matrixEye_bl+0x98>
				{
					f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=1;
   10dfc:	e51b0018 	ldr	r0, [fp, #-24]
   10e00:	e51b1008 	ldr	r1, [fp, #-8]
   10e04:	e51b200c 	ldr	r2, [fp, #-12]
   10e08:	ebfffc30 	bl	fed0 <m_getIndex_i32>
   10e0c:	e1a03000 	mov	r3, r0
   10e10:	e1a03183 	lsl	r3, r3, #3
   10e14:	e51b2010 	ldr	r2, [fp, #-16]
   10e18:	e0821003 	add	r1, r2, r3
   10e1c:	e3a02000 	mov	r2, #0
   10e20:	e59f3078 	ldr	r3, [pc, #120]	; 10ea0 <g_sigMath_matrixEye_bl+0x10c>
   10e24:	e1c120f0 	strd	r2, [r1]
   10e28:	ea00000a 	b	10e58 <g_sigMath_matrixEye_bl+0xc4>
				}
				else
				{
					f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=0;
   10e2c:	e51b0018 	ldr	r0, [fp, #-24]
   10e30:	e51b1008 	ldr	r1, [fp, #-8]
   10e34:	e51b200c 	ldr	r2, [fp, #-12]
   10e38:	ebfffc24 	bl	fed0 <m_getIndex_i32>
   10e3c:	e1a03000 	mov	r3, r0
   10e40:	e1a03183 	lsl	r3, r3, #3
   10e44:	e51b2010 	ldr	r2, [fp, #-16]
   10e48:	e0821003 	add	r1, r2, r3
   10e4c:	e3a02000 	mov	r2, #0
   10e50:	e3a03000 	mov	r3, #0
   10e54:	e1c120f0 	strd	r2, [r1]
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
		{
			for(l_rowCounter_ui32=0;l_rowCounter_ui32<f_nrOfRows_ui32;l_rowCounter_ui32++)
   10e58:	e51b3008 	ldr	r3, [fp, #-8]
   10e5c:	e2833001 	add	r3, r3, #1
   10e60:	e50b3008 	str	r3, [fp, #-8]
   10e64:	e51b2008 	ldr	r2, [fp, #-8]
   10e68:	e51b3014 	ldr	r3, [fp, #-20]
   10e6c:	e1520003 	cmp	r2, r3
   10e70:	3affffdd 	bcc	10dec <g_sigMath_matrixEye_bl+0x58>
	{
		return M_SIG_MATRIXLIB_FAILED_BL;
	}
	else
	{
		for(l_colCounter_ui32=0;l_colCounter_ui32<f_nrOfCols_ui32;l_colCounter_ui32++)
   10e74:	e51b300c 	ldr	r3, [fp, #-12]
   10e78:	e2833001 	add	r3, r3, #1
   10e7c:	e50b300c 	str	r3, [fp, #-12]
   10e80:	e51b200c 	ldr	r2, [fp, #-12]
   10e84:	e51b3018 	ldr	r3, [fp, #-24]
   10e88:	e1520003 	cmp	r2, r3
   10e8c:	3affffd3 	bcc	10de0 <g_sigMath_matrixEye_bl+0x4c>
				{
					f_matrixResult_pf64[m_getIndex_i32(f_nrOfCols_ui32,l_rowCounter_ui32,l_colCounter_ui32)]=0;
				}
			}
		}
		return M_SIG_MATRIXLIB_SUCCESS_BL;
   10e90:	e3a03000 	mov	r3, #0
	}
}
   10e94:	e1a00003 	mov	r0, r3
   10e98:	e24bd004 	sub	sp, fp, #4
   10e9c:	e8bd8800 	pop	{fp, pc}
   10ea0:	3ff00000 	.word	0x3ff00000
   10ea4:	e1a00000 	nop			; (mov r0, r0)

00010ea8 <g_sigOri_getAnglesComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles g_sigOri_getAnglesComplementary_bl()
{
   10ea8:	e92d4830 	push	{r4, r5, fp, lr}
   10eac:	e28db00c 	add	fp, sp, #12
   10eb0:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_sigOri_arrayOutputAnglesComplementary_st;
   10eb4:	e59f3040 	ldr	r3, [pc, #64]	; 10efc <g_sigOri_getAnglesComplementary_bl+0x54>
   10eb8:	e24bc024 	sub	ip, fp, #36	; 0x24
   10ebc:	e1a0e003 	mov	lr, r3
   10ec0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   10ec4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   10ec8:	e89e0003 	ldm	lr, {r0, r1}
   10ecc:	e88c0003 	stm	ip, {r0, r1}
   10ed0:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
   10ed4:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
   10ed8:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
   10edc:	ec454b15 	vmov	d5, r4, r5
   10ee0:	ec410b16 	vmov	d6, r0, r1
   10ee4:	ec432b17 	vmov	d7, r2, r3
}
   10ee8:	eeb00b45 	vmov.f64	d0, d5
   10eec:	eeb01b46 	vmov.f64	d1, d6
   10ef0:	eeb02b47 	vmov.f64	d2, d7
   10ef4:	e24bd00c 	sub	sp, fp, #12
   10ef8:	e8bd8830 	pop	{r4, r5, fp, pc}
   10efc:	0001ba70 	.word	0x0001ba70

00010f00 <g_sigOri_getPitchComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getPitchComplementary_bl()
{
   10f00:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10f04:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64;
   10f08:	e59f3014 	ldr	r3, [pc, #20]	; 10f24 <g_sigOri_getPitchComplementary_bl+0x24>
   10f0c:	e1c320d8 	ldrd	r2, [r3, #8]
   10f10:	ec432b17 	vmov	d7, r2, r3
}
   10f14:	eeb00b47 	vmov.f64	d0, d7
   10f18:	e24bd000 	sub	sp, fp, #0
   10f1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10f20:	e12fff1e 	bx	lr
   10f24:	0001ba70 	.word	0x0001ba70

00010f28 <g_sigOri_getRollComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getRollComplementary_bl()
{
   10f28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10f2c:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesComplementary_st.roll_f64;
   10f30:	e59f3014 	ldr	r3, [pc, #20]	; 10f4c <g_sigOri_getRollComplementary_bl+0x24>
   10f34:	e1c320d0 	ldrd	r2, [r3]
   10f38:	ec432b17 	vmov	d7, r2, r3
}
   10f3c:	eeb00b47 	vmov.f64	d0, d7
   10f40:	e24bd000 	sub	sp, fp, #0
   10f44:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10f48:	e12fff1e 	bx	lr
   10f4c:	0001ba70 	.word	0x0001ba70

00010f50 <g_sigOri_getYawComplementary_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getYawComplementary_bl()
{
   10f50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10f54:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64;
   10f58:	e59f3014 	ldr	r3, [pc, #20]	; 10f74 <g_sigOri_getYawComplementary_bl+0x24>
   10f5c:	e1c321d0 	ldrd	r2, [r3, #16]
   10f60:	ec432b17 	vmov	d7, r2, r3
}
   10f64:	eeb00b47 	vmov.f64	d0, d7
   10f68:	e24bd000 	sub	sp, fp, #0
   10f6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10f70:	e12fff1e 	bx	lr
   10f74:	0001ba70 	.word	0x0001ba70

00010f78 <g_sigOri_getAnglesKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles g_sigOri_getAnglesKalman_bl()
{
   10f78:	e92d4830 	push	{r4, r5, fp, lr}
   10f7c:	e28db00c 	add	fp, sp, #12
   10f80:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_sigOri_arrayOutputAnglesKalman_st;
   10f84:	e59f3040 	ldr	r3, [pc, #64]	; 10fcc <g_sigOri_getAnglesKalman_bl+0x54>
   10f88:	e24bc024 	sub	ip, fp, #36	; 0x24
   10f8c:	e1a0e003 	mov	lr, r3
   10f90:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   10f94:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   10f98:	e89e0003 	ldm	lr, {r0, r1}
   10f9c:	e88c0003 	stm	ip, {r0, r1}
   10fa0:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
   10fa4:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
   10fa8:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
   10fac:	ec454b15 	vmov	d5, r4, r5
   10fb0:	ec410b16 	vmov	d6, r0, r1
   10fb4:	ec432b17 	vmov	d7, r2, r3
}
   10fb8:	eeb00b45 	vmov.f64	d0, d5
   10fbc:	eeb01b46 	vmov.f64	d1, d6
   10fc0:	eeb02b47 	vmov.f64	d2, d7
   10fc4:	e24bd00c 	sub	sp, fp, #12
   10fc8:	e8bd8830 	pop	{r4, r5, fp, pc}
   10fcc:	0001ba28 	.word	0x0001ba28

00010fd0 <g_sigOri_getPitchKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getPitchKalman_bl()
{
   10fd0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10fd4:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesKalman_st.pitch_f64;
   10fd8:	e59f3014 	ldr	r3, [pc, #20]	; 10ff4 <g_sigOri_getPitchKalman_bl+0x24>
   10fdc:	e1c320d8 	ldrd	r2, [r3, #8]
   10fe0:	ec432b17 	vmov	d7, r2, r3
}
   10fe4:	eeb00b47 	vmov.f64	d0, d7
   10fe8:	e24bd000 	sub	sp, fp, #0
   10fec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   10ff0:	e12fff1e 	bx	lr
   10ff4:	0001ba28 	.word	0x0001ba28

00010ff8 <g_sigOri_getRollKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getRollKalman_bl()
{
   10ff8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   10ffc:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesKalman_st.roll_f64;
   11000:	e59f3014 	ldr	r3, [pc, #20]	; 1101c <g_sigOri_getRollKalman_bl+0x24>
   11004:	e1c320d0 	ldrd	r2, [r3]
   11008:	ec432b17 	vmov	d7, r2, r3
}
   1100c:	eeb00b47 	vmov.f64	d0, d7
   11010:	e24bd000 	sub	sp, fp, #0
   11014:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11018:	e12fff1e 	bx	lr
   1101c:	0001ba28 	.word	0x0001ba28

00011020 <g_sigOri_getYawKalman_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
double g_sigOri_getYawKalman_bl()
{
   11020:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11024:	e28db000 	add	fp, sp, #0
	return m_sigOri_arrayOutputAnglesKalman_st.yaw_f64;
   11028:	e59f3014 	ldr	r3, [pc, #20]	; 11044 <g_sigOri_getYawKalman_bl+0x24>
   1102c:	e1c321d0 	ldrd	r2, [r3, #16]
   11030:	ec432b17 	vmov	d7, r2, r3
}
   11034:	eeb00b47 	vmov.f64	d0, d7
   11038:	e24bd000 	sub	sp, fp, #0
   1103c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11040:	e12fff1e 	bx	lr
   11044:	0001ba28 	.word	0x0001ba28

00011048 <g_sigOri_initImuSensors_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_sigOri_initImuSensors_bl()
{
   11048:	e92d4800 	push	{fp, lr}
   1104c:	e28db004 	add	fp, sp, #4
	if( g_SigFil_initImuSensors_bl() != 0 )
   11050:	eb000394 	bl	11ea8 <g_SigFil_initImuSensors_bl>
   11054:	e1a03000 	mov	r3, r0
   11058:	e3530000 	cmp	r3, #0
   1105c:	0a000001 	beq	11068 <g_sigOri_initImuSensors_bl+0x20>
	{return 1;}
   11060:	e3a03001 	mov	r3, #1
   11064:	ea000000 	b	1106c <g_sigOri_initImuSensors_bl+0x24>
	else
	{return 0;}
   11068:	e3a03000 	mov	r3, #0
}
   1106c:	e1a00003 	mov	r0, r3
   11070:	e8bd8800 	pop	{fp, pc}

00011074 <g_sigOri_initMatrices_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_sigOri_initMatrices_bl()
{
   11074:	e92d4800 	push	{fp, lr}
   11078:	e28db004 	add	fp, sp, #4
	//initialize Pk Matrix
	if(g_sigMath_matrixEye_bl((double*)m_sigOri_matrixPk_rg9f64,3,3)!=0)
   1107c:	e59f00ac 	ldr	r0, [pc, #172]	; 11130 <g_sigOri_initMatrices_bl+0xbc>
   11080:	e3a01003 	mov	r1, #3
   11084:	e3a02003 	mov	r2, #3
   11088:	ebffff41 	bl	10d94 <g_sigMath_matrixEye_bl>
   1108c:	e1a03000 	mov	r3, r0
   11090:	e3530000 	cmp	r3, #0
   11094:	0a000001 	beq	110a0 <g_sigOri_initMatrices_bl+0x2c>
	{return 1;}
   11098:	e3a03001 	mov	r3, #1
   1109c:	ea000021 	b	11128 <g_sigOri_initMatrices_bl+0xb4>

	//initialize an Identity matrix
	if(g_sigMath_matrixEye_bl((double*)m_sigOri_matrixI_rg9f64,3,3)!=0)
   110a0:	e59f008c 	ldr	r0, [pc, #140]	; 11134 <g_sigOri_initMatrices_bl+0xc0>
   110a4:	e3a01003 	mov	r1, #3
   110a8:	e3a02003 	mov	r2, #3
   110ac:	ebffff38 	bl	10d94 <g_sigMath_matrixEye_bl>
   110b0:	e1a03000 	mov	r3, r0
   110b4:	e3530000 	cmp	r3, #0
   110b8:	0a000001 	beq	110c4 <g_sigOri_initMatrices_bl+0x50>
	{return 1;}
   110bc:	e3a03001 	mov	r3, #1
   110c0:	ea000018 	b	11128 <g_sigOri_initMatrices_bl+0xb4>
	m_sigOri_matrixQ_rg9f64[0][0]=0.005;
	m_sigOri_matrixQ_rg9f64[1][1]=0.005;
	m_sigOri_matrixQ_rg9f64[2][2]=0.0001;*/

	//initialize the measurement noise matrix
		m_sigOri_matrixR_rg9f64[0][0]=0.06;
   110c4:	e59f106c 	ldr	r1, [pc, #108]	; 11138 <g_sigOri_initMatrices_bl+0xc4>
   110c8:	e59f206c 	ldr	r2, [pc, #108]	; 1113c <g_sigOri_initMatrices_bl+0xc8>
   110cc:	e59f306c 	ldr	r3, [pc, #108]	; 11140 <g_sigOri_initMatrices_bl+0xcc>
   110d0:	e1c120f0 	strd	r2, [r1]
		m_sigOri_matrixR_rg9f64[1][1]=0.1;
   110d4:	e59f105c 	ldr	r1, [pc, #92]	; 11138 <g_sigOri_initMatrices_bl+0xc4>
   110d8:	e59f2064 	ldr	r2, [pc, #100]	; 11144 <g_sigOri_initMatrices_bl+0xd0>
   110dc:	e59f3064 	ldr	r3, [pc, #100]	; 11148 <g_sigOri_initMatrices_bl+0xd4>
   110e0:	e1c122f0 	strd	r2, [r1, #32]
		m_sigOri_matrixR_rg9f64[2][2]=0.07;
   110e4:	e59f104c 	ldr	r1, [pc, #76]	; 11138 <g_sigOri_initMatrices_bl+0xc4>
   110e8:	e59f205c 	ldr	r2, [pc, #92]	; 1114c <g_sigOri_initMatrices_bl+0xd8>
   110ec:	e59f305c 	ldr	r3, [pc, #92]	; 11150 <g_sigOri_initMatrices_bl+0xdc>
   110f0:	e1c124f0 	strd	r2, [r1, #64]	; 0x40

		//initialize the process noise matrix
		m_sigOri_matrixQ_rg9f64[0][0]=0.005;
   110f4:	e59f1058 	ldr	r1, [pc, #88]	; 11154 <g_sigOri_initMatrices_bl+0xe0>
   110f8:	e59f2058 	ldr	r2, [pc, #88]	; 11158 <g_sigOri_initMatrices_bl+0xe4>
   110fc:	e59f3058 	ldr	r3, [pc, #88]	; 1115c <g_sigOri_initMatrices_bl+0xe8>
   11100:	e1c120f0 	strd	r2, [r1]
		m_sigOri_matrixQ_rg9f64[1][1]=0.005;
   11104:	e59f1048 	ldr	r1, [pc, #72]	; 11154 <g_sigOri_initMatrices_bl+0xe0>
   11108:	e59f2048 	ldr	r2, [pc, #72]	; 11158 <g_sigOri_initMatrices_bl+0xe4>
   1110c:	e59f3048 	ldr	r3, [pc, #72]	; 1115c <g_sigOri_initMatrices_bl+0xe8>
   11110:	e1c122f0 	strd	r2, [r1, #32]
		m_sigOri_matrixQ_rg9f64[2][2]=0.005;
   11114:	e59f1038 	ldr	r1, [pc, #56]	; 11154 <g_sigOri_initMatrices_bl+0xe0>
   11118:	e59f2038 	ldr	r2, [pc, #56]	; 11158 <g_sigOri_initMatrices_bl+0xe4>
   1111c:	e59f3038 	ldr	r3, [pc, #56]	; 1115c <g_sigOri_initMatrices_bl+0xe8>
   11120:	e1c124f0 	strd	r2, [r1, #64]	; 0x40


	return 0;
   11124:	e3a03000 	mov	r3, #0
}
   11128:	e1a00003 	mov	r0, r3
   1112c:	e8bd8800 	pop	{fp, pc}
   11130:	0001bba8 	.word	0x0001bba8
   11134:	0001bb60 	.word	0x0001bb60
   11138:	0001bbf0 	.word	0x0001bbf0
   1113c:	eb851eb8 	.word	0xeb851eb8
   11140:	3faeb851 	.word	0x3faeb851
   11144:	9999999a 	.word	0x9999999a
   11148:	3fb99999 	.word	0x3fb99999
   1114c:	1eb851ec 	.word	0x1eb851ec
   11150:	3fb1eb85 	.word	0x3fb1eb85
   11154:	0001bc38 	.word	0x0001bc38
   11158:	47ae147b 	.word	0x47ae147b
   1115c:	3f747ae1 	.word	0x3f747ae1

00011160 <g_sigOri_initBuildReferenceValues_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigOri_initBuildReferenceValues_bl()
{
   11160:	e92d4800 	push	{fp, lr}
   11164:	e28db004 	add	fp, sp, #4
   11168:	e24dd078 	sub	sp, sp, #120	; 0x78
	double l_barometricValue_f64=0;
   1116c:	e3a02000 	mov	r2, #0
   11170:	e3a03000 	mov	r3, #0
   11174:	e14b20fc 	strd	r2, [fp, #-12]
	double l_GravityValue_f64=0;
   11178:	e3a02000 	mov	r2, #0
   1117c:	e3a03000 	mov	r3, #0
   11180:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	double l_Temperature_f64=0;
   11184:	e3a02000 	mov	r2, #0
   11188:	e3a03000 	mov	r3, #0
   1118c:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
	int l_countVar_i32=0;
   11190:	e3a03000 	mov	r3, #0
   11194:	e50b3020 	str	r3, [fp, #-32]
	halImu_orientationValues l_imuValues_st;

// create Reference pressure,Gravity and Temperature as mean value over M_NR_OF_VALUES_OFFSET_I32 values
	for(l_countVar_i32=0;l_countVar_i32<M_NR_OF_VALUES_OFFSET_I32;l_countVar_i32++)
   11198:	e3a03000 	mov	r3, #0
   1119c:	e50b3020 	str	r3, [fp, #-32]
   111a0:	ea000012 	b	111f0 <g_sigOri_initBuildReferenceValues_bl+0x90>
	{
		g_sigFil_readImuData_bl();
   111a4:	eb000351 	bl	11ef0 <g_sigFil_readImuData_bl>
		l_imuValues_st=g_sigFil_getImuValuesUnfiltered_st();
   111a8:	e24b307c 	sub	r3, fp, #124	; 0x7c
   111ac:	e1a00003 	mov	r0, r3
   111b0:	eb0002e4 	bl	11d48 <g_sigFil_getImuValuesUnfiltered_st>
		l_barometricValue_f64+=l_imuValues_st.pressure_f64;
   111b4:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
   111b8:	ed1b6b03 	vldr	d6, [fp, #-12]
   111bc:	ee367b07 	vadd.f64	d7, d6, d7
   111c0:	ed0b7b03 	vstr	d7, [fp, #-12]
		l_GravityValue_f64+=l_imuValues_st.acc.z_f64;
   111c4:	ed1b7b1b 	vldr	d7, [fp, #-108]	; 0xffffff94
   111c8:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
   111cc:	ee367b07 	vadd.f64	d7, d6, d7
   111d0:	ed0b7b05 	vstr	d7, [fp, #-20]	; 0xffffffec
		l_Temperature_f64+=l_imuValues_st.temperature_f64;
   111d4:	ed1b7b0d 	vldr	d7, [fp, #-52]	; 0xffffffcc
   111d8:	ed1b6b07 	vldr	d6, [fp, #-28]	; 0xffffffe4
   111dc:	ee367b07 	vadd.f64	d7, d6, d7
   111e0:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4
	double l_Temperature_f64=0;
	int l_countVar_i32=0;
	halImu_orientationValues l_imuValues_st;

// create Reference pressure,Gravity and Temperature as mean value over M_NR_OF_VALUES_OFFSET_I32 values
	for(l_countVar_i32=0;l_countVar_i32<M_NR_OF_VALUES_OFFSET_I32;l_countVar_i32++)
   111e4:	e51b3020 	ldr	r3, [fp, #-32]
   111e8:	e2833001 	add	r3, r3, #1
   111ec:	e50b3020 	str	r3, [fp, #-32]
   111f0:	e51b3020 	ldr	r3, [fp, #-32]
   111f4:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   111f8:	baffffe9 	blt	111a4 <g_sigOri_initBuildReferenceValues_bl+0x44>
		l_imuValues_st=g_sigFil_getImuValuesUnfiltered_st();
		l_barometricValue_f64+=l_imuValues_st.pressure_f64;
		l_GravityValue_f64+=l_imuValues_st.acc.z_f64;
		l_Temperature_f64+=l_imuValues_st.temperature_f64;
	}
	m_sigOri_referencePressure_f64 =l_barometricValue_f64/M_NR_OF_VALUES_OFFSET_I32;
   111fc:	ed1b6b03 	vldr	d6, [fp, #-12]
   11200:	ed9f7b0e 	vldr	d7, [pc, #56]	; 11240 <g_sigOri_initBuildReferenceValues_bl+0xe0>
   11204:	ee867b07 	vdiv.f64	d7, d6, d7
   11208:	e59f3038 	ldr	r3, [pc, #56]	; 11248 <g_sigOri_initBuildReferenceValues_bl+0xe8>
   1120c:	ed837b00 	vstr	d7, [r3]
	m_sigOri_referenceGravity_f64=l_GravityValue_f64/M_NR_OF_VALUES_OFFSET_I32;
   11210:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
   11214:	ed9f7b09 	vldr	d7, [pc, #36]	; 11240 <g_sigOri_initBuildReferenceValues_bl+0xe0>
   11218:	ee867b07 	vdiv.f64	d7, d6, d7
   1121c:	e59f3028 	ldr	r3, [pc, #40]	; 1124c <g_sigOri_initBuildReferenceValues_bl+0xec>
   11220:	ed837b00 	vstr	d7, [r3]
	m_sigOri_referenceTemperature_f64=l_Temperature_f64/M_NR_OF_VALUES_OFFSET_I32;
   11224:	ed1b6b07 	vldr	d6, [fp, #-28]	; 0xffffffe4
   11228:	ed9f7b04 	vldr	d7, [pc, #16]	; 11240 <g_sigOri_initBuildReferenceValues_bl+0xe0>
   1122c:	ee867b07 	vdiv.f64	d7, d6, d7
   11230:	e59f3018 	ldr	r3, [pc, #24]	; 11250 <g_sigOri_initBuildReferenceValues_bl+0xf0>
   11234:	ed837b00 	vstr	d7, [r3]
}
   11238:	e24bd004 	sub	sp, fp, #4
   1123c:	e8bd8800 	pop	{fp, pc}
   11240:	00000000 	.word	0x00000000
   11244:	408f4000 	.word	0x408f4000
   11248:	0001b9a0 	.word	0x0001b9a0
   1124c:	0001b9a8 	.word	0x0001b9a8
   11250:	0001b9b0 	.word	0x0001b9b0

00011254 <m_sigOri_getImuData_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void m_sigOri_getImuData_bl()
{
   11254:	e92d4810 	push	{r4, fp, lr}
   11258:	e28db008 	add	fp, sp, #8
   1125c:	e24dd05c 	sub	sp, sp, #92	; 0x5c
	g_sigFil_readImuData_bl();
   11260:	eb000322 	bl	11ef0 <g_sigFil_readImuData_bl>
	m_sigori_imuValues_st = g_sigFil_getImuValuesUnfiltered_st();
   11264:	e59f402c 	ldr	r4, [pc, #44]	; 11298 <m_sigOri_getImuData_bl+0x44>
   11268:	e24b3064 	sub	r3, fp, #100	; 0x64
   1126c:	e1a00003 	mov	r0, r3
   11270:	eb0002b4 	bl	11d48 <g_sigFil_getImuValuesUnfiltered_st>
   11274:	e1a01004 	mov	r1, r4
   11278:	e24b2064 	sub	r2, fp, #100	; 0x64
   1127c:	e3a03058 	mov	r3, #88	; 0x58
   11280:	e1a00001 	mov	r0, r1
   11284:	e1a01002 	mov	r1, r2
   11288:	e1a02003 	mov	r2, r3
   1128c:	ebffde7c 	bl	8c84 <_init+0x170>
}
   11290:	e24bd008 	sub	sp, fp, #8
   11294:	e8bd8810 	pop	{r4, fp, pc}
   11298:	0001b940 	.word	0x0001b940

0001129c <m_sigOri_calcAccMagAngle_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles m_sigOri_calcAccMagAngle_st()
{
   1129c:	e92d4830 	push	{r4, r5, fp, lr}
   112a0:	ed2d8b04 	vpush	{d8-d9}
   112a4:	e28db01c 	add	fp, sp, #28
   112a8:	e24dd0b0 	sub	sp, sp, #176	; 0xb0
	sigOri_orientationAngles l_angles_f64;
	double l_roll_f64=0;
   112ac:	e3a02000 	mov	r2, #0
   112b0:	e3a03000 	mov	r3, #0
   112b4:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
	double l_pitch_f64=0;
   112b8:	e3a02000 	mov	r2, #0
   112bc:	e3a03000 	mov	r3, #0
   112c0:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
	double l_yaw_f64=0;
   112c4:	e3a02000 	mov	r2, #0
   112c8:	e3a03000 	mov	r3, #0
   112cc:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	double l_divider_f64=0;
   112d0:	e3a02000 	mov	r2, #0
   112d4:	e3a03000 	mov	r3, #0
   112d8:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4

	double ll_minX_f64=M_SIGORI_MAG_MINX_F64;
   112dc:	e59f22ec 	ldr	r2, [pc, #748]	; 115d0 <m_sigOri_calcAccMagAngle_st+0x334>
   112e0:	e59f32ec 	ldr	r3, [pc, #748]	; 115d4 <m_sigOri_calcAccMagAngle_st+0x338>
   112e4:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
	double ll_maxX_f64=M_SIGORI_MAG_MAXX_F64;
   112e8:	e59f22e8 	ldr	r2, [pc, #744]	; 115d8 <m_sigOri_calcAccMagAngle_st+0x33c>
   112ec:	e59f32e8 	ldr	r3, [pc, #744]	; 115dc <m_sigOri_calcAccMagAngle_st+0x340>
   112f0:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
	double ll_minY_f64=M_SIGORI_MAG_MINY_F64;
   112f4:	e59f22e4 	ldr	r2, [pc, #740]	; 115e0 <m_sigOri_calcAccMagAngle_st+0x344>
   112f8:	e59f32e4 	ldr	r3, [pc, #740]	; 115e4 <m_sigOri_calcAccMagAngle_st+0x348>
   112fc:	e14b25f4 	strd	r2, [fp, #-84]	; 0xffffffac
	double ll_maxY_f64=M_SIGORI_MAG_MAXY_F64;
   11300:	e59f22e0 	ldr	r2, [pc, #736]	; 115e8 <m_sigOri_calcAccMagAngle_st+0x34c>
   11304:	e59f32e0 	ldr	r3, [pc, #736]	; 115ec <m_sigOri_calcAccMagAngle_st+0x350>
   11308:	e14b25fc 	strd	r2, [fp, #-92]	; 0xffffffa4
	double ll_minZ_f64=M_SIGORI_MAG_MINZ_F64;
   1130c:	e59f22dc 	ldr	r2, [pc, #732]	; 115f0 <m_sigOri_calcAccMagAngle_st+0x354>
   11310:	e59f32dc 	ldr	r3, [pc, #732]	; 115f4 <m_sigOri_calcAccMagAngle_st+0x358>
   11314:	e14b26f4 	strd	r2, [fp, #-100]	; 0xffffff9c
	double ll_maxZ_f64=M_SIGORI_MAG_MAXZ_F64;
   11318:	e59f22d8 	ldr	r2, [pc, #728]	; 115f8 <m_sigOri_calcAccMagAngle_st+0x35c>
   1131c:	e59f32d8 	ldr	r3, [pc, #728]	; 115fc <m_sigOri_calcAccMagAngle_st+0x360>
   11320:	e14b26fc 	strd	r2, [fp, #-108]	; 0xffffff94

	halAccmag_3dDoubleVector l_mag_st;
	
	l_mag_st.x_f64=(m_sigori_imuValues_st.mag.x_f64-ll_minX_f64)/(ll_maxX_f64-ll_minX_f64)*2-1;
   11324:	e59f32d4 	ldr	r3, [pc, #724]	; 11600 <m_sigOri_calcAccMagAngle_st+0x364>
   11328:	ed936b06 	vldr	d6, [r3, #24]
   1132c:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
   11330:	ee366b47 	vsub.f64	d6, d6, d7
   11334:	ed1b5b13 	vldr	d5, [fp, #-76]	; 0xffffffb4
   11338:	ed1b7b11 	vldr	d7, [fp, #-68]	; 0xffffffbc
   1133c:	ee357b47 	vsub.f64	d7, d5, d7
   11340:	ee867b07 	vdiv.f64	d7, d6, d7
   11344:	ee376b07 	vadd.f64	d6, d7, d7
   11348:	ed9f7b9c 	vldr	d7, [pc, #624]	; 115c0 <m_sigOri_calcAccMagAngle_st+0x324>
   1134c:	ee367b47 	vsub.f64	d7, d6, d7
   11350:	ed0b7b2d 	vstr	d7, [fp, #-180]	; 0xffffff4c
	l_mag_st.y_f64=(m_sigori_imuValues_st.mag.y_f64-ll_minY_f64)/(ll_maxY_f64-ll_minY_f64)*2-1;
   11354:	e59f32a4 	ldr	r3, [pc, #676]	; 11600 <m_sigOri_calcAccMagAngle_st+0x364>
   11358:	ed936b08 	vldr	d6, [r3, #32]
   1135c:	ed1b7b15 	vldr	d7, [fp, #-84]	; 0xffffffac
   11360:	ee366b47 	vsub.f64	d6, d6, d7
   11364:	ed1b5b17 	vldr	d5, [fp, #-92]	; 0xffffffa4
   11368:	ed1b7b15 	vldr	d7, [fp, #-84]	; 0xffffffac
   1136c:	ee357b47 	vsub.f64	d7, d5, d7
   11370:	ee867b07 	vdiv.f64	d7, d6, d7
   11374:	ee376b07 	vadd.f64	d6, d7, d7
   11378:	ed9f7b90 	vldr	d7, [pc, #576]	; 115c0 <m_sigOri_calcAccMagAngle_st+0x324>
   1137c:	ee367b47 	vsub.f64	d7, d6, d7
   11380:	ed0b7b2b 	vstr	d7, [fp, #-172]	; 0xffffff54
	l_mag_st.z_f64=(m_sigori_imuValues_st.mag.z_f64-ll_minZ_f64)/(ll_maxZ_f64-ll_minZ_f64)*2-1;
   11384:	e59f3274 	ldr	r3, [pc, #628]	; 11600 <m_sigOri_calcAccMagAngle_st+0x364>
   11388:	ed936b0a 	vldr	d6, [r3, #40]	; 0x28
   1138c:	ed1b7b19 	vldr	d7, [fp, #-100]	; 0xffffff9c
   11390:	ee366b47 	vsub.f64	d6, d6, d7
   11394:	ed1b5b1b 	vldr	d5, [fp, #-108]	; 0xffffff94
   11398:	ed1b7b19 	vldr	d7, [fp, #-100]	; 0xffffff9c
   1139c:	ee357b47 	vsub.f64	d7, d5, d7
   113a0:	ee867b07 	vdiv.f64	d7, d6, d7
   113a4:	ee376b07 	vadd.f64	d6, d7, d7
   113a8:	ed9f7b84 	vldr	d7, [pc, #528]	; 115c0 <m_sigOri_calcAccMagAngle_st+0x324>
   113ac:	ee367b47 	vsub.f64	d7, d6, d7
   113b0:	ed0b7b29 	vstr	d7, [fp, #-164]	; 0xffffff5c

	//calculate roll with accelerometer values
	if(m_sigori_imuValues_st.acc.z_f64!=0)
   113b4:	e59f3244 	ldr	r3, [pc, #580]	; 11600 <m_sigOri_calcAccMagAngle_st+0x364>
   113b8:	ed937b04 	vldr	d7, [r3, #16]
   113bc:	eeb57b40 	vcmp.f64	d7, #0.0
   113c0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   113c4:	0a00000c 	beq	113fc <m_sigOri_calcAccMagAngle_st+0x160>
	{
		l_roll_f64=atan2(m_sigori_imuValues_st.acc.y_f64,m_sigori_imuValues_st.acc.z_f64);
   113c8:	e59f3230 	ldr	r3, [pc, #560]	; 11600 <m_sigOri_calcAccMagAngle_st+0x364>
   113cc:	ed936b02 	vldr	d6, [r3, #8]
   113d0:	e59f3228 	ldr	r3, [pc, #552]	; 11600 <m_sigOri_calcAccMagAngle_st+0x364>
   113d4:	ed937b04 	vldr	d7, [r3, #16]
   113d8:	eeb00b46 	vmov.f64	d0, d6
   113dc:	eeb01b47 	vmov.f64	d1, d7
   113e0:	ebffde42 	bl	8cf0 <_init+0x1dc>
   113e4:	ed0b0b09 	vstr	d0, [fp, #-36]	; 0xffffffdc
		l_angles_f64.roll_f64=-l_roll_f64*M_RAD_TO_DEG_F64;
   113e8:	ed1b7b09 	vldr	d7, [fp, #-36]	; 0xffffffdc
   113ec:	eeb16b47 	vneg.f64	d6, d7
   113f0:	ed9f7b74 	vldr	d7, [pc, #464]	; 115c8 <m_sigOri_calcAccMagAngle_st+0x32c>
   113f4:	ee267b07 	vmul.f64	d7, d6, d7
   113f8:	ed0b7b27 	vstr	d7, [fp, #-156]	; 0xffffff64
	}
	//calculate pitch with accelerometer values
	l_divider_f64=m_sigori_imuValues_st.acc.y_f64*sin(l_roll_f64)+m_sigori_imuValues_st.acc.z_f64*cos(l_roll_f64);
   113fc:	e59f31fc 	ldr	r3, [pc, #508]	; 11600 <m_sigOri_calcAccMagAngle_st+0x364>
   11400:	ed938b02 	vldr	d8, [r3, #8]
   11404:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
   11408:	ebffde4d 	bl	8d44 <_init+0x230>
   1140c:	eeb07b40 	vmov.f64	d7, d0
   11410:	ee288b07 	vmul.f64	d8, d8, d7
   11414:	e59f31e4 	ldr	r3, [pc, #484]	; 11600 <m_sigOri_calcAccMagAngle_st+0x364>
   11418:	ed939b04 	vldr	d9, [r3, #16]
   1141c:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
   11420:	ebffde14 	bl	8c78 <_init+0x164>
   11424:	eeb07b40 	vmov.f64	d7, d0
   11428:	ee297b07 	vmul.f64	d7, d9, d7
   1142c:	ee387b07 	vadd.f64	d7, d8, d7
   11430:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	if(l_divider_f64!=0)
   11434:	ed1b7b0f 	vldr	d7, [fp, #-60]	; 0xffffffc4
   11438:	eeb57b40 	vcmp.f64	d7, #0.0
   1143c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   11440:	0a00000c 	beq	11478 <m_sigOri_calcAccMagAngle_st+0x1dc>
	{
		l_pitch_f64=atan(-m_sigori_imuValues_st.acc.x_f64/l_divider_f64);
   11444:	e59f31b4 	ldr	r3, [pc, #436]	; 11600 <m_sigOri_calcAccMagAngle_st+0x364>
   11448:	ed937b00 	vldr	d7, [r3]
   1144c:	eeb16b47 	vneg.f64	d6, d7
   11450:	ed1b7b0f 	vldr	d7, [fp, #-60]	; 0xffffffc4
   11454:	ee867b07 	vdiv.f64	d7, d6, d7
   11458:	eeb00b47 	vmov.f64	d0, d7
   1145c:	ebffdded 	bl	8c18 <_init+0x104>
   11460:	ed0b0b0b 	vstr	d0, [fp, #-44]	; 0xffffffd4
		l_angles_f64.pitch_f64=-l_pitch_f64*M_RAD_TO_DEG_F64;
   11464:	ed1b7b0b 	vldr	d7, [fp, #-44]	; 0xffffffd4
   11468:	eeb16b47 	vneg.f64	d6, d7
   1146c:	ed9f7b55 	vldr	d7, [pc, #340]	; 115c8 <m_sigOri_calcAccMagAngle_st+0x32c>
   11470:	ee267b07 	vmul.f64	d7, d6, d7
   11474:	ed0b7b25 	vstr	d7, [fp, #-148]	; 0xffffff6c
	}

	//calculate yaw and make a tilt compensation for the eCompass
	l_divider_f64= m_sigori_imuValues_st.mag.x_f64*cos(l_pitch_f64)+
   11478:	e59f3180 	ldr	r3, [pc, #384]	; 11600 <m_sigOri_calcAccMagAngle_st+0x364>
   1147c:	ed938b06 	vldr	d8, [r3, #24]
   11480:	ed1b0b0b 	vldr	d0, [fp, #-44]	; 0xffffffd4
   11484:	ebffddfb 	bl	8c78 <_init+0x164>
   11488:	eeb07b40 	vmov.f64	d7, d0
   1148c:	ee288b07 	vmul.f64	d8, d8, d7
					m_sigori_imuValues_st.mag.y_f64*sin(l_pitch_f64)*sin(l_roll_f64)+
   11490:	e59f3168 	ldr	r3, [pc, #360]	; 11600 <m_sigOri_calcAccMagAngle_st+0x364>
   11494:	ed939b08 	vldr	d9, [r3, #32]
   11498:	ed1b0b0b 	vldr	d0, [fp, #-44]	; 0xffffffd4
   1149c:	ebffde28 	bl	8d44 <_init+0x230>
   114a0:	eeb07b40 	vmov.f64	d7, d0
   114a4:	ee299b07 	vmul.f64	d9, d9, d7
   114a8:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
   114ac:	ebffde24 	bl	8d44 <_init+0x230>
   114b0:	eeb07b40 	vmov.f64	d7, d0
   114b4:	ee297b07 	vmul.f64	d7, d9, d7
		l_pitch_f64=atan(-m_sigori_imuValues_st.acc.x_f64/l_divider_f64);
		l_angles_f64.pitch_f64=-l_pitch_f64*M_RAD_TO_DEG_F64;
	}

	//calculate yaw and make a tilt compensation for the eCompass
	l_divider_f64= m_sigori_imuValues_st.mag.x_f64*cos(l_pitch_f64)+
   114b8:	ee388b07 	vadd.f64	d8, d8, d7
					m_sigori_imuValues_st.mag.y_f64*sin(l_pitch_f64)*sin(l_roll_f64)+
					m_sigori_imuValues_st.mag.z_f64*sin(l_pitch_f64)*cos(l_roll_f64);
   114bc:	e59f313c 	ldr	r3, [pc, #316]	; 11600 <m_sigOri_calcAccMagAngle_st+0x364>
   114c0:	ed939b0a 	vldr	d9, [r3, #40]	; 0x28
   114c4:	ed1b0b0b 	vldr	d0, [fp, #-44]	; 0xffffffd4
   114c8:	ebffde1d 	bl	8d44 <_init+0x230>
   114cc:	eeb07b40 	vmov.f64	d7, d0
   114d0:	ee299b07 	vmul.f64	d9, d9, d7
   114d4:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
   114d8:	ebffdde6 	bl	8c78 <_init+0x164>
   114dc:	eeb07b40 	vmov.f64	d7, d0
   114e0:	ee297b07 	vmul.f64	d7, d9, d7
		l_pitch_f64=atan(-m_sigori_imuValues_st.acc.x_f64/l_divider_f64);
		l_angles_f64.pitch_f64=-l_pitch_f64*M_RAD_TO_DEG_F64;
	}

	//calculate yaw and make a tilt compensation for the eCompass
	l_divider_f64= m_sigori_imuValues_st.mag.x_f64*cos(l_pitch_f64)+
   114e4:	ee387b07 	vadd.f64	d7, d8, d7
   114e8:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
					m_sigori_imuValues_st.mag.y_f64*sin(l_pitch_f64)*sin(l_roll_f64)+
					m_sigori_imuValues_st.mag.z_f64*sin(l_pitch_f64)*cos(l_roll_f64);
	if(l_divider_f64!=0)
   114ec:	ed1b7b0f 	vldr	d7, [fp, #-60]	; 0xffffffc4
   114f0:	eeb57b40 	vcmp.f64	d7, #0.0
   114f4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   114f8:	0a000016 	beq	11558 <m_sigOri_calcAccMagAngle_st+0x2bc>
	{
		l_yaw_f64=atan2(-(-m_sigori_imuValues_st.mag.z_f64*sin(l_roll_f64)+m_sigori_imuValues_st.mag.y_f64*cos(l_roll_f64)),
   114fc:	e59f30fc 	ldr	r3, [pc, #252]	; 11600 <m_sigOri_calcAccMagAngle_st+0x364>
   11500:	ed937b0a 	vldr	d7, [r3, #40]	; 0x28
   11504:	eeb18b47 	vneg.f64	d8, d7
   11508:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
   1150c:	ebffde0c 	bl	8d44 <_init+0x230>
   11510:	eeb07b40 	vmov.f64	d7, d0
   11514:	ee288b07 	vmul.f64	d8, d8, d7
   11518:	e59f30e0 	ldr	r3, [pc, #224]	; 11600 <m_sigOri_calcAccMagAngle_st+0x364>
   1151c:	ed939b08 	vldr	d9, [r3, #32]
   11520:	ed1b0b09 	vldr	d0, [fp, #-36]	; 0xffffffdc
   11524:	ebffddd3 	bl	8c78 <_init+0x164>
   11528:	eeb07b40 	vmov.f64	d7, d0
   1152c:	ee297b07 	vmul.f64	d7, d9, d7
   11530:	ee387b07 	vadd.f64	d7, d8, d7
   11534:	eeb17b47 	vneg.f64	d7, d7
   11538:	eeb00b47 	vmov.f64	d0, d7
   1153c:	ed1b1b0f 	vldr	d1, [fp, #-60]	; 0xffffffc4
   11540:	ebffddea 	bl	8cf0 <_init+0x1dc>
   11544:	ed0b0b0d 	vstr	d0, [fp, #-52]	; 0xffffffcc
					l_divider_f64);
		l_angles_f64.yaw_f64=l_yaw_f64*M_RAD_TO_DEG_F64;	
   11548:	ed1b6b0d 	vldr	d6, [fp, #-52]	; 0xffffffcc
   1154c:	ed9f7b1d 	vldr	d7, [pc, #116]	; 115c8 <m_sigOri_calcAccMagAngle_st+0x32c>
   11550:	ee267b07 	vmul.f64	d7, d6, d7
   11554:	ed0b7b23 	vstr	d7, [fp, #-140]	; 0xffffff74
			l_yaw_f64=atan2(l_divider_f64,l_mag_st.z_f64*sin(l_pitch_f64)+l_mag_st.x_f64*cos(l_pitch_f64));
			l_angles_f64.yaw_f64=l_yaw_f64*M_RAD_TO_DEG_F64;

		}*/

	m_sigOri_arrayOutputAnglesAccMagCalc_st = l_angles_f64;
   11558:	e59f30a4 	ldr	r3, [pc, #164]	; 11604 <m_sigOri_calcAccMagAngle_st+0x368>
   1155c:	e1a0c003 	mov	ip, r3
   11560:	e24be09c 	sub	lr, fp, #156	; 0x9c
   11564:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   11568:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   1156c:	e89e0003 	ldm	lr, {r0, r1}
   11570:	e88c0003 	stm	ip, {r0, r1}

	return l_angles_f64;
   11574:	e24bc084 	sub	ip, fp, #132	; 0x84
   11578:	e24be09c 	sub	lr, fp, #156	; 0x9c
   1157c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   11580:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   11584:	e89e0003 	ldm	lr, {r0, r1}
   11588:	e88c0003 	stm	ip, {r0, r1}
   1158c:	e14b48d4 	ldrd	r4, [fp, #-132]	; 0xffffff7c
   11590:	e14b07dc 	ldrd	r0, [fp, #-124]	; 0xffffff84
   11594:	e14b27d4 	ldrd	r2, [fp, #-116]	; 0xffffff8c
   11598:	ec454b15 	vmov	d5, r4, r5
   1159c:	ec410b16 	vmov	d6, r0, r1
   115a0:	ec432b17 	vmov	d7, r2, r3
}
   115a4:	eeb00b45 	vmov.f64	d0, d5
   115a8:	eeb01b46 	vmov.f64	d1, d6
   115ac:	eeb02b47 	vmov.f64	d2, d7
   115b0:	e24bd01c 	sub	sp, fp, #28
   115b4:	ecbd8b04 	vpop	{d8-d9}
   115b8:	e8bd8830 	pop	{r4, r5, fp, pc}
   115bc:	e1a00000 	nop			; (mov r0, r0)
   115c0:	00000000 	.word	0x00000000
   115c4:	3ff00000 	.word	0x3ff00000
   115c8:	b05cc3e8 	.word	0xb05cc3e8
   115cc:	404ca5dd 	.word	0x404ca5dd
   115d0:	9ba5e354 	.word	0x9ba5e354
   115d4:	c033b0c4 	.word	0xc033b0c4
   115d8:	eecbfb16 	.word	0xeecbfb16
   115dc:	4034c3c9 	.word	0x4034c3c9
   115e0:	3fe5c91d 	.word	0x3fe5c91d
   115e4:	c030bfa4 	.word	0xc030bfa4
   115e8:	b98c7e28 	.word	0xb98c7e28
   115ec:	4035696b 	.word	0x4035696b
   115f0:	a0902de0 	.word	0xa0902de0
   115f4:	c02e71f8 	.word	0xc02e71f8
   115f8:	c5d63886 	.word	0xc5d63886
   115fc:	4035b46d 	.word	0x4035b46d
   11600:	0001b940 	.word	0x0001b940
   11604:	0001b9e0 	.word	0x0001b9e0

00011608 <m_sigOri_calcGyroAnglePerStep_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles m_sigOri_calcGyroAnglePerStep_st()
{
   11608:	e92d4830 	push	{r4, r5, fp, lr}
   1160c:	e28db00c 	add	fp, sp, #12
   11610:	e24dd060 	sub	sp, sp, #96	; 0x60
	sigOri_orientationAngles l_angles_f64;
	
	long int time_difference;
	struct timeval gettime_now;
	double l_timestep_f64=0;
   11614:	e3a02000 	mov	r2, #0
   11618:	e3a03000 	mov	r3, #0
   1161c:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	gettimeofday(&gettime_now,(void *)0);
   11620:	e24b3054 	sub	r3, fp, #84	; 0x54
   11624:	e1a00003 	mov	r0, r3
   11628:	e3a01000 	mov	r1, #0
   1162c:	ebffdd7c 	bl	8c24 <_init+0x110>

	time_difference=gettime_now.tv_usec-gettime_old.tv_usec;
   11630:	e51b2050 	ldr	r2, [fp, #-80]	; 0x50
   11634:	e59f30fc 	ldr	r3, [pc, #252]	; 11738 <m_sigOri_calcGyroAnglePerStep_st+0x130>
   11638:	e5933004 	ldr	r3, [r3, #4]
   1163c:	e0633002 	rsb	r3, r3, r2
   11640:	e50b3010 	str	r3, [fp, #-16]
	if(time_difference<0)
   11644:	e51b3010 	ldr	r3, [fp, #-16]
   11648:	e3530000 	cmp	r3, #0
   1164c:	aa000006 	bge	1166c <m_sigOri_calcGyroAnglePerStep_st+0x64>
	{
		time_difference=1000000-gettime_old.tv_usec+gettime_now.tv_usec;
   11650:	e59f30e0 	ldr	r3, [pc, #224]	; 11738 <m_sigOri_calcGyroAnglePerStep_st+0x130>
   11654:	e5933004 	ldr	r3, [r3, #4]
   11658:	e263393d 	rsb	r3, r3, #999424	; 0xf4000
   1165c:	e2833d09 	add	r3, r3, #576	; 0x240
   11660:	e51b2050 	ldr	r2, [fp, #-80]	; 0x50
   11664:	e0833002 	add	r3, r3, r2
   11668:	e50b3010 	str	r3, [fp, #-16]
	}

	l_timestep_f64=(double)(time_difference)*0.000001;
   1166c:	e51b3010 	ldr	r3, [fp, #-16]
   11670:	ee073a90 	vmov	s15, r3
   11674:	eeb86be7 	vcvt.f64.s32	d6, s15
   11678:	ed9f7b2c 	vldr	d7, [pc, #176]	; 11730 <m_sigOri_calcGyroAnglePerStep_st+0x128>
   1167c:	ee267b07 	vmul.f64	d7, d6, d7
   11680:	ed0b7b07 	vstr	d7, [fp, #-28]	; 0xffffffe4

	l_angles_f64.roll_f64=m_sigori_imuValues_st.gyro.roll_f64*l_timestep_f64;
   11684:	e59f30b0 	ldr	r3, [pc, #176]	; 1173c <m_sigOri_calcGyroAnglePerStep_st+0x134>
   11688:	ed936b0c 	vldr	d6, [r3, #48]	; 0x30
   1168c:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
   11690:	ee267b07 	vmul.f64	d7, d6, d7
   11694:	ed0b7b13 	vstr	d7, [fp, #-76]	; 0xffffffb4
	l_angles_f64.pitch_f64=m_sigori_imuValues_st.gyro.pitch_f64*l_timestep_f64;
   11698:	e59f309c 	ldr	r3, [pc, #156]	; 1173c <m_sigOri_calcGyroAnglePerStep_st+0x134>
   1169c:	ed936b0e 	vldr	d6, [r3, #56]	; 0x38
   116a0:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
   116a4:	ee267b07 	vmul.f64	d7, d6, d7
   116a8:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc
	l_angles_f64.yaw_f64=m_sigori_imuValues_st.gyro.yaw_f64*l_timestep_f64;
   116ac:	e59f3088 	ldr	r3, [pc, #136]	; 1173c <m_sigOri_calcGyroAnglePerStep_st+0x134>
   116b0:	ed936b10 	vldr	d6, [r3, #64]	; 0x40
   116b4:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
   116b8:	ee267b07 	vmul.f64	d7, d6, d7
   116bc:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	gettimeofday(&gettime_old,(void *)0);
   116c0:	e59f0070 	ldr	r0, [pc, #112]	; 11738 <m_sigOri_calcGyroAnglePerStep_st+0x130>
   116c4:	e3a01000 	mov	r1, #0
   116c8:	ebffdd55 	bl	8c24 <_init+0x110>

	m_sigOri_arrayOutputAnglesGyroPerStep_st = l_angles_f64;
   116cc:	e59f306c 	ldr	r3, [pc, #108]	; 11740 <m_sigOri_calcGyroAnglePerStep_st+0x138>
   116d0:	e1a0c003 	mov	ip, r3
   116d4:	e24be04c 	sub	lr, fp, #76	; 0x4c
   116d8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   116dc:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   116e0:	e89e0003 	ldm	lr, {r0, r1}
   116e4:	e88c0003 	stm	ip, {r0, r1}

	return l_angles_f64;
   116e8:	e24bc034 	sub	ip, fp, #52	; 0x34
   116ec:	e24be04c 	sub	lr, fp, #76	; 0x4c
   116f0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   116f4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   116f8:	e89e0003 	ldm	lr, {r0, r1}
   116fc:	e88c0003 	stm	ip, {r0, r1}
   11700:	e14b43d4 	ldrd	r4, [fp, #-52]	; 0xffffffcc
   11704:	e14b02dc 	ldrd	r0, [fp, #-44]	; 0xffffffd4
   11708:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1170c:	ec454b15 	vmov	d5, r4, r5
   11710:	ec410b16 	vmov	d6, r0, r1
   11714:	ec432b17 	vmov	d7, r2, r3
}
   11718:	eeb00b45 	vmov.f64	d0, d5
   1171c:	eeb01b46 	vmov.f64	d1, d6
   11720:	eeb02b47 	vmov.f64	d2, d7
   11724:	e24bd00c 	sub	sp, fp, #12
   11728:	e8bd8830 	pop	{r4, r5, fp, pc}
   1172c:	e1a00000 	nop			; (mov r0, r0)
   11730:	a0b5ed8d 	.word	0xa0b5ed8d
   11734:	3eb0c6f7 	.word	0x3eb0c6f7
   11738:	0001bd10 	.word	0x0001bd10
   1173c:	0001b940 	.word	0x0001b940
   11740:	0001b9c8 	.word	0x0001b9c8

00011744 <m_sigOri_calcBarometricHeight_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void m_sigOri_calcBarometricHeight_st()
{
   11744:	e92d4800 	push	{fp, lr}
   11748:	ed2d8b02 	vpush	{d8}
   1174c:	e28db00c 	add	fp, sp, #12
   11750:	e24dd010 	sub	sp, sp, #16
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
   11754:	e59f2094 	ldr	r2, [pc, #148]	; 117f0 <m_sigOri_calcBarometricHeight_st+0xac>
   11758:	e59f3094 	ldr	r3, [pc, #148]	; 117f4 <m_sigOri_calcBarometricHeight_st+0xb0>
   1175c:	e14b21f4 	strd	r2, [fp, #-20]	; 0xffffffec
	double l_Deg2Kelvin_f64=273.15;
   11760:	e59f2090 	ldr	r2, [pc, #144]	; 117f8 <m_sigOri_calcBarometricHeight_st+0xb4>
   11764:	e59f3090 	ldr	r3, [pc, #144]	; 117fc <m_sigOri_calcBarometricHeight_st+0xb8>
   11768:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
   1176c:	e59f308c 	ldr	r3, [pc, #140]	; 11800 <m_sigOri_calcBarometricHeight_st+0xbc>
   11770:	ed937b00 	vldr	d7, [r3]
   11774:	ed1b6b05 	vldr	d6, [fp, #-20]	; 0xffffffec
   11778:	ee866b07 	vdiv.f64	d6, d6, d7
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
   1177c:	e59f3080 	ldr	r3, [pc, #128]	; 11804 <m_sigOri_calcBarometricHeight_st+0xc0>
   11780:	ed935b12 	vldr	d5, [r3, #72]	; 0x48
   11784:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
   11788:	ee355b07 	vadd.f64	d5, d5, d7
   1178c:	e59f3074 	ldr	r3, [pc, #116]	; 11808 <m_sigOri_calcBarometricHeight_st+0xc4>
   11790:	ed937b00 	vldr	d7, [r3]
   11794:	ee355b07 	vadd.f64	d5, d5, d7
   11798:	ed1b7b07 	vldr	d7, [fp, #-28]	; 0xffffffe4
   1179c:	ee355b07 	vadd.f64	d5, d5, d7
   117a0:	ed9f7b10 	vldr	d7, [pc, #64]	; 117e8 <m_sigOri_calcBarometricHeight_st+0xa4>
   117a4:	ee857b07 	vdiv.f64	d7, d5, d7
void m_sigOri_calcBarometricHeight_st()
{
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
	double l_Deg2Kelvin_f64=273.15;

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
   117a8:	ee268b07 	vmul.f64	d8, d6, d7
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
			log(m_sigOri_referencePressure_f64/m_sigori_imuValues_st.pressure_f64);
   117ac:	e59f3058 	ldr	r3, [pc, #88]	; 1180c <m_sigOri_calcBarometricHeight_st+0xc8>
   117b0:	ed936b00 	vldr	d6, [r3]
   117b4:	e59f3048 	ldr	r3, [pc, #72]	; 11804 <m_sigOri_calcBarometricHeight_st+0xc0>
   117b8:	ed937b14 	vldr	d7, [r3, #80]	; 0x50
   117bc:	ee867b07 	vdiv.f64	d7, d6, d7
   117c0:	eeb00b47 	vmov.f64	d0, d7
   117c4:	ebffdd55 	bl	8d20 <_init+0x20c>
   117c8:	eeb07b40 	vmov.f64	d7, d0
{
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
	double l_Deg2Kelvin_f64=273.15;

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
   117cc:	ee287b07 	vmul.f64	d7, d8, d7
void m_sigOri_calcBarometricHeight_st()
{
	double l_densityOfAir_f64=287.05;	// [J/(Kg°K)]
	double l_Deg2Kelvin_f64=273.15;

	m_SIGORI_heightBarometerMetres_f64=(l_densityOfAir_f64/m_sigOri_referenceGravity_f64)*
   117d0:	e59f3038 	ldr	r3, [pc, #56]	; 11810 <m_sigOri_calcBarometricHeight_st+0xcc>
   117d4:	ed837b00 	vstr	d7, [r3]
			((m_sigori_imuValues_st.temperature_f64+l_Deg2Kelvin_f64+m_sigOri_referenceTemperature_f64+l_Deg2Kelvin_f64)/2)*
			log(m_sigOri_referencePressure_f64/m_sigori_imuValues_st.pressure_f64);
}
   117d8:	e24bd00c 	sub	sp, fp, #12
   117dc:	ecbd8b02 	vpop	{d8}
   117e0:	e8bd8800 	pop	{fp, pc}
   117e4:	e1a00000 	nop			; (mov r0, r0)
   117e8:	00000000 	.word	0x00000000
   117ec:	40000000 	.word	0x40000000
   117f0:	cccccccd 	.word	0xcccccccd
   117f4:	4071f0cc 	.word	0x4071f0cc
   117f8:	66666666 	.word	0x66666666
   117fc:	40711266 	.word	0x40711266
   11800:	0001b9a8 	.word	0x0001b9a8
   11804:	0001b940 	.word	0x0001b940
   11808:	0001b9b0 	.word	0x0001b9b0
   1180c:	0001b9a0 	.word	0x0001b9a0
   11810:	0001b998 	.word	0x0001b998

00011814 <g_sigOri_calcKalmanOrientation_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigOri_calcKalmanOrientation_bl()
{
   11814:	e92d4800 	push	{fp, lr}
   11818:	e28db004 	add	fp, sp, #4
   1181c:	e24dd0e8 	sub	sp, sp, #232	; 0xe8
	double l_matrixTemp_rg9f64[M_SIGORI_SIZEOFARRAY_UI8][M_SIGORI_SIZEOFARRAY_UI8];
	double l_matrixTemp2_rg9f64[M_SIGORI_SIZEOFARRAY_UI8][M_SIGORI_SIZEOFARRAY_UI8];
	double l_matrixInnovation_rg9f64[M_SIGORI_SIZEOFARRAY_UI8][M_SIGORI_SIZEOFARRAY_UI8];

	//read new data from the IMU
	m_sigOri_getImuData_bl();
   11820:	ebfffe8b 	bl	11254 <m_sigOri_getImuData_bl>

	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesKalman_st=m_sigOri_calcAccMagAngle_st();
   11824:	ebfffe9c 	bl	1129c <m_sigOri_calcAccMagAngle_st>
   11828:	eeb05b40 	vmov.f64	d5, d0
   1182c:	eeb06b41 	vmov.f64	d6, d1
   11830:	eeb07b42 	vmov.f64	d7, d2
   11834:	e59f3314 	ldr	r3, [pc, #788]	; 11b50 <g_sigOri_calcKalmanOrientation_bl+0x33c>
   11838:	ed835b00 	vstr	d5, [r3]
   1183c:	ed836b02 	vstr	d6, [r3, #8]
   11840:	ed837b04 	vstr	d7, [r3, #16]
	m_sigOri_arrayGyroAnglesKalman_st=m_sigOri_calcGyroAnglePerStep_st();
   11844:	ebffff6f 	bl	11608 <m_sigOri_calcGyroAnglePerStep_st>
   11848:	eeb05b40 	vmov.f64	d5, d0
   1184c:	eeb06b41 	vmov.f64	d6, d1
   11850:	eeb07b42 	vmov.f64	d7, d2
   11854:	e59f32f8 	ldr	r3, [pc, #760]	; 11b54 <g_sigOri_calcKalmanOrientation_bl+0x340>
   11858:	ed835b00 	vstr	d5, [r3]
   1185c:	ed836b02 	vstr	d6, [r3, #8]
   11860:	ed837b04 	vstr	d7, [r3, #16]

	//set new calculated angles from the sensors in the matrices
	m_sigOri_matrixXnew_rg9f64[0][0]=m_sigOri_arrayAccMagAnglesKalman_st.roll_f64;
   11864:	e59f32e4 	ldr	r3, [pc, #740]	; 11b50 <g_sigOri_calcKalmanOrientation_bl+0x33c>
   11868:	e1c320d0 	ldrd	r2, [r3]
   1186c:	e59f12e4 	ldr	r1, [pc, #740]	; 11b58 <g_sigOri_calcKalmanOrientation_bl+0x344>
   11870:	e1c120f0 	strd	r2, [r1]
	m_sigOri_matrixXnew_rg9f64[1][1]=m_sigOri_arrayAccMagAnglesKalman_st.pitch_f64;
   11874:	e59f32d4 	ldr	r3, [pc, #724]	; 11b50 <g_sigOri_calcKalmanOrientation_bl+0x33c>
   11878:	e1c320d8 	ldrd	r2, [r3, #8]
   1187c:	e59f12d4 	ldr	r1, [pc, #724]	; 11b58 <g_sigOri_calcKalmanOrientation_bl+0x344>
   11880:	e1c122f0 	strd	r2, [r1, #32]
	m_sigOri_matrixXnew_rg9f64[2][2]=m_sigOri_arrayAccMagAnglesKalman_st.yaw_f64;
   11884:	e59f32c4 	ldr	r3, [pc, #708]	; 11b50 <g_sigOri_calcKalmanOrientation_bl+0x33c>
   11888:	e1c321d0 	ldrd	r2, [r3, #16]
   1188c:	e59f12c4 	ldr	r1, [pc, #708]	; 11b58 <g_sigOri_calcKalmanOrientation_bl+0x344>
   11890:	e1c124f0 	strd	r2, [r1, #64]	; 0x40

	m_sigOri_matrixUk_rg9f64[0][0]=m_sigOri_arrayGyroAnglesKalman_st.roll_f64;
   11894:	e59f32b8 	ldr	r3, [pc, #696]	; 11b54 <g_sigOri_calcKalmanOrientation_bl+0x340>
   11898:	e1c320d0 	ldrd	r2, [r3]
   1189c:	e59f12b8 	ldr	r1, [pc, #696]	; 11b5c <g_sigOri_calcKalmanOrientation_bl+0x348>
   118a0:	e1c120f0 	strd	r2, [r1]
	m_sigOri_matrixUk_rg9f64[1][1]=m_sigOri_arrayGyroAnglesKalman_st.pitch_f64;
   118a4:	e59f32a8 	ldr	r3, [pc, #680]	; 11b54 <g_sigOri_calcKalmanOrientation_bl+0x340>
   118a8:	e1c320d8 	ldrd	r2, [r3, #8]
   118ac:	e59f12a8 	ldr	r1, [pc, #680]	; 11b5c <g_sigOri_calcKalmanOrientation_bl+0x348>
   118b0:	e1c122f0 	strd	r2, [r1, #32]
	m_sigOri_matrixUk_rg9f64[2][2]=m_sigOri_arrayGyroAnglesKalman_st.yaw_f64;
   118b4:	e59f3298 	ldr	r3, [pc, #664]	; 11b54 <g_sigOri_calcKalmanOrientation_bl+0x340>
   118b8:	e1c321d0 	ldrd	r2, [r3, #16]
   118bc:	e59f1298 	ldr	r1, [pc, #664]	; 11b5c <g_sigOri_calcKalmanOrientation_bl+0x348>
   118c0:	e1c124f0 	strd	r2, [r1, #64]	; 0x40

//PREDICTION
	//state estimation (prediction)
	g_sigMath_matrixAddition_bl((double*) l_matrixTemp_rg9f64,
   118c4:	e24b304c 	sub	r3, fp, #76	; 0x4c
   118c8:	e59f228c 	ldr	r2, [pc, #652]	; 11b5c <g_sigOri_calcKalmanOrientation_bl+0x348>
   118cc:	e58d2000 	str	r2, [sp]
   118d0:	e3a02003 	mov	r2, #3
   118d4:	e58d2004 	str	r2, [sp, #4]
   118d8:	e3a02003 	mov	r2, #3
   118dc:	e58d2008 	str	r2, [sp, #8]
   118e0:	e1a00003 	mov	r0, r3
   118e4:	e59f1274 	ldr	r1, [pc, #628]	; 11b60 <g_sigOri_calcKalmanOrientation_bl+0x34c>
   118e8:	e3a02003 	mov	r2, #3
   118ec:	e3a03003 	mov	r3, #3
   118f0:	ebfff9e2 	bl	10080 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixXk_rg9f64, 3,3, 
		(double*) m_sigOri_matrixUk_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixXk_rg9f64,3,3,
   118f4:	e24b304c 	sub	r3, fp, #76	; 0x4c
   118f8:	e3a02003 	mov	r2, #3
   118fc:	e58d2000 	str	r2, [sp]
   11900:	e3a02003 	mov	r2, #3
   11904:	e58d2004 	str	r2, [sp, #4]
   11908:	e59f0250 	ldr	r0, [pc, #592]	; 11b60 <g_sigOri_calcKalmanOrientation_bl+0x34c>
   1190c:	e3a01003 	mov	r1, #3
   11910:	e3a02003 	mov	r2, #3
   11914:	ebfffcb2 	bl	10be4 <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp_rg9f64,3,3);


	//covariance estimation (prediction)
	g_sigMath_matrixAddition_bl((double*) l_matrixTemp_rg9f64,
   11918:	e24b304c 	sub	r3, fp, #76	; 0x4c
   1191c:	e59f2240 	ldr	r2, [pc, #576]	; 11b64 <g_sigOri_calcKalmanOrientation_bl+0x350>
   11920:	e58d2000 	str	r2, [sp]
   11924:	e3a02003 	mov	r2, #3
   11928:	e58d2004 	str	r2, [sp, #4]
   1192c:	e3a02003 	mov	r2, #3
   11930:	e58d2008 	str	r2, [sp, #8]
   11934:	e1a00003 	mov	r0, r3
   11938:	e59f1228 	ldr	r1, [pc, #552]	; 11b68 <g_sigOri_calcKalmanOrientation_bl+0x354>
   1193c:	e3a02003 	mov	r2, #3
   11940:	e3a03003 	mov	r3, #3
   11944:	ebfff9cd 	bl	10080 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixPk_rg9f64, 3,3, 
		(double*) m_sigOri_matrixQ_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixPk_rg9f64,3,3,
   11948:	e24b304c 	sub	r3, fp, #76	; 0x4c
   1194c:	e3a02003 	mov	r2, #3
   11950:	e58d2000 	str	r2, [sp]
   11954:	e3a02003 	mov	r2, #3
   11958:	e58d2004 	str	r2, [sp, #4]
   1195c:	e59f0204 	ldr	r0, [pc, #516]	; 11b68 <g_sigOri_calcKalmanOrientation_bl+0x354>
   11960:	e3a01003 	mov	r1, #3
   11964:	e3a02003 	mov	r2, #3
   11968:	ebfffc9d 	bl	10be4 <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp_rg9f64,3,3);

//UPDATE
	//Innovation (update)
	g_sigMath_matrixSubtraktion_bl((double*) l_matrixInnovation_rg9f64,
   1196c:	e24b30dc 	sub	r3, fp, #220	; 0xdc
   11970:	e59f21e8 	ldr	r2, [pc, #488]	; 11b60 <g_sigOri_calcKalmanOrientation_bl+0x34c>
   11974:	e58d2000 	str	r2, [sp]
   11978:	e3a02003 	mov	r2, #3
   1197c:	e58d2004 	str	r2, [sp, #4]
   11980:	e3a02003 	mov	r2, #3
   11984:	e58d2008 	str	r2, [sp, #8]
   11988:	e1a00003 	mov	r0, r3
   1198c:	e59f11c4 	ldr	r1, [pc, #452]	; 11b58 <g_sigOri_calcKalmanOrientation_bl+0x344>
   11990:	e3a02003 	mov	r2, #3
   11994:	e3a03003 	mov	r3, #3
   11998:	ebfffa03 	bl	101ac <g_sigMath_matrixSubtraktion_bl>
		(double*) m_sigOri_matrixXnew_rg9f64,3,3, 
		(double*) m_sigOri_matrixXk_rg9f64,3,3);

	//Innovation covariance (update)
	g_sigMath_matrixAddition_bl((double*) m_sigOri_matrixS_rg9f64,
   1199c:	e59f31c8 	ldr	r3, [pc, #456]	; 11b6c <g_sigOri_calcKalmanOrientation_bl+0x358>
   119a0:	e58d3000 	str	r3, [sp]
   119a4:	e3a03003 	mov	r3, #3
   119a8:	e58d3004 	str	r3, [sp, #4]
   119ac:	e3a03003 	mov	r3, #3
   119b0:	e58d3008 	str	r3, [sp, #8]
   119b4:	e59f01b4 	ldr	r0, [pc, #436]	; 11b70 <g_sigOri_calcKalmanOrientation_bl+0x35c>
   119b8:	e59f11a8 	ldr	r1, [pc, #424]	; 11b68 <g_sigOri_calcKalmanOrientation_bl+0x354>
   119bc:	e3a02003 	mov	r2, #3
   119c0:	e3a03003 	mov	r3, #3
   119c4:	ebfff9ad 	bl	10080 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixPk_rg9f64, 3,3, 
		(double*) m_sigOri_matrixR_rg9f64,3,3);

	//Kalman Gain calculation (update)
	g_sigMath_matrixInverse_bl((double*) l_matrixTemp_rg9f64,
   119c8:	e24b304c 	sub	r3, fp, #76	; 0x4c
   119cc:	e1a00003 	mov	r0, r3
   119d0:	e59f1198 	ldr	r1, [pc, #408]	; 11b70 <g_sigOri_calcKalmanOrientation_bl+0x35c>
   119d4:	e3a02003 	mov	r2, #3
   119d8:	e3a03003 	mov	r3, #3
   119dc:	ebfffa72 	bl	103ac <g_sigMath_matrixInverse_bl>
		(double*) m_sigOri_matrixS_rg9f64,3,3);
	g_sigMath_matrixMultiplikation_bl(
   119e0:	e24b304c 	sub	r3, fp, #76	; 0x4c
   119e4:	e58d3000 	str	r3, [sp]
   119e8:	e3a03003 	mov	r3, #3
   119ec:	e58d3004 	str	r3, [sp, #4]
   119f0:	e3a03003 	mov	r3, #3
   119f4:	e58d3008 	str	r3, [sp, #8]
   119f8:	e59f0174 	ldr	r0, [pc, #372]	; 11b74 <g_sigOri_calcKalmanOrientation_bl+0x360>
   119fc:	e59f1164 	ldr	r1, [pc, #356]	; 11b68 <g_sigOri_calcKalmanOrientation_bl+0x354>
   11a00:	e3a02003 	mov	r2, #3
   11a04:	e3a03003 	mov	r3, #3
   11a08:	ebfff93f 	bl	ff0c <g_sigMath_matrixMultiplikation_bl>
		(double*) m_sigOri_matrixK_rg9f64, 
		(double*) m_sigOri_matrixPk_rg9f64,3,3,
		(double*) l_matrixTemp_rg9f64,3,3);

	//State estimation (update)
	g_sigMath_matrixMultiplikation_bl(
   11a0c:	e24b304c 	sub	r3, fp, #76	; 0x4c
   11a10:	e24b20dc 	sub	r2, fp, #220	; 0xdc
   11a14:	e58d2000 	str	r2, [sp]
   11a18:	e3a02003 	mov	r2, #3
   11a1c:	e58d2004 	str	r2, [sp, #4]
   11a20:	e3a02003 	mov	r2, #3
   11a24:	e58d2008 	str	r2, [sp, #8]
   11a28:	e1a00003 	mov	r0, r3
   11a2c:	e59f1140 	ldr	r1, [pc, #320]	; 11b74 <g_sigOri_calcKalmanOrientation_bl+0x360>
   11a30:	e3a02003 	mov	r2, #3
   11a34:	e3a03003 	mov	r3, #3
   11a38:	ebfff933 	bl	ff0c <g_sigMath_matrixMultiplikation_bl>
		(double*) l_matrixTemp_rg9f64, 
		(double*) m_sigOri_matrixK_rg9f64,3,3,
		(double*) l_matrixInnovation_rg9f64,3,3);
	g_sigMath_matrixAddition_bl((double*) l_matrixTemp2_rg9f64,
   11a3c:	e24b3094 	sub	r3, fp, #148	; 0x94
   11a40:	e24b204c 	sub	r2, fp, #76	; 0x4c
   11a44:	e58d2000 	str	r2, [sp]
   11a48:	e3a02003 	mov	r2, #3
   11a4c:	e58d2004 	str	r2, [sp, #4]
   11a50:	e3a02003 	mov	r2, #3
   11a54:	e58d2008 	str	r2, [sp, #8]
   11a58:	e1a00003 	mov	r0, r3
   11a5c:	e59f10fc 	ldr	r1, [pc, #252]	; 11b60 <g_sigOri_calcKalmanOrientation_bl+0x34c>
   11a60:	e3a02003 	mov	r2, #3
   11a64:	e3a03003 	mov	r3, #3
   11a68:	ebfff984 	bl	10080 <g_sigMath_matrixAddition_bl>
		(double*) m_sigOri_matrixXk_rg9f64, 3,3, 
		(double*) l_matrixTemp_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixXk_rg9f64,3,3,
   11a6c:	e24b3094 	sub	r3, fp, #148	; 0x94
   11a70:	e3a02003 	mov	r2, #3
   11a74:	e58d2000 	str	r2, [sp]
   11a78:	e3a02003 	mov	r2, #3
   11a7c:	e58d2004 	str	r2, [sp, #4]
   11a80:	e59f00d8 	ldr	r0, [pc, #216]	; 11b60 <g_sigOri_calcKalmanOrientation_bl+0x34c>
   11a84:	e3a01003 	mov	r1, #3
   11a88:	e3a02003 	mov	r2, #3
   11a8c:	ebfffc54 	bl	10be4 <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp2_rg9f64,3,3);

	//Covariance estimation (update)
	g_sigMath_matrixSubtraktion_bl((double*) l_matrixTemp_rg9f64,
   11a90:	e24b304c 	sub	r3, fp, #76	; 0x4c
   11a94:	e59f20d8 	ldr	r2, [pc, #216]	; 11b74 <g_sigOri_calcKalmanOrientation_bl+0x360>
   11a98:	e58d2000 	str	r2, [sp]
   11a9c:	e3a02003 	mov	r2, #3
   11aa0:	e58d2004 	str	r2, [sp, #4]
   11aa4:	e3a02003 	mov	r2, #3
   11aa8:	e58d2008 	str	r2, [sp, #8]
   11aac:	e1a00003 	mov	r0, r3
   11ab0:	e59f10c0 	ldr	r1, [pc, #192]	; 11b78 <g_sigOri_calcKalmanOrientation_bl+0x364>
   11ab4:	e3a02003 	mov	r2, #3
   11ab8:	e3a03003 	mov	r3, #3
   11abc:	ebfff9ba 	bl	101ac <g_sigMath_matrixSubtraktion_bl>
		(double*) m_sigOri_matrixI_rg9f64,3,3, 
		(double*) m_sigOri_matrixK_rg9f64,3,3);
	g_sigMath_matrixMultiplikation_bl(
   11ac0:	e24b2094 	sub	r2, fp, #148	; 0x94
   11ac4:	e24b304c 	sub	r3, fp, #76	; 0x4c
   11ac8:	e59f1098 	ldr	r1, [pc, #152]	; 11b68 <g_sigOri_calcKalmanOrientation_bl+0x354>
   11acc:	e58d1000 	str	r1, [sp]
   11ad0:	e3a01003 	mov	r1, #3
   11ad4:	e58d1004 	str	r1, [sp, #4]
   11ad8:	e3a01003 	mov	r1, #3
   11adc:	e58d1008 	str	r1, [sp, #8]
   11ae0:	e1a00002 	mov	r0, r2
   11ae4:	e1a01003 	mov	r1, r3
   11ae8:	e3a02003 	mov	r2, #3
   11aec:	e3a03003 	mov	r3, #3
   11af0:	ebfff905 	bl	ff0c <g_sigMath_matrixMultiplikation_bl>
		(double*) l_matrixTemp2_rg9f64, 
		(double*) l_matrixTemp_rg9f64,3,3,
		(double*) m_sigOri_matrixPk_rg9f64,3,3);
	g_sigMath_matrixAssignment_bl((double*) m_sigOri_matrixPk_rg9f64,3,3,
   11af4:	e24b3094 	sub	r3, fp, #148	; 0x94
   11af8:	e3a02003 	mov	r2, #3
   11afc:	e58d2000 	str	r2, [sp]
   11b00:	e3a02003 	mov	r2, #3
   11b04:	e58d2004 	str	r2, [sp, #4]
   11b08:	e59f0058 	ldr	r0, [pc, #88]	; 11b68 <g_sigOri_calcKalmanOrientation_bl+0x354>
   11b0c:	e3a01003 	mov	r1, #3
   11b10:	e3a02003 	mov	r2, #3
   11b14:	ebfffc32 	bl	10be4 <g_sigMath_matrixAssignment_bl>
		(double*) l_matrixTemp2_rg9f64,3,3);

//set calculate within this module global
	m_sigOri_arrayOutputAnglesKalman_st.roll_f64=m_sigOri_matrixXk_rg9f64[0][0];
   11b18:	e59f3040 	ldr	r3, [pc, #64]	; 11b60 <g_sigOri_calcKalmanOrientation_bl+0x34c>
   11b1c:	e1c320d0 	ldrd	r2, [r3]
   11b20:	e59f1054 	ldr	r1, [pc, #84]	; 11b7c <g_sigOri_calcKalmanOrientation_bl+0x368>
   11b24:	e1c120f0 	strd	r2, [r1]
	m_sigOri_arrayOutputAnglesKalman_st.pitch_f64=m_sigOri_matrixXk_rg9f64[1][1];
   11b28:	e59f3030 	ldr	r3, [pc, #48]	; 11b60 <g_sigOri_calcKalmanOrientation_bl+0x34c>
   11b2c:	e1c322d0 	ldrd	r2, [r3, #32]
   11b30:	e59f1044 	ldr	r1, [pc, #68]	; 11b7c <g_sigOri_calcKalmanOrientation_bl+0x368>
   11b34:	e1c120f8 	strd	r2, [r1, #8]
	m_sigOri_arrayOutputAnglesKalman_st.yaw_f64=m_sigOri_matrixXk_rg9f64[2][2];
   11b38:	e59f3020 	ldr	r3, [pc, #32]	; 11b60 <g_sigOri_calcKalmanOrientation_bl+0x34c>
   11b3c:	e1c324d0 	ldrd	r2, [r3, #64]	; 0x40
   11b40:	e59f1034 	ldr	r1, [pc, #52]	; 11b7c <g_sigOri_calcKalmanOrientation_bl+0x368>
   11b44:	e1c121f0 	strd	r2, [r1, #16]
}
   11b48:	e24bd004 	sub	sp, fp, #4
   11b4c:	e8bd8800 	pop	{fp, pc}
   11b50:	0001b9f8 	.word	0x0001b9f8
   11b54:	0001ba10 	.word	0x0001ba10
   11b58:	0001bad0 	.word	0x0001bad0
   11b5c:	0001bb18 	.word	0x0001bb18
   11b60:	0001ba88 	.word	0x0001ba88
   11b64:	0001bc38 	.word	0x0001bc38
   11b68:	0001bba8 	.word	0x0001bba8
   11b6c:	0001bbf0 	.word	0x0001bbf0
   11b70:	0001bc80 	.word	0x0001bc80
   11b74:	0001bcc8 	.word	0x0001bcc8
   11b78:	0001bb60 	.word	0x0001bb60
   11b7c:	0001ba28 	.word	0x0001ba28

00011b80 <g_sigOri_calcComplementaryOrientation_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigOri_calcComplementaryOrientation_bl()
{
   11b80:	e92d4800 	push	{fp, lr}
   11b84:	e28db004 	add	fp, sp, #4
	//read new data from the IMU
	m_sigOri_getImuData_bl();
   11b88:	ebfffdb1 	bl	11254 <m_sigOri_getImuData_bl>
	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesComplementary_st=m_sigOri_calcAccMagAngle_st();
   11b8c:	ebfffdc2 	bl	1129c <m_sigOri_calcAccMagAngle_st>
   11b90:	eeb05b40 	vmov.f64	d5, d0
   11b94:	eeb06b41 	vmov.f64	d6, d1
   11b98:	eeb07b42 	vmov.f64	d7, d2
   11b9c:	e59f30e4 	ldr	r3, [pc, #228]	; 11c88 <g_sigOri_calcComplementaryOrientation_bl+0x108>
   11ba0:	ed835b00 	vstr	d5, [r3]
   11ba4:	ed836b02 	vstr	d6, [r3, #8]
   11ba8:	ed837b04 	vstr	d7, [r3, #16]
	m_sigOri_arrayGyroAnglesComplementary_st=m_sigOri_calcGyroAnglePerStep_st();
   11bac:	ebfffe95 	bl	11608 <m_sigOri_calcGyroAnglePerStep_st>
   11bb0:	eeb05b40 	vmov.f64	d5, d0
   11bb4:	eeb06b41 	vmov.f64	d6, d1
   11bb8:	eeb07b42 	vmov.f64	d7, d2
   11bbc:	e59f30c8 	ldr	r3, [pc, #200]	; 11c8c <g_sigOri_calcComplementaryOrientation_bl+0x10c>
   11bc0:	ed835b00 	vstr	d5, [r3]
   11bc4:	ed836b02 	vstr	d6, [r3, #8]
   11bc8:	ed837b04 	vstr	d7, [r3, #16]

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
   11bcc:	e59f30bc 	ldr	r3, [pc, #188]	; 11c90 <g_sigOri_calcComplementaryOrientation_bl+0x110>
   11bd0:	ed936b02 	vldr	d6, [r3, #8]
   11bd4:	e59f30b0 	ldr	r3, [pc, #176]	; 11c8c <g_sigOri_calcComplementaryOrientation_bl+0x10c>
   11bd8:	ed937b02 	vldr	d7, [r3, #8]
   11bdc:	ee366b07 	vadd.f64	d6, d6, d7
   11be0:	ed9f7b24 	vldr	d7, [pc, #144]	; 11c78 <g_sigOri_calcComplementaryOrientation_bl+0xf8>
   11be4:	ee266b07 	vmul.f64	d6, d6, d7
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;
   11be8:	e59f3098 	ldr	r3, [pc, #152]	; 11c88 <g_sigOri_calcComplementaryOrientation_bl+0x108>
   11bec:	ed935b02 	vldr	d5, [r3, #8]
   11bf0:	ed9f7b22 	vldr	d7, [pc, #136]	; 11c80 <g_sigOri_calcComplementaryOrientation_bl+0x100>
   11bf4:	ee257b07 	vmul.f64	d7, d5, d7
	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesComplementary_st=m_sigOri_calcAccMagAngle_st();
	m_sigOri_arrayGyroAnglesComplementary_st=m_sigOri_calcGyroAnglePerStep_st();

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
   11bf8:	ee367b07 	vadd.f64	d7, d6, d7
	m_sigOri_getImuData_bl();
	//calculate angle from Acc/Mag and Gyro
	m_sigOri_arrayAccMagAnglesComplementary_st=m_sigOri_calcAccMagAngle_st();
	m_sigOri_arrayGyroAnglesComplementary_st=m_sigOri_calcGyroAnglePerStep_st();

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
   11bfc:	e59f308c 	ldr	r3, [pc, #140]	; 11c90 <g_sigOri_calcComplementaryOrientation_bl+0x110>
   11c00:	ed837b02 	vstr	d7, [r3, #8]
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
   11c04:	e59f3084 	ldr	r3, [pc, #132]	; 11c90 <g_sigOri_calcComplementaryOrientation_bl+0x110>
   11c08:	ed936b00 	vldr	d6, [r3]
   11c0c:	e59f3078 	ldr	r3, [pc, #120]	; 11c8c <g_sigOri_calcComplementaryOrientation_bl+0x10c>
   11c10:	ed937b00 	vldr	d7, [r3]
   11c14:	ee366b07 	vadd.f64	d6, d6, d7
   11c18:	ed9f7b16 	vldr	d7, [pc, #88]	; 11c78 <g_sigOri_calcComplementaryOrientation_bl+0xf8>
   11c1c:	ee266b07 	vmul.f64	d6, d6, d7
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;
   11c20:	e59f3060 	ldr	r3, [pc, #96]	; 11c88 <g_sigOri_calcComplementaryOrientation_bl+0x108>
   11c24:	ed935b00 	vldr	d5, [r3]
   11c28:	ed9f7b14 	vldr	d7, [pc, #80]	; 11c80 <g_sigOri_calcComplementaryOrientation_bl+0x100>
   11c2c:	ee257b07 	vmul.f64	d7, d5, d7
	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
   11c30:	ee367b07 	vadd.f64	d7, d6, d7

	m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.pitch_f64+m_sigOri_arrayGyroAnglesComplementary_st.pitch_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.pitch_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
   11c34:	e59f3054 	ldr	r3, [pc, #84]	; 11c90 <g_sigOri_calcComplementaryOrientation_bl+0x110>
   11c38:	ed837b00 	vstr	d7, [r3]
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64=
		M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64+m_sigOri_arrayGyroAnglesComplementary_st.yaw_f64) +
   11c3c:	e59f304c 	ldr	r3, [pc, #76]	; 11c90 <g_sigOri_calcComplementaryOrientation_bl+0x110>
   11c40:	ed936b04 	vldr	d6, [r3, #16]
   11c44:	e59f3040 	ldr	r3, [pc, #64]	; 11c8c <g_sigOri_calcComplementaryOrientation_bl+0x10c>
   11c48:	ed937b04 	vldr	d7, [r3, #16]
   11c4c:	ee366b07 	vadd.f64	d6, d6, d7
   11c50:	ed9f7b08 	vldr	d7, [pc, #32]	; 11c78 <g_sigOri_calcComplementaryOrientation_bl+0xf8>
   11c54:	ee266b07 	vmul.f64	d6, d6, d7
		(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.yaw_f64;
   11c58:	e59f3028 	ldr	r3, [pc, #40]	; 11c88 <g_sigOri_calcComplementaryOrientation_bl+0x108>
   11c5c:	ed935b04 	vldr	d5, [r3, #16]
   11c60:	ed9f7b06 	vldr	d7, [pc, #24]	; 11c80 <g_sigOri_calcComplementaryOrientation_bl+0x100>
   11c64:	ee257b07 	vmul.f64	d7, d5, d7
	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64=
		M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64+m_sigOri_arrayGyroAnglesComplementary_st.yaw_f64) +
   11c68:	ee367b07 	vadd.f64	d7, d6, d7

	m_sigOri_arrayOutputAnglesComplementary_st.roll_f64=
			M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.roll_f64+m_sigOri_arrayGyroAnglesComplementary_st.roll_f64) +
			(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.roll_f64;

	m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64=
   11c6c:	e59f301c 	ldr	r3, [pc, #28]	; 11c90 <g_sigOri_calcComplementaryOrientation_bl+0x110>
   11c70:	ed837b04 	vstr	d7, [r3, #16]
		M_COMP_FILTER_FACTOR_F64*(m_sigOri_arrayOutputAnglesComplementary_st.yaw_f64+m_sigOri_arrayGyroAnglesComplementary_st.yaw_f64) +
		(1-M_COMP_FILTER_FACTOR_F64)*m_sigOri_arrayAccMagAnglesComplementary_st.yaw_f64;
}
   11c74:	e8bd8800 	pop	{fp, pc}
   11c78:	f9db22d1 	.word	0xf9db22d1
   11c7c:	3fec6a7e 	.word	0x3fec6a7e
   11c80:	3126e978 	.word	0x3126e978
   11c84:	3fbcac08 	.word	0x3fbcac08
   11c88:	0001ba40 	.word	0x0001ba40
   11c8c:	0001ba58 	.word	0x0001ba58
   11c90:	0001ba70 	.word	0x0001ba70

00011c94 <g_sigOri_getAnglesAccMagCalc_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles g_sigOri_getAnglesAccMagCalc_bl()
{
   11c94:	e92d4830 	push	{r4, r5, fp, lr}
   11c98:	e28db00c 	add	fp, sp, #12
   11c9c:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_sigOri_arrayOutputAnglesAccMagCalc_st;
   11ca0:	e59f3040 	ldr	r3, [pc, #64]	; 11ce8 <g_sigOri_getAnglesAccMagCalc_bl+0x54>
   11ca4:	e24bc024 	sub	ip, fp, #36	; 0x24
   11ca8:	e1a0e003 	mov	lr, r3
   11cac:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   11cb0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   11cb4:	e89e0003 	ldm	lr, {r0, r1}
   11cb8:	e88c0003 	stm	ip, {r0, r1}
   11cbc:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
   11cc0:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
   11cc4:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
   11cc8:	ec454b15 	vmov	d5, r4, r5
   11ccc:	ec410b16 	vmov	d6, r0, r1
   11cd0:	ec432b17 	vmov	d7, r2, r3
}
   11cd4:	eeb00b45 	vmov.f64	d0, d5
   11cd8:	eeb01b46 	vmov.f64	d1, d6
   11cdc:	eeb02b47 	vmov.f64	d2, d7
   11ce0:	e24bd00c 	sub	sp, fp, #12
   11ce4:	e8bd8830 	pop	{r4, r5, fp, pc}
   11ce8:	0001b9e0 	.word	0x0001b9e0

00011cec <g_sigOri_getAnglesGyroPerStep_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles g_sigOri_getAnglesGyroPerStep_bl()
{
   11cec:	e92d4830 	push	{r4, r5, fp, lr}
   11cf0:	e28db00c 	add	fp, sp, #12
   11cf4:	e24dd030 	sub	sp, sp, #48	; 0x30
	return m_sigOri_arrayOutputAnglesGyroPerStep_st;
   11cf8:	e59f3040 	ldr	r3, [pc, #64]	; 11d40 <g_sigOri_getAnglesGyroPerStep_bl+0x54>
   11cfc:	e24bc024 	sub	ip, fp, #36	; 0x24
   11d00:	e1a0e003 	mov	lr, r3
   11d04:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   11d08:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   11d0c:	e89e0003 	ldm	lr, {r0, r1}
   11d10:	e88c0003 	stm	ip, {r0, r1}
   11d14:	e14b42d4 	ldrd	r4, [fp, #-36]	; 0xffffffdc
   11d18:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
   11d1c:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
   11d20:	ec454b15 	vmov	d5, r4, r5
   11d24:	ec410b16 	vmov	d6, r0, r1
   11d28:	ec432b17 	vmov	d7, r2, r3
}
   11d2c:	eeb00b45 	vmov.f64	d0, d5
   11d30:	eeb01b46 	vmov.f64	d1, d6
   11d34:	eeb02b47 	vmov.f64	d2, d7
   11d38:	e24bd00c 	sub	sp, fp, #12
   11d3c:	e8bd8830 	pop	{r4, r5, fp, pc}
   11d40:	0001b9c8 	.word	0x0001b9c8
   11d44:	e1a00000 	nop			; (mov r0, r0)

00011d48 <g_sigFil_getImuValuesUnfiltered_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
halImu_orientationValues g_sigFil_getImuValuesUnfiltered_st()
{
   11d48:	e92d4800 	push	{fp, lr}
   11d4c:	e28db004 	add	fp, sp, #4
   11d50:	e24dd008 	sub	sp, sp, #8
   11d54:	e50b0008 	str	r0, [fp, #-8]
	return m_sigFil_imuValues_st;
   11d58:	e51b2008 	ldr	r2, [fp, #-8]
   11d5c:	e59f3024 	ldr	r3, [pc, #36]	; 11d88 <g_sigFil_getImuValuesUnfiltered_st+0x40>
   11d60:	e1a01002 	mov	r1, r2
   11d64:	e1a02003 	mov	r2, r3
   11d68:	e3a03058 	mov	r3, #88	; 0x58
   11d6c:	e1a00001 	mov	r0, r1
   11d70:	e1a01002 	mov	r1, r2
   11d74:	e1a02003 	mov	r2, r3
   11d78:	ebffdbc1 	bl	8c84 <_init+0x170>
}
   11d7c:	e51b0008 	ldr	r0, [fp, #-8]
   11d80:	e24bd004 	sub	sp, fp, #4
   11d84:	e8bd8800 	pop	{fp, pc}
   11d88:	0001bd18 	.word	0x0001bd18

00011d8c <m_sigFil_offsetCorrectionGyro_st>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
sigOri_orientationAngles m_sigFil_offsetCorrectionGyro_st()
{
   11d8c:	e92d4830 	push	{r4, r5, fp, lr}
   11d90:	e28db00c 	add	fp, sp, #12
   11d94:	e24dd0a8 	sub	sp, sp, #168	; 0xa8
	int i=0;
   11d98:	e3a03000 	mov	r3, #0
   11d9c:	e50b3010 	str	r3, [fp, #-16]
	sigOri_orientationAngles l_measuredGyroValue_st={0,0,0};
   11da0:	e3a02000 	mov	r2, #0
   11da4:	e3a03000 	mov	r3, #0
   11da8:	e14b24f4 	strd	r2, [fp, #-68]	; 0xffffffbc
   11dac:	e3a02000 	mov	r2, #0
   11db0:	e3a03000 	mov	r3, #0
   11db4:	e14b23fc 	strd	r2, [fp, #-60]	; 0xffffffc4
   11db8:	e3a02000 	mov	r2, #0
   11dbc:	e3a03000 	mov	r3, #0
   11dc0:	e14b23f4 	strd	r2, [fp, #-52]	; 0xffffffcc
	halImu_orientationValues l_sigFil_imuValues_st;

	for(i=0;i<M_NR_OF_VALUES_FOR_OFFSET_UI8;i++)
   11dc4:	e3a03000 	mov	r3, #0
   11dc8:	e50b3010 	str	r3, [fp, #-16]
   11dcc:	ea000012 	b	11e1c <m_sigFil_offsetCorrectionGyro_st+0x90>
	{
		g_halImu_triggerImuReading_bl();
   11dd0:	ebfff1b5 	bl	e4ac <g_halImu_triggerImuReading_bl>
		l_sigFil_imuValues_st = g_halImu_getImuValues_str();
   11dd4:	e24b309c 	sub	r3, fp, #156	; 0x9c
   11dd8:	e1a00003 	mov	r0, r3
   11ddc:	ebfff134 	bl	e2b4 <g_halImu_getImuValues_str>

		l_measuredGyroValue_st.roll_f64+=l_sigFil_imuValues_st.gyro.roll_f64;
   11de0:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
   11de4:	ed1b7b1b 	vldr	d7, [fp, #-108]	; 0xffffff94
   11de8:	ee367b07 	vadd.f64	d7, d6, d7
   11dec:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc
		l_measuredGyroValue_st.pitch_f64+=l_sigFil_imuValues_st.gyro.pitch_f64;
   11df0:	ed1b6b0f 	vldr	d6, [fp, #-60]	; 0xffffffc4
   11df4:	ed1b7b19 	vldr	d7, [fp, #-100]	; 0xffffff9c
   11df8:	ee367b07 	vadd.f64	d7, d6, d7
   11dfc:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
		l_measuredGyroValue_st.yaw_f64+=l_sigFil_imuValues_st.gyro.yaw_f64;
   11e00:	ed1b6b0d 	vldr	d6, [fp, #-52]	; 0xffffffcc
   11e04:	ed1b7b17 	vldr	d7, [fp, #-92]	; 0xffffffa4
   11e08:	ee367b07 	vadd.f64	d7, d6, d7
   11e0c:	ed0b7b0d 	vstr	d7, [fp, #-52]	; 0xffffffcc
{
	int i=0;
	sigOri_orientationAngles l_measuredGyroValue_st={0,0,0};
	halImu_orientationValues l_sigFil_imuValues_st;

	for(i=0;i<M_NR_OF_VALUES_FOR_OFFSET_UI8;i++)
   11e10:	e51b3010 	ldr	r3, [fp, #-16]
   11e14:	e2833001 	add	r3, r3, #1
   11e18:	e50b3010 	str	r3, [fp, #-16]
   11e1c:	e51b3010 	ldr	r3, [fp, #-16]
   11e20:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   11e24:	baffffe9 	blt	11dd0 <m_sigFil_offsetCorrectionGyro_st+0x44>
		l_measuredGyroValue_st.roll_f64+=l_sigFil_imuValues_st.gyro.roll_f64;
		l_measuredGyroValue_st.pitch_f64+=l_sigFil_imuValues_st.gyro.pitch_f64;
		l_measuredGyroValue_st.yaw_f64+=l_sigFil_imuValues_st.gyro.yaw_f64;
	}

	l_measuredGyroValue_st.roll_f64=l_measuredGyroValue_st.roll_f64/M_NR_OF_VALUES_FOR_OFFSET_UI8;
   11e28:	ed1b6b11 	vldr	d6, [fp, #-68]	; 0xffffffbc
   11e2c:	ed9f7b1b 	vldr	d7, [pc, #108]	; 11ea0 <m_sigFil_offsetCorrectionGyro_st+0x114>
   11e30:	ee867b07 	vdiv.f64	d7, d6, d7
   11e34:	ed0b7b11 	vstr	d7, [fp, #-68]	; 0xffffffbc
	l_measuredGyroValue_st.pitch_f64=l_measuredGyroValue_st.pitch_f64/M_NR_OF_VALUES_FOR_OFFSET_UI8;
   11e38:	ed1b6b0f 	vldr	d6, [fp, #-60]	; 0xffffffc4
   11e3c:	ed9f7b17 	vldr	d7, [pc, #92]	; 11ea0 <m_sigFil_offsetCorrectionGyro_st+0x114>
   11e40:	ee867b07 	vdiv.f64	d7, d6, d7
   11e44:	ed0b7b0f 	vstr	d7, [fp, #-60]	; 0xffffffc4
	l_measuredGyroValue_st.yaw_f64=l_measuredGyroValue_st.yaw_f64/M_NR_OF_VALUES_FOR_OFFSET_UI8;
   11e48:	ed1b6b0d 	vldr	d6, [fp, #-52]	; 0xffffffcc
   11e4c:	ed9f7b13 	vldr	d7, [pc, #76]	; 11ea0 <m_sigFil_offsetCorrectionGyro_st+0x114>
   11e50:	ee867b07 	vdiv.f64	d7, d6, d7
   11e54:	ed0b7b0d 	vstr	d7, [fp, #-52]	; 0xffffffcc

	return l_measuredGyroValue_st;
   11e58:	e24bc02c 	sub	ip, fp, #44	; 0x2c
   11e5c:	e24be044 	sub	lr, fp, #68	; 0x44
   11e60:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   11e64:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   11e68:	e89e0003 	ldm	lr, {r0, r1}
   11e6c:	e88c0003 	stm	ip, {r0, r1}
   11e70:	e14b42dc 	ldrd	r4, [fp, #-44]	; 0xffffffd4
   11e74:	e14b02d4 	ldrd	r0, [fp, #-36]	; 0xffffffdc
   11e78:	e14b21dc 	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11e7c:	ec454b15 	vmov	d5, r4, r5
   11e80:	ec410b16 	vmov	d6, r0, r1
   11e84:	ec432b17 	vmov	d7, r2, r3
}
   11e88:	eeb00b45 	vmov.f64	d0, d5
   11e8c:	eeb01b46 	vmov.f64	d1, d6
   11e90:	eeb02b47 	vmov.f64	d2, d7
   11e94:	e24bd00c 	sub	sp, fp, #12
   11e98:	e8bd8830 	pop	{r4, r5, fp, pc}
   11e9c:	e1a00000 	nop			; (mov r0, r0)
   11ea0:	00000000 	.word	0x00000000
   11ea4:	408f4000 	.word	0x408f4000

00011ea8 <g_SigFil_initImuSensors_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
unsigned int g_SigFil_initImuSensors_bl()
{
   11ea8:	e92d4800 	push	{fp, lr}
   11eac:	e28db004 	add	fp, sp, #4
   11eb0:	e24dd008 	sub	sp, sp, #8
	unsigned int l_initState_bl;

	l_initState_bl = g_halImu_initImuSensors_bl();
   11eb4:	ebfff10f 	bl	e2f8 <g_halImu_initImuSensors_bl>
   11eb8:	e50b0008 	str	r0, [fp, #-8]
	m_offsetGyro_st=m_sigFil_offsetCorrectionGyro_st();
   11ebc:	ebffffb2 	bl	11d8c <m_sigFil_offsetCorrectionGyro_st>
   11ec0:	eeb05b40 	vmov.f64	d5, d0
   11ec4:	eeb06b41 	vmov.f64	d6, d1
   11ec8:	eeb07b42 	vmov.f64	d7, d2
   11ecc:	e59f3018 	ldr	r3, [pc, #24]	; 11eec <g_SigFil_initImuSensors_bl+0x44>
   11ed0:	ed835b00 	vstr	d5, [r3]
   11ed4:	ed836b02 	vstr	d6, [r3, #8]
   11ed8:	ed837b04 	vstr	d7, [r3, #16]

	return l_initState_bl;
   11edc:	e51b3008 	ldr	r3, [fp, #-8]
}
   11ee0:	e1a00003 	mov	r0, r3
   11ee4:	e24bd004 	sub	sp, fp, #4
   11ee8:	e8bd8800 	pop	{fp, pc}
   11eec:	0001bd70 	.word	0x0001bd70

00011ef0 <g_sigFil_readImuData_bl>:
 * CHANGELOG:
 * none
 * \endinternal
 ***********************************************************************/
void g_sigFil_readImuData_bl()
{
   11ef0:	e92d4810 	push	{r4, fp, lr}
   11ef4:	e28db008 	add	fp, sp, #8
   11ef8:	e24dd05c 	sub	sp, sp, #92	; 0x5c
	g_halImu_triggerImuReading_bl();
   11efc:	ebfff16a 	bl	e4ac <g_halImu_triggerImuReading_bl>
	m_sigFil_imuValues_st = g_halImu_getImuValues_str();
   11f00:	e59f40e8 	ldr	r4, [pc, #232]	; 11ff0 <g_sigFil_readImuData_bl+0x100>
   11f04:	e24b3064 	sub	r3, fp, #100	; 0x64
   11f08:	e1a00003 	mov	r0, r3
   11f0c:	ebfff0e8 	bl	e2b4 <g_halImu_getImuValues_str>
   11f10:	e1a01004 	mov	r1, r4
   11f14:	e24b2064 	sub	r2, fp, #100	; 0x64
   11f18:	e3a03058 	mov	r3, #88	; 0x58
   11f1c:	e1a00001 	mov	r0, r1
   11f20:	e1a01002 	mov	r1, r2
   11f24:	e1a02003 	mov	r2, r3
   11f28:	ebffdb55 	bl	8c84 <_init+0x170>

	m_sigFil_imuValues_st.acc.z_f64=-m_sigFil_imuValues_st.acc.z_f64;
   11f2c:	e59f30bc 	ldr	r3, [pc, #188]	; 11ff0 <g_sigFil_readImuData_bl+0x100>
   11f30:	ed937b04 	vldr	d7, [r3, #16]
   11f34:	eeb17b47 	vneg.f64	d7, d7
   11f38:	e59f30b0 	ldr	r3, [pc, #176]	; 11ff0 <g_sigFil_readImuData_bl+0x100>
   11f3c:	ed837b04 	vstr	d7, [r3, #16]
	m_sigFil_imuValues_st.mag.x_f64=m_sigFil_imuValues_st.mag.x_f64*1000000;
   11f40:	e59f30a8 	ldr	r3, [pc, #168]	; 11ff0 <g_sigFil_readImuData_bl+0x100>
   11f44:	ed936b06 	vldr	d6, [r3, #24]
   11f48:	ed9f7b26 	vldr	d7, [pc, #152]	; 11fe8 <g_sigFil_readImuData_bl+0xf8>
   11f4c:	ee267b07 	vmul.f64	d7, d6, d7
   11f50:	e59f3098 	ldr	r3, [pc, #152]	; 11ff0 <g_sigFil_readImuData_bl+0x100>
   11f54:	ed837b06 	vstr	d7, [r3, #24]
	m_sigFil_imuValues_st.mag.y_f64=m_sigFil_imuValues_st.mag.y_f64*1000000;
   11f58:	e59f3090 	ldr	r3, [pc, #144]	; 11ff0 <g_sigFil_readImuData_bl+0x100>
   11f5c:	ed936b08 	vldr	d6, [r3, #32]
   11f60:	ed9f7b20 	vldr	d7, [pc, #128]	; 11fe8 <g_sigFil_readImuData_bl+0xf8>
   11f64:	ee267b07 	vmul.f64	d7, d6, d7
   11f68:	e59f3080 	ldr	r3, [pc, #128]	; 11ff0 <g_sigFil_readImuData_bl+0x100>
   11f6c:	ed837b08 	vstr	d7, [r3, #32]
	m_sigFil_imuValues_st.mag.z_f64=-m_sigFil_imuValues_st.mag.z_f64*1000000;
   11f70:	e59f3078 	ldr	r3, [pc, #120]	; 11ff0 <g_sigFil_readImuData_bl+0x100>
   11f74:	ed937b0a 	vldr	d7, [r3, #40]	; 0x28
   11f78:	eeb16b47 	vneg.f64	d6, d7
   11f7c:	ed9f7b19 	vldr	d7, [pc, #100]	; 11fe8 <g_sigFil_readImuData_bl+0xf8>
   11f80:	ee267b07 	vmul.f64	d7, d6, d7
   11f84:	e59f3064 	ldr	r3, [pc, #100]	; 11ff0 <g_sigFil_readImuData_bl+0x100>
   11f88:	ed837b0a 	vstr	d7, [r3, #40]	; 0x28
	m_sigFil_imuValues_st.gyro.roll_f64=m_sigFil_imuValues_st.gyro.roll_f64-m_offsetGyro_st.roll_f64;
   11f8c:	e59f305c 	ldr	r3, [pc, #92]	; 11ff0 <g_sigFil_readImuData_bl+0x100>
   11f90:	ed936b0c 	vldr	d6, [r3, #48]	; 0x30
   11f94:	e59f3058 	ldr	r3, [pc, #88]	; 11ff4 <g_sigFil_readImuData_bl+0x104>
   11f98:	ed937b00 	vldr	d7, [r3]
   11f9c:	ee367b47 	vsub.f64	d7, d6, d7
   11fa0:	e59f3048 	ldr	r3, [pc, #72]	; 11ff0 <g_sigFil_readImuData_bl+0x100>
   11fa4:	ed837b0c 	vstr	d7, [r3, #48]	; 0x30
	m_sigFil_imuValues_st.gyro.pitch_f64=m_sigFil_imuValues_st.gyro.pitch_f64-m_offsetGyro_st.pitch_f64;
   11fa8:	e59f3040 	ldr	r3, [pc, #64]	; 11ff0 <g_sigFil_readImuData_bl+0x100>
   11fac:	ed936b0e 	vldr	d6, [r3, #56]	; 0x38
   11fb0:	e59f303c 	ldr	r3, [pc, #60]	; 11ff4 <g_sigFil_readImuData_bl+0x104>
   11fb4:	ed937b02 	vldr	d7, [r3, #8]
   11fb8:	ee367b47 	vsub.f64	d7, d6, d7
   11fbc:	e59f302c 	ldr	r3, [pc, #44]	; 11ff0 <g_sigFil_readImuData_bl+0x100>
   11fc0:	ed837b0e 	vstr	d7, [r3, #56]	; 0x38
	m_sigFil_imuValues_st.gyro.yaw_f64=m_sigFil_imuValues_st.gyro.yaw_f64-m_offsetGyro_st.yaw_f64;
   11fc4:	e59f3024 	ldr	r3, [pc, #36]	; 11ff0 <g_sigFil_readImuData_bl+0x100>
   11fc8:	ed936b10 	vldr	d6, [r3, #64]	; 0x40
   11fcc:	e59f3020 	ldr	r3, [pc, #32]	; 11ff4 <g_sigFil_readImuData_bl+0x104>
   11fd0:	ed937b04 	vldr	d7, [r3, #16]
   11fd4:	ee367b47 	vsub.f64	d7, d6, d7
   11fd8:	e59f3010 	ldr	r3, [pc, #16]	; 11ff0 <g_sigFil_readImuData_bl+0x100>
   11fdc:	ed837b10 	vstr	d7, [r3, #64]	; 0x40

}
   11fe0:	e24bd008 	sub	sp, fp, #8
   11fe4:	e8bd8810 	pop	{r4, fp, pc}
   11fe8:	00000000 	.word	0x00000000
   11fec:	412e8480 	.word	0x412e8480
   11ff0:	0001bd18 	.word	0x0001bd18
   11ff4:	0001bd70 	.word	0x0001bd70

00011ff8 <__libc_csu_init>:
   11ff8:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}
   11ffc:	e1a06000 	mov	r6, r0
   12000:	e59f5048 	ldr	r5, [pc, #72]	; 12050 <__libc_csu_init+0x58>
   12004:	e59fa048 	ldr	sl, [pc, #72]	; 12054 <__libc_csu_init+0x5c>
   12008:	e08f5005 	add	r5, pc, r5
   1200c:	e08fa00a 	add	sl, pc, sl
   12010:	e065a00a 	rsb	sl, r5, sl
   12014:	e1a07001 	mov	r7, r1
   12018:	e1a08002 	mov	r8, r2
   1201c:	ebffdabc 	bl	8b14 <_init>
   12020:	e1b0a14a 	asrs	sl, sl, #2
   12024:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, sl, pc}
   12028:	e3a04000 	mov	r4, #0
   1202c:	e4953004 	ldr	r3, [r5], #4
   12030:	e1a00006 	mov	r0, r6
   12034:	e1a01007 	mov	r1, r7
   12038:	e1a02008 	mov	r2, r8
   1203c:	e2844001 	add	r4, r4, #1
   12040:	e12fff33 	blx	r3
   12044:	e154000a 	cmp	r4, sl
   12048:	1afffff7 	bne	1202c <__libc_csu_init+0x34>
   1204c:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, sl, pc}
   12050:	00008ff0 	.word	0x00008ff0
   12054:	00008ff0 	.word	0x00008ff0

00012058 <__libc_csu_fini>:
   12058:	e12fff1e 	bx	lr

Disassembly of section .fini:

0001205c <_fini>:
   1205c:	e92d4008 	push	{r3, lr}
   12060:	e8bd8008 	pop	{r3, pc}
